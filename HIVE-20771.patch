diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/LazyBinaryNonPrimitive.java b/serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/LazyBinaryNonPrimitive.java
index 05d05c6af6..82946d3e1b 100644
--- a/serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/LazyBinaryNonPrimitive.java
+++ b/serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/LazyBinaryNonPrimitive.java
@@ -50,8 +50,8 @@ public void init(ByteArrayRef bytes, int start, int length) {
     if (null == bytes) {
       throw new RuntimeException("bytes cannot be null!");
     }
-    if (length <= 0) {
-      throw new RuntimeException("length should be positive!");
+    if (length < 0) {
+      throw new RuntimeException("length should be non-negative!");
     }
     this.bytes = bytes;
     this.start = start;
diff --git a/serde/src/test/org/apache/hadoop/hive/serde2/lazybinary/TestLazyBinaryStruct.java b/serde/src/test/org/apache/hadoop/hive/serde2/lazybinary/TestLazyBinaryStruct.java
new file mode 100644
index 0000000000..2a9286ff24
--- /dev/null
+++ b/serde/src/test/org/apache/hadoop/hive/serde2/lazybinary/TestLazyBinaryStruct.java
@@ -0,0 +1,47 @@
+package org.apache.hadoop.hive.serde2.lazybinary;
+
+import java.util.ArrayList;
+import java.util.Properties;
+import junit.framework.TestCase;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hive.serde.serdeConstants;
+import org.apache.hadoop.hive.serde2.SerDeException;
+import org.apache.hadoop.hive.serde2.SerDeUtils;
+import org.apache.hadoop.hive.serde2.lazy.ByteArrayRef;
+import org.apache.hadoop.hive.serde2.lazybinary.objectinspector.LazyBinaryObjectInspectorFactory;
+import org.apache.hadoop.hive.serde2.lazybinary.objectinspector.LazyBinaryStructObjectInspector;
+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;
+import org.apache.hadoop.hive.serde2.objectinspector.StandardStructObjectInspector;
+import org.apache.hadoop.io.Writable;
+
+public class TestLazyBinaryStruct extends TestCase {
+
+  public void testEmptyStruct() {
+    LazyBinaryStructObjectInspector oi = LazyBinaryObjectInspectorFactory
+        .getLazyBinaryStructObjectInspector(new ArrayList<>(), new ArrayList<>());
+
+    ByteArrayRef byteRef = new ByteArrayRef();
+    byteRef.setData(new byte[]{0});
+
+    LazyBinaryStruct data = (LazyBinaryStruct) LazyBinaryFactory.createLazyBinaryObject(oi);
+    data.init(byteRef, 0, 0);
+
+    assertEquals(data.getRawDataSerializedSize(), 0);
+  }
+
+  public void testEmptyStructWithSerde() throws SerDeException {
+    LazyBinaryStructObjectInspector oi = LazyBinaryObjectInspectorFactory
+        .getLazyBinaryStructObjectInspector(new ArrayList<>(), new ArrayList<>());
+    StandardStructObjectInspector standardOI = ObjectInspectorFactory
+        .getStandardStructObjectInspector(new ArrayList<>(), new ArrayList<>());
+    Properties schema = new Properties();
+    schema.setProperty(serdeConstants.LIST_COLUMNS, "col0");
+    schema.setProperty(serdeConstants.LIST_COLUMN_TYPES, "struct<>");
+
+    LazyBinarySerDe serde = new LazyBinarySerDe();
+    SerDeUtils.initializeSerDe(serde, new Configuration(), schema, null);
+    Writable writable = serde.serialize(standardOI.create(), standardOI);
+    Object out = serde.deserialize(writable);
+    assertNull(oi.getStructFieldsDataAsList(out));
+  }
+}
