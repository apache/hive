PREHOOK: query: DROP TABLE hbase_src
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE hbase_src
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE TABLE hbase_src(key STRING,
                       tinyint_col TINYINT,
                       smallint_col SMALLINT,
                       int_col INT,
                       bigint_col BIGINT,
                       float_col FLOAT,
                       double_col DOUBLE,
                       string_col STRING)
PREHOOK: type: CREATETABLE
POSTHOOK: query: CREATE TABLE hbase_src(key STRING,
                       tinyint_col TINYINT,
                       smallint_col SMALLINT,
                       int_col INT,
                       bigint_col BIGINT,
                       float_col FLOAT,
                       double_col DOUBLE,
                       string_col STRING)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@hbase_src
PREHOOK: query: INSERT OVERWRITE TABLE hbase_src
  SELECT key, key, key, key, key, key, key, value
  FROM src
  WHERE key = 125 OR key = 126 OR key = 127
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@hbase_src
POSTHOOK: query: INSERT OVERWRITE TABLE hbase_src
  SELECT key, key, key, key, key, key, key, value
  FROM src
  WHERE key = 125 OR key = 126 OR key = 127
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@hbase_src
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: DROP TABLE t_hbase_maps
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE t_hbase_maps
POSTHOOK: type: DROPTABLE
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: CREATE TABLE t_hbase_maps(key STRING,
                          tinyint_map_col MAP<TINYINT, TINYINT>,
                          smallint_map_col MAP<SMALLINT, SMALLINT>,
                          int_map_col MAP<INT, INT>,
                          bigint_map_col MAP<BIGINT, BIGINT>,
                          float_map_col MAP<FLOAT, FLOAT>,
                          double_map_col MAP<DOUBLE, DOUBLE>,
                          string_map_col MAP<STRING, STRING>,
                          boolean_map_col MAP<BOOLEAN, BOOLEAN>)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
WITH SERDEPROPERTIES ("hbase.columns.mapping"=":key,cf-tinyint:,cf-smallint:,cf-int:,cf-bigint:,cf-float:,cf-double:,cf-string:,cf-boolean:")
TBLPROPERTIES ("hbase.table.name"="t_hive_maps")
PREHOOK: type: CREATETABLE
POSTHOOK: query: CREATE TABLE t_hbase_maps(key STRING,
                          tinyint_map_col MAP<TINYINT, TINYINT>,
                          smallint_map_col MAP<SMALLINT, SMALLINT>,
                          int_map_col MAP<INT, INT>,
                          bigint_map_col MAP<BIGINT, BIGINT>,
                          float_map_col MAP<FLOAT, FLOAT>,
                          double_map_col MAP<DOUBLE, DOUBLE>,
                          string_map_col MAP<STRING, STRING>,
                          boolean_map_col MAP<BOOLEAN, BOOLEAN>)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
WITH SERDEPROPERTIES ("hbase.columns.mapping"=":key,cf-tinyint:,cf-smallint:,cf-int:,cf-bigint:,cf-float:,cf-double:,cf-string:,cf-boolean:")
TBLPROPERTIES ("hbase.table.name"="t_hive_maps")
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@t_hbase_maps
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: INSERT OVERWRITE TABLE t_hbase_maps
  SELECT key,
         map(tinyint_col, tinyint_col),
         map(smallint_col, smallint_col),
         map(int_col, int_col),
         map(bigint_col, bigint_col),
         map(float_col, float_col),
         map(double_col, double_col),
         map(key, string_col),
         map(true, true)
  FROM hbase_src
  WHERE key = 125
PREHOOK: type: QUERY
PREHOOK: Input: default@hbase_src
PREHOOK: Output: default@t_hbase_maps
POSTHOOK: query: INSERT OVERWRITE TABLE t_hbase_maps
  SELECT key,
         map(tinyint_col, tinyint_col),
         map(smallint_col, smallint_col),
         map(int_col, int_col),
         map(bigint_col, bigint_col),
         map(float_col, float_col),
         map(double_col, double_col),
         map(key, string_col),
         map(true, true)
  FROM hbase_src
  WHERE key = 125
POSTHOOK: type: QUERY
POSTHOOK: Input: default@hbase_src
POSTHOOK: Output: default@t_hbase_maps
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: INSERT OVERWRITE TABLE t_hbase_maps
  SELECT key,
         map(tinyint_col, tinyint_col),
         map(smallint_col, smallint_col),
         map(int_col, int_col),
         map(bigint_col, bigint_col),
         map(float_col, float_col),
         map(double_col, double_col),
         map(key, string_col),
         map(false, false)
  FROM hbase_src
  WHERE key = 126
PREHOOK: type: QUERY
PREHOOK: Input: default@hbase_src
PREHOOK: Output: default@t_hbase_maps
POSTHOOK: query: INSERT OVERWRITE TABLE t_hbase_maps
  SELECT key,
         map(tinyint_col, tinyint_col),
         map(smallint_col, smallint_col),
         map(int_col, int_col),
         map(bigint_col, bigint_col),
         map(float_col, float_col),
         map(double_col, double_col),
         map(key, string_col),
         map(false, false)
  FROM hbase_src
  WHERE key = 126
POSTHOOK: type: QUERY
POSTHOOK: Input: default@hbase_src
POSTHOOK: Output: default@t_hbase_maps
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: SELECT * FROM t_hbase_maps ORDER BY key
PREHOOK: type: QUERY
PREHOOK: Input: default@t_hbase_maps
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM t_hbase_maps ORDER BY key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t_hbase_maps
#### A masked pattern was here ####
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
125	{125:125}	{125:125}	{125:125}	{125:125}	{125.0:125.0}	{125.0:125.0}	{"125":"val_125"}	{true:true}
126	{126:126}	{126:126}	{126:126}	{126:126}	{126.0:126.0}	{126.0:126.0}	{"126":"val_126"}	{false:false}
PREHOOK: query: DROP TABLE t_ext_hbase_maps
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE t_ext_hbase_maps
POSTHOOK: type: DROPTABLE
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: CREATE EXTERNAL TABLE t_ext_hbase_maps(key STRING,
                                       tinyint_map_col MAP<TINYINT, TINYINT>,
                                       smallint_map_col MAP<SMALLINT, SMALLINT>,
                                       int_map_col MAP<INT, INT>,
                                       bigint_map_col MAP<BIGINT, BIGINT>,
                                       float_map_col MAP<FLOAT, FLOAT>,
                                       double_map_col MAP<DOUBLE, DOUBLE>,
                                       string_map_col MAP<STRING, STRING>,
                                       boolean_map_col MAP<BOOLEAN, BOOLEAN>)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
WITH SERDEPROPERTIES ("hbase.columns.mapping"=":key,cf-tinyint:,cf-smallint:,cf-int:,cf-bigint:,cf-float:,cf-double:,cf-string:,cf-boolean:")
TBLPROPERTIES ("hbase.table.name"="t_hive_maps")
PREHOOK: type: CREATETABLE
POSTHOOK: query: CREATE EXTERNAL TABLE t_ext_hbase_maps(key STRING,
                                       tinyint_map_col MAP<TINYINT, TINYINT>,
                                       smallint_map_col MAP<SMALLINT, SMALLINT>,
                                       int_map_col MAP<INT, INT>,
                                       bigint_map_col MAP<BIGINT, BIGINT>,
                                       float_map_col MAP<FLOAT, FLOAT>,
                                       double_map_col MAP<DOUBLE, DOUBLE>,
                                       string_map_col MAP<STRING, STRING>,
                                       boolean_map_col MAP<BOOLEAN, BOOLEAN>)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
WITH SERDEPROPERTIES ("hbase.columns.mapping"=":key,cf-tinyint:,cf-smallint:,cf-int:,cf-bigint:,cf-float:,cf-double:,cf-string:,cf-boolean:")
TBLPROPERTIES ("hbase.table.name"="t_hive_maps")
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@t_ext_hbase_maps
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: SELECT * FROM t_ext_hbase_maps ORDER BY key
PREHOOK: type: QUERY
PREHOOK: Input: default@t_ext_hbase_maps
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM t_ext_hbase_maps ORDER BY key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t_ext_hbase_maps
#### A masked pattern was here ####
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
125	{125:125}	{125:125}	{125:125}	{125:125}	{125.0:125.0}	{125.0:125.0}	{"125":"val_125"}	{true:true}
126	{126:126}	{126:126}	{126:126}	{126:126}	{126.0:126.0}	{126.0:126.0}	{"126":"val_126"}	{false:false}
PREHOOK: query: DROP TABLE t_ext_hbase_maps
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t_ext_hbase_maps
PREHOOK: Output: default@t_ext_hbase_maps
POSTHOOK: query: DROP TABLE t_ext_hbase_maps
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t_ext_hbase_maps
POSTHOOK: Output: default@t_ext_hbase_maps
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: DROP TABLE t_ext_hbase_maps_1
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE t_ext_hbase_maps_1
POSTHOOK: type: DROPTABLE
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: CREATE EXTERNAL TABLE t_ext_hbase_maps_1(key STRING,
                                         tinyint_map_col MAP<TINYINT, TINYINT>,
                                         smallint_map_col MAP<SMALLINT, SMALLINT>,
                                         int_map_col MAP<INT, INT>,
                                         bigint_map_col MAP<BIGINT, BIGINT>,
                                         float_map_col MAP<FLOAT, FLOAT>,
                                         double_map_col MAP<DOUBLE, DOUBLE>,
                                         string_map_col MAP<STRING, STRING>,
                                         boolean_map_col MAP<BOOLEAN, BOOLEAN>)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
WITH SERDEPROPERTIES ("hbase.columns.mapping"=":key#b,cf-tinyint:#bi:bi,cf-smallint:#bin:bin,cf-int:#bina:bina,cf-bigint:#binar:binar,cf-float:#binary:binary,cf-double:#b:b,cf-string:#bi:bi,cf-boolean:#bin:bin")
TBLPROPERTIES ("hbase.table.name"="t_hive_maps")
PREHOOK: type: CREATETABLE
POSTHOOK: query: CREATE EXTERNAL TABLE t_ext_hbase_maps_1(key STRING,
                                         tinyint_map_col MAP<TINYINT, TINYINT>,
                                         smallint_map_col MAP<SMALLINT, SMALLINT>,
                                         int_map_col MAP<INT, INT>,
                                         bigint_map_col MAP<BIGINT, BIGINT>,
                                         float_map_col MAP<FLOAT, FLOAT>,
                                         double_map_col MAP<DOUBLE, DOUBLE>,
                                         string_map_col MAP<STRING, STRING>,
                                         boolean_map_col MAP<BOOLEAN, BOOLEAN>)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
WITH SERDEPROPERTIES ("hbase.columns.mapping"=":key#b,cf-tinyint:#bi:bi,cf-smallint:#bin:bin,cf-int:#bina:bina,cf-bigint:#binar:binar,cf-float:#binary:binary,cf-double:#b:b,cf-string:#bi:bi,cf-boolean:#bin:bin")
TBLPROPERTIES ("hbase.table.name"="t_hive_maps")
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@t_ext_hbase_maps_1
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: SELECT * FROM t_ext_hbase_maps_1 ORDER BY key
PREHOOK: type: QUERY
PREHOOK: Input: default@t_ext_hbase_maps_1
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM t_ext_hbase_maps_1 ORDER BY key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t_ext_hbase_maps_1
#### A masked pattern was here ####
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
125	{49:49}	{12594:12594}	{}	{}	{2.5932638E-9:2.5932638E-9}	{}	{"125":"val_125"}	{true:true}
126	{49:49}	{12594:12594}	{}	{}	{2.5933207E-9:2.5933207E-9}	{}	{"126":"val_126"}	{true:true}
PREHOOK: query: DROP TABLE t_ext_hbase_maps_1
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t_ext_hbase_maps_1
PREHOOK: Output: default@t_ext_hbase_maps_1
POSTHOOK: query: DROP TABLE t_ext_hbase_maps_1
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t_ext_hbase_maps_1
POSTHOOK: Output: default@t_ext_hbase_maps_1
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: DROP TABLE t_ext_hbase_maps_2
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE t_ext_hbase_maps_2
POSTHOOK: type: DROPTABLE
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: CREATE EXTERNAL TABLE t_ext_hbase_maps_2(key STRING,
                                         tinyint_map_col MAP<TINYINT, TINYINT>,
                                         smallint_map_col MAP<SMALLINT, SMALLINT>,
                                         int_map_col MAP<INT, INT>,
                                         bigint_map_col MAP<BIGINT, BIGINT>,
                                         float_map_col MAP<FLOAT, FLOAT>,
                                         double_map_col MAP<DOUBLE, DOUBLE>,
                                         string_map_col MAP<STRING, STRING>,
                                         boolean_map_col MAP<BOOLEAN, BOOLEAN>)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
WITH SERDEPROPERTIES ("hbase.columns.mapping"=":key,cf-tinyint:,cf-smallint:,cf-int:,cf-bigint:,cf-float:,cf-double:,cf-string:,cf-boolean:")
TBLPROPERTIES (
"hbase.table.name"="t_hive_maps",
"hbase.table.default.storage.type"="binary")
PREHOOK: type: CREATETABLE
POSTHOOK: query: CREATE EXTERNAL TABLE t_ext_hbase_maps_2(key STRING,
                                         tinyint_map_col MAP<TINYINT, TINYINT>,
                                         smallint_map_col MAP<SMALLINT, SMALLINT>,
                                         int_map_col MAP<INT, INT>,
                                         bigint_map_col MAP<BIGINT, BIGINT>,
                                         float_map_col MAP<FLOAT, FLOAT>,
                                         double_map_col MAP<DOUBLE, DOUBLE>,
                                         string_map_col MAP<STRING, STRING>,
                                         boolean_map_col MAP<BOOLEAN, BOOLEAN>)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
WITH SERDEPROPERTIES ("hbase.columns.mapping"=":key,cf-tinyint:,cf-smallint:,cf-int:,cf-bigint:,cf-float:,cf-double:,cf-string:,cf-boolean:")
TBLPROPERTIES (
"hbase.table.name"="t_hive_maps",
"hbase.table.default.storage.type"="binary")
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@t_ext_hbase_maps_2
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: SELECT * FROM t_ext_hbase_maps_2 ORDER BY key
PREHOOK: type: QUERY
PREHOOK: Input: default@t_ext_hbase_maps_2
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM t_ext_hbase_maps_2 ORDER BY key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t_ext_hbase_maps_2
#### A masked pattern was here ####
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
125	{49:49}	{12594:12594}	{}	{}	{2.5932638E-9:2.5932638E-9}	{}	{"125":"val_125"}	{true:true}
126	{49:49}	{12594:12594}	{}	{}	{2.5933207E-9:2.5933207E-9}	{}	{"126":"val_126"}	{true:true}
PREHOOK: query: DROP TABLE t_ext_hbase_maps_2
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t_ext_hbase_maps_2
PREHOOK: Output: default@t_ext_hbase_maps_2
POSTHOOK: query: DROP TABLE t_ext_hbase_maps_2
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t_ext_hbase_maps_2
POSTHOOK: Output: default@t_ext_hbase_maps_2
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: DROP TABLE t_hbase_maps_1
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE t_hbase_maps_1
POSTHOOK: type: DROPTABLE
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: CREATE TABLE t_hbase_maps_1(key STRING,
                            tinyint_map_col MAP<TINYINT, TINYINT>,
                            smallint_map_col MAP<SMALLINT, SMALLINT>,
                            int_map_col MAP<INT, INT>,
                            bigint_map_col MAP<BIGINT, BIGINT>,
                            float_map_col MAP<FLOAT, FLOAT>,
                            double_map_col MAP<DOUBLE, DOUBLE>,
                            string_map_col MAP<STRING, STRING>,
                            boolean_map_col MAP<BOOLEAN, BOOLEAN>)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
WITH SERDEPROPERTIES ("hbase.columns.mapping"=":key#b,cf-tinyint:#b:b,cf-smallint:#b:b,cf-int:#b:b,cf-bigint:#b:b,cf-float:#b:b,cf-double:#b:b,cf-string:#b:b,cf-boolean:#b:b")
TBLPROPERTIES ("hbase.table.name"="t_hive_maps_1")
PREHOOK: type: CREATETABLE
POSTHOOK: query: CREATE TABLE t_hbase_maps_1(key STRING,
                            tinyint_map_col MAP<TINYINT, TINYINT>,
                            smallint_map_col MAP<SMALLINT, SMALLINT>,
                            int_map_col MAP<INT, INT>,
                            bigint_map_col MAP<BIGINT, BIGINT>,
                            float_map_col MAP<FLOAT, FLOAT>,
                            double_map_col MAP<DOUBLE, DOUBLE>,
                            string_map_col MAP<STRING, STRING>,
                            boolean_map_col MAP<BOOLEAN, BOOLEAN>)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
WITH SERDEPROPERTIES ("hbase.columns.mapping"=":key#b,cf-tinyint:#b:b,cf-smallint:#b:b,cf-int:#b:b,cf-bigint:#b:b,cf-float:#b:b,cf-double:#b:b,cf-string:#b:b,cf-boolean:#b:b")
TBLPROPERTIES ("hbase.table.name"="t_hive_maps_1")
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@t_hbase_maps_1
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: INSERT OVERWRITE TABLE t_hbase_maps_1
  SELECT key,
         map(tinyint_col, tinyint_col),
         map(smallint_col, smallint_col),
         map(int_col, int_col),
         map(bigint_col, bigint_col),
         map(float_col, float_col),
         map(double_col, double_col),
         map(key, string_col),
         map(true, true)
  FROM hbase_src
  WHERE key = 125
PREHOOK: type: QUERY
PREHOOK: Input: default@hbase_src
PREHOOK: Output: default@t_hbase_maps_1
POSTHOOK: query: INSERT OVERWRITE TABLE t_hbase_maps_1
  SELECT key,
         map(tinyint_col, tinyint_col),
         map(smallint_col, smallint_col),
         map(int_col, int_col),
         map(bigint_col, bigint_col),
         map(float_col, float_col),
         map(double_col, double_col),
         map(key, string_col),
         map(true, true)
  FROM hbase_src
  WHERE key = 125
POSTHOOK: type: QUERY
POSTHOOK: Input: default@hbase_src
POSTHOOK: Output: default@t_hbase_maps_1
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: INSERT OVERWRITE TABLE t_hbase_maps_1
  SELECT key,
         map(tinyint_col, tinyint_col),
         map(smallint_col, smallint_col),
         map(int_col, int_col),
         map(bigint_col, bigint_col),
         map(float_col, float_col),
         map(double_col, double_col),
         map(key, string_col),
         map(false, false)
  FROM hbase_src
  WHERE key = 126
PREHOOK: type: QUERY
PREHOOK: Input: default@hbase_src
PREHOOK: Output: default@t_hbase_maps_1
POSTHOOK: query: INSERT OVERWRITE TABLE t_hbase_maps_1
  SELECT key,
         map(tinyint_col, tinyint_col),
         map(smallint_col, smallint_col),
         map(int_col, int_col),
         map(bigint_col, bigint_col),
         map(float_col, float_col),
         map(double_col, double_col),
         map(key, string_col),
         map(false, false)
  FROM hbase_src
  WHERE key = 126
POSTHOOK: type: QUERY
POSTHOOK: Input: default@hbase_src
POSTHOOK: Output: default@t_hbase_maps_1
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: SELECT * FROM t_hbase_maps_1 ORDER BY key
PREHOOK: type: QUERY
PREHOOK: Input: default@t_hbase_maps_1
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM t_hbase_maps_1 ORDER BY key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t_hbase_maps_1
#### A masked pattern was here ####
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
125	{125:125}	{125:125}	{125:125}	{125:125}	{125.0:125.0}	{125.0:125.0}	{"125":"val_125"}	{true:true}
126	{126:126}	{126:126}	{126:126}	{126:126}	{126.0:126.0}	{126.0:126.0}	{"126":"val_126"}	{false:false}
PREHOOK: query: DROP TABLE t_ext_hbase_maps_3
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE t_ext_hbase_maps_3
POSTHOOK: type: DROPTABLE
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: CREATE EXTERNAL TABLE t_ext_hbase_maps_3(key STRING,
                                         tinyint_map_col MAP<TINYINT, TINYINT>,
                                         smallint_map_col MAP<SMALLINT, SMALLINT>,
                                         int_map_col MAP<INT, INT>,
                                         bigint_map_col MAP<BIGINT, BIGINT>,
                                         float_map_col MAP<FLOAT, FLOAT>,
                                         double_map_col MAP<DOUBLE, DOUBLE>,
                                         string_map_col MAP<STRING, STRING>,
                                         boolean_map_col MAP<BOOLEAN, BOOLEAN>)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
WITH SERDEPROPERTIES ("hbase.columns.mapping"=":key#b,cf-tinyint:#bi:bi,cf-smallint:#bin:bin,cf-int:#bina:bina,cf-bigint:#binar:binar,cf-float:#binary:binary,cf-double:#b:b,cf-string:#bi:bi,cf-boolean:#bin:bin")
TBLPROPERTIES ("hbase.table.name"="t_hive_maps_1")
PREHOOK: type: CREATETABLE
POSTHOOK: query: CREATE EXTERNAL TABLE t_ext_hbase_maps_3(key STRING,
                                         tinyint_map_col MAP<TINYINT, TINYINT>,
                                         smallint_map_col MAP<SMALLINT, SMALLINT>,
                                         int_map_col MAP<INT, INT>,
                                         bigint_map_col MAP<BIGINT, BIGINT>,
                                         float_map_col MAP<FLOAT, FLOAT>,
                                         double_map_col MAP<DOUBLE, DOUBLE>,
                                         string_map_col MAP<STRING, STRING>,
                                         boolean_map_col MAP<BOOLEAN, BOOLEAN>)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
WITH SERDEPROPERTIES ("hbase.columns.mapping"=":key#b,cf-tinyint:#bi:bi,cf-smallint:#bin:bin,cf-int:#bina:bina,cf-bigint:#binar:binar,cf-float:#binary:binary,cf-double:#b:b,cf-string:#bi:bi,cf-boolean:#bin:bin")
TBLPROPERTIES ("hbase.table.name"="t_hive_maps_1")
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@t_ext_hbase_maps_3
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: SELECT * FROM t_ext_hbase_maps_3 ORDER BY key
PREHOOK: type: QUERY
PREHOOK: Input: default@t_ext_hbase_maps_3
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM t_ext_hbase_maps_3 ORDER BY key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t_ext_hbase_maps_3
#### A masked pattern was here ####
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
125	{125:125}	{125:125}	{125:125}	{125:125}	{125.0:125.0}	{125.0:125.0}	{"125":"val_125"}	{true:true}
126	{126:126}	{126:126}	{126:126}	{126:126}	{126.0:126.0}	{126.0:126.0}	{"126":"val_126"}	{false:false}
PREHOOK: query: DROP TABLE t_ext_hbase_maps_3
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t_ext_hbase_maps_3
PREHOOK: Output: default@t_ext_hbase_maps_3
POSTHOOK: query: DROP TABLE t_ext_hbase_maps_3
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t_ext_hbase_maps_3
POSTHOOK: Output: default@t_ext_hbase_maps_3
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: DROP TABLE t_ext_hbase_maps_4
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE t_ext_hbase_maps_4
POSTHOOK: type: DROPTABLE
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: CREATE EXTERNAL TABLE t_ext_hbase_maps_4(key STRING,
                                         tinyint_map_col MAP<TINYINT, TINYINT>,
                                         smallint_map_col MAP<SMALLINT, SMALLINT>,
                                         int_map_col MAP<INT, INT>,
                                         bigint_map_col MAP<BIGINT, BIGINT>,
                                         float_map_col MAP<FLOAT, FLOAT>,
                                         double_map_col MAP<DOUBLE, DOUBLE>,
                                         string_map_col MAP<STRING, STRING>,
                                         boolean_map_col MAP<BOOLEAN, BOOLEAN>)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
WITH SERDEPROPERTIES ("hbase.columns.mapping"=":key,cf-tinyint:,cf-smallint:,cf-int:,cf-bigint:,cf-float:,cf-double:,cf-string:,cf-boolean:")
TBLPROPERTIES ("hbase.table.name"="t_hive_maps_1")
PREHOOK: type: CREATETABLE
POSTHOOK: query: CREATE EXTERNAL TABLE t_ext_hbase_maps_4(key STRING,
                                         tinyint_map_col MAP<TINYINT, TINYINT>,
                                         smallint_map_col MAP<SMALLINT, SMALLINT>,
                                         int_map_col MAP<INT, INT>,
                                         bigint_map_col MAP<BIGINT, BIGINT>,
                                         float_map_col MAP<FLOAT, FLOAT>,
                                         double_map_col MAP<DOUBLE, DOUBLE>,
                                         string_map_col MAP<STRING, STRING>,
                                         boolean_map_col MAP<BOOLEAN, BOOLEAN>)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
WITH SERDEPROPERTIES ("hbase.columns.mapping"=":key,cf-tinyint:,cf-smallint:,cf-int:,cf-bigint:,cf-float:,cf-double:,cf-string:,cf-boolean:")
TBLPROPERTIES ("hbase.table.name"="t_hive_maps_1")
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@t_ext_hbase_maps_4
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: SELECT * FROM t_ext_hbase_maps_4 ORDER BY key
PREHOOK: type: QUERY
PREHOOK: Input: default@t_ext_hbase_maps_4
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM t_ext_hbase_maps_4 ORDER BY key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t_ext_hbase_maps_4
#### A masked pattern was here ####
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
125	{}	{}	{}	{}	{}	{}	{"125":"val_125"}	{}
126	{}	{}	{}	{}	{}	{}	{"126":"val_126"}	{}
PREHOOK: query: DROP TABLE t_ext_hbase_maps_4
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t_ext_hbase_maps_4
PREHOOK: Output: default@t_ext_hbase_maps_4
POSTHOOK: query: DROP TABLE t_ext_hbase_maps_4
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t_ext_hbase_maps_4
POSTHOOK: Output: default@t_ext_hbase_maps_4
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: DROP TABLE t_ext_hbase_maps_5
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE t_ext_hbase_maps_5
POSTHOOK: type: DROPTABLE
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: CREATE EXTERNAL TABLE t_ext_hbase_maps_5(key STRING,
                                         tinyint_map_col MAP<TINYINT, TINYINT>,
                                         smallint_map_col MAP<SMALLINT, SMALLINT>,
                                         int_map_col MAP<INT, INT>,
                                         bigint_map_col MAP<BIGINT, BIGINT>,
                                         float_map_col MAP<FLOAT, FLOAT>,
                                         double_map_col MAP<DOUBLE, DOUBLE>,
                                         string_map_col MAP<STRING, STRING>,
                                         boolean_map_col MAP<BOOLEAN, BOOLEAN>)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
WITH SERDEPROPERTIES ("hbase.columns.mapping"=":key,cf-tinyint:,cf-smallint:,cf-int:,cf-bigint:,cf-float:,cf-double:,cf-string:,cf-boolean:")
TBLPROPERTIES (
"hbase.table.name"="t_hive_maps_1",
"hbase.table.default.storage.type"="binary")
PREHOOK: type: CREATETABLE
POSTHOOK: query: CREATE EXTERNAL TABLE t_ext_hbase_maps_5(key STRING,
                                         tinyint_map_col MAP<TINYINT, TINYINT>,
                                         smallint_map_col MAP<SMALLINT, SMALLINT>,
                                         int_map_col MAP<INT, INT>,
                                         bigint_map_col MAP<BIGINT, BIGINT>,
                                         float_map_col MAP<FLOAT, FLOAT>,
                                         double_map_col MAP<DOUBLE, DOUBLE>,
                                         string_map_col MAP<STRING, STRING>,
                                         boolean_map_col MAP<BOOLEAN, BOOLEAN>)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
WITH SERDEPROPERTIES ("hbase.columns.mapping"=":key,cf-tinyint:,cf-smallint:,cf-int:,cf-bigint:,cf-float:,cf-double:,cf-string:,cf-boolean:")
TBLPROPERTIES (
"hbase.table.name"="t_hive_maps_1",
"hbase.table.default.storage.type"="binary")
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@t_ext_hbase_maps_5
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: SELECT * FROM t_ext_hbase_maps_5 ORDER BY key
PREHOOK: type: QUERY
PREHOOK: Input: default@t_ext_hbase_maps_5
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM t_ext_hbase_maps_5 ORDER BY key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t_ext_hbase_maps_5
#### A masked pattern was here ####
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
125	{125:125}	{125:125}	{125:125}	{125:125}	{125.0:125.0}	{125.0:125.0}	{"125":"val_125"}	{true:true}
126	{126:126}	{126:126}	{126:126}	{126:126}	{126.0:126.0}	{126.0:126.0}	{"126":"val_126"}	{false:false}
PREHOOK: query: DROP TABLE t_ext_hbase_maps_5
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t_ext_hbase_maps_5
PREHOOK: Output: default@t_ext_hbase_maps_5
POSTHOOK: query: DROP TABLE t_ext_hbase_maps_5
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t_ext_hbase_maps_5
POSTHOOK: Output: default@t_ext_hbase_maps_5
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: DROP TABLE t_hbase_maps_1
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t_hbase_maps_1
PREHOOK: Output: default@t_hbase_maps_1
POSTHOOK: query: DROP TABLE t_hbase_maps_1
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t_hbase_maps_1
POSTHOOK: Output: default@t_hbase_maps_1
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: DROP TABLE t_hbase_maps
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t_hbase_maps
PREHOOK: Output: default@t_hbase_maps
POSTHOOK: query: DROP TABLE t_hbase_maps
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t_hbase_maps
POSTHOOK: Output: default@t_hbase_maps
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: DROP TABLE hbase_src
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@hbase_src
PREHOOK: Output: default@hbase_src
POSTHOOK: query: DROP TABLE hbase_src
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@hbase_src
POSTHOOK: Output: default@hbase_src
POSTHOOK: Lineage: hbase_src.bigint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.double_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.float_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.int_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.smallint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.string_col SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: hbase_src.tinyint_col EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
