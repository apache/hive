package org.apache.hadoop.hive.cli;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

import java.io.*;
import java.util.*;

import org.apache.hadoop.hive.hbase.HBaseQTestUtil;
import org.apache.hadoop.hive.hbase.HBaseTestSetup;

public class $className extends TestCase {

  private HBaseQTestUtil qt;
  private HBaseTestSetup setup;

  public $className(String name, HBaseTestSetup setup) {
    super(name);
    qt = null;
    this.setup = setup;
  }

  @Override
  protected void setUp() {
    try {
      boolean miniMR = false;
      if ("$clusterMode".equals("miniMR")) {
        miniMR = true;
      }

      qt = new HBaseQTestUtil("$resultsDir", "$logDir", miniMR, setup);

    } catch (Exception e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.flush();
      fail("Unexpected exception in setup");
    }
  }

  @Override
  protected void tearDown() {
    try {
      qt.shutdown();
    }
    catch (Exception e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.flush();
      fail("Unexpected exception in tearDown");
    }
  }

  public static Test suite() {
    TestSuite suite = new TestSuite();
    HBaseTestSetup setup = new HBaseTestSetup(suite);
#foreach ($qf in $qfiles)
  #set ($fname = $qf.getName())
  #set ($eidx = $fname.indexOf('.'))
  #set ($tname = $fname.substring(0, $eidx))
    suite.addTest(new $className("testCliDriver_$tname", setup));
#end
    return setup;
  }

#foreach ($qf in $qfiles)
  #set ($fname = $qf.getName())
  #set ($eidx = $fname.indexOf('.'))
  #set ($tname = $fname.substring(0, $eidx))
  #set ($fpath = $qf.getCanonicalPath())
  public void testCliDriver_$tname() throws Exception {
    runTest("$tname", "$fname", "$fpath");
  }

#end

  private void runTest(String tname, String fname, String fpath) throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + fname);

      qt.addFile(fpath);

      if (qt.shouldBeSkipped(fname)) {
        System.out.println("Test " + fname + " skipped");
        return;
      }

      qt.cliInit(fname);
      qt.clearTestSideEffects();
      int ecode = qt.executeClient(fname);
      if (ecode == 0) {
        fail("Client Execution failed with error code = " + ecode);
      }

      ecode = qt.checkCliDriverResults(fname);
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode);
      }
      qt.clearPostTestEffects();

    } catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + fname);
      System.out.flush();
      fail("Unexpected exception");
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + fname + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }
}

