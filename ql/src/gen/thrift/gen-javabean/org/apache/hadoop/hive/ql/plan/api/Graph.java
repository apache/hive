/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.ql.plan.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)")
public class Graph implements org.apache.thrift.TBase<Graph, Graph._Fields>, java.io.Serializable, Cloneable, Comparable<Graph> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Graph");

  private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ROOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("roots", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ADJACENCY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("adjacencyList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GraphStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GraphTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable NodeType nodeType; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> roots; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<Adjacency> adjacencyList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see NodeType
     */
    NODE_TYPE((short)1, "nodeType"),
    ROOTS((short)2, "roots"),
    ADJACENCY_LIST((short)3, "adjacencyList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_TYPE
          return NODE_TYPE;
        case 2: // ROOTS
          return ROOTS;
        case 3: // ADJACENCY_LIST
          return ADJACENCY_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("nodeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NodeType.class)));
    tmpMap.put(_Fields.ROOTS, new org.apache.thrift.meta_data.FieldMetaData("roots", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ADJACENCY_LIST, new org.apache.thrift.meta_data.FieldMetaData("adjacencyList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Adjacency.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Graph.class, metaDataMap);
  }

  public Graph() {
  }

  public Graph(
    NodeType nodeType,
    java.util.List<java.lang.String> roots,
    java.util.List<Adjacency> adjacencyList)
  {
    this();
    this.nodeType = nodeType;
    this.roots = roots;
    this.adjacencyList = adjacencyList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Graph(Graph other) {
    if (other.isSetNodeType()) {
      this.nodeType = other.nodeType;
    }
    if (other.isSetRoots()) {
      java.util.List<java.lang.String> __this__roots = new java.util.ArrayList<java.lang.String>(other.roots);
      this.roots = __this__roots;
    }
    if (other.isSetAdjacencyList()) {
      java.util.List<Adjacency> __this__adjacencyList = new java.util.ArrayList<Adjacency>(other.adjacencyList.size());
      for (Adjacency other_element : other.adjacencyList) {
        __this__adjacencyList.add(new Adjacency(other_element));
      }
      this.adjacencyList = __this__adjacencyList;
    }
  }

  public Graph deepCopy() {
    return new Graph(this);
  }

  @Override
  public void clear() {
    this.nodeType = null;
    this.roots = null;
    this.adjacencyList = null;
  }

  /**
   * 
   * @see NodeType
   */
  @org.apache.thrift.annotation.Nullable
  public NodeType getNodeType() {
    return this.nodeType;
  }

  /**
   * 
   * @see NodeType
   */
  public void setNodeType(@org.apache.thrift.annotation.Nullable NodeType nodeType) {
    this.nodeType = nodeType;
  }

  public void unsetNodeType() {
    this.nodeType = null;
  }

  /** Returns true if field nodeType is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeType() {
    return this.nodeType != null;
  }

  public void setNodeTypeIsSet(boolean value) {
    if (!value) {
      this.nodeType = null;
    }
  }

  public int getRootsSize() {
    return (this.roots == null) ? 0 : this.roots.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getRootsIterator() {
    return (this.roots == null) ? null : this.roots.iterator();
  }

  public void addToRoots(java.lang.String elem) {
    if (this.roots == null) {
      this.roots = new java.util.ArrayList<java.lang.String>();
    }
    this.roots.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getRoots() {
    return this.roots;
  }

  public void setRoots(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> roots) {
    this.roots = roots;
  }

  public void unsetRoots() {
    this.roots = null;
  }

  /** Returns true if field roots is set (has been assigned a value) and false otherwise */
  public boolean isSetRoots() {
    return this.roots != null;
  }

  public void setRootsIsSet(boolean value) {
    if (!value) {
      this.roots = null;
    }
  }

  public int getAdjacencyListSize() {
    return (this.adjacencyList == null) ? 0 : this.adjacencyList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Adjacency> getAdjacencyListIterator() {
    return (this.adjacencyList == null) ? null : this.adjacencyList.iterator();
  }

  public void addToAdjacencyList(Adjacency elem) {
    if (this.adjacencyList == null) {
      this.adjacencyList = new java.util.ArrayList<Adjacency>();
    }
    this.adjacencyList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Adjacency> getAdjacencyList() {
    return this.adjacencyList;
  }

  public void setAdjacencyList(@org.apache.thrift.annotation.Nullable java.util.List<Adjacency> adjacencyList) {
    this.adjacencyList = adjacencyList;
  }

  public void unsetAdjacencyList() {
    this.adjacencyList = null;
  }

  /** Returns true if field adjacencyList is set (has been assigned a value) and false otherwise */
  public boolean isSetAdjacencyList() {
    return this.adjacencyList != null;
  }

  public void setAdjacencyListIsSet(boolean value) {
    if (!value) {
      this.adjacencyList = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NODE_TYPE:
      if (value == null) {
        unsetNodeType();
      } else {
        setNodeType((NodeType)value);
      }
      break;

    case ROOTS:
      if (value == null) {
        unsetRoots();
      } else {
        setRoots((java.util.List<java.lang.String>)value);
      }
      break;

    case ADJACENCY_LIST:
      if (value == null) {
        unsetAdjacencyList();
      } else {
        setAdjacencyList((java.util.List<Adjacency>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_TYPE:
      return getNodeType();

    case ROOTS:
      return getRoots();

    case ADJACENCY_LIST:
      return getAdjacencyList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NODE_TYPE:
      return isSetNodeType();
    case ROOTS:
      return isSetRoots();
    case ADJACENCY_LIST:
      return isSetAdjacencyList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Graph)
      return this.equals((Graph)that);
    return false;
  }

  public boolean equals(Graph that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_nodeType = true && this.isSetNodeType();
    boolean that_present_nodeType = true && that.isSetNodeType();
    if (this_present_nodeType || that_present_nodeType) {
      if (!(this_present_nodeType && that_present_nodeType))
        return false;
      if (!this.nodeType.equals(that.nodeType))
        return false;
    }

    boolean this_present_roots = true && this.isSetRoots();
    boolean that_present_roots = true && that.isSetRoots();
    if (this_present_roots || that_present_roots) {
      if (!(this_present_roots && that_present_roots))
        return false;
      if (!this.roots.equals(that.roots))
        return false;
    }

    boolean this_present_adjacencyList = true && this.isSetAdjacencyList();
    boolean that_present_adjacencyList = true && that.isSetAdjacencyList();
    if (this_present_adjacencyList || that_present_adjacencyList) {
      if (!(this_present_adjacencyList && that_present_adjacencyList))
        return false;
      if (!this.adjacencyList.equals(that.adjacencyList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNodeType()) ? 131071 : 524287);
    if (isSetNodeType())
      hashCode = hashCode * 8191 + nodeType.getValue();

    hashCode = hashCode * 8191 + ((isSetRoots()) ? 131071 : 524287);
    if (isSetRoots())
      hashCode = hashCode * 8191 + roots.hashCode();

    hashCode = hashCode * 8191 + ((isSetAdjacencyList()) ? 131071 : 524287);
    if (isSetAdjacencyList())
      hashCode = hashCode * 8191 + adjacencyList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Graph other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNodeType(), other.isSetNodeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeType, other.nodeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRoots(), other.isSetRoots());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoots()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roots, other.roots);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAdjacencyList(), other.isSetAdjacencyList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdjacencyList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adjacencyList, other.adjacencyList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Graph(");
    boolean first = true;

    sb.append("nodeType:");
    if (this.nodeType == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roots:");
    if (this.roots == null) {
      sb.append("null");
    } else {
      sb.append(this.roots);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adjacencyList:");
    if (this.adjacencyList == null) {
      sb.append("null");
    } else {
      sb.append(this.adjacencyList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GraphStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GraphStandardScheme getScheme() {
      return new GraphStandardScheme();
    }
  }

  private static class GraphStandardScheme extends org.apache.thrift.scheme.StandardScheme<Graph> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Graph struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeType = org.apache.hadoop.hive.ql.plan.api.NodeType.findByValue(iprot.readI32());
              struct.setNodeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROOTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.roots = new java.util.ArrayList<java.lang.String>(_list8.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readString();
                  struct.roots.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setRootsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ADJACENCY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.adjacencyList = new java.util.ArrayList<Adjacency>(_list11.size);
                @org.apache.thrift.annotation.Nullable Adjacency _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new Adjacency();
                  _elem12.read(iprot);
                  struct.adjacencyList.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setAdjacencyListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Graph struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodeType != null) {
        oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.nodeType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.roots != null) {
        oprot.writeFieldBegin(ROOTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.roots.size()));
          for (java.lang.String _iter14 : struct.roots)
          {
            oprot.writeString(_iter14);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.adjacencyList != null) {
        oprot.writeFieldBegin(ADJACENCY_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.adjacencyList.size()));
          for (Adjacency _iter15 : struct.adjacencyList)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GraphTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GraphTupleScheme getScheme() {
      return new GraphTupleScheme();
    }
  }

  private static class GraphTupleScheme extends org.apache.thrift.scheme.TupleScheme<Graph> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Graph struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNodeType()) {
        optionals.set(0);
      }
      if (struct.isSetRoots()) {
        optionals.set(1);
      }
      if (struct.isSetAdjacencyList()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetNodeType()) {
        oprot.writeI32(struct.nodeType.getValue());
      }
      if (struct.isSetRoots()) {
        {
          oprot.writeI32(struct.roots.size());
          for (java.lang.String _iter16 : struct.roots)
          {
            oprot.writeString(_iter16);
          }
        }
      }
      if (struct.isSetAdjacencyList()) {
        {
          oprot.writeI32(struct.adjacencyList.size());
          for (Adjacency _iter17 : struct.adjacencyList)
          {
            _iter17.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Graph struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.nodeType = org.apache.hadoop.hive.ql.plan.api.NodeType.findByValue(iprot.readI32());
        struct.setNodeTypeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list18 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.roots = new java.util.ArrayList<java.lang.String>(_list18.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readString();
            struct.roots.add(_elem19);
          }
        }
        struct.setRootsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.adjacencyList = new java.util.ArrayList<Adjacency>(_list21.size);
          @org.apache.thrift.annotation.Nullable Adjacency _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new Adjacency();
            _elem22.read(iprot);
            struct.adjacencyList.add(_elem22);
          }
        }
        struct.setAdjacencyListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

