/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.hadoop.hive.ql.exec.vector.expressions.gen;

import org.apache.hadoop.hive.ql.exec.vector.Decimal64ColumnVector;
import org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;
import org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;
import org.apache.hadoop.hive.ql.exec.vector.expressions.NullUtil;
import org.apache.hadoop.hive.ql.exec.vector.expressions.Decimal64Util;
import org.apache.hadoop.hive.ql.exec.vector.expressions.VectorExpression;
import org.apache.hadoop.hive.serde2.io.HiveDecimalWritable;
import org.apache.hadoop.hive.serde2.typeinfo.DecimalTypeInfo;

/**
 * Generated from template Decimal64ScalarArithmeticDecimal64Column.txt.
 * Implements a vectorized arithmetic operator with a scalar on the left and a
 * column vector on the right. The result is output to an output column vector.
 */
public class <ClassName> extends VectorExpression {

  private static final long serialVersionUID = 1L;

  private int colNum;
  private long value;

  public <ClassName>(long value, int colNum, int outputColumnNum) {
    super(outputColumnNum);
    this.colNum = colNum;
    this.value = value;
  }

  public <ClassName>() {
    super();

    // Dummy final assignments.
    colNum = -1;
    value = 0;
  }

  @Override
  public void evaluate(VectorizedRowBatch batch) {

    if (childExpressions != null) {
      super.evaluateChildren(batch);
    }

    Decimal64ColumnVector inputColVector = (Decimal64ColumnVector) batch.cols[colNum];
    Decimal64ColumnVector outputColVector = (Decimal64ColumnVector) batch.cols[outputColumnNum];
    int[] sel = batch.selected;
    boolean[] inputIsNull = inputColVector.isNull;
    boolean[] outputIsNull = outputColVector.isNull;
    outputColVector.noNulls = inputColVector.noNulls;
    outputColVector.isRepeating = inputColVector.isRepeating;
    int n = batch.size;
    long[] vector = inputColVector.vector;
    long[] outputVector = outputColVector.vector;

    // return immediately if batch is empty
    if (n == 0) {
      return;
    }

    final long outputDecimal64AbsMax =
        HiveDecimalWritable.getDecimal64AbsMax(outputColVector.precision);

    if (inputColVector.noNulls) {

      /* Initialize output vector NULL values to false. This is necessary
       * since the decimal operation may produce a NULL result even for
       * a non-null input vector value, and convert the output vector
       * to have noNulls = false;
       */
      NullUtil.initOutputNullsToFalse(outputColVector, inputColVector.isRepeating,
          batch.selectedInUse, sel, n);
    }

    if (inputColVector.isRepeating) {
      if (!inputColVector.noNulls) {
        outputIsNull[0] = inputIsNull[0];
      }

      // The following may override a "false" null setting if an error or overflow occurs.
      final long result = value <OperatorSymbol> vector[0];
      outputVector[0] = result;
      if (Math.abs(result) > outputDecimal64AbsMax) {
        outputColVector.noNulls = false;
        outputIsNull[0] = true;
      }
    } else if (inputColVector.noNulls) {
      if (batch.selectedInUse) {
        for(int j = 0; j != n; j++) {
          int i = sel[j];
          final long result = value <OperatorSymbol> vector[i];
          outputVector[i] = result;
          if (Math.abs(result) > outputDecimal64AbsMax) {
            outputColVector.noNulls = false;
            outputIsNull[i] = true;
          }
        }
      } else {
        for(int i = 0; i != n; i++) {
          final long result = value <OperatorSymbol> vector[i];
          outputVector[i] = result;
          if (Math.abs(result) > outputDecimal64AbsMax) {
            outputColVector.noNulls = false;
            outputIsNull[i] = true;
          }
        }
      }
    } else /* there are nulls */ {
      if (batch.selectedInUse) {
        for(int j = 0; j != n; j++) {
          int i = sel[j];
          outputIsNull[i] = inputIsNull[i];

          // The following may override a "false" null setting if an error or overflow occurs.
          final long result = value <OperatorSymbol> vector[i];
          outputVector[i] = result;
          if (Math.abs(result) > outputDecimal64AbsMax) {
            outputColVector.noNulls = false;
            outputIsNull[i] = true;
          }
        }
      } else {
        System.arraycopy(inputIsNull, 0, outputIsNull, 0, n);
        for(int i = 0; i != n; i++) {

          // The following may override a "false" null setting if an error or overflow occurs.
          final long result = value <OperatorSymbol> vector[i];
          outputVector[i] = result;
          if (Math.abs(result) > outputDecimal64AbsMax) {
            outputColVector.noNulls = false;
            outputIsNull[i] = true;
          }
        }
      }
    }

    // Currently, we defer division, etc to regular HiveDecimal so we don't do any null
    // default value setting here.
  }

  @Override
  public String vectorExpressionParameters() {
    DecimalTypeInfo decimalTypeInfo = (DecimalTypeInfo) inputTypeInfos[1];
    HiveDecimalWritable writable = new HiveDecimalWritable();
    writable.deserialize64(value, decimalTypeInfo.scale());
    return "decimal64Val " + value + ", decimalVal " + writable.toString() +
        ", " + getColumnParamString(1, colNum);
  }

  @Override
  public VectorExpressionDescriptor.Descriptor getDescriptor() {
    return (new VectorExpressionDescriptor.Builder())
        .setMode(
            VectorExpressionDescriptor.Mode.PROJECTION)
        .setNumArguments(2)
        .setArgumentTypes(
            VectorExpressionDescriptor.ArgumentType.DECIMAL_64,
            VectorExpressionDescriptor.ArgumentType.DECIMAL_64)
        .setInputExpressionTypes(
            VectorExpressionDescriptor.InputExpressionType.SCALAR,
            VectorExpressionDescriptor.InputExpressionType.COLUMN).build();
  }
}