PREHOOK: query: DROP TABLE IF EXISTS innerjoinsrc1
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS innerjoinsrc1
POSTHOOK: type: DROPTABLE
PREHOOK: query: DROP TABLE IF EXISTS innerjoinsrc2
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS innerjoinsrc2
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE TABLE innerjoinsrc1 (a1 STRING, a2 STRING)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@innerjoinsrc1
POSTHOOK: query: CREATE TABLE innerjoinsrc1 (a1 STRING, a2 STRING)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@innerjoinsrc1
PREHOOK: query: CREATE TABLE innerjoinsrc2 (b1 STRING, b2 STRING)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@innerjoinsrc2
POSTHOOK: query: CREATE TABLE innerjoinsrc2 (b1 STRING, b2 STRING)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@innerjoinsrc2
PREHOOK: query: INSERT INTO TABLE innerjoinsrc1 (a1) VALUES ('1')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@innerjoinsrc1
POSTHOOK: query: INSERT INTO TABLE innerjoinsrc1 (a1) VALUES ('1')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@innerjoinsrc1
POSTHOOK: Lineage: innerjoinsrc1.a1 SCRIPT []
POSTHOOK: Lineage: innerjoinsrc1.a2 SIMPLE []
PREHOOK: query: INSERT INTO TABLE innerjoinsrc1 VALUES ('2', '2')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@innerjoinsrc1
POSTHOOK: query: INSERT INTO TABLE innerjoinsrc1 VALUES ('2', '2')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@innerjoinsrc1
POSTHOOK: Lineage: innerjoinsrc1.a1 SCRIPT []
POSTHOOK: Lineage: innerjoinsrc1.a2 SCRIPT []
PREHOOK: query: INSERT INTO TABLE innerjoinsrc2 (b1) VALUES ('1')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@innerjoinsrc2
POSTHOOK: query: INSERT INTO TABLE innerjoinsrc2 (b1) VALUES ('1')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@innerjoinsrc2
POSTHOOK: Lineage: innerjoinsrc2.b1 SCRIPT []
POSTHOOK: Lineage: innerjoinsrc2.b2 SIMPLE []
PREHOOK: query: INSERT INTO TABLE innerjoinsrc2 VALUES ('2', '2')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@innerjoinsrc2
POSTHOOK: query: INSERT INTO TABLE innerjoinsrc2 VALUES ('2', '2')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@innerjoinsrc2
POSTHOOK: Lineage: innerjoinsrc2.b1 SCRIPT []
POSTHOOK: Lineage: innerjoinsrc2.b2 SCRIPT []
PREHOOK: query: EXPLAIN SELECT * FROM innerjoinsrc1 c1, innerjoinsrc2 c2 WHERE COALESCE(a1,a2)=COALESCE(b1,b2)
PREHOOK: type: QUERY
PREHOOK: Input: default@innerjoinsrc1
PREHOOK: Input: default@innerjoinsrc2
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN SELECT * FROM innerjoinsrc1 c1, innerjoinsrc2 c2 WHERE COALESCE(a1,a2)=COALESCE(b1,b2)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@innerjoinsrc1
POSTHOOK: Input: default@innerjoinsrc2
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: c1
            filterExpr: (a1 is not null or a2 is not null) (type: boolean)
            Statistics: Num rows: 2 Data size: 340 Basic stats: COMPLETE Column stats: COMPLETE
            Filter Operator
              predicate: (a1 is not null or a2 is not null) (type: boolean)
              Statistics: Num rows: 2 Data size: 340 Basic stats: COMPLETE Column stats: COMPLETE
              Select Operator
                expressions: a1 (type: string), a2 (type: string), CASE WHEN (a1 is not null) THEN (a1) ELSE (a2) END (type: string)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 2 Data size: 708 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col2 (type: string)
                  null sort order: a
                  sort order: +
                  Map-reduce partition columns: _col2 (type: string)
                  Statistics: Num rows: 2 Data size: 708 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col0 (type: string), _col1 (type: string)
          TableScan
            alias: c2
            filterExpr: (b1 is not null or b2 is not null) (type: boolean)
            Statistics: Num rows: 2 Data size: 340 Basic stats: COMPLETE Column stats: COMPLETE
            Filter Operator
              predicate: (b1 is not null or b2 is not null) (type: boolean)
              Statistics: Num rows: 2 Data size: 340 Basic stats: COMPLETE Column stats: COMPLETE
              Select Operator
                expressions: b1 (type: string), b2 (type: string), CASE WHEN (b1 is not null) THEN (b1) ELSE (b2) END (type: string)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 2 Data size: 708 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col2 (type: string)
                  null sort order: a
                  sort order: +
                  Map-reduce partition columns: _col2 (type: string)
                  Statistics: Num rows: 2 Data size: 708 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col0 (type: string), _col1 (type: string)
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          keys:
            0 _col2 (type: string)
            1 _col2 (type: string)
          outputColumnNames: _col0, _col1, _col3, _col4
          Statistics: Num rows: 2 Data size: 680 Basic stats: COMPLETE Column stats: COMPLETE
          Select Operator
            expressions: _col0 (type: string), _col1 (type: string), _col3 (type: string), _col4 (type: string)
            outputColumnNames: _col0, _col1, _col2, _col3
            Statistics: Num rows: 2 Data size: 680 Basic stats: COMPLETE Column stats: COMPLETE
            File Output Operator
              compressed: false
              Statistics: Num rows: 2 Data size: 680 Basic stats: COMPLETE Column stats: COMPLETE
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT * FROM innerjoinsrc1 c1, innerjoinsrc2 c2 WHERE COALESCE(a1,a2)=COALESCE(b1,b2)
PREHOOK: type: QUERY
PREHOOK: Input: default@innerjoinsrc1
PREHOOK: Input: default@innerjoinsrc2
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM innerjoinsrc1 c1, innerjoinsrc2 c2 WHERE COALESCE(a1,a2)=COALESCE(b1,b2)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@innerjoinsrc1
POSTHOOK: Input: default@innerjoinsrc2
#### A masked pattern was here ####
1	NULL	1	NULL
2	2	2	2
PREHOOK: query: EXPLAIN SELECT * FROM innerjoinsrc1 c1 inner join innerjoinsrc2 c2 ON (COALESCE(a1,a2)=COALESCE(b1,b2))
PREHOOK: type: QUERY
PREHOOK: Input: default@innerjoinsrc1
PREHOOK: Input: default@innerjoinsrc2
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN SELECT * FROM innerjoinsrc1 c1 inner join innerjoinsrc2 c2 ON (COALESCE(a1,a2)=COALESCE(b1,b2))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@innerjoinsrc1
POSTHOOK: Input: default@innerjoinsrc2
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: c1
            filterExpr: (a1 is not null or a2 is not null) (type: boolean)
            Statistics: Num rows: 2 Data size: 340 Basic stats: COMPLETE Column stats: COMPLETE
            Filter Operator
              predicate: (a1 is not null or a2 is not null) (type: boolean)
              Statistics: Num rows: 2 Data size: 340 Basic stats: COMPLETE Column stats: COMPLETE
              Select Operator
                expressions: a1 (type: string), a2 (type: string), CASE WHEN (a1 is not null) THEN (a1) ELSE (a2) END (type: string)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 2 Data size: 708 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col2 (type: string)
                  null sort order: a
                  sort order: +
                  Map-reduce partition columns: _col2 (type: string)
                  Statistics: Num rows: 2 Data size: 708 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col0 (type: string), _col1 (type: string)
          TableScan
            alias: c2
            filterExpr: (b1 is not null or b2 is not null) (type: boolean)
            Statistics: Num rows: 2 Data size: 340 Basic stats: COMPLETE Column stats: COMPLETE
            Filter Operator
              predicate: (b1 is not null or b2 is not null) (type: boolean)
              Statistics: Num rows: 2 Data size: 340 Basic stats: COMPLETE Column stats: COMPLETE
              Select Operator
                expressions: b1 (type: string), b2 (type: string), CASE WHEN (b1 is not null) THEN (b1) ELSE (b2) END (type: string)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 2 Data size: 708 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col2 (type: string)
                  null sort order: a
                  sort order: +
                  Map-reduce partition columns: _col2 (type: string)
                  Statistics: Num rows: 2 Data size: 708 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col0 (type: string), _col1 (type: string)
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          keys:
            0 _col2 (type: string)
            1 _col2 (type: string)
          outputColumnNames: _col0, _col1, _col3, _col4
          Statistics: Num rows: 2 Data size: 680 Basic stats: COMPLETE Column stats: COMPLETE
          Select Operator
            expressions: _col0 (type: string), _col1 (type: string), _col3 (type: string), _col4 (type: string)
            outputColumnNames: _col0, _col1, _col2, _col3
            Statistics: Num rows: 2 Data size: 680 Basic stats: COMPLETE Column stats: COMPLETE
            File Output Operator
              compressed: false
              Statistics: Num rows: 2 Data size: 680 Basic stats: COMPLETE Column stats: COMPLETE
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT * FROM innerjoinsrc1 c1 inner join innerjoinsrc2 c2 ON (COALESCE(a1,a2)=COALESCE(b1,b2))
PREHOOK: type: QUERY
PREHOOK: Input: default@innerjoinsrc1
PREHOOK: Input: default@innerjoinsrc2
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM innerjoinsrc1 c1 inner join innerjoinsrc2 c2 ON (COALESCE(a1,a2)=COALESCE(b1,b2))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@innerjoinsrc1
POSTHOOK: Input: default@innerjoinsrc2
#### A masked pattern was here ####
1	NULL	1	NULL
2	2	2	2
