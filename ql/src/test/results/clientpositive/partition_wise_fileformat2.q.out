PREHOOK: query: create table partition_test_partitioned(key string, value string) partitioned by (dt string)
PREHOOK: type: CREATETABLE
POSTHOOK: query: create table partition_test_partitioned(key string, value string) partitioned by (dt string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@partition_test_partitioned
PREHOOK: query: insert overwrite table partition_test_partitioned partition(dt=100) select * from src1
PREHOOK: type: QUERY
PREHOOK: Input: default@src1
PREHOOK: Output: default@partition_test_partitioned@dt=100
POSTHOOK: query: insert overwrite table partition_test_partitioned partition(dt=100) select * from src1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src1
POSTHOOK: Output: default@partition_test_partitioned@dt=100
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: alter table partition_test_partitioned set fileformat rcfile
PREHOOK: type: ALTERTABLE_FILEFORMAT
PREHOOK: Input: default@partition_test_partitioned
PREHOOK: Output: default@partition_test_partitioned
POSTHOOK: query: alter table partition_test_partitioned set fileformat rcfile
POSTHOOK: type: ALTERTABLE_FILEFORMAT
POSTHOOK: Input: default@partition_test_partitioned
POSTHOOK: Output: default@partition_test_partitioned
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: insert overwrite table partition_test_partitioned partition(dt=101) select * from src1
PREHOOK: type: QUERY
PREHOOK: Input: default@src1
PREHOOK: Output: default@partition_test_partitioned@dt=101
POSTHOOK: query: insert overwrite table partition_test_partitioned partition(dt=101) select * from src1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src1
POSTHOOK: Output: default@partition_test_partitioned@dt=101
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=101).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=101).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: alter table partition_test_partitioned set fileformat Sequencefile
PREHOOK: type: ALTERTABLE_FILEFORMAT
PREHOOK: Input: default@partition_test_partitioned
PREHOOK: Output: default@partition_test_partitioned
POSTHOOK: query: alter table partition_test_partitioned set fileformat Sequencefile
POSTHOOK: type: ALTERTABLE_FILEFORMAT
POSTHOOK: Input: default@partition_test_partitioned
POSTHOOK: Output: default@partition_test_partitioned
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=101).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=101).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: insert overwrite table partition_test_partitioned partition(dt=102) select * from src1
PREHOOK: type: QUERY
PREHOOK: Input: default@src1
PREHOOK: Output: default@partition_test_partitioned@dt=102
POSTHOOK: query: insert overwrite table partition_test_partitioned partition(dt=102) select * from src1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src1
POSTHOOK: Output: default@partition_test_partitioned@dt=102
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=101).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=101).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=102).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=102).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: explain select *, BLOCK__OFFSET__INSIDE__FILE from partition_test_partitioned where dt >=100 and dt <= 102
PREHOOK: type: QUERY
POSTHOOK: query: explain select *, BLOCK__OFFSET__INSIDE__FILE from partition_test_partitioned where dt >=100 and dt <= 102
POSTHOOK: type: QUERY
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=101).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=101).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=102).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=102).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME partition_test_partitioned))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR TOK_ALLCOLREF) (TOK_SELEXPR (TOK_TABLE_OR_COL BLOCK__OFFSET__INSIDE__FILE))) (TOK_WHERE (and (>= (TOK_TABLE_OR_COL dt) 100) (<= (TOK_TABLE_OR_COL dt) 102)))))

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Alias -> Map Operator Tree:
        partition_test_partitioned 
          TableScan
            alias: partition_test_partitioned
            Select Operator
              expressions:
                    expr: key
                    type: string
                    expr: value
                    type: string
                    expr: dt
                    type: string
                    expr: BLOCK__OFFSET__INSIDE__FILE
                    type: bigint
              outputColumnNames: _col0, _col1, _col2, _col3
              File Output Operator
                compressed: false
                GlobalTableId: 0
                table:
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat

  Stage: Stage-0
    Fetch Operator
      limit: -1


PREHOOK: query: select * from partition_test_partitioned where dt >=100 and dt <= 102
PREHOOK: type: QUERY
PREHOOK: Input: default@partition_test_partitioned
PREHOOK: Input: default@partition_test_partitioned@dt=100
PREHOOK: Input: default@partition_test_partitioned@dt=101
PREHOOK: Input: default@partition_test_partitioned@dt=102
#### A masked pattern was here ####
POSTHOOK: query: select * from partition_test_partitioned where dt >=100 and dt <= 102
POSTHOOK: type: QUERY
POSTHOOK: Input: default@partition_test_partitioned
POSTHOOK: Input: default@partition_test_partitioned@dt=100
POSTHOOK: Input: default@partition_test_partitioned@dt=101
POSTHOOK: Input: default@partition_test_partitioned@dt=102
#### A masked pattern was here ####
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=101).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=101).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=102).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=102).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
238	val_238	100
		100
311	val_311	100
	val_27	100
	val_165	100
	val_409	100
255	val_255	100
278	val_278	100
98	val_98	100
	val_484	100
	val_265	100
	val_193	100
401	val_401	100
150	val_150	100
273	val_273	100
224		100
369		100
66	val_66	100
128		100
213	val_213	100
146	val_146	100
406	val_406	100
		100
		100
		100
238	val_238	101
		101
311	val_311	101
	val_27	101
	val_165	101
	val_409	101
255	val_255	101
278	val_278	101
98	val_98	101
	val_484	101
	val_265	101
	val_193	101
401	val_401	101
150	val_150	101
273	val_273	101
224		101
369		101
66	val_66	101
128		101
213	val_213	101
146	val_146	101
406	val_406	101
		101
		101
		101
238	val_238	102
		102
311	val_311	102
	val_27	102
	val_165	102
	val_409	102
255	val_255	102
278	val_278	102
98	val_98	102
	val_484	102
	val_265	102
	val_193	102
401	val_401	102
150	val_150	102
273	val_273	102
224		102
369		102
66	val_66	102
128		102
213	val_213	102
146	val_146	102
406	val_406	102
		102
		102
		102
PREHOOK: query: explain select *, BLOCK__OFFSET__INSIDE__FILE from partition_test_partitioned where dt >=100 and dt <= 102
PREHOOK: type: QUERY
POSTHOOK: query: explain select *, BLOCK__OFFSET__INSIDE__FILE from partition_test_partitioned where dt >=100 and dt <= 102
POSTHOOK: type: QUERY
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=101).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=101).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=102).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=102).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME partition_test_partitioned))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR TOK_ALLCOLREF) (TOK_SELEXPR (TOK_TABLE_OR_COL BLOCK__OFFSET__INSIDE__FILE))) (TOK_WHERE (and (>= (TOK_TABLE_OR_COL dt) 100) (<= (TOK_TABLE_OR_COL dt) 102)))))

STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: partition_test_partitioned
          Select Operator
            expressions:
                  expr: key
                  type: string
                  expr: value
                  type: string
                  expr: dt
                  type: string
                  expr: BLOCK__OFFSET__INSIDE__FILE
                  type: bigint
            outputColumnNames: _col0, _col1, _col2, _col3
            ListSink


PREHOOK: query: select * from partition_test_partitioned where dt >=100 and dt <= 102
PREHOOK: type: QUERY
PREHOOK: Input: default@partition_test_partitioned
PREHOOK: Input: default@partition_test_partitioned@dt=100
PREHOOK: Input: default@partition_test_partitioned@dt=101
PREHOOK: Input: default@partition_test_partitioned@dt=102
#### A masked pattern was here ####
POSTHOOK: query: select * from partition_test_partitioned where dt >=100 and dt <= 102
POSTHOOK: type: QUERY
POSTHOOK: Input: default@partition_test_partitioned
POSTHOOK: Input: default@partition_test_partitioned@dt=100
POSTHOOK: Input: default@partition_test_partitioned@dt=101
POSTHOOK: Input: default@partition_test_partitioned@dt=102
#### A masked pattern was here ####
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=100).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=101).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=101).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=102).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: partition_test_partitioned PARTITION(dt=102).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
238	val_238	100
		100
311	val_311	100
	val_27	100
	val_165	100
	val_409	100
255	val_255	100
278	val_278	100
98	val_98	100
	val_484	100
	val_265	100
	val_193	100
401	val_401	100
150	val_150	100
273	val_273	100
224		100
369		100
66	val_66	100
128		100
213	val_213	100
146	val_146	100
406	val_406	100
		100
		100
		100
238	val_238	101
		101
311	val_311	101
	val_27	101
	val_165	101
	val_409	101
255	val_255	101
278	val_278	101
98	val_98	101
	val_484	101
	val_265	101
	val_193	101
401	val_401	101
150	val_150	101
273	val_273	101
224		101
369		101
66	val_66	101
128		101
213	val_213	101
146	val_146	101
406	val_406	101
		101
		101
		101
238	val_238	102
		102
311	val_311	102
	val_27	102
	val_165	102
	val_409	102
255	val_255	102
278	val_278	102
98	val_98	102
	val_484	102
	val_265	102
	val_193	102
401	val_401	102
150	val_150	102
273	val_273	102
224		102
369		102
66	val_66	102
128		102
213	val_213	102
146	val_146	102
406	val_406	102
		102
		102
		102
