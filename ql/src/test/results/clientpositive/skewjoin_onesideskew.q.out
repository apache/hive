PREHOOK: query: DROP TABLE IF EXISTS skewtable
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS skewtable
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE TABLE skewtable (key STRING, value STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@skewtable
POSTHOOK: query: CREATE TABLE skewtable (key STRING, value STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@skewtable
PREHOOK: query: INSERT INTO TABLE skewtable VALUES ("0", "val_0")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@skewtable
POSTHOOK: query: INSERT INTO TABLE skewtable VALUES ("0", "val_0")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@skewtable
POSTHOOK: Lineage: skewtable.key SCRIPT []
POSTHOOK: Lineage: skewtable.value SCRIPT []
PREHOOK: query: INSERT INTO TABLE skewtable VALUES ("0", "val_0")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@skewtable
POSTHOOK: query: INSERT INTO TABLE skewtable VALUES ("0", "val_0")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@skewtable
POSTHOOK: Lineage: skewtable.key SCRIPT []
POSTHOOK: Lineage: skewtable.value SCRIPT []
PREHOOK: query: INSERT INTO TABLE skewtable VALUES ("0", "val_0")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@skewtable
POSTHOOK: query: INSERT INTO TABLE skewtable VALUES ("0", "val_0")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@skewtable
POSTHOOK: Lineage: skewtable.key SCRIPT []
POSTHOOK: Lineage: skewtable.value SCRIPT []
PREHOOK: query: DROP TABLE IF EXISTS nonskewtable
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS nonskewtable
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE TABLE nonskewtable (key STRING, value STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@nonskewtable
POSTHOOK: query: CREATE TABLE nonskewtable (key STRING, value STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@nonskewtable
PREHOOK: query: INSERT INTO TABLE nonskewtable VALUES ("1", "val_1")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@nonskewtable
POSTHOOK: query: INSERT INTO TABLE nonskewtable VALUES ("1", "val_1")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@nonskewtable
POSTHOOK: Lineage: nonskewtable.key SCRIPT []
POSTHOOK: Lineage: nonskewtable.value SCRIPT []
PREHOOK: query: INSERT INTO TABLE nonskewtable VALUES ("2", "val_2")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@nonskewtable
POSTHOOK: query: INSERT INTO TABLE nonskewtable VALUES ("2", "val_2")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@nonskewtable
POSTHOOK: Lineage: nonskewtable.key SCRIPT []
POSTHOOK: Lineage: nonskewtable.value SCRIPT []
PREHOOK: query: EXPLAIN
CREATE TABLE result_n1 AS SELECT a.* FROM skewtable a JOIN nonskewtable b ON a.key=b.key
PREHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: query: EXPLAIN
CREATE TABLE result_n1 AS SELECT a.* FROM skewtable a JOIN nonskewtable b ON a.key=b.key
POSTHOOK: type: CREATETABLE_AS_SELECT
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-5 depends on stages: Stage-1 , consists of Stage-6, Stage-0
  Stage-6
  Stage-4 depends on stages: Stage-6
  Stage-0 depends on stages: Stage-4
  Stage-7 depends on stages: Stage-0
  Stage-2 depends on stages: Stage-7

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: a
            Statistics: Num rows: 3 Data size: 21 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: key is not null (type: boolean)
              Statistics: Num rows: 3 Data size: 21 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: key (type: string), value (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 3 Data size: 21 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string)
                  sort order: +
                  Map-reduce partition columns: _col0 (type: string)
                  Statistics: Num rows: 3 Data size: 21 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: string)
          TableScan
            alias: b
            Statistics: Num rows: 2 Data size: 14 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: key is not null (type: boolean)
              Statistics: Num rows: 2 Data size: 14 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: key (type: string)
                outputColumnNames: _col0
                Statistics: Num rows: 2 Data size: 14 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string)
                  sort order: +
                  Map-reduce partition columns: _col0 (type: string)
                  Statistics: Num rows: 2 Data size: 14 Basic stats: COMPLETE Column stats: NONE
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          handleSkewJoin: true
          keys:
            0 _col0 (type: string)
            1 _col0 (type: string)
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 3 Data size: 23 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 3 Data size: 23 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.TextInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                name: default.result_n1

  Stage: Stage-5
    Conditional Operator

  Stage: Stage-6
    Map Reduce Local Work
      Alias -> Map Local Tables:
        1 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        1 
          TableScan
            HashTable Sink Operator
              keys:
                0 reducesinkkey0 (type: string)
                1 reducesinkkey0 (type: string)

  Stage: Stage-4
    Map Reduce
      Map Operator Tree:
          TableScan
            Map Join Operator
              condition map:
                   Inner Join 0 to 1
              keys:
                0 reducesinkkey0 (type: string)
                1 reducesinkkey0 (type: string)
              outputColumnNames: _col0, _col1
              File Output Operator
                compressed: false
                Statistics: Num rows: 3 Data size: 23 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    name: default.result_n1
      Local Work:
        Map Reduce Local Work

  Stage: Stage-0
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####

  Stage: Stage-7
      Create Table Operator:
        Create Table
          columns: key string, value string
          input format: org.apache.hadoop.mapred.TextInputFormat
          output format: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          serde name: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
          name: default.result_n1

  Stage: Stage-2
    Stats Work
      Basic Stats Work:

PREHOOK: query: CREATE TABLE result_n1 AS SELECT a.* FROM skewtable a JOIN nonskewtable b ON a.key=b.key
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@nonskewtable
PREHOOK: Input: default@skewtable
PREHOOK: Output: database:default
PREHOOK: Output: default@result_n1
POSTHOOK: query: CREATE TABLE result_n1 AS SELECT a.* FROM skewtable a JOIN nonskewtable b ON a.key=b.key
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@nonskewtable
POSTHOOK: Input: default@skewtable
POSTHOOK: Output: database:default
POSTHOOK: Output: default@result_n1
POSTHOOK: Lineage: result_n1.key SIMPLE [(skewtable)a.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: result_n1.value SIMPLE [(skewtable)a.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: SELECT * FROM result_n1
PREHOOK: type: QUERY
PREHOOK: Input: default@result_n1
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM result_n1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@result_n1
#### A masked pattern was here ####
