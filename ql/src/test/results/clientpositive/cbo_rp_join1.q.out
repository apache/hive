PREHOOK: query: CREATE TABLE myinput1_n0(key int, value int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@myinput1_n0
POSTHOOK: query: CREATE TABLE myinput1_n0(key int, value int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@myinput1_n0
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/in3.txt' INTO TABLE myinput1_n0
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@myinput1_n0
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/in3.txt' INTO TABLE myinput1_n0
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@myinput1_n0
Warning: Shuffle Join JOIN[6][tables = [$hdt$_0, $hdt$_1]] in Stage 'Stage-1:MAPRED' is a cross product
PREHOOK: query: EXPLAIN SELECT sum(hash(a.key,a.value,b.key,b.value)) FROM myinput1_n0 a FULL OUTER JOIN myinput1_n0 b on a.key = 40 AND b.key = 40
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN SELECT sum(hash(a.key,a.value,b.key,b.value)) FROM myinput1_n0 a FULL OUTER JOIN myinput1_n0 b on a.key = 40 AND b.key = 40
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: a
            Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
              Reduce Output Operator
                sort order: 
                Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
                value expressions: _col0 (type: int), _col1 (type: int)
          TableScan
            alias: b
            Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
              Reduce Output Operator
                sort order: 
                Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
                value expressions: _col0 (type: int), _col1 (type: int)
      Reduce Operator Tree:
        Join Operator
          condition map:
               Outer Join 0 to 1
          filter predicates:
            0 {(VALUE._col0 = 40)}
            1 {(VALUE._col0 = 40)}
          keys:
            0 
            1 
          outputColumnNames: _col0, _col1, _col2, _col3
          Statistics: Num rows: 1 Data size: 441 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: hash(_col0,_col1,_col2,_col3) (type: int)
            outputColumnNames: _col0
            Statistics: Num rows: 1 Data size: 441 Basic stats: COMPLETE Column stats: NONE
            Group By Operator
              aggregations: sum(_col0)
              mode: hash
              outputColumnNames: _col0
              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              sort order: 
              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
              value expressions: _col0 (type: bigint)
      Execution mode: vectorized
      Reduce Operator Tree:
        Group By Operator
          aggregations: sum(VALUE._col0)
          mode: mergepartial
          outputColumnNames: _col0
          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join JOIN[6][tables = [$hdt$_0, $hdt$_1]] in Stage 'Stage-1:MAPRED' is a cross product
PREHOOK: query: SELECT sum(hash(a.key,a.value,b.key,b.value)) FROM myinput1_n0 a FULL OUTER JOIN myinput1_n0 b on a.key = 40 AND b.key = 40
PREHOOK: type: QUERY
PREHOOK: Input: default@myinput1_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT sum(hash(a.key,a.value,b.key,b.value)) FROM myinput1_n0 a FULL OUTER JOIN myinput1_n0 b on a.key = 40 AND b.key = 40
POSTHOOK: type: QUERY
POSTHOOK: Input: default@myinput1_n0
#### A masked pattern was here ####
4939870
Warning: Shuffle Join JOIN[6][tables = [$hdt$_0, $hdt$_1]] in Stage 'Stage-1:MAPRED' is a cross product
PREHOOK: query: EXPLAIN SELECT sum(hash(a.key,a.value,b.key,b.value)) FROM myinput1_n0 a FULL OUTER JOIN myinput1_n0 b on a.key = 40 AND a.value = 40 AND a.key = a.value AND b.key = 40
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN SELECT sum(hash(a.key,a.value,b.key,b.value)) FROM myinput1_n0 a FULL OUTER JOIN myinput1_n0 b on a.key = 40 AND a.value = 40 AND a.key = a.value AND b.key = 40
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: a
            Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
              Reduce Output Operator
                sort order: 
                Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
                value expressions: _col0 (type: int), _col1 (type: int)
          TableScan
            alias: b
            Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
              Reduce Output Operator
                sort order: 
                Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
                value expressions: _col0 (type: int), _col1 (type: int)
      Reduce Operator Tree:
        Join Operator
          condition map:
               Outer Join 0 to 1
          filter predicates:
            0 {(VALUE._col0 = 40)} {(VALUE._col1 = 40)}
            1 {(VALUE._col0 = 40)}
          keys:
            0 
            1 
          outputColumnNames: _col0, _col1, _col2, _col3
          Statistics: Num rows: 1 Data size: 441 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: hash(_col0,_col1,_col2,_col3) (type: int)
            outputColumnNames: _col0
            Statistics: Num rows: 1 Data size: 441 Basic stats: COMPLETE Column stats: NONE
            Group By Operator
              aggregations: sum(_col0)
              mode: hash
              outputColumnNames: _col0
              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              sort order: 
              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
              value expressions: _col0 (type: bigint)
      Execution mode: vectorized
      Reduce Operator Tree:
        Group By Operator
          aggregations: sum(VALUE._col0)
          mode: mergepartial
          outputColumnNames: _col0
          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join JOIN[6][tables = [$hdt$_0, $hdt$_1]] in Stage 'Stage-1:MAPRED' is a cross product
PREHOOK: query: SELECT sum(hash(a.key,a.value,b.key,b.value)) FROM myinput1_n0 a FULL OUTER JOIN myinput1_n0 b on a.key = 40 AND a.key = a.value AND b.key = 40
PREHOOK: type: QUERY
PREHOOK: Input: default@myinput1_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT sum(hash(a.key,a.value,b.key,b.value)) FROM myinput1_n0 a FULL OUTER JOIN myinput1_n0 b on a.key = 40 AND a.key = a.value AND b.key = 40
POSTHOOK: type: QUERY
POSTHOOK: Input: default@myinput1_n0
#### A masked pattern was here ####
4939870
Warning: Shuffle Join JOIN[6][tables = [$hdt$_0, $hdt$_1]] in Stage 'Stage-1:MAPRED' is a cross product
PREHOOK: query: EXPLAIN SELECT sum(hash(a.key,a.value,b.key,b.value)) FROM myinput1_n0 a FULL OUTER JOIN myinput1_n0 b on a.key = 40 AND a.key = b.key AND b.key = 40
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN SELECT sum(hash(a.key,a.value,b.key,b.value)) FROM myinput1_n0 a FULL OUTER JOIN myinput1_n0 b on a.key = 40 AND a.key = b.key AND b.key = 40
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: a
            Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
              Reduce Output Operator
                sort order: 
                Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
                value expressions: _col0 (type: int), _col1 (type: int)
          TableScan
            alias: b
            Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
              Reduce Output Operator
                sort order: 
                Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
                value expressions: _col0 (type: int), _col1 (type: int)
      Reduce Operator Tree:
        Join Operator
          condition map:
               Outer Join 0 to 1
          filter predicates:
            0 {(VALUE._col0 = 40)}
            1 {(VALUE._col0 = 40)}
          keys:
            0 
            1 
          outputColumnNames: _col0, _col1, _col2, _col3
          Statistics: Num rows: 1 Data size: 441 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: hash(_col0,_col1,_col2,_col3) (type: int)
            outputColumnNames: _col0
            Statistics: Num rows: 1 Data size: 441 Basic stats: COMPLETE Column stats: NONE
            Group By Operator
              aggregations: sum(_col0)
              mode: hash
              outputColumnNames: _col0
              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              sort order: 
              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
              value expressions: _col0 (type: bigint)
      Execution mode: vectorized
      Reduce Operator Tree:
        Group By Operator
          aggregations: sum(VALUE._col0)
          mode: mergepartial
          outputColumnNames: _col0
          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join JOIN[6][tables = [$hdt$_0, $hdt$_1]] in Stage 'Stage-1:MAPRED' is a cross product
PREHOOK: query: SELECT sum(hash(a.key,a.value,b.key,b.value)) FROM myinput1_n0 a FULL OUTER JOIN myinput1_n0 b on a.key = 40 AND a.key = b.key AND b.key = 40
PREHOOK: type: QUERY
PREHOOK: Input: default@myinput1_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT sum(hash(a.key,a.value,b.key,b.value)) FROM myinput1_n0 a FULL OUTER JOIN myinput1_n0 b on a.key = 40 AND a.key = b.key AND b.key = 40
POSTHOOK: type: QUERY
POSTHOOK: Input: default@myinput1_n0
#### A masked pattern was here ####
4939870
Warning: Shuffle Join JOIN[6][tables = [$hdt$_0, $hdt$_1]] in Stage 'Stage-1:MAPRED' is a cross product
PREHOOK: query: EXPLAIN SELECT sum(hash(a.key,a.value,b.key,b.value)) FROM myinput1_n0 a FULL OUTER JOIN myinput1_n0 b on a.key > 40 AND a.value > 50 AND a.key = a.value AND b.key > 40 AND b.value > 50 AND b.key = b.value
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN SELECT sum(hash(a.key,a.value,b.key,b.value)) FROM myinput1_n0 a FULL OUTER JOIN myinput1_n0 b on a.key > 40 AND a.value > 50 AND a.key = a.value AND b.key > 40 AND b.value > 50 AND b.key = b.value
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: a
            Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
              Reduce Output Operator
                sort order: 
                Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
                value expressions: _col0 (type: int), _col1 (type: int)
          TableScan
            alias: b
            Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
              Reduce Output Operator
                sort order: 
                Statistics: Num rows: 1 Data size: 220 Basic stats: COMPLETE Column stats: NONE
                value expressions: _col0 (type: int), _col1 (type: int)
      Reduce Operator Tree:
        Join Operator
          condition map:
               Outer Join 0 to 1
          filter predicates:
            0 {(VALUE._col0 > 40)} {(VALUE._col1 > 50)} {(VALUE._col0 = VALUE._col1)}
            1 {(VALUE._col0 > 40)} {(VALUE._col1 > 50)} {(VALUE._col0 = VALUE._col1)}
          keys:
            0 
            1 
          outputColumnNames: _col0, _col1, _col2, _col3
          Statistics: Num rows: 1 Data size: 441 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: hash(_col0,_col1,_col2,_col3) (type: int)
            outputColumnNames: _col0
            Statistics: Num rows: 1 Data size: 441 Basic stats: COMPLETE Column stats: NONE
            Group By Operator
              aggregations: sum(_col0)
              mode: hash
              outputColumnNames: _col0
              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              sort order: 
              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
              value expressions: _col0 (type: bigint)
      Execution mode: vectorized
      Reduce Operator Tree:
        Group By Operator
          aggregations: sum(VALUE._col0)
          mode: mergepartial
          outputColumnNames: _col0
          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join JOIN[6][tables = [$hdt$_0, $hdt$_1]] in Stage 'Stage-1:MAPRED' is a cross product
PREHOOK: query: SELECT sum(hash(a.key,a.value,b.key,b.value)) FROM myinput1_n0 a FULL OUTER JOIN myinput1_n0 b on a.key > 40 AND a.value > 50 AND a.key = a.value AND b.key > 40 AND b.value > 50 AND b.key = b.value
PREHOOK: type: QUERY
PREHOOK: Input: default@myinput1_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT sum(hash(a.key,a.value,b.key,b.value)) FROM myinput1_n0 a FULL OUTER JOIN myinput1_n0 b on a.key > 40 AND a.value > 50 AND a.key = a.value AND b.key > 40 AND b.value > 50 AND b.key = b.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@myinput1_n0
#### A masked pattern was here ####
4939870
