PREHOOK: query: drop table varchar_udf_2
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table varchar_udf_2
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table varchar_udf_2 (c1 string, c2 string, c3 varchar(10), c4 varchar(20)) STORED AS ORC
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@varchar_udf_2
POSTHOOK: query: create table varchar_udf_2 (c1 string, c2 string, c3 varchar(10), c4 varchar(20)) STORED AS ORC
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@varchar_udf_2
PREHOOK: query: insert overwrite table varchar_udf_2
  select key, value, key, value from src where key = '238' limit 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@varchar_udf_2
POSTHOOK: query: insert overwrite table varchar_udf_2
  select key, value, key, value from src where key = '238' limit 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@varchar_udf_2
POSTHOOK: Lineage: varchar_udf_2.c1 SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: varchar_udf_2.c2 SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: varchar_udf_2.c3 EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: varchar_udf_2.c4 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: explain vectorization expression
select 
  c1 LIKE '%38%',
  c2 LIKE 'val_%',
  c3 LIKE '%38',
  c1 LIKE '%3x8%',
  c2 LIKE 'xval_%',
  c3 LIKE '%x38'
from varchar_udf_2 limit 1
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression
select 
  c1 LIKE '%38%',
  c2 LIKE 'val_%',
  c3 LIKE '%38',
  c1 LIKE '%3x8%',
  c2 LIKE 'xval_%',
  c3 LIKE '%x38'
from varchar_udf_2 limit 1
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: varchar_udf_2
            Statistics: Num rows: 1 Data size: 356 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2, 3]
            Select Operator
              expressions: (c1 like '%38%') (type: boolean), (c2 like 'val_%') (type: boolean), (c3 like '%38') (type: boolean), (c1 like '%3x8%') (type: boolean), (c2 like 'xval_%') (type: boolean), (c3 like '%x38') (type: boolean)
              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
              Select Vectorization:
                  className: VectorSelectOperator
                  native: true
                  projectedOutputColumns: [4, 5, 6, 7, 8, 9]
                  selectExpressions: SelectStringColLikeStringScalar(col 0) -> 4:String_Family, SelectStringColLikeStringScalar(col 1) -> 5:String_Family, SelectStringColLikeStringScalar(col 2) -> 6:String_Family, SelectStringColLikeStringScalar(col 0) -> 7:String_Family, SelectStringColLikeStringScalar(col 1) -> 8:String_Family, SelectStringColLikeStringScalar(col 2) -> 9:String_Family
              Statistics: Num rows: 1 Data size: 356 Basic stats: COMPLETE Column stats: NONE
              Limit
                Number of rows: 1
                Limit Vectorization:
                    className: VectorLimitOperator
                    native: true
                Statistics: Num rows: 1 Data size: 356 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 356 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true

  Stage: Stage-0
    Fetch Operator
      limit: 1
      Processor Tree:
        ListSink

PREHOOK: query: select 
  c1 LIKE '%38%',
  c2 LIKE 'val_%',
  c3 LIKE '%38',
  c1 LIKE '%3x8%',
  c2 LIKE 'xval_%',
  c3 LIKE '%x38'
from varchar_udf_2 limit 1
PREHOOK: type: QUERY
PREHOOK: Input: default@varchar_udf_2
#### A masked pattern was here ####
POSTHOOK: query: select 
  c1 LIKE '%38%',
  c2 LIKE 'val_%',
  c3 LIKE '%38',
  c1 LIKE '%3x8%',
  c2 LIKE 'xval_%',
  c3 LIKE '%x38'
from varchar_udf_2 limit 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@varchar_udf_2
#### A masked pattern was here ####
true	true	true	false	false	false
PREHOOK: query: drop table varchar_udf_2
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@varchar_udf_2
PREHOOK: Output: default@varchar_udf_2
POSTHOOK: query: drop table varchar_udf_2
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@varchar_udf_2
POSTHOOK: Output: default@varchar_udf_2
PREHOOK: query: create temporary table HIVE_14349 (a string) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@HIVE_14349
POSTHOOK: query: create temporary table HIVE_14349 (a string) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@HIVE_14349
PREHOOK: query: insert into HIVE_14349 values('XYZa'), ('badXYZa')
PREHOOK: type: QUERY
PREHOOK: Output: default@hive_14349
POSTHOOK: query: insert into HIVE_14349 values('XYZa'), ('badXYZa')
POSTHOOK: type: QUERY
POSTHOOK: Output: default@hive_14349
POSTHOOK: Lineage: hive_14349.a SIMPLE [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
PREHOOK: query: select * from HIVE_14349 where a LIKE 'XYZ%a%'
PREHOOK: type: QUERY
PREHOOK: Input: default@hive_14349
#### A masked pattern was here ####
POSTHOOK: query: select * from HIVE_14349 where a LIKE 'XYZ%a%'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@hive_14349
#### A masked pattern was here ####
XYZa
PREHOOK: query: insert into HIVE_14349 values ('XYZab'), ('XYZabBAD'), ('badXYZab'), ('badXYZabc')
PREHOOK: type: QUERY
PREHOOK: Output: default@hive_14349
POSTHOOK: query: insert into HIVE_14349 values ('XYZab'), ('XYZabBAD'), ('badXYZab'), ('badXYZabc')
POSTHOOK: type: QUERY
POSTHOOK: Output: default@hive_14349
POSTHOOK: Lineage: hive_14349.a SIMPLE [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
PREHOOK: query: select * from HIVE_14349 where a LIKE 'XYZ%a_'
PREHOOK: type: QUERY
PREHOOK: Input: default@hive_14349
#### A masked pattern was here ####
POSTHOOK: query: select * from HIVE_14349 where a LIKE 'XYZ%a_'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@hive_14349
#### A masked pattern was here ####
XYZab
PREHOOK: query: drop table HIVE_14349
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@hive_14349
PREHOOK: Output: default@hive_14349
POSTHOOK: query: drop table HIVE_14349
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@hive_14349
POSTHOOK: Output: default@hive_14349
