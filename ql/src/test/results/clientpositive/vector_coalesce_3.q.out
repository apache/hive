PREHOOK: query: CREATE TABLE test_1_n0 (member BIGINT, attr BIGINT) STORED AS ORC
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_1_n0
POSTHOOK: query: CREATE TABLE test_1_n0 (member BIGINT, attr BIGINT) STORED AS ORC
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_1_n0
PREHOOK: query: CREATE TABLE test_2_n0 (member BIGINT) STORED AS ORC
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_2_n0
POSTHOOK: query: CREATE TABLE test_2_n0 (member BIGINT) STORED AS ORC
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_2_n0
PREHOOK: query: INSERT INTO test_1_n0 VALUES (3,1),(2,2)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_1_n0
POSTHOOK: query: INSERT INTO test_1_n0 VALUES (3,1),(2,2)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_1_n0
POSTHOOK: Lineage: test_1_n0.attr SCRIPT []
POSTHOOK: Lineage: test_1_n0.member SCRIPT []
PREHOOK: query: INSERT INTO test_2_n0 VALUES (1),(2),(3),(4)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_2_n0
POSTHOOK: query: INSERT INTO test_2_n0 VALUES (1),(2),(3),(4)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_2_n0
POSTHOOK: Lineage: test_2_n0.member SCRIPT []
PREHOOK: query: insert into test_1_n0 values (NULL, NULL)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_1_n0
POSTHOOK: query: insert into test_1_n0 values (NULL, NULL)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_1_n0
POSTHOOK: Lineage: test_1_n0.attr EXPRESSION []
POSTHOOK: Lineage: test_1_n0.member EXPRESSION []
PREHOOK: query: insert into test_2_n0 values (NULL)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_2_n0
POSTHOOK: query: insert into test_2_n0 values (NULL)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_2_n0
POSTHOOK: Lineage: test_2_n0.member EXPRESSION []
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT m.member, (CASE WHEN COALESCE(n.attr, 5)>1 THEN n.attr END) AS attr 
FROM test_2_n0 m LEFT JOIN test_1_n0 n ON m.member = n.member
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT m.member, (CASE WHEN COALESCE(n.attr, 5)>1 THEN n.attr END) AS attr 
FROM test_2_n0 m LEFT JOIN test_1_n0 n ON m.member = n.member
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-4 is a root stage
  Stage-3 depends on stages: Stage-4
  Stage-0 depends on stages: Stage-3

STAGE PLANS:
  Stage: Stage-4
    Map Reduce Local Work
      Alias -> Map Local Tables:
        $hdt$_1:n 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        $hdt$_1:n 
          TableScan
            alias: n
            Statistics: Num rows: 3 Data size: 32 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: member (type: bigint), attr (type: bigint)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 3 Data size: 32 Basic stats: COMPLETE Column stats: NONE
              HashTable Sink Operator
                keys:
                  0 _col0 (type: bigint)
                  1 _col0 (type: bigint)

  Stage: Stage-3
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: m
            Statistics: Num rows: 5 Data size: 32 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                vectorizationSchemaColumns: [0:member:bigint, 1:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
            Select Operator
              expressions: member (type: bigint)
              outputColumnNames: _col0
              Select Vectorization:
                  className: VectorSelectOperator
                  native: true
                  projectedOutputColumnNums: [0]
              Statistics: Num rows: 5 Data size: 32 Basic stats: COMPLETE Column stats: NONE
              Map Join Operator
                condition map:
                     Left Outer Join 0 to 1
                keys:
                  0 _col0 (type: bigint)
                  1 _col0 (type: bigint)
                Map Join Vectorization:
                    bigTableKeyExpressions: col 0:bigint
                    bigTableValueExpressions: col 0:bigint
                    className: VectorMapJoinOperator
                    native: false
                    nativeConditionsMet: hive.mapjoin.optimized.hashtable IS true, hive.vectorized.execution.mapjoin.native.enabled IS true, One MapJoin Condition IS true, No nullsafe IS true, Small table vectorizes IS true, Outer Join has keys IS true, Optimized Table and Supports Key Types IS true
                    nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
                outputColumnNames: _col0, _col2
                Statistics: Num rows: 5 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: bigint), CASE WHEN ((COALESCE(_col2,5) > 1)) THEN (_col2) ELSE (null) END (type: bigint)
                  outputColumnNames: _col0, _col1
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [0, 3]
                      selectExpressions: IfExprColumnNull(col 2:boolean, col 1:bigint, null)(children: LongColGreaterLongScalar(col 3:bigint, val 1)(children: VectorCoalesce(columns [1, 2])(children: col 1:bigint, ConstantVectorExpression(val 5) -> 2:bigint) -> 3:bigint) -> 2:boolean, col 1:bigint) -> 3:bigint
                  Statistics: Num rows: 5 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 5 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          inputFormatFeatureSupport: []
          featureSupportInUse: []
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 1
              includeColumns: [0]
              dataColumns: member:bigint
              partitionColumnCount: 0
              scratchColumnTypeNames: [bigint]
      Local Work:
        Map Reduce Local Work

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT m.member, (CASE WHEN COALESCE(n.attr, 5)>1 THEN n.attr END) AS attr 
FROM test_2_n0 m LEFT JOIN test_1_n0 n ON m.member = n.member
PREHOOK: type: QUERY
PREHOOK: Input: default@test_1_n0
PREHOOK: Input: default@test_2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT m.member, (CASE WHEN COALESCE(n.attr, 5)>1 THEN n.attr END) AS attr 
FROM test_2_n0 m LEFT JOIN test_1_n0 n ON m.member = n.member
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_1_n0
POSTHOOK: Input: default@test_2_n0
#### A masked pattern was here ####
1	NULL
2	2
3	NULL
4	NULL
NULL	NULL
