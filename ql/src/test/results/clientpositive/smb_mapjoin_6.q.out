PREHOOK: query: CREATE TABLE smb_bucket4_1(key int, value string) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS STORED AS RCFILE
PREHOOK: type: CREATETABLE
POSTHOOK: query: CREATE TABLE smb_bucket4_1(key int, value string) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS STORED AS RCFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@smb_bucket4_1
PREHOOK: query: CREATE TABLE smb_bucket4_2(key int, value string) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS STORED AS RCFILE
PREHOOK: type: CREATETABLE
POSTHOOK: query: CREATE TABLE smb_bucket4_2(key int, value string) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS STORED AS RCFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@smb_bucket4_2
PREHOOK: query: create table smb_join_results(k1 int, v1 string, k2 int, v2 string)
PREHOOK: type: CREATETABLE
POSTHOOK: query: create table smb_join_results(k1 int, v1 string, k2 int, v2 string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@smb_join_results
PREHOOK: query: create table normal_join_results(k1 int, v1 string, k2 int, v2 string)
PREHOOK: type: CREATETABLE
POSTHOOK: query: create table normal_join_results(k1 int, v1 string, k2 int, v2 string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@normal_join_results
PREHOOK: query: insert overwrite table smb_bucket4_1
select * from src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@smb_bucket4_1
POSTHOOK: query: insert overwrite table smb_bucket4_1
select * from src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@smb_bucket4_1
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: insert overwrite table smb_bucket4_2
select * from src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@smb_bucket4_2
POSTHOOK: query: insert overwrite table smb_bucket4_2
select * from src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@smb_bucket4_2
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: explain
insert overwrite table smb_join_results
select /*+mapjoin(a)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key
PREHOOK: type: QUERY
POSTHOOK: query: explain
insert overwrite table smb_join_results
select /*+mapjoin(a)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key
POSTHOOK: type: QUERY
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_TABREF (TOK_TABNAME smb_bucket4_1) a) (TOK_TABREF (TOK_TABNAME smb_bucket4_2) b) (= (. (TOK_TABLE_OR_COL a) key) (. (TOK_TABLE_OR_COL b) key)))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME smb_join_results))) (TOK_SELECT (TOK_HINTLIST (TOK_HINT TOK_MAPJOIN (TOK_HINTARGLIST a))) (TOK_SELEXPR TOK_ALLCOLREF))))

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-7 depends on stages: Stage-1 , consists of Stage-4, Stage-3, Stage-5
  Stage-4
  Stage-0 depends on stages: Stage-4, Stage-3, Stage-6
  Stage-2 depends on stages: Stage-0
  Stage-3
  Stage-5
  Stage-6 depends on stages: Stage-5

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Alias -> Map Operator Tree:
        b 
          TableScan
            alias: b
            Sorted Merge Bucket Map Join Operator
              condition map:
                   Inner Join 0 to 1
              condition expressions:
                0 {key} {value}
                1 {key} {value}
              handleSkewJoin: false
              keys:
                0 [Column[key]]
                1 [Column[key]]
              outputColumnNames: _col0, _col1, _col4, _col5
              Position of Big Table: 1
              Select Operator
                expressions:
                      expr: _col0
                      type: int
                      expr: _col1
                      type: string
                      expr: _col4
                      type: int
                      expr: _col5
                      type: string
                outputColumnNames: _col0, _col1, _col2, _col3
                File Output Operator
                  compressed: false
                  GlobalTableId: 1
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.smb_join_results

  Stage: Stage-7
    Conditional Operator

  Stage: Stage-4
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.smb_join_results

  Stage: Stage-2
    Stats-Aggr Operator

  Stage: Stage-3
    Map Reduce
      Alias -> Map Operator Tree:
#### A masked pattern was here ####
            File Output Operator
              compressed: false
              GlobalTableId: 0
              table:
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                  name: default.smb_join_results

  Stage: Stage-5
    Map Reduce
      Alias -> Map Operator Tree:
#### A masked pattern was here ####
            File Output Operator
              compressed: false
              GlobalTableId: 0
              table:
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                  name: default.smb_join_results

  Stage: Stage-6
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####


PREHOOK: query: insert overwrite table smb_join_results
select /*+mapjoin(a)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key
PREHOOK: type: QUERY
PREHOOK: Input: default@smb_bucket4_1
PREHOOK: Input: default@smb_bucket4_2
PREHOOK: Output: default@smb_join_results
POSTHOOK: query: insert overwrite table smb_join_results
select /*+mapjoin(a)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@smb_bucket4_1
POSTHOOK: Input: default@smb_bucket4_2
POSTHOOK: Output: default@smb_join_results
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: select * from smb_join_results order by k1
PREHOOK: type: QUERY
PREHOOK: Input: default@smb_join_results
#### A masked pattern was here ####
POSTHOOK: query: select * from smb_join_results order by k1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@smb_join_results
#### A masked pattern was here ####
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
2	val_2	2	val_2
4	val_4	4	val_4
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
8	val_8	8	val_8
9	val_9	9	val_9
10	val_10	10	val_10
11	val_11	11	val_11
12	val_12	12	val_12
12	val_12	12	val_12
12	val_12	12	val_12
12	val_12	12	val_12
15	val_15	15	val_15
15	val_15	15	val_15
15	val_15	15	val_15
15	val_15	15	val_15
17	val_17	17	val_17
18	val_18	18	val_18
18	val_18	18	val_18
18	val_18	18	val_18
18	val_18	18	val_18
19	val_19	19	val_19
20	val_20	20	val_20
24	val_24	24	val_24
24	val_24	24	val_24
24	val_24	24	val_24
24	val_24	24	val_24
26	val_26	26	val_26
26	val_26	26	val_26
26	val_26	26	val_26
26	val_26	26	val_26
27	val_27	27	val_27
28	val_28	28	val_28
30	val_30	30	val_30
33	val_33	33	val_33
34	val_34	34	val_34
35	val_35	35	val_35
35	val_35	35	val_35
35	val_35	35	val_35
35	val_35	35	val_35
35	val_35	35	val_35
35	val_35	35	val_35
35	val_35	35	val_35
35	val_35	35	val_35
35	val_35	35	val_35
37	val_37	37	val_37
37	val_37	37	val_37
37	val_37	37	val_37
37	val_37	37	val_37
41	val_41	41	val_41
42	val_42	42	val_42
42	val_42	42	val_42
42	val_42	42	val_42
42	val_42	42	val_42
43	val_43	43	val_43
44	val_44	44	val_44
47	val_47	47	val_47
51	val_51	51	val_51
51	val_51	51	val_51
51	val_51	51	val_51
51	val_51	51	val_51
53	val_53	53	val_53
54	val_54	54	val_54
57	val_57	57	val_57
58	val_58	58	val_58
58	val_58	58	val_58
58	val_58	58	val_58
58	val_58	58	val_58
64	val_64	64	val_64
65	val_65	65	val_65
66	val_66	66	val_66
67	val_67	67	val_67
67	val_67	67	val_67
67	val_67	67	val_67
67	val_67	67	val_67
69	val_69	69	val_69
70	val_70	70	val_70
70	val_70	70	val_70
70	val_70	70	val_70
70	val_70	70	val_70
70	val_70	70	val_70
70	val_70	70	val_70
70	val_70	70	val_70
70	val_70	70	val_70
70	val_70	70	val_70
72	val_72	72	val_72
72	val_72	72	val_72
72	val_72	72	val_72
72	val_72	72	val_72
74	val_74	74	val_74
76	val_76	76	val_76
76	val_76	76	val_76
76	val_76	76	val_76
76	val_76	76	val_76
77	val_77	77	val_77
78	val_78	78	val_78
80	val_80	80	val_80
82	val_82	82	val_82
83	val_83	83	val_83
83	val_83	83	val_83
83	val_83	83	val_83
83	val_83	83	val_83
84	val_84	84	val_84
84	val_84	84	val_84
84	val_84	84	val_84
84	val_84	84	val_84
85	val_85	85	val_85
86	val_86	86	val_86
87	val_87	87	val_87
90	val_90	90	val_90
90	val_90	90	val_90
90	val_90	90	val_90
90	val_90	90	val_90
90	val_90	90	val_90
90	val_90	90	val_90
90	val_90	90	val_90
90	val_90	90	val_90
90	val_90	90	val_90
92	val_92	92	val_92
95	val_95	95	val_95
95	val_95	95	val_95
95	val_95	95	val_95
95	val_95	95	val_95
96	val_96	96	val_96
97	val_97	97	val_97
97	val_97	97	val_97
97	val_97	97	val_97
97	val_97	97	val_97
98	val_98	98	val_98
98	val_98	98	val_98
98	val_98	98	val_98
98	val_98	98	val_98
100	val_100	100	val_100
100	val_100	100	val_100
100	val_100	100	val_100
100	val_100	100	val_100
103	val_103	103	val_103
103	val_103	103	val_103
103	val_103	103	val_103
103	val_103	103	val_103
104	val_104	104	val_104
104	val_104	104	val_104
104	val_104	104	val_104
104	val_104	104	val_104
105	val_105	105	val_105
111	val_111	111	val_111
113	val_113	113	val_113
113	val_113	113	val_113
113	val_113	113	val_113
113	val_113	113	val_113
114	val_114	114	val_114
116	val_116	116	val_116
118	val_118	118	val_118
118	val_118	118	val_118
118	val_118	118	val_118
118	val_118	118	val_118
119	val_119	119	val_119
119	val_119	119	val_119
119	val_119	119	val_119
119	val_119	119	val_119
119	val_119	119	val_119
119	val_119	119	val_119
119	val_119	119	val_119
119	val_119	119	val_119
119	val_119	119	val_119
120	val_120	120	val_120
120	val_120	120	val_120
120	val_120	120	val_120
120	val_120	120	val_120
125	val_125	125	val_125
125	val_125	125	val_125
125	val_125	125	val_125
125	val_125	125	val_125
126	val_126	126	val_126
128	val_128	128	val_128
128	val_128	128	val_128
128	val_128	128	val_128
128	val_128	128	val_128
128	val_128	128	val_128
128	val_128	128	val_128
128	val_128	128	val_128
128	val_128	128	val_128
128	val_128	128	val_128
129	val_129	129	val_129
129	val_129	129	val_129
129	val_129	129	val_129
129	val_129	129	val_129
131	val_131	131	val_131
133	val_133	133	val_133
134	val_134	134	val_134
134	val_134	134	val_134
134	val_134	134	val_134
134	val_134	134	val_134
136	val_136	136	val_136
137	val_137	137	val_137
137	val_137	137	val_137
137	val_137	137	val_137
137	val_137	137	val_137
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
143	val_143	143	val_143
145	val_145	145	val_145
146	val_146	146	val_146
146	val_146	146	val_146
146	val_146	146	val_146
146	val_146	146	val_146
149	val_149	149	val_149
149	val_149	149	val_149
149	val_149	149	val_149
149	val_149	149	val_149
150	val_150	150	val_150
152	val_152	152	val_152
152	val_152	152	val_152
152	val_152	152	val_152
152	val_152	152	val_152
153	val_153	153	val_153
155	val_155	155	val_155
156	val_156	156	val_156
157	val_157	157	val_157
158	val_158	158	val_158
160	val_160	160	val_160
162	val_162	162	val_162
163	val_163	163	val_163
164	val_164	164	val_164
164	val_164	164	val_164
164	val_164	164	val_164
164	val_164	164	val_164
165	val_165	165	val_165
165	val_165	165	val_165
165	val_165	165	val_165
165	val_165	165	val_165
166	val_166	166	val_166
167	val_167	167	val_167
167	val_167	167	val_167
167	val_167	167	val_167
167	val_167	167	val_167
167	val_167	167	val_167
167	val_167	167	val_167
167	val_167	167	val_167
167	val_167	167	val_167
167	val_167	167	val_167
168	val_168	168	val_168
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
170	val_170	170	val_170
172	val_172	172	val_172
172	val_172	172	val_172
172	val_172	172	val_172
172	val_172	172	val_172
174	val_174	174	val_174
174	val_174	174	val_174
174	val_174	174	val_174
174	val_174	174	val_174
175	val_175	175	val_175
175	val_175	175	val_175
175	val_175	175	val_175
175	val_175	175	val_175
176	val_176	176	val_176
176	val_176	176	val_176
176	val_176	176	val_176
176	val_176	176	val_176
177	val_177	177	val_177
178	val_178	178	val_178
179	val_179	179	val_179
179	val_179	179	val_179
179	val_179	179	val_179
179	val_179	179	val_179
180	val_180	180	val_180
181	val_181	181	val_181
183	val_183	183	val_183
186	val_186	186	val_186
187	val_187	187	val_187
187	val_187	187	val_187
187	val_187	187	val_187
187	val_187	187	val_187
187	val_187	187	val_187
187	val_187	187	val_187
187	val_187	187	val_187
187	val_187	187	val_187
187	val_187	187	val_187
189	val_189	189	val_189
190	val_190	190	val_190
191	val_191	191	val_191
191	val_191	191	val_191
191	val_191	191	val_191
191	val_191	191	val_191
192	val_192	192	val_192
193	val_193	193	val_193
193	val_193	193	val_193
193	val_193	193	val_193
193	val_193	193	val_193
193	val_193	193	val_193
193	val_193	193	val_193
193	val_193	193	val_193
193	val_193	193	val_193
193	val_193	193	val_193
194	val_194	194	val_194
195	val_195	195	val_195
195	val_195	195	val_195
195	val_195	195	val_195
195	val_195	195	val_195
196	val_196	196	val_196
197	val_197	197	val_197
197	val_197	197	val_197
197	val_197	197	val_197
197	val_197	197	val_197
199	val_199	199	val_199
199	val_199	199	val_199
199	val_199	199	val_199
199	val_199	199	val_199
199	val_199	199	val_199
199	val_199	199	val_199
199	val_199	199	val_199
199	val_199	199	val_199
199	val_199	199	val_199
200	val_200	200	val_200
200	val_200	200	val_200
200	val_200	200	val_200
200	val_200	200	val_200
201	val_201	201	val_201
202	val_202	202	val_202
203	val_203	203	val_203
203	val_203	203	val_203
203	val_203	203	val_203
203	val_203	203	val_203
205	val_205	205	val_205
205	val_205	205	val_205
205	val_205	205	val_205
205	val_205	205	val_205
207	val_207	207	val_207
207	val_207	207	val_207
207	val_207	207	val_207
207	val_207	207	val_207
208	val_208	208	val_208
208	val_208	208	val_208
208	val_208	208	val_208
208	val_208	208	val_208
208	val_208	208	val_208
208	val_208	208	val_208
208	val_208	208	val_208
208	val_208	208	val_208
208	val_208	208	val_208
209	val_209	209	val_209
209	val_209	209	val_209
209	val_209	209	val_209
209	val_209	209	val_209
213	val_213	213	val_213
213	val_213	213	val_213
213	val_213	213	val_213
213	val_213	213	val_213
214	val_214	214	val_214
216	val_216	216	val_216
216	val_216	216	val_216
216	val_216	216	val_216
216	val_216	216	val_216
217	val_217	217	val_217
217	val_217	217	val_217
217	val_217	217	val_217
217	val_217	217	val_217
218	val_218	218	val_218
219	val_219	219	val_219
219	val_219	219	val_219
219	val_219	219	val_219
219	val_219	219	val_219
221	val_221	221	val_221
221	val_221	221	val_221
221	val_221	221	val_221
221	val_221	221	val_221
222	val_222	222	val_222
223	val_223	223	val_223
223	val_223	223	val_223
223	val_223	223	val_223
223	val_223	223	val_223
224	val_224	224	val_224
224	val_224	224	val_224
224	val_224	224	val_224
224	val_224	224	val_224
226	val_226	226	val_226
228	val_228	228	val_228
229	val_229	229	val_229
229	val_229	229	val_229
229	val_229	229	val_229
229	val_229	229	val_229
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
233	val_233	233	val_233
233	val_233	233	val_233
233	val_233	233	val_233
233	val_233	233	val_233
235	val_235	235	val_235
237	val_237	237	val_237
237	val_237	237	val_237
237	val_237	237	val_237
237	val_237	237	val_237
238	val_238	238	val_238
238	val_238	238	val_238
238	val_238	238	val_238
238	val_238	238	val_238
239	val_239	239	val_239
239	val_239	239	val_239
239	val_239	239	val_239
239	val_239	239	val_239
241	val_241	241	val_241
242	val_242	242	val_242
242	val_242	242	val_242
242	val_242	242	val_242
242	val_242	242	val_242
244	val_244	244	val_244
247	val_247	247	val_247
248	val_248	248	val_248
249	val_249	249	val_249
252	val_252	252	val_252
255	val_255	255	val_255
255	val_255	255	val_255
255	val_255	255	val_255
255	val_255	255	val_255
256	val_256	256	val_256
256	val_256	256	val_256
256	val_256	256	val_256
256	val_256	256	val_256
257	val_257	257	val_257
258	val_258	258	val_258
260	val_260	260	val_260
262	val_262	262	val_262
263	val_263	263	val_263
265	val_265	265	val_265
265	val_265	265	val_265
265	val_265	265	val_265
265	val_265	265	val_265
266	val_266	266	val_266
272	val_272	272	val_272
272	val_272	272	val_272
272	val_272	272	val_272
272	val_272	272	val_272
273	val_273	273	val_273
273	val_273	273	val_273
273	val_273	273	val_273
273	val_273	273	val_273
273	val_273	273	val_273
273	val_273	273	val_273
273	val_273	273	val_273
273	val_273	273	val_273
273	val_273	273	val_273
274	val_274	274	val_274
275	val_275	275	val_275
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
278	val_278	278	val_278
278	val_278	278	val_278
278	val_278	278	val_278
278	val_278	278	val_278
280	val_280	280	val_280
280	val_280	280	val_280
280	val_280	280	val_280
280	val_280	280	val_280
281	val_281	281	val_281
281	val_281	281	val_281
281	val_281	281	val_281
281	val_281	281	val_281
282	val_282	282	val_282
282	val_282	282	val_282
282	val_282	282	val_282
282	val_282	282	val_282
283	val_283	283	val_283
284	val_284	284	val_284
285	val_285	285	val_285
286	val_286	286	val_286
287	val_287	287	val_287
288	val_288	288	val_288
288	val_288	288	val_288
288	val_288	288	val_288
288	val_288	288	val_288
289	val_289	289	val_289
291	val_291	291	val_291
292	val_292	292	val_292
296	val_296	296	val_296
298	val_298	298	val_298
298	val_298	298	val_298
298	val_298	298	val_298
298	val_298	298	val_298
298	val_298	298	val_298
298	val_298	298	val_298
298	val_298	298	val_298
298	val_298	298	val_298
298	val_298	298	val_298
302	val_302	302	val_302
305	val_305	305	val_305
306	val_306	306	val_306
307	val_307	307	val_307
307	val_307	307	val_307
307	val_307	307	val_307
307	val_307	307	val_307
308	val_308	308	val_308
309	val_309	309	val_309
309	val_309	309	val_309
309	val_309	309	val_309
309	val_309	309	val_309
310	val_310	310	val_310
311	val_311	311	val_311
311	val_311	311	val_311
311	val_311	311	val_311
311	val_311	311	val_311
311	val_311	311	val_311
311	val_311	311	val_311
311	val_311	311	val_311
311	val_311	311	val_311
311	val_311	311	val_311
315	val_315	315	val_315
316	val_316	316	val_316
316	val_316	316	val_316
316	val_316	316	val_316
316	val_316	316	val_316
316	val_316	316	val_316
316	val_316	316	val_316
316	val_316	316	val_316
316	val_316	316	val_316
316	val_316	316	val_316
317	val_317	317	val_317
317	val_317	317	val_317
317	val_317	317	val_317
317	val_317	317	val_317
318	val_318	318	val_318
318	val_318	318	val_318
318	val_318	318	val_318
318	val_318	318	val_318
318	val_318	318	val_318
318	val_318	318	val_318
318	val_318	318	val_318
318	val_318	318	val_318
318	val_318	318	val_318
321	val_321	321	val_321
321	val_321	321	val_321
321	val_321	321	val_321
321	val_321	321	val_321
322	val_322	322	val_322
322	val_322	322	val_322
322	val_322	322	val_322
322	val_322	322	val_322
323	val_323	323	val_323
325	val_325	325	val_325
325	val_325	325	val_325
325	val_325	325	val_325
325	val_325	325	val_325
327	val_327	327	val_327
327	val_327	327	val_327
327	val_327	327	val_327
327	val_327	327	val_327
327	val_327	327	val_327
327	val_327	327	val_327
327	val_327	327	val_327
327	val_327	327	val_327
327	val_327	327	val_327
331	val_331	331	val_331
331	val_331	331	val_331
331	val_331	331	val_331
331	val_331	331	val_331
332	val_332	332	val_332
333	val_333	333	val_333
333	val_333	333	val_333
333	val_333	333	val_333
333	val_333	333	val_333
335	val_335	335	val_335
336	val_336	336	val_336
338	val_338	338	val_338
339	val_339	339	val_339
341	val_341	341	val_341
342	val_342	342	val_342
342	val_342	342	val_342
342	val_342	342	val_342
342	val_342	342	val_342
344	val_344	344	val_344
344	val_344	344	val_344
344	val_344	344	val_344
344	val_344	344	val_344
345	val_345	345	val_345
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
351	val_351	351	val_351
353	val_353	353	val_353
353	val_353	353	val_353
353	val_353	353	val_353
353	val_353	353	val_353
356	val_356	356	val_356
360	val_360	360	val_360
362	val_362	362	val_362
364	val_364	364	val_364
365	val_365	365	val_365
366	val_366	366	val_366
367	val_367	367	val_367
367	val_367	367	val_367
367	val_367	367	val_367
367	val_367	367	val_367
368	val_368	368	val_368
369	val_369	369	val_369
369	val_369	369	val_369
369	val_369	369	val_369
369	val_369	369	val_369
369	val_369	369	val_369
369	val_369	369	val_369
369	val_369	369	val_369
369	val_369	369	val_369
369	val_369	369	val_369
373	val_373	373	val_373
374	val_374	374	val_374
375	val_375	375	val_375
377	val_377	377	val_377
378	val_378	378	val_378
379	val_379	379	val_379
382	val_382	382	val_382
382	val_382	382	val_382
382	val_382	382	val_382
382	val_382	382	val_382
384	val_384	384	val_384
384	val_384	384	val_384
384	val_384	384	val_384
384	val_384	384	val_384
384	val_384	384	val_384
384	val_384	384	val_384
384	val_384	384	val_384
384	val_384	384	val_384
384	val_384	384	val_384
386	val_386	386	val_386
389	val_389	389	val_389
392	val_392	392	val_392
393	val_393	393	val_393
394	val_394	394	val_394
395	val_395	395	val_395
395	val_395	395	val_395
395	val_395	395	val_395
395	val_395	395	val_395
396	val_396	396	val_396
396	val_396	396	val_396
396	val_396	396	val_396
396	val_396	396	val_396
396	val_396	396	val_396
396	val_396	396	val_396
396	val_396	396	val_396
396	val_396	396	val_396
396	val_396	396	val_396
397	val_397	397	val_397
397	val_397	397	val_397
397	val_397	397	val_397
397	val_397	397	val_397
399	val_399	399	val_399
399	val_399	399	val_399
399	val_399	399	val_399
399	val_399	399	val_399
400	val_400	400	val_400
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
402	val_402	402	val_402
403	val_403	403	val_403
403	val_403	403	val_403
403	val_403	403	val_403
403	val_403	403	val_403
403	val_403	403	val_403
403	val_403	403	val_403
403	val_403	403	val_403
403	val_403	403	val_403
403	val_403	403	val_403
404	val_404	404	val_404
404	val_404	404	val_404
404	val_404	404	val_404
404	val_404	404	val_404
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
407	val_407	407	val_407
409	val_409	409	val_409
409	val_409	409	val_409
409	val_409	409	val_409
409	val_409	409	val_409
409	val_409	409	val_409
409	val_409	409	val_409
409	val_409	409	val_409
409	val_409	409	val_409
409	val_409	409	val_409
411	val_411	411	val_411
413	val_413	413	val_413
413	val_413	413	val_413
413	val_413	413	val_413
413	val_413	413	val_413
414	val_414	414	val_414
414	val_414	414	val_414
414	val_414	414	val_414
414	val_414	414	val_414
417	val_417	417	val_417
417	val_417	417	val_417
417	val_417	417	val_417
417	val_417	417	val_417
417	val_417	417	val_417
417	val_417	417	val_417
417	val_417	417	val_417
417	val_417	417	val_417
417	val_417	417	val_417
418	val_418	418	val_418
419	val_419	419	val_419
421	val_421	421	val_421
424	val_424	424	val_424
424	val_424	424	val_424
424	val_424	424	val_424
424	val_424	424	val_424
427	val_427	427	val_427
429	val_429	429	val_429
429	val_429	429	val_429
429	val_429	429	val_429
429	val_429	429	val_429
430	val_430	430	val_430
430	val_430	430	val_430
430	val_430	430	val_430
430	val_430	430	val_430
430	val_430	430	val_430
430	val_430	430	val_430
430	val_430	430	val_430
430	val_430	430	val_430
430	val_430	430	val_430
431	val_431	431	val_431
431	val_431	431	val_431
431	val_431	431	val_431
431	val_431	431	val_431
431	val_431	431	val_431
431	val_431	431	val_431
431	val_431	431	val_431
431	val_431	431	val_431
431	val_431	431	val_431
432	val_432	432	val_432
435	val_435	435	val_435
436	val_436	436	val_436
437	val_437	437	val_437
438	val_438	438	val_438
438	val_438	438	val_438
438	val_438	438	val_438
438	val_438	438	val_438
438	val_438	438	val_438
438	val_438	438	val_438
438	val_438	438	val_438
438	val_438	438	val_438
438	val_438	438	val_438
439	val_439	439	val_439
439	val_439	439	val_439
439	val_439	439	val_439
439	val_439	439	val_439
443	val_443	443	val_443
444	val_444	444	val_444
446	val_446	446	val_446
448	val_448	448	val_448
449	val_449	449	val_449
452	val_452	452	val_452
453	val_453	453	val_453
454	val_454	454	val_454
454	val_454	454	val_454
454	val_454	454	val_454
454	val_454	454	val_454
454	val_454	454	val_454
454	val_454	454	val_454
454	val_454	454	val_454
454	val_454	454	val_454
454	val_454	454	val_454
455	val_455	455	val_455
457	val_457	457	val_457
458	val_458	458	val_458
458	val_458	458	val_458
458	val_458	458	val_458
458	val_458	458	val_458
459	val_459	459	val_459
459	val_459	459	val_459
459	val_459	459	val_459
459	val_459	459	val_459
460	val_460	460	val_460
462	val_462	462	val_462
462	val_462	462	val_462
462	val_462	462	val_462
462	val_462	462	val_462
463	val_463	463	val_463
463	val_463	463	val_463
463	val_463	463	val_463
463	val_463	463	val_463
466	val_466	466	val_466
466	val_466	466	val_466
466	val_466	466	val_466
466	val_466	466	val_466
466	val_466	466	val_466
466	val_466	466	val_466
466	val_466	466	val_466
466	val_466	466	val_466
466	val_466	466	val_466
467	val_467	467	val_467
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
470	val_470	470	val_470
472	val_472	472	val_472
475	val_475	475	val_475
477	val_477	477	val_477
478	val_478	478	val_478
478	val_478	478	val_478
478	val_478	478	val_478
478	val_478	478	val_478
479	val_479	479	val_479
480	val_480	480	val_480
480	val_480	480	val_480
480	val_480	480	val_480
480	val_480	480	val_480
480	val_480	480	val_480
480	val_480	480	val_480
480	val_480	480	val_480
480	val_480	480	val_480
480	val_480	480	val_480
481	val_481	481	val_481
482	val_482	482	val_482
483	val_483	483	val_483
484	val_484	484	val_484
485	val_485	485	val_485
487	val_487	487	val_487
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
490	val_490	490	val_490
491	val_491	491	val_491
492	val_492	492	val_492
492	val_492	492	val_492
492	val_492	492	val_492
492	val_492	492	val_492
493	val_493	493	val_493
494	val_494	494	val_494
495	val_495	495	val_495
496	val_496	496	val_496
497	val_497	497	val_497
498	val_498	498	val_498
498	val_498	498	val_498
498	val_498	498	val_498
498	val_498	498	val_498
498	val_498	498	val_498
498	val_498	498	val_498
498	val_498	498	val_498
498	val_498	498	val_498
498	val_498	498	val_498
PREHOOK: query: insert overwrite table normal_join_results select * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key
PREHOOK: type: QUERY
PREHOOK: Input: default@smb_bucket4_1
PREHOOK: Input: default@smb_bucket4_2
PREHOOK: Output: default@normal_join_results
POSTHOOK: query: insert overwrite table normal_join_results select * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@smb_bucket4_1
POSTHOOK: Input: default@smb_bucket4_2
POSTHOOK: Output: default@normal_join_results
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: select sum(hash(k1)) as k1, sum(hash(k2)) as k2, sum(hash(v1)) as v1, sum(hash(v2)) as v2 from normal_join_results
PREHOOK: type: QUERY
PREHOOK: Input: default@normal_join_results
#### A masked pattern was here ####
POSTHOOK: query: select sum(hash(k1)) as k1, sum(hash(k2)) as k2, sum(hash(v1)) as v1, sum(hash(v2)) as v2 from normal_join_results
POSTHOOK: type: QUERY
POSTHOOK: Input: default@normal_join_results
#### A masked pattern was here ####
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
278697	278697	101852390308	101852390308
PREHOOK: query: select sum(hash(k1)) as k1, sum(hash(k2)) as k2, sum(hash(v1)) as v1, sum(hash(v2)) as v2 from smb_join_results
PREHOOK: type: QUERY
PREHOOK: Input: default@smb_join_results
#### A masked pattern was here ####
POSTHOOK: query: select sum(hash(k1)) as k1, sum(hash(k2)) as k2, sum(hash(v1)) as v1, sum(hash(v2)) as v2 from smb_join_results
POSTHOOK: type: QUERY
POSTHOOK: Input: default@smb_join_results
#### A masked pattern was here ####
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
278697	278697	101852390308	101852390308
PREHOOK: query: explain
insert overwrite table smb_join_results
select /*+mapjoin(b)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key
PREHOOK: type: QUERY
POSTHOOK: query: explain
insert overwrite table smb_join_results
select /*+mapjoin(b)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key
POSTHOOK: type: QUERY
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_TABREF (TOK_TABNAME smb_bucket4_1) a) (TOK_TABREF (TOK_TABNAME smb_bucket4_2) b) (= (. (TOK_TABLE_OR_COL a) key) (. (TOK_TABLE_OR_COL b) key)))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME smb_join_results))) (TOK_SELECT (TOK_HINTLIST (TOK_HINT TOK_MAPJOIN (TOK_HINTARGLIST b))) (TOK_SELEXPR TOK_ALLCOLREF))))

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-7 depends on stages: Stage-1 , consists of Stage-4, Stage-3, Stage-5
  Stage-4
  Stage-0 depends on stages: Stage-4, Stage-3, Stage-6
  Stage-2 depends on stages: Stage-0
  Stage-3
  Stage-5
  Stage-6 depends on stages: Stage-5

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Alias -> Map Operator Tree:
        a 
          TableScan
            alias: a
            Sorted Merge Bucket Map Join Operator
              condition map:
                   Inner Join 0 to 1
              condition expressions:
                0 {key} {value}
                1 {key} {value}
              handleSkewJoin: false
              keys:
                0 [Column[key]]
                1 [Column[key]]
              outputColumnNames: _col0, _col1, _col4, _col5
              Position of Big Table: 0
              Select Operator
                expressions:
                      expr: _col0
                      type: int
                      expr: _col1
                      type: string
                      expr: _col4
                      type: int
                      expr: _col5
                      type: string
                outputColumnNames: _col0, _col1, _col2, _col3
                File Output Operator
                  compressed: false
                  GlobalTableId: 1
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.smb_join_results

  Stage: Stage-7
    Conditional Operator

  Stage: Stage-4
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.smb_join_results

  Stage: Stage-2
    Stats-Aggr Operator

  Stage: Stage-3
    Map Reduce
      Alias -> Map Operator Tree:
#### A masked pattern was here ####
            File Output Operator
              compressed: false
              GlobalTableId: 0
              table:
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                  name: default.smb_join_results

  Stage: Stage-5
    Map Reduce
      Alias -> Map Operator Tree:
#### A masked pattern was here ####
            File Output Operator
              compressed: false
              GlobalTableId: 0
              table:
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                  name: default.smb_join_results

  Stage: Stage-6
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####


PREHOOK: query: insert overwrite table smb_join_results
select /*+mapjoin(b)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key
PREHOOK: type: QUERY
PREHOOK: Input: default@smb_bucket4_1
PREHOOK: Input: default@smb_bucket4_2
PREHOOK: Output: default@smb_join_results
POSTHOOK: query: insert overwrite table smb_join_results
select /*+mapjoin(b)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@smb_bucket4_1
POSTHOOK: Input: default@smb_bucket4_2
POSTHOOK: Output: default@smb_join_results
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: insert overwrite table smb_join_results
select /*+mapjoin(a)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key
PREHOOK: type: QUERY
PREHOOK: Input: default@smb_bucket4_1
PREHOOK: Input: default@smb_bucket4_2
PREHOOK: Output: default@smb_join_results
POSTHOOK: query: insert overwrite table smb_join_results
select /*+mapjoin(a)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@smb_bucket4_1
POSTHOOK: Input: default@smb_bucket4_2
POSTHOOK: Output: default@smb_join_results
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: select * from smb_join_results order by k1
PREHOOK: type: QUERY
PREHOOK: Input: default@smb_join_results
#### A masked pattern was here ####
POSTHOOK: query: select * from smb_join_results order by k1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@smb_join_results
#### A masked pattern was here ####
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
2	val_2	2	val_2
4	val_4	4	val_4
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
8	val_8	8	val_8
9	val_9	9	val_9
10	val_10	10	val_10
11	val_11	11	val_11
12	val_12	12	val_12
12	val_12	12	val_12
12	val_12	12	val_12
12	val_12	12	val_12
15	val_15	15	val_15
15	val_15	15	val_15
15	val_15	15	val_15
15	val_15	15	val_15
17	val_17	17	val_17
18	val_18	18	val_18
18	val_18	18	val_18
18	val_18	18	val_18
18	val_18	18	val_18
19	val_19	19	val_19
20	val_20	20	val_20
24	val_24	24	val_24
24	val_24	24	val_24
24	val_24	24	val_24
24	val_24	24	val_24
26	val_26	26	val_26
26	val_26	26	val_26
26	val_26	26	val_26
26	val_26	26	val_26
27	val_27	27	val_27
28	val_28	28	val_28
30	val_30	30	val_30
33	val_33	33	val_33
34	val_34	34	val_34
35	val_35	35	val_35
35	val_35	35	val_35
35	val_35	35	val_35
35	val_35	35	val_35
35	val_35	35	val_35
35	val_35	35	val_35
35	val_35	35	val_35
35	val_35	35	val_35
35	val_35	35	val_35
37	val_37	37	val_37
37	val_37	37	val_37
37	val_37	37	val_37
37	val_37	37	val_37
41	val_41	41	val_41
42	val_42	42	val_42
42	val_42	42	val_42
42	val_42	42	val_42
42	val_42	42	val_42
43	val_43	43	val_43
44	val_44	44	val_44
47	val_47	47	val_47
51	val_51	51	val_51
51	val_51	51	val_51
51	val_51	51	val_51
51	val_51	51	val_51
53	val_53	53	val_53
54	val_54	54	val_54
57	val_57	57	val_57
58	val_58	58	val_58
58	val_58	58	val_58
58	val_58	58	val_58
58	val_58	58	val_58
64	val_64	64	val_64
65	val_65	65	val_65
66	val_66	66	val_66
67	val_67	67	val_67
67	val_67	67	val_67
67	val_67	67	val_67
67	val_67	67	val_67
69	val_69	69	val_69
70	val_70	70	val_70
70	val_70	70	val_70
70	val_70	70	val_70
70	val_70	70	val_70
70	val_70	70	val_70
70	val_70	70	val_70
70	val_70	70	val_70
70	val_70	70	val_70
70	val_70	70	val_70
72	val_72	72	val_72
72	val_72	72	val_72
72	val_72	72	val_72
72	val_72	72	val_72
74	val_74	74	val_74
76	val_76	76	val_76
76	val_76	76	val_76
76	val_76	76	val_76
76	val_76	76	val_76
77	val_77	77	val_77
78	val_78	78	val_78
80	val_80	80	val_80
82	val_82	82	val_82
83	val_83	83	val_83
83	val_83	83	val_83
83	val_83	83	val_83
83	val_83	83	val_83
84	val_84	84	val_84
84	val_84	84	val_84
84	val_84	84	val_84
84	val_84	84	val_84
85	val_85	85	val_85
86	val_86	86	val_86
87	val_87	87	val_87
90	val_90	90	val_90
90	val_90	90	val_90
90	val_90	90	val_90
90	val_90	90	val_90
90	val_90	90	val_90
90	val_90	90	val_90
90	val_90	90	val_90
90	val_90	90	val_90
90	val_90	90	val_90
92	val_92	92	val_92
95	val_95	95	val_95
95	val_95	95	val_95
95	val_95	95	val_95
95	val_95	95	val_95
96	val_96	96	val_96
97	val_97	97	val_97
97	val_97	97	val_97
97	val_97	97	val_97
97	val_97	97	val_97
98	val_98	98	val_98
98	val_98	98	val_98
98	val_98	98	val_98
98	val_98	98	val_98
100	val_100	100	val_100
100	val_100	100	val_100
100	val_100	100	val_100
100	val_100	100	val_100
103	val_103	103	val_103
103	val_103	103	val_103
103	val_103	103	val_103
103	val_103	103	val_103
104	val_104	104	val_104
104	val_104	104	val_104
104	val_104	104	val_104
104	val_104	104	val_104
105	val_105	105	val_105
111	val_111	111	val_111
113	val_113	113	val_113
113	val_113	113	val_113
113	val_113	113	val_113
113	val_113	113	val_113
114	val_114	114	val_114
116	val_116	116	val_116
118	val_118	118	val_118
118	val_118	118	val_118
118	val_118	118	val_118
118	val_118	118	val_118
119	val_119	119	val_119
119	val_119	119	val_119
119	val_119	119	val_119
119	val_119	119	val_119
119	val_119	119	val_119
119	val_119	119	val_119
119	val_119	119	val_119
119	val_119	119	val_119
119	val_119	119	val_119
120	val_120	120	val_120
120	val_120	120	val_120
120	val_120	120	val_120
120	val_120	120	val_120
125	val_125	125	val_125
125	val_125	125	val_125
125	val_125	125	val_125
125	val_125	125	val_125
126	val_126	126	val_126
128	val_128	128	val_128
128	val_128	128	val_128
128	val_128	128	val_128
128	val_128	128	val_128
128	val_128	128	val_128
128	val_128	128	val_128
128	val_128	128	val_128
128	val_128	128	val_128
128	val_128	128	val_128
129	val_129	129	val_129
129	val_129	129	val_129
129	val_129	129	val_129
129	val_129	129	val_129
131	val_131	131	val_131
133	val_133	133	val_133
134	val_134	134	val_134
134	val_134	134	val_134
134	val_134	134	val_134
134	val_134	134	val_134
136	val_136	136	val_136
137	val_137	137	val_137
137	val_137	137	val_137
137	val_137	137	val_137
137	val_137	137	val_137
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
138	val_138	138	val_138
143	val_143	143	val_143
145	val_145	145	val_145
146	val_146	146	val_146
146	val_146	146	val_146
146	val_146	146	val_146
146	val_146	146	val_146
149	val_149	149	val_149
149	val_149	149	val_149
149	val_149	149	val_149
149	val_149	149	val_149
150	val_150	150	val_150
152	val_152	152	val_152
152	val_152	152	val_152
152	val_152	152	val_152
152	val_152	152	val_152
153	val_153	153	val_153
155	val_155	155	val_155
156	val_156	156	val_156
157	val_157	157	val_157
158	val_158	158	val_158
160	val_160	160	val_160
162	val_162	162	val_162
163	val_163	163	val_163
164	val_164	164	val_164
164	val_164	164	val_164
164	val_164	164	val_164
164	val_164	164	val_164
165	val_165	165	val_165
165	val_165	165	val_165
165	val_165	165	val_165
165	val_165	165	val_165
166	val_166	166	val_166
167	val_167	167	val_167
167	val_167	167	val_167
167	val_167	167	val_167
167	val_167	167	val_167
167	val_167	167	val_167
167	val_167	167	val_167
167	val_167	167	val_167
167	val_167	167	val_167
167	val_167	167	val_167
168	val_168	168	val_168
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
169	val_169	169	val_169
170	val_170	170	val_170
172	val_172	172	val_172
172	val_172	172	val_172
172	val_172	172	val_172
172	val_172	172	val_172
174	val_174	174	val_174
174	val_174	174	val_174
174	val_174	174	val_174
174	val_174	174	val_174
175	val_175	175	val_175
175	val_175	175	val_175
175	val_175	175	val_175
175	val_175	175	val_175
176	val_176	176	val_176
176	val_176	176	val_176
176	val_176	176	val_176
176	val_176	176	val_176
177	val_177	177	val_177
178	val_178	178	val_178
179	val_179	179	val_179
179	val_179	179	val_179
179	val_179	179	val_179
179	val_179	179	val_179
180	val_180	180	val_180
181	val_181	181	val_181
183	val_183	183	val_183
186	val_186	186	val_186
187	val_187	187	val_187
187	val_187	187	val_187
187	val_187	187	val_187
187	val_187	187	val_187
187	val_187	187	val_187
187	val_187	187	val_187
187	val_187	187	val_187
187	val_187	187	val_187
187	val_187	187	val_187
189	val_189	189	val_189
190	val_190	190	val_190
191	val_191	191	val_191
191	val_191	191	val_191
191	val_191	191	val_191
191	val_191	191	val_191
192	val_192	192	val_192
193	val_193	193	val_193
193	val_193	193	val_193
193	val_193	193	val_193
193	val_193	193	val_193
193	val_193	193	val_193
193	val_193	193	val_193
193	val_193	193	val_193
193	val_193	193	val_193
193	val_193	193	val_193
194	val_194	194	val_194
195	val_195	195	val_195
195	val_195	195	val_195
195	val_195	195	val_195
195	val_195	195	val_195
196	val_196	196	val_196
197	val_197	197	val_197
197	val_197	197	val_197
197	val_197	197	val_197
197	val_197	197	val_197
199	val_199	199	val_199
199	val_199	199	val_199
199	val_199	199	val_199
199	val_199	199	val_199
199	val_199	199	val_199
199	val_199	199	val_199
199	val_199	199	val_199
199	val_199	199	val_199
199	val_199	199	val_199
200	val_200	200	val_200
200	val_200	200	val_200
200	val_200	200	val_200
200	val_200	200	val_200
201	val_201	201	val_201
202	val_202	202	val_202
203	val_203	203	val_203
203	val_203	203	val_203
203	val_203	203	val_203
203	val_203	203	val_203
205	val_205	205	val_205
205	val_205	205	val_205
205	val_205	205	val_205
205	val_205	205	val_205
207	val_207	207	val_207
207	val_207	207	val_207
207	val_207	207	val_207
207	val_207	207	val_207
208	val_208	208	val_208
208	val_208	208	val_208
208	val_208	208	val_208
208	val_208	208	val_208
208	val_208	208	val_208
208	val_208	208	val_208
208	val_208	208	val_208
208	val_208	208	val_208
208	val_208	208	val_208
209	val_209	209	val_209
209	val_209	209	val_209
209	val_209	209	val_209
209	val_209	209	val_209
213	val_213	213	val_213
213	val_213	213	val_213
213	val_213	213	val_213
213	val_213	213	val_213
214	val_214	214	val_214
216	val_216	216	val_216
216	val_216	216	val_216
216	val_216	216	val_216
216	val_216	216	val_216
217	val_217	217	val_217
217	val_217	217	val_217
217	val_217	217	val_217
217	val_217	217	val_217
218	val_218	218	val_218
219	val_219	219	val_219
219	val_219	219	val_219
219	val_219	219	val_219
219	val_219	219	val_219
221	val_221	221	val_221
221	val_221	221	val_221
221	val_221	221	val_221
221	val_221	221	val_221
222	val_222	222	val_222
223	val_223	223	val_223
223	val_223	223	val_223
223	val_223	223	val_223
223	val_223	223	val_223
224	val_224	224	val_224
224	val_224	224	val_224
224	val_224	224	val_224
224	val_224	224	val_224
226	val_226	226	val_226
228	val_228	228	val_228
229	val_229	229	val_229
229	val_229	229	val_229
229	val_229	229	val_229
229	val_229	229	val_229
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
230	val_230	230	val_230
233	val_233	233	val_233
233	val_233	233	val_233
233	val_233	233	val_233
233	val_233	233	val_233
235	val_235	235	val_235
237	val_237	237	val_237
237	val_237	237	val_237
237	val_237	237	val_237
237	val_237	237	val_237
238	val_238	238	val_238
238	val_238	238	val_238
238	val_238	238	val_238
238	val_238	238	val_238
239	val_239	239	val_239
239	val_239	239	val_239
239	val_239	239	val_239
239	val_239	239	val_239
241	val_241	241	val_241
242	val_242	242	val_242
242	val_242	242	val_242
242	val_242	242	val_242
242	val_242	242	val_242
244	val_244	244	val_244
247	val_247	247	val_247
248	val_248	248	val_248
249	val_249	249	val_249
252	val_252	252	val_252
255	val_255	255	val_255
255	val_255	255	val_255
255	val_255	255	val_255
255	val_255	255	val_255
256	val_256	256	val_256
256	val_256	256	val_256
256	val_256	256	val_256
256	val_256	256	val_256
257	val_257	257	val_257
258	val_258	258	val_258
260	val_260	260	val_260
262	val_262	262	val_262
263	val_263	263	val_263
265	val_265	265	val_265
265	val_265	265	val_265
265	val_265	265	val_265
265	val_265	265	val_265
266	val_266	266	val_266
272	val_272	272	val_272
272	val_272	272	val_272
272	val_272	272	val_272
272	val_272	272	val_272
273	val_273	273	val_273
273	val_273	273	val_273
273	val_273	273	val_273
273	val_273	273	val_273
273	val_273	273	val_273
273	val_273	273	val_273
273	val_273	273	val_273
273	val_273	273	val_273
273	val_273	273	val_273
274	val_274	274	val_274
275	val_275	275	val_275
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
277	val_277	277	val_277
278	val_278	278	val_278
278	val_278	278	val_278
278	val_278	278	val_278
278	val_278	278	val_278
280	val_280	280	val_280
280	val_280	280	val_280
280	val_280	280	val_280
280	val_280	280	val_280
281	val_281	281	val_281
281	val_281	281	val_281
281	val_281	281	val_281
281	val_281	281	val_281
282	val_282	282	val_282
282	val_282	282	val_282
282	val_282	282	val_282
282	val_282	282	val_282
283	val_283	283	val_283
284	val_284	284	val_284
285	val_285	285	val_285
286	val_286	286	val_286
287	val_287	287	val_287
288	val_288	288	val_288
288	val_288	288	val_288
288	val_288	288	val_288
288	val_288	288	val_288
289	val_289	289	val_289
291	val_291	291	val_291
292	val_292	292	val_292
296	val_296	296	val_296
298	val_298	298	val_298
298	val_298	298	val_298
298	val_298	298	val_298
298	val_298	298	val_298
298	val_298	298	val_298
298	val_298	298	val_298
298	val_298	298	val_298
298	val_298	298	val_298
298	val_298	298	val_298
302	val_302	302	val_302
305	val_305	305	val_305
306	val_306	306	val_306
307	val_307	307	val_307
307	val_307	307	val_307
307	val_307	307	val_307
307	val_307	307	val_307
308	val_308	308	val_308
309	val_309	309	val_309
309	val_309	309	val_309
309	val_309	309	val_309
309	val_309	309	val_309
310	val_310	310	val_310
311	val_311	311	val_311
311	val_311	311	val_311
311	val_311	311	val_311
311	val_311	311	val_311
311	val_311	311	val_311
311	val_311	311	val_311
311	val_311	311	val_311
311	val_311	311	val_311
311	val_311	311	val_311
315	val_315	315	val_315
316	val_316	316	val_316
316	val_316	316	val_316
316	val_316	316	val_316
316	val_316	316	val_316
316	val_316	316	val_316
316	val_316	316	val_316
316	val_316	316	val_316
316	val_316	316	val_316
316	val_316	316	val_316
317	val_317	317	val_317
317	val_317	317	val_317
317	val_317	317	val_317
317	val_317	317	val_317
318	val_318	318	val_318
318	val_318	318	val_318
318	val_318	318	val_318
318	val_318	318	val_318
318	val_318	318	val_318
318	val_318	318	val_318
318	val_318	318	val_318
318	val_318	318	val_318
318	val_318	318	val_318
321	val_321	321	val_321
321	val_321	321	val_321
321	val_321	321	val_321
321	val_321	321	val_321
322	val_322	322	val_322
322	val_322	322	val_322
322	val_322	322	val_322
322	val_322	322	val_322
323	val_323	323	val_323
325	val_325	325	val_325
325	val_325	325	val_325
325	val_325	325	val_325
325	val_325	325	val_325
327	val_327	327	val_327
327	val_327	327	val_327
327	val_327	327	val_327
327	val_327	327	val_327
327	val_327	327	val_327
327	val_327	327	val_327
327	val_327	327	val_327
327	val_327	327	val_327
327	val_327	327	val_327
331	val_331	331	val_331
331	val_331	331	val_331
331	val_331	331	val_331
331	val_331	331	val_331
332	val_332	332	val_332
333	val_333	333	val_333
333	val_333	333	val_333
333	val_333	333	val_333
333	val_333	333	val_333
335	val_335	335	val_335
336	val_336	336	val_336
338	val_338	338	val_338
339	val_339	339	val_339
341	val_341	341	val_341
342	val_342	342	val_342
342	val_342	342	val_342
342	val_342	342	val_342
342	val_342	342	val_342
344	val_344	344	val_344
344	val_344	344	val_344
344	val_344	344	val_344
344	val_344	344	val_344
345	val_345	345	val_345
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
348	val_348	348	val_348
351	val_351	351	val_351
353	val_353	353	val_353
353	val_353	353	val_353
353	val_353	353	val_353
353	val_353	353	val_353
356	val_356	356	val_356
360	val_360	360	val_360
362	val_362	362	val_362
364	val_364	364	val_364
365	val_365	365	val_365
366	val_366	366	val_366
367	val_367	367	val_367
367	val_367	367	val_367
367	val_367	367	val_367
367	val_367	367	val_367
368	val_368	368	val_368
369	val_369	369	val_369
369	val_369	369	val_369
369	val_369	369	val_369
369	val_369	369	val_369
369	val_369	369	val_369
369	val_369	369	val_369
369	val_369	369	val_369
369	val_369	369	val_369
369	val_369	369	val_369
373	val_373	373	val_373
374	val_374	374	val_374
375	val_375	375	val_375
377	val_377	377	val_377
378	val_378	378	val_378
379	val_379	379	val_379
382	val_382	382	val_382
382	val_382	382	val_382
382	val_382	382	val_382
382	val_382	382	val_382
384	val_384	384	val_384
384	val_384	384	val_384
384	val_384	384	val_384
384	val_384	384	val_384
384	val_384	384	val_384
384	val_384	384	val_384
384	val_384	384	val_384
384	val_384	384	val_384
384	val_384	384	val_384
386	val_386	386	val_386
389	val_389	389	val_389
392	val_392	392	val_392
393	val_393	393	val_393
394	val_394	394	val_394
395	val_395	395	val_395
395	val_395	395	val_395
395	val_395	395	val_395
395	val_395	395	val_395
396	val_396	396	val_396
396	val_396	396	val_396
396	val_396	396	val_396
396	val_396	396	val_396
396	val_396	396	val_396
396	val_396	396	val_396
396	val_396	396	val_396
396	val_396	396	val_396
396	val_396	396	val_396
397	val_397	397	val_397
397	val_397	397	val_397
397	val_397	397	val_397
397	val_397	397	val_397
399	val_399	399	val_399
399	val_399	399	val_399
399	val_399	399	val_399
399	val_399	399	val_399
400	val_400	400	val_400
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
401	val_401	401	val_401
402	val_402	402	val_402
403	val_403	403	val_403
403	val_403	403	val_403
403	val_403	403	val_403
403	val_403	403	val_403
403	val_403	403	val_403
403	val_403	403	val_403
403	val_403	403	val_403
403	val_403	403	val_403
403	val_403	403	val_403
404	val_404	404	val_404
404	val_404	404	val_404
404	val_404	404	val_404
404	val_404	404	val_404
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
406	val_406	406	val_406
407	val_407	407	val_407
409	val_409	409	val_409
409	val_409	409	val_409
409	val_409	409	val_409
409	val_409	409	val_409
409	val_409	409	val_409
409	val_409	409	val_409
409	val_409	409	val_409
409	val_409	409	val_409
409	val_409	409	val_409
411	val_411	411	val_411
413	val_413	413	val_413
413	val_413	413	val_413
413	val_413	413	val_413
413	val_413	413	val_413
414	val_414	414	val_414
414	val_414	414	val_414
414	val_414	414	val_414
414	val_414	414	val_414
417	val_417	417	val_417
417	val_417	417	val_417
417	val_417	417	val_417
417	val_417	417	val_417
417	val_417	417	val_417
417	val_417	417	val_417
417	val_417	417	val_417
417	val_417	417	val_417
417	val_417	417	val_417
418	val_418	418	val_418
419	val_419	419	val_419
421	val_421	421	val_421
424	val_424	424	val_424
424	val_424	424	val_424
424	val_424	424	val_424
424	val_424	424	val_424
427	val_427	427	val_427
429	val_429	429	val_429
429	val_429	429	val_429
429	val_429	429	val_429
429	val_429	429	val_429
430	val_430	430	val_430
430	val_430	430	val_430
430	val_430	430	val_430
430	val_430	430	val_430
430	val_430	430	val_430
430	val_430	430	val_430
430	val_430	430	val_430
430	val_430	430	val_430
430	val_430	430	val_430
431	val_431	431	val_431
431	val_431	431	val_431
431	val_431	431	val_431
431	val_431	431	val_431
431	val_431	431	val_431
431	val_431	431	val_431
431	val_431	431	val_431
431	val_431	431	val_431
431	val_431	431	val_431
432	val_432	432	val_432
435	val_435	435	val_435
436	val_436	436	val_436
437	val_437	437	val_437
438	val_438	438	val_438
438	val_438	438	val_438
438	val_438	438	val_438
438	val_438	438	val_438
438	val_438	438	val_438
438	val_438	438	val_438
438	val_438	438	val_438
438	val_438	438	val_438
438	val_438	438	val_438
439	val_439	439	val_439
439	val_439	439	val_439
439	val_439	439	val_439
439	val_439	439	val_439
443	val_443	443	val_443
444	val_444	444	val_444
446	val_446	446	val_446
448	val_448	448	val_448
449	val_449	449	val_449
452	val_452	452	val_452
453	val_453	453	val_453
454	val_454	454	val_454
454	val_454	454	val_454
454	val_454	454	val_454
454	val_454	454	val_454
454	val_454	454	val_454
454	val_454	454	val_454
454	val_454	454	val_454
454	val_454	454	val_454
454	val_454	454	val_454
455	val_455	455	val_455
457	val_457	457	val_457
458	val_458	458	val_458
458	val_458	458	val_458
458	val_458	458	val_458
458	val_458	458	val_458
459	val_459	459	val_459
459	val_459	459	val_459
459	val_459	459	val_459
459	val_459	459	val_459
460	val_460	460	val_460
462	val_462	462	val_462
462	val_462	462	val_462
462	val_462	462	val_462
462	val_462	462	val_462
463	val_463	463	val_463
463	val_463	463	val_463
463	val_463	463	val_463
463	val_463	463	val_463
466	val_466	466	val_466
466	val_466	466	val_466
466	val_466	466	val_466
466	val_466	466	val_466
466	val_466	466	val_466
466	val_466	466	val_466
466	val_466	466	val_466
466	val_466	466	val_466
466	val_466	466	val_466
467	val_467	467	val_467
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
468	val_468	468	val_468
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
469	val_469	469	val_469
470	val_470	470	val_470
472	val_472	472	val_472
475	val_475	475	val_475
477	val_477	477	val_477
478	val_478	478	val_478
478	val_478	478	val_478
478	val_478	478	val_478
478	val_478	478	val_478
479	val_479	479	val_479
480	val_480	480	val_480
480	val_480	480	val_480
480	val_480	480	val_480
480	val_480	480	val_480
480	val_480	480	val_480
480	val_480	480	val_480
480	val_480	480	val_480
480	val_480	480	val_480
480	val_480	480	val_480
481	val_481	481	val_481
482	val_482	482	val_482
483	val_483	483	val_483
484	val_484	484	val_484
485	val_485	485	val_485
487	val_487	487	val_487
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
489	val_489	489	val_489
490	val_490	490	val_490
491	val_491	491	val_491
492	val_492	492	val_492
492	val_492	492	val_492
492	val_492	492	val_492
492	val_492	492	val_492
493	val_493	493	val_493
494	val_494	494	val_494
495	val_495	495	val_495
496	val_496	496	val_496
497	val_497	497	val_497
498	val_498	498	val_498
498	val_498	498	val_498
498	val_498	498	val_498
498	val_498	498	val_498
498	val_498	498	val_498
498	val_498	498	val_498
498	val_498	498	val_498
498	val_498	498	val_498
498	val_498	498	val_498
PREHOOK: query: insert overwrite table normal_join_results select * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key
PREHOOK: type: QUERY
PREHOOK: Input: default@smb_bucket4_1
PREHOOK: Input: default@smb_bucket4_2
PREHOOK: Output: default@normal_join_results
POSTHOOK: query: insert overwrite table normal_join_results select * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@smb_bucket4_1
POSTHOOK: Input: default@smb_bucket4_2
POSTHOOK: Output: default@normal_join_results
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: select sum(hash(k1)) as k1, sum(hash(k2)) as k2, sum(hash(v1)) as v1, sum(hash(v2)) as v2 from normal_join_results
PREHOOK: type: QUERY
PREHOOK: Input: default@normal_join_results
#### A masked pattern was here ####
POSTHOOK: query: select sum(hash(k1)) as k1, sum(hash(k2)) as k2, sum(hash(v1)) as v1, sum(hash(v2)) as v2 from normal_join_results
POSTHOOK: type: QUERY
POSTHOOK: Input: default@normal_join_results
#### A masked pattern was here ####
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
278697	278697	101852390308	101852390308
PREHOOK: query: select sum(hash(k1)) as k1, sum(hash(k2)) as k2, sum(hash(v1)) as v1, sum(hash(v2)) as v2 from smb_join_results
PREHOOK: type: QUERY
PREHOOK: Input: default@smb_join_results
#### A masked pattern was here ####
POSTHOOK: query: select sum(hash(k1)) as k1, sum(hash(k2)) as k2, sum(hash(v1)) as v1, sum(hash(v2)) as v2 from smb_join_results
POSTHOOK: type: QUERY
POSTHOOK: Input: default@smb_join_results
#### A masked pattern was here ####
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
278697	278697	101852390308	101852390308
PREHOOK: query: explain
insert overwrite table smb_join_results
select /*+mapjoin(a)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key where a.key>1000
PREHOOK: type: QUERY
POSTHOOK: query: explain
insert overwrite table smb_join_results
select /*+mapjoin(a)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key where a.key>1000
POSTHOOK: type: QUERY
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_TABREF (TOK_TABNAME smb_bucket4_1) a) (TOK_TABREF (TOK_TABNAME smb_bucket4_2) b) (= (. (TOK_TABLE_OR_COL a) key) (. (TOK_TABLE_OR_COL b) key)))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME smb_join_results))) (TOK_SELECT (TOK_HINTLIST (TOK_HINT TOK_MAPJOIN (TOK_HINTARGLIST a))) (TOK_SELEXPR TOK_ALLCOLREF)) (TOK_WHERE (> (. (TOK_TABLE_OR_COL a) key) 1000))))

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-7 depends on stages: Stage-1 , consists of Stage-4, Stage-3, Stage-5
  Stage-4
  Stage-0 depends on stages: Stage-4, Stage-3, Stage-6
  Stage-2 depends on stages: Stage-0
  Stage-3
  Stage-5
  Stage-6 depends on stages: Stage-5

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Alias -> Map Operator Tree:
        b 
          TableScan
            alias: b
            Filter Operator
              predicate:
                  expr: (key > 1000)
                  type: boolean
              Sorted Merge Bucket Map Join Operator
                condition map:
                     Inner Join 0 to 1
                condition expressions:
                  0 {key} {value}
                  1 {key} {value}
                handleSkewJoin: false
                keys:
                  0 [Column[key]]
                  1 [Column[key]]
                outputColumnNames: _col0, _col1, _col4, _col5
                Position of Big Table: 1
                Select Operator
                  expressions:
                        expr: _col0
                        type: int
                        expr: _col1
                        type: string
                        expr: _col4
                        type: int
                        expr: _col5
                        type: string
                  outputColumnNames: _col0, _col1, _col2, _col3
                  File Output Operator
                    compressed: false
                    GlobalTableId: 1
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        name: default.smb_join_results

  Stage: Stage-7
    Conditional Operator

  Stage: Stage-4
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.smb_join_results

  Stage: Stage-2
    Stats-Aggr Operator

  Stage: Stage-3
    Map Reduce
      Alias -> Map Operator Tree:
#### A masked pattern was here ####
            File Output Operator
              compressed: false
              GlobalTableId: 0
              table:
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                  name: default.smb_join_results

  Stage: Stage-5
    Map Reduce
      Alias -> Map Operator Tree:
#### A masked pattern was here ####
            File Output Operator
              compressed: false
              GlobalTableId: 0
              table:
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                  name: default.smb_join_results

  Stage: Stage-6
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####


PREHOOK: query: insert overwrite table smb_join_results
select /*+mapjoin(a)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key where a.key>1000
PREHOOK: type: QUERY
PREHOOK: Input: default@smb_bucket4_1
PREHOOK: Input: default@smb_bucket4_2
PREHOOK: Output: default@smb_join_results
POSTHOOK: query: insert overwrite table smb_join_results
select /*+mapjoin(a)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key where a.key>1000
POSTHOOK: type: QUERY
POSTHOOK: Input: default@smb_bucket4_1
POSTHOOK: Input: default@smb_bucket4_2
POSTHOOK: Output: default@smb_join_results
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: explain
insert overwrite table smb_join_results
select /*+mapjoin(b)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key where a.key>1000
PREHOOK: type: QUERY
POSTHOOK: query: explain
insert overwrite table smb_join_results
select /*+mapjoin(b)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key where a.key>1000
POSTHOOK: type: QUERY
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_TABREF (TOK_TABNAME smb_bucket4_1) a) (TOK_TABREF (TOK_TABNAME smb_bucket4_2) b) (= (. (TOK_TABLE_OR_COL a) key) (. (TOK_TABLE_OR_COL b) key)))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME smb_join_results))) (TOK_SELECT (TOK_HINTLIST (TOK_HINT TOK_MAPJOIN (TOK_HINTARGLIST b))) (TOK_SELEXPR TOK_ALLCOLREF)) (TOK_WHERE (> (. (TOK_TABLE_OR_COL a) key) 1000))))

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-7 depends on stages: Stage-1 , consists of Stage-4, Stage-3, Stage-5
  Stage-4
  Stage-0 depends on stages: Stage-4, Stage-3, Stage-6
  Stage-2 depends on stages: Stage-0
  Stage-3
  Stage-5
  Stage-6 depends on stages: Stage-5

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Alias -> Map Operator Tree:
        a 
          TableScan
            alias: a
            Filter Operator
              predicate:
                  expr: (key > 1000)
                  type: boolean
              Sorted Merge Bucket Map Join Operator
                condition map:
                     Inner Join 0 to 1
                condition expressions:
                  0 {key} {value}
                  1 {key} {value}
                handleSkewJoin: false
                keys:
                  0 [Column[key]]
                  1 [Column[key]]
                outputColumnNames: _col0, _col1, _col4, _col5
                Position of Big Table: 0
                Select Operator
                  expressions:
                        expr: _col0
                        type: int
                        expr: _col1
                        type: string
                        expr: _col4
                        type: int
                        expr: _col5
                        type: string
                  outputColumnNames: _col0, _col1, _col2, _col3
                  File Output Operator
                    compressed: false
                    GlobalTableId: 1
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        name: default.smb_join_results

  Stage: Stage-7
    Conditional Operator

  Stage: Stage-4
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.smb_join_results

  Stage: Stage-2
    Stats-Aggr Operator

  Stage: Stage-3
    Map Reduce
      Alias -> Map Operator Tree:
#### A masked pattern was here ####
            File Output Operator
              compressed: false
              GlobalTableId: 0
              table:
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                  name: default.smb_join_results

  Stage: Stage-5
    Map Reduce
      Alias -> Map Operator Tree:
#### A masked pattern was here ####
            File Output Operator
              compressed: false
              GlobalTableId: 0
              table:
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                  name: default.smb_join_results

  Stage: Stage-6
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####


PREHOOK: query: insert overwrite table smb_join_results
select /*+mapjoin(b)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key where a.key>1000
PREHOOK: type: QUERY
PREHOOK: Input: default@smb_bucket4_1
PREHOOK: Input: default@smb_bucket4_2
PREHOOK: Output: default@smb_join_results
POSTHOOK: query: insert overwrite table smb_join_results
select /*+mapjoin(b)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key where a.key>1000
POSTHOOK: type: QUERY
POSTHOOK: Input: default@smb_bucket4_1
POSTHOOK: Input: default@smb_bucket4_2
POSTHOOK: Output: default@smb_join_results
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: explain
select /*+mapjoin(b,c)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key join smb_bucket4_2 c on b.key = c.key where a.key>1000
PREHOOK: type: QUERY
POSTHOOK: query: explain
select /*+mapjoin(b,c)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key join smb_bucket4_2 c on b.key = c.key where a.key>1000
POSTHOOK: type: QUERY
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_JOIN (TOK_TABREF (TOK_TABNAME smb_bucket4_1) a) (TOK_TABREF (TOK_TABNAME smb_bucket4_2) b) (= (. (TOK_TABLE_OR_COL a) key) (. (TOK_TABLE_OR_COL b) key))) (TOK_TABREF (TOK_TABNAME smb_bucket4_2) c) (= (. (TOK_TABLE_OR_COL b) key) (. (TOK_TABLE_OR_COL c) key)))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_HINTLIST (TOK_HINT TOK_MAPJOIN (TOK_HINTARGLIST b c))) (TOK_SELEXPR TOK_ALLCOLREF)) (TOK_WHERE (> (. (TOK_TABLE_OR_COL a) key) 1000))))

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Alias -> Map Operator Tree:
        a 
          TableScan
            alias: a
            Filter Operator
              predicate:
                  expr: (key > 1000)
                  type: boolean
              Sorted Merge Bucket Map Join Operator
                condition map:
                     Inner Join 0 to 1
                     Inner Join 1 to 2
                condition expressions:
                  0 {key} {value}
                  1 {key} {value}
                  2 {key} {value}
                handleSkewJoin: false
                keys:
                  0 [Column[key]]
                  1 [Column[key]]
                  2 [Column[key]]
                outputColumnNames: _col0, _col1, _col4, _col5, _col8, _col9
                Position of Big Table: 0
                Select Operator
                  expressions:
                        expr: _col0
                        type: int
                        expr: _col1
                        type: string
                        expr: _col4
                        type: int
                        expr: _col5
                        type: string
                        expr: _col8
                        type: int
                        expr: _col9
                        type: string
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  File Output Operator
                    compressed: false
                    GlobalTableId: 0
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat

  Stage: Stage-0
    Fetch Operator
      limit: -1


PREHOOK: query: select /*+mapjoin(b,c)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key join smb_bucket4_2 c on b.key = c.key where a.key>1000
PREHOOK: type: QUERY
PREHOOK: Input: default@smb_bucket4_1
PREHOOK: Input: default@smb_bucket4_2
#### A masked pattern was here ####
POSTHOOK: query: select /*+mapjoin(b,c)*/ * from smb_bucket4_1 a join smb_bucket4_2 b on a.key = b.key join smb_bucket4_2 c on b.key = c.key where a.key>1000
POSTHOOK: type: QUERY
POSTHOOK: Input: default@smb_bucket4_1
POSTHOOK: Input: default@smb_bucket4_2
#### A masked pattern was here ####
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: normal_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_bucket4_1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: smb_bucket4_2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.k2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v1 SIMPLE [(smb_bucket4_1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: smb_join_results.v2 SIMPLE [(smb_bucket4_2)b.FieldSchema(name:value, type:string, comment:null), ]
