PREHOOK: query: CREATE TABLE DEST1(key STRING, value STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@DEST1
POSTHOOK: query: CREATE TABLE DEST1(key STRING, value STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@DEST1
PREHOOK: query: CREATE TABLE DEST2(key STRING, val1 STRING, val2 STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@DEST2
POSTHOOK: query: CREATE TABLE DEST2(key STRING, val1 STRING, val2 STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@DEST2
PREHOOK: query: explain 
FROM (select 'tst1' as key, cast(count(1) as string) as value from src s1
                         UNION  ALL  
      select s2.key as key, s2.value as value from src s2) unionsrc
INSERT OVERWRITE TABLE DEST1 SELECT unionsrc.key, count(unionsrc.value) group by unionsrc.key
INSERT OVERWRITE TABLE DEST2 SELECT unionsrc.key, unionsrc.value, unionsrc.value
PREHOOK: type: QUERY
POSTHOOK: query: explain 
FROM (select 'tst1' as key, cast(count(1) as string) as value from src s1
                         UNION  ALL  
      select s2.key as key, s2.value as value from src s2) unionsrc
INSERT OVERWRITE TABLE DEST1 SELECT unionsrc.key, count(unionsrc.value) group by unionsrc.key
INSERT OVERWRITE TABLE DEST2 SELECT unionsrc.key, unionsrc.value, unionsrc.value
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-2 is a root stage
  Stage-3 depends on stages: Stage-2
  Stage-0 depends on stages: Stage-3
  Stage-4 depends on stages: Stage-0, Stage-5, Stage-7
  Stage-5 depends on stages: Stage-3
  Stage-6 depends on stages: Stage-1, Stage-5, Stage-7
  Stage-1 depends on stages: Stage-3
  Stage-7 depends on stages: Stage-3

STAGE PLANS:
  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: s1
            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: COMPLETE
            Select Operator
              Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: COMPLETE
              Group By Operator
                aggregations: count()
                mode: hash
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  sort order: 
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col0 (type: bigint)
      Execution mode: vectorized
      Reduce Operator Tree:
        Group By Operator
          aggregations: count(VALUE._col0)
          mode: mergepartial
          outputColumnNames: _col0
          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
          Select Operator
            expressions: 'tst1' (type: string), UDFToString(_col0) (type: string)
            outputColumnNames: _col0, _col1
            Statistics: Num rows: 1 Data size: 272 Basic stats: COMPLETE Column stats: COMPLETE
            File Output Operator
              compressed: false
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-3
    Map Reduce
      Map Operator Tree:
          TableScan
            Union
              Statistics: Num rows: 501 Data size: 5584 Basic stats: COMPLETE Column stats: PARTIAL
              Group By Operator
                aggregations: count(_col1)
                keys: _col0 (type: string)
                mode: hash
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: PARTIAL
                Reduce Output Operator
                  key expressions: _col0 (type: string)
                  sort order: +
                  Map-reduce partition columns: _col0 (type: string)
                  Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: PARTIAL
                  value expressions: _col1 (type: bigint)
              Select Operator
                expressions: _col0 (type: string), _col1 (type: string), _col1 (type: string)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 501 Data size: 228456 Basic stats: COMPLETE Column stats: PARTIAL
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 501 Data size: 228456 Basic stats: COMPLETE Column stats: PARTIAL
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.dest2
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string)
                  outputColumnNames: key, val1, val2
                  Statistics: Num rows: 501 Data size: 228456 Basic stats: COMPLETE Column stats: PARTIAL
                  Group By Operator
                    aggregations: compute_stats(key, 'hll'), compute_stats(val1, 'hll'), compute_stats(val2, 'hll')
                    mode: hash
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 1320 Basic stats: COMPLETE Column stats: PARTIAL
                    File Output Operator
                      compressed: false
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe
          TableScan
            alias: s2
            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: string), value (type: string)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
              Union
                Statistics: Num rows: 501 Data size: 5584 Basic stats: COMPLETE Column stats: PARTIAL
                Group By Operator
                  aggregations: count(_col1)
                  keys: _col0 (type: string)
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: PARTIAL
                  Reduce Output Operator
                    key expressions: _col0 (type: string)
                    sort order: +
                    Map-reduce partition columns: _col0 (type: string)
                    Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: PARTIAL
                    value expressions: _col1 (type: bigint)
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), _col1 (type: string)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 501 Data size: 228456 Basic stats: COMPLETE Column stats: PARTIAL
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 501 Data size: 228456 Basic stats: COMPLETE Column stats: PARTIAL
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        name: default.dest2
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string)
                    outputColumnNames: key, val1, val2
                    Statistics: Num rows: 501 Data size: 228456 Basic stats: COMPLETE Column stats: PARTIAL
                    Group By Operator
                      aggregations: compute_stats(key, 'hll'), compute_stats(val1, 'hll'), compute_stats(val2, 'hll')
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 1 Data size: 1320 Basic stats: COMPLETE Column stats: PARTIAL
                      File Output Operator
                        compressed: false
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe
      Reduce Operator Tree:
        Group By Operator
          aggregations: count(VALUE._col0)
          keys: KEY._col0 (type: string)
          mode: mergepartial
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: PARTIAL
          Select Operator
            expressions: _col0 (type: string), UDFToString(_col1) (type: string)
            outputColumnNames: _col0, _col1
            Statistics: Num rows: 1 Data size: 272 Basic stats: COMPLETE Column stats: PARTIAL
            File Output Operator
              compressed: false
              Statistics: Num rows: 1 Data size: 272 Basic stats: COMPLETE Column stats: PARTIAL
              table:
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                  name: default.dest1
            Select Operator
              expressions: _col0 (type: string), _col1 (type: string)
              outputColumnNames: key, value
              Statistics: Num rows: 1 Data size: 272 Basic stats: COMPLETE Column stats: PARTIAL
              Group By Operator
                aggregations: compute_stats(key, 'hll'), compute_stats(value, 'hll')
                mode: hash
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 880 Basic stats: COMPLETE Column stats: PARTIAL
                File Output Operator
                  compressed: false
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.dest1

  Stage: Stage-4
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key, value
          Column Types: string, string
          Table: default.dest1

  Stage: Stage-5
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              sort order: 
              Statistics: Num rows: 1 Data size: 880 Basic stats: COMPLETE Column stats: PARTIAL
              value expressions: _col0 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>), _col1 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>)
      Execution mode: vectorized
      Reduce Operator Tree:
        Group By Operator
          aggregations: compute_stats(VALUE._col0), compute_stats(VALUE._col1)
          mode: mergepartial
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 1 Data size: 880 Basic stats: COMPLETE Column stats: PARTIAL
          File Output Operator
            compressed: false
            Statistics: Num rows: 1 Data size: 880 Basic stats: COMPLETE Column stats: PARTIAL
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-6
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key, val1, val2
          Column Types: string, string, string
          Table: default.dest2

  Stage: Stage-1
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.dest2

  Stage: Stage-7
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              sort order: 
              Statistics: Num rows: 1 Data size: 1320 Basic stats: COMPLETE Column stats: PARTIAL
              value expressions: _col0 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>), _col1 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>), _col2 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>)
      Execution mode: vectorized
      Reduce Operator Tree:
        Group By Operator
          aggregations: compute_stats(VALUE._col0), compute_stats(VALUE._col1), compute_stats(VALUE._col2)
          mode: mergepartial
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 1 Data size: 1320 Basic stats: COMPLETE Column stats: PARTIAL
          File Output Operator
            compressed: false
            Statistics: Num rows: 1 Data size: 1320 Basic stats: COMPLETE Column stats: PARTIAL
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

PREHOOK: query: FROM (select 'tst1' as key, cast(count(1) as string) as value from src s1
                         UNION  ALL  
      select s2.key as key, s2.value as value from src s2) unionsrc
INSERT OVERWRITE TABLE DEST1 SELECT unionsrc.key, count(unionsrc.value) group by unionsrc.key
INSERT OVERWRITE TABLE DEST2 SELECT unionsrc.key, unionsrc.value, unionsrc.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1
PREHOOK: Output: default@dest2
POSTHOOK: query: FROM (select 'tst1' as key, cast(count(1) as string) as value from src s1
                         UNION  ALL  
      select s2.key as key, s2.value as value from src s2) unionsrc
INSERT OVERWRITE TABLE DEST1 SELECT unionsrc.key, count(unionsrc.value) group by unionsrc.key
INSERT OVERWRITE TABLE DEST2 SELECT unionsrc.key, unionsrc.value, unionsrc.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1
POSTHOOK: Output: default@dest2
POSTHOOK: Lineage: dest1.key EXPRESSION [(src)s2.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest1.value EXPRESSION [(src)s1.null, (src)s2.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: dest2.key EXPRESSION [(src)s2.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest2.val1 EXPRESSION [(src)s1.null, (src)s2.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: dest2.val2 EXPRESSION [(src)s1.null, (src)s2.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: SELECT DEST1.* FROM DEST1 SORT BY DEST1.key, DEST1.value
PREHOOK: type: QUERY
PREHOOK: Input: default@dest1
#### A masked pattern was here ####
POSTHOOK: query: SELECT DEST1.* FROM DEST1 SORT BY DEST1.key, DEST1.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest1
#### A masked pattern was here ####
0	3
10	1
100	2
103	2
104	2
105	1
11	1
111	1
113	2
114	1
116	1
118	2
119	3
12	2
120	2
125	2
126	1
128	3
129	2
131	1
133	1
134	2
136	1
137	2
138	4
143	1
145	1
146	2
149	2
15	2
150	1
152	2
153	1
155	1
156	1
157	1
158	1
160	1
162	1
163	1
164	2
165	2
166	1
167	3
168	1
169	4
17	1
170	1
172	2
174	2
175	2
176	2
177	1
178	1
179	2
18	2
180	1
181	1
183	1
186	1
187	3
189	1
19	1
190	1
191	2
192	1
193	3
194	1
195	2
196	1
197	2
199	3
2	1
20	1
200	2
201	1
202	1
203	2
205	2
207	2
208	3
209	2
213	2
214	1
216	2
217	2
218	1
219	2
221	2
222	1
223	2
224	2
226	1
228	1
229	2
230	5
233	2
235	1
237	2
238	2
239	2
24	2
241	1
242	2
244	1
247	1
248	1
249	1
252	1
255	2
256	2
257	1
258	1
26	2
260	1
262	1
263	1
265	2
266	1
27	1
272	2
273	3
274	1
275	1
277	4
278	2
28	1
280	2
281	2
282	2
283	1
284	1
285	1
286	1
287	1
288	2
289	1
291	1
292	1
296	1
298	3
30	1
302	1
305	1
306	1
307	2
308	1
309	2
310	1
311	3
315	1
316	3
317	2
318	3
321	2
322	2
323	1
325	2
327	3
33	1
331	2
332	1
333	2
335	1
336	1
338	1
339	1
34	1
341	1
342	2
344	2
345	1
348	5
35	3
351	1
353	2
356	1
360	1
362	1
364	1
365	1
366	1
367	2
368	1
369	3
37	2
373	1
374	1
375	1
377	1
378	1
379	1
382	2
384	3
386	1
389	1
392	1
393	1
394	1
395	2
396	3
397	2
399	2
4	1
400	1
401	5
402	1
403	3
404	2
406	4
407	1
409	3
41	1
411	1
413	2
414	2
417	3
418	1
419	1
42	2
421	1
424	2
427	1
429	2
43	1
430	3
431	3
432	1
435	1
436	1
437	1
438	3
439	2
44	1
443	1
444	1
446	1
448	1
449	1
452	1
453	1
454	3
455	1
457	1
458	2
459	2
460	1
462	2
463	2
466	3
467	1
468	4
469	5
47	1
470	1
472	1
475	1
477	1
478	2
479	1
480	3
481	1
482	1
483	1
484	1
485	1
487	1
489	4
490	1
491	1
492	2
493	1
494	1
495	1
496	1
497	1
498	3
5	3
51	2
53	1
54	1
57	1
58	2
64	1
65	1
66	1
67	2
69	1
70	3
72	2
74	1
76	2
77	1
78	1
8	1
80	1
82	1
83	2
84	2
85	1
86	1
87	1
9	1
90	3
92	1
95	2
96	1
97	2
98	2
tst1	1
PREHOOK: query: SELECT DEST2.* FROM DEST2 SORT BY DEST2.key, DEST2.val1, DEST2.val2
PREHOOK: type: QUERY
PREHOOK: Input: default@dest2
#### A masked pattern was here ####
POSTHOOK: query: SELECT DEST2.* FROM DEST2 SORT BY DEST2.key, DEST2.val1, DEST2.val2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest2
#### A masked pattern was here ####
0	val_0	val_0
0	val_0	val_0
0	val_0	val_0
10	val_10	val_10
100	val_100	val_100
100	val_100	val_100
103	val_103	val_103
103	val_103	val_103
104	val_104	val_104
104	val_104	val_104
105	val_105	val_105
11	val_11	val_11
111	val_111	val_111
113	val_113	val_113
113	val_113	val_113
114	val_114	val_114
116	val_116	val_116
118	val_118	val_118
118	val_118	val_118
119	val_119	val_119
119	val_119	val_119
119	val_119	val_119
12	val_12	val_12
12	val_12	val_12
120	val_120	val_120
120	val_120	val_120
125	val_125	val_125
125	val_125	val_125
126	val_126	val_126
128	val_128	val_128
128	val_128	val_128
128	val_128	val_128
129	val_129	val_129
129	val_129	val_129
131	val_131	val_131
133	val_133	val_133
134	val_134	val_134
134	val_134	val_134
136	val_136	val_136
137	val_137	val_137
137	val_137	val_137
138	val_138	val_138
138	val_138	val_138
138	val_138	val_138
138	val_138	val_138
143	val_143	val_143
145	val_145	val_145
146	val_146	val_146
146	val_146	val_146
149	val_149	val_149
149	val_149	val_149
15	val_15	val_15
15	val_15	val_15
150	val_150	val_150
152	val_152	val_152
152	val_152	val_152
153	val_153	val_153
155	val_155	val_155
156	val_156	val_156
157	val_157	val_157
158	val_158	val_158
160	val_160	val_160
162	val_162	val_162
163	val_163	val_163
164	val_164	val_164
164	val_164	val_164
165	val_165	val_165
165	val_165	val_165
166	val_166	val_166
167	val_167	val_167
167	val_167	val_167
167	val_167	val_167
168	val_168	val_168
169	val_169	val_169
169	val_169	val_169
169	val_169	val_169
169	val_169	val_169
17	val_17	val_17
170	val_170	val_170
172	val_172	val_172
172	val_172	val_172
174	val_174	val_174
174	val_174	val_174
175	val_175	val_175
175	val_175	val_175
176	val_176	val_176
176	val_176	val_176
177	val_177	val_177
178	val_178	val_178
179	val_179	val_179
179	val_179	val_179
18	val_18	val_18
18	val_18	val_18
180	val_180	val_180
181	val_181	val_181
183	val_183	val_183
186	val_186	val_186
187	val_187	val_187
187	val_187	val_187
187	val_187	val_187
189	val_189	val_189
19	val_19	val_19
190	val_190	val_190
191	val_191	val_191
191	val_191	val_191
192	val_192	val_192
193	val_193	val_193
193	val_193	val_193
193	val_193	val_193
194	val_194	val_194
195	val_195	val_195
195	val_195	val_195
196	val_196	val_196
197	val_197	val_197
197	val_197	val_197
199	val_199	val_199
199	val_199	val_199
199	val_199	val_199
2	val_2	val_2
20	val_20	val_20
200	val_200	val_200
200	val_200	val_200
201	val_201	val_201
202	val_202	val_202
203	val_203	val_203
203	val_203	val_203
205	val_205	val_205
205	val_205	val_205
207	val_207	val_207
207	val_207	val_207
208	val_208	val_208
208	val_208	val_208
208	val_208	val_208
209	val_209	val_209
209	val_209	val_209
213	val_213	val_213
213	val_213	val_213
214	val_214	val_214
216	val_216	val_216
216	val_216	val_216
217	val_217	val_217
217	val_217	val_217
218	val_218	val_218
219	val_219	val_219
219	val_219	val_219
221	val_221	val_221
221	val_221	val_221
222	val_222	val_222
223	val_223	val_223
223	val_223	val_223
224	val_224	val_224
224	val_224	val_224
226	val_226	val_226
228	val_228	val_228
229	val_229	val_229
229	val_229	val_229
230	val_230	val_230
230	val_230	val_230
230	val_230	val_230
230	val_230	val_230
230	val_230	val_230
233	val_233	val_233
233	val_233	val_233
235	val_235	val_235
237	val_237	val_237
237	val_237	val_237
238	val_238	val_238
238	val_238	val_238
239	val_239	val_239
239	val_239	val_239
24	val_24	val_24
24	val_24	val_24
241	val_241	val_241
242	val_242	val_242
242	val_242	val_242
244	val_244	val_244
247	val_247	val_247
248	val_248	val_248
249	val_249	val_249
252	val_252	val_252
255	val_255	val_255
255	val_255	val_255
256	val_256	val_256
256	val_256	val_256
257	val_257	val_257
258	val_258	val_258
26	val_26	val_26
26	val_26	val_26
260	val_260	val_260
262	val_262	val_262
263	val_263	val_263
265	val_265	val_265
265	val_265	val_265
266	val_266	val_266
27	val_27	val_27
272	val_272	val_272
272	val_272	val_272
273	val_273	val_273
273	val_273	val_273
273	val_273	val_273
274	val_274	val_274
275	val_275	val_275
277	val_277	val_277
277	val_277	val_277
277	val_277	val_277
277	val_277	val_277
278	val_278	val_278
278	val_278	val_278
28	val_28	val_28
280	val_280	val_280
280	val_280	val_280
281	val_281	val_281
281	val_281	val_281
282	val_282	val_282
282	val_282	val_282
283	val_283	val_283
284	val_284	val_284
285	val_285	val_285
286	val_286	val_286
287	val_287	val_287
288	val_288	val_288
288	val_288	val_288
289	val_289	val_289
291	val_291	val_291
292	val_292	val_292
296	val_296	val_296
298	val_298	val_298
298	val_298	val_298
298	val_298	val_298
30	val_30	val_30
302	val_302	val_302
305	val_305	val_305
306	val_306	val_306
307	val_307	val_307
307	val_307	val_307
308	val_308	val_308
309	val_309	val_309
309	val_309	val_309
310	val_310	val_310
311	val_311	val_311
311	val_311	val_311
311	val_311	val_311
315	val_315	val_315
316	val_316	val_316
316	val_316	val_316
316	val_316	val_316
317	val_317	val_317
317	val_317	val_317
318	val_318	val_318
318	val_318	val_318
318	val_318	val_318
321	val_321	val_321
321	val_321	val_321
322	val_322	val_322
322	val_322	val_322
323	val_323	val_323
325	val_325	val_325
325	val_325	val_325
327	val_327	val_327
327	val_327	val_327
327	val_327	val_327
33	val_33	val_33
331	val_331	val_331
331	val_331	val_331
332	val_332	val_332
333	val_333	val_333
333	val_333	val_333
335	val_335	val_335
336	val_336	val_336
338	val_338	val_338
339	val_339	val_339
34	val_34	val_34
341	val_341	val_341
342	val_342	val_342
342	val_342	val_342
344	val_344	val_344
344	val_344	val_344
345	val_345	val_345
348	val_348	val_348
348	val_348	val_348
348	val_348	val_348
348	val_348	val_348
348	val_348	val_348
35	val_35	val_35
35	val_35	val_35
35	val_35	val_35
351	val_351	val_351
353	val_353	val_353
353	val_353	val_353
356	val_356	val_356
360	val_360	val_360
362	val_362	val_362
364	val_364	val_364
365	val_365	val_365
366	val_366	val_366
367	val_367	val_367
367	val_367	val_367
368	val_368	val_368
369	val_369	val_369
369	val_369	val_369
369	val_369	val_369
37	val_37	val_37
37	val_37	val_37
373	val_373	val_373
374	val_374	val_374
375	val_375	val_375
377	val_377	val_377
378	val_378	val_378
379	val_379	val_379
382	val_382	val_382
382	val_382	val_382
384	val_384	val_384
384	val_384	val_384
384	val_384	val_384
386	val_386	val_386
389	val_389	val_389
392	val_392	val_392
393	val_393	val_393
394	val_394	val_394
395	val_395	val_395
395	val_395	val_395
396	val_396	val_396
396	val_396	val_396
396	val_396	val_396
397	val_397	val_397
397	val_397	val_397
399	val_399	val_399
399	val_399	val_399
4	val_4	val_4
400	val_400	val_400
401	val_401	val_401
401	val_401	val_401
401	val_401	val_401
401	val_401	val_401
401	val_401	val_401
402	val_402	val_402
403	val_403	val_403
403	val_403	val_403
403	val_403	val_403
404	val_404	val_404
404	val_404	val_404
406	val_406	val_406
406	val_406	val_406
406	val_406	val_406
406	val_406	val_406
407	val_407	val_407
409	val_409	val_409
409	val_409	val_409
409	val_409	val_409
41	val_41	val_41
411	val_411	val_411
413	val_413	val_413
413	val_413	val_413
414	val_414	val_414
414	val_414	val_414
417	val_417	val_417
417	val_417	val_417
417	val_417	val_417
418	val_418	val_418
419	val_419	val_419
42	val_42	val_42
42	val_42	val_42
421	val_421	val_421
424	val_424	val_424
424	val_424	val_424
427	val_427	val_427
429	val_429	val_429
429	val_429	val_429
43	val_43	val_43
430	val_430	val_430
430	val_430	val_430
430	val_430	val_430
431	val_431	val_431
431	val_431	val_431
431	val_431	val_431
432	val_432	val_432
435	val_435	val_435
436	val_436	val_436
437	val_437	val_437
438	val_438	val_438
438	val_438	val_438
438	val_438	val_438
439	val_439	val_439
439	val_439	val_439
44	val_44	val_44
443	val_443	val_443
444	val_444	val_444
446	val_446	val_446
448	val_448	val_448
449	val_449	val_449
452	val_452	val_452
453	val_453	val_453
454	val_454	val_454
454	val_454	val_454
454	val_454	val_454
455	val_455	val_455
457	val_457	val_457
458	val_458	val_458
458	val_458	val_458
459	val_459	val_459
459	val_459	val_459
460	val_460	val_460
462	val_462	val_462
462	val_462	val_462
463	val_463	val_463
463	val_463	val_463
466	val_466	val_466
466	val_466	val_466
466	val_466	val_466
467	val_467	val_467
468	val_468	val_468
468	val_468	val_468
468	val_468	val_468
468	val_468	val_468
469	val_469	val_469
469	val_469	val_469
469	val_469	val_469
469	val_469	val_469
469	val_469	val_469
47	val_47	val_47
470	val_470	val_470
472	val_472	val_472
475	val_475	val_475
477	val_477	val_477
478	val_478	val_478
478	val_478	val_478
479	val_479	val_479
480	val_480	val_480
480	val_480	val_480
480	val_480	val_480
481	val_481	val_481
482	val_482	val_482
483	val_483	val_483
484	val_484	val_484
485	val_485	val_485
487	val_487	val_487
489	val_489	val_489
489	val_489	val_489
489	val_489	val_489
489	val_489	val_489
490	val_490	val_490
491	val_491	val_491
492	val_492	val_492
492	val_492	val_492
493	val_493	val_493
494	val_494	val_494
495	val_495	val_495
496	val_496	val_496
497	val_497	val_497
498	val_498	val_498
498	val_498	val_498
498	val_498	val_498
5	val_5	val_5
5	val_5	val_5
5	val_5	val_5
51	val_51	val_51
51	val_51	val_51
53	val_53	val_53
54	val_54	val_54
57	val_57	val_57
58	val_58	val_58
58	val_58	val_58
64	val_64	val_64
65	val_65	val_65
66	val_66	val_66
67	val_67	val_67
67	val_67	val_67
69	val_69	val_69
70	val_70	val_70
70	val_70	val_70
70	val_70	val_70
72	val_72	val_72
72	val_72	val_72
74	val_74	val_74
76	val_76	val_76
76	val_76	val_76
77	val_77	val_77
78	val_78	val_78
8	val_8	val_8
80	val_80	val_80
82	val_82	val_82
83	val_83	val_83
83	val_83	val_83
84	val_84	val_84
84	val_84	val_84
85	val_85	val_85
86	val_86	val_86
87	val_87	val_87
9	val_9	val_9
90	val_90	val_90
90	val_90	val_90
90	val_90	val_90
92	val_92	val_92
95	val_95	val_95
95	val_95	val_95
96	val_96	val_96
97	val_97	val_97
97	val_97	val_97
98	val_98	val_98
98	val_98	val_98
tst1	500	500
