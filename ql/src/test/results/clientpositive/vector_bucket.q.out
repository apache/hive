PREHOOK: query: CREATE TABLE non_orc_table(a INT, b STRING) CLUSTERED BY(a) INTO 2 BUCKETS STORED AS sequencefile
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@non_orc_table
POSTHOOK: query: CREATE TABLE non_orc_table(a INT, b STRING) CLUSTERED BY(a) INTO 2 BUCKETS STORED AS sequencefile
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@non_orc_table
PREHOOK: query: explain vectorization expression
insert into table non_orc_table values(1, 'one'),(1, 'one'), (2, 'two'),(3, 'three')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@non_orc_table
POSTHOOK: query: explain vectorization expression
insert into table non_orc_table values(1, 'one'),(1, 'one'), (2, 'two'),(3, 'three')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@non_orc_table
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1
  Stage-2 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: _dummy_table
            Row Limit Per Split: 1
            Statistics: Num rows: 1 Data size: 10 Basic stats: COMPLETE Column stats: COMPLETE
            Select Operator
              expressions: array(const struct(1,'one'),const struct(1,'one'),const struct(2,'two'),const struct(3,'three')) (type: array<struct<col1:int,col2:string>>)
              outputColumnNames: _col0
              Statistics: Num rows: 1 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
              UDTF Operator
                Statistics: Num rows: 1 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                function name: inline
                Select Operator
                  expressions: col1 (type: int), col2 (type: string)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    sort order: 
                    Map-reduce partition columns: _col0 (type: int)
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col0 (type: int), _col1 (type: string)
      Map Vectorization:
          enabled: false
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          enabledConditionsNotMet: Could not enable vectorization due to partition column names size 1 is greater than the number of table column names size 0 IS false
          inputFileFormats: org.apache.hadoop.hive.ql.io.NullRowsInputFormat
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: VALUE._col0 (type: int), VALUE._col1 (type: string)
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
          File Output Operator
            compressed: false
            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                name: default.non_orc_table

  Stage: Stage-0
    Move Operator
      tables:
          replace: false
          table:
              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.non_orc_table

  Stage: Stage-2
    Stats Work
      Basic Stats Work:

PREHOOK: query: select a, b from non_orc_table order by a
PREHOOK: type: QUERY
PREHOOK: Input: default@non_orc_table
#### A masked pattern was here ####
POSTHOOK: query: select a, b from non_orc_table order by a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@non_orc_table
#### A masked pattern was here ####
PREHOOK: query: insert into table non_orc_table values(1, 'one'),(1, 'one'), (2, 'two'),(3, 'three')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@non_orc_table
POSTHOOK: query: insert into table non_orc_table values(1, 'one'),(1, 'one'), (2, 'two'),(3, 'three')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@non_orc_table
POSTHOOK: Lineage: non_orc_table.a SCRIPT []
POSTHOOK: Lineage: non_orc_table.b SCRIPT []
PREHOOK: query: select a, b from non_orc_table order by a
PREHOOK: type: QUERY
PREHOOK: Input: default@non_orc_table
#### A masked pattern was here ####
POSTHOOK: query: select a, b from non_orc_table order by a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@non_orc_table
#### A masked pattern was here ####
1	one
1	one
2	two
3	three
