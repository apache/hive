PREHOOK: query: CREATE TEMPORARY FUNCTION dboutput AS 'org.apache.hadoop.hive.contrib.genericudf.example.GenericUDFDBOutput'
PREHOOK: type: CREATEFUNCTION
PREHOOK: Output: dboutput
POSTHOOK: query: CREATE TEMPORARY FUNCTION dboutput AS 'org.apache.hadoop.hive.contrib.genericudf.example.GenericUDFDBOutput'
POSTHOOK: type: CREATEFUNCTION
POSTHOOK: Output: dboutput
PREHOOK: query: FROM src
SELECT
#### A masked pattern was here ####
'CREATE TABLE CATALOG_SALES ("cs_sold_date_sk" INTEGER, "cs_sold_time_sk" INTEGER, "cs_ship_date_sk" INTEGER, "cs_bill_customer_sk" INTEGER,
  "cs_bill_cdemo_sk" INTEGER, "cs_bill_hdemo_sk" INTEGER, "cs_bill_addr_sk" INTEGER, "cs_ship_customer_sk" INTEGER, "cs_ship_cdemo_sk" INTEGER,
  "cs_ship_hdemo_sk" INTEGER, "cs_ship_addr_sk" INTEGER, "cs_call_center_sk" INTEGER, "cs_catalog_page_sk" INTEGER, "cs_ship_mode_sk" INTEGER,
  "cs_warehouse_sk" INTEGER, "cs_item_sk" INTEGER, "cs_promo_sk" INTEGER, "cs_order_number" INTEGER, "cs_quantity" INTEGER, "cs_wholesale_cost" DECIMAL(7,2),
  "cs_list_price" DECIMAL(7,2), "cs_sales_price" DECIMAL(7,2), "cs_ext_discount_amt" DECIMAL(7,2), "cs_ext_sales_price" DECIMAL(7,2),
  "cs_ext_wholesale_cost" DECIMAL(7,2), "cs_ext_list_price" DECIMAL(7,2), "cs_ext_tax" DECIMAL(7,2), "cs_coupon_amt" DECIMAL(7,2),
  "cs_ext_ship_cost" DECIMAL(7,2), "cs_net_paid" DECIMAL(7,2), "cs_net_paid_inc_tax" DECIMAL(7,2), "cs_net_paid_inc_ship" DECIMAL(7,2),
  "cs_net_paid_inc_ship_tax" DECIMAL(7,2), "cs_net_profit" DECIMAL(7,2))' ),
#### A masked pattern was here ####
'CREATE TABLE CATALOG_RETURNS ("cr_returned_date_sk" INTEGER, "cr_returned_time_sk" INTEGER, "cr_item_sk" INTEGER, "cr_refunded_customer_sk" INTEGER,
  "cr_refunded_cdemo_sk" INTEGER, "cr_refunded_hdemo_sk" INTEGER, "cr_refunded_addr_sk" INTEGER, "cr_returning_customer_sk" INTEGER,
  "cr_returning_cdemo_sk" INTEGER, "cr_returning_hdemo_sk" INTEGER, "cr_returning_addr_sk" INTEGER, "cr_call_center_sk" INTEGER,
  "cr_catalog_page_sk" INTEGER, "cr_ship_mode_sk" INTEGER, "cr_warehouse_sk" INTEGER, "cr_reason_sk" INTEGER, "cr_order_number" INTEGER,
  "cr_return_quantity" INTEGER, "cr_return_amount" DECIMAL(7,2), "cr_return_tax" DECIMAL(7,2), "cr_return_amt_inc_tax" DECIMAL(7,2),
  "cr_fee" DECIMAL(7,2), "cr_return_ship_cost" DECIMAL(7,2), "cr_refunded_cash" DECIMAL(7,2), "cr_reversed_charge" DECIMAL(7,2),
  "cr_store_credit" DECIMAL(7,2), "cr_net_loss" DECIMAL(7,2))' ),
#### A masked pattern was here ####
'CREATE TABLE STORE_SALES ("ss_sold_date_sk" INTEGER, "ss_sold_time_sk" INTEGER, "ss_item_sk" INTEGER, "ss_customer_sk" INTEGER, "ss_cdemo_sk" INTEGER,
  "ss_hdemo_sk" INTEGER, "ss_addr_sk" INTEGER, "ss_store_sk" INTEGER, "ss_promo_sk" INTEGER, "ss_ticket_number" INTEGER, "ss_quantity" INTEGER,
  "ss_wholesale_cost" DECIMAL(7,2), "ss_list_price" DECIMAL(7,2), "ss_sales_price" DECIMAL(7,2), "ss_ext_discount_amt" DECIMAL(7,2),
  "ss_ext_sales_price" DECIMAL(7,2), "ss_ext_wholesale_cost" DECIMAL(7,2), "ss_ext_list_price" DECIMAL(7,2), "ss_ext_tax" DECIMAL(7,2),
  "ss_coupon_amt" DECIMAL(7,2), "ss_net_paid" DECIMAL(7,2), "ss_net_paid_inc_tax" DECIMAL(7,2), "ss_net_profit" DECIMAL(7,2))' ),
#### A masked pattern was here ####
'CREATE TABLE STORE_RETURNS ("sr_returned_date_sk" INTEGER, "sr_return_time_sk" INTEGER, "sr_item_sk" INTEGER, "sr_customer_sk" INTEGER,
  "sr_cdemo_sk" INTEGER, "sr_hdemo_sk" INTEGER, "sr_addr_sk" INTEGER, "sr_store_sk" INTEGER, "sr_reason_sk" INTEGER, "sr_ticket_number" INTEGER,
  "sr_return_quantity" INTEGER, "sr_return_amt" DECIMAL(7,2), "sr_return_tax" DECIMAL(7,2), "sr_return_amt_inc_tax" DECIMAL(7,2),
  "sr_fee" DECIMAL(7,2), "sr_return_ship_cost" DECIMAL(7,2), "sr_refunded_cash" DECIMAL(7,2), "sr_reversed_charge" DECIMAL(7,2),
  "sr_store_credit" DECIMAL(7,2), "sr_net_loss" DECIMAL(7,2))' ),
#### A masked pattern was here ####
'CREATE TABLE WEB_SALES ("ws_sold_date_sk" INTEGER, "ws_sold_time_sk" INTEGER, "ws_ship_date_sk" INTEGER, "ws_item_sk" INTEGER,
  "ws_bill_customer_sk" INTEGER, "ws_bill_cdemo_sk" INTEGER, "ws_bill_hdemo_sk" INTEGER, "ws_bill_addr_sk" INTEGER, "ws_ship_customer_sk" INTEGER,
  "ws_ship_cdemo_sk" INTEGER, "ws_ship_hdemo_sk" INTEGER, "ws_ship_addr_sk" INTEGER, "ws_web_page_sk" INTEGER, "ws_web_site_sk" INTEGER,
  "ws_ship_mode_sk" INTEGER, "ws_warehouse_sk" INTEGER, "ws_promo_sk" INTEGER, "ws_order_number" INTEGER, "ws_quantity" INTEGER,
  "ws_wholesale_cost" DECIMAL(7,2), "ws_list_price" DECIMAL(7,2), "ws_sales_price" DECIMAL(7,2), "ws_ext_discount_amt" DECIMAL(7,2),
  "ws_ext_sales_price" DECIMAL(7,2), "ws_ext_wholesale_cost" DECIMAL(7,2), "ws_ext_list_price" DECIMAL(7,2), "ws_ext_tax" DECIMAL(7,2),
  "ws_coupon_amt" DECIMAL(7,2), "ws_ext_ship_cost" DECIMAL(7,2), "ws_net_paid" DECIMAL(7,2), "ws_net_paid_inc_tax" DECIMAL(7,2),
  "ws_net_paid_inc_ship" DECIMAL(7,2), "ws_net_paid_inc_ship_tax" DECIMAL(7,2), "ws_net_profit" DECIMAL(7,2))' ),
#### A masked pattern was here ####
'CREATE TABLE WEB_RETURNS ("wr_returned_date_sk" INTEGER, "wr_returned_time_sk" INTEGER, "wr_item_sk" INTEGER, "wr_refunded_customer_sk" INTEGER,
  "wr_refunded_cdemo_sk" INTEGER, "wr_refunded_hdemo_sk" INTEGER, "wr_refunded_addr_sk" INTEGER, "wr_returning_customer_sk" INTEGER,
  "wr_returning_cdemo_sk" INTEGER, "wr_returning_hdemo_sk" INTEGER, "wr_returning_addr_sk" INTEGER, "wr_web_page_sk" INTEGER,
  "wr_reason_sk" INTEGER, "wr_order_number" INTEGER, "wr_return_quantity" INTEGER, "wr_return_amt" DECIMAL(7,2), "wr_return_tax" DECIMAL(7,2),
  "wr_return_amt_inc_tax" DECIMAL(7,2), "wr_fee" DECIMAL(7,2), "wr_return_ship_cost" DECIMAL(7,2), "wr_refunded_cash" DECIMAL(7,2),
  "wr_reversed_charge" DECIMAL(7,2), "wr_account_credit" DECIMAL(7,2), "wr_net_loss" DECIMAL(7,2))' ),
#### A masked pattern was here ####
'CREATE TABLE CUSTOMER ("c_customer_sk" INTEGER, "c_customer_id" CHAR(16), "c_current_cdemo_sk" INTEGER, "c_current_hdemo_sk" INTEGER,
  "c_current_addr_sk" INTEGER, "c_first_shipto_date_sk" INTEGER, "c_first_sales_date_sk" INTEGER, "c_salutation" CHAR(10),
  "c_first_name" CHAR(20), "c_last_name" CHAR(30), "c_preferred_cust_flag" CHAR(1), "c_birth_day" INTEGER, "c_birth_month" INTEGER,
  "c_birth_year" INTEGER, "c_birth_country" VARCHAR(20), "c_login" CHAR(13), "c_email_address" CHAR(50), "c_last_review_date" CHAR(10))' ),
#### A masked pattern was here ####
'CREATE TABLE CUSTOMER_ADDRESS ("ca_address_sk" INTEGER, "ca_address_id" CHAR(16), "ca_street_number" CHAR(10), "ca_street_name" VARCHAR(60),
  "ca_street_type" CHAR(15), "ca_suite_number" CHAR(10), "ca_city" VARCHAR(60), "ca_county" VARCHAR(30), "ca_state" CHAR(2),
  "ca_zip" CHAR(10), "ca_country" VARCHAR(20), "ca_gmt_offset" DECIMAL(5,2), "ca_location_type" CHAR(20))' ),
#### A masked pattern was here ####
'CREATE TABLE CUSTOMER_DEMOGRAPHICS ("cd_demo_sk" INTEGER, "cd_gender" CHAR(1), "cd_marital_status" CHAR(1), "cd_education_status" CHAR(20),
  "cd_purchase_estimate" INTEGER, "cd_credit_rating" CHAR(10), "cd_dep_count" INTEGER, "cd_dep_employed_count" INTEGER,
  "cd_dep_college_count" INTEGER)' ),
#### A masked pattern was here ####
'CREATE TABLE INVENTORY ("inv_date_sk" INTEGER, "inv_item_sk" INTEGER, "inv_warehouse_sk" INTEGER, "inv_quantity_on_hand" INTEGER)' ),
#### A masked pattern was here ####
'CREATE TABLE ITEM ("i_item_sk" INTEGER, "i_item_id" CHAR(16), "i_rec_start_date" DATE, "i_rec_end_date" DATE,
  "i_item_desc" VARCHAR(200), "i_current_price" DECIMAL(7,2), "i_wholesale_cost" DECIMAL(7,2), "i_brand_id" INTEGER,
  "i_brand" CHAR(50), "i_class_id" INTEGER, "i_class" CHAR(50), "i_category_id" INTEGER, "i_category" CHAR(50),
  "i_manufact_id" INTEGER, "i_manufact" CHAR(50), "i_size" CHAR(20), "i_formulation" CHAR(20), "i_color" CHAR(20),
  "i_units" CHAR(10), "i_container" CHAR(10), "i_manager_id" INTEGER, "i_product_name" CHAR(50))' ),
#### A masked pattern was here ####
'CREATE TABLE WAREHOUSE ("w_warehouse_sk" INTEGER, "w_warehouse_id" CHAR(16), "w_warehouse_name" VARCHAR(20),
  "w_warehouse_sq_ft" INTEGER, "w_street_number" CHAR(10), "w_street_name" VARCHAR(60), "w_street_type" CHAR(15),
  "w_suite_number" CHAR(10), "w_city" VARCHAR(60), "w_county" VARCHAR(30), "w_state" CHAR(2), "w_zip" CHAR(10),
  "w_country" VARCHAR(20), "w_gmt_offset" DECIMAL(5,2))' ),
#### A masked pattern was here ####
'CREATE TABLE DATE_DIM ("d_date_sk" INTEGER, "d_date_id" CHAR(16), "d_date" DATE, "d_month_seq" INTEGER, "d_week_seq" INTEGER,
  "d_quarter_seq" INTEGER, "d_year" INTEGER, "d_dow" INTEGER, "d_moy" INTEGER, "d_dom" INTEGER, "d_qoy" INTEGER,
  "d_fy_year" INTEGER, "d_fy_quarter_seq" INTEGER, "d_fy_week_seq" INTEGER, "d_day_name" CHAR(9), "d_quarter_name" CHAR(6),
  "d_holiday" CHAR(1), "d_weekend" CHAR(1), "d_following_holiday" CHAR(1), "d_first_dom" INTEGER, "d_last_dom" INTEGER,
  "d_same_day_ly" INTEGER, "d_same_day_lq" INTEGER, "d_current_day" CHAR(1), "d_current_week" CHAR(1), "d_current_month" CHAR(1),
  "d_current_quarter" CHAR(1), "d_current_year" CHAR(1))' ),
#### A masked pattern was here ####
'CREATE TABLE STORE ("s_store_sk" INTEGER, "s_store_id" CHAR(16), "s_rec_start_date" DATE, "s_rec_end_date" DATE,
  "s_closed_date_sk" INTEGER, "s_store_name" VARCHAR(50), "s_number_employees" INTEGER, "s_floor_space" INTEGER,
  "s_hours" CHAR(20), "s_manager" VARCHAR(40), "s_market_id" INTEGER, "s_geography_class" VARCHAR(100),
  "s_market_desc" VARCHAR(100), "s_market_manager" VARCHAR(40), "s_division_id" INTEGER, "s_division_name" VARCHAR(50),
  "s_company_id" INTEGER, "s_company_name" VARCHAR(50), "s_street_number" VARCHAR(10), "s_street_name" VARCHAR(60),
  "s_street_type" CHAR(15), "s_suite_number" CHAR(10), "s_city" VARCHAR(60), "s_county" VARCHAR(30),
  "s_state" CHAR(2), "s_zip" CHAR(10), "s_country" VARCHAR(20), "s_gmt_offset" DECIMAL(5,2), "s_tax_precentage" DECIMAL(5,2))' ),
#### A masked pattern was here ####
'CREATE TABLE HOUSEHOLD_DEMOGRAPHICS ("hd_demo_sk" INTEGER, "hd_income_band_sk" INTEGER, "hd_buy_potential" CHAR(15),
  "hd_dep_count" INTEGER, "hd_vehicle_count" INTEGER)' ),
#### A masked pattern was here ####
'CREATE TABLE TIME_DIM ("t_time_sk" INTEGER, "t_time_id" CHAR(16), "t_time" INTEGER, "t_hour" INTEGER,
  "t_minute" INTEGER, "t_second" INTEGER, "t_am_pm" CHAR(2), "t_shift" CHAR(20), "t_sub_shift" CHAR(20),
  "t_meal_time" CHAR(20))' ),
#### A masked pattern was here ####
'CREATE TABLE REASON ("r_reason_sk" INTEGER, "r_reason_id" CHAR(16), "r_reason_desc" CHAR(100))' )
limit 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: FROM src
SELECT
#### A masked pattern was here ####
'CREATE TABLE CATALOG_SALES ("cs_sold_date_sk" INTEGER, "cs_sold_time_sk" INTEGER, "cs_ship_date_sk" INTEGER, "cs_bill_customer_sk" INTEGER,
  "cs_bill_cdemo_sk" INTEGER, "cs_bill_hdemo_sk" INTEGER, "cs_bill_addr_sk" INTEGER, "cs_ship_customer_sk" INTEGER, "cs_ship_cdemo_sk" INTEGER,
  "cs_ship_hdemo_sk" INTEGER, "cs_ship_addr_sk" INTEGER, "cs_call_center_sk" INTEGER, "cs_catalog_page_sk" INTEGER, "cs_ship_mode_sk" INTEGER,
  "cs_warehouse_sk" INTEGER, "cs_item_sk" INTEGER, "cs_promo_sk" INTEGER, "cs_order_number" INTEGER, "cs_quantity" INTEGER, "cs_wholesale_cost" DECIMAL(7,2),
  "cs_list_price" DECIMAL(7,2), "cs_sales_price" DECIMAL(7,2), "cs_ext_discount_amt" DECIMAL(7,2), "cs_ext_sales_price" DECIMAL(7,2),
  "cs_ext_wholesale_cost" DECIMAL(7,2), "cs_ext_list_price" DECIMAL(7,2), "cs_ext_tax" DECIMAL(7,2), "cs_coupon_amt" DECIMAL(7,2),
  "cs_ext_ship_cost" DECIMAL(7,2), "cs_net_paid" DECIMAL(7,2), "cs_net_paid_inc_tax" DECIMAL(7,2), "cs_net_paid_inc_ship" DECIMAL(7,2),
  "cs_net_paid_inc_ship_tax" DECIMAL(7,2), "cs_net_profit" DECIMAL(7,2))' ),
#### A masked pattern was here ####
'CREATE TABLE CATALOG_RETURNS ("cr_returned_date_sk" INTEGER, "cr_returned_time_sk" INTEGER, "cr_item_sk" INTEGER, "cr_refunded_customer_sk" INTEGER,
  "cr_refunded_cdemo_sk" INTEGER, "cr_refunded_hdemo_sk" INTEGER, "cr_refunded_addr_sk" INTEGER, "cr_returning_customer_sk" INTEGER,
  "cr_returning_cdemo_sk" INTEGER, "cr_returning_hdemo_sk" INTEGER, "cr_returning_addr_sk" INTEGER, "cr_call_center_sk" INTEGER,
  "cr_catalog_page_sk" INTEGER, "cr_ship_mode_sk" INTEGER, "cr_warehouse_sk" INTEGER, "cr_reason_sk" INTEGER, "cr_order_number" INTEGER,
  "cr_return_quantity" INTEGER, "cr_return_amount" DECIMAL(7,2), "cr_return_tax" DECIMAL(7,2), "cr_return_amt_inc_tax" DECIMAL(7,2),
  "cr_fee" DECIMAL(7,2), "cr_return_ship_cost" DECIMAL(7,2), "cr_refunded_cash" DECIMAL(7,2), "cr_reversed_charge" DECIMAL(7,2),
  "cr_store_credit" DECIMAL(7,2), "cr_net_loss" DECIMAL(7,2))' ),
#### A masked pattern was here ####
'CREATE TABLE STORE_SALES ("ss_sold_date_sk" INTEGER, "ss_sold_time_sk" INTEGER, "ss_item_sk" INTEGER, "ss_customer_sk" INTEGER, "ss_cdemo_sk" INTEGER,
  "ss_hdemo_sk" INTEGER, "ss_addr_sk" INTEGER, "ss_store_sk" INTEGER, "ss_promo_sk" INTEGER, "ss_ticket_number" INTEGER, "ss_quantity" INTEGER,
  "ss_wholesale_cost" DECIMAL(7,2), "ss_list_price" DECIMAL(7,2), "ss_sales_price" DECIMAL(7,2), "ss_ext_discount_amt" DECIMAL(7,2),
  "ss_ext_sales_price" DECIMAL(7,2), "ss_ext_wholesale_cost" DECIMAL(7,2), "ss_ext_list_price" DECIMAL(7,2), "ss_ext_tax" DECIMAL(7,2),
  "ss_coupon_amt" DECIMAL(7,2), "ss_net_paid" DECIMAL(7,2), "ss_net_paid_inc_tax" DECIMAL(7,2), "ss_net_profit" DECIMAL(7,2))' ),
#### A masked pattern was here ####
'CREATE TABLE STORE_RETURNS ("sr_returned_date_sk" INTEGER, "sr_return_time_sk" INTEGER, "sr_item_sk" INTEGER, "sr_customer_sk" INTEGER,
  "sr_cdemo_sk" INTEGER, "sr_hdemo_sk" INTEGER, "sr_addr_sk" INTEGER, "sr_store_sk" INTEGER, "sr_reason_sk" INTEGER, "sr_ticket_number" INTEGER,
  "sr_return_quantity" INTEGER, "sr_return_amt" DECIMAL(7,2), "sr_return_tax" DECIMAL(7,2), "sr_return_amt_inc_tax" DECIMAL(7,2),
  "sr_fee" DECIMAL(7,2), "sr_return_ship_cost" DECIMAL(7,2), "sr_refunded_cash" DECIMAL(7,2), "sr_reversed_charge" DECIMAL(7,2),
  "sr_store_credit" DECIMAL(7,2), "sr_net_loss" DECIMAL(7,2))' ),
#### A masked pattern was here ####
'CREATE TABLE WEB_SALES ("ws_sold_date_sk" INTEGER, "ws_sold_time_sk" INTEGER, "ws_ship_date_sk" INTEGER, "ws_item_sk" INTEGER,
  "ws_bill_customer_sk" INTEGER, "ws_bill_cdemo_sk" INTEGER, "ws_bill_hdemo_sk" INTEGER, "ws_bill_addr_sk" INTEGER, "ws_ship_customer_sk" INTEGER,
  "ws_ship_cdemo_sk" INTEGER, "ws_ship_hdemo_sk" INTEGER, "ws_ship_addr_sk" INTEGER, "ws_web_page_sk" INTEGER, "ws_web_site_sk" INTEGER,
  "ws_ship_mode_sk" INTEGER, "ws_warehouse_sk" INTEGER, "ws_promo_sk" INTEGER, "ws_order_number" INTEGER, "ws_quantity" INTEGER,
  "ws_wholesale_cost" DECIMAL(7,2), "ws_list_price" DECIMAL(7,2), "ws_sales_price" DECIMAL(7,2), "ws_ext_discount_amt" DECIMAL(7,2),
  "ws_ext_sales_price" DECIMAL(7,2), "ws_ext_wholesale_cost" DECIMAL(7,2), "ws_ext_list_price" DECIMAL(7,2), "ws_ext_tax" DECIMAL(7,2),
  "ws_coupon_amt" DECIMAL(7,2), "ws_ext_ship_cost" DECIMAL(7,2), "ws_net_paid" DECIMAL(7,2), "ws_net_paid_inc_tax" DECIMAL(7,2),
  "ws_net_paid_inc_ship" DECIMAL(7,2), "ws_net_paid_inc_ship_tax" DECIMAL(7,2), "ws_net_profit" DECIMAL(7,2))' ),
#### A masked pattern was here ####
'CREATE TABLE WEB_RETURNS ("wr_returned_date_sk" INTEGER, "wr_returned_time_sk" INTEGER, "wr_item_sk" INTEGER, "wr_refunded_customer_sk" INTEGER,
  "wr_refunded_cdemo_sk" INTEGER, "wr_refunded_hdemo_sk" INTEGER, "wr_refunded_addr_sk" INTEGER, "wr_returning_customer_sk" INTEGER,
  "wr_returning_cdemo_sk" INTEGER, "wr_returning_hdemo_sk" INTEGER, "wr_returning_addr_sk" INTEGER, "wr_web_page_sk" INTEGER,
  "wr_reason_sk" INTEGER, "wr_order_number" INTEGER, "wr_return_quantity" INTEGER, "wr_return_amt" DECIMAL(7,2), "wr_return_tax" DECIMAL(7,2),
  "wr_return_amt_inc_tax" DECIMAL(7,2), "wr_fee" DECIMAL(7,2), "wr_return_ship_cost" DECIMAL(7,2), "wr_refunded_cash" DECIMAL(7,2),
  "wr_reversed_charge" DECIMAL(7,2), "wr_account_credit" DECIMAL(7,2), "wr_net_loss" DECIMAL(7,2))' ),
#### A masked pattern was here ####
'CREATE TABLE CUSTOMER ("c_customer_sk" INTEGER, "c_customer_id" CHAR(16), "c_current_cdemo_sk" INTEGER, "c_current_hdemo_sk" INTEGER,
  "c_current_addr_sk" INTEGER, "c_first_shipto_date_sk" INTEGER, "c_first_sales_date_sk" INTEGER, "c_salutation" CHAR(10),
  "c_first_name" CHAR(20), "c_last_name" CHAR(30), "c_preferred_cust_flag" CHAR(1), "c_birth_day" INTEGER, "c_birth_month" INTEGER,
  "c_birth_year" INTEGER, "c_birth_country" VARCHAR(20), "c_login" CHAR(13), "c_email_address" CHAR(50), "c_last_review_date" CHAR(10))' ),
#### A masked pattern was here ####
'CREATE TABLE CUSTOMER_ADDRESS ("ca_address_sk" INTEGER, "ca_address_id" CHAR(16), "ca_street_number" CHAR(10), "ca_street_name" VARCHAR(60),
  "ca_street_type" CHAR(15), "ca_suite_number" CHAR(10), "ca_city" VARCHAR(60), "ca_county" VARCHAR(30), "ca_state" CHAR(2),
  "ca_zip" CHAR(10), "ca_country" VARCHAR(20), "ca_gmt_offset" DECIMAL(5,2), "ca_location_type" CHAR(20))' ),
#### A masked pattern was here ####
'CREATE TABLE CUSTOMER_DEMOGRAPHICS ("cd_demo_sk" INTEGER, "cd_gender" CHAR(1), "cd_marital_status" CHAR(1), "cd_education_status" CHAR(20),
  "cd_purchase_estimate" INTEGER, "cd_credit_rating" CHAR(10), "cd_dep_count" INTEGER, "cd_dep_employed_count" INTEGER,
  "cd_dep_college_count" INTEGER)' ),
#### A masked pattern was here ####
'CREATE TABLE INVENTORY ("inv_date_sk" INTEGER, "inv_item_sk" INTEGER, "inv_warehouse_sk" INTEGER, "inv_quantity_on_hand" INTEGER)' ),
#### A masked pattern was here ####
'CREATE TABLE ITEM ("i_item_sk" INTEGER, "i_item_id" CHAR(16), "i_rec_start_date" DATE, "i_rec_end_date" DATE,
  "i_item_desc" VARCHAR(200), "i_current_price" DECIMAL(7,2), "i_wholesale_cost" DECIMAL(7,2), "i_brand_id" INTEGER,
  "i_brand" CHAR(50), "i_class_id" INTEGER, "i_class" CHAR(50), "i_category_id" INTEGER, "i_category" CHAR(50),
  "i_manufact_id" INTEGER, "i_manufact" CHAR(50), "i_size" CHAR(20), "i_formulation" CHAR(20), "i_color" CHAR(20),
  "i_units" CHAR(10), "i_container" CHAR(10), "i_manager_id" INTEGER, "i_product_name" CHAR(50))' ),
#### A masked pattern was here ####
'CREATE TABLE WAREHOUSE ("w_warehouse_sk" INTEGER, "w_warehouse_id" CHAR(16), "w_warehouse_name" VARCHAR(20),
  "w_warehouse_sq_ft" INTEGER, "w_street_number" CHAR(10), "w_street_name" VARCHAR(60), "w_street_type" CHAR(15),
  "w_suite_number" CHAR(10), "w_city" VARCHAR(60), "w_county" VARCHAR(30), "w_state" CHAR(2), "w_zip" CHAR(10),
  "w_country" VARCHAR(20), "w_gmt_offset" DECIMAL(5,2))' ),
#### A masked pattern was here ####
'CREATE TABLE DATE_DIM ("d_date_sk" INTEGER, "d_date_id" CHAR(16), "d_date" DATE, "d_month_seq" INTEGER, "d_week_seq" INTEGER,
  "d_quarter_seq" INTEGER, "d_year" INTEGER, "d_dow" INTEGER, "d_moy" INTEGER, "d_dom" INTEGER, "d_qoy" INTEGER,
  "d_fy_year" INTEGER, "d_fy_quarter_seq" INTEGER, "d_fy_week_seq" INTEGER, "d_day_name" CHAR(9), "d_quarter_name" CHAR(6),
  "d_holiday" CHAR(1), "d_weekend" CHAR(1), "d_following_holiday" CHAR(1), "d_first_dom" INTEGER, "d_last_dom" INTEGER,
  "d_same_day_ly" INTEGER, "d_same_day_lq" INTEGER, "d_current_day" CHAR(1), "d_current_week" CHAR(1), "d_current_month" CHAR(1),
  "d_current_quarter" CHAR(1), "d_current_year" CHAR(1))' ),
#### A masked pattern was here ####
'CREATE TABLE STORE ("s_store_sk" INTEGER, "s_store_id" CHAR(16), "s_rec_start_date" DATE, "s_rec_end_date" DATE,
  "s_closed_date_sk" INTEGER, "s_store_name" VARCHAR(50), "s_number_employees" INTEGER, "s_floor_space" INTEGER,
  "s_hours" CHAR(20), "s_manager" VARCHAR(40), "s_market_id" INTEGER, "s_geography_class" VARCHAR(100),
  "s_market_desc" VARCHAR(100), "s_market_manager" VARCHAR(40), "s_division_id" INTEGER, "s_division_name" VARCHAR(50),
  "s_company_id" INTEGER, "s_company_name" VARCHAR(50), "s_street_number" VARCHAR(10), "s_street_name" VARCHAR(60),
  "s_street_type" CHAR(15), "s_suite_number" CHAR(10), "s_city" VARCHAR(60), "s_county" VARCHAR(30),
  "s_state" CHAR(2), "s_zip" CHAR(10), "s_country" VARCHAR(20), "s_gmt_offset" DECIMAL(5,2), "s_tax_precentage" DECIMAL(5,2))' ),
#### A masked pattern was here ####
'CREATE TABLE HOUSEHOLD_DEMOGRAPHICS ("hd_demo_sk" INTEGER, "hd_income_band_sk" INTEGER, "hd_buy_potential" CHAR(15),
  "hd_dep_count" INTEGER, "hd_vehicle_count" INTEGER)' ),
#### A masked pattern was here ####
'CREATE TABLE TIME_DIM ("t_time_sk" INTEGER, "t_time_id" CHAR(16), "t_time" INTEGER, "t_hour" INTEGER,
  "t_minute" INTEGER, "t_second" INTEGER, "t_am_pm" CHAR(2), "t_shift" CHAR(20), "t_sub_shift" CHAR(20),
  "t_meal_time" CHAR(20))' ),
#### A masked pattern was here ####
'CREATE TABLE REASON ("r_reason_sk" INTEGER, "r_reason_id" CHAR(16), "r_reason_desc" CHAR(100))' )
limit 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
PREHOOK: query: CREATE EXTERNAL TABLE catalog_sales
(
    cs_sold_date_sk           int                           ,
    cs_sold_time_sk           int                           ,
    cs_ship_date_sk           int                           ,
    cs_bill_customer_sk       int                           ,
    cs_bill_cdemo_sk          int                           ,
    cs_bill_hdemo_sk          int                           ,
    cs_bill_addr_sk           int                           ,
    cs_ship_customer_sk       int                           ,
    cs_ship_cdemo_sk          int                           ,
    cs_ship_hdemo_sk          int                           ,
    cs_ship_addr_sk           int                           ,
    cs_call_center_sk         int                           ,
    cs_catalog_page_sk        int                           ,
    cs_ship_mode_sk           int                           ,
    cs_warehouse_sk           int                           ,
    cs_item_sk                int                           ,
    cs_promo_sk               int                           ,
    cs_order_number           int                           ,
    cs_quantity               int                           ,
    cs_wholesale_cost         decimal(7,2)                  ,
    cs_list_price             decimal(7,2)                  ,
    cs_sales_price            decimal(7,2)                  ,
    cs_ext_discount_amt       decimal(7,2)                  ,
    cs_ext_sales_price        decimal(7,2)                  ,
    cs_ext_wholesale_cost     decimal(7,2)                  ,
    cs_ext_list_price         decimal(7,2)                  ,
    cs_ext_tax                decimal(7,2)                  ,
    cs_coupon_amt             decimal(7,2)                  ,
    cs_ext_ship_cost          decimal(7,2)                  ,
    cs_net_paid               decimal(7,2)                  ,
    cs_net_paid_inc_tax       decimal(7,2)                  ,
    cs_net_paid_inc_ship      decimal(7,2)                  ,
    cs_net_paid_inc_ship_tax  decimal(7,2)                  ,
    cs_net_profit             decimal(7,2)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "CATALOG_SALES",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@catalog_sales
POSTHOOK: query: CREATE EXTERNAL TABLE catalog_sales
(
    cs_sold_date_sk           int                           ,
    cs_sold_time_sk           int                           ,
    cs_ship_date_sk           int                           ,
    cs_bill_customer_sk       int                           ,
    cs_bill_cdemo_sk          int                           ,
    cs_bill_hdemo_sk          int                           ,
    cs_bill_addr_sk           int                           ,
    cs_ship_customer_sk       int                           ,
    cs_ship_cdemo_sk          int                           ,
    cs_ship_hdemo_sk          int                           ,
    cs_ship_addr_sk           int                           ,
    cs_call_center_sk         int                           ,
    cs_catalog_page_sk        int                           ,
    cs_ship_mode_sk           int                           ,
    cs_warehouse_sk           int                           ,
    cs_item_sk                int                           ,
    cs_promo_sk               int                           ,
    cs_order_number           int                           ,
    cs_quantity               int                           ,
    cs_wholesale_cost         decimal(7,2)                  ,
    cs_list_price             decimal(7,2)                  ,
    cs_sales_price            decimal(7,2)                  ,
    cs_ext_discount_amt       decimal(7,2)                  ,
    cs_ext_sales_price        decimal(7,2)                  ,
    cs_ext_wholesale_cost     decimal(7,2)                  ,
    cs_ext_list_price         decimal(7,2)                  ,
    cs_ext_tax                decimal(7,2)                  ,
    cs_coupon_amt             decimal(7,2)                  ,
    cs_ext_ship_cost          decimal(7,2)                  ,
    cs_net_paid               decimal(7,2)                  ,
    cs_net_paid_inc_tax       decimal(7,2)                  ,
    cs_net_paid_inc_ship      decimal(7,2)                  ,
    cs_net_paid_inc_ship_tax  decimal(7,2)                  ,
    cs_net_profit             decimal(7,2)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "CATALOG_SALES",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@catalog_sales
PREHOOK: query: CREATE EXTERNAL TABLE catalog_returns
(
    cr_returned_date_sk       int                           ,
    cr_returned_time_sk       int                           ,
    cr_item_sk                int                           ,
    cr_refunded_customer_sk   int                           ,
    cr_refunded_cdemo_sk      int                           ,
    cr_refunded_hdemo_sk      int                           ,
    cr_refunded_addr_sk       int                           ,
    cr_returning_customer_sk  int                           ,
    cr_returning_cdemo_sk     int                           ,
    cr_returning_hdemo_sk     int                           ,
    cr_returning_addr_sk      int                           ,
    cr_call_center_sk         int                           ,
    cr_catalog_page_sk        int                           ,
    cr_ship_mode_sk           int                           ,
    cr_warehouse_sk           int                           ,
    cr_reason_sk              int                           ,
    cr_order_number           int                           ,
    cr_return_quantity        int                           ,
    cr_return_amount          decimal(7,2)                  ,
    cr_return_tax             decimal(7,2)                  ,
    cr_return_amt_inc_tax     decimal(7,2)                  ,
    cr_fee                    decimal(7,2)                  ,
    cr_return_ship_cost       decimal(7,2)                  ,
    cr_refunded_cash          decimal(7,2)                  ,
    cr_reversed_charge        decimal(7,2)                  ,
    cr_store_credit           decimal(7,2)                  ,
    cr_net_loss               decimal(7,2)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "CATALOG_RETURNS",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@catalog_returns
POSTHOOK: query: CREATE EXTERNAL TABLE catalog_returns
(
    cr_returned_date_sk       int                           ,
    cr_returned_time_sk       int                           ,
    cr_item_sk                int                           ,
    cr_refunded_customer_sk   int                           ,
    cr_refunded_cdemo_sk      int                           ,
    cr_refunded_hdemo_sk      int                           ,
    cr_refunded_addr_sk       int                           ,
    cr_returning_customer_sk  int                           ,
    cr_returning_cdemo_sk     int                           ,
    cr_returning_hdemo_sk     int                           ,
    cr_returning_addr_sk      int                           ,
    cr_call_center_sk         int                           ,
    cr_catalog_page_sk        int                           ,
    cr_ship_mode_sk           int                           ,
    cr_warehouse_sk           int                           ,
    cr_reason_sk              int                           ,
    cr_order_number           int                           ,
    cr_return_quantity        int                           ,
    cr_return_amount          decimal(7,2)                  ,
    cr_return_tax             decimal(7,2)                  ,
    cr_return_amt_inc_tax     decimal(7,2)                  ,
    cr_fee                    decimal(7,2)                  ,
    cr_return_ship_cost       decimal(7,2)                  ,
    cr_refunded_cash          decimal(7,2)                  ,
    cr_reversed_charge        decimal(7,2)                  ,
    cr_store_credit           decimal(7,2)                  ,
    cr_net_loss               decimal(7,2)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "CATALOG_RETURNS",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@catalog_returns
PREHOOK: query: CREATE EXTERNAL TABLE store_sales
(
    ss_sold_date_sk           int                           ,
    ss_sold_time_sk           int                           ,
    ss_item_sk                int                           ,
    ss_customer_sk            int                           ,
    ss_cdemo_sk               int                           ,
    ss_hdemo_sk               int                           ,
    ss_addr_sk                int                           ,
    ss_store_sk               int                           ,
    ss_promo_sk               int                           ,
    ss_ticket_number          int                           ,
    ss_quantity               int                           ,
    ss_wholesale_cost         decimal(7,2)                  ,
    ss_list_price             decimal(7,2)                  ,
    ss_sales_price            decimal(7,2)                  ,
    ss_ext_discount_amt       decimal(7,2)                  ,
    ss_ext_sales_price        decimal(7,2)                  ,
    ss_ext_wholesale_cost     decimal(7,2)                  ,
    ss_ext_list_price         decimal(7,2)                  ,
    ss_ext_tax                decimal(7,2)                  ,
    ss_coupon_amt             decimal(7,2)                  ,
    ss_net_paid               decimal(7,2)                  ,
    ss_net_paid_inc_tax       decimal(7,2)                  ,
    ss_net_profit             decimal(7,2)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "STORE_SALES",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@store_sales
POSTHOOK: query: CREATE EXTERNAL TABLE store_sales
(
    ss_sold_date_sk           int                           ,
    ss_sold_time_sk           int                           ,
    ss_item_sk                int                           ,
    ss_customer_sk            int                           ,
    ss_cdemo_sk               int                           ,
    ss_hdemo_sk               int                           ,
    ss_addr_sk                int                           ,
    ss_store_sk               int                           ,
    ss_promo_sk               int                           ,
    ss_ticket_number          int                           ,
    ss_quantity               int                           ,
    ss_wholesale_cost         decimal(7,2)                  ,
    ss_list_price             decimal(7,2)                  ,
    ss_sales_price            decimal(7,2)                  ,
    ss_ext_discount_amt       decimal(7,2)                  ,
    ss_ext_sales_price        decimal(7,2)                  ,
    ss_ext_wholesale_cost     decimal(7,2)                  ,
    ss_ext_list_price         decimal(7,2)                  ,
    ss_ext_tax                decimal(7,2)                  ,
    ss_coupon_amt             decimal(7,2)                  ,
    ss_net_paid               decimal(7,2)                  ,
    ss_net_paid_inc_tax       decimal(7,2)                  ,
    ss_net_profit             decimal(7,2)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "STORE_SALES",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@store_sales
PREHOOK: query: CREATE EXTERNAL TABLE store_returns
(
    sr_returned_date_sk       int                           ,
    sr_return_time_sk         int                           ,
    sr_item_sk                int                           ,
    sr_customer_sk            int                           ,
    sr_cdemo_sk               int                           ,
    sr_hdemo_sk               int                           ,
    sr_addr_sk                int                           ,
    sr_store_sk               int                           ,
    sr_reason_sk              int                           ,
    sr_ticket_number          int                           ,
    sr_return_quantity        int                           ,
    sr_return_amt             decimal(7,2)                  ,
    sr_return_tax             decimal(7,2)                  ,
    sr_return_amt_inc_tax     decimal(7,2)                  ,
    sr_fee                    decimal(7,2)                  ,
    sr_return_ship_cost       decimal(7,2)                  ,
    sr_refunded_cash          decimal(7,2)                  ,
    sr_reversed_charge        decimal(7,2)                  ,
    sr_store_credit           decimal(7,2)                  ,
    sr_net_loss               decimal(7,2)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "STORE_RETURNS",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@store_returns
POSTHOOK: query: CREATE EXTERNAL TABLE store_returns
(
    sr_returned_date_sk       int                           ,
    sr_return_time_sk         int                           ,
    sr_item_sk                int                           ,
    sr_customer_sk            int                           ,
    sr_cdemo_sk               int                           ,
    sr_hdemo_sk               int                           ,
    sr_addr_sk                int                           ,
    sr_store_sk               int                           ,
    sr_reason_sk              int                           ,
    sr_ticket_number          int                           ,
    sr_return_quantity        int                           ,
    sr_return_amt             decimal(7,2)                  ,
    sr_return_tax             decimal(7,2)                  ,
    sr_return_amt_inc_tax     decimal(7,2)                  ,
    sr_fee                    decimal(7,2)                  ,
    sr_return_ship_cost       decimal(7,2)                  ,
    sr_refunded_cash          decimal(7,2)                  ,
    sr_reversed_charge        decimal(7,2)                  ,
    sr_store_credit           decimal(7,2)                  ,
    sr_net_loss               decimal(7,2)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "STORE_RETURNS",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@store_returns
PREHOOK: query: CREATE EXTERNAL TABLE web_sales
(
    ws_sold_date_sk           int                           ,
    ws_sold_time_sk           int                           ,
    ws_ship_date_sk           int                           ,
    ws_item_sk                int                           ,
    ws_bill_customer_sk       int                           ,
    ws_bill_cdemo_sk          int                           ,
    ws_bill_hdemo_sk          int                           ,
    ws_bill_addr_sk           int                           ,
    ws_ship_customer_sk       int                           ,
    ws_ship_cdemo_sk          int                           ,
    ws_ship_hdemo_sk          int                           ,
    ws_ship_addr_sk           int                           ,
    ws_web_page_sk            int                           ,
    ws_web_site_sk            int                           ,
    ws_ship_mode_sk           int                           ,
    ws_warehouse_sk           int                           ,
    ws_promo_sk               int                           ,
    ws_order_number           int                           ,
    ws_quantity               int                           ,
    ws_wholesale_cost         decimal(7,2)                  ,
    ws_list_price             decimal(7,2)                  ,
    ws_sales_price            decimal(7,2)                  ,
    ws_ext_discount_amt       decimal(7,2)                  ,
    ws_ext_sales_price        decimal(7,2)                  ,
    ws_ext_wholesale_cost     decimal(7,2)                  ,
    ws_ext_list_price         decimal(7,2)                  ,
    ws_ext_tax                decimal(7,2)                  ,
    ws_coupon_amt             decimal(7,2)                  ,
    ws_ext_ship_cost          decimal(7,2)                  ,
    ws_net_paid               decimal(7,2)                  ,
    ws_net_paid_inc_tax       decimal(7,2)                  ,
    ws_net_paid_inc_ship      decimal(7,2)                  ,
    ws_net_paid_inc_ship_tax  decimal(7,2)                  ,
    ws_net_profit             decimal(7,2)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "WEB_SALES",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@web_sales
POSTHOOK: query: CREATE EXTERNAL TABLE web_sales
(
    ws_sold_date_sk           int                           ,
    ws_sold_time_sk           int                           ,
    ws_ship_date_sk           int                           ,
    ws_item_sk                int                           ,
    ws_bill_customer_sk       int                           ,
    ws_bill_cdemo_sk          int                           ,
    ws_bill_hdemo_sk          int                           ,
    ws_bill_addr_sk           int                           ,
    ws_ship_customer_sk       int                           ,
    ws_ship_cdemo_sk          int                           ,
    ws_ship_hdemo_sk          int                           ,
    ws_ship_addr_sk           int                           ,
    ws_web_page_sk            int                           ,
    ws_web_site_sk            int                           ,
    ws_ship_mode_sk           int                           ,
    ws_warehouse_sk           int                           ,
    ws_promo_sk               int                           ,
    ws_order_number           int                           ,
    ws_quantity               int                           ,
    ws_wholesale_cost         decimal(7,2)                  ,
    ws_list_price             decimal(7,2)                  ,
    ws_sales_price            decimal(7,2)                  ,
    ws_ext_discount_amt       decimal(7,2)                  ,
    ws_ext_sales_price        decimal(7,2)                  ,
    ws_ext_wholesale_cost     decimal(7,2)                  ,
    ws_ext_list_price         decimal(7,2)                  ,
    ws_ext_tax                decimal(7,2)                  ,
    ws_coupon_amt             decimal(7,2)                  ,
    ws_ext_ship_cost          decimal(7,2)                  ,
    ws_net_paid               decimal(7,2)                  ,
    ws_net_paid_inc_tax       decimal(7,2)                  ,
    ws_net_paid_inc_ship      decimal(7,2)                  ,
    ws_net_paid_inc_ship_tax  decimal(7,2)                  ,
    ws_net_profit             decimal(7,2)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "WEB_SALES",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@web_sales
PREHOOK: query: CREATE EXTERNAL TABLE web_returns
(
    wr_returned_date_sk       int                           ,
    wr_returned_time_sk       int                           ,
    wr_item_sk                int                           ,
    wr_refunded_customer_sk   int                           ,
    wr_refunded_cdemo_sk      int                           ,
    wr_refunded_hdemo_sk      int                           ,
    wr_refunded_addr_sk       int                           ,
    wr_returning_customer_sk  int                           ,
    wr_returning_cdemo_sk     int                           ,
    wr_returning_hdemo_sk     int                           ,
    wr_returning_addr_sk      int                           ,
    wr_web_page_sk            int                           ,
    wr_reason_sk              int                           ,
    wr_order_number           int                           ,
    wr_return_quantity        int                           ,
    wr_return_amt             decimal(7,2)                  ,
    wr_return_tax             decimal(7,2)                  ,
    wr_return_amt_inc_tax     decimal(7,2)                  ,
    wr_fee                    decimal(7,2)                  ,
    wr_return_ship_cost       decimal(7,2)                  ,
    wr_refunded_cash          decimal(7,2)                  ,
    wr_reversed_charge        decimal(7,2)                  ,
    wr_account_credit         decimal(7,2)                  ,
    wr_net_loss               decimal(7,2)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "WEB_RETURNS",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@web_returns
POSTHOOK: query: CREATE EXTERNAL TABLE web_returns
(
    wr_returned_date_sk       int                           ,
    wr_returned_time_sk       int                           ,
    wr_item_sk                int                           ,
    wr_refunded_customer_sk   int                           ,
    wr_refunded_cdemo_sk      int                           ,
    wr_refunded_hdemo_sk      int                           ,
    wr_refunded_addr_sk       int                           ,
    wr_returning_customer_sk  int                           ,
    wr_returning_cdemo_sk     int                           ,
    wr_returning_hdemo_sk     int                           ,
    wr_returning_addr_sk      int                           ,
    wr_web_page_sk            int                           ,
    wr_reason_sk              int                           ,
    wr_order_number           int                           ,
    wr_return_quantity        int                           ,
    wr_return_amt             decimal(7,2)                  ,
    wr_return_tax             decimal(7,2)                  ,
    wr_return_amt_inc_tax     decimal(7,2)                  ,
    wr_fee                    decimal(7,2)                  ,
    wr_return_ship_cost       decimal(7,2)                  ,
    wr_refunded_cash          decimal(7,2)                  ,
    wr_reversed_charge        decimal(7,2)                  ,
    wr_account_credit         decimal(7,2)                  ,
    wr_net_loss               decimal(7,2)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "WEB_RETURNS",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@web_returns
PREHOOK: query: CREATE EXTERNAL TABLE customer
(
    c_customer_sk             int                           ,
    c_customer_id             char(16)                      ,
    c_current_cdemo_sk        int                           ,
    c_current_hdemo_sk        int                           ,
    c_current_addr_sk         int                           ,
    c_first_shipto_date_sk    int                           ,
    c_first_sales_date_sk     int                           ,
    c_salutation              char(10)                      ,
    c_first_name              char(20)                      ,
    c_last_name               char(30)                      ,
    c_preferred_cust_flag     char(1)                       ,
    c_birth_day               int                           ,
    c_birth_month             int                           ,
    c_birth_year              int                           ,
    c_birth_country           varchar(20)                   ,
    c_login                   char(13)                      ,
    c_email_address           char(50)                      ,
    c_last_review_date        char(10)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "CUSTOMER",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@customer
POSTHOOK: query: CREATE EXTERNAL TABLE customer
(
    c_customer_sk             int                           ,
    c_customer_id             char(16)                      ,
    c_current_cdemo_sk        int                           ,
    c_current_hdemo_sk        int                           ,
    c_current_addr_sk         int                           ,
    c_first_shipto_date_sk    int                           ,
    c_first_sales_date_sk     int                           ,
    c_salutation              char(10)                      ,
    c_first_name              char(20)                      ,
    c_last_name               char(30)                      ,
    c_preferred_cust_flag     char(1)                       ,
    c_birth_day               int                           ,
    c_birth_month             int                           ,
    c_birth_year              int                           ,
    c_birth_country           varchar(20)                   ,
    c_login                   char(13)                      ,
    c_email_address           char(50)                      ,
    c_last_review_date        char(10)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "CUSTOMER",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@customer
PREHOOK: query: CREATE EXTERNAL TABLE customer_address
(
    ca_address_sk             int                           ,
    ca_address_id             char(16)                      ,
    ca_street_number          char(10)                      ,
    ca_street_name            varchar(60)                   ,
    ca_street_type            char(15)                      ,
    ca_suite_number           char(10)                      ,
    ca_city                   varchar(60)                   ,
    ca_county                 varchar(30)                   ,
    ca_state                  char(2)                       ,
    ca_zip                    char(10)                      ,
    ca_country                varchar(20)                   ,
    ca_gmt_offset             decimal(5,2)                  ,
    ca_location_type          char(20)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "CUSTOMER_ADDRESS",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@customer_address
POSTHOOK: query: CREATE EXTERNAL TABLE customer_address
(
    ca_address_sk             int                           ,
    ca_address_id             char(16)                      ,
    ca_street_number          char(10)                      ,
    ca_street_name            varchar(60)                   ,
    ca_street_type            char(15)                      ,
    ca_suite_number           char(10)                      ,
    ca_city                   varchar(60)                   ,
    ca_county                 varchar(30)                   ,
    ca_state                  char(2)                       ,
    ca_zip                    char(10)                      ,
    ca_country                varchar(20)                   ,
    ca_gmt_offset             decimal(5,2)                  ,
    ca_location_type          char(20)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "CUSTOMER_ADDRESS",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@customer_address
PREHOOK: query: CREATE EXTERNAL TABLE customer_demographics
(
    cd_demo_sk                int                           ,
    cd_gender                 char(1)                       ,
    cd_marital_status         char(1)                       ,
    cd_education_status       char(20)                      ,
    cd_purchase_estimate      int                           ,
    cd_credit_rating          char(10)                      ,
    cd_dep_count              int                           ,
    cd_dep_employed_count     int                           ,
    cd_dep_college_count      int
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "CUSTOMER_DEMOGRAPHICS",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@customer_demographics
POSTHOOK: query: CREATE EXTERNAL TABLE customer_demographics
(
    cd_demo_sk                int                           ,
    cd_gender                 char(1)                       ,
    cd_marital_status         char(1)                       ,
    cd_education_status       char(20)                      ,
    cd_purchase_estimate      int                           ,
    cd_credit_rating          char(10)                      ,
    cd_dep_count              int                           ,
    cd_dep_employed_count     int                           ,
    cd_dep_college_count      int
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "CUSTOMER_DEMOGRAPHICS",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@customer_demographics
PREHOOK: query: CREATE EXTERNAL TABLE inventory
(
    inv_date_sk               int                           ,
    inv_item_sk               int                           ,
    inv_warehouse_sk          int                           ,
    inv_quantity_on_hand      int
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "INVENTORY",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@inventory
POSTHOOK: query: CREATE EXTERNAL TABLE inventory
(
    inv_date_sk               int                           ,
    inv_item_sk               int                           ,
    inv_warehouse_sk          int                           ,
    inv_quantity_on_hand      int
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "INVENTORY",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@inventory
PREHOOK: query: CREATE EXTERNAL TABLE item
(
    i_item_sk                 int                           ,
    i_item_id                 char(16)                      ,
    i_rec_start_date          date                          ,
    i_rec_end_date            date                          ,
    i_item_desc               varchar(200)                  ,
    i_current_price           decimal(7,2)                  ,
    i_wholesale_cost          decimal(7,2)                  ,
    i_brand_id                int                           ,
    i_brand                   char(50)                      ,
    i_class_id                int                           ,
    i_class                   char(50)                      ,
    i_category_id             int                           ,
    i_category                char(50)                      ,
    i_manufact_id             int                           ,
    i_manufact                char(50)                      ,
    i_size                    char(20)                      ,
    i_formulation             char(20)                      ,
    i_color                   char(20)                      ,
    i_units                   char(10)                      ,
    i_container               char(10)                      ,
    i_manager_id              int                           ,
    i_product_name            char(50)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "ITEM",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@item
POSTHOOK: query: CREATE EXTERNAL TABLE item
(
    i_item_sk                 int                           ,
    i_item_id                 char(16)                      ,
    i_rec_start_date          date                          ,
    i_rec_end_date            date                          ,
    i_item_desc               varchar(200)                  ,
    i_current_price           decimal(7,2)                  ,
    i_wholesale_cost          decimal(7,2)                  ,
    i_brand_id                int                           ,
    i_brand                   char(50)                      ,
    i_class_id                int                           ,
    i_class                   char(50)                      ,
    i_category_id             int                           ,
    i_category                char(50)                      ,
    i_manufact_id             int                           ,
    i_manufact                char(50)                      ,
    i_size                    char(20)                      ,
    i_formulation             char(20)                      ,
    i_color                   char(20)                      ,
    i_units                   char(10)                      ,
    i_container               char(10)                      ,
    i_manager_id              int                           ,
    i_product_name            char(50)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "ITEM",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@item
PREHOOK: query: CREATE EXTERNAL TABLE warehouse
(
    w_warehouse_sk            int                           ,
    w_warehouse_id            char(16)                      ,
    w_warehouse_name          varchar(20)                   ,
    w_warehouse_sq_ft         int                           ,
    w_street_number           char(10)                      ,
    w_street_name             varchar(60)                   ,
    w_street_type             char(15)                      ,
    w_suite_number            char(10)                      ,
    w_city                    varchar(60)                   ,
    w_county                  varchar(30)                   ,
    w_state                   char(2)                       ,
    w_zip                     char(10)                      ,
    w_country                 varchar(20)                   ,
    w_gmt_offset              decimal(5,2)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "WAREHOUSE",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@warehouse
POSTHOOK: query: CREATE EXTERNAL TABLE warehouse
(
    w_warehouse_sk            int                           ,
    w_warehouse_id            char(16)                      ,
    w_warehouse_name          varchar(20)                   ,
    w_warehouse_sq_ft         int                           ,
    w_street_number           char(10)                      ,
    w_street_name             varchar(60)                   ,
    w_street_type             char(15)                      ,
    w_suite_number            char(10)                      ,
    w_city                    varchar(60)                   ,
    w_county                  varchar(30)                   ,
    w_state                   char(2)                       ,
    w_zip                     char(10)                      ,
    w_country                 varchar(20)                   ,
    w_gmt_offset              decimal(5,2)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "WAREHOUSE",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@warehouse
PREHOOK: query: CREATE EXTERNAL TABLE date_dim
(
    d_date_sk                 int                           ,
    d_date_id                 char(16)                      ,
    d_date                    date                          ,
    d_month_seq               int                           ,
    d_week_seq                int                           ,
    d_quarter_seq             int                           ,
    d_year                    int                           ,
    d_dow                     int                           ,
    d_moy                     int                           ,
    d_dom                     int                           ,
    d_qoy                     int                           ,
    d_fy_year                 int                           ,
    d_fy_quarter_seq          int                           ,
    d_fy_week_seq             int                           ,
    d_day_name                char(9)                       ,
    d_quarter_name            char(6)                       ,
    d_holiday                 char(1)                       ,
    d_weekend                 char(1)                       ,
    d_following_holiday       char(1)                       ,
    d_first_dom               int                           ,
    d_last_dom                int                           ,
    d_same_day_ly             int                           ,
    d_same_day_lq             int                           ,
    d_current_day             char(1)                       ,
    d_current_week            char(1)                       ,
    d_current_month           char(1)                       ,
    d_current_quarter         char(1)                       ,
    d_current_year            char(1)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "DATE_DIM",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@date_dim
POSTHOOK: query: CREATE EXTERNAL TABLE date_dim
(
    d_date_sk                 int                           ,
    d_date_id                 char(16)                      ,
    d_date                    date                          ,
    d_month_seq               int                           ,
    d_week_seq                int                           ,
    d_quarter_seq             int                           ,
    d_year                    int                           ,
    d_dow                     int                           ,
    d_moy                     int                           ,
    d_dom                     int                           ,
    d_qoy                     int                           ,
    d_fy_year                 int                           ,
    d_fy_quarter_seq          int                           ,
    d_fy_week_seq             int                           ,
    d_day_name                char(9)                       ,
    d_quarter_name            char(6)                       ,
    d_holiday                 char(1)                       ,
    d_weekend                 char(1)                       ,
    d_following_holiday       char(1)                       ,
    d_first_dom               int                           ,
    d_last_dom                int                           ,
    d_same_day_ly             int                           ,
    d_same_day_lq             int                           ,
    d_current_day             char(1)                       ,
    d_current_week            char(1)                       ,
    d_current_month           char(1)                       ,
    d_current_quarter         char(1)                       ,
    d_current_year            char(1)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "DATE_DIM",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@date_dim
PREHOOK: query: CREATE EXTERNAL TABLE store
(
    s_store_sk                int                           ,
    s_store_id                char(16)                      ,
    s_rec_start_date          date                          ,
    s_rec_end_date            date                          ,
    s_closed_date_sk          int                           ,
    s_store_name              varchar(50)                   ,
    s_number_employees        int                           ,
    s_floor_space             int                           ,
    s_hours                   char(20)                      ,
    s_manager                 varchar(40)                   ,
    s_market_id               int                           ,
    s_geography_class         varchar(100)                  ,
    s_market_desc             varchar(100)                  ,
    s_market_manager          varchar(40)                   ,
    s_division_id             int                           ,
    s_division_name           varchar(50)                   ,
    s_company_id              int                           ,
    s_company_name            varchar(50)                   ,
    s_street_number           varchar(10)                   ,
    s_street_name             varchar(60)                   ,
    s_street_type             char(15)                      ,
    s_suite_number            char(10)                      ,
    s_city                    varchar(60)                   ,
    s_county                  varchar(30)                   ,
    s_state                   char(2)                       ,
    s_zip                     char(10)                      ,
    s_country                 varchar(20)                   ,
    s_gmt_offset              decimal(5,2)                  ,
    s_tax_precentage          decimal(5,2)                  
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "STORE",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@store
POSTHOOK: query: CREATE EXTERNAL TABLE store
(
    s_store_sk                int                           ,
    s_store_id                char(16)                      ,
    s_rec_start_date          date                          ,
    s_rec_end_date            date                          ,
    s_closed_date_sk          int                           ,
    s_store_name              varchar(50)                   ,
    s_number_employees        int                           ,
    s_floor_space             int                           ,
    s_hours                   char(20)                      ,
    s_manager                 varchar(40)                   ,
    s_market_id               int                           ,
    s_geography_class         varchar(100)                  ,
    s_market_desc             varchar(100)                  ,
    s_market_manager          varchar(40)                   ,
    s_division_id             int                           ,
    s_division_name           varchar(50)                   ,
    s_company_id              int                           ,
    s_company_name            varchar(50)                   ,
    s_street_number           varchar(10)                   ,
    s_street_name             varchar(60)                   ,
    s_street_type             char(15)                      ,
    s_suite_number            char(10)                      ,
    s_city                    varchar(60)                   ,
    s_county                  varchar(30)                   ,
    s_state                   char(2)                       ,
    s_zip                     char(10)                      ,
    s_country                 varchar(20)                   ,
    s_gmt_offset              decimal(5,2)                  ,
    s_tax_precentage          decimal(5,2)                  
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "STORE",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@store
PREHOOK: query: CREATE EXTERNAL TABLE household_demographics
(
    hd_demo_sk                int                           ,
    hd_income_band_sk         int                           ,
    hd_buy_potential          char(15)                      ,
    hd_dep_count              int                           ,
    hd_vehicle_count          int                           
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "HOUSEHOLD_DEMOGRAPHICS",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@household_demographics
POSTHOOK: query: CREATE EXTERNAL TABLE household_demographics
(
    hd_demo_sk                int                           ,
    hd_income_band_sk         int                           ,
    hd_buy_potential          char(15)                      ,
    hd_dep_count              int                           ,
    hd_vehicle_count          int                           
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "HOUSEHOLD_DEMOGRAPHICS",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@household_demographics
PREHOOK: query: CREATE EXTERNAL TABLE time_dim
(
    t_time_sk                 int                           ,
    t_time_id                 char(16)                      ,
    t_time                    int                           ,
    t_hour                    int                           ,
    t_minute                  int                           ,
    t_second                  int                           ,
    t_am_pm                   char(2)                       ,
    t_shift                   char(20)                      ,
    t_sub_shift               char(20)                      ,
    t_meal_time               char(20)                      
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "TIME_DIM",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@time_dim
POSTHOOK: query: CREATE EXTERNAL TABLE time_dim
(
    t_time_sk                 int                           ,
    t_time_id                 char(16)                      ,
    t_time                    int                           ,
    t_hour                    int                           ,
    t_minute                  int                           ,
    t_second                  int                           ,
    t_am_pm                   char(2)                       ,
    t_shift                   char(20)                      ,
    t_sub_shift               char(20)                      ,
    t_meal_time               char(20)                      
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "TIME_DIM",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@time_dim
PREHOOK: query: CREATE EXTERNAL TABLE reason
(
    r_reason_sk               int                           ,
    r_reason_id               char(16)                      ,
    r_reason_desc             char(100)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "REASON",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@reason
POSTHOOK: query: CREATE EXTERNAL TABLE reason
(
    r_reason_sk               int                           ,
    r_reason_id               char(16)                      ,
    r_reason_desc             char(100)
)
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.iapi.jdbc.AutoloadedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "user1",
                "hive.sql.dbcp.password" = "passwd1",
                "hive.sql.table" = "REASON",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@reason
PREHOOK: query: explain
select inv1.w_warehouse_sk, inv1.i_item_sk, inv1.d_moy, inv1.mean, inv1.cov,
       inv2.w_warehouse_sk, inv2.i_item_sk, inv2.d_moy, inv2.mean, inv2.cov
from (select w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy,
             stdev, mean, case mean when 0.0
                                    then null else stdev/mean end cov
      from (select w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy,
                   sum(inv_quantity_on_hand) as stdev,
                   avg(inv_quantity_on_hand) as mean
            from inventory
            join item on inventory.inv_item_sk = item.i_item_sk
            join warehouse on inventory.inv_warehouse_sk = warehouse.w_warehouse_sk
            join date_dim on inventory.inv_date_sk = date_dim.d_date_sk
            where d_year = 2001
            group by w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy) foo
      where case mean when 0.0
                      then 0.0 else stdev/mean end > 1) inv1
join (select w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy,
             stdev, mean, case mean when 0.0
                                    then null else stdev/mean end cov
      from (select w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy,
                   sum(inv_quantity_on_hand) as stdev,
                   avg(inv_quantity_on_hand) as mean
            from inventory
            join item on inventory.inv_item_sk = item.i_item_sk
            join warehouse on inventory.inv_warehouse_sk = warehouse.w_warehouse_sk
            join date_dim on inventory.inv_date_sk = date_dim.d_date_sk
            where d_year = 2001
            group by w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy) foo
      where case mean when 0.0
                      then 0.0 else stdev/mean end > 1) inv2
  on inv1.i_item_sk = inv2.i_item_sk
     and inv1.w_warehouse_sk = inv2.w_warehouse_sk
where inv1.d_moy = 1 and inv2.d_moy = 1+1
order by inv1.w_warehouse_sk, inv1.i_item_sk, inv1.d_moy, inv1.mean, inv1.cov,
         inv2.d_moy, inv2.mean, inv2.cov
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@inventory
PREHOOK: Input: default@item
PREHOOK: Input: default@warehouse
#### A masked pattern was here ####
POSTHOOK: query: explain
select inv1.w_warehouse_sk, inv1.i_item_sk, inv1.d_moy, inv1.mean, inv1.cov,
       inv2.w_warehouse_sk, inv2.i_item_sk, inv2.d_moy, inv2.mean, inv2.cov
from (select w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy,
             stdev, mean, case mean when 0.0
                                    then null else stdev/mean end cov
      from (select w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy,
                   sum(inv_quantity_on_hand) as stdev,
                   avg(inv_quantity_on_hand) as mean
            from inventory
            join item on inventory.inv_item_sk = item.i_item_sk
            join warehouse on inventory.inv_warehouse_sk = warehouse.w_warehouse_sk
            join date_dim on inventory.inv_date_sk = date_dim.d_date_sk
            where d_year = 2001
            group by w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy) foo
      where case mean when 0.0
                      then 0.0 else stdev/mean end > 1) inv1
join (select w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy,
             stdev, mean, case mean when 0.0
                                    then null else stdev/mean end cov
      from (select w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy,
                   sum(inv_quantity_on_hand) as stdev,
                   avg(inv_quantity_on_hand) as mean
            from inventory
            join item on inventory.inv_item_sk = item.i_item_sk
            join warehouse on inventory.inv_warehouse_sk = warehouse.w_warehouse_sk
            join date_dim on inventory.inv_date_sk = date_dim.d_date_sk
            where d_year = 2001
            group by w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy) foo
      where case mean when 0.0
                      then 0.0 else stdev/mean end > 1) inv2
  on inv1.i_item_sk = inv2.i_item_sk
     and inv1.w_warehouse_sk = inv2.w_warehouse_sk
where inv1.d_moy = 1 and inv2.d_moy = 1+1
order by inv1.w_warehouse_sk, inv1.i_item_sk, inv1.d_moy, inv1.mean, inv1.cov,
         inv2.d_moy, inv2.mean, inv2.cov
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@inventory
POSTHOOK: Input: default@item
POSTHOOK: Input: default@warehouse
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: inventory
          properties:
            hive.sql.query SELECT "t29"."w_warehouse_sk", "t29"."i_item_sk", CAST(1 AS INTEGER) AS "d_moy", "t29"."mean", "t29"."cov", "t29"."w_warehouse_sk0" AS "w_warehouse_sk1", "t29"."i_item_sk0" AS "i_item_sk1", CAST(2 AS INTEGER) AS "d_moy1", "t29"."mean0" AS "mean1", "t29"."cov0" AS "cov1"
FROM (SELECT "t13"."w_warehouse_sk", "t13"."i_item_sk", "t13"."mean", "t13"."cov", "t28"."w_warehouse_sk" AS "w_warehouse_sk0", "t28"."i_item_sk" AS "i_item_sk0", "t28"."mean" AS "mean0", "t28"."cov" AS "cov0"
FROM (SELECT "w_warehouse_sk", "i_item_sk", CAST("$f3" AS DOUBLE) / "$f4" AS "mean", CASE WHEN CAST("$f3" AS DOUBLE) / "$f4" = 0 THEN NULL ELSE CAST("$f3" AS DOUBLE) / (CAST("$f3" AS DOUBLE) / "$f4") END AS "cov"
FROM (SELECT "t9"."w_warehouse_name", "t9"."w_warehouse_sk", "t3"."i_item_sk", SUM("t0"."inv_quantity_on_hand") AS "$f3", COUNT("t0"."inv_quantity_on_hand") AS "$f4"
FROM (SELECT "inv_date_sk", "inv_item_sk", "inv_warehouse_sk", "inv_quantity_on_hand"
FROM "INVENTORY"
WHERE "inv_item_sk" IS NOT NULL AND "inv_warehouse_sk" IS NOT NULL AND "inv_date_sk" IS NOT NULL) AS "t0"
INNER JOIN (SELECT "i_item_sk"
FROM (SELECT "i_item_sk"
FROM "ITEM") AS "t1"
WHERE "i_item_sk" IS NOT NULL) AS "t3" ON "t0"."inv_item_sk" = "t3"."i_item_sk"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t4"
WHERE "d_year" = 2001 AND "d_moy" = 1 AND "d_date_sk" IS NOT NULL) AS "t6" ON "t0"."inv_date_sk" = "t6"."d_date_sk"
INNER JOIN (SELECT "w_warehouse_sk", "w_warehouse_name"
FROM (SELECT "w_warehouse_sk", "w_warehouse_name"
FROM "WAREHOUSE") AS "t7"
WHERE "w_warehouse_sk" IS NOT NULL) AS "t9" ON "t0"."inv_warehouse_sk" = "t9"."w_warehouse_sk"
GROUP BY "t3"."i_item_sk", "t9"."w_warehouse_sk", "t9"."w_warehouse_name") AS "t11"
WHERE CASE WHEN CAST("t11"."$f3" AS DOUBLE) / "t11"."$f4" = 0 THEN FALSE ELSE CAST("t11"."$f3" AS DOUBLE) / (CAST("t11"."$f3" AS DOUBLE) / "t11"."$f4") > 1 END) AS "t13"
INNER JOIN (SELECT "w_warehouse_sk", "i_item_sk", CAST("$f3" AS DOUBLE) / "$f4" AS "mean", CASE WHEN CAST("$f3" AS DOUBLE) / "$f4" = 0 THEN NULL ELSE CAST("$f3" AS DOUBLE) / (CAST("$f3" AS DOUBLE) / "$f4") END AS "cov"
FROM (SELECT "t24"."w_warehouse_name", "t24"."w_warehouse_sk", "t18"."i_item_sk", SUM("t15"."inv_quantity_on_hand") AS "$f3", COUNT("t15"."inv_quantity_on_hand") AS "$f4"
FROM (SELECT "inv_date_sk", "inv_item_sk", "inv_warehouse_sk", "inv_quantity_on_hand"
FROM "INVENTORY"
WHERE "inv_item_sk" IS NOT NULL AND "inv_warehouse_sk" IS NOT NULL AND "inv_date_sk" IS NOT NULL) AS "t15"
INNER JOIN (SELECT "i_item_sk"
FROM (SELECT "i_item_sk"
FROM "ITEM") AS "t16"
WHERE "i_item_sk" IS NOT NULL) AS "t18" ON "t15"."inv_item_sk" = "t18"."i_item_sk"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t19"
WHERE "d_year" = 2001 AND "d_moy" = 2 AND "d_date_sk" IS NOT NULL) AS "t21" ON "t15"."inv_date_sk" = "t21"."d_date_sk"
INNER JOIN (SELECT "w_warehouse_sk", "w_warehouse_name"
FROM (SELECT "w_warehouse_sk", "w_warehouse_name"
FROM "WAREHOUSE") AS "t22"
WHERE "w_warehouse_sk" IS NOT NULL) AS "t24" ON "t15"."inv_warehouse_sk" = "t24"."w_warehouse_sk"
GROUP BY "t18"."i_item_sk", "t24"."w_warehouse_sk", "t24"."w_warehouse_name") AS "t26"
WHERE CASE WHEN CAST("t26"."$f3" AS DOUBLE) / "t26"."$f4" = 0 THEN FALSE ELSE CAST("t26"."$f3" AS DOUBLE) / (CAST("t26"."$f3" AS DOUBLE) / "t26"."$f4") > 1 END) AS "t28" ON "t13"."i_item_sk" = "t28"."i_item_sk" AND "t13"."w_warehouse_sk" = "t28"."w_warehouse_sk"
ORDER BY "t13"."w_warehouse_sk", "t13"."i_item_sk", "t13"."mean", "t13"."cov", "t28"."mean", "t28"."cov") AS "t29"
            hive.sql.query.fieldNames w_warehouse_sk,i_item_sk,d_moy,mean,cov,w_warehouse_sk1,i_item_sk1,d_moy1,mean1,cov1
            hive.sql.query.fieldTypes int,int,int,double,double,int,int,int,double,double
            hive.sql.query.split false
          Select Operator
            expressions: w_warehouse_sk (type: int), i_item_sk (type: int), d_moy (type: int), mean (type: double), cov (type: double), w_warehouse_sk1 (type: int), i_item_sk1 (type: int), d_moy1 (type: int), mean1 (type: double), cov1 (type: double)
            outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
            ListSink

PREHOOK: query: select inv1.w_warehouse_sk, inv1.i_item_sk, inv1.d_moy, inv1.mean, inv1.cov,
       inv2.w_warehouse_sk, inv2.i_item_sk, inv2.d_moy, inv2.mean, inv2.cov
from (select w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy,
             stdev, mean, case mean when 0.0
                                    then null else stdev/mean end cov
      from (select w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy,
                   sum(inv_quantity_on_hand) as stdev,
                   avg(inv_quantity_on_hand) as mean
            from inventory
            join item on inventory.inv_item_sk = item.i_item_sk
            join warehouse on inventory.inv_warehouse_sk = warehouse.w_warehouse_sk
            join date_dim on inventory.inv_date_sk = date_dim.d_date_sk
            where d_year = 2001
            group by w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy) foo
      where case mean when 0.0
                      then 0.0 else stdev/mean end > 1) inv1
join (select w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy,
             stdev, mean, case mean when 0.0
                                    then null else stdev/mean end cov
      from (select w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy,
                   sum(inv_quantity_on_hand) as stdev,
                   avg(inv_quantity_on_hand) as mean
            from inventory
            join item on inventory.inv_item_sk = item.i_item_sk
            join warehouse on inventory.inv_warehouse_sk = warehouse.w_warehouse_sk
            join date_dim on inventory.inv_date_sk = date_dim.d_date_sk
            where d_year = 2001
            group by w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy) foo
      where case mean when 0.0
                      then 0.0 else stdev/mean end > 1) inv2
  on inv1.i_item_sk = inv2.i_item_sk
     and inv1.w_warehouse_sk = inv2.w_warehouse_sk
where inv1.d_moy = 1 and inv2.d_moy = 1+1
order by inv1.w_warehouse_sk, inv1.i_item_sk, inv1.d_moy, inv1.mean, inv1.cov,
         inv2.d_moy, inv2.mean, inv2.cov
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@inventory
PREHOOK: Input: default@item
PREHOOK: Input: default@warehouse
#### A masked pattern was here ####
POSTHOOK: query: select inv1.w_warehouse_sk, inv1.i_item_sk, inv1.d_moy, inv1.mean, inv1.cov,
       inv2.w_warehouse_sk, inv2.i_item_sk, inv2.d_moy, inv2.mean, inv2.cov
from (select w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy,
             stdev, mean, case mean when 0.0
                                    then null else stdev/mean end cov
      from (select w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy,
                   sum(inv_quantity_on_hand) as stdev,
                   avg(inv_quantity_on_hand) as mean
            from inventory
            join item on inventory.inv_item_sk = item.i_item_sk
            join warehouse on inventory.inv_warehouse_sk = warehouse.w_warehouse_sk
            join date_dim on inventory.inv_date_sk = date_dim.d_date_sk
            where d_year = 2001
            group by w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy) foo
      where case mean when 0.0
                      then 0.0 else stdev/mean end > 1) inv1
join (select w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy,
             stdev, mean, case mean when 0.0
                                    then null else stdev/mean end cov
      from (select w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy,
                   sum(inv_quantity_on_hand) as stdev,
                   avg(inv_quantity_on_hand) as mean
            from inventory
            join item on inventory.inv_item_sk = item.i_item_sk
            join warehouse on inventory.inv_warehouse_sk = warehouse.w_warehouse_sk
            join date_dim on inventory.inv_date_sk = date_dim.d_date_sk
            where d_year = 2001
            group by w_warehouse_name, w_warehouse_sk, i_item_sk, d_moy) foo
      where case mean when 0.0
                      then 0.0 else stdev/mean end > 1) inv2
  on inv1.i_item_sk = inv2.i_item_sk
     and inv1.w_warehouse_sk = inv2.w_warehouse_sk
where inv1.d_moy = 1 and inv2.d_moy = 1+1
order by inv1.w_warehouse_sk, inv1.i_item_sk, inv1.d_moy, inv1.mean, inv1.cov,
         inv2.d_moy, inv2.mean, inv2.cov
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@inventory
POSTHOOK: Input: default@item
POSTHOOK: Input: default@warehouse
#### A masked pattern was here ####
PREHOOK: query: explain
SELECT cd_gender, 
       cd_marital_status, 
       cd_education_status, 
       Count(*) cnt1, 
       cd_purchase_estimate, 
       Count(*) cnt2, 
       cd_credit_rating, 
       Count(*) cnt3 
FROM   customer c, 
       customer_address ca, 
       customer_demographics 
WHERE  c.c_current_addr_sk = ca.ca_address_sk 
       AND ca_state IN ( 'CO', 'IL', 'MN' ) 
       AND cd_demo_sk = c.c_current_cdemo_sk 
       AND EXISTS (SELECT * 
                   FROM   store_sales, 
                          date_dim 
                   WHERE  c.c_customer_sk = ss_customer_sk 
                          AND ss_sold_date_sk = d_date_sk 
                          AND d_year = 1999 
                          AND d_moy BETWEEN 1 AND 1 + 2) 
       AND ( NOT EXISTS (SELECT * 
                         FROM   web_sales, 
                                date_dim 
                         WHERE  c.c_customer_sk = ws_bill_customer_sk 
                                AND ws_sold_date_sk = d_date_sk 
                                AND d_year = 1999 
                                AND d_moy BETWEEN 1 AND 1 + 2) 
             AND NOT EXISTS (SELECT * 
                             FROM   catalog_sales, 
                                    date_dim 
                             WHERE  c.c_customer_sk = cs_ship_customer_sk 
                                    AND cs_sold_date_sk = d_date_sk 
                                    AND d_year = 1999 
                                    AND d_moy BETWEEN 1 AND 1 + 2) ) 
GROUP  BY cd_gender, 
          cd_marital_status, 
          cd_education_status, 
          cd_purchase_estimate, 
          cd_credit_rating 
ORDER  BY cd_gender, 
          cd_marital_status, 
          cd_education_status, 
          cd_purchase_estimate, 
          cd_credit_rating 
LIMIT  100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
SELECT cd_gender, 
       cd_marital_status, 
       cd_education_status, 
       Count(*) cnt1, 
       cd_purchase_estimate, 
       Count(*) cnt2, 
       cd_credit_rating, 
       Count(*) cnt3 
FROM   customer c, 
       customer_address ca, 
       customer_demographics 
WHERE  c.c_current_addr_sk = ca.ca_address_sk 
       AND ca_state IN ( 'CO', 'IL', 'MN' ) 
       AND cd_demo_sk = c.c_current_cdemo_sk 
       AND EXISTS (SELECT * 
                   FROM   store_sales, 
                          date_dim 
                   WHERE  c.c_customer_sk = ss_customer_sk 
                          AND ss_sold_date_sk = d_date_sk 
                          AND d_year = 1999 
                          AND d_moy BETWEEN 1 AND 1 + 2) 
       AND ( NOT EXISTS (SELECT * 
                         FROM   web_sales, 
                                date_dim 
                         WHERE  c.c_customer_sk = ws_bill_customer_sk 
                                AND ws_sold_date_sk = d_date_sk 
                                AND d_year = 1999 
                                AND d_moy BETWEEN 1 AND 1 + 2) 
             AND NOT EXISTS (SELECT * 
                             FROM   catalog_sales, 
                                    date_dim 
                             WHERE  c.c_customer_sk = cs_ship_customer_sk 
                                    AND cs_sold_date_sk = d_date_sk 
                                    AND d_year = 1999 
                                    AND d_moy BETWEEN 1 AND 1 + 2) ) 
GROUP  BY cd_gender, 
          cd_marital_status, 
          cd_education_status, 
          cd_purchase_estimate, 
          cd_credit_rating 
ORDER  BY cd_gender, 
          cd_marital_status, 
          cd_education_status, 
          cd_purchase_estimate, 
          cd_credit_rating 
LIMIT  100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
        Reducer 3 <- Map 8 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Map 9 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
        Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
        Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: c
                  properties:
                    hive.sql.query SELECT "t1"."c_customer_sk", "t1"."c_current_cdemo_sk", "t1"."c_current_addr_sk", "t4"."ca_address_sk", "t4"."ca_state", "t7"."cd_demo_sk", "t7"."cd_gender", "t7"."cd_marital_status", "t7"."cd_education_status", "t7"."cd_purchase_estimate", "t7"."cd_credit_rating"
FROM (SELECT "c_customer_sk", "c_current_cdemo_sk", "c_current_addr_sk"
FROM (SELECT "c_customer_sk", "c_current_cdemo_sk", "c_current_addr_sk"
FROM "CUSTOMER") AS "t"
WHERE "c_current_addr_sk" IS NOT NULL AND "c_current_cdemo_sk" IS NOT NULL AND "c_customer_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "ca_address_sk", "ca_state"
FROM (SELECT "ca_address_sk", "ca_state"
FROM "CUSTOMER_ADDRESS") AS "t2"
WHERE "ca_state" IN ('CO', 'IL', 'MN') AND "ca_address_sk" IS NOT NULL) AS "t4" ON "t1"."c_current_addr_sk" = "t4"."ca_address_sk"
INNER JOIN (SELECT "cd_demo_sk", "cd_gender", "cd_marital_status", "cd_education_status", "cd_purchase_estimate", "cd_credit_rating"
FROM (SELECT "cd_demo_sk", "cd_gender", "cd_marital_status", "cd_education_status", "cd_purchase_estimate", "cd_credit_rating"
FROM "CUSTOMER_DEMOGRAPHICS") AS "t5"
WHERE "cd_demo_sk" IS NOT NULL) AS "t7" ON "t1"."c_current_cdemo_sk" = "t7"."cd_demo_sk"
                    hive.sql.query.fieldNames c_customer_sk,c_current_cdemo_sk,c_current_addr_sk,ca_address_sk,ca_state,cd_demo_sk,cd_gender,cd_marital_status,cd_education_status,cd_purchase_estimate,cd_credit_rating
                    hive.sql.query.fieldTypes int,int,int,int,char(2),int,char(1),char(1),char(20),int,char(10)
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 376 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: c_customer_sk (type: int), cd_gender (type: char(1)), cd_marital_status (type: char(1)), cd_education_status (type: char(20)), cd_purchase_estimate (type: int), cd_credit_rating (type: char(10))
                    outputColumnNames: _col0, _col6, _col7, _col8, _col9, _col10
                    Statistics: Num rows: 1 Data size: 376 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 376 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "t1"."ss_customer_sk"
FROM (SELECT "ss_sold_date_sk", "ss_customer_sk"
FROM (SELECT "ss_sold_date_sk", "ss_customer_sk"
FROM "STORE_SALES") AS "t"
WHERE "ss_customer_sk" IS NOT NULL AND "ss_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t2"
WHERE "d_year" = 1999 AND "d_moy" BETWEEN 1 AND 3 AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."ss_sold_date_sk" = "t4"."d_date_sk"
                    hive.sql.query.fieldNames ss_customer_sk
                    hive.sql.query.fieldTypes int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ss_customer_sk (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      keys: _col0 (type: int)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 8 
            Map Operator Tree:
                TableScan
                  alias: web_sales
                  properties:
                    hive.sql.query SELECT TRUE AS "literalTrue", "t1"."ws_bill_customer_sk"
FROM (SELECT "ws_sold_date_sk", "ws_bill_customer_sk"
FROM (SELECT "ws_sold_date_sk", "ws_bill_customer_sk"
FROM "WEB_SALES") AS "t"
WHERE "ws_bill_customer_sk" IS NOT NULL AND "ws_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t2"
WHERE "d_year" = 1999 AND "d_moy" BETWEEN 1 AND 3 AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."ws_sold_date_sk" = "t4"."d_date_sk"
                    hive.sql.query.fieldNames literalTrue,ws_bill_customer_sk
                    hive.sql.query.fieldTypes boolean,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: literaltrue (type: boolean), ws_bill_customer_sk (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 9 
            Map Operator Tree:
                TableScan
                  alias: catalog_sales
                  properties:
                    hive.sql.query SELECT TRUE AS "literalTrue", "t1"."cs_ship_customer_sk"
FROM (SELECT "cs_sold_date_sk", "cs_ship_customer_sk"
FROM (SELECT "cs_sold_date_sk", "cs_ship_customer_sk"
FROM "CATALOG_SALES") AS "t"
WHERE "cs_ship_customer_sk" IS NOT NULL AND "cs_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t2"
WHERE "d_year" = 1999 AND "d_moy" BETWEEN 1 AND 3 AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."cs_sold_date_sk" = "t4"."d_date_sk"
                    hive.sql.query.fieldNames literalTrue,cs_ship_customer_sk
                    hive.sql.query.fieldTypes boolean,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: cs_ship_customer_sk (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      keys: _col0 (type: int)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col6, _col7, _col8, _col9, _col10
                Statistics: Num rows: 1 Data size: 413 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col0 (type: int)
                  Statistics: Num rows: 1 Data size: 413 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col0, _col6, _col7, _col8, _col9, _col10, _col11
                Statistics: Num rows: 1 Data size: 454 Basic stats: COMPLETE Column stats: NONE
                Filter Operator
                  predicate: _col11 is null (type: boolean)
                  Statistics: Num rows: 1 Data size: 454 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: _col0 (type: int), _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
                    outputColumnNames: _col0, _col6, _col7, _col8, _col9, _col10
                    Statistics: Num rows: 1 Data size: 454 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 454 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Anti Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col6, _col7, _col8, _col9, _col10
                Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                Top N Key Operator
                  sort order: +++++
                  keys: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
                  null sort order: zzzzz
                  Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                  top n: 100
                  Group By Operator
                    aggregations: count()
                    keys: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
                    minReductionHashAggr: 0.99
                    mode: hash
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                    Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: char(1)), _col1 (type: char(1)), _col2 (type: char(20)), _col3 (type: int), _col4 (type: char(10))
                      null sort order: zzzzz
                      sort order: +++++
                      Map-reduce partition columns: _col0 (type: char(1)), _col1 (type: char(1)), _col2 (type: char(20)), _col3 (type: int), _col4 (type: char(10))
                      Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col5 (type: bigint)
        Reducer 5 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: char(1)), KEY._col1 (type: char(1)), KEY._col2 (type: char(20)), KEY._col3 (type: int), KEY._col4 (type: char(10))
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: char(1)), _col1 (type: char(1)), _col2 (type: char(20)), _col5 (type: bigint), _col3 (type: int), _col4 (type: char(10))
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col6
                  Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: char(1)), _col1 (type: char(1)), _col2 (type: char(20)), _col4 (type: int), _col6 (type: char(10))
                    null sort order: zzzzz
                    sort order: +++++
                    Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col3 (type: bigint)
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: char(1)), KEY.reducesinkkey1 (type: char(1)), KEY.reducesinkkey2 (type: char(20)), VALUE._col0 (type: bigint), KEY.reducesinkkey3 (type: int), VALUE._col0 (type: bigint), KEY.reducesinkkey4 (type: char(10)), VALUE._col0 (type: bigint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

PREHOOK: query: SELECT cd_gender, 
       cd_marital_status, 
       cd_education_status, 
       Count(*) cnt1, 
       cd_purchase_estimate, 
       Count(*) cnt2, 
       cd_credit_rating, 
       Count(*) cnt3 
FROM   customer c, 
       customer_address ca, 
       customer_demographics 
WHERE  c.c_current_addr_sk = ca.ca_address_sk 
       AND ca_state IN ( 'CO', 'IL', 'MN' ) 
       AND cd_demo_sk = c.c_current_cdemo_sk 
       AND EXISTS (SELECT * 
                   FROM   store_sales, 
                          date_dim 
                   WHERE  c.c_customer_sk = ss_customer_sk 
                          AND ss_sold_date_sk = d_date_sk 
                          AND d_year = 1999 
                          AND d_moy BETWEEN 1 AND 1 + 2) 
       AND ( NOT EXISTS (SELECT * 
                         FROM   web_sales, 
                                date_dim 
                         WHERE  c.c_customer_sk = ws_bill_customer_sk 
                                AND ws_sold_date_sk = d_date_sk 
                                AND d_year = 1999 
                                AND d_moy BETWEEN 1 AND 1 + 2) 
             AND NOT EXISTS (SELECT * 
                             FROM   catalog_sales, 
                                    date_dim 
                             WHERE  c.c_customer_sk = cs_ship_customer_sk 
                                    AND cs_sold_date_sk = d_date_sk 
                                    AND d_year = 1999 
                                    AND d_moy BETWEEN 1 AND 1 + 2) ) 
GROUP  BY cd_gender, 
          cd_marital_status, 
          cd_education_status, 
          cd_purchase_estimate, 
          cd_credit_rating 
ORDER  BY cd_gender, 
          cd_marital_status, 
          cd_education_status, 
          cd_purchase_estimate, 
          cd_credit_rating 
LIMIT  100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: SELECT cd_gender, 
       cd_marital_status, 
       cd_education_status, 
       Count(*) cnt1, 
       cd_purchase_estimate, 
       Count(*) cnt2, 
       cd_credit_rating, 
       Count(*) cnt3 
FROM   customer c, 
       customer_address ca, 
       customer_demographics 
WHERE  c.c_current_addr_sk = ca.ca_address_sk 
       AND ca_state IN ( 'CO', 'IL', 'MN' ) 
       AND cd_demo_sk = c.c_current_cdemo_sk 
       AND EXISTS (SELECT * 
                   FROM   store_sales, 
                          date_dim 
                   WHERE  c.c_customer_sk = ss_customer_sk 
                          AND ss_sold_date_sk = d_date_sk 
                          AND d_year = 1999 
                          AND d_moy BETWEEN 1 AND 1 + 2) 
       AND ( NOT EXISTS (SELECT * 
                         FROM   web_sales, 
                                date_dim 
                         WHERE  c.c_customer_sk = ws_bill_customer_sk 
                                AND ws_sold_date_sk = d_date_sk 
                                AND d_year = 1999 
                                AND d_moy BETWEEN 1 AND 1 + 2) 
             AND NOT EXISTS (SELECT * 
                             FROM   catalog_sales, 
                                    date_dim 
                             WHERE  c.c_customer_sk = cs_ship_customer_sk 
                                    AND cs_sold_date_sk = d_date_sk 
                                    AND d_year = 1999 
                                    AND d_moy BETWEEN 1 AND 1 + 2) ) 
GROUP  BY cd_gender, 
          cd_marital_status, 
          cd_education_status, 
          cd_purchase_estimate, 
          cd_credit_rating 
ORDER  BY cd_gender, 
          cd_marital_status, 
          cd_education_status, 
          cd_purchase_estimate, 
          cd_credit_rating 
LIMIT  100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
PREHOOK: query: explain
SELECT cd_gender, 
       cd_marital_status, 
       cd_education_status, 
       Count(*) cnt1, 
       cd_purchase_estimate, 
       Count(*) cnt2, 
       cd_credit_rating, 
       Count(*) cnt3 
FROM   customer c, 
       customer_address ca, 
       customer_demographics 
WHERE  c.c_current_addr_sk = ca.ca_address_sk 
       AND ca_state IN ( 'CO', 'IL', 'MN' ) 
       AND cd_demo_sk = c.c_current_cdemo_sk 
       AND EXISTS (SELECT * 
                   FROM   store_sales, 
                          date_dim 
                   WHERE  c.c_customer_sk = ss_customer_sk 
                          AND ss_sold_date_sk = d_date_sk 
                          AND d_year = 1999 
                          AND d_moy NOT BETWEEN 1 AND 1 + 2) 
       AND ( NOT EXISTS (SELECT * 
                         FROM   web_sales, 
                                date_dim 
                         WHERE  c.c_customer_sk = ws_bill_customer_sk 
                                AND ws_sold_date_sk = d_date_sk 
                                AND d_year = 1999 
                                AND d_moy NOT BETWEEN 1 AND 1 + 2) 
             AND NOT EXISTS (SELECT * 
                             FROM   catalog_sales, 
                                    date_dim 
                             WHERE  c.c_customer_sk = cs_ship_customer_sk 
                                    AND cs_sold_date_sk = d_date_sk 
                                    AND d_year = 1999 
                                    AND d_moy NOT BETWEEN 1 AND 1 + 2) ) 
GROUP  BY cd_gender, 
          cd_marital_status, 
          cd_education_status, 
          cd_purchase_estimate, 
          cd_credit_rating 
ORDER  BY cd_gender, 
          cd_marital_status, 
          cd_education_status, 
          cd_purchase_estimate, 
          cd_credit_rating 
LIMIT  100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
SELECT cd_gender, 
       cd_marital_status, 
       cd_education_status, 
       Count(*) cnt1, 
       cd_purchase_estimate, 
       Count(*) cnt2, 
       cd_credit_rating, 
       Count(*) cnt3 
FROM   customer c, 
       customer_address ca, 
       customer_demographics 
WHERE  c.c_current_addr_sk = ca.ca_address_sk 
       AND ca_state IN ( 'CO', 'IL', 'MN' ) 
       AND cd_demo_sk = c.c_current_cdemo_sk 
       AND EXISTS (SELECT * 
                   FROM   store_sales, 
                          date_dim 
                   WHERE  c.c_customer_sk = ss_customer_sk 
                          AND ss_sold_date_sk = d_date_sk 
                          AND d_year = 1999 
                          AND d_moy NOT BETWEEN 1 AND 1 + 2) 
       AND ( NOT EXISTS (SELECT * 
                         FROM   web_sales, 
                                date_dim 
                         WHERE  c.c_customer_sk = ws_bill_customer_sk 
                                AND ws_sold_date_sk = d_date_sk 
                                AND d_year = 1999 
                                AND d_moy NOT BETWEEN 1 AND 1 + 2) 
             AND NOT EXISTS (SELECT * 
                             FROM   catalog_sales, 
                                    date_dim 
                             WHERE  c.c_customer_sk = cs_ship_customer_sk 
                                    AND cs_sold_date_sk = d_date_sk 
                                    AND d_year = 1999 
                                    AND d_moy NOT BETWEEN 1 AND 1 + 2) ) 
GROUP  BY cd_gender, 
          cd_marital_status, 
          cd_education_status, 
          cd_purchase_estimate, 
          cd_credit_rating 
ORDER  BY cd_gender, 
          cd_marital_status, 
          cd_education_status, 
          cd_purchase_estimate, 
          cd_credit_rating 
LIMIT  100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
        Reducer 3 <- Map 8 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Map 9 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
        Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
        Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: c
                  properties:
                    hive.sql.query SELECT "t1"."c_customer_sk", "t1"."c_current_cdemo_sk", "t1"."c_current_addr_sk", "t4"."ca_address_sk", "t4"."ca_state", "t7"."cd_demo_sk", "t7"."cd_gender", "t7"."cd_marital_status", "t7"."cd_education_status", "t7"."cd_purchase_estimate", "t7"."cd_credit_rating"
FROM (SELECT "c_customer_sk", "c_current_cdemo_sk", "c_current_addr_sk"
FROM (SELECT "c_customer_sk", "c_current_cdemo_sk", "c_current_addr_sk"
FROM "CUSTOMER") AS "t"
WHERE "c_current_addr_sk" IS NOT NULL AND "c_current_cdemo_sk" IS NOT NULL AND "c_customer_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "ca_address_sk", "ca_state"
FROM (SELECT "ca_address_sk", "ca_state"
FROM "CUSTOMER_ADDRESS") AS "t2"
WHERE "ca_state" IN ('CO', 'IL', 'MN') AND "ca_address_sk" IS NOT NULL) AS "t4" ON "t1"."c_current_addr_sk" = "t4"."ca_address_sk"
INNER JOIN (SELECT "cd_demo_sk", "cd_gender", "cd_marital_status", "cd_education_status", "cd_purchase_estimate", "cd_credit_rating"
FROM (SELECT "cd_demo_sk", "cd_gender", "cd_marital_status", "cd_education_status", "cd_purchase_estimate", "cd_credit_rating"
FROM "CUSTOMER_DEMOGRAPHICS") AS "t5"
WHERE "cd_demo_sk" IS NOT NULL) AS "t7" ON "t1"."c_current_cdemo_sk" = "t7"."cd_demo_sk"
                    hive.sql.query.fieldNames c_customer_sk,c_current_cdemo_sk,c_current_addr_sk,ca_address_sk,ca_state,cd_demo_sk,cd_gender,cd_marital_status,cd_education_status,cd_purchase_estimate,cd_credit_rating
                    hive.sql.query.fieldTypes int,int,int,int,char(2),int,char(1),char(1),char(20),int,char(10)
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 376 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: c_customer_sk (type: int), cd_gender (type: char(1)), cd_marital_status (type: char(1)), cd_education_status (type: char(20)), cd_purchase_estimate (type: int), cd_credit_rating (type: char(10))
                    outputColumnNames: _col0, _col6, _col7, _col8, _col9, _col10
                    Statistics: Num rows: 1 Data size: 376 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 376 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "t1"."ss_customer_sk"
FROM (SELECT "ss_sold_date_sk", "ss_customer_sk"
FROM (SELECT "ss_sold_date_sk", "ss_customer_sk"
FROM "STORE_SALES") AS "t"
WHERE "ss_customer_sk" IS NOT NULL AND "ss_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t2"
WHERE ("d_moy" < 1 OR "d_moy" > 3) AND "d_year" = 1999 AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."ss_sold_date_sk" = "t4"."d_date_sk"
                    hive.sql.query.fieldNames ss_customer_sk
                    hive.sql.query.fieldTypes int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ss_customer_sk (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      keys: _col0 (type: int)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 8 
            Map Operator Tree:
                TableScan
                  alias: web_sales
                  properties:
                    hive.sql.query SELECT TRUE AS "literalTrue", "t1"."ws_bill_customer_sk"
FROM (SELECT "ws_sold_date_sk", "ws_bill_customer_sk"
FROM (SELECT "ws_sold_date_sk", "ws_bill_customer_sk"
FROM "WEB_SALES") AS "t"
WHERE "ws_bill_customer_sk" IS NOT NULL AND "ws_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t2"
WHERE ("d_moy" < 1 OR "d_moy" > 3) AND "d_year" = 1999 AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."ws_sold_date_sk" = "t4"."d_date_sk"
                    hive.sql.query.fieldNames literalTrue,ws_bill_customer_sk
                    hive.sql.query.fieldTypes boolean,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: literaltrue (type: boolean), ws_bill_customer_sk (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 9 
            Map Operator Tree:
                TableScan
                  alias: catalog_sales
                  properties:
                    hive.sql.query SELECT TRUE AS "literalTrue", "t1"."cs_ship_customer_sk"
FROM (SELECT "cs_sold_date_sk", "cs_ship_customer_sk"
FROM (SELECT "cs_sold_date_sk", "cs_ship_customer_sk"
FROM "CATALOG_SALES") AS "t"
WHERE "cs_ship_customer_sk" IS NOT NULL AND "cs_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t2"
WHERE ("d_moy" < 1 OR "d_moy" > 3) AND "d_year" = 1999 AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."cs_sold_date_sk" = "t4"."d_date_sk"
                    hive.sql.query.fieldNames literalTrue,cs_ship_customer_sk
                    hive.sql.query.fieldTypes boolean,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: cs_ship_customer_sk (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      keys: _col0 (type: int)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col6, _col7, _col8, _col9, _col10
                Statistics: Num rows: 1 Data size: 413 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col0 (type: int)
                  Statistics: Num rows: 1 Data size: 413 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col0, _col6, _col7, _col8, _col9, _col10, _col11
                Statistics: Num rows: 1 Data size: 454 Basic stats: COMPLETE Column stats: NONE
                Filter Operator
                  predicate: _col11 is null (type: boolean)
                  Statistics: Num rows: 1 Data size: 454 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: _col0 (type: int), _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
                    outputColumnNames: _col0, _col6, _col7, _col8, _col9, _col10
                    Statistics: Num rows: 1 Data size: 454 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 454 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Anti Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col6, _col7, _col8, _col9, _col10
                Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                Top N Key Operator
                  sort order: +++++
                  keys: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
                  null sort order: zzzzz
                  Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                  top n: 100
                  Group By Operator
                    aggregations: count()
                    keys: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
                    minReductionHashAggr: 0.99
                    mode: hash
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                    Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: char(1)), _col1 (type: char(1)), _col2 (type: char(20)), _col3 (type: int), _col4 (type: char(10))
                      null sort order: zzzzz
                      sort order: +++++
                      Map-reduce partition columns: _col0 (type: char(1)), _col1 (type: char(1)), _col2 (type: char(20)), _col3 (type: int), _col4 (type: char(10))
                      Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col5 (type: bigint)
        Reducer 5 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: char(1)), KEY._col1 (type: char(1)), KEY._col2 (type: char(20)), KEY._col3 (type: int), KEY._col4 (type: char(10))
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: char(1)), _col1 (type: char(1)), _col2 (type: char(20)), _col5 (type: bigint), _col3 (type: int), _col4 (type: char(10))
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col6
                  Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: char(1)), _col1 (type: char(1)), _col2 (type: char(20)), _col4 (type: int), _col6 (type: char(10))
                    null sort order: zzzzz
                    sort order: +++++
                    Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col3 (type: bigint)
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: char(1)), KEY.reducesinkkey1 (type: char(1)), KEY.reducesinkkey2 (type: char(20)), VALUE._col0 (type: bigint), KEY.reducesinkkey3 (type: int), VALUE._col0 (type: bigint), KEY.reducesinkkey4 (type: char(10)), VALUE._col0 (type: bigint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

PREHOOK: query: SELECT cd_gender, 
       cd_marital_status, 
       cd_education_status, 
       Count(*) cnt1, 
       cd_purchase_estimate, 
       Count(*) cnt2, 
       cd_credit_rating, 
       Count(*) cnt3 
FROM   customer c, 
       customer_address ca, 
       customer_demographics 
WHERE  c.c_current_addr_sk = ca.ca_address_sk 
       AND ca_state IN ( 'CO', 'IL', 'MN' ) 
       AND cd_demo_sk = c.c_current_cdemo_sk 
       AND EXISTS (SELECT * 
                   FROM   store_sales, 
                          date_dim 
                   WHERE  c.c_customer_sk = ss_customer_sk 
                          AND ss_sold_date_sk = d_date_sk 
                          AND d_year = 1999 
                          AND d_moy NOT BETWEEN 1 AND 1 + 2) 
       AND ( NOT EXISTS (SELECT * 
                         FROM   web_sales, 
                                date_dim 
                         WHERE  c.c_customer_sk = ws_bill_customer_sk 
                                AND ws_sold_date_sk = d_date_sk 
                                AND d_year = 1999 
                                AND d_moy NOT BETWEEN 1 AND 1 + 2) 
             AND NOT EXISTS (SELECT * 
                             FROM   catalog_sales, 
                                    date_dim 
                             WHERE  c.c_customer_sk = cs_ship_customer_sk 
                                    AND cs_sold_date_sk = d_date_sk 
                                    AND d_year = 1999 
                                    AND d_moy NOT BETWEEN 1 AND 1 + 2) ) 
GROUP  BY cd_gender, 
          cd_marital_status, 
          cd_education_status, 
          cd_purchase_estimate, 
          cd_credit_rating 
ORDER  BY cd_gender, 
          cd_marital_status, 
          cd_education_status, 
          cd_purchase_estimate, 
          cd_credit_rating 
LIMIT  100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: SELECT cd_gender, 
       cd_marital_status, 
       cd_education_status, 
       Count(*) cnt1, 
       cd_purchase_estimate, 
       Count(*) cnt2, 
       cd_credit_rating, 
       Count(*) cnt3 
FROM   customer c, 
       customer_address ca, 
       customer_demographics 
WHERE  c.c_current_addr_sk = ca.ca_address_sk 
       AND ca_state IN ( 'CO', 'IL', 'MN' ) 
       AND cd_demo_sk = c.c_current_cdemo_sk 
       AND EXISTS (SELECT * 
                   FROM   store_sales, 
                          date_dim 
                   WHERE  c.c_customer_sk = ss_customer_sk 
                          AND ss_sold_date_sk = d_date_sk 
                          AND d_year = 1999 
                          AND d_moy NOT BETWEEN 1 AND 1 + 2) 
       AND ( NOT EXISTS (SELECT * 
                         FROM   web_sales, 
                                date_dim 
                         WHERE  c.c_customer_sk = ws_bill_customer_sk 
                                AND ws_sold_date_sk = d_date_sk 
                                AND d_year = 1999 
                                AND d_moy NOT BETWEEN 1 AND 1 + 2) 
             AND NOT EXISTS (SELECT * 
                             FROM   catalog_sales, 
                                    date_dim 
                             WHERE  c.c_customer_sk = cs_ship_customer_sk 
                                    AND cs_sold_date_sk = d_date_sk 
                                    AND d_year = 1999 
                                    AND d_moy NOT BETWEEN 1 AND 1 + 2) ) 
GROUP  BY cd_gender, 
          cd_marital_status, 
          cd_education_status, 
          cd_purchase_estimate, 
          cd_credit_rating 
ORDER  BY cd_gender, 
          cd_marital_status, 
          cd_education_status, 
          cd_purchase_estimate, 
          cd_credit_rating 
LIMIT  100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
PREHOOK: query: explain
SELECT Count(*) 
FROM   (SELECT DISTINCT c_last_name, 
                        c_first_name, 
                        d_date 
        FROM   store_sales, 
               date_dim, 
               customer 
        WHERE  store_sales.ss_sold_date_sk = date_dim.d_date_sk 
               AND store_sales.ss_customer_sk = customer.c_customer_sk 
               AND d_month_seq BETWEEN 1212 AND 1212 + 11 
        intersect 
        SELECT DISTINCT c_last_name, 
                        c_first_name, 
                        d_date 
        FROM   catalog_sales, 
               date_dim, 
               customer 
        WHERE  catalog_sales.cs_sold_date_sk = date_dim.d_date_sk 
               AND catalog_sales.cs_bill_customer_sk = customer.c_customer_sk 
               AND d_month_seq BETWEEN 1212 AND 1212 + 11 
        intersect 
        SELECT DISTINCT c_last_name, 
                        c_first_name, 
                        d_date 
        FROM   web_sales, 
               date_dim, 
               customer 
        WHERE  web_sales.ws_sold_date_sk = date_dim.d_date_sk 
               AND web_sales.ws_bill_customer_sk = customer.c_customer_sk 
               AND d_month_seq BETWEEN 1212 AND 1212 + 11) hot_cust 
LIMIT  100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
SELECT Count(*) 
FROM   (SELECT DISTINCT c_last_name, 
                        c_first_name, 
                        d_date 
        FROM   store_sales, 
               date_dim, 
               customer 
        WHERE  store_sales.ss_sold_date_sk = date_dim.d_date_sk 
               AND store_sales.ss_customer_sk = customer.c_customer_sk 
               AND d_month_seq BETWEEN 1212 AND 1212 + 11 
        intersect 
        SELECT DISTINCT c_last_name, 
                        c_first_name, 
                        d_date 
        FROM   catalog_sales, 
               date_dim, 
               customer 
        WHERE  catalog_sales.cs_sold_date_sk = date_dim.d_date_sk 
               AND catalog_sales.cs_bill_customer_sk = customer.c_customer_sk 
               AND d_month_seq BETWEEN 1212 AND 1212 + 11 
        intersect 
        SELECT DISTINCT c_last_name, 
                        c_first_name, 
                        d_date 
        FROM   web_sales, 
               date_dim, 
               customer 
        WHERE  web_sales.ws_sold_date_sk = date_dim.d_date_sk 
               AND web_sales.ws_bill_customer_sk = customer.c_customer_sk 
               AND d_month_seq BETWEEN 1212 AND 1212 + 11) hot_cust 
LIMIT  100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Union 2 (CONTAINS)
        Map 5 <- Union 2 (CONTAINS)
        Map 6 <- Union 2 (CONTAINS)
        Reducer 3 <- Union 2 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  Statistics: Num rows: 1 Data size: 282 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: c_last_name (type: char(30)), c_first_name (type: char(20)), d_date (type: date), $f3 (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 1 Data size: 282 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(_col3)
                      keys: _col0 (type: char(30)), _col1 (type: char(20)), _col2 (type: date)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 3 Data size: 846 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: char(30)), _col1 (type: char(20)), _col2 (type: date)
                        null sort order: zzz
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: char(30)), _col1 (type: char(20)), _col2 (type: date)
                        Statistics: Num rows: 3 Data size: 846 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: catalog_sales
                  Statistics: Num rows: 1 Data size: 282 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: c_last_name (type: char(30)), c_first_name (type: char(20)), d_date (type: date), $f3 (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 1 Data size: 282 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(_col3)
                      keys: _col0 (type: char(30)), _col1 (type: char(20)), _col2 (type: date)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 3 Data size: 846 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: char(30)), _col1 (type: char(20)), _col2 (type: date)
                        null sort order: zzz
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: char(30)), _col1 (type: char(20)), _col2 (type: date)
                        Statistics: Num rows: 3 Data size: 846 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: web_sales
                  Statistics: Num rows: 1 Data size: 282 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: c_last_name (type: char(30)), c_first_name (type: char(20)), d_date (type: date), $f3 (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 1 Data size: 282 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(_col3)
                      keys: _col0 (type: char(30)), _col1 (type: char(20)), _col2 (type: date)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 3 Data size: 846 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: char(30)), _col1 (type: char(20)), _col2 (type: date)
                        null sort order: zzz
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: char(30)), _col1 (type: char(20)), _col2 (type: date)
                        Statistics: Num rows: 3 Data size: 846 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: char(30)), KEY._col1 (type: char(20)), KEY._col2 (type: date)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 1 Data size: 282 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col3 (type: bigint)
                  outputColumnNames: _col3
                  Statistics: Num rows: 1 Data size: 282 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (_col3 = 3L) (type: boolean)
                    Statistics: Num rows: 1 Data size: 282 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      Statistics: Num rows: 1 Data size: 282 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        aggregations: count()
                        minReductionHashAggr: 0.99
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 298 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          null sort order: 
                          sort order: 
                          Statistics: Num rows: 1 Data size: 298 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col0 (type: bigint)
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 298 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 298 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Union 2 
            Vertex: Union 2

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT Count(*) 
FROM   (SELECT DISTINCT c_last_name, 
                        c_first_name, 
                        d_date 
        FROM   store_sales, 
               date_dim, 
               customer 
        WHERE  store_sales.ss_sold_date_sk = date_dim.d_date_sk 
               AND store_sales.ss_customer_sk = customer.c_customer_sk 
               AND d_month_seq BETWEEN 1212 AND 1212 + 11 
        intersect 
        SELECT DISTINCT c_last_name, 
                        c_first_name, 
                        d_date 
        FROM   catalog_sales, 
               date_dim, 
               customer 
        WHERE  catalog_sales.cs_sold_date_sk = date_dim.d_date_sk 
               AND catalog_sales.cs_bill_customer_sk = customer.c_customer_sk 
               AND d_month_seq BETWEEN 1212 AND 1212 + 11 
        intersect 
        SELECT DISTINCT c_last_name, 
                        c_first_name, 
                        d_date 
        FROM   web_sales, 
               date_dim, 
               customer 
        WHERE  web_sales.ws_sold_date_sk = date_dim.d_date_sk 
               AND web_sales.ws_bill_customer_sk = customer.c_customer_sk 
               AND d_month_seq BETWEEN 1212 AND 1212 + 11) hot_cust 
LIMIT  100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: SELECT Count(*) 
FROM   (SELECT DISTINCT c_last_name, 
                        c_first_name, 
                        d_date 
        FROM   store_sales, 
               date_dim, 
               customer 
        WHERE  store_sales.ss_sold_date_sk = date_dim.d_date_sk 
               AND store_sales.ss_customer_sk = customer.c_customer_sk 
               AND d_month_seq BETWEEN 1212 AND 1212 + 11 
        intersect 
        SELECT DISTINCT c_last_name, 
                        c_first_name, 
                        d_date 
        FROM   catalog_sales, 
               date_dim, 
               customer 
        WHERE  catalog_sales.cs_sold_date_sk = date_dim.d_date_sk 
               AND catalog_sales.cs_bill_customer_sk = customer.c_customer_sk 
               AND d_month_seq BETWEEN 1212 AND 1212 + 11 
        intersect 
        SELECT DISTINCT c_last_name, 
                        c_first_name, 
                        d_date 
        FROM   web_sales, 
               date_dim, 
               customer 
        WHERE  web_sales.ws_sold_date_sk = date_dim.d_date_sk 
               AND web_sales.ws_bill_customer_sk = customer.c_customer_sk 
               AND d_month_seq BETWEEN 1212 AND 1212 + 11) hot_cust 
LIMIT  100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
0
PREHOOK: query: explain
WITH ss AS 
( 
         SELECT   i_item_id, 
                  Sum(ss_ext_sales_price) total_sales 
         FROM     store_sales, 
                  date_dim, 
                  customer_address, 
                  item 
         WHERE    i_item_id IN 
                  ( 
                         SELECT i_item_id 
                         FROM   item 
                         WHERE  i_color IN ('orchid', 
                                            'chiffon', 
                                            'lace')) 
         AND      ss_item_sk = i_item_sk 
         AND      ss_sold_date_sk = d_date_sk 
         AND      d_year = 2000 
         AND      d_moy = 1 
         AND      ss_addr_sk = ca_address_sk 
         AND      ca_gmt_offset = -8 
         GROUP BY i_item_id), cs AS 
( 
         SELECT   i_item_id, 
                  Sum(cs_ext_sales_price) total_sales 
         FROM     catalog_sales, 
                  date_dim, 
                  customer_address, 
                  item 
         WHERE    i_item_id IN 
                  ( 
                         SELECT i_item_id 
                         FROM   item 
                         WHERE  i_color IN ('orchid', 
                                            'chiffon', 
                                            'lace')) 
         AND      cs_item_sk = i_item_sk 
         AND      cs_sold_date_sk = d_date_sk 
         AND      d_year = 2000 
         AND      d_moy = 1 
         AND      cs_bill_addr_sk = ca_address_sk 
         AND      ca_gmt_offset = -8 
         GROUP BY i_item_id), ws AS 
( 
         SELECT   i_item_id, 
                  Sum(ws_ext_sales_price) total_sales 
         FROM     web_sales, 
                  date_dim, 
                  customer_address, 
                  item 
         WHERE    i_item_id IN 
                  ( 
                         SELECT i_item_id 
                         FROM   item 
                         WHERE  i_color IN ('orchid', 
                                            'chiffon', 
                                            'lace')) 
         AND      ws_item_sk = i_item_sk 
         AND      ws_sold_date_sk = d_date_sk 
         AND      d_year = 2000 
         AND      d_moy = 1 
         AND      ws_bill_addr_sk = ca_address_sk 
         AND      ca_gmt_offset = -8 
         GROUP BY i_item_id) 
SELECT   i_item_id , 
         Sum(total_sales) total_sales 
FROM     ( 
                SELECT * 
                FROM   ss 
                UNION ALL 
                SELECT * 
                FROM   cs 
                UNION ALL 
                SELECT * 
                FROM   ws) tmp1 
GROUP BY i_item_id 
ORDER BY total_sales limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
WITH ss AS 
( 
         SELECT   i_item_id, 
                  Sum(ss_ext_sales_price) total_sales 
         FROM     store_sales, 
                  date_dim, 
                  customer_address, 
                  item 
         WHERE    i_item_id IN 
                  ( 
                         SELECT i_item_id 
                         FROM   item 
                         WHERE  i_color IN ('orchid', 
                                            'chiffon', 
                                            'lace')) 
         AND      ss_item_sk = i_item_sk 
         AND      ss_sold_date_sk = d_date_sk 
         AND      d_year = 2000 
         AND      d_moy = 1 
         AND      ss_addr_sk = ca_address_sk 
         AND      ca_gmt_offset = -8 
         GROUP BY i_item_id), cs AS 
( 
         SELECT   i_item_id, 
                  Sum(cs_ext_sales_price) total_sales 
         FROM     catalog_sales, 
                  date_dim, 
                  customer_address, 
                  item 
         WHERE    i_item_id IN 
                  ( 
                         SELECT i_item_id 
                         FROM   item 
                         WHERE  i_color IN ('orchid', 
                                            'chiffon', 
                                            'lace')) 
         AND      cs_item_sk = i_item_sk 
         AND      cs_sold_date_sk = d_date_sk 
         AND      d_year = 2000 
         AND      d_moy = 1 
         AND      cs_bill_addr_sk = ca_address_sk 
         AND      ca_gmt_offset = -8 
         GROUP BY i_item_id), ws AS 
( 
         SELECT   i_item_id, 
                  Sum(ws_ext_sales_price) total_sales 
         FROM     web_sales, 
                  date_dim, 
                  customer_address, 
                  item 
         WHERE    i_item_id IN 
                  ( 
                         SELECT i_item_id 
                         FROM   item 
                         WHERE  i_color IN ('orchid', 
                                            'chiffon', 
                                            'lace')) 
         AND      ws_item_sk = i_item_sk 
         AND      ws_sold_date_sk = d_date_sk 
         AND      d_year = 2000 
         AND      d_moy = 1 
         AND      ws_bill_addr_sk = ca_address_sk 
         AND      ca_gmt_offset = -8 
         GROUP BY i_item_id) 
SELECT   i_item_id , 
         Sum(total_sales) total_sales 
FROM     ( 
                SELECT * 
                FROM   ss 
                UNION ALL 
                SELECT * 
                FROM   cs 
                UNION ALL 
                SELECT * 
                FROM   ws) tmp1 
GROUP BY i_item_id 
ORDER BY total_sales limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 10 <- Map 13 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
        Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Union 4 (CONTAINS)
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Union 4 (CONTAINS)
        Reducer 5 <- Union 4 (SIMPLE_EDGE)
        Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
        Reducer 8 <- Map 12 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
        Reducer 9 <- Reducer 8 (SIMPLE_EDGE), Union 4 (CONTAINS)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "t1"."ss_sold_date_sk", "t1"."ss_item_sk", "t1"."ss_addr_sk", "t1"."ss_ext_sales_price", "t10"."d_date_sk", "t10"."d_year", "t10"."d_moy", "t4"."ca_address_sk", "t4"."ca_gmt_offset", "t7"."i_item_sk", "t7"."i_item_id"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk", "ss_addr_sk", "ss_ext_sales_price"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk", "ss_addr_sk", "ss_ext_sales_price"
FROM "STORE_SALES") AS "t"
WHERE "ss_sold_date_sk" IS NOT NULL AND "ss_addr_sk" IS NOT NULL AND "ss_item_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "ca_address_sk", "ca_gmt_offset"
FROM (SELECT "ca_address_sk", "ca_gmt_offset"
FROM "CUSTOMER_ADDRESS") AS "t2"
WHERE "ca_gmt_offset" = -8 AND "ca_address_sk" IS NOT NULL) AS "t4" ON "t1"."ss_addr_sk" = "t4"."ca_address_sk"
INNER JOIN (SELECT "i_item_sk", "i_item_id"
FROM (SELECT "i_item_sk", "i_item_id"
FROM "ITEM") AS "t5"
WHERE "i_item_id" IS NOT NULL AND "i_item_sk" IS NOT NULL) AS "t7" ON "t1"."ss_item_sk" = "t7"."i_item_sk"
INNER JOIN (SELECT "d_date_sk", "d_year", "d_moy"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t8"
WHERE "d_year" = 2000 AND "d_moy" = 1 AND "d_date_sk" IS NOT NULL) AS "t10" ON "t1"."ss_sold_date_sk" = "t10"."d_date_sk"
                    hive.sql.query.fieldNames ss_sold_date_sk,ss_item_sk,ss_addr_sk,ss_ext_sales_price,d_date_sk,d_year,d_moy,ca_address_sk,ca_gmt_offset,i_item_sk,i_item_id
                    hive.sql.query.fieldTypes int,int,int,decimal(7,2),int,int,int,int,decimal(5,2),int,char(16)
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 212 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ss_ext_sales_price (type: decimal(7,2)), i_item_id (type: char(16))
                    outputColumnNames: _col3, _col10
                    Statistics: Num rows: 1 Data size: 212 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col10 (type: char(16))
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col10 (type: char(16))
                      Statistics: Num rows: 1 Data size: 212 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col3 (type: decimal(7,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 12 
            Map Operator Tree:
                TableScan
                  alias: catalog_sales
                  properties:
                    hive.sql.query SELECT "t1"."cs_sold_date_sk", "t1"."cs_bill_addr_sk", "t1"."cs_item_sk", "t1"."cs_ext_sales_price", "t10"."d_date_sk", "t10"."d_year", "t10"."d_moy", "t4"."ca_address_sk", "t4"."ca_gmt_offset", "t7"."i_item_sk", "t7"."i_item_id"
FROM (SELECT "cs_sold_date_sk", "cs_bill_addr_sk", "cs_item_sk", "cs_ext_sales_price"
FROM (SELECT "cs_sold_date_sk", "cs_bill_addr_sk", "cs_item_sk", "cs_ext_sales_price"
FROM "CATALOG_SALES") AS "t"
WHERE "cs_sold_date_sk" IS NOT NULL AND "cs_bill_addr_sk" IS NOT NULL AND "cs_item_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "ca_address_sk", "ca_gmt_offset"
FROM (SELECT "ca_address_sk", "ca_gmt_offset"
FROM "CUSTOMER_ADDRESS") AS "t2"
WHERE "ca_gmt_offset" = -8 AND "ca_address_sk" IS NOT NULL) AS "t4" ON "t1"."cs_bill_addr_sk" = "t4"."ca_address_sk"
INNER JOIN (SELECT "i_item_sk", "i_item_id"
FROM (SELECT "i_item_sk", "i_item_id"
FROM "ITEM") AS "t5"
WHERE "i_item_id" IS NOT NULL AND "i_item_sk" IS NOT NULL) AS "t7" ON "t1"."cs_item_sk" = "t7"."i_item_sk"
INNER JOIN (SELECT "d_date_sk", "d_year", "d_moy"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t8"
WHERE "d_year" = 2000 AND "d_moy" = 1 AND "d_date_sk" IS NOT NULL) AS "t10" ON "t1"."cs_sold_date_sk" = "t10"."d_date_sk"
                    hive.sql.query.fieldNames cs_sold_date_sk,cs_bill_addr_sk,cs_item_sk,cs_ext_sales_price,d_date_sk,d_year,d_moy,ca_address_sk,ca_gmt_offset,i_item_sk,i_item_id
                    hive.sql.query.fieldTypes int,int,int,decimal(7,2),int,int,int,int,decimal(5,2),int,char(16)
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 212 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: cs_ext_sales_price (type: decimal(7,2)), i_item_id (type: char(16))
                    outputColumnNames: _col3, _col10
                    Statistics: Num rows: 1 Data size: 212 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col10 (type: char(16))
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col10 (type: char(16))
                      Statistics: Num rows: 1 Data size: 212 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col3 (type: decimal(7,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 13 
            Map Operator Tree:
                TableScan
                  alias: web_sales
                  properties:
                    hive.sql.query SELECT "t1"."ws_sold_date_sk", "t1"."ws_item_sk", "t1"."ws_bill_addr_sk", "t1"."ws_ext_sales_price", "t10"."d_date_sk", "t10"."d_year", "t10"."d_moy", "t4"."ca_address_sk", "t4"."ca_gmt_offset", "t7"."i_item_sk", "t7"."i_item_id"
FROM (SELECT "ws_sold_date_sk", "ws_item_sk", "ws_bill_addr_sk", "ws_ext_sales_price"
FROM (SELECT "ws_sold_date_sk", "ws_item_sk", "ws_bill_addr_sk", "ws_ext_sales_price"
FROM "WEB_SALES") AS "t"
WHERE "ws_sold_date_sk" IS NOT NULL AND "ws_bill_addr_sk" IS NOT NULL AND "ws_item_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "ca_address_sk", "ca_gmt_offset"
FROM (SELECT "ca_address_sk", "ca_gmt_offset"
FROM "CUSTOMER_ADDRESS") AS "t2"
WHERE "ca_gmt_offset" = -8 AND "ca_address_sk" IS NOT NULL) AS "t4" ON "t1"."ws_bill_addr_sk" = "t4"."ca_address_sk"
INNER JOIN (SELECT "i_item_sk", "i_item_id"
FROM (SELECT "i_item_sk", "i_item_id"
FROM "ITEM") AS "t5"
WHERE "i_item_id" IS NOT NULL AND "i_item_sk" IS NOT NULL) AS "t7" ON "t1"."ws_item_sk" = "t7"."i_item_sk"
INNER JOIN (SELECT "d_date_sk", "d_year", "d_moy"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t8"
WHERE "d_year" = 2000 AND "d_moy" = 1 AND "d_date_sk" IS NOT NULL) AS "t10" ON "t1"."ws_sold_date_sk" = "t10"."d_date_sk"
                    hive.sql.query.fieldNames ws_sold_date_sk,ws_item_sk,ws_bill_addr_sk,ws_ext_sales_price,d_date_sk,d_year,d_moy,ca_address_sk,ca_gmt_offset,i_item_sk,i_item_id
                    hive.sql.query.fieldTypes int,int,int,decimal(7,2),int,int,int,int,decimal(5,2),int,char(16)
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 212 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ws_ext_sales_price (type: decimal(7,2)), i_item_id (type: char(16))
                    outputColumnNames: _col3, _col10
                    Statistics: Num rows: 1 Data size: 212 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col10 (type: char(16))
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col10 (type: char(16))
                      Statistics: Num rows: 1 Data size: 212 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col3 (type: decimal(7,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: item
                  properties:
                    hive.sql.query SELECT "i_item_id"
FROM (SELECT "i_item_id", "i_color"
FROM "ITEM") AS "t"
WHERE "i_color" IN ('chiffon', 'lace', 'orchid') AND "i_item_id" IS NOT NULL
                    hive.sql.query.fieldNames i_item_id
                    hive.sql.query.fieldTypes char(16)
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: i_item_id (type: char(16))
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      keys: _col0 (type: char(16))
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: char(16))
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: char(16))
                        Statistics: Num rows: 1 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: char(16))
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: char(16))
                        Statistics: Num rows: 1 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: char(16))
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: char(16))
                        Statistics: Num rows: 1 Data size: 100 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 10 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col10 (type: char(16))
                  1 _col0 (type: char(16))
                outputColumnNames: _col3, _col10
                Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col3)
                  keys: _col10 (type: char(16))
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: char(16))
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: char(16))
                    Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: decimal(17,2))
        Reducer 11 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: char(16))
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col1)
                  keys: _col0 (type: char(16))
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 3 Data size: 699 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: char(16))
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: char(16))
                    Statistics: Num rows: 3 Data size: 699 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: decimal(27,2))
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col10 (type: char(16))
                  1 _col0 (type: char(16))
                outputColumnNames: _col3, _col10
                Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col3)
                  keys: _col10 (type: char(16))
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: char(16))
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: char(16))
                    Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: decimal(17,2))
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: char(16))
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col1)
                  keys: _col0 (type: char(16))
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 3 Data size: 699 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: char(16))
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: char(16))
                    Statistics: Num rows: 3 Data size: 699 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: decimal(27,2))
        Reducer 5 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: char(16))
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                Top N Key Operator
                  sort order: +
                  keys: _col1 (type: decimal(27,2))
                  null sort order: z
                  Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                  top n: 100
                  Reduce Output Operator
                    key expressions: _col1 (type: decimal(27,2))
                    null sort order: z
                    sort order: +
                    Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: char(16))
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: char(16)), KEY.reducesinkkey0 (type: decimal(27,2))
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 8 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col10 (type: char(16))
                  1 _col0 (type: char(16))
                outputColumnNames: _col3, _col10
                Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col3)
                  keys: _col10 (type: char(16))
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: char(16))
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: char(16))
                    Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: decimal(17,2))
        Reducer 9 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: char(16))
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 233 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col1)
                  keys: _col0 (type: char(16))
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 3 Data size: 699 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: char(16))
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: char(16))
                    Statistics: Num rows: 3 Data size: 699 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: decimal(27,2))
        Union 4 
            Vertex: Union 4

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

PREHOOK: query: WITH ss AS 
( 
         SELECT   i_item_id, 
                  Sum(ss_ext_sales_price) total_sales 
         FROM     store_sales, 
                  date_dim, 
                  customer_address, 
                  item 
         WHERE    i_item_id IN 
                  ( 
                         SELECT i_item_id 
                         FROM   item 
                         WHERE  i_color IN ('orchid', 
                                            'chiffon', 
                                            'lace')) 
         AND      ss_item_sk = i_item_sk 
         AND      ss_sold_date_sk = d_date_sk 
         AND      d_year = 2000 
         AND      d_moy = 1 
         AND      ss_addr_sk = ca_address_sk 
         AND      ca_gmt_offset = -8 
         GROUP BY i_item_id), cs AS 
( 
         SELECT   i_item_id, 
                  Sum(cs_ext_sales_price) total_sales 
         FROM     catalog_sales, 
                  date_dim, 
                  customer_address, 
                  item 
         WHERE    i_item_id IN 
                  ( 
                         SELECT i_item_id 
                         FROM   item 
                         WHERE  i_color IN ('orchid', 
                                            'chiffon', 
                                            'lace')) 
         AND      cs_item_sk = i_item_sk 
         AND      cs_sold_date_sk = d_date_sk 
         AND      d_year = 2000 
         AND      d_moy = 1 
         AND      cs_bill_addr_sk = ca_address_sk 
         AND      ca_gmt_offset = -8 
         GROUP BY i_item_id), ws AS 
( 
         SELECT   i_item_id, 
                  Sum(ws_ext_sales_price) total_sales 
         FROM     web_sales, 
                  date_dim, 
                  customer_address, 
                  item 
         WHERE    i_item_id IN 
                  ( 
                         SELECT i_item_id 
                         FROM   item 
                         WHERE  i_color IN ('orchid', 
                                            'chiffon', 
                                            'lace')) 
         AND      ws_item_sk = i_item_sk 
         AND      ws_sold_date_sk = d_date_sk 
         AND      d_year = 2000 
         AND      d_moy = 1 
         AND      ws_bill_addr_sk = ca_address_sk 
         AND      ca_gmt_offset = -8 
         GROUP BY i_item_id) 
SELECT   i_item_id , 
         Sum(total_sales) total_sales 
FROM     ( 
                SELECT * 
                FROM   ss 
                UNION ALL 
                SELECT * 
                FROM   cs 
                UNION ALL 
                SELECT * 
                FROM   ws) tmp1 
GROUP BY i_item_id 
ORDER BY total_sales limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: WITH ss AS 
( 
         SELECT   i_item_id, 
                  Sum(ss_ext_sales_price) total_sales 
         FROM     store_sales, 
                  date_dim, 
                  customer_address, 
                  item 
         WHERE    i_item_id IN 
                  ( 
                         SELECT i_item_id 
                         FROM   item 
                         WHERE  i_color IN ('orchid', 
                                            'chiffon', 
                                            'lace')) 
         AND      ss_item_sk = i_item_sk 
         AND      ss_sold_date_sk = d_date_sk 
         AND      d_year = 2000 
         AND      d_moy = 1 
         AND      ss_addr_sk = ca_address_sk 
         AND      ca_gmt_offset = -8 
         GROUP BY i_item_id), cs AS 
( 
         SELECT   i_item_id, 
                  Sum(cs_ext_sales_price) total_sales 
         FROM     catalog_sales, 
                  date_dim, 
                  customer_address, 
                  item 
         WHERE    i_item_id IN 
                  ( 
                         SELECT i_item_id 
                         FROM   item 
                         WHERE  i_color IN ('orchid', 
                                            'chiffon', 
                                            'lace')) 
         AND      cs_item_sk = i_item_sk 
         AND      cs_sold_date_sk = d_date_sk 
         AND      d_year = 2000 
         AND      d_moy = 1 
         AND      cs_bill_addr_sk = ca_address_sk 
         AND      ca_gmt_offset = -8 
         GROUP BY i_item_id), ws AS 
( 
         SELECT   i_item_id, 
                  Sum(ws_ext_sales_price) total_sales 
         FROM     web_sales, 
                  date_dim, 
                  customer_address, 
                  item 
         WHERE    i_item_id IN 
                  ( 
                         SELECT i_item_id 
                         FROM   item 
                         WHERE  i_color IN ('orchid', 
                                            'chiffon', 
                                            'lace')) 
         AND      ws_item_sk = i_item_sk 
         AND      ws_sold_date_sk = d_date_sk 
         AND      d_year = 2000 
         AND      d_moy = 1 
         AND      ws_bill_addr_sk = ca_address_sk 
         AND      ca_gmt_offset = -8 
         GROUP BY i_item_id) 
SELECT   i_item_id , 
         Sum(total_sales) total_sales 
FROM     ( 
                SELECT * 
                FROM   ss 
                UNION ALL 
                SELECT * 
                FROM   cs 
                UNION ALL 
                SELECT * 
                FROM   ws) tmp1 
GROUP BY i_item_id 
ORDER BY total_sales limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
PREHOOK: query: explain
WITH sr_items AS 
( 
         SELECT   i_item_id               item_id, 
                  Sum(sr_return_quantity) sr_item_qty 
         FROM     store_returns, 
                  item, 
                  date_dim 
         WHERE    sr_item_sk = i_item_sk 
         AND      d_date IN 
                  ( 
                         SELECT d_date 
                         FROM   date_dim 
                         WHERE  d_week_seq IN 
                                ( 
                                       SELECT d_week_seq 
                                       FROM   date_dim 
                                       WHERE  d_date IN ('1998-01-02', 
                                                         '1998-10-15', 
                                                         '1998-11-10'))) 
         AND      sr_returned_date_sk = d_date_sk 
         GROUP BY i_item_id), cr_items AS 
( 
         SELECT   i_item_id               item_id, 
                  Sum(cr_return_quantity) cr_item_qty 
         FROM     catalog_returns, 
                  item, 
                  date_dim 
         WHERE    cr_item_sk = i_item_sk 
         AND      d_date IN 
                  ( 
                         SELECT d_date 
                         FROM   date_dim 
                         WHERE  d_week_seq IN 
                                ( 
                                       SELECT d_week_seq 
                                       FROM   date_dim 
                                       WHERE  d_date IN ('1998-01-02', 
                                                         '1998-10-15', 
                                                         '1998-11-10'))) 
         AND      cr_returned_date_sk = d_date_sk 
         GROUP BY i_item_id), wr_items AS 
( 
         SELECT   i_item_id               item_id, 
                  Sum(wr_return_quantity) wr_item_qty 
         FROM     web_returns, 
                  item, 
                  date_dim 
         WHERE    wr_item_sk = i_item_sk 
         AND      d_date IN 
                  ( 
                         SELECT d_date 
                         FROM   date_dim 
                         WHERE  d_week_seq IN 
                                ( 
                                       SELECT d_week_seq 
                                       FROM   date_dim 
                                       WHERE  d_date IN ('1998-01-02', 
                                                         '1998-10-15', 
                                                         '1998-11-10'))) 
         AND      wr_returned_date_sk = d_date_sk 
         GROUP BY i_item_id) 
SELECT   sr_items.item_id , 
         sr_item_qty , 
         sr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 sr_dev , 
         cr_item_qty , 
         cr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 cr_dev , 
         wr_item_qty , 
         wr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 wr_dev , 
         (sr_item_qty+cr_item_qty+wr_item_qty)/3.0                   average 
FROM     sr_items , 
         cr_items , 
         wr_items 
WHERE    sr_items.item_id=cr_items.item_id 
AND      sr_items.item_id=wr_items.item_id 
ORDER BY sr_items.item_id , 
         sr_item_qty limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@web_returns
#### A masked pattern was here ####
POSTHOOK: query: explain
WITH sr_items AS 
( 
         SELECT   i_item_id               item_id, 
                  Sum(sr_return_quantity) sr_item_qty 
         FROM     store_returns, 
                  item, 
                  date_dim 
         WHERE    sr_item_sk = i_item_sk 
         AND      d_date IN 
                  ( 
                         SELECT d_date 
                         FROM   date_dim 
                         WHERE  d_week_seq IN 
                                ( 
                                       SELECT d_week_seq 
                                       FROM   date_dim 
                                       WHERE  d_date IN ('1998-01-02', 
                                                         '1998-10-15', 
                                                         '1998-11-10'))) 
         AND      sr_returned_date_sk = d_date_sk 
         GROUP BY i_item_id), cr_items AS 
( 
         SELECT   i_item_id               item_id, 
                  Sum(cr_return_quantity) cr_item_qty 
         FROM     catalog_returns, 
                  item, 
                  date_dim 
         WHERE    cr_item_sk = i_item_sk 
         AND      d_date IN 
                  ( 
                         SELECT d_date 
                         FROM   date_dim 
                         WHERE  d_week_seq IN 
                                ( 
                                       SELECT d_week_seq 
                                       FROM   date_dim 
                                       WHERE  d_date IN ('1998-01-02', 
                                                         '1998-10-15', 
                                                         '1998-11-10'))) 
         AND      cr_returned_date_sk = d_date_sk 
         GROUP BY i_item_id), wr_items AS 
( 
         SELECT   i_item_id               item_id, 
                  Sum(wr_return_quantity) wr_item_qty 
         FROM     web_returns, 
                  item, 
                  date_dim 
         WHERE    wr_item_sk = i_item_sk 
         AND      d_date IN 
                  ( 
                         SELECT d_date 
                         FROM   date_dim 
                         WHERE  d_week_seq IN 
                                ( 
                                       SELECT d_week_seq 
                                       FROM   date_dim 
                                       WHERE  d_date IN ('1998-01-02', 
                                                         '1998-10-15', 
                                                         '1998-11-10'))) 
         AND      wr_returned_date_sk = d_date_sk 
         GROUP BY i_item_id) 
SELECT   sr_items.item_id , 
         sr_item_qty , 
         sr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 sr_dev , 
         cr_item_qty , 
         cr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 cr_dev , 
         wr_item_qty , 
         wr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 wr_dev , 
         (sr_item_qty+cr_item_qty+wr_item_qty)/3.0                   average 
FROM     sr_items , 
         cr_items , 
         wr_items 
WHERE    sr_items.item_id=cr_items.item_id 
AND      sr_items.item_id=wr_items.item_id 
ORDER BY sr_items.item_id , 
         sr_item_qty limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@web_returns
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
        Reducer 11 <- Map 15 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
        Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 10 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
        Reducer 5 <- Reducer 12 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
        Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
        Reducer 8 <- Map 13 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
        Reducer 9 <- Map 14 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: store_returns
                  properties:
                    hive.sql.query SELECT "t1"."sr_returned_date_sk", "t1"."sr_item_sk", "t1"."sr_return_quantity", "t4"."i_item_sk", "t4"."i_item_id", "t7"."d_date_sk", "t7"."d_date"
FROM (SELECT "sr_returned_date_sk", "sr_item_sk", "sr_return_quantity"
FROM (SELECT "sr_returned_date_sk", "sr_item_sk", "sr_return_quantity"
FROM "STORE_RETURNS") AS "t"
WHERE "sr_item_sk" IS NOT NULL AND "sr_returned_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "i_item_sk", "i_item_id"
FROM (SELECT "i_item_sk", "i_item_id"
FROM "ITEM") AS "t2"
WHERE "i_item_sk" IS NOT NULL AND "i_item_id" IS NOT NULL) AS "t4" ON "t1"."sr_item_sk" = "t4"."i_item_sk"
INNER JOIN (SELECT "d_date_sk", "d_date"
FROM (SELECT "d_date_sk", "d_date"
FROM "DATE_DIM") AS "t5"
WHERE "d_date" IS NOT NULL AND "d_date_sk" IS NOT NULL) AS "t7" ON "t1"."sr_returned_date_sk" = "t7"."d_date_sk"
                    hive.sql.query.fieldNames sr_returned_date_sk,sr_item_sk,sr_return_quantity,i_item_sk,i_item_id,d_date_sk,d_date
                    hive.sql.query.fieldTypes int,int,int,int,char(16),int,date
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 160 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: sr_return_quantity (type: int), i_item_id (type: char(16)), d_date (type: date)
                    outputColumnNames: _col2, _col4, _col6
                    Statistics: Num rows: 1 Data size: 160 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col6 (type: date)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col6 (type: date)
                      Statistics: Num rows: 1 Data size: 160 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col2 (type: int), _col4 (type: char(16))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 13 
            Map Operator Tree:
                TableScan
                  alias: date_dim
                  properties:
                    hive.sql.query SELECT "d_week_seq"
FROM (SELECT "d_date", "d_week_seq"
FROM "DATE_DIM") AS "t"
WHERE "d_date" IN (DATE '1998-01-02', DATE '1998-10-15', DATE '1998-11-10') AND "d_week_seq" IS NOT NULL
                    hive.sql.query.fieldNames d_week_seq
                    hive.sql.query.fieldTypes int
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: d_week_seq (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      keys: _col0 (type: int)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 14 
            Map Operator Tree:
                TableScan
                  alias: catalog_returns
                  properties:
                    hive.sql.query SELECT "t1"."cr_returned_date_sk", "t1"."cr_item_sk", "t1"."cr_return_quantity", "t4"."i_item_sk", "t4"."i_item_id", "t7"."d_date_sk", "t7"."d_date"
FROM (SELECT "cr_returned_date_sk", "cr_item_sk", "cr_return_quantity"
FROM (SELECT "cr_returned_date_sk", "cr_item_sk", "cr_return_quantity"
FROM "CATALOG_RETURNS") AS "t"
WHERE "cr_item_sk" IS NOT NULL AND "cr_returned_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "i_item_sk", "i_item_id"
FROM (SELECT "i_item_sk", "i_item_id"
FROM "ITEM") AS "t2"
WHERE "i_item_sk" IS NOT NULL AND "i_item_id" IS NOT NULL) AS "t4" ON "t1"."cr_item_sk" = "t4"."i_item_sk"
INNER JOIN (SELECT "d_date_sk", "d_date"
FROM (SELECT "d_date_sk", "d_date"
FROM "DATE_DIM") AS "t5"
WHERE "d_date" IS NOT NULL AND "d_date_sk" IS NOT NULL) AS "t7" ON "t1"."cr_returned_date_sk" = "t7"."d_date_sk"
                    hive.sql.query.fieldNames cr_returned_date_sk,cr_item_sk,cr_return_quantity,i_item_sk,i_item_id,d_date_sk,d_date
                    hive.sql.query.fieldTypes int,int,int,int,char(16),int,date
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 160 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: cr_return_quantity (type: int), i_item_id (type: char(16)), d_date (type: date)
                    outputColumnNames: _col2, _col4, _col6
                    Statistics: Num rows: 1 Data size: 160 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col6 (type: date)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col6 (type: date)
                      Statistics: Num rows: 1 Data size: 160 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col2 (type: int), _col4 (type: char(16))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 15 
            Map Operator Tree:
                TableScan
                  alias: web_returns
                  properties:
                    hive.sql.query SELECT "t1"."wr_returned_date_sk", "t1"."wr_item_sk", "t1"."wr_return_quantity", "t4"."i_item_sk", "t4"."i_item_id", "t7"."d_date_sk", "t7"."d_date"
FROM (SELECT "wr_returned_date_sk", "wr_item_sk", "wr_return_quantity"
FROM (SELECT "wr_returned_date_sk", "wr_item_sk", "wr_return_quantity"
FROM "WEB_RETURNS") AS "t"
WHERE "wr_item_sk" IS NOT NULL AND "wr_returned_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "i_item_sk", "i_item_id"
FROM (SELECT "i_item_sk", "i_item_id"
FROM "ITEM") AS "t2"
WHERE "i_item_sk" IS NOT NULL AND "i_item_id" IS NOT NULL) AS "t4" ON "t1"."wr_item_sk" = "t4"."i_item_sk"
INNER JOIN (SELECT "d_date_sk", "d_date"
FROM (SELECT "d_date_sk", "d_date"
FROM "DATE_DIM") AS "t5"
WHERE "d_date" IS NOT NULL AND "d_date_sk" IS NOT NULL) AS "t7" ON "t1"."wr_returned_date_sk" = "t7"."d_date_sk"
                    hive.sql.query.fieldNames wr_returned_date_sk,wr_item_sk,wr_return_quantity,i_item_sk,i_item_id,d_date_sk,d_date
                    hive.sql.query.fieldTypes int,int,int,int,char(16),int,date
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 160 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: wr_return_quantity (type: int), i_item_id (type: char(16)), d_date (type: date)
                    outputColumnNames: _col2, _col4, _col6
                    Statistics: Num rows: 1 Data size: 160 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col6 (type: date)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col6 (type: date)
                      Statistics: Num rows: 1 Data size: 160 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col2 (type: int), _col4 (type: char(16))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: date_dim
                  properties:
                    hive.sql.query SELECT "d_date", "d_week_seq"
FROM (SELECT "d_date", "d_week_seq"
FROM "DATE_DIM") AS "t"
WHERE "d_week_seq" IS NOT NULL AND "d_date" IS NOT NULL
                    hive.sql.query.fieldNames d_date,d_week_seq
                    hive.sql.query.fieldTypes date,int
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 60 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: d_date (type: date), d_week_seq (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 60 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 1 Data size: 60 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: date)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 10 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: char(16))
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: char(16)), _col1 (type: bigint), UDFToDouble(_col1) (type: double)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: char(16))
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: char(16))
                    Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: bigint), _col2 (type: double)
        Reducer 11 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col6 (type: date)
                  1 _col0 (type: date)
                outputColumnNames: _col2, _col4
                Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col2)
                  keys: _col4 (type: char(16))
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: char(16))
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: char(16))
                    Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: bigint)
        Reducer 12 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: char(16))
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: char(16)), _col1 (type: bigint), UDFToDouble(_col1) (type: double)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: char(16))
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: char(16))
                    Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: bigint), _col2 (type: double)
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col6 (type: date)
                  1 _col0 (type: date)
                outputColumnNames: _col2, _col4
                Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col2)
                  keys: _col4 (type: char(16))
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: char(16))
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: char(16))
                    Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: bigint)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: char(16))
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: char(16)), _col1 (type: bigint), UDFToDouble(_col1) (type: double)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: char(16))
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: char(16))
                    Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: bigint), _col2 (type: double)
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: char(16))
                  1 _col0 (type: char(16))
                outputColumnNames: _col0, _col1, _col2, _col4, _col5
                Statistics: Num rows: 1 Data size: 193 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: char(16))
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col0 (type: char(16))
                  Statistics: Num rows: 1 Data size: 193 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: bigint), _col2 (type: double), _col4 (type: bigint), _col5 (type: double)
        Reducer 5 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: char(16))
                  1 _col0 (type: char(16))
                outputColumnNames: _col0, _col1, _col2, _col4, _col5, _col7, _col8
                Statistics: Num rows: 1 Data size: 212 Basic stats: COMPLETE Column stats: NONE
                Top N Key Operator
                  sort order: ++
                  keys: _col0 (type: char(16)), _col1 (type: bigint)
                  null sort order: zz
                  Statistics: Num rows: 1 Data size: 212 Basic stats: COMPLETE Column stats: NONE
                  top n: 100
                  Select Operator
                    expressions: _col0 (type: char(16)), _col1 (type: bigint), (((_col2 / UDFToDouble(((_col1 + _col4) + _col7))) / 3.0D) * 100.0D) (type: double), _col4 (type: bigint), (((_col5 / UDFToDouble(((_col1 + _col4) + _col7))) / 3.0D) * 100.0D) (type: double), _col7 (type: bigint), (((_col8 / UDFToDouble(((_col1 + _col4) + _col7))) / 3.0D) * 100.0D) (type: double), (CAST( ((_col1 + _col4) + _col7) AS decimal(19,0)) / 3) (type: decimal(25,6))
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                    Statistics: Num rows: 1 Data size: 212 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: char(16)), _col1 (type: bigint)
                      null sort order: zz
                      sort order: ++
                      Statistics: Num rows: 1 Data size: 212 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col2 (type: double), _col3 (type: bigint), _col4 (type: double), _col5 (type: bigint), _col6 (type: double), _col7 (type: decimal(25,6))
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: char(16)), KEY.reducesinkkey1 (type: bigint), VALUE._col0 (type: double), VALUE._col1 (type: bigint), VALUE._col2 (type: double), VALUE._col3 (type: bigint), VALUE._col4 (type: double), VALUE._col5 (type: decimal(25,6))
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                Statistics: Num rows: 1 Data size: 212 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 212 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 212 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 8 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 66 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  keys: _col0 (type: date)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0
                  Statistics: Num rows: 1 Data size: 66 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: date)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: date)
                    Statistics: Num rows: 1 Data size: 66 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: date)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: date)
                    Statistics: Num rows: 1 Data size: 66 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: date)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: date)
                    Statistics: Num rows: 1 Data size: 66 Basic stats: COMPLETE Column stats: NONE
        Reducer 9 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col6 (type: date)
                  1 _col0 (type: date)
                outputColumnNames: _col2, _col4
                Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col2)
                  keys: _col4 (type: char(16))
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: char(16))
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: char(16))
                    Statistics: Num rows: 1 Data size: 176 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: bigint)

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

PREHOOK: query: explain
with ss as (
			 select
				  i_manufact_id,sum(ss_ext_sales_price) total_sales
			 from
				store_sales,
				date_dim,
				 customer_address,
				 item
			 where
				 i_manufact_id in (select
			  i_manufact_id
			from
			 item
			where i_category in ('Books'))
			 and     ss_item_sk              = i_item_sk
			 and     ss_sold_date_sk         = d_date_sk
			 and     d_year                  = 1999
			 and     d_moy                   = 3
			 and     ss_addr_sk              = ca_address_sk
			 and     ca_gmt_offset           = -6 
			 group by i_manufact_id),
			 cs as (
			 select
				  i_manufact_id,sum(cs_ext_sales_price) total_sales
			 from
				catalog_sales,
				date_dim,
				 customer_address,
				 item
			 where
				 i_manufact_id               in (select
			  i_manufact_id
			from
			 item
			where i_category in ('Books'))
			 and     cs_item_sk              = i_item_sk
			 and     cs_sold_date_sk         = d_date_sk
			 and     d_year                  = 1999
			 and     d_moy                   = 3
			 and     cs_bill_addr_sk         = ca_address_sk
			 and     ca_gmt_offset           = -6 
			 group by i_manufact_id),
			 ws as (
			 select
				  i_manufact_id,sum(ws_ext_sales_price) total_sales
			 from
				web_sales,
				date_dim,
				 customer_address,
				 item
			 where
				 i_manufact_id               in (select
			  i_manufact_id
			from
			 item
			where i_category in ('Books'))
			 and     ws_item_sk              = i_item_sk
			 and     ws_sold_date_sk         = d_date_sk
			 and     d_year                  = 1999
			 and     d_moy                   = 3
			 and     ws_bill_addr_sk         = ca_address_sk
			 and     ca_gmt_offset           = -6
			 group by i_manufact_id)
			  select  i_manufact_id ,sum(total_sales) total_sales
			 from  (select * from ss 
				union all
				select * from cs 
				union all
				select * from ws) tmp1
			 group by i_manufact_id
			 order by total_sales
			limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
with ss as (
			 select
				  i_manufact_id,sum(ss_ext_sales_price) total_sales
			 from
				store_sales,
				date_dim,
				 customer_address,
				 item
			 where
				 i_manufact_id in (select
			  i_manufact_id
			from
			 item
			where i_category in ('Books'))
			 and     ss_item_sk              = i_item_sk
			 and     ss_sold_date_sk         = d_date_sk
			 and     d_year                  = 1999
			 and     d_moy                   = 3
			 and     ss_addr_sk              = ca_address_sk
			 and     ca_gmt_offset           = -6 
			 group by i_manufact_id),
			 cs as (
			 select
				  i_manufact_id,sum(cs_ext_sales_price) total_sales
			 from
				catalog_sales,
				date_dim,
				 customer_address,
				 item
			 where
				 i_manufact_id               in (select
			  i_manufact_id
			from
			 item
			where i_category in ('Books'))
			 and     cs_item_sk              = i_item_sk
			 and     cs_sold_date_sk         = d_date_sk
			 and     d_year                  = 1999
			 and     d_moy                   = 3
			 and     cs_bill_addr_sk         = ca_address_sk
			 and     ca_gmt_offset           = -6 
			 group by i_manufact_id),
			 ws as (
			 select
				  i_manufact_id,sum(ws_ext_sales_price) total_sales
			 from
				web_sales,
				date_dim,
				 customer_address,
				 item
			 where
				 i_manufact_id               in (select
			  i_manufact_id
			from
			 item
			where i_category in ('Books'))
			 and     ws_item_sk              = i_item_sk
			 and     ws_sold_date_sk         = d_date_sk
			 and     d_year                  = 1999
			 and     d_moy                   = 3
			 and     ws_bill_addr_sk         = ca_address_sk
			 and     ca_gmt_offset           = -6
			 group by i_manufact_id)
			  select  i_manufact_id ,sum(total_sales) total_sales
			 from  (select * from ss 
				union all
				select * from cs 
				union all
				select * from ws) tmp1
			 group by i_manufact_id
			 order by total_sales
			limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 10 <- Map 13 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
        Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Union 4 (CONTAINS)
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Union 4 (CONTAINS)
        Reducer 5 <- Union 4 (SIMPLE_EDGE)
        Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
        Reducer 8 <- Map 12 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
        Reducer 9 <- Reducer 8 (SIMPLE_EDGE), Union 4 (CONTAINS)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "t1"."ss_sold_date_sk", "t1"."ss_item_sk", "t1"."ss_addr_sk", "t1"."ss_ext_sales_price", "t10"."d_date_sk", "t10"."d_year", "t10"."d_moy", "t4"."ca_address_sk", "t4"."ca_gmt_offset", "t7"."i_item_sk", "t7"."i_manufact_id"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk", "ss_addr_sk", "ss_ext_sales_price"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk", "ss_addr_sk", "ss_ext_sales_price"
FROM "STORE_SALES") AS "t"
WHERE "ss_sold_date_sk" IS NOT NULL AND "ss_addr_sk" IS NOT NULL AND "ss_item_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "ca_address_sk", "ca_gmt_offset"
FROM (SELECT "ca_address_sk", "ca_gmt_offset"
FROM "CUSTOMER_ADDRESS") AS "t2"
WHERE "ca_gmt_offset" = -6 AND "ca_address_sk" IS NOT NULL) AS "t4" ON "t1"."ss_addr_sk" = "t4"."ca_address_sk"
INNER JOIN (SELECT "i_item_sk", "i_manufact_id"
FROM (SELECT "i_item_sk", "i_manufact_id"
FROM "ITEM") AS "t5"
WHERE "i_manufact_id" IS NOT NULL AND "i_item_sk" IS NOT NULL) AS "t7" ON "t1"."ss_item_sk" = "t7"."i_item_sk"
INNER JOIN (SELECT "d_date_sk", "d_year", "d_moy"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t8"
WHERE "d_year" = 1999 AND "d_moy" = 3 AND "d_date_sk" IS NOT NULL) AS "t10" ON "t1"."ss_sold_date_sk" = "t10"."d_date_sk"
                    hive.sql.query.fieldNames ss_sold_date_sk,ss_item_sk,ss_addr_sk,ss_ext_sales_price,d_date_sk,d_year,d_moy,ca_address_sk,ca_gmt_offset,i_item_sk,i_manufact_id
                    hive.sql.query.fieldTypes int,int,int,decimal(7,2),int,int,int,int,decimal(5,2),int,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ss_ext_sales_price (type: decimal(7,2)), i_manufact_id (type: int)
                    outputColumnNames: _col3, _col10
                    Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col10 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col10 (type: int)
                      Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col3 (type: decimal(7,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 12 
            Map Operator Tree:
                TableScan
                  alias: catalog_sales
                  properties:
                    hive.sql.query SELECT "t1"."cs_sold_date_sk", "t1"."cs_bill_addr_sk", "t1"."cs_item_sk", "t1"."cs_ext_sales_price", "t10"."d_date_sk", "t10"."d_year", "t10"."d_moy", "t4"."ca_address_sk", "t4"."ca_gmt_offset", "t7"."i_item_sk", "t7"."i_manufact_id"
FROM (SELECT "cs_sold_date_sk", "cs_bill_addr_sk", "cs_item_sk", "cs_ext_sales_price"
FROM (SELECT "cs_sold_date_sk", "cs_bill_addr_sk", "cs_item_sk", "cs_ext_sales_price"
FROM "CATALOG_SALES") AS "t"
WHERE "cs_sold_date_sk" IS NOT NULL AND "cs_bill_addr_sk" IS NOT NULL AND "cs_item_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "ca_address_sk", "ca_gmt_offset"
FROM (SELECT "ca_address_sk", "ca_gmt_offset"
FROM "CUSTOMER_ADDRESS") AS "t2"
WHERE "ca_gmt_offset" = -6 AND "ca_address_sk" IS NOT NULL) AS "t4" ON "t1"."cs_bill_addr_sk" = "t4"."ca_address_sk"
INNER JOIN (SELECT "i_item_sk", "i_manufact_id"
FROM (SELECT "i_item_sk", "i_manufact_id"
FROM "ITEM") AS "t5"
WHERE "i_manufact_id" IS NOT NULL AND "i_item_sk" IS NOT NULL) AS "t7" ON "t1"."cs_item_sk" = "t7"."i_item_sk"
INNER JOIN (SELECT "d_date_sk", "d_year", "d_moy"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t8"
WHERE "d_year" = 1999 AND "d_moy" = 3 AND "d_date_sk" IS NOT NULL) AS "t10" ON "t1"."cs_sold_date_sk" = "t10"."d_date_sk"
                    hive.sql.query.fieldNames cs_sold_date_sk,cs_bill_addr_sk,cs_item_sk,cs_ext_sales_price,d_date_sk,d_year,d_moy,ca_address_sk,ca_gmt_offset,i_item_sk,i_manufact_id
                    hive.sql.query.fieldTypes int,int,int,decimal(7,2),int,int,int,int,decimal(5,2),int,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: cs_ext_sales_price (type: decimal(7,2)), i_manufact_id (type: int)
                    outputColumnNames: _col3, _col10
                    Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col10 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col10 (type: int)
                      Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col3 (type: decimal(7,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 13 
            Map Operator Tree:
                TableScan
                  alias: web_sales
                  properties:
                    hive.sql.query SELECT "t1"."ws_sold_date_sk", "t1"."ws_item_sk", "t1"."ws_bill_addr_sk", "t1"."ws_ext_sales_price", "t10"."d_date_sk", "t10"."d_year", "t10"."d_moy", "t4"."ca_address_sk", "t4"."ca_gmt_offset", "t7"."i_item_sk", "t7"."i_manufact_id"
FROM (SELECT "ws_sold_date_sk", "ws_item_sk", "ws_bill_addr_sk", "ws_ext_sales_price"
FROM (SELECT "ws_sold_date_sk", "ws_item_sk", "ws_bill_addr_sk", "ws_ext_sales_price"
FROM "WEB_SALES") AS "t"
WHERE "ws_sold_date_sk" IS NOT NULL AND "ws_bill_addr_sk" IS NOT NULL AND "ws_item_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "ca_address_sk", "ca_gmt_offset"
FROM (SELECT "ca_address_sk", "ca_gmt_offset"
FROM "CUSTOMER_ADDRESS") AS "t2"
WHERE "ca_gmt_offset" = -6 AND "ca_address_sk" IS NOT NULL) AS "t4" ON "t1"."ws_bill_addr_sk" = "t4"."ca_address_sk"
INNER JOIN (SELECT "i_item_sk", "i_manufact_id"
FROM (SELECT "i_item_sk", "i_manufact_id"
FROM "ITEM") AS "t5"
WHERE "i_manufact_id" IS NOT NULL AND "i_item_sk" IS NOT NULL) AS "t7" ON "t1"."ws_item_sk" = "t7"."i_item_sk"
INNER JOIN (SELECT "d_date_sk", "d_year", "d_moy"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t8"
WHERE "d_year" = 1999 AND "d_moy" = 3 AND "d_date_sk" IS NOT NULL) AS "t10" ON "t1"."ws_sold_date_sk" = "t10"."d_date_sk"
                    hive.sql.query.fieldNames ws_sold_date_sk,ws_item_sk,ws_bill_addr_sk,ws_ext_sales_price,d_date_sk,d_year,d_moy,ca_address_sk,ca_gmt_offset,i_item_sk,i_manufact_id
                    hive.sql.query.fieldTypes int,int,int,decimal(7,2),int,int,int,int,decimal(5,2),int,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ws_ext_sales_price (type: decimal(7,2)), i_manufact_id (type: int)
                    outputColumnNames: _col3, _col10
                    Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col10 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col10 (type: int)
                      Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col3 (type: decimal(7,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: item
                  properties:
                    hive.sql.query SELECT "i_manufact_id"
FROM (SELECT "i_category", "i_manufact_id"
FROM "ITEM") AS "t"
WHERE "i_category" = 'Books                                             ' AND "i_manufact_id" IS NOT NULL
                    hive.sql.query.fieldNames i_manufact_id
                    hive.sql.query.fieldTypes int
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: i_manufact_id (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      keys: _col0 (type: int)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 10 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col10 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col3, _col10
                Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col3)
                  keys: _col10 (type: int)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: int)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: int)
                    Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: decimal(17,2))
        Reducer 11 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col1)
                  keys: _col0 (type: int)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 3 Data size: 381 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: int)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: int)
                    Statistics: Num rows: 3 Data size: 381 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: decimal(27,2))
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col10 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col3, _col10
                Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col3)
                  keys: _col10 (type: int)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: int)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: int)
                    Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: decimal(17,2))
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col1)
                  keys: _col0 (type: int)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 3 Data size: 381 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: int)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: int)
                    Statistics: Num rows: 3 Data size: 381 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: decimal(27,2))
        Reducer 5 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                Top N Key Operator
                  sort order: +
                  keys: _col1 (type: decimal(27,2))
                  null sort order: z
                  Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                  top n: 100
                  Reduce Output Operator
                    key expressions: _col1 (type: decimal(27,2))
                    null sort order: z
                    sort order: +
                    Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: int)
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: int), KEY.reducesinkkey0 (type: decimal(27,2))
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 8 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col10 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col3, _col10
                Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col3)
                  keys: _col10 (type: int)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: int)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: int)
                    Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: decimal(17,2))
        Reducer 9 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 127 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col1)
                  keys: _col0 (type: int)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 3 Data size: 381 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: int)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: int)
                    Statistics: Num rows: 3 Data size: 381 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: decimal(27,2))
        Union 4 
            Vertex: Union 4

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

PREHOOK: query: with ss as (
			 select
				  i_manufact_id,sum(ss_ext_sales_price) total_sales
			 from
				store_sales,
				date_dim,
				 customer_address,
				 item
			 where
				 i_manufact_id in (select
			  i_manufact_id
			from
			 item
			where i_category in ('Books'))
			 and     ss_item_sk              = i_item_sk
			 and     ss_sold_date_sk         = d_date_sk
			 and     d_year                  = 1999
			 and     d_moy                   = 3
			 and     ss_addr_sk              = ca_address_sk
			 and     ca_gmt_offset           = -6 
			 group by i_manufact_id),
			 cs as (
			 select
				  i_manufact_id,sum(cs_ext_sales_price) total_sales
			 from
				catalog_sales,
				date_dim,
				 customer_address,
				 item
			 where
				 i_manufact_id               in (select
			  i_manufact_id
			from
			 item
			where i_category in ('Books'))
			 and     cs_item_sk              = i_item_sk
			 and     cs_sold_date_sk         = d_date_sk
			 and     d_year                  = 1999
			 and     d_moy                   = 3
			 and     cs_bill_addr_sk         = ca_address_sk
			 and     ca_gmt_offset           = -6 
			 group by i_manufact_id),
			 ws as (
			 select
				  i_manufact_id,sum(ws_ext_sales_price) total_sales
			 from
				web_sales,
				date_dim,
				 customer_address,
				 item
			 where
				 i_manufact_id               in (select
			  i_manufact_id
			from
			 item
			where i_category in ('Books'))
			 and     ws_item_sk              = i_item_sk
			 and     ws_sold_date_sk         = d_date_sk
			 and     d_year                  = 1999
			 and     d_moy                   = 3
			 and     ws_bill_addr_sk         = ca_address_sk
			 and     ca_gmt_offset           = -6
			 group by i_manufact_id)
			  select  i_manufact_id ,sum(total_sales) total_sales
			 from  (select * from ss 
				union all
				select * from cs 
				union all
				select * from ws) tmp1
			 group by i_manufact_id
			 order by total_sales
			limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: with ss as (
			 select
				  i_manufact_id,sum(ss_ext_sales_price) total_sales
			 from
				store_sales,
				date_dim,
				 customer_address,
				 item
			 where
				 i_manufact_id in (select
			  i_manufact_id
			from
			 item
			where i_category in ('Books'))
			 and     ss_item_sk              = i_item_sk
			 and     ss_sold_date_sk         = d_date_sk
			 and     d_year                  = 1999
			 and     d_moy                   = 3
			 and     ss_addr_sk              = ca_address_sk
			 and     ca_gmt_offset           = -6 
			 group by i_manufact_id),
			 cs as (
			 select
				  i_manufact_id,sum(cs_ext_sales_price) total_sales
			 from
				catalog_sales,
				date_dim,
				 customer_address,
				 item
			 where
				 i_manufact_id               in (select
			  i_manufact_id
			from
			 item
			where i_category in ('Books'))
			 and     cs_item_sk              = i_item_sk
			 and     cs_sold_date_sk         = d_date_sk
			 and     d_year                  = 1999
			 and     d_moy                   = 3
			 and     cs_bill_addr_sk         = ca_address_sk
			 and     ca_gmt_offset           = -6 
			 group by i_manufact_id),
			 ws as (
			 select
				  i_manufact_id,sum(ws_ext_sales_price) total_sales
			 from
				web_sales,
				date_dim,
				 customer_address,
				 item
			 where
				 i_manufact_id               in (select
			  i_manufact_id
			from
			 item
			where i_category in ('Books'))
			 and     ws_item_sk              = i_item_sk
			 and     ws_sold_date_sk         = d_date_sk
			 and     d_year                  = 1999
			 and     d_moy                   = 3
			 and     ws_bill_addr_sk         = ca_address_sk
			 and     ca_gmt_offset           = -6
			 group by i_manufact_id)
			  select  i_manufact_id ,sum(total_sales) total_sales
			 from  (select * from ss 
				union all
				select * from cs 
				union all
				select * from ws) tmp1
			 group by i_manufact_id
			 order by total_sales
			limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
Warning: Shuffle Join MERGEJOIN[39][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
Warning: Shuffle Join MERGEJOIN[40][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 3' is a cross product
Warning: Shuffle Join MERGEJOIN[41][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3]] in Stage 'Reducer 4' is a cross product
Warning: Shuffle Join MERGEJOIN[42][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[43][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[44][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6]] in Stage 'Reducer 7' is a cross product
Warning: Shuffle Join MERGEJOIN[45][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6, $hdt$_7]] in Stage 'Reducer 8' is a cross product
PREHOOK: query: explain
select *
                          from (select count(*) as h8_30_to_9
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 8
                                  and time_dim.t_minute >= 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s1 join
                               (select count(*) as h9_to_9_30
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 9
                                  and time_dim.t_minute < 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s2 join
                               (select count(*) as h9_30_to_10
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 9
                                  and time_dim.t_minute >= 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s3 join
                               (select count(*) as h10_to_10_30
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 10
                                  and time_dim.t_minute < 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s4 join
                               (select count(*) as h10_30_to_11
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 10
                                  and time_dim.t_minute >= 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s5 join
                               (select count(*) as h11_to_11_30
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 11
                                  and time_dim.t_minute < 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s6 join
                               (select count(*) as h11_30_to_12
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 11
                                  and time_dim.t_minute >= 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s7 join
                               (select count(*) as h12_to_12_30
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 12
                                  and time_dim.t_minute < 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s8
PREHOOK: type: QUERY
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@time_dim
#### A masked pattern was here ####
POSTHOOK: query: explain
select *
                          from (select count(*) as h8_30_to_9
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 8
                                  and time_dim.t_minute >= 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s1 join
                               (select count(*) as h9_to_9_30
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 9
                                  and time_dim.t_minute < 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s2 join
                               (select count(*) as h9_30_to_10
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 9
                                  and time_dim.t_minute >= 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s3 join
                               (select count(*) as h10_to_10_30
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 10
                                  and time_dim.t_minute < 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s4 join
                               (select count(*) as h10_30_to_11
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 10
                                  and time_dim.t_minute >= 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s5 join
                               (select count(*) as h11_to_11_30
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 11
                                  and time_dim.t_minute < 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s6 join
                               (select count(*) as h11_30_to_12
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 11
                                  and time_dim.t_minute >= 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s7 join
                               (select count(*) as h12_to_12_30
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 12
                                  and time_dim.t_minute < 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s8
POSTHOOK: type: QUERY
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@time_dim
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 9 (XPROD_EDGE)
        Reducer 3 <- Map 10 (XPROD_EDGE), Reducer 2 (XPROD_EDGE)
        Reducer 4 <- Map 11 (XPROD_EDGE), Reducer 3 (XPROD_EDGE)
        Reducer 5 <- Map 12 (XPROD_EDGE), Reducer 4 (XPROD_EDGE)
        Reducer 6 <- Map 13 (XPROD_EDGE), Reducer 5 (XPROD_EDGE)
        Reducer 7 <- Map 14 (XPROD_EDGE), Reducer 6 (XPROD_EDGE)
        Reducer 8 <- Map 15 (XPROD_EDGE), Reducer 7 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT COUNT(*) AS "$f0"
FROM (SELECT "ss_sold_time_sk", "ss_hdemo_sk", "ss_store_sk"
FROM (SELECT "ss_sold_time_sk", "ss_hdemo_sk", "ss_store_sk"
FROM "STORE_SALES") AS "t"
WHERE "ss_hdemo_sk" IS NOT NULL AND "ss_sold_time_sk" IS NOT NULL AND "ss_store_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "hd_demo_sk"
FROM (SELECT "hd_demo_sk", "hd_dep_count", "hd_vehicle_count"
FROM "HOUSEHOLD_DEMOGRAPHICS") AS "t2"
WHERE "hd_vehicle_count" <= 5 AND ("hd_dep_count" = 4 AND "hd_vehicle_count" IS NOT NULL OR "hd_dep_count" = 2 AND "hd_vehicle_count" <= 2 OR "hd_dep_count" = 0 AND "hd_vehicle_count" <= 3) AND "hd_dep_count" IN (0, 2, 4) AND "hd_demo_sk" IS NOT NULL) AS "t4" ON "t1"."ss_hdemo_sk" = "t4"."hd_demo_sk"
INNER JOIN (SELECT "t_time_sk"
FROM (SELECT "t_time_sk", "t_hour", "t_minute"
FROM "TIME_DIM") AS "t5"
WHERE "t_minute" >= 30 AND "t_hour" = 8 AND "t_time_sk" IS NOT NULL) AS "t7" ON "t1"."ss_sold_time_sk" = "t7"."t_time_sk"
INNER JOIN (SELECT "s_store_sk"
FROM (SELECT "s_store_sk", "s_store_name"
FROM "STORE") AS "t8"
WHERE "s_store_name" = 'ese' AND "s_store_sk" IS NOT NULL) AS "t10" ON "t1"."ss_store_sk" = "t10"."s_store_sk"
                    hive.sql.query.fieldNames $f0
                    hive.sql.query.fieldTypes bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: $f0 (type: bigint)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 10 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT COUNT(*) AS "$f0"
FROM (SELECT "ss_sold_time_sk", "ss_hdemo_sk", "ss_store_sk"
FROM (SELECT "ss_sold_time_sk", "ss_hdemo_sk", "ss_store_sk"
FROM "STORE_SALES") AS "t"
WHERE "ss_hdemo_sk" IS NOT NULL AND "ss_sold_time_sk" IS NOT NULL AND "ss_store_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "hd_demo_sk"
FROM (SELECT "hd_demo_sk", "hd_dep_count", "hd_vehicle_count"
FROM "HOUSEHOLD_DEMOGRAPHICS") AS "t2"
WHERE "hd_vehicle_count" <= 5 AND ("hd_dep_count" = 4 AND "hd_vehicle_count" IS NOT NULL OR "hd_dep_count" = 2 AND "hd_vehicle_count" <= 2 OR "hd_dep_count" = 0 AND "hd_vehicle_count" <= 3) AND "hd_dep_count" IN (0, 2, 4) AND "hd_demo_sk" IS NOT NULL) AS "t4" ON "t1"."ss_hdemo_sk" = "t4"."hd_demo_sk"
INNER JOIN (SELECT "t_time_sk"
FROM (SELECT "t_time_sk", "t_hour", "t_minute"
FROM "TIME_DIM") AS "t5"
WHERE "t_minute" >= 30 AND "t_hour" = 11 AND "t_time_sk" IS NOT NULL) AS "t7" ON "t1"."ss_sold_time_sk" = "t7"."t_time_sk"
INNER JOIN (SELECT "s_store_sk"
FROM (SELECT "s_store_sk", "s_store_name"
FROM "STORE") AS "t8"
WHERE "s_store_name" = 'ese' AND "s_store_sk" IS NOT NULL) AS "t10" ON "t1"."ss_store_sk" = "t10"."s_store_sk"
                    hive.sql.query.fieldNames $f0
                    hive.sql.query.fieldTypes bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: $f0 (type: bigint)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 11 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT COUNT(*) AS "$f0"
FROM (SELECT "ss_sold_time_sk", "ss_hdemo_sk", "ss_store_sk"
FROM (SELECT "ss_sold_time_sk", "ss_hdemo_sk", "ss_store_sk"
FROM "STORE_SALES") AS "t"
WHERE "ss_hdemo_sk" IS NOT NULL AND "ss_sold_time_sk" IS NOT NULL AND "ss_store_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "hd_demo_sk"
FROM (SELECT "hd_demo_sk", "hd_dep_count", "hd_vehicle_count"
FROM "HOUSEHOLD_DEMOGRAPHICS") AS "t2"
WHERE "hd_vehicle_count" <= 5 AND ("hd_dep_count" = 4 AND "hd_vehicle_count" IS NOT NULL OR "hd_dep_count" = 2 AND "hd_vehicle_count" <= 2 OR "hd_dep_count" = 0 AND "hd_vehicle_count" <= 3) AND "hd_dep_count" IN (0, 2, 4) AND "hd_demo_sk" IS NOT NULL) AS "t4" ON "t1"."ss_hdemo_sk" = "t4"."hd_demo_sk"
INNER JOIN (SELECT "t_time_sk"
FROM (SELECT "t_time_sk", "t_hour", "t_minute"
FROM "TIME_DIM") AS "t5"
WHERE "t_minute" < 30 AND "t_hour" = 11 AND "t_time_sk" IS NOT NULL) AS "t7" ON "t1"."ss_sold_time_sk" = "t7"."t_time_sk"
INNER JOIN (SELECT "s_store_sk"
FROM (SELECT "s_store_sk", "s_store_name"
FROM "STORE") AS "t8"
WHERE "s_store_name" = 'ese' AND "s_store_sk" IS NOT NULL) AS "t10" ON "t1"."ss_store_sk" = "t10"."s_store_sk"
                    hive.sql.query.fieldNames $f0
                    hive.sql.query.fieldTypes bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: $f0 (type: bigint)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 12 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT COUNT(*) AS "$f0"
FROM (SELECT "ss_sold_time_sk", "ss_hdemo_sk", "ss_store_sk"
FROM (SELECT "ss_sold_time_sk", "ss_hdemo_sk", "ss_store_sk"
FROM "STORE_SALES") AS "t"
WHERE "ss_hdemo_sk" IS NOT NULL AND "ss_sold_time_sk" IS NOT NULL AND "ss_store_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "hd_demo_sk"
FROM (SELECT "hd_demo_sk", "hd_dep_count", "hd_vehicle_count"
FROM "HOUSEHOLD_DEMOGRAPHICS") AS "t2"
WHERE "hd_vehicle_count" <= 5 AND ("hd_dep_count" = 4 AND "hd_vehicle_count" IS NOT NULL OR "hd_dep_count" = 2 AND "hd_vehicle_count" <= 2 OR "hd_dep_count" = 0 AND "hd_vehicle_count" <= 3) AND "hd_dep_count" IN (0, 2, 4) AND "hd_demo_sk" IS NOT NULL) AS "t4" ON "t1"."ss_hdemo_sk" = "t4"."hd_demo_sk"
INNER JOIN (SELECT "t_time_sk"
FROM (SELECT "t_time_sk", "t_hour", "t_minute"
FROM "TIME_DIM") AS "t5"
WHERE "t_minute" >= 30 AND "t_hour" = 10 AND "t_time_sk" IS NOT NULL) AS "t7" ON "t1"."ss_sold_time_sk" = "t7"."t_time_sk"
INNER JOIN (SELECT "s_store_sk"
FROM (SELECT "s_store_sk", "s_store_name"
FROM "STORE") AS "t8"
WHERE "s_store_name" = 'ese' AND "s_store_sk" IS NOT NULL) AS "t10" ON "t1"."ss_store_sk" = "t10"."s_store_sk"
                    hive.sql.query.fieldNames $f0
                    hive.sql.query.fieldTypes bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: $f0 (type: bigint)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 13 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT COUNT(*) AS "$f0"
FROM (SELECT "ss_sold_time_sk", "ss_hdemo_sk", "ss_store_sk"
FROM (SELECT "ss_sold_time_sk", "ss_hdemo_sk", "ss_store_sk"
FROM "STORE_SALES") AS "t"
WHERE "ss_hdemo_sk" IS NOT NULL AND "ss_sold_time_sk" IS NOT NULL AND "ss_store_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "hd_demo_sk"
FROM (SELECT "hd_demo_sk", "hd_dep_count", "hd_vehicle_count"
FROM "HOUSEHOLD_DEMOGRAPHICS") AS "t2"
WHERE "hd_vehicle_count" <= 5 AND ("hd_dep_count" = 4 AND "hd_vehicle_count" IS NOT NULL OR "hd_dep_count" = 2 AND "hd_vehicle_count" <= 2 OR "hd_dep_count" = 0 AND "hd_vehicle_count" <= 3) AND "hd_dep_count" IN (0, 2, 4) AND "hd_demo_sk" IS NOT NULL) AS "t4" ON "t1"."ss_hdemo_sk" = "t4"."hd_demo_sk"
INNER JOIN (SELECT "t_time_sk"
FROM (SELECT "t_time_sk", "t_hour", "t_minute"
FROM "TIME_DIM") AS "t5"
WHERE "t_minute" < 30 AND "t_hour" = 10 AND "t_time_sk" IS NOT NULL) AS "t7" ON "t1"."ss_sold_time_sk" = "t7"."t_time_sk"
INNER JOIN (SELECT "s_store_sk"
FROM (SELECT "s_store_sk", "s_store_name"
FROM "STORE") AS "t8"
WHERE "s_store_name" = 'ese' AND "s_store_sk" IS NOT NULL) AS "t10" ON "t1"."ss_store_sk" = "t10"."s_store_sk"
                    hive.sql.query.fieldNames $f0
                    hive.sql.query.fieldTypes bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: $f0 (type: bigint)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 14 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT COUNT(*) AS "$f0"
FROM (SELECT "ss_sold_time_sk", "ss_hdemo_sk", "ss_store_sk"
FROM (SELECT "ss_sold_time_sk", "ss_hdemo_sk", "ss_store_sk"
FROM "STORE_SALES") AS "t"
WHERE "ss_hdemo_sk" IS NOT NULL AND "ss_sold_time_sk" IS NOT NULL AND "ss_store_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "hd_demo_sk"
FROM (SELECT "hd_demo_sk", "hd_dep_count", "hd_vehicle_count"
FROM "HOUSEHOLD_DEMOGRAPHICS") AS "t2"
WHERE "hd_vehicle_count" <= 5 AND ("hd_dep_count" = 4 AND "hd_vehicle_count" IS NOT NULL OR "hd_dep_count" = 2 AND "hd_vehicle_count" <= 2 OR "hd_dep_count" = 0 AND "hd_vehicle_count" <= 3) AND "hd_dep_count" IN (0, 2, 4) AND "hd_demo_sk" IS NOT NULL) AS "t4" ON "t1"."ss_hdemo_sk" = "t4"."hd_demo_sk"
INNER JOIN (SELECT "t_time_sk"
FROM (SELECT "t_time_sk", "t_hour", "t_minute"
FROM "TIME_DIM") AS "t5"
WHERE "t_minute" >= 30 AND "t_hour" = 9 AND "t_time_sk" IS NOT NULL) AS "t7" ON "t1"."ss_sold_time_sk" = "t7"."t_time_sk"
INNER JOIN (SELECT "s_store_sk"
FROM (SELECT "s_store_sk", "s_store_name"
FROM "STORE") AS "t8"
WHERE "s_store_name" = 'ese' AND "s_store_sk" IS NOT NULL) AS "t10" ON "t1"."ss_store_sk" = "t10"."s_store_sk"
                    hive.sql.query.fieldNames $f0
                    hive.sql.query.fieldTypes bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: $f0 (type: bigint)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 15 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT COUNT(*) AS "$f0"
FROM (SELECT "ss_sold_time_sk", "ss_hdemo_sk", "ss_store_sk"
FROM (SELECT "ss_sold_time_sk", "ss_hdemo_sk", "ss_store_sk"
FROM "STORE_SALES") AS "t"
WHERE "ss_hdemo_sk" IS NOT NULL AND "ss_sold_time_sk" IS NOT NULL AND "ss_store_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "hd_demo_sk"
FROM (SELECT "hd_demo_sk", "hd_dep_count", "hd_vehicle_count"
FROM "HOUSEHOLD_DEMOGRAPHICS") AS "t2"
WHERE "hd_vehicle_count" <= 5 AND ("hd_dep_count" = 4 AND "hd_vehicle_count" IS NOT NULL OR "hd_dep_count" = 2 AND "hd_vehicle_count" <= 2 OR "hd_dep_count" = 0 AND "hd_vehicle_count" <= 3) AND "hd_dep_count" IN (0, 2, 4) AND "hd_demo_sk" IS NOT NULL) AS "t4" ON "t1"."ss_hdemo_sk" = "t4"."hd_demo_sk"
INNER JOIN (SELECT "t_time_sk"
FROM (SELECT "t_time_sk", "t_hour", "t_minute"
FROM "TIME_DIM") AS "t5"
WHERE "t_minute" < 30 AND "t_hour" = 9 AND "t_time_sk" IS NOT NULL) AS "t7" ON "t1"."ss_sold_time_sk" = "t7"."t_time_sk"
INNER JOIN (SELECT "s_store_sk"
FROM (SELECT "s_store_sk", "s_store_name"
FROM "STORE") AS "t8"
WHERE "s_store_name" = 'ese' AND "s_store_sk" IS NOT NULL) AS "t10" ON "t1"."ss_store_sk" = "t10"."s_store_sk"
                    hive.sql.query.fieldNames $f0
                    hive.sql.query.fieldTypes bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: $f0 (type: bigint)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 9 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT COUNT(*) AS "$f0"
FROM (SELECT "ss_sold_time_sk", "ss_hdemo_sk", "ss_store_sk"
FROM (SELECT "ss_sold_time_sk", "ss_hdemo_sk", "ss_store_sk"
FROM "STORE_SALES") AS "t"
WHERE "ss_hdemo_sk" IS NOT NULL AND "ss_sold_time_sk" IS NOT NULL AND "ss_store_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "hd_demo_sk"
FROM (SELECT "hd_demo_sk", "hd_dep_count", "hd_vehicle_count"
FROM "HOUSEHOLD_DEMOGRAPHICS") AS "t2"
WHERE "hd_vehicle_count" <= 5 AND ("hd_dep_count" = 4 AND "hd_vehicle_count" IS NOT NULL OR "hd_dep_count" = 2 AND "hd_vehicle_count" <= 2 OR "hd_dep_count" = 0 AND "hd_vehicle_count" <= 3) AND "hd_dep_count" IN (0, 2, 4) AND "hd_demo_sk" IS NOT NULL) AS "t4" ON "t1"."ss_hdemo_sk" = "t4"."hd_demo_sk"
INNER JOIN (SELECT "t_time_sk"
FROM (SELECT "t_time_sk", "t_hour", "t_minute"
FROM "TIME_DIM") AS "t5"
WHERE "t_minute" < 30 AND "t_hour" = 12 AND "t_time_sk" IS NOT NULL) AS "t7" ON "t1"."ss_sold_time_sk" = "t7"."t_time_sk"
INNER JOIN (SELECT "s_store_sk"
FROM (SELECT "s_store_sk", "s_store_name"
FROM "STORE") AS "t8"
WHERE "s_store_name" = 'ese' AND "s_store_sk" IS NOT NULL) AS "t10" ON "t1"."ss_store_sk" = "t10"."s_store_sk"
                    hive.sql.query.fieldNames $f0
                    hive.sql.query.fieldTypes bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: $f0 (type: bigint)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 17 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 1 Data size: 17 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: bigint), _col1 (type: bigint)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 1 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 1 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: bigint), _col1 (type: bigint), _col2 (type: bigint)
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 1 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 1 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: bigint), _col1 (type: bigint), _col2 (type: bigint), _col3 (type: bigint)
        Reducer 5 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 1 Data size: 44 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 1 Data size: 44 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: bigint), _col1 (type: bigint), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: bigint)
        Reducer 6 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 1 Data size: 53 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 1 Data size: 53 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: bigint), _col1 (type: bigint), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: bigint), _col5 (type: bigint)
        Reducer 7 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                Statistics: Num rows: 1 Data size: 62 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 1 Data size: 62 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: bigint), _col1 (type: bigint), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: bigint), _col5 (type: bigint), _col6 (type: bigint)
        Reducer 8 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                Statistics: Num rows: 1 Data size: 71 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: bigint), _col7 (type: bigint), _col6 (type: bigint), _col5 (type: bigint), _col4 (type: bigint), _col3 (type: bigint), _col2 (type: bigint), _col1 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                  Statistics: Num rows: 1 Data size: 71 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 71 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[39][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
Warning: Shuffle Join MERGEJOIN[40][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 3' is a cross product
Warning: Shuffle Join MERGEJOIN[41][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3]] in Stage 'Reducer 4' is a cross product
Warning: Shuffle Join MERGEJOIN[42][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[43][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[44][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6]] in Stage 'Reducer 7' is a cross product
Warning: Shuffle Join MERGEJOIN[45][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6, $hdt$_7]] in Stage 'Reducer 8' is a cross product
PREHOOK: query: select *
                          from (select count(*) as h8_30_to_9
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 8
                                  and time_dim.t_minute >= 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s1 join
                               (select count(*) as h9_to_9_30
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 9
                                  and time_dim.t_minute < 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s2 join
                               (select count(*) as h9_30_to_10
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 9
                                  and time_dim.t_minute >= 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s3 join
                               (select count(*) as h10_to_10_30
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 10
                                  and time_dim.t_minute < 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s4 join
                               (select count(*) as h10_30_to_11
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 10
                                  and time_dim.t_minute >= 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s5 join
                               (select count(*) as h11_to_11_30
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 11
                                  and time_dim.t_minute < 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s6 join
                               (select count(*) as h11_30_to_12
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 11
                                  and time_dim.t_minute >= 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s7 join
                               (select count(*) as h12_to_12_30
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 12
                                  and time_dim.t_minute < 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s8
PREHOOK: type: QUERY
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@time_dim
#### A masked pattern was here ####
POSTHOOK: query: select *
                          from (select count(*) as h8_30_to_9
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 8
                                  and time_dim.t_minute >= 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s1 join
                               (select count(*) as h9_to_9_30
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 9
                                  and time_dim.t_minute < 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s2 join
                               (select count(*) as h9_30_to_10
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 9
                                  and time_dim.t_minute >= 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s3 join
                               (select count(*) as h10_to_10_30
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 10
                                  and time_dim.t_minute < 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s4 join
                               (select count(*) as h10_30_to_11
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 10
                                  and time_dim.t_minute >= 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s5 join
                               (select count(*) as h11_to_11_30
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 11
                                  and time_dim.t_minute < 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s6 join
                               (select count(*) as h11_30_to_12
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 11
                                  and time_dim.t_minute >= 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s7 join
                               (select count(*) as h12_to_12_30
                                from store_sales
                                join household_demographics
                                  on store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
                                join time_dim
                                  on store_sales.ss_sold_time_sk = time_dim.t_time_sk
                                join store
                                  on store_sales.ss_store_sk = store.s_store_sk
                                where time_dim.t_hour = 12
                                  and time_dim.t_minute < 30
                                  and ((household_demographics.hd_dep_count = 4
                                        and household_demographics.hd_vehicle_count <= 3+2)
                                       or (household_demographics.hd_dep_count = 2
                                           and household_demographics.hd_vehicle_count<=0+2)
                                       or (household_demographics.hd_dep_count = 0
                                           and household_demographics.hd_vehicle_count<=1+2))
                                  and store.s_store_name = 'ese') s8
POSTHOOK: type: QUERY
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@time_dim
#### A masked pattern was here ####
0	0	0	0	0	0	0	0
PREHOOK: query: explain
select substr(r_reason_desc, 1, 20) as r,
avg(ws_quantity) as wq,
avg(wr_refunded_cash) as ref,
avg(wr_fee) as fee
from web_sales
join web_returns
on web_sales.ws_item_sk = web_returns.wr_item_sk
and web_sales.ws_order_number = web_returns.wr_order_number
join customer_demographics cd1
on cd1.cd_demo_sk = web_returns.wr_refunded_cdemo_sk
join customer_demographics cd2
on cd2.cd_demo_sk = web_returns.wr_returning_cdemo_sk
join customer_address
on customer_address.ca_address_sk = web_returns.wr_refunded_addr_sk
join date_dim
on web_sales.ws_sold_date_sk = date_dim.d_date_sk
join reason
on reason.r_reason_sk = web_returns.wr_reason_sk
where d_year = 2000
and ((cd1.cd_marital_status = 'M'
and cd1.cd_marital_status = cd2.cd_marital_status
and cd1.cd_education_status = 'Advanced Degree'
and cd1.cd_education_status = cd2.cd_education_status
and ws_sales_price between 100.00 and 150.00)
or
(cd1.cd_marital_status = 'S'
and cd1.cd_marital_status = cd2.cd_marital_status
and cd1.cd_education_status = 'College'
and cd1.cd_education_status = cd2.cd_education_status
and ws_sales_price between 50.00 and 100.00)
or
(cd1.cd_marital_status = 'W'
and cd1.cd_marital_status = cd2.cd_marital_status
and cd1.cd_education_status = '2 yr Degree'
and cd1.cd_education_status = cd2.cd_education_status
and ws_sales_price between 150.00 and 200.00))
and ((ca_country = 'United States'
and ca_state in ('IN', 'OH', 'NJ')
and ws_net_profit between 100 and 200)
or
(ca_country = 'United States'
and ca_state in ('WI', 'CT', 'KY')
and ws_net_profit between 150 and 300)
or
(ca_country = 'United States'
and ca_state in ('LA', 'IA', 'AR')
and ws_net_profit between 50 and 250))
group by r_reason_desc
order by r, wq, ref, fee
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@reason
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
select substr(r_reason_desc, 1, 20) as r,
avg(ws_quantity) as wq,
avg(wr_refunded_cash) as ref,
avg(wr_fee) as fee
from web_sales
join web_returns
on web_sales.ws_item_sk = web_returns.wr_item_sk
and web_sales.ws_order_number = web_returns.wr_order_number
join customer_demographics cd1
on cd1.cd_demo_sk = web_returns.wr_refunded_cdemo_sk
join customer_demographics cd2
on cd2.cd_demo_sk = web_returns.wr_returning_cdemo_sk
join customer_address
on customer_address.ca_address_sk = web_returns.wr_refunded_addr_sk
join date_dim
on web_sales.ws_sold_date_sk = date_dim.d_date_sk
join reason
on reason.r_reason_sk = web_returns.wr_reason_sk
where d_year = 2000
and ((cd1.cd_marital_status = 'M'
and cd1.cd_marital_status = cd2.cd_marital_status
and cd1.cd_education_status = 'Advanced Degree'
and cd1.cd_education_status = cd2.cd_education_status
and ws_sales_price between 100.00 and 150.00)
or
(cd1.cd_marital_status = 'S'
and cd1.cd_marital_status = cd2.cd_marital_status
and cd1.cd_education_status = 'College'
and cd1.cd_education_status = cd2.cd_education_status
and ws_sales_price between 50.00 and 100.00)
or
(cd1.cd_marital_status = 'W'
and cd1.cd_marital_status = cd2.cd_marital_status
and cd1.cd_education_status = '2 yr Degree'
and cd1.cd_education_status = cd2.cd_education_status
and ws_sales_price between 150.00 and 200.00))
and ((ca_country = 'United States'
and ca_state in ('IN', 'OH', 'NJ')
and ws_net_profit between 100 and 200)
or
(ca_country = 'United States'
and ca_state in ('WI', 'CT', 'KY')
and ws_net_profit between 150 and 300)
or
(ca_country = 'United States'
and ca_state in ('LA', 'IA', 'AR')
and ws_net_profit between 50 and 250))
group by r_reason_desc
order by r, wq, ref, fee
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@reason
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: web_returns
                  properties:
                    hive.sql.query SELECT "t4"."r_reason_desc", SUM("t20"."ws_quantity") AS "$f1", COUNT("t20"."ws_quantity") AS "$f2", SUM("t1"."wr_refunded_cash") AS "$f3", COUNT("t1"."wr_refunded_cash") AS "$f4", SUM("t1"."wr_fee") AS "$f5", COUNT("t1"."wr_fee") AS "$f6"
FROM (SELECT "wr_item_sk", "wr_refunded_cdemo_sk", "wr_refunded_addr_sk", "wr_returning_cdemo_sk", "wr_reason_sk", "wr_order_number", "wr_fee", "wr_refunded_cash"
FROM (SELECT "wr_item_sk", "wr_refunded_cdemo_sk", "wr_refunded_addr_sk", "wr_returning_cdemo_sk", "wr_reason_sk", "wr_order_number", "wr_fee", "wr_refunded_cash"
FROM "WEB_RETURNS") AS "t"
WHERE "wr_item_sk" IS NOT NULL AND ("wr_order_number" IS NOT NULL AND "wr_refunded_cdemo_sk" IS NOT NULL) AND ("wr_returning_cdemo_sk" IS NOT NULL AND ("wr_refunded_addr_sk" IS NOT NULL AND "wr_reason_sk" IS NOT NULL))) AS "t1"
INNER JOIN (SELECT "r_reason_sk", "r_reason_desc"
FROM (SELECT "r_reason_sk", "r_reason_desc"
FROM "REASON") AS "t2"
WHERE "r_reason_sk" IS NOT NULL) AS "t4" ON "t1"."wr_reason_sk" = "t4"."r_reason_sk"
INNER JOIN (SELECT "ca_address_sk", "ca_state" IN ('IN', 'NJ', 'OH') AS "EXPR$0", "ca_state" IN ('CT', 'KY', 'WI') AS "EXPR$1", "ca_state" IN ('AR', 'IA', 'LA') AS "EXPR$2"
FROM (SELECT "ca_address_sk", "ca_state", "ca_country"
FROM "CUSTOMER_ADDRESS") AS "t5"
WHERE "ca_state" IN ('AR', 'CT', 'IA', 'IN', 'KY', 'LA', 'NJ', 'OH', 'WI') AND "ca_country" = 'United States' AND "ca_address_sk" IS NOT NULL) AS "t7" ON "t1"."wr_refunded_addr_sk" = "t7"."ca_address_sk"
INNER JOIN (SELECT "cd_demo_sk", "cd_marital_status", "cd_education_status", "cd_marital_status" = 'M' AS "EXPR$0", "cd_education_status" = 'Advanced Degree' AS "EXPR$1", "cd_marital_status" = 'S' AS "EXPR$2", "cd_education_status" = 'College' AS "EXPR$3", "cd_marital_status" = 'W' AS "EXPR$4", "cd_education_status" = '2 yr Degree' AS "EXPR$5"
FROM (SELECT "cd_demo_sk", "cd_marital_status", "cd_education_status"
FROM "CUSTOMER_DEMOGRAPHICS") AS "t8"
WHERE "cd_marital_status" IN ('M', 'S', 'W') AND "cd_education_status" IN ('2 yr Degree', 'Advanced Degree', 'College') AND "cd_demo_sk" IS NOT NULL) AS "t10" ON "t1"."wr_refunded_cdemo_sk" = "t10"."cd_demo_sk"
INNER JOIN (SELECT "cd_demo_sk", "cd_marital_status", "cd_education_status"
FROM (SELECT "cd_demo_sk", "cd_marital_status", "cd_education_status"
FROM "CUSTOMER_DEMOGRAPHICS") AS "t11"
WHERE "cd_marital_status" IN ('M', 'S', 'W') AND "cd_education_status" IN ('2 yr Degree', 'Advanced Degree', 'College') AND "cd_demo_sk" IS NOT NULL) AS "t13" ON "t1"."wr_returning_cdemo_sk" = "t13"."cd_demo_sk" AND "t10"."cd_marital_status" = "t13"."cd_marital_status" AND "t10"."cd_education_status" = "t13"."cd_education_status"
INNER JOIN (SELECT "t16"."ws_sold_date_sk", "t16"."ws_item_sk", "t16"."ws_order_number", "t16"."ws_quantity", "t16"."EXPR$0", "t16"."EXPR$1", "t16"."EXPR$2", "t16"."EXPR$3", "t16"."EXPR$4", "t16"."EXPR$5", "t19"."d_date_sk"
FROM (SELECT "ws_sold_date_sk", "ws_item_sk", "ws_order_number", "ws_quantity", "ws_net_profit" BETWEEN 100 AND 200 AS "EXPR$0", "ws_net_profit" BETWEEN 150 AND 300 AS "EXPR$1", "ws_net_profit" BETWEEN 50 AND 250 AS "EXPR$2", "ws_sales_price" BETWEEN 100 AND 150 AS "EXPR$3", "ws_sales_price" BETWEEN 50 AND 100 AS "EXPR$4", "ws_sales_price" BETWEEN 150 AND 200 AS "EXPR$5"
FROM (SELECT "ws_sold_date_sk", "ws_item_sk", "ws_order_number", "ws_quantity", "ws_sales_price", "ws_net_profit"
FROM "WEB_SALES") AS "t14"
WHERE "ws_item_sk" IS NOT NULL AND "ws_order_number" IS NOT NULL AND "ws_sold_date_sk" IS NOT NULL AND "ws_sales_price" IS NOT NULL AND "ws_net_profit" IS NOT NULL) AS "t16"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year"
FROM "DATE_DIM") AS "t17"
WHERE "d_year" = 2000 AND "d_date_sk" IS NOT NULL) AS "t19" ON "t16"."ws_sold_date_sk" = "t19"."d_date_sk") AS "t20" ON "t1"."wr_item_sk" = "t20"."ws_item_sk" AND "t1"."wr_order_number" = "t20"."ws_order_number" AND ("t10"."EXPR$0" AND "t10"."EXPR$1" AND "t20"."EXPR$3" OR "t10"."EXPR$2" AND "t10"."EXPR$3" AND "t20"."EXPR$4" OR "t10"."EXPR$4" AND "t10"."EXPR$5" AND "t20"."EXPR$5") AND ("t7"."EXPR$0" AND "t20"."EXPR$0" OR "t7"."EXPR$1" AND "t20"."EXPR$1" OR "t7"."EXPR$2" AND "t20"."EXPR$2")
GROUP BY "t4"."r_reason_desc"
                    hive.sql.query.fieldNames r_reason_desc,$f1,$f2,$f3,$f4,$f5,$f6
                    hive.sql.query.fieldTypes char(100),bigint,bigint,decimal(17,2),bigint,decimal(17,2),bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 440 Basic stats: COMPLETE Column stats: NONE
                  Top N Key Operator
                    sort order: ++++
                    keys: substr(r_reason_desc, 1, 20) (type: string), (UDFToDouble($f1) / $f2) (type: double), CAST( ($f3 / $f4) AS decimal(11,6)) (type: decimal(11,6)), CAST( ($f5 / $f6) AS decimal(11,6)) (type: decimal(11,6))
                    null sort order: zzzz
                    Statistics: Num rows: 1 Data size: 440 Basic stats: COMPLETE Column stats: NONE
                    top n: 100
                    Select Operator
                      expressions: substr(r_reason_desc, 1, 20) (type: string), (UDFToDouble($f1) / $f2) (type: double), CAST( ($f3 / $f4) AS decimal(11,6)) (type: decimal(11,6)), CAST( ($f5 / $f6) AS decimal(11,6)) (type: decimal(11,6))
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 1 Data size: 440 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: double), _col2 (type: decimal(11,6)), _col3 (type: decimal(11,6))
                        null sort order: zzzz
                        sort order: ++++
                        Statistics: Num rows: 1 Data size: 440 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: double), KEY.reducesinkkey2 (type: decimal(11,6)), KEY.reducesinkkey3 (type: decimal(11,6))
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 1 Data size: 440 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 440 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 440 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

PREHOOK: query: select substr(r_reason_desc, 1, 20) as r,
avg(ws_quantity) as wq,
avg(wr_refunded_cash) as ref,
avg(wr_fee) as fee
from web_sales
join web_returns
on web_sales.ws_item_sk = web_returns.wr_item_sk
and web_sales.ws_order_number = web_returns.wr_order_number
join customer_demographics cd1
on cd1.cd_demo_sk = web_returns.wr_refunded_cdemo_sk
join customer_demographics cd2
on cd2.cd_demo_sk = web_returns.wr_returning_cdemo_sk
join customer_address
on customer_address.ca_address_sk = web_returns.wr_refunded_addr_sk
join date_dim
on web_sales.ws_sold_date_sk = date_dim.d_date_sk
join reason
on reason.r_reason_sk = web_returns.wr_reason_sk
where d_year = 2000
and ((cd1.cd_marital_status = 'M'
and cd1.cd_marital_status = cd2.cd_marital_status
and cd1.cd_education_status = 'Advanced Degree'
and cd1.cd_education_status = cd2.cd_education_status
and ws_sales_price between 100.00 and 150.00)
or
(cd1.cd_marital_status = 'S'
and cd1.cd_marital_status = cd2.cd_marital_status
and cd1.cd_education_status = 'College'
and cd1.cd_education_status = cd2.cd_education_status
and ws_sales_price between 50.00 and 100.00)
or
(cd1.cd_marital_status = 'W'
and cd1.cd_marital_status = cd2.cd_marital_status
and cd1.cd_education_status = '2 yr Degree'
and cd1.cd_education_status = cd2.cd_education_status
and ws_sales_price between 150.00 and 200.00))
and ((ca_country = 'United States'
and ca_state in ('IN', 'OH', 'NJ')
and ws_net_profit between 100 and 200)
or
(ca_country = 'United States'
and ca_state in ('WI', 'CT', 'KY')
and ws_net_profit between 150 and 300)
or
(ca_country = 'United States'
and ca_state in ('LA', 'IA', 'AR')
and ws_net_profit between 50 and 250))
group by r_reason_desc
order by r, wq, ref, fee
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@reason
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: select substr(r_reason_desc, 1, 20) as r,
avg(ws_quantity) as wq,
avg(wr_refunded_cash) as ref,
avg(wr_fee) as fee
from web_sales
join web_returns
on web_sales.ws_item_sk = web_returns.wr_item_sk
and web_sales.ws_order_number = web_returns.wr_order_number
join customer_demographics cd1
on cd1.cd_demo_sk = web_returns.wr_refunded_cdemo_sk
join customer_demographics cd2
on cd2.cd_demo_sk = web_returns.wr_returning_cdemo_sk
join customer_address
on customer_address.ca_address_sk = web_returns.wr_refunded_addr_sk
join date_dim
on web_sales.ws_sold_date_sk = date_dim.d_date_sk
join reason
on reason.r_reason_sk = web_returns.wr_reason_sk
where d_year = 2000
and ((cd1.cd_marital_status = 'M'
and cd1.cd_marital_status = cd2.cd_marital_status
and cd1.cd_education_status = 'Advanced Degree'
and cd1.cd_education_status = cd2.cd_education_status
and ws_sales_price between 100.00 and 150.00)
or
(cd1.cd_marital_status = 'S'
and cd1.cd_marital_status = cd2.cd_marital_status
and cd1.cd_education_status = 'College'
and cd1.cd_education_status = cd2.cd_education_status
and ws_sales_price between 50.00 and 100.00)
or
(cd1.cd_marital_status = 'W'
and cd1.cd_marital_status = cd2.cd_marital_status
and cd1.cd_education_status = '2 yr Degree'
and cd1.cd_education_status = cd2.cd_education_status
and ws_sales_price between 150.00 and 200.00))
and ((ca_country = 'United States'
and ca_state in ('IN', 'OH', 'NJ')
and ws_net_profit between 100 and 200)
or
(ca_country = 'United States'
and ca_state in ('WI', 'CT', 'KY')
and ws_net_profit between 150 and 300)
or
(ca_country = 'United States'
and ca_state in ('LA', 'IA', 'AR')
and ws_net_profit between 50 and 250))
group by r_reason_desc
order by r, wq, ref, fee
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@reason
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
PREHOOK: query: explain
SELECT cd_gender,
       cd_marital_status,
       cd_education_status,
       Count(*) cnt1,
       cd_purchase_estimate,
       Count(*) cnt2,
       cd_credit_rating,
       Count(*) cnt3
FROM   customer c,
       customer_address ca,
       customer_demographics
WHERE  c.c_current_addr_sk = ca.ca_address_sk
       AND ca_state IN ( 'CO', 'IL', 'MN' )
       AND cd_demo_sk = c.c_current_cdemo_sk
       AND EXISTS (SELECT *
                   FROM   store_sales,
                          date_dim
                   WHERE  c.c_customer_sk = ss_customer_sk
                          AND ss_sold_date_sk = d_date_sk
                          AND d_year = 1999
                          AND d_moy BETWEEN 1 AND 1 + 2)
       AND ( NOT EXISTS (SELECT *
                         FROM   web_sales,
                                date_dim
                         WHERE  c.c_customer_sk = ws_bill_customer_sk
                                AND ws_sold_date_sk = d_date_sk
                                AND d_year = 1999
                                AND d_moy BETWEEN 1 AND 1 + 2)
             AND NOT EXISTS (SELECT *
                             FROM   catalog_sales,
                                    date_dim
                             WHERE  c.c_customer_sk = cs_ship_customer_sk
                                    AND cs_sold_date_sk = d_date_sk
                                    AND d_year = 1999
                                    AND d_moy BETWEEN 1 AND 1 + 2) )
GROUP  BY cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
ORDER  BY cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
LIMIT  100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
SELECT cd_gender,
       cd_marital_status,
       cd_education_status,
       Count(*) cnt1,
       cd_purchase_estimate,
       Count(*) cnt2,
       cd_credit_rating,
       Count(*) cnt3
FROM   customer c,
       customer_address ca,
       customer_demographics
WHERE  c.c_current_addr_sk = ca.ca_address_sk
       AND ca_state IN ( 'CO', 'IL', 'MN' )
       AND cd_demo_sk = c.c_current_cdemo_sk
       AND EXISTS (SELECT *
                   FROM   store_sales,
                          date_dim
                   WHERE  c.c_customer_sk = ss_customer_sk
                          AND ss_sold_date_sk = d_date_sk
                          AND d_year = 1999
                          AND d_moy BETWEEN 1 AND 1 + 2)
       AND ( NOT EXISTS (SELECT *
                         FROM   web_sales,
                                date_dim
                         WHERE  c.c_customer_sk = ws_bill_customer_sk
                                AND ws_sold_date_sk = d_date_sk
                                AND d_year = 1999
                                AND d_moy BETWEEN 1 AND 1 + 2)
             AND NOT EXISTS (SELECT *
                             FROM   catalog_sales,
                                    date_dim
                             WHERE  c.c_customer_sk = cs_ship_customer_sk
                                    AND cs_sold_date_sk = d_date_sk
                                    AND d_year = 1999
                                    AND d_moy BETWEEN 1 AND 1 + 2) )
GROUP  BY cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
ORDER  BY cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
LIMIT  100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
        Reducer 3 <- Map 8 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Map 9 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
        Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
        Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: c
                  properties:
                    hive.sql.query SELECT "t1"."c_customer_sk", "t1"."c_current_cdemo_sk", "t1"."c_current_addr_sk", "t4"."ca_address_sk", "t4"."ca_state", "t7"."cd_demo_sk", "t7"."cd_gender", "t7"."cd_marital_status", "t7"."cd_education_status", "t7"."cd_purchase_estimate", "t7"."cd_credit_rating"
FROM (SELECT "c_customer_sk", "c_current_cdemo_sk", "c_current_addr_sk"
FROM (SELECT "c_customer_sk", "c_current_cdemo_sk", "c_current_addr_sk"
FROM "CUSTOMER") AS "t"
WHERE "c_current_addr_sk" IS NOT NULL AND "c_current_cdemo_sk" IS NOT NULL AND "c_customer_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "ca_address_sk", "ca_state"
FROM (SELECT "ca_address_sk", "ca_state"
FROM "CUSTOMER_ADDRESS") AS "t2"
WHERE "ca_state" IN ('CO', 'IL', 'MN') AND "ca_address_sk" IS NOT NULL) AS "t4" ON "t1"."c_current_addr_sk" = "t4"."ca_address_sk"
INNER JOIN (SELECT "cd_demo_sk", "cd_gender", "cd_marital_status", "cd_education_status", "cd_purchase_estimate", "cd_credit_rating"
FROM (SELECT "cd_demo_sk", "cd_gender", "cd_marital_status", "cd_education_status", "cd_purchase_estimate", "cd_credit_rating"
FROM "CUSTOMER_DEMOGRAPHICS") AS "t5"
WHERE "cd_demo_sk" IS NOT NULL) AS "t7" ON "t1"."c_current_cdemo_sk" = "t7"."cd_demo_sk"
                    hive.sql.query.fieldNames c_customer_sk,c_current_cdemo_sk,c_current_addr_sk,ca_address_sk,ca_state,cd_demo_sk,cd_gender,cd_marital_status,cd_education_status,cd_purchase_estimate,cd_credit_rating
                    hive.sql.query.fieldTypes int,int,int,int,char(2),int,char(1),char(1),char(20),int,char(10)
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 376 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: c_customer_sk (type: int), cd_gender (type: char(1)), cd_marital_status (type: char(1)), cd_education_status (type: char(20)), cd_purchase_estimate (type: int), cd_credit_rating (type: char(10))
                    outputColumnNames: _col0, _col6, _col7, _col8, _col9, _col10
                    Statistics: Num rows: 1 Data size: 376 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 376 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "t1"."ss_customer_sk"
FROM (SELECT "ss_sold_date_sk", "ss_customer_sk"
FROM (SELECT "ss_sold_date_sk", "ss_customer_sk"
FROM "STORE_SALES") AS "t"
WHERE "ss_customer_sk" IS NOT NULL AND "ss_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t2"
WHERE "d_year" = 1999 AND "d_moy" BETWEEN 1 AND 3 AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."ss_sold_date_sk" = "t4"."d_date_sk"
                    hive.sql.query.fieldNames ss_customer_sk
                    hive.sql.query.fieldTypes int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ss_customer_sk (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      keys: _col0 (type: int)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 8 
            Map Operator Tree:
                TableScan
                  alias: web_sales
                  properties:
                    hive.sql.query SELECT TRUE AS "literalTrue", "t1"."ws_bill_customer_sk"
FROM (SELECT "ws_sold_date_sk", "ws_bill_customer_sk"
FROM (SELECT "ws_sold_date_sk", "ws_bill_customer_sk"
FROM "WEB_SALES") AS "t"
WHERE "ws_bill_customer_sk" IS NOT NULL AND "ws_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t2"
WHERE "d_year" = 1999 AND "d_moy" BETWEEN 1 AND 3 AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."ws_sold_date_sk" = "t4"."d_date_sk"
GROUP BY "t1"."ws_bill_customer_sk"
                    hive.sql.query.fieldNames literalTrue,ws_bill_customer_sk
                    hive.sql.query.fieldTypes boolean,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: literaltrue (type: boolean), ws_bill_customer_sk (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 9 
            Map Operator Tree:
                TableScan
                  alias: catalog_sales
                  properties:
                    hive.sql.query SELECT TRUE AS "literalTrue", "t1"."cs_ship_customer_sk"
FROM (SELECT "cs_sold_date_sk", "cs_ship_customer_sk"
FROM (SELECT "cs_sold_date_sk", "cs_ship_customer_sk"
FROM "CATALOG_SALES") AS "t"
WHERE "cs_ship_customer_sk" IS NOT NULL AND "cs_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t2"
WHERE "d_year" = 1999 AND "d_moy" BETWEEN 1 AND 3 AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."cs_sold_date_sk" = "t4"."d_date_sk"
GROUP BY "t1"."cs_ship_customer_sk"
                    hive.sql.query.fieldNames literalTrue,cs_ship_customer_sk
                    hive.sql.query.fieldTypes boolean,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: literaltrue (type: boolean), cs_ship_customer_sk (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col6, _col7, _col8, _col9, _col10
                Statistics: Num rows: 1 Data size: 413 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col0 (type: int)
                  Statistics: Num rows: 1 Data size: 413 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col0, _col6, _col7, _col8, _col9, _col10, _col11
                Statistics: Num rows: 1 Data size: 454 Basic stats: COMPLETE Column stats: NONE
                Filter Operator
                  predicate: _col11 is null (type: boolean)
                  Statistics: Num rows: 1 Data size: 454 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: _col0 (type: int), _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
                    outputColumnNames: _col0, _col6, _col7, _col8, _col9, _col10
                    Statistics: Num rows: 1 Data size: 454 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 454 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col6, _col7, _col8, _col9, _col10, _col13
                Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                Filter Operator
                  predicate: _col13 is null (type: boolean)
                  Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                  Top N Key Operator
                    sort order: +++++
                    keys: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
                    null sort order: zzzzz
                    Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                    top n: 100
                    Select Operator
                      expressions: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
                      outputColumnNames: _col6, _col7, _col8, _col9, _col10
                      Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        aggregations: count()
                        keys: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
                        minReductionHashAggr: 0.99
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                        Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: char(1)), _col1 (type: char(1)), _col2 (type: char(20)), _col3 (type: int), _col4 (type: char(10))
                          null sort order: zzzzz
                          sort order: +++++
                          Map-reduce partition columns: _col0 (type: char(1)), _col1 (type: char(1)), _col2 (type: char(20)), _col3 (type: int), _col4 (type: char(10))
                          Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col5 (type: bigint)
        Reducer 5 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: char(1)), KEY._col1 (type: char(1)), KEY._col2 (type: char(20)), KEY._col3 (type: int), KEY._col4 (type: char(10))
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: char(1)), _col1 (type: char(1)), _col2 (type: char(20)), _col5 (type: bigint), _col3 (type: int), _col4 (type: char(10))
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col6
                  Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: char(1)), _col1 (type: char(1)), _col2 (type: char(20)), _col4 (type: int), _col6 (type: char(10))
                    null sort order: zzzzz
                    sort order: +++++
                    Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col3 (type: bigint)
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: char(1)), KEY.reducesinkkey1 (type: char(1)), KEY.reducesinkkey2 (type: char(20)), VALUE._col0 (type: bigint), KEY.reducesinkkey3 (type: int), VALUE._col0 (type: bigint), KEY.reducesinkkey4 (type: char(10)), VALUE._col0 (type: bigint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

PREHOOK: query: SELECT cd_gender,
       cd_marital_status,
       cd_education_status,
       Count(*) cnt1,
       cd_purchase_estimate,
       Count(*) cnt2,
       cd_credit_rating,
       Count(*) cnt3
FROM   customer c,
       customer_address ca,
       customer_demographics
WHERE  c.c_current_addr_sk = ca.ca_address_sk
       AND ca_state IN ( 'CO', 'IL', 'MN' )
       AND cd_demo_sk = c.c_current_cdemo_sk
       AND EXISTS (SELECT *
                   FROM   store_sales,
                          date_dim
                   WHERE  c.c_customer_sk = ss_customer_sk
                          AND ss_sold_date_sk = d_date_sk
                          AND d_year = 1999
                          AND d_moy BETWEEN 1 AND 1 + 2)
       AND ( NOT EXISTS (SELECT *
                         FROM   web_sales,
                                date_dim
                         WHERE  c.c_customer_sk = ws_bill_customer_sk
                                AND ws_sold_date_sk = d_date_sk
                                AND d_year = 1999
                                AND d_moy BETWEEN 1 AND 1 + 2)
             AND NOT EXISTS (SELECT *
                             FROM   catalog_sales,
                                    date_dim
                             WHERE  c.c_customer_sk = cs_ship_customer_sk
                                    AND cs_sold_date_sk = d_date_sk
                                    AND d_year = 1999
                                    AND d_moy BETWEEN 1 AND 1 + 2) )
GROUP  BY cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
ORDER  BY cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
LIMIT  100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: SELECT cd_gender,
       cd_marital_status,
       cd_education_status,
       Count(*) cnt1,
       cd_purchase_estimate,
       Count(*) cnt2,
       cd_credit_rating,
       Count(*) cnt3
FROM   customer c,
       customer_address ca,
       customer_demographics
WHERE  c.c_current_addr_sk = ca.ca_address_sk
       AND ca_state IN ( 'CO', 'IL', 'MN' )
       AND cd_demo_sk = c.c_current_cdemo_sk
       AND EXISTS (SELECT *
                   FROM   store_sales,
                          date_dim
                   WHERE  c.c_customer_sk = ss_customer_sk
                          AND ss_sold_date_sk = d_date_sk
                          AND d_year = 1999
                          AND d_moy BETWEEN 1 AND 1 + 2)
       AND ( NOT EXISTS (SELECT *
                         FROM   web_sales,
                                date_dim
                         WHERE  c.c_customer_sk = ws_bill_customer_sk
                                AND ws_sold_date_sk = d_date_sk
                                AND d_year = 1999
                                AND d_moy BETWEEN 1 AND 1 + 2)
             AND NOT EXISTS (SELECT *
                             FROM   catalog_sales,
                                    date_dim
                             WHERE  c.c_customer_sk = cs_ship_customer_sk
                                    AND cs_sold_date_sk = d_date_sk
                                    AND d_year = 1999
                                    AND d_moy BETWEEN 1 AND 1 + 2) )
GROUP  BY cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
ORDER  BY cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
LIMIT  100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
PREHOOK: query: explain
SELECT cd_gender,
       cd_marital_status,
       cd_education_status,
       Count(*) cnt1,
       cd_purchase_estimate,
       Count(*) cnt2,
       cd_credit_rating,
       Count(*) cnt3
FROM   customer c,
       customer_address ca,
       customer_demographics
WHERE  c.c_current_addr_sk = ca.ca_address_sk
       AND ca_state IN ( 'CO', 'IL', 'MN' )
       AND cd_demo_sk = c.c_current_cdemo_sk
       AND EXISTS (SELECT *
                   FROM   store_sales,
                          date_dim
                   WHERE  c.c_customer_sk = ss_customer_sk
                          AND ss_sold_date_sk = d_date_sk
                          AND d_year = 1999
                          AND d_moy NOT BETWEEN 1 AND 1 + 2)
       AND ( NOT EXISTS (SELECT *
                         FROM   web_sales,
                                date_dim
                         WHERE  c.c_customer_sk = ws_bill_customer_sk
                                AND ws_sold_date_sk = d_date_sk
                                AND d_year = 1999
                                AND d_moy NOT BETWEEN 1 AND 1 + 2)
             AND NOT EXISTS (SELECT *
                             FROM   catalog_sales,
                                    date_dim
                             WHERE  c.c_customer_sk = cs_ship_customer_sk
                                    AND cs_sold_date_sk = d_date_sk
                                    AND d_year = 1999
                                    AND d_moy NOT BETWEEN 1 AND 1 + 2) )
GROUP  BY cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
ORDER  BY cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
LIMIT  100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
SELECT cd_gender,
       cd_marital_status,
       cd_education_status,
       Count(*) cnt1,
       cd_purchase_estimate,
       Count(*) cnt2,
       cd_credit_rating,
       Count(*) cnt3
FROM   customer c,
       customer_address ca,
       customer_demographics
WHERE  c.c_current_addr_sk = ca.ca_address_sk
       AND ca_state IN ( 'CO', 'IL', 'MN' )
       AND cd_demo_sk = c.c_current_cdemo_sk
       AND EXISTS (SELECT *
                   FROM   store_sales,
                          date_dim
                   WHERE  c.c_customer_sk = ss_customer_sk
                          AND ss_sold_date_sk = d_date_sk
                          AND d_year = 1999
                          AND d_moy NOT BETWEEN 1 AND 1 + 2)
       AND ( NOT EXISTS (SELECT *
                         FROM   web_sales,
                                date_dim
                         WHERE  c.c_customer_sk = ws_bill_customer_sk
                                AND ws_sold_date_sk = d_date_sk
                                AND d_year = 1999
                                AND d_moy NOT BETWEEN 1 AND 1 + 2)
             AND NOT EXISTS (SELECT *
                             FROM   catalog_sales,
                                    date_dim
                             WHERE  c.c_customer_sk = cs_ship_customer_sk
                                    AND cs_sold_date_sk = d_date_sk
                                    AND d_year = 1999
                                    AND d_moy NOT BETWEEN 1 AND 1 + 2) )
GROUP  BY cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
ORDER  BY cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
LIMIT  100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
        Reducer 3 <- Map 8 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Map 9 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
        Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
        Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: c
                  properties:
                    hive.sql.query SELECT "t1"."c_customer_sk", "t1"."c_current_cdemo_sk", "t1"."c_current_addr_sk", "t4"."ca_address_sk", "t4"."ca_state", "t7"."cd_demo_sk", "t7"."cd_gender", "t7"."cd_marital_status", "t7"."cd_education_status", "t7"."cd_purchase_estimate", "t7"."cd_credit_rating"
FROM (SELECT "c_customer_sk", "c_current_cdemo_sk", "c_current_addr_sk"
FROM (SELECT "c_customer_sk", "c_current_cdemo_sk", "c_current_addr_sk"
FROM "CUSTOMER") AS "t"
WHERE "c_current_addr_sk" IS NOT NULL AND "c_current_cdemo_sk" IS NOT NULL AND "c_customer_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "ca_address_sk", "ca_state"
FROM (SELECT "ca_address_sk", "ca_state"
FROM "CUSTOMER_ADDRESS") AS "t2"
WHERE "ca_state" IN ('CO', 'IL', 'MN') AND "ca_address_sk" IS NOT NULL) AS "t4" ON "t1"."c_current_addr_sk" = "t4"."ca_address_sk"
INNER JOIN (SELECT "cd_demo_sk", "cd_gender", "cd_marital_status", "cd_education_status", "cd_purchase_estimate", "cd_credit_rating"
FROM (SELECT "cd_demo_sk", "cd_gender", "cd_marital_status", "cd_education_status", "cd_purchase_estimate", "cd_credit_rating"
FROM "CUSTOMER_DEMOGRAPHICS") AS "t5"
WHERE "cd_demo_sk" IS NOT NULL) AS "t7" ON "t1"."c_current_cdemo_sk" = "t7"."cd_demo_sk"
                    hive.sql.query.fieldNames c_customer_sk,c_current_cdemo_sk,c_current_addr_sk,ca_address_sk,ca_state,cd_demo_sk,cd_gender,cd_marital_status,cd_education_status,cd_purchase_estimate,cd_credit_rating
                    hive.sql.query.fieldTypes int,int,int,int,char(2),int,char(1),char(1),char(20),int,char(10)
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 376 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: c_customer_sk (type: int), cd_gender (type: char(1)), cd_marital_status (type: char(1)), cd_education_status (type: char(20)), cd_purchase_estimate (type: int), cd_credit_rating (type: char(10))
                    outputColumnNames: _col0, _col6, _col7, _col8, _col9, _col10
                    Statistics: Num rows: 1 Data size: 376 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 376 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "t1"."ss_customer_sk"
FROM (SELECT "ss_sold_date_sk", "ss_customer_sk"
FROM (SELECT "ss_sold_date_sk", "ss_customer_sk"
FROM "STORE_SALES") AS "t"
WHERE "ss_customer_sk" IS NOT NULL AND "ss_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t2"
WHERE ("d_moy" < 1 OR "d_moy" > 3) AND "d_year" = 1999 AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."ss_sold_date_sk" = "t4"."d_date_sk"
                    hive.sql.query.fieldNames ss_customer_sk
                    hive.sql.query.fieldTypes int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ss_customer_sk (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      keys: _col0 (type: int)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 8 
            Map Operator Tree:
                TableScan
                  alias: web_sales
                  properties:
                    hive.sql.query SELECT TRUE AS "literalTrue", "t1"."ws_bill_customer_sk"
FROM (SELECT "ws_sold_date_sk", "ws_bill_customer_sk"
FROM (SELECT "ws_sold_date_sk", "ws_bill_customer_sk"
FROM "WEB_SALES") AS "t"
WHERE "ws_bill_customer_sk" IS NOT NULL AND "ws_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t2"
WHERE ("d_moy" < 1 OR "d_moy" > 3) AND "d_year" = 1999 AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."ws_sold_date_sk" = "t4"."d_date_sk"
GROUP BY "t1"."ws_bill_customer_sk"
                    hive.sql.query.fieldNames literalTrue,ws_bill_customer_sk
                    hive.sql.query.fieldTypes boolean,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: literaltrue (type: boolean), ws_bill_customer_sk (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 9 
            Map Operator Tree:
                TableScan
                  alias: catalog_sales
                  properties:
                    hive.sql.query SELECT TRUE AS "literalTrue", "t1"."cs_ship_customer_sk"
FROM (SELECT "cs_sold_date_sk", "cs_ship_customer_sk"
FROM (SELECT "cs_sold_date_sk", "cs_ship_customer_sk"
FROM "CATALOG_SALES") AS "t"
WHERE "cs_ship_customer_sk" IS NOT NULL AND "cs_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "DATE_DIM") AS "t2"
WHERE ("d_moy" < 1 OR "d_moy" > 3) AND "d_year" = 1999 AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."cs_sold_date_sk" = "t4"."d_date_sk"
GROUP BY "t1"."cs_ship_customer_sk"
                    hive.sql.query.fieldNames literalTrue,cs_ship_customer_sk
                    hive.sql.query.fieldTypes boolean,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: literaltrue (type: boolean), cs_ship_customer_sk (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col6, _col7, _col8, _col9, _col10
                Statistics: Num rows: 1 Data size: 413 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col0 (type: int)
                  Statistics: Num rows: 1 Data size: 413 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col0, _col6, _col7, _col8, _col9, _col10, _col11
                Statistics: Num rows: 1 Data size: 454 Basic stats: COMPLETE Column stats: NONE
                Filter Operator
                  predicate: _col11 is null (type: boolean)
                  Statistics: Num rows: 1 Data size: 454 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: _col0 (type: int), _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
                    outputColumnNames: _col0, _col6, _col7, _col8, _col9, _col10
                    Statistics: Num rows: 1 Data size: 454 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 454 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col6, _col7, _col8, _col9, _col10, _col13
                Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                Filter Operator
                  predicate: _col13 is null (type: boolean)
                  Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                  Top N Key Operator
                    sort order: +++++
                    keys: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
                    null sort order: zzzzz
                    Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                    top n: 100
                    Select Operator
                      expressions: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
                      outputColumnNames: _col6, _col7, _col8, _col9, _col10
                      Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        aggregations: count()
                        keys: _col6 (type: char(1)), _col7 (type: char(1)), _col8 (type: char(20)), _col9 (type: int), _col10 (type: char(10))
                        minReductionHashAggr: 0.99
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                        Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: char(1)), _col1 (type: char(1)), _col2 (type: char(20)), _col3 (type: int), _col4 (type: char(10))
                          null sort order: zzzzz
                          sort order: +++++
                          Map-reduce partition columns: _col0 (type: char(1)), _col1 (type: char(1)), _col2 (type: char(20)), _col3 (type: int), _col4 (type: char(10))
                          Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col5 (type: bigint)
        Reducer 5 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: char(1)), KEY._col1 (type: char(1)), KEY._col2 (type: char(20)), KEY._col3 (type: int), KEY._col4 (type: char(10))
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: char(1)), _col1 (type: char(1)), _col2 (type: char(20)), _col5 (type: bigint), _col3 (type: int), _col4 (type: char(10))
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col6
                  Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: char(1)), _col1 (type: char(1)), _col2 (type: char(20)), _col4 (type: int), _col6 (type: char(10))
                    null sort order: zzzzz
                    sort order: +++++
                    Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col3 (type: bigint)
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: char(1)), KEY.reducesinkkey1 (type: char(1)), KEY.reducesinkkey2 (type: char(20)), VALUE._col0 (type: bigint), KEY.reducesinkkey3 (type: int), VALUE._col0 (type: bigint), KEY.reducesinkkey4 (type: char(10)), VALUE._col0 (type: bigint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 499 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

PREHOOK: query: SELECT cd_gender,
       cd_marital_status,
       cd_education_status,
       Count(*) cnt1,
       cd_purchase_estimate,
       Count(*) cnt2,
       cd_credit_rating,
       Count(*) cnt3
FROM   customer c,
       customer_address ca,
       customer_demographics
WHERE  c.c_current_addr_sk = ca.ca_address_sk
       AND ca_state IN ( 'CO', 'IL', 'MN' )
       AND cd_demo_sk = c.c_current_cdemo_sk
       AND EXISTS (SELECT *
                   FROM   store_sales,
                          date_dim
                   WHERE  c.c_customer_sk = ss_customer_sk
                          AND ss_sold_date_sk = d_date_sk
                          AND d_year = 1999
                          AND d_moy NOT BETWEEN 1 AND 1 + 2)
       AND ( NOT EXISTS (SELECT *
                         FROM   web_sales,
                                date_dim
                         WHERE  c.c_customer_sk = ws_bill_customer_sk
                                AND ws_sold_date_sk = d_date_sk
                                AND d_year = 1999
                                AND d_moy NOT BETWEEN 1 AND 1 + 2)
             AND NOT EXISTS (SELECT *
                             FROM   catalog_sales,
                                    date_dim
                             WHERE  c.c_customer_sk = cs_ship_customer_sk
                                    AND cs_sold_date_sk = d_date_sk
                                    AND d_year = 1999
                                    AND d_moy NOT BETWEEN 1 AND 1 + 2) )
GROUP  BY cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
ORDER  BY cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
LIMIT  100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: SELECT cd_gender,
       cd_marital_status,
       cd_education_status,
       Count(*) cnt1,
       cd_purchase_estimate,
       Count(*) cnt2,
       cd_credit_rating,
       Count(*) cnt3
FROM   customer c,
       customer_address ca,
       customer_demographics
WHERE  c.c_current_addr_sk = ca.ca_address_sk
       AND ca_state IN ( 'CO', 'IL', 'MN' )
       AND cd_demo_sk = c.c_current_cdemo_sk
       AND EXISTS (SELECT *
                   FROM   store_sales,
                          date_dim
                   WHERE  c.c_customer_sk = ss_customer_sk
                          AND ss_sold_date_sk = d_date_sk
                          AND d_year = 1999
                          AND d_moy NOT BETWEEN 1 AND 1 + 2)
       AND ( NOT EXISTS (SELECT *
                         FROM   web_sales,
                                date_dim
                         WHERE  c.c_customer_sk = ws_bill_customer_sk
                                AND ws_sold_date_sk = d_date_sk
                                AND d_year = 1999
                                AND d_moy NOT BETWEEN 1 AND 1 + 2)
             AND NOT EXISTS (SELECT *
                             FROM   catalog_sales,
                                    date_dim
                             WHERE  c.c_customer_sk = cs_ship_customer_sk
                                    AND cs_sold_date_sk = d_date_sk
                                    AND d_year = 1999
                                    AND d_moy NOT BETWEEN 1 AND 1 + 2) )
GROUP  BY cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
ORDER  BY cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
LIMIT  100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
PREHOOK: query: explain
SELECT ranking
FROM
    (SELECT rank() OVER (PARTITION BY ss_store_sk
        ORDER BY sum(ss_net_profit)) AS ranking
     FROM store_sales
     GROUP BY ss_store_sk) tmp1
WHERE ranking <= 5
PREHOOK: type: QUERY
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
SELECT ranking
FROM
    (SELECT rank() OVER (PARTITION BY ss_store_sk
        ORDER BY sum(ss_net_profit)) AS ranking
     FROM store_sales
     GROUP BY ss_store_sk) tmp1
WHERE ranking <= 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "ss_store_sk", SUM("ss_net_profit") AS "$f1"
FROM "STORE_SALES"
GROUP BY "ss_store_sk"
                    hive.sql.query.fieldNames ss_store_sk,$f1
                    hive.sql.query.fieldTypes int,decimal(17,2)
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                  Top N Key Operator
                    sort order: ++
                    keys: ss_store_sk (type: int), $f1 (type: decimal(17,2))
                    null sort order: az
                    Map-reduce partition columns: ss_store_sk (type: int)
                    Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                    top n: 6
                    Select Operator
                      expressions: ss_store_sk (type: int), $f1 (type: decimal(17,2))
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: decimal(17,2))
                        null sort order: az
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), KEY.reducesinkkey1 (type: decimal(17,2))
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: int, _col1: decimal(17,2)
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS LAST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: rank_window_0
                              arguments: _col1
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (rank_window_0 <= 5) (type: boolean)
                    Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: rank_window_0 (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT ranking
FROM
    (SELECT rank() OVER (PARTITION BY ss_store_sk
        ORDER BY sum(ss_net_profit)) AS ranking
     FROM store_sales
     GROUP BY ss_store_sk) tmp1
WHERE ranking <= 5
PREHOOK: type: QUERY
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: SELECT ranking
FROM
    (SELECT rank() OVER (PARTITION BY ss_store_sk
        ORDER BY sum(ss_net_profit)) AS ranking
     FROM store_sales
     GROUP BY ss_store_sk) tmp1
WHERE ranking <= 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
PREHOOK: query: DROP TABLE catalog_sales
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@catalog_sales
PREHOOK: Output: database:default
PREHOOK: Output: default@catalog_sales
POSTHOOK: query: DROP TABLE catalog_sales
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Output: database:default
POSTHOOK: Output: default@catalog_sales
PREHOOK: query: DROP TABLE catalog_returns
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@catalog_returns
PREHOOK: Output: database:default
PREHOOK: Output: default@catalog_returns
POSTHOOK: query: DROP TABLE catalog_returns
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Output: database:default
POSTHOOK: Output: default@catalog_returns
PREHOOK: query: DROP TABLE store_sales
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@store_sales
PREHOOK: Output: database:default
PREHOOK: Output: default@store_sales
POSTHOOK: query: DROP TABLE store_sales
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: database:default
POSTHOOK: Output: default@store_sales
PREHOOK: query: DROP TABLE store_returns
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@store_returns
PREHOOK: Output: database:default
PREHOOK: Output: default@store_returns
POSTHOOK: query: DROP TABLE store_returns
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@store_returns
POSTHOOK: Output: database:default
POSTHOOK: Output: default@store_returns
PREHOOK: query: DROP TABLE web_sales
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@web_sales
PREHOOK: Output: database:default
PREHOOK: Output: default@web_sales
POSTHOOK: query: DROP TABLE web_sales
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: database:default
POSTHOOK: Output: default@web_sales
PREHOOK: query: DROP TABLE web_returns
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@web_returns
PREHOOK: Output: database:default
PREHOOK: Output: default@web_returns
POSTHOOK: query: DROP TABLE web_returns
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@web_returns
POSTHOOK: Output: database:default
POSTHOOK: Output: default@web_returns
PREHOOK: query: DROP TABLE customer
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@customer
PREHOOK: Output: database:default
PREHOOK: Output: default@customer
POSTHOOK: query: DROP TABLE customer
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@customer
POSTHOOK: Output: database:default
POSTHOOK: Output: default@customer
PREHOOK: query: DROP TABLE customer_address
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@customer_address
PREHOOK: Output: database:default
PREHOOK: Output: default@customer_address
POSTHOOK: query: DROP TABLE customer_address
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@customer_address
POSTHOOK: Output: database:default
POSTHOOK: Output: default@customer_address
PREHOOK: query: DROP TABLE customer_demographics
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@customer_demographics
PREHOOK: Output: database:default
PREHOOK: Output: default@customer_demographics
POSTHOOK: query: DROP TABLE customer_demographics
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Output: database:default
POSTHOOK: Output: default@customer_demographics
PREHOOK: query: DROP TABLE inventory
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@inventory
PREHOOK: Output: database:default
PREHOOK: Output: default@inventory
POSTHOOK: query: DROP TABLE inventory
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@inventory
POSTHOOK: Output: database:default
POSTHOOK: Output: default@inventory
PREHOOK: query: DROP TABLE item
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@item
PREHOOK: Output: database:default
PREHOOK: Output: default@item
POSTHOOK: query: DROP TABLE item
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@item
POSTHOOK: Output: database:default
POSTHOOK: Output: default@item
PREHOOK: query: DROP TABLE warehouse
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@warehouse
PREHOOK: Output: database:default
PREHOOK: Output: default@warehouse
POSTHOOK: query: DROP TABLE warehouse
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@warehouse
POSTHOOK: Output: database:default
POSTHOOK: Output: default@warehouse
PREHOOK: query: DROP TABLE date_dim
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@date_dim
PREHOOK: Output: database:default
PREHOOK: Output: default@date_dim
POSTHOOK: query: DROP TABLE date_dim
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@date_dim
POSTHOOK: Output: database:default
POSTHOOK: Output: default@date_dim
PREHOOK: query: DROP TABLE store
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@store
PREHOOK: Output: database:default
PREHOOK: Output: default@store
POSTHOOK: query: DROP TABLE store
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@store
POSTHOOK: Output: database:default
POSTHOOK: Output: default@store
PREHOOK: query: DROP TABLE household_demographics
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@household_demographics
PREHOOK: Output: database:default
PREHOOK: Output: default@household_demographics
POSTHOOK: query: DROP TABLE household_demographics
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@household_demographics
POSTHOOK: Output: database:default
POSTHOOK: Output: default@household_demographics
PREHOOK: query: DROP TABLE time_dim
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@time_dim
PREHOOK: Output: database:default
PREHOOK: Output: default@time_dim
POSTHOOK: query: DROP TABLE time_dim
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@time_dim
POSTHOOK: Output: database:default
POSTHOOK: Output: default@time_dim
PREHOOK: query: DROP TABLE reason
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@reason
PREHOOK: Output: database:default
PREHOOK: Output: default@reason
POSTHOOK: query: DROP TABLE reason
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@reason
POSTHOOK: Output: database:default
POSTHOOK: Output: default@reason
PREHOOK: query: FROM src
SELECT
#### A masked pattern was here ####
'DROP TABLE CATALOG_SALES' ),
#### A masked pattern was here ####
'DROP TABLE CATALOG_RETURNS' ),
#### A masked pattern was here ####
'DROP TABLE STORE_SALES' ),
#### A masked pattern was here ####
'DROP TABLE STORE_RETURNS' ),
#### A masked pattern was here ####
'DROP TABLE WEB_SALES' ),
#### A masked pattern was here ####
'DROP TABLE WEB_RETURNS' ),
#### A masked pattern was here ####
'DROP TABLE CUSTOMER' ),
#### A masked pattern was here ####
'DROP TABLE CUSTOMER_ADDRESS' ),
#### A masked pattern was here ####
'DROP TABLE CUSTOMER_DEMOGRAPHICS' ),
#### A masked pattern was here ####
'DROP TABLE INVENTORY' ),
#### A masked pattern was here ####
'DROP TABLE ITEM' ),
#### A masked pattern was here ####
'DROP TABLE WAREHOUSE' ),
#### A masked pattern was here ####
'DROP TABLE DATE_DIM' ),
#### A masked pattern was here ####
'DROP TABLE STORE' ),
#### A masked pattern was here ####
'DROP TABLE HOUSEHOLD_DEMOGRAPHICS' ),
#### A masked pattern was here ####
'DROP TABLE TIME_DIM' ),
#### A masked pattern was here ####
'DROP TABLE REASON' )
limit 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: FROM src
SELECT
#### A masked pattern was here ####
'DROP TABLE CATALOG_SALES' ),
#### A masked pattern was here ####
'DROP TABLE CATALOG_RETURNS' ),
#### A masked pattern was here ####
'DROP TABLE STORE_SALES' ),
#### A masked pattern was here ####
'DROP TABLE STORE_RETURNS' ),
#### A masked pattern was here ####
'DROP TABLE WEB_SALES' ),
#### A masked pattern was here ####
'DROP TABLE WEB_RETURNS' ),
#### A masked pattern was here ####
'DROP TABLE CUSTOMER' ),
#### A masked pattern was here ####
'DROP TABLE CUSTOMER_ADDRESS' ),
#### A masked pattern was here ####
'DROP TABLE CUSTOMER_DEMOGRAPHICS' ),
#### A masked pattern was here ####
'DROP TABLE INVENTORY' ),
#### A masked pattern was here ####
'DROP TABLE ITEM' ),
#### A masked pattern was here ####
'DROP TABLE WAREHOUSE' ),
#### A masked pattern was here ####
'DROP TABLE DATE_DIM' ),
#### A masked pattern was here ####
'DROP TABLE STORE' ),
#### A masked pattern was here ####
'DROP TABLE HOUSEHOLD_DEMOGRAPHICS' ),
#### A masked pattern was here ####
'DROP TABLE TIME_DIM' ),
#### A masked pattern was here ####
'DROP TABLE REASON' )
limit 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
