PREHOOK: query: create table sketch_input (id int, category char(1))
STORED AS ORC
TBLPROPERTIES ('transactional'='true')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@sketch_input
POSTHOOK: query: create table sketch_input (id int, category char(1))
STORED AS ORC
TBLPROPERTIES ('transactional'='true')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@sketch_input
PREHOOK: query: insert into table sketch_input values
  (1,'a'),(1, 'a'), (2, 'a'), (3, 'a'), (4, 'a'), (5, 'a'), (6, 'a'), (7, 'a'), (8, 'a'), (9, 'a'), (10, 'a'),
  (6,'b'),(6, 'b'), (7, 'b'), (8, 'b'), (9, 'b'), (10, 'b'), (11, 'b'), (12, 'b'), (13, 'b'), (14, 'b'), (15, 'b')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@sketch_input
POSTHOOK: query: insert into table sketch_input values
  (1,'a'),(1, 'a'), (2, 'a'), (3, 'a'), (4, 'a'), (5, 'a'), (6, 'a'), (7, 'a'), (8, 'a'), (9, 'a'), (10, 'a'),
  (6,'b'),(6, 'b'), (7, 'b'), (8, 'b'), (9, 'b'), (10, 'b'), (11, 'b'), (12, 'b'), (13, 'b'), (14, 'b'), (15, 'b')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@sketch_input
POSTHOOK: Lineage: sketch_input.category SCRIPT []
POSTHOOK: Lineage: sketch_input.id SCRIPT []
PREHOOK: query: select id,ntile(4) over (order by id) from sketch_input
PREHOOK: type: QUERY
PREHOOK: Input: default@sketch_input
#### A masked pattern was here ####
POSTHOOK: query: select id,ntile(4) over (order by id) from sketch_input
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sketch_input
#### A masked pattern was here ####
1	1
1	1
2	1
3	1
4	1
5	1
6	2
6	2
6	2
7	2
7	2
8	2
8	3
9	3
9	3
10	3
10	3
11	4
12	4
13	4
14	4
15	4
Warning: Shuffle Join MERGEJOIN[20][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: select id,ntile(4) over (order by id),1.0-ds_kll_cdf(ds, CAST(-id AS FLOAT) )[0]
from sketch_input
join ( select ds_kll_sketch(cast(-id as float)) as ds from sketch_input ) q
order by id
PREHOOK: type: QUERY
PREHOOK: Input: default@sketch_input
#### A masked pattern was here ####
POSTHOOK: query: select id,ntile(4) over (order by id),1.0-ds_kll_cdf(ds, CAST(-id AS FLOAT) )[0]
from sketch_input
join ( select ds_kll_sketch(cast(-id as float)) as ds from sketch_input ) q
order by id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sketch_input
#### A masked pattern was here ####
1	1	0.09090909090909094
1	1	0.09090909090909094
2	1	0.13636363636363635
3	1	0.18181818181818177
4	1	0.2272727272727273
5	1	0.2727272727272727
6	2	0.40909090909090906
6	2	0.40909090909090906
6	2	0.40909090909090906
7	2	0.5
7	2	0.5
8	2	0.5909090909090908
8	3	0.5909090909090908
9	3	0.6818181818181819
9	3	0.6818181818181819
10	3	0.7727272727272727
10	3	0.7727272727272727
11	4	0.8181818181818181
12	4	0.8636363636363636
13	4	0.9090909090909091
14	4	0.9545454545454546
15	4	1.0
PREHOOK: query: explain
select id,'rewrite',ntile(4) over (order by id) from sketch_input order by id
PREHOOK: type: QUERY
PREHOOK: Input: default@sketch_input
#### A masked pattern was here ####
POSTHOOK: query: explain
select id,'rewrite',ntile(4) over (order by id) from sketch_input order by id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sketch_input
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: sketch_input
                  Statistics: Num rows: 22 Data size: 88 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: 0 (type: int), id (type: int)
                    null sort order: az
                    sort order: ++
                    Map-reduce partition columns: 0 (type: int)
                    Statistics: Num rows: 22 Data size: 88 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: may be used (ACID table)
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey1 (type: int)
                outputColumnNames: _col0
                Statistics: Num rows: 22 Data size: 5984 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS LAST
                        partition by: 0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: ntile_window_0
                              arguments: 4
                              name: ntile
                              window function: GenericUDAFNTileEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 22 Data size: 5984 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: int), ntile_window_0 (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 22 Data size: 176 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Statistics: Num rows: 22 Data size: 176 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: int)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), 'rewrite' (type: string), VALUE._col0 (type: int)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 22 Data size: 2178 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 22 Data size: 2178 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select id,'rewrite',ntile(4) over (order by id) from sketch_input order by id
PREHOOK: type: QUERY
PREHOOK: Input: default@sketch_input
#### A masked pattern was here ####
POSTHOOK: query: select id,'rewrite',ntile(4) over (order by id) from sketch_input order by id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sketch_input
#### A masked pattern was here ####
1	rewrite	1
1	rewrite	1
2	rewrite	1
3	rewrite	1
4	rewrite	1
5	rewrite	1
6	rewrite	2
6	rewrite	2
6	rewrite	2
7	rewrite	2
7	rewrite	2
8	rewrite	2
8	rewrite	3
9	rewrite	3
9	rewrite	3
10	rewrite	3
10	rewrite	3
11	rewrite	4
12	rewrite	4
13	rewrite	4
14	rewrite	4
15	rewrite	4
PREHOOK: query: explain
select id,'rewrite',count(id) over ()*ntile(4) over (order by id) from sketch_input order by id
PREHOOK: type: QUERY
PREHOOK: Input: default@sketch_input
#### A masked pattern was here ####
POSTHOOK: query: explain
select id,'rewrite',count(id) over ()*ntile(4) over (order by id) from sketch_input order by id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sketch_input
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: sketch_input
                  Statistics: Num rows: 22 Data size: 88 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: 0 (type: int)
                    null sort order: a
                    sort order: +
                    Map-reduce partition columns: 0 (type: int)
                    Statistics: Num rows: 22 Data size: 88 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: id (type: int)
            Execution mode: vectorized, llap
            LLAP IO: may be used (ACID table)
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: int)
                outputColumnNames: _col0
                Statistics: Num rows: 22 Data size: 5984 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: 0 ASC NULLS FIRST
                        partition by: 0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              arguments: _col0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  Statistics: Num rows: 22 Data size: 5984 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: count_window_0 (type: bigint), _col0 (type: int)
                    outputColumnNames: count_window_0, _col0
                    Statistics: Num rows: 22 Data size: 5984 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: 0 (type: int), _col0 (type: int)
                      null sort order: az
                      sort order: ++
                      Map-reduce partition columns: 0 (type: int)
                      Statistics: Num rows: 22 Data size: 5984 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: count_window_0 (type: bigint)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: bigint), KEY.reducesinkkey1 (type: int)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 22 Data size: 6160 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: bigint, _col1: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS LAST
                        partition by: 0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: ntile_window_1
                              arguments: 4
                              name: ntile
                              window function: GenericUDAFNTileEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 22 Data size: 6160 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col1 (type: int), (_col0 * UDFToLong(ntile_window_1)) (type: bigint)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 22 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Statistics: Num rows: 22 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: bigint)
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), 'rewrite' (type: string), VALUE._col0 (type: bigint)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 22 Data size: 2266 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 22 Data size: 2266 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select id,'rewrite',count(id) over ()*ntile(4) over (order by id) from sketch_input order by id
PREHOOK: type: QUERY
PREHOOK: Input: default@sketch_input
#### A masked pattern was here ####
POSTHOOK: query: select id,'rewrite',count(id) over ()*ntile(4) over (order by id) from sketch_input order by id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sketch_input
#### A masked pattern was here ####
1	rewrite	22
1	rewrite	22
2	rewrite	22
3	rewrite	22
4	rewrite	22
5	rewrite	22
6	rewrite	44
6	rewrite	44
6	rewrite	44
7	rewrite	44
7	rewrite	44
8	rewrite	44
8	rewrite	66
9	rewrite	66
9	rewrite	66
10	rewrite	66
10	rewrite	66
11	rewrite	88
12	rewrite	88
13	rewrite	88
14	rewrite	88
15	rewrite	88
PREHOOK: query: insert into sketch_input values (null,'a'),(null,'b')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@sketch_input
POSTHOOK: query: insert into sketch_input values (null,'a'),(null,'b')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@sketch_input
POSTHOOK: Lineage: sketch_input.category SCRIPT []
POSTHOOK: Lineage: sketch_input.id EXPRESSION []
PREHOOK: query: explain
select id,'rewrite',ntile(4) over (order by id nulls first) from sketch_input order by id nulls first
PREHOOK: type: QUERY
PREHOOK: Input: default@sketch_input
#### A masked pattern was here ####
POSTHOOK: query: explain
select id,'rewrite',ntile(4) over (order by id nulls first) from sketch_input order by id nulls first
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sketch_input
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: sketch_input
                  Statistics: Num rows: 24 Data size: 92 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: 0 (type: int), id (type: int)
                    null sort order: aa
                    sort order: ++
                    Map-reduce partition columns: 0 (type: int)
                    Statistics: Num rows: 24 Data size: 92 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: may be used (ACID table)
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey1 (type: int)
                outputColumnNames: _col0
                Statistics: Num rows: 24 Data size: 6524 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST
                        partition by: 0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: ntile_window_0
                              arguments: 4
                              name: ntile
                              window function: GenericUDAFNTileEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 24 Data size: 6524 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: int), ntile_window_0 (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 24 Data size: 180 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: a
                      sort order: +
                      Statistics: Num rows: 24 Data size: 180 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: int)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), 'rewrite' (type: string), VALUE._col0 (type: int)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 24 Data size: 2364 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 24 Data size: 2364 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select id,'rewrite',ntile(4) over (order by id nulls first) from sketch_input order by id nulls first
PREHOOK: type: QUERY
PREHOOK: Input: default@sketch_input
#### A masked pattern was here ####
POSTHOOK: query: select id,'rewrite',ntile(4) over (order by id nulls first) from sketch_input order by id nulls first
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sketch_input
#### A masked pattern was here ####
NULL	rewrite	1
NULL	rewrite	1
1	rewrite	1
1	rewrite	1
2	rewrite	1
3	rewrite	1
4	rewrite	2
5	rewrite	2
6	rewrite	2
6	rewrite	2
6	rewrite	2
7	rewrite	3
7	rewrite	2
8	rewrite	3
8	rewrite	3
9	rewrite	3
9	rewrite	3
10	rewrite	3
10	rewrite	4
11	rewrite	4
12	rewrite	4
13	rewrite	4
14	rewrite	4
15	rewrite	4
PREHOOK: query: explain
select id,'rewrite',ntile(4) over (order by id nulls last) from sketch_input order by id nulls last
PREHOOK: type: QUERY
PREHOOK: Input: default@sketch_input
#### A masked pattern was here ####
POSTHOOK: query: explain
select id,'rewrite',ntile(4) over (order by id nulls last) from sketch_input order by id nulls last
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sketch_input
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: sketch_input
                  Statistics: Num rows: 24 Data size: 92 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: 0 (type: int), id (type: int)
                    null sort order: az
                    sort order: ++
                    Map-reduce partition columns: 0 (type: int)
                    Statistics: Num rows: 24 Data size: 92 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: may be used (ACID table)
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey1 (type: int)
                outputColumnNames: _col0
                Statistics: Num rows: 24 Data size: 6524 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS LAST
                        partition by: 0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: ntile_window_0
                              arguments: 4
                              name: ntile
                              window function: GenericUDAFNTileEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 24 Data size: 6524 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: int), ntile_window_0 (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 24 Data size: 180 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Statistics: Num rows: 24 Data size: 180 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: int)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), 'rewrite' (type: string), VALUE._col0 (type: int)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 24 Data size: 2364 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 24 Data size: 2364 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select id,'rewrite',ntile(4) over (order by id nulls last) from sketch_input order by id nulls last
PREHOOK: type: QUERY
PREHOOK: Input: default@sketch_input
#### A masked pattern was here ####
POSTHOOK: query: select id,'rewrite',ntile(4) over (order by id nulls last) from sketch_input order by id nulls last
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sketch_input
#### A masked pattern was here ####
1	rewrite	1
1	rewrite	1
2	rewrite	1
3	rewrite	1
4	rewrite	1
5	rewrite	1
6	rewrite	2
6	rewrite	2
6	rewrite	2
7	rewrite	2
7	rewrite	2
8	rewrite	3
8	rewrite	2
9	rewrite	3
9	rewrite	3
10	rewrite	3
10	rewrite	3
11	rewrite	3
12	rewrite	4
13	rewrite	4
14	rewrite	4
15	rewrite	4
NULL	rewrite	4
NULL	rewrite	4
PREHOOK: query: select id,ntile(4) over (order by id) from sketch_input order by id
PREHOOK: type: QUERY
PREHOOK: Input: default@sketch_input
#### A masked pattern was here ####
POSTHOOK: query: select id,ntile(4) over (order by id) from sketch_input order by id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sketch_input
#### A masked pattern was here ####
1	1
1	1
2	1
3	1
4	1
5	1
6	2
6	2
6	2
7	2
7	2
8	3
8	2
9	3
9	3
10	3
10	3
11	3
12	4
13	4
14	4
15	4
NULL	4
NULL	4
