PREHOOK: query: create temporary table null_tab(x int) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@null_tab
POSTHOOK: query: create temporary table null_tab(x int) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@null_tab
PREHOOK: query: create temporary table dummy_tab(x int) stored as textfile
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@dummy_tab
POSTHOOK: query: create temporary table dummy_tab(x int) stored as textfile
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@dummy_tab
PREHOOK: query: insert into null_tab values(1)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@null_tab
POSTHOOK: query: insert into null_tab values(1)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@null_tab
POSTHOOK: Lineage: null_tab.x SCRIPT []
PREHOOK: query: insert into dummy_tab values(1)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@dummy_tab
POSTHOOK: query: insert into dummy_tab values(1)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@dummy_tab
POSTHOOK: Lineage: dummy_tab.x SCRIPT []
PREHOOK: query: explain vectorization detail
SELECT MIN(table_name) as table_name, c1,c2,c3 from( 
select 'a' as table_name, null as c1, null as c2, null as c3 from null_tab 
union all 
select 'b' as table_name, null as c1, null as c2, null as c3 from dummy_tab 
) t_union 
group by c1,c2,c3
PREHOOK: type: QUERY
PREHOOK: Input: default@dummy_tab
PREHOOK: Input: default@null_tab
#### A masked pattern was here ####
POSTHOOK: query: explain vectorization detail
SELECT MIN(table_name) as table_name, c1,c2,c3 from( 
select 'a' as table_name, null as c1, null as c2, null as c3 from null_tab 
union all 
select 'b' as table_name, null as c1, null as c2, null as c3 from dummy_tab 
) t_union 
group by c1,c2,c3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dummy_tab
POSTHOOK: Input: default@null_tab
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Union 2 (CONTAINS)
        Map 4 <- Union 2 (CONTAINS)
        Reducer 3 <- Union 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: null_tab
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:x:int, 1:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Select Operator
                    expressions: 'a' (type: string)
                    outputColumnNames: _col0
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [2]
                        selectExpressions: ConstantVectorExpression(val a) -> 2:string
                    Statistics: Num rows: 1 Data size: 85 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: _col0 (type: string)
                      outputColumnNames: _col1
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [2]
                      Statistics: Num rows: 2 Data size: 170 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: min(_col1)
                        Group By Vectorization:
                            aggregators: VectorUDAFMinString(col 2:string) -> string
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            keyExpressions: ConstantVectorExpression(val 1) -> 3:boolean
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0]
                        keys: true (type: boolean)
                        minReductionHashAggr: 0.5
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: boolean)
                          null sort order: a
                          sort order: +
                          Map-reduce partition columns: _col0 (type: boolean)
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkLongOperator
                              keyColumns: 0:boolean
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                              valueColumns: 1:string
                          Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 1
                    includeColumns: []
                    dataColumns: x:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [string, bigint]
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: dummy_tab
                  Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: 'b' (type: string)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 85 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: _col0 (type: string)
                      outputColumnNames: _col1
                      Statistics: Num rows: 2 Data size: 170 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: min(_col1)
                        keys: true (type: boolean)
                        minReductionHashAggr: 0.5
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: boolean)
                          null sort order: a
                          sort order: +
                          Map-reduce partition columns: _col0 (type: boolean)
                          Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col1 (type: string)
            Execution mode: llap
            LLAP IO: no inputs
            Map Vectorization:
                enabled: false
                enabledConditionsNotMet: hive.vectorized.use.vector.serde.deserialize IS false
                inputFileFormats: org.apache.hadoop.mapred.TextInputFormat
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 2
                    dataColumns: KEY._col0:boolean, VALUE._col0:string
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
            Reduce Operator Tree:
              Group By Operator
                aggregations: min(VALUE._col0)
                Group By Vectorization:
                    aggregators: VectorUDAFMinString(col 1:string) -> string
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    keyExpressions: col 0:boolean
                    native: false
                    vectorProcessingMode: MERGE_PARTIAL
                    projectedOutputColumnNums: [0]
                keys: KEY._col0 (type: boolean)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col1 (type: string), null (type: void), null (type: void), null (type: void)
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [1, 2, 3, 4]
                      selectExpressions: ConstantVectorExpression(val null) -> 2:void, ConstantVectorExpression(val null) -> 3:void, ConstantVectorExpression(val null) -> 4:void
                  Statistics: Num rows: 1 Data size: 196 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 1 Data size: 196 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Union 2 
            Vertex: Union 2

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT MIN(table_name) as table_name, c1,c2,c3 from( 
select 'a' as table_name, null as c1, null as c2, null as c3 from null_tab 
union all 
select 'b' as table_name, null as c1, null as c2, null as c3 from dummy_tab 
) t_union 
group by c1,c2,c3
PREHOOK: type: QUERY
PREHOOK: Input: default@dummy_tab
PREHOOK: Input: default@null_tab
#### A masked pattern was here ####
POSTHOOK: query: SELECT MIN(table_name) as table_name, c1,c2,c3 from( 
select 'a' as table_name, null as c1, null as c2, null as c3 from null_tab 
union all 
select 'b' as table_name, null as c1, null as c2, null as c3 from dummy_tab 
) t_union 
group by c1,c2,c3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dummy_tab
POSTHOOK: Input: default@null_tab
#### A masked pattern was here ####
a	NULL	NULL	NULL
