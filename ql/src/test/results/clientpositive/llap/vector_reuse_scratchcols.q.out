PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT AVG(cint),
       (AVG(cint) + -3728),
       (-((AVG(cint) + -3728))),
       (-((-((AVG(cint) + -3728))))),
       ((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)),
       SUM(cdouble),
       (-(AVG(cint))),
       STDDEV_POP(cint),
       (((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)) * (-((-((AVG(cint) + -3728)))))),
       STDDEV_SAMP(csmallint),
       (-(STDDEV_POP(cint))),
       (STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))),
       ((STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))) * STDDEV_POP(cint)),
       VAR_SAMP(cint),
       AVG(cfloat),
       (10.175 - VAR_SAMP(cint)),
       (-((10.175 - VAR_SAMP(cint)))),
       ((-(STDDEV_POP(cint))) / -563),
       STDDEV_SAMP(cint),
       (-(((-(STDDEV_POP(cint))) / -563))),
       (AVG(cint) / SUM(cdouble)),
       MIN(ctinyint),
       COUNT(csmallint),
       (MIN(ctinyint) / ((-(STDDEV_POP(cint))) / -563)),
       (-((AVG(cint) / SUM(cdouble))))
FROM   alltypesorc
WHERE  ((762 = cbigint)
        OR ((csmallint < cfloat)
            AND ((ctimestamp2 > -5)
                 AND (cdouble != cint)))
        OR (cstring1 = 'a')
           OR ((cbigint <= -1.389)
               AND ((cstring2 != 'a')
                    AND ((79.553 != cint)
                         AND (cboolean2 != cboolean1)))))
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT AVG(cint),
       (AVG(cint) + -3728),
       (-((AVG(cint) + -3728))),
       (-((-((AVG(cint) + -3728))))),
       ((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)),
       SUM(cdouble),
       (-(AVG(cint))),
       STDDEV_POP(cint),
       (((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)) * (-((-((AVG(cint) + -3728)))))),
       STDDEV_SAMP(csmallint),
       (-(STDDEV_POP(cint))),
       (STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))),
       ((STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))) * STDDEV_POP(cint)),
       VAR_SAMP(cint),
       AVG(cfloat),
       (10.175 - VAR_SAMP(cint)),
       (-((10.175 - VAR_SAMP(cint)))),
       ((-(STDDEV_POP(cint))) / -563),
       STDDEV_SAMP(cint),
       (-(((-(STDDEV_POP(cint))) / -563))),
       (AVG(cint) / SUM(cdouble)),
       MIN(ctinyint),
       COUNT(csmallint),
       (MIN(ctinyint) / ((-(STDDEV_POP(cint))) / -563)),
       (-((AVG(cint) / SUM(cdouble))))
FROM   alltypesorc
WHERE  ((762 = cbigint)
        OR ((csmallint < cfloat)
            AND ((ctimestamp2 > -5)
                 AND (cdouble != cint)))
        OR (cstring1 = 'a')
           OR ((cbigint <= -1.389)
               AND ((cstring2 != 'a')
                    AND ((79.553 != cint)
                         AND (cboolean2 != cboolean1)))))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  filterExpr: (((UDFToFloat(csmallint) < cfloat) and (UDFToDouble(ctimestamp2) > -5.0D) and (cdouble <> UDFToDouble(cint))) or ((CAST( cbigint AS decimal(22,3)) <= -1.389) and (cstring2 <> 'a') and (CAST( cint AS decimal(13,3)) <> 79.553) and (cboolean2 <> cboolean1)) or (cbigint = 762L) or (cstring1 = 'a')) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 2477130 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:ctinyint:tinyint, 1:csmallint:smallint, 2:cint:int, 3:cbigint:bigint, 4:cfloat:float, 5:cdouble:double, 6:cstring1:string, 7:cstring2:string, 8:ctimestamp1:timestamp, 9:ctimestamp2:timestamp, 10:cboolean1:boolean, 11:cboolean2:boolean, 12:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>, 13:ROW__IS__DELETED:boolean]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprOrExpr(children: FilterExprAndExpr(children: FilterDoubleColLessDoubleColumn(col 14:float, col 4:float)(children: CastLongToFloatViaLongToDouble(col 1:smallint) -> 14:float), FilterDoubleColGreaterDoubleScalar(col 15:double, val -5.0)(children: CastTimestampToDouble(col 9:timestamp) -> 15:double), FilterDoubleColNotEqualDoubleColumn(col 5:double, col 16:double)(children: CastLongToDouble(col 2:int) -> 16:double)), FilterExprAndExpr(children: FilterDecimalColLessEqualDecimalScalar(col 17:decimal(22,3), val -1.389)(children: CastLongToDecimal(col 3:bigint) -> 17:decimal(22,3)), FilterStringGroupColNotEqualStringScalar(col 7:string, val a), FilterDecimal64ColNotEqualDecimal64Scalar(col 18:decimal(13,3)/DECIMAL_64, val 79553)(children: CastLongToDecimal64(col 2:int) -> 18:decimal(13,3)/DECIMAL_64), FilterLongColNotEqualLongColumn(col 11:boolean, col 10:boolean)), FilterLongColEqualLongScalar(col 3:bigint, val 762), FilterStringGroupColEqualStringScalar(col 6:string, val a))
                    predicate: (((UDFToFloat(csmallint) < cfloat) and (UDFToDouble(ctimestamp2) > -5.0D) and (cdouble <> UDFToDouble(cint))) or ((CAST( cbigint AS decimal(22,3)) <= -1.389) and (cstring2 <> 'a') and (CAST( cint AS decimal(13,3)) <> 79.553) and (cboolean2 <> cboolean1)) or (cbigint = 762L) or (cstring1 = 'a')) (type: boolean)
                    Statistics: Num rows: 5465 Data size: 1101870 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: cint (type: int), cdouble (type: double), csmallint (type: smallint), cfloat (type: float), ctinyint (type: tinyint), UDFToDouble(cint) (type: double), (UDFToDouble(cint) * UDFToDouble(cint)) (type: double), UDFToDouble(csmallint) (type: double), (UDFToDouble(csmallint) * UDFToDouble(csmallint)) (type: double)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [2, 5, 1, 4, 0, 19, 22, 23, 26]
                          selectExpressions: CastLongToDouble(col 2:int) -> 19:double, DoubleColMultiplyDoubleColumn(col 20:double, col 21:double)(children: CastLongToDouble(col 2:int) -> 20:double, CastLongToDouble(col 2:int) -> 21:double) -> 22:double, CastLongToDouble(col 1:smallint) -> 23:double, DoubleColMultiplyDoubleColumn(col 24:double, col 25:double)(children: CastLongToDouble(col 1:smallint) -> 24:double, CastLongToDouble(col 1:smallint) -> 25:double) -> 26:double
                      Statistics: Num rows: 5465 Data size: 1101870 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: sum(_col0), count(_col0), sum(_col1), sum(_col6), sum(_col5), count(_col5), sum(_col8), sum(_col7), count(_col7), sum(_col3), count(_col3), min(_col4), count(_col2)
                        Group By Vectorization:
                            aggregators: VectorUDAFSumLong(col 2:int) -> bigint, VectorUDAFCount(col 2:int) -> bigint, VectorUDAFSumDouble(col 5:double) -> double, VectorUDAFSumDouble(col 22:double) -> double, VectorUDAFSumDouble(col 19:double) -> double, VectorUDAFCount(col 19:double) -> bigint, VectorUDAFSumDouble(col 26:double) -> double, VectorUDAFSumDouble(col 23:double) -> double, VectorUDAFCount(col 23:double) -> bigint, VectorUDAFSumDouble(col 4:float) -> double, VectorUDAFCount(col 4:float) -> bigint, VectorUDAFMinLong(col 0:tinyint) -> tinyint, VectorUDAFCount(col 1:smallint) -> bigint
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
                        minReductionHashAggr: 0.99
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                        Statistics: Num rows: 1 Data size: 100 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          null sort order: 
                          sort order: 
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkEmptyKeyOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                              valueColumns: 0:bigint, 1:bigint, 2:double, 3:double, 4:double, 5:bigint, 6:double, 7:double, 8:bigint, 9:double, 10:bigint, 11:tinyint, 12:bigint
                          Statistics: Num rows: 1 Data size: 100 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: bigint), _col1 (type: bigint), _col2 (type: double), _col3 (type: double), _col4 (type: double), _col5 (type: bigint), _col6 (type: double), _col7 (type: double), _col8 (type: bigint), _col9 (type: double), _col10 (type: bigint), _col11 (type: tinyint), _col12 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 12
                    includeColumns: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11]
                    dataColumns: ctinyint:tinyint, csmallint:smallint, cint:int, cbigint:bigint, cfloat:float, cdouble:double, cstring1:string, cstring2:string, ctimestamp1:timestamp, ctimestamp2:timestamp, cboolean1:boolean, cboolean2:boolean
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [double, double, double, decimal(22,3), decimal(13,3)/DECIMAL_64, double, double, double, double, double, double, double, double]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez] IS true
                reduceColumnNullOrder: 
                reduceColumnSortOrder: 
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 13
                    dataColumns: VALUE._col0:bigint, VALUE._col1:bigint, VALUE._col2:double, VALUE._col3:double, VALUE._col4:double, VALUE._col5:bigint, VALUE._col6:double, VALUE._col7:double, VALUE._col8:bigint, VALUE._col9:double, VALUE._col10:bigint, VALUE._col11:tinyint, VALUE._col12:bigint
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1), sum(VALUE._col2), sum(VALUE._col3), sum(VALUE._col4), count(VALUE._col5), sum(VALUE._col6), sum(VALUE._col7), count(VALUE._col8), sum(VALUE._col9), count(VALUE._col10), min(VALUE._col11), count(VALUE._col12)
                Group By Vectorization:
                    aggregators: VectorUDAFSumLong(col 0:bigint) -> bigint, VectorUDAFCountMerge(col 1:bigint) -> bigint, VectorUDAFSumDouble(col 2:double) -> double, VectorUDAFSumDouble(col 3:double) -> double, VectorUDAFSumDouble(col 4:double) -> double, VectorUDAFCountMerge(col 5:bigint) -> bigint, VectorUDAFSumDouble(col 6:double) -> double, VectorUDAFSumDouble(col 7:double) -> double, VectorUDAFCountMerge(col 8:bigint) -> bigint, VectorUDAFSumDouble(col 9:double) -> double, VectorUDAFCountMerge(col 10:bigint) -> bigint, VectorUDAFMinLong(col 11:tinyint) -> tinyint, VectorUDAFCountMerge(col 12:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                Statistics: Num rows: 1 Data size: 100 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: (UDFToDouble(_col0) / _col1) (type: double), _col2 (type: double), power(((_col3 - ((_col4 * _col4) / _col5)) / _col5), 0.5) (type: double), power(((_col6 - ((_col7 * _col7) / _col8)) / if((_col8 = 1L), null, (_col8 - 1))), 0.5) (type: double), ((_col3 - ((_col4 * _col4) / _col5)) / if((_col5 = 1L), null, (_col5 - 1))) (type: double), (_col9 / _col10) (type: double), power(((_col3 - ((_col4 * _col4) / _col5)) / if((_col5 = 1L), null, (_col5 - 1))), 0.5) (type: double), _col11 (type: tinyint), _col12 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [14, 2, 19, 27, 34, 35, 43, 11, 12]
                      selectExpressions: DoubleColDivideLongColumn(col 13:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 13:double) -> 14:double, FuncPowerDoubleToDouble(col 18:double)(children: DoubleColDivideLongColumn(col 17:double, col 5:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 16:double)(children: DoubleColDivideLongColumn(col 15:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 15:double) -> 16:double) -> 17:double) -> 18:double) -> 19:double, FuncPowerDoubleToDouble(col 26:double)(children: DoubleColDivideLongColumn(col 22:double, col 25:bigint)(children: DoubleColSubtractDoubleColumn(col 6:double, col 21:double)(children: DoubleColDivideLongColumn(col 20:double, col 8:bigint)(children: DoubleColMultiplyDoubleColumn(col 7:double, col 7:double) -> 20:double) -> 21:double) -> 22:double, IfExprNullCondExpr(col 23:boolean, null, col 24:bigint)(children: LongColEqualLongScalar(col 8:bigint, val 1) -> 23:boolean, LongColSubtractLongScalar(col 8:bigint, val 1) -> 24:bigint) -> 25:bigint) -> 26:double) -> 27:double, DoubleColDivideLongColumn(col 30:double, col 33:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 29:double)(children: DoubleColDivideLongColumn(col 28:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 28:double) -> 29:double) -> 30:double, IfExprNullCondExpr(col 31:boolean, null, col 32:bigint)(children: LongColEqualLongScalar(col 5:bigint, val 1) -> 31:boolean, LongColSubtractLongScalar(col 5:bigint, val 1) -> 32:bigint) -> 33:bigint) -> 34:double, DoubleColDivideLongColumn(col 9:double, col 10:bigint) -> 35:double, FuncPowerDoubleToDouble(col 42:double)(children: DoubleColDivideLongColumn(col 38:double, col 41:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 37:double)(children: DoubleColDivideLongColumn(col 36:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 36:double) -> 37:double) -> 38:double, IfExprNullCondExpr(col 39:boolean, null, col 40:bigint)(children: LongColEqualLongScalar(col 5:bigint, val 1) -> 39:boolean, LongColSubtractLongScalar(col 5:bigint, val 1) -> 40:bigint) -> 41:bigint) -> 42:double) -> 43:double
                  Statistics: Num rows: 1 Data size: 68 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: double), (_col0 + -3728.0D) (type: double), (- (_col0 + -3728.0D)) (type: double), (_col0 + -3728.0D) (type: double), ((_col0 + -3728.0D) * (_col0 + -3728.0D)) (type: double), _col1 (type: double), (- _col0) (type: double), _col2 (type: double), (((_col0 + -3728.0D) * (_col0 + -3728.0D)) * (_col0 + -3728.0D)) (type: double), _col3 (type: double), (- _col2) (type: double), (_col2 - (_col0 + -3728.0D)) (type: double), ((_col2 - (_col0 + -3728.0D)) * _col2) (type: double), _col4 (type: double), _col5 (type: double), (10.175D - _col4) (type: double), (- (10.175D - _col4)) (type: double), ((- _col2) / -563.0D) (type: double), _col6 (type: double), (- ((- _col2) / -563.0D)) (type: double), (_col0 / _col1) (type: double), _col7 (type: tinyint), _col8 (type: bigint), (UDFToDouble(_col7) / ((- _col2) / -563.0D)) (type: double), (- (_col0 / _col1)) (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [14, 44, 46, 47, 50, 2, 51, 19, 56, 27, 57, 59, 62, 34, 35, 63, 65, 67, 43, 70, 71, 11, 12, 75, 77]
                        selectExpressions: DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 44:double, DoubleColUnaryMinus(col 45:double)(children: DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 45:double) -> 46:double, DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 47:double, DoubleColMultiplyDoubleColumn(col 48:double, col 49:double)(children: DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 48:double, DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 49:double) -> 50:double, DoubleColUnaryMinus(col 14:double) -> 51:double, DoubleColMultiplyDoubleColumn(col 54:double, col 55:double)(children: DoubleColMultiplyDoubleColumn(col 52:double, col 53:double)(children: DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 52:double, DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 53:double) -> 54:double, DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 55:double) -> 56:double, DoubleColUnaryMinus(col 19:double) -> 57:double, DoubleColSubtractDoubleColumn(col 19:double, col 58:double)(children: DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 58:double) -> 59:double, DoubleColMultiplyDoubleColumn(col 61:double, col 19:double)(children: DoubleColSubtractDoubleColumn(col 19:double, col 60:double)(children: DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 60:double) -> 61:double) -> 62:double, DoubleScalarSubtractDoubleColumn(val 10.175, col 34:double) -> 63:double, DoubleColUnaryMinus(col 64:double)(children: DoubleScalarSubtractDoubleColumn(val 10.175, col 34:double) -> 64:double) -> 65:double, DoubleColDivideDoubleScalar(col 66:double, val -563.0)(children: DoubleColUnaryMinus(col 19:double) -> 66:double) -> 67:double, DoubleColUnaryMinus(col 69:double)(children: DoubleColDivideDoubleScalar(col 68:double, val -563.0)(children: DoubleColUnaryMinus(col 19:double) -> 68:double) -> 69:double) -> 70:double, DoubleColDivideDoubleColumn(col 14:double, col 2:double) -> 71:double, DoubleColDivideDoubleColumn(col 72:double, col 74:double)(children: CastLongToDouble(col 11:tinyint) -> 72:double, DoubleColDivideDoubleScalar(col 73:double, val -563.0)(children: DoubleColUnaryMinus(col 19:double) -> 73:double) -> 74:double) -> 75:double, DoubleColUnaryMinus(col 76:double)(children: DoubleColDivideDoubleColumn(col 14:double, col 2:double) -> 76:double) -> 77:double
                    Statistics: Num rows: 1 Data size: 196 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 1 Data size: 196 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT AVG(cint),
       (AVG(cint) + -3728),
       (-((AVG(cint) + -3728))),
       (-((-((AVG(cint) + -3728))))),
       ((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)),
       SUM(cdouble),
       (-(AVG(cint))),
       STDDEV_POP(cint),
       (((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)) * (-((-((AVG(cint) + -3728)))))),
       STDDEV_SAMP(csmallint),
       (-(STDDEV_POP(cint))),
       (STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))),
       ((STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))) * STDDEV_POP(cint)),
       VAR_SAMP(cint),
       AVG(cfloat),
       (10.175 - VAR_SAMP(cint)),
       (-((10.175 - VAR_SAMP(cint)))),
       ((-(STDDEV_POP(cint))) / -563),
       STDDEV_SAMP(cint),
       (-(((-(STDDEV_POP(cint))) / -563))),
       (AVG(cint) / SUM(cdouble)),
       MIN(ctinyint),
       COUNT(csmallint),
       (MIN(ctinyint) / ((-(STDDEV_POP(cint))) / -563)),
       (-((AVG(cint) / SUM(cdouble))))
FROM   alltypesorc
WHERE  ((762 = cbigint)
        OR ((csmallint < cfloat)
            AND ((ctimestamp2 > -5)
                 AND (cdouble != cint)))
        OR (cstring1 = 'a')
           OR ((cbigint <= -1.389)
               AND ((cstring2 != 'a')
                    AND ((79.553 != cint)
                         AND (cboolean2 != cboolean1)))))
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT AVG(cint),
       (AVG(cint) + -3728),
       (-((AVG(cint) + -3728))),
       (-((-((AVG(cint) + -3728))))),
       ((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)),
       SUM(cdouble),
       (-(AVG(cint))),
       STDDEV_POP(cint),
       (((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)) * (-((-((AVG(cint) + -3728)))))),
       STDDEV_SAMP(csmallint),
       (-(STDDEV_POP(cint))),
       (STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))),
       ((STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))) * STDDEV_POP(cint)),
       VAR_SAMP(cint),
       AVG(cfloat),
       (10.175 - VAR_SAMP(cint)),
       (-((10.175 - VAR_SAMP(cint)))),
       ((-(STDDEV_POP(cint))) / -563),
       STDDEV_SAMP(cint),
       (-(((-(STDDEV_POP(cint))) / -563))),
       (AVG(cint) / SUM(cdouble)),
       MIN(ctinyint),
       COUNT(csmallint),
       (MIN(ctinyint) / ((-(STDDEV_POP(cint))) / -563)),
       (-((AVG(cint) / SUM(cdouble))))
FROM   alltypesorc
WHERE  ((762 = cbigint)
        OR ((csmallint < cfloat)
            AND ((ctimestamp2 > -5)
                 AND (cdouble != cint)))
        OR (cstring1 = 'a')
           OR ((cbigint <= -1.389)
               AND ((cstring2 != 'a')
                    AND ((79.553 != cint)
                         AND (cboolean2 != cboolean1)))))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  filterExpr: (((UDFToFloat(csmallint) < cfloat) and (UDFToDouble(ctimestamp2) > -5.0D) and (cdouble <> UDFToDouble(cint))) or ((CAST( cbigint AS decimal(22,3)) <= -1.389) and (cstring2 <> 'a') and (CAST( cint AS decimal(13,3)) <> 79.553) and (cboolean2 <> cboolean1)) or (cbigint = 762L) or (cstring1 = 'a')) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 2477130 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:ctinyint:tinyint, 1:csmallint:smallint, 2:cint:int, 3:cbigint:bigint, 4:cfloat:float, 5:cdouble:double, 6:cstring1:string, 7:cstring2:string, 8:ctimestamp1:timestamp, 9:ctimestamp2:timestamp, 10:cboolean1:boolean, 11:cboolean2:boolean, 12:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>, 13:ROW__IS__DELETED:boolean]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprOrExpr(children: FilterExprAndExpr(children: FilterDoubleColLessDoubleColumn(col 14:float, col 4:float)(children: CastLongToFloatViaLongToDouble(col 1:smallint) -> 14:float), FilterDoubleColGreaterDoubleScalar(col 15:double, val -5.0)(children: CastTimestampToDouble(col 9:timestamp) -> 15:double), FilterDoubleColNotEqualDoubleColumn(col 5:double, col 16:double)(children: CastLongToDouble(col 2:int) -> 16:double)), FilterExprAndExpr(children: FilterDecimalColLessEqualDecimalScalar(col 17:decimal(22,3), val -1.389)(children: CastLongToDecimal(col 3:bigint) -> 17:decimal(22,3)), FilterStringGroupColNotEqualStringScalar(col 7:string, val a), FilterDecimal64ColNotEqualDecimal64Scalar(col 18:decimal(13,3)/DECIMAL_64, val 79553)(children: CastLongToDecimal64(col 2:int) -> 18:decimal(13,3)/DECIMAL_64), FilterLongColNotEqualLongColumn(col 11:boolean, col 10:boolean)), FilterLongColEqualLongScalar(col 3:bigint, val 762), FilterStringGroupColEqualStringScalar(col 6:string, val a))
                    predicate: (((UDFToFloat(csmallint) < cfloat) and (UDFToDouble(ctimestamp2) > -5.0D) and (cdouble <> UDFToDouble(cint))) or ((CAST( cbigint AS decimal(22,3)) <= -1.389) and (cstring2 <> 'a') and (CAST( cint AS decimal(13,3)) <> 79.553) and (cboolean2 <> cboolean1)) or (cbigint = 762L) or (cstring1 = 'a')) (type: boolean)
                    Statistics: Num rows: 5465 Data size: 1101870 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: cint (type: int), cdouble (type: double), csmallint (type: smallint), cfloat (type: float), ctinyint (type: tinyint), UDFToDouble(cint) (type: double), (UDFToDouble(cint) * UDFToDouble(cint)) (type: double), UDFToDouble(csmallint) (type: double), (UDFToDouble(csmallint) * UDFToDouble(csmallint)) (type: double)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [2, 5, 1, 4, 0, 19, 22, 23, 26]
                          selectExpressions: CastLongToDouble(col 2:int) -> 19:double, DoubleColMultiplyDoubleColumn(col 20:double, col 21:double)(children: CastLongToDouble(col 2:int) -> 20:double, CastLongToDouble(col 2:int) -> 21:double) -> 22:double, CastLongToDouble(col 1:smallint) -> 23:double, DoubleColMultiplyDoubleColumn(col 24:double, col 25:double)(children: CastLongToDouble(col 1:smallint) -> 24:double, CastLongToDouble(col 1:smallint) -> 25:double) -> 26:double
                      Statistics: Num rows: 5465 Data size: 1101870 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: sum(_col0), count(_col0), sum(_col1), sum(_col6), sum(_col5), count(_col5), sum(_col8), sum(_col7), count(_col7), sum(_col3), count(_col3), min(_col4), count(_col2)
                        Group By Vectorization:
                            aggregators: VectorUDAFSumLong(col 2:int) -> bigint, VectorUDAFCount(col 2:int) -> bigint, VectorUDAFSumDouble(col 5:double) -> double, VectorUDAFSumDouble(col 22:double) -> double, VectorUDAFSumDouble(col 19:double) -> double, VectorUDAFCount(col 19:double) -> bigint, VectorUDAFSumDouble(col 26:double) -> double, VectorUDAFSumDouble(col 23:double) -> double, VectorUDAFCount(col 23:double) -> bigint, VectorUDAFSumDouble(col 4:float) -> double, VectorUDAFCount(col 4:float) -> bigint, VectorUDAFMinLong(col 0:tinyint) -> tinyint, VectorUDAFCount(col 1:smallint) -> bigint
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
                        minReductionHashAggr: 0.99
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                        Statistics: Num rows: 1 Data size: 100 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          null sort order: 
                          sort order: 
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkEmptyKeyOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                              valueColumns: 0:bigint, 1:bigint, 2:double, 3:double, 4:double, 5:bigint, 6:double, 7:double, 8:bigint, 9:double, 10:bigint, 11:tinyint, 12:bigint
                          Statistics: Num rows: 1 Data size: 100 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: bigint), _col1 (type: bigint), _col2 (type: double), _col3 (type: double), _col4 (type: double), _col5 (type: bigint), _col6 (type: double), _col7 (type: double), _col8 (type: bigint), _col9 (type: double), _col10 (type: bigint), _col11 (type: tinyint), _col12 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 12
                    includeColumns: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11]
                    dataColumns: ctinyint:tinyint, csmallint:smallint, cint:int, cbigint:bigint, cfloat:float, cdouble:double, cstring1:string, cstring2:string, ctimestamp1:timestamp, ctimestamp2:timestamp, cboolean1:boolean, cboolean2:boolean
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [double, double, double, decimal(22,3), decimal(13,3)/DECIMAL_64, double, double, double, double, double, double, double, double]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez] IS true
                reduceColumnNullOrder: 
                reduceColumnSortOrder: 
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 13
                    dataColumns: VALUE._col0:bigint, VALUE._col1:bigint, VALUE._col2:double, VALUE._col3:double, VALUE._col4:double, VALUE._col5:bigint, VALUE._col6:double, VALUE._col7:double, VALUE._col8:bigint, VALUE._col9:double, VALUE._col10:bigint, VALUE._col11:tinyint, VALUE._col12:bigint
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1), sum(VALUE._col2), sum(VALUE._col3), sum(VALUE._col4), count(VALUE._col5), sum(VALUE._col6), sum(VALUE._col7), count(VALUE._col8), sum(VALUE._col9), count(VALUE._col10), min(VALUE._col11), count(VALUE._col12)
                Group By Vectorization:
                    aggregators: VectorUDAFSumLong(col 0:bigint) -> bigint, VectorUDAFCountMerge(col 1:bigint) -> bigint, VectorUDAFSumDouble(col 2:double) -> double, VectorUDAFSumDouble(col 3:double) -> double, VectorUDAFSumDouble(col 4:double) -> double, VectorUDAFCountMerge(col 5:bigint) -> bigint, VectorUDAFSumDouble(col 6:double) -> double, VectorUDAFSumDouble(col 7:double) -> double, VectorUDAFCountMerge(col 8:bigint) -> bigint, VectorUDAFSumDouble(col 9:double) -> double, VectorUDAFCountMerge(col 10:bigint) -> bigint, VectorUDAFMinLong(col 11:tinyint) -> tinyint, VectorUDAFCountMerge(col 12:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                Statistics: Num rows: 1 Data size: 100 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: (UDFToDouble(_col0) / _col1) (type: double), _col2 (type: double), power(((_col3 - ((_col4 * _col4) / _col5)) / _col5), 0.5) (type: double), power(((_col6 - ((_col7 * _col7) / _col8)) / if((_col8 = 1L), null, (_col8 - 1))), 0.5) (type: double), ((_col3 - ((_col4 * _col4) / _col5)) / if((_col5 = 1L), null, (_col5 - 1))) (type: double), (_col9 / _col10) (type: double), power(((_col3 - ((_col4 * _col4) / _col5)) / if((_col5 = 1L), null, (_col5 - 1))), 0.5) (type: double), _col11 (type: tinyint), _col12 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [14, 2, 19, 27, 34, 35, 43, 11, 12]
                      selectExpressions: DoubleColDivideLongColumn(col 13:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 13:double) -> 14:double, FuncPowerDoubleToDouble(col 18:double)(children: DoubleColDivideLongColumn(col 17:double, col 5:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 16:double)(children: DoubleColDivideLongColumn(col 15:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 15:double) -> 16:double) -> 17:double) -> 18:double) -> 19:double, FuncPowerDoubleToDouble(col 26:double)(children: DoubleColDivideLongColumn(col 22:double, col 25:bigint)(children: DoubleColSubtractDoubleColumn(col 6:double, col 21:double)(children: DoubleColDivideLongColumn(col 20:double, col 8:bigint)(children: DoubleColMultiplyDoubleColumn(col 7:double, col 7:double) -> 20:double) -> 21:double) -> 22:double, IfExprNullCondExpr(col 23:boolean, null, col 24:bigint)(children: LongColEqualLongScalar(col 8:bigint, val 1) -> 23:boolean, LongColSubtractLongScalar(col 8:bigint, val 1) -> 24:bigint) -> 25:bigint) -> 26:double) -> 27:double, DoubleColDivideLongColumn(col 30:double, col 33:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 29:double)(children: DoubleColDivideLongColumn(col 28:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 28:double) -> 29:double) -> 30:double, IfExprNullCondExpr(col 31:boolean, null, col 32:bigint)(children: LongColEqualLongScalar(col 5:bigint, val 1) -> 31:boolean, LongColSubtractLongScalar(col 5:bigint, val 1) -> 32:bigint) -> 33:bigint) -> 34:double, DoubleColDivideLongColumn(col 9:double, col 10:bigint) -> 35:double, FuncPowerDoubleToDouble(col 42:double)(children: DoubleColDivideLongColumn(col 38:double, col 41:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 37:double)(children: DoubleColDivideLongColumn(col 36:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 36:double) -> 37:double) -> 38:double, IfExprNullCondExpr(col 39:boolean, null, col 40:bigint)(children: LongColEqualLongScalar(col 5:bigint, val 1) -> 39:boolean, LongColSubtractLongScalar(col 5:bigint, val 1) -> 40:bigint) -> 41:bigint) -> 42:double) -> 43:double
                  Statistics: Num rows: 1 Data size: 68 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: double), (_col0 + -3728.0D) (type: double), (- (_col0 + -3728.0D)) (type: double), (_col0 + -3728.0D) (type: double), ((_col0 + -3728.0D) * (_col0 + -3728.0D)) (type: double), _col1 (type: double), (- _col0) (type: double), _col2 (type: double), (((_col0 + -3728.0D) * (_col0 + -3728.0D)) * (_col0 + -3728.0D)) (type: double), _col3 (type: double), (- _col2) (type: double), (_col2 - (_col0 + -3728.0D)) (type: double), ((_col2 - (_col0 + -3728.0D)) * _col2) (type: double), _col4 (type: double), _col5 (type: double), (10.175D - _col4) (type: double), (- (10.175D - _col4)) (type: double), ((- _col2) / -563.0D) (type: double), _col6 (type: double), (- ((- _col2) / -563.0D)) (type: double), (_col0 / _col1) (type: double), _col7 (type: tinyint), _col8 (type: bigint), (UDFToDouble(_col7) / ((- _col2) / -563.0D)) (type: double), (- (_col0 / _col1)) (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [14, 44, 46, 47, 50, 2, 51, 19, 56, 27, 57, 59, 62, 34, 35, 63, 65, 67, 43, 70, 71, 11, 12, 75, 77]
                        selectExpressions: DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 44:double, DoubleColUnaryMinus(col 45:double)(children: DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 45:double) -> 46:double, DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 47:double, DoubleColMultiplyDoubleColumn(col 48:double, col 49:double)(children: DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 48:double, DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 49:double) -> 50:double, DoubleColUnaryMinus(col 14:double) -> 51:double, DoubleColMultiplyDoubleColumn(col 54:double, col 55:double)(children: DoubleColMultiplyDoubleColumn(col 52:double, col 53:double)(children: DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 52:double, DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 53:double) -> 54:double, DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 55:double) -> 56:double, DoubleColUnaryMinus(col 19:double) -> 57:double, DoubleColSubtractDoubleColumn(col 19:double, col 58:double)(children: DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 58:double) -> 59:double, DoubleColMultiplyDoubleColumn(col 61:double, col 19:double)(children: DoubleColSubtractDoubleColumn(col 19:double, col 60:double)(children: DoubleColAddDoubleScalar(col 14:double, val -3728.0) -> 60:double) -> 61:double) -> 62:double, DoubleScalarSubtractDoubleColumn(val 10.175, col 34:double) -> 63:double, DoubleColUnaryMinus(col 64:double)(children: DoubleScalarSubtractDoubleColumn(val 10.175, col 34:double) -> 64:double) -> 65:double, DoubleColDivideDoubleScalar(col 66:double, val -563.0)(children: DoubleColUnaryMinus(col 19:double) -> 66:double) -> 67:double, DoubleColUnaryMinus(col 69:double)(children: DoubleColDivideDoubleScalar(col 68:double, val -563.0)(children: DoubleColUnaryMinus(col 19:double) -> 68:double) -> 69:double) -> 70:double, DoubleColDivideDoubleColumn(col 14:double, col 2:double) -> 71:double, DoubleColDivideDoubleColumn(col 72:double, col 74:double)(children: CastLongToDouble(col 11:tinyint) -> 72:double, DoubleColDivideDoubleScalar(col 73:double, val -563.0)(children: DoubleColUnaryMinus(col 19:double) -> 73:double) -> 74:double) -> 75:double, DoubleColUnaryMinus(col 76:double)(children: DoubleColDivideDoubleColumn(col 14:double, col 2:double) -> 76:double) -> 77:double
                    Statistics: Num rows: 1 Data size: 196 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 1 Data size: 196 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

