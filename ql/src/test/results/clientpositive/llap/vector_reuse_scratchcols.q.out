PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT AVG(cint),
       (AVG(cint) + -3728),
       (-((AVG(cint) + -3728))),
       (-((-((AVG(cint) + -3728))))),
       ((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)),
       SUM(cdouble),
       (-(AVG(cint))),
       STDDEV_POP(cint),
       (((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)) * (-((-((AVG(cint) + -3728)))))),
       STDDEV_SAMP(csmallint),
       (-(STDDEV_POP(cint))),
       (STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))),
       ((STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))) * STDDEV_POP(cint)),
       VAR_SAMP(cint),
       AVG(cfloat),
       (10.175 - VAR_SAMP(cint)),
       (-((10.175 - VAR_SAMP(cint)))),
       ((-(STDDEV_POP(cint))) / -563),
       STDDEV_SAMP(cint),
       (-(((-(STDDEV_POP(cint))) / -563))),
       (AVG(cint) / SUM(cdouble)),
       MIN(ctinyint),
       COUNT(csmallint),
       (MIN(ctinyint) / ((-(STDDEV_POP(cint))) / -563)),
       (-((AVG(cint) / SUM(cdouble))))
FROM   alltypesorc
WHERE  ((762 = cbigint)
        OR ((csmallint < cfloat)
            AND ((ctimestamp2 > -5)
                 AND (cdouble != cint)))
        OR (cstring1 = 'a')
           OR ((cbigint <= -1.389)
               AND ((cstring2 != 'a')
                    AND ((79.553 != cint)
                         AND (cboolean2 != cboolean1)))))
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT AVG(cint),
       (AVG(cint) + -3728),
       (-((AVG(cint) + -3728))),
       (-((-((AVG(cint) + -3728))))),
       ((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)),
       SUM(cdouble),
       (-(AVG(cint))),
       STDDEV_POP(cint),
       (((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)) * (-((-((AVG(cint) + -3728)))))),
       STDDEV_SAMP(csmallint),
       (-(STDDEV_POP(cint))),
       (STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))),
       ((STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))) * STDDEV_POP(cint)),
       VAR_SAMP(cint),
       AVG(cfloat),
       (10.175 - VAR_SAMP(cint)),
       (-((10.175 - VAR_SAMP(cint)))),
       ((-(STDDEV_POP(cint))) / -563),
       STDDEV_SAMP(cint),
       (-(((-(STDDEV_POP(cint))) / -563))),
       (AVG(cint) / SUM(cdouble)),
       MIN(ctinyint),
       COUNT(csmallint),
       (MIN(ctinyint) / ((-(STDDEV_POP(cint))) / -563)),
       (-((AVG(cint) / SUM(cdouble))))
FROM   alltypesorc
WHERE  ((762 = cbigint)
        OR ((csmallint < cfloat)
            AND ((ctimestamp2 > -5)
                 AND (cdouble != cint)))
        OR (cstring1 = 'a')
           OR ((cbigint <= -1.389)
               AND ((cstring2 != 'a')
                    AND ((79.553 != cint)
                         AND (cboolean2 != cboolean1)))))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  filterExpr: ((cbigint = 762L) or ((UDFToFloat(csmallint) < cfloat) and (UDFToDouble(ctimestamp2) > -5.0D) and (cdouble <> UDFToDouble(cint))) or (cstring1 = 'a') or ((CAST( cbigint AS decimal(22,3)) <= -1.389) and (cstring2 <> 'a') and (CAST( cint AS decimal(13,3)) <> 79.553) and (cboolean2 <> cboolean1))) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 2601650 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:ctinyint:tinyint, 1:csmallint:smallint, 2:cint:int, 3:cbigint:bigint, 4:cfloat:float, 5:cdouble:double, 6:cstring1:string, 7:cstring2:string, 8:ctimestamp1:timestamp, 9:ctimestamp2:timestamp, 10:cboolean1:boolean, 11:cboolean2:boolean, 12:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprOrExpr(children: FilterLongColEqualLongScalar(col 3:bigint, val 762), FilterExprAndExpr(children: FilterDoubleColLessDoubleColumn(col 13:float, col 4:float)(children: CastLongToFloatViaLongToDouble(col 1:smallint) -> 13:float), FilterDoubleColGreaterDoubleScalar(col 14:double, val -5.0)(children: CastTimestampToDouble(col 9:timestamp) -> 14:double), FilterDoubleColNotEqualDoubleColumn(col 5:double, col 15:double)(children: CastLongToDouble(col 2:int) -> 15:double)), FilterStringGroupColEqualStringScalar(col 6:string, val a), FilterExprAndExpr(children: FilterDecimalColLessEqualDecimalScalar(col 16:decimal(22,3), val -1.389)(children: CastLongToDecimal(col 3:bigint) -> 16:decimal(22,3)), FilterStringGroupColNotEqualStringScalar(col 7:string, val a), FilterDecimalColNotEqualDecimalScalar(col 17:decimal(13,3), val 79.553)(children: CastLongToDecimal(col 2:int) -> 17:decimal(13,3)), FilterLongColNotEqualLongColumn(col 11:boolean, col 10:boolean)))
                    predicate: (((CAST( cbigint AS decimal(22,3)) <= -1.389) and (cstring2 <> 'a') and (CAST( cint AS decimal(13,3)) <> 79.553) and (cboolean2 <> cboolean1)) or ((UDFToFloat(csmallint) < cfloat) and (UDFToDouble(ctimestamp2) > -5.0D) and (cdouble <> UDFToDouble(cint))) or (cbigint = 762L) or (cstring1 = 'a')) (type: boolean)
                    Statistics: Num rows: 5465 Data size: 1157230 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: cint (type: int), cdouble (type: double), csmallint (type: smallint), cfloat (type: float), ctinyint (type: tinyint), UDFToDouble(cint) (type: double), (UDFToDouble(cint) * UDFToDouble(cint)) (type: double), UDFToDouble(csmallint) (type: double), (UDFToDouble(csmallint) * UDFToDouble(csmallint)) (type: double)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [2, 5, 1, 4, 0, 18, 21, 22, 25]
                          selectExpressions: CastLongToDouble(col 2:int) -> 18:double, DoubleColMultiplyDoubleColumn(col 19:double, col 20:double)(children: CastLongToDouble(col 2:int) -> 19:double, CastLongToDouble(col 2:int) -> 20:double) -> 21:double, CastLongToDouble(col 1:smallint) -> 22:double, DoubleColMultiplyDoubleColumn(col 23:double, col 24:double)(children: CastLongToDouble(col 1:smallint) -> 23:double, CastLongToDouble(col 1:smallint) -> 24:double) -> 25:double
                      Statistics: Num rows: 5465 Data size: 1157230 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: sum(_col0), count(_col0), sum(_col1), sum(_col6), sum(_col5), sum(_col8), sum(_col7), count(_col2), sum(_col3), count(_col3), min(_col4)
                        Group By Vectorization:
                            aggregators: VectorUDAFSumLong(col 2:int) -> bigint, VectorUDAFCount(col 2:int) -> bigint, VectorUDAFSumDouble(col 5:double) -> double, VectorUDAFSumDouble(col 21:double) -> double, VectorUDAFSumDouble(col 18:double) -> double, VectorUDAFSumDouble(col 25:double) -> double, VectorUDAFSumDouble(col 22:double) -> double, VectorUDAFCount(col 1:smallint) -> bigint, VectorUDAFSumDouble(col 4:float) -> double, VectorUDAFCount(col 4:float) -> bigint, VectorUDAFMinLong(col 0:tinyint) -> tinyint
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                        minReductionHashAggr: 0.0
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10
                        Statistics: Num rows: 1 Data size: 84 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          sort order: 
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkEmptyKeyOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                              valueColumns: 0:bigint, 1:bigint, 2:double, 3:double, 4:double, 5:double, 6:double, 7:bigint, 8:double, 9:bigint, 10:tinyint
                          Statistics: Num rows: 1 Data size: 84 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: bigint), _col1 (type: bigint), _col2 (type: double), _col3 (type: double), _col4 (type: double), _col5 (type: double), _col6 (type: double), _col7 (type: bigint), _col8 (type: double), _col9 (type: bigint), _col10 (type: tinyint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 12
                    includeColumns: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11]
                    dataColumns: ctinyint:tinyint, csmallint:smallint, cint:int, cbigint:bigint, cfloat:float, cdouble:double, cstring1:string, cstring2:string, ctimestamp1:timestamp, ctimestamp2:timestamp, cboolean1:boolean, cboolean2:boolean
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [double, double, double, decimal(22,3), decimal(13,3), double, double, double, double, double, double, double, double]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: 
                reduceColumnSortOrder: 
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 11
                    dataColumns: VALUE._col0:bigint, VALUE._col1:bigint, VALUE._col2:double, VALUE._col3:double, VALUE._col4:double, VALUE._col5:double, VALUE._col6:double, VALUE._col7:bigint, VALUE._col8:double, VALUE._col9:bigint, VALUE._col10:tinyint
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1), sum(VALUE._col2), sum(VALUE._col3), sum(VALUE._col4), sum(VALUE._col5), sum(VALUE._col6), count(VALUE._col7), sum(VALUE._col8), count(VALUE._col9), min(VALUE._col10)
                Group By Vectorization:
                    aggregators: VectorUDAFSumLong(col 0:bigint) -> bigint, VectorUDAFCountMerge(col 1:bigint) -> bigint, VectorUDAFSumDouble(col 2:double) -> double, VectorUDAFSumDouble(col 3:double) -> double, VectorUDAFSumDouble(col 4:double) -> double, VectorUDAFSumDouble(col 5:double) -> double, VectorUDAFSumDouble(col 6:double) -> double, VectorUDAFCountMerge(col 7:bigint) -> bigint, VectorUDAFSumDouble(col 8:double) -> double, VectorUDAFCountMerge(col 9:bigint) -> bigint, VectorUDAFMinLong(col 10:tinyint) -> tinyint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10
                Statistics: Num rows: 1 Data size: 84 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: (UDFToDouble(_col0) / _col1) (type: double), ((UDFToDouble(_col0) / _col1) + -3728.0D) (type: double), (- ((UDFToDouble(_col0) / _col1) + -3728.0D)) (type: double), (- (- ((UDFToDouble(_col0) / _col1) + -3728.0D))) (type: double), ((- (- ((UDFToDouble(_col0) / _col1) + -3728.0D))) * ((UDFToDouble(_col0) / _col1) + -3728.0D)) (type: double), _col2 (type: double), (- (UDFToDouble(_col0) / _col1)) (type: double), power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5) (type: double), (((- (- ((UDFToDouble(_col0) / _col1) + -3728.0D))) * ((UDFToDouble(_col0) / _col1) + -3728.0D)) * (- (- ((UDFToDouble(_col0) / _col1) + -3728.0D)))) (type: double), power(((_col5 - ((_col6 * _col6) / _col7)) / CASE WHEN ((_col7 = 1L)) THEN (null) ELSE ((_col7 - 1)) END), 0.5) (type: double), (- power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5)) (type: double), (power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5) - (- (- ((UDFToDouble(_col0) / _col1) + -3728.0D)))) (type: double), ((power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5) - (- (- ((UDFToDouble(_col0) / _col1) + -3728.0D)))) * power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5)) (type: double), ((_col3 - ((_col4 * _col4) / _col1)) / CASE WHEN ((_col1 = 1L)) THEN (null) ELSE ((_col1 - 1)) END) (type: double), (_col8 / _col9) (type: double), (10.175D - ((_col3 - ((_col4 * _col4) / _col1)) / CASE WHEN ((_col1 = 1L)) THEN (null) ELSE ((_col1 - 1)) END)) (type: double), (- (10.175D - ((_col3 - ((_col4 * _col4) / _col1)) / CASE WHEN ((_col1 = 1L)) THEN (null) ELSE ((_col1 - 1)) END))) (type: double), ((- power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5)) / -563.0D) (type: double), power(((_col3 - ((_col4 * _col4) / _col1)) / CASE WHEN ((_col1 = 1L)) THEN (null) ELSE ((_col1 - 1)) END), 0.5) (type: double), (- ((- power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5)) / -563.0D)) (type: double), ((UDFToDouble(_col0) / _col1) / _col2) (type: double), _col10 (type: tinyint), _col7 (type: bigint), (UDFToDouble(_col10) / ((- power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5)) / -563.0D)) (type: double), (- ((UDFToDouble(_col0) / _col1) / _col2)) (type: double)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [12, 15, 19, 24, 33, 2, 36, 41, 56, 64, 70, 81, 98, 105, 106, 114, 123, 130, 138, 146, 149, 10, 7, 158, 162]
                      selectExpressions: DoubleColDivideLongColumn(col 11:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 11:double) -> 12:double, DoubleColAddDoubleScalar(col 14:double, val -3728.0)(children: DoubleColDivideLongColumn(col 13:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 13:double) -> 14:double) -> 15:double, DoubleColUnaryMinus(col 18:double)(children: DoubleColAddDoubleScalar(col 17:double, val -3728.0)(children: DoubleColDivideLongColumn(col 16:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 16:double) -> 17:double) -> 18:double) -> 19:double, DoubleColUnaryMinus(col 23:double)(children: DoubleColUnaryMinus(col 22:double)(children: DoubleColAddDoubleScalar(col 21:double, val -3728.0)(children: DoubleColDivideLongColumn(col 20:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 20:double) -> 21:double) -> 22:double) -> 23:double) -> 24:double, DoubleColMultiplyDoubleColumn(col 29:double, col 32:double)(children: DoubleColUnaryMinus(col 28:double)(children: DoubleColUnaryMinus(col 27:double)(children: DoubleColAddDoubleScalar(col 26:double, val -3728.0)(children: DoubleColDivideLongColumn(col 25:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 25:double) -> 26:double) -> 27:double) -> 28:double) -> 29:double, DoubleColAddDoubleScalar(col 31:double, val -3728.0)(children: DoubleColDivideLongColumn(col 30:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 30:double) -> 31:double) -> 32:double) -> 33:double, DoubleColUnaryMinus(col 35:double)(children: DoubleColDivideLongColumn(col 34:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 34:double) -> 35:double) -> 36:double, FuncPowerDoubleToDouble(col 40:double)(children: DoubleColDivideLongColumn(col 39:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 38:double)(children: DoubleColDivideLongColumn(col 37:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 37:double) -> 38:double) -> 39:double) -> 40:double) -> 41:double, DoubleColMultiplyDoubleColumn(col 50:double, col 55:double)(children: DoubleColMultiplyDoubleColumn(col 46:double, col 49:double)(children: DoubleColUnaryMinus(col 45:double)(children: DoubleColUnaryMinus(col 44:double)(children: DoubleColAddDoubleScalar(col 43:double, val -3728.0)(children: DoubleColDivideLongColumn(col 42:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 42:double) -> 43:double) -> 44:double) -> 45:double) -> 46:double, DoubleColAddDoubleScalar(col 48:double, val -3728.0)(children: DoubleColDivideLongColumn(col 47:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 47:double) -> 48:double) -> 49:double) -> 50:double, DoubleColUnaryMinus(col 54:double)(children: DoubleColUnaryMinus(col 53:double)(children: DoubleColAddDoubleScalar(col 52:double, val -3728.0)(children: DoubleColDivideLongColumn(col 51:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 51:double) -> 52:double) -> 53:double) -> 54:double) -> 55:double) -> 56:double, FuncPowerDoubleToDouble(col 63:double)(children: DoubleColDivideLongColumn(col 59:double, col 62:bigint)(children: DoubleColSubtractDoubleColumn(col 5:double, col 58:double)(children: DoubleColDivideLongColumn(col 57:double, col 7:bigint)(children: DoubleColMultiplyDoubleColumn(col 6:double, col 6:double) -> 57:double) -> 58:double) -> 59:double, IfExprNullCondExpr(col 60:boolean, null, col 61:bigint)(children: LongColEqualLongScalar(col 7:bigint, val 1) -> 60:boolean, LongColSubtractLongScalar(col 7:bigint, val 1) -> 61:bigint) -> 62:bigint) -> 63:double) -> 64:double, DoubleColUnaryMinus(col 69:double)(children: FuncPowerDoubleToDouble(col 68:double)(children: DoubleColDivideLongColumn(col 67:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 66:double)(children: DoubleColDivideLongColumn(col 65:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 65:double) -> 66:double) -> 67:double) -> 68:double) -> 69:double) -> 70:double, DoubleColSubtractDoubleColumn(col 75:double, col 80:double)(children: FuncPowerDoubleToDouble(col 74:double)(children: DoubleColDivideLongColumn(col 73:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 72:double)(children: DoubleColDivideLongColumn(col 71:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 71:double) -> 72:double) -> 73:double) -> 74:double) -> 75:double, DoubleColUnaryMinus(col 79:double)(children: DoubleColUnaryMinus(col 78:double)(children: DoubleColAddDoubleScalar(col 77:double, val -3728.0)(children: DoubleColDivideLongColumn(col 76:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 76:double) -> 77:double) -> 78:double) -> 79:double) -> 80:double) -> 81:double, DoubleColMultiplyDoubleColumn(col 92:double, col 97:double)(children: DoubleColSubtractDoubleColumn(col 86:double, col 91:double)(children: FuncPowerDoubleToDouble(col 85:double)(children: DoubleColDivideLongColumn(col 84:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 83:double)(children: DoubleColDivideLongColumn(col 82:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 82:double) -> 83:double) -> 84:double) -> 85:double) -> 86:double, DoubleColUnaryMinus(col 90:double)(children: DoubleColUnaryMinus(col 89:double)(children: DoubleColAddDoubleScalar(col 88:double, val -3728.0)(children: DoubleColDivideLongColumn(col 87:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 87:double) -> 88:double) -> 89:double) -> 90:double) -> 91:double) -> 92:double, FuncPowerDoubleToDouble(col 96:double)(children: DoubleColDivideLongColumn(col 95:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 94:double)(children: DoubleColDivideLongColumn(col 93:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 93:double) -> 94:double) -> 95:double) -> 96:double) -> 97:double) -> 98:double, DoubleColDivideLongColumn(col 101:double, col 104:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 100:double)(children: DoubleColDivideLongColumn(col 99:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 99:double) -> 100:double) -> 101:double, IfExprNullCondExpr(col 102:boolean, null, col 103:bigint)(children: LongColEqualLongScalar(col 1:bigint, val 1) -> 102:boolean, LongColSubtractLongScalar(col 1:bigint, val 1) -> 103:bigint) -> 104:bigint) -> 105:double, DoubleColDivideLongColumn(col 8:double, col 9:bigint) -> 106:double, DoubleScalarSubtractDoubleColumn(val 10.175, col 113:double)(children: DoubleColDivideLongColumn(col 109:double, col 112:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 108:double)(children: DoubleColDivideLongColumn(col 107:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 107:double) -> 108:double) -> 109:double, IfExprNullCondExpr(col 110:boolean, null, col 111:bigint)(children: LongColEqualLongScalar(col 1:bigint, val 1) -> 110:boolean, LongColSubtractLongScalar(col 1:bigint, val 1) -> 111:bigint) -> 112:bigint) -> 113:double) -> 114:double, DoubleColUnaryMinus(col 122:double)(children: DoubleScalarSubtractDoubleColumn(val 10.175, col 121:double)(children: DoubleColDivideLongColumn(col 117:double, col 120:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 116:double)(children: DoubleColDivideLongColumn(col 115:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 115:double) -> 116:double) -> 117:double, IfExprNullCondExpr(col 118:boolean, null, col 119:bigint)(children: LongColEqualLongScalar(col 1:bigint, val 1) -> 118:boolean, LongColSubtractLongScalar(col 1:bigint, val 1) -> 119:bigint) -> 120:bigint) -> 121:double) -> 122:double) -> 123:double, DoubleColDivideDoubleScalar(col 129:double, val -563.0)(children: DoubleColUnaryMinus(col 128:double)(children: FuncPowerDoubleToDouble(col 127:double)(children: DoubleColDivideLongColumn(col 126:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 125:double)(children: DoubleColDivideLongColumn(col 124:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 124:double) -> 125:double) -> 126:double) -> 127:double) -> 128:double) -> 129:double) -> 130:double, FuncPowerDoubleToDouble(col 137:double)(children: DoubleColDivideLongColumn(col 133:double, col 136:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 132:double)(children: DoubleColDivideLongColumn(col 131:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 131:double) -> 132:double) -> 133:double, IfExprNullCondExpr(col 134:boolean, null, col 135:bigint)(children: LongColEqualLongScalar(col 1:bigint, val 1) -> 134:boolean, LongColSubtractLongScalar(col 1:bigint, val 1) -> 135:bigint) -> 136:bigint) -> 137:double) -> 138:double, DoubleColUnaryMinus(col 145:double)(children: DoubleColDivideDoubleScalar(col 144:double, val -563.0)(children: DoubleColUnaryMinus(col 143:double)(children: FuncPowerDoubleToDouble(col 142:double)(children: DoubleColDivideLongColumn(col 141:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 140:double)(children: DoubleColDivideLongColumn(col 139:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 139:double) -> 140:double) -> 141:double) -> 142:double) -> 143:double) -> 144:double) -> 145:double) -> 146:double, DoubleColDivideDoubleColumn(col 148:double, col 2:double)(children: DoubleColDivideLongColumn(col 147:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 147:double) -> 148:double) -> 149:double, DoubleColDivideDoubleColumn(col 150:double, col 157:double)(children: CastLongToDouble(col 10:tinyint) -> 150:double, DoubleColDivideDoubleScalar(col 156:double, val -563.0)(children: DoubleColUnaryMinus(col 155:double)(children: FuncPowerDoubleToDouble(col 154:double)(children: DoubleColDivideLongColumn(col 153:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 152:double)(children: DoubleColDivideLongColumn(col 151:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 151:double) -> 152:double) -> 153:double) -> 154:double) -> 155:double) -> 156:double) -> 157:double) -> 158:double, DoubleColUnaryMinus(col 161:double)(children: DoubleColDivideDoubleColumn(col 160:double, col 2:double)(children: DoubleColDivideLongColumn(col 159:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 159:double) -> 160:double) -> 161:double) -> 162:double
                  Statistics: Num rows: 1 Data size: 196 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 1 Data size: 196 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT AVG(cint),
       (AVG(cint) + -3728),
       (-((AVG(cint) + -3728))),
       (-((-((AVG(cint) + -3728))))),
       ((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)),
       SUM(cdouble),
       (-(AVG(cint))),
       STDDEV_POP(cint),
       (((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)) * (-((-((AVG(cint) + -3728)))))),
       STDDEV_SAMP(csmallint),
       (-(STDDEV_POP(cint))),
       (STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))),
       ((STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))) * STDDEV_POP(cint)),
       VAR_SAMP(cint),
       AVG(cfloat),
       (10.175 - VAR_SAMP(cint)),
       (-((10.175 - VAR_SAMP(cint)))),
       ((-(STDDEV_POP(cint))) / -563),
       STDDEV_SAMP(cint),
       (-(((-(STDDEV_POP(cint))) / -563))),
       (AVG(cint) / SUM(cdouble)),
       MIN(ctinyint),
       COUNT(csmallint),
       (MIN(ctinyint) / ((-(STDDEV_POP(cint))) / -563)),
       (-((AVG(cint) / SUM(cdouble))))
FROM   alltypesorc
WHERE  ((762 = cbigint)
        OR ((csmallint < cfloat)
            AND ((ctimestamp2 > -5)
                 AND (cdouble != cint)))
        OR (cstring1 = 'a')
           OR ((cbigint <= -1.389)
               AND ((cstring2 != 'a')
                    AND ((79.553 != cint)
                         AND (cboolean2 != cboolean1)))))
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT AVG(cint),
       (AVG(cint) + -3728),
       (-((AVG(cint) + -3728))),
       (-((-((AVG(cint) + -3728))))),
       ((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)),
       SUM(cdouble),
       (-(AVG(cint))),
       STDDEV_POP(cint),
       (((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)) * (-((-((AVG(cint) + -3728)))))),
       STDDEV_SAMP(csmallint),
       (-(STDDEV_POP(cint))),
       (STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))),
       ((STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))) * STDDEV_POP(cint)),
       VAR_SAMP(cint),
       AVG(cfloat),
       (10.175 - VAR_SAMP(cint)),
       (-((10.175 - VAR_SAMP(cint)))),
       ((-(STDDEV_POP(cint))) / -563),
       STDDEV_SAMP(cint),
       (-(((-(STDDEV_POP(cint))) / -563))),
       (AVG(cint) / SUM(cdouble)),
       MIN(ctinyint),
       COUNT(csmallint),
       (MIN(ctinyint) / ((-(STDDEV_POP(cint))) / -563)),
       (-((AVG(cint) / SUM(cdouble))))
FROM   alltypesorc
WHERE  ((762 = cbigint)
        OR ((csmallint < cfloat)
            AND ((ctimestamp2 > -5)
                 AND (cdouble != cint)))
        OR (cstring1 = 'a')
           OR ((cbigint <= -1.389)
               AND ((cstring2 != 'a')
                    AND ((79.553 != cint)
                         AND (cboolean2 != cboolean1)))))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  filterExpr: ((cbigint = 762L) or ((UDFToFloat(csmallint) < cfloat) and (UDFToDouble(ctimestamp2) > -5.0D) and (cdouble <> UDFToDouble(cint))) or (cstring1 = 'a') or ((CAST( cbigint AS decimal(22,3)) <= -1.389) and (cstring2 <> 'a') and (CAST( cint AS decimal(13,3)) <> 79.553) and (cboolean2 <> cboolean1))) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 2601650 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:ctinyint:tinyint, 1:csmallint:smallint, 2:cint:int, 3:cbigint:bigint, 4:cfloat:float, 5:cdouble:double, 6:cstring1:string, 7:cstring2:string, 8:ctimestamp1:timestamp, 9:ctimestamp2:timestamp, 10:cboolean1:boolean, 11:cboolean2:boolean, 12:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprOrExpr(children: FilterLongColEqualLongScalar(col 3:bigint, val 762), FilterExprAndExpr(children: FilterDoubleColLessDoubleColumn(col 13:float, col 4:float)(children: CastLongToFloatViaLongToDouble(col 1:smallint) -> 13:float), FilterDoubleColGreaterDoubleScalar(col 14:double, val -5.0)(children: CastTimestampToDouble(col 9:timestamp) -> 14:double), FilterDoubleColNotEqualDoubleColumn(col 5:double, col 15:double)(children: CastLongToDouble(col 2:int) -> 15:double)), FilterStringGroupColEqualStringScalar(col 6:string, val a), FilterExprAndExpr(children: FilterDecimalColLessEqualDecimalScalar(col 16:decimal(22,3), val -1.389)(children: CastLongToDecimal(col 3:bigint) -> 16:decimal(22,3)), FilterStringGroupColNotEqualStringScalar(col 7:string, val a), FilterDecimalColNotEqualDecimalScalar(col 17:decimal(13,3), val 79.553)(children: CastLongToDecimal(col 2:int) -> 17:decimal(13,3)), FilterLongColNotEqualLongColumn(col 11:boolean, col 10:boolean)))
                    predicate: (((CAST( cbigint AS decimal(22,3)) <= -1.389) and (cstring2 <> 'a') and (CAST( cint AS decimal(13,3)) <> 79.553) and (cboolean2 <> cboolean1)) or ((UDFToFloat(csmallint) < cfloat) and (UDFToDouble(ctimestamp2) > -5.0D) and (cdouble <> UDFToDouble(cint))) or (cbigint = 762L) or (cstring1 = 'a')) (type: boolean)
                    Statistics: Num rows: 5465 Data size: 1157230 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: cint (type: int), cdouble (type: double), csmallint (type: smallint), cfloat (type: float), ctinyint (type: tinyint), UDFToDouble(cint) (type: double), (UDFToDouble(cint) * UDFToDouble(cint)) (type: double), UDFToDouble(csmallint) (type: double), (UDFToDouble(csmallint) * UDFToDouble(csmallint)) (type: double)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [2, 5, 1, 4, 0, 18, 21, 22, 25]
                          selectExpressions: CastLongToDouble(col 2:int) -> 18:double, DoubleColMultiplyDoubleColumn(col 19:double, col 20:double)(children: CastLongToDouble(col 2:int) -> 19:double, CastLongToDouble(col 2:int) -> 20:double) -> 21:double, CastLongToDouble(col 1:smallint) -> 22:double, DoubleColMultiplyDoubleColumn(col 23:double, col 24:double)(children: CastLongToDouble(col 1:smallint) -> 23:double, CastLongToDouble(col 1:smallint) -> 24:double) -> 25:double
                      Statistics: Num rows: 5465 Data size: 1157230 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: sum(_col0), count(_col0), sum(_col1), sum(_col6), sum(_col5), sum(_col8), sum(_col7), count(_col2), sum(_col3), count(_col3), min(_col4)
                        Group By Vectorization:
                            aggregators: VectorUDAFSumLong(col 2:int) -> bigint, VectorUDAFCount(col 2:int) -> bigint, VectorUDAFSumDouble(col 5:double) -> double, VectorUDAFSumDouble(col 21:double) -> double, VectorUDAFSumDouble(col 18:double) -> double, VectorUDAFSumDouble(col 25:double) -> double, VectorUDAFSumDouble(col 22:double) -> double, VectorUDAFCount(col 1:smallint) -> bigint, VectorUDAFSumDouble(col 4:float) -> double, VectorUDAFCount(col 4:float) -> bigint, VectorUDAFMinLong(col 0:tinyint) -> tinyint
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                        minReductionHashAggr: 0.0
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10
                        Statistics: Num rows: 1 Data size: 84 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          sort order: 
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkEmptyKeyOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                              valueColumns: 0:bigint, 1:bigint, 2:double, 3:double, 4:double, 5:double, 6:double, 7:bigint, 8:double, 9:bigint, 10:tinyint
                          Statistics: Num rows: 1 Data size: 84 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: bigint), _col1 (type: bigint), _col2 (type: double), _col3 (type: double), _col4 (type: double), _col5 (type: double), _col6 (type: double), _col7 (type: bigint), _col8 (type: double), _col9 (type: bigint), _col10 (type: tinyint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 12
                    includeColumns: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11]
                    dataColumns: ctinyint:tinyint, csmallint:smallint, cint:int, cbigint:bigint, cfloat:float, cdouble:double, cstring1:string, cstring2:string, ctimestamp1:timestamp, ctimestamp2:timestamp, cboolean1:boolean, cboolean2:boolean
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [double, double, double, decimal(22,3), decimal(13,3), double, double, double, double, double, double, double, double]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: 
                reduceColumnSortOrder: 
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 11
                    dataColumns: VALUE._col0:bigint, VALUE._col1:bigint, VALUE._col2:double, VALUE._col3:double, VALUE._col4:double, VALUE._col5:double, VALUE._col6:double, VALUE._col7:bigint, VALUE._col8:double, VALUE._col9:bigint, VALUE._col10:tinyint
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1), sum(VALUE._col2), sum(VALUE._col3), sum(VALUE._col4), sum(VALUE._col5), sum(VALUE._col6), count(VALUE._col7), sum(VALUE._col8), count(VALUE._col9), min(VALUE._col10)
                Group By Vectorization:
                    aggregators: VectorUDAFSumLong(col 0:bigint) -> bigint, VectorUDAFCountMerge(col 1:bigint) -> bigint, VectorUDAFSumDouble(col 2:double) -> double, VectorUDAFSumDouble(col 3:double) -> double, VectorUDAFSumDouble(col 4:double) -> double, VectorUDAFSumDouble(col 5:double) -> double, VectorUDAFSumDouble(col 6:double) -> double, VectorUDAFCountMerge(col 7:bigint) -> bigint, VectorUDAFSumDouble(col 8:double) -> double, VectorUDAFCountMerge(col 9:bigint) -> bigint, VectorUDAFMinLong(col 10:tinyint) -> tinyint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10
                Statistics: Num rows: 1 Data size: 84 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: (UDFToDouble(_col0) / _col1) (type: double), ((UDFToDouble(_col0) / _col1) + -3728.0D) (type: double), (- ((UDFToDouble(_col0) / _col1) + -3728.0D)) (type: double), (- (- ((UDFToDouble(_col0) / _col1) + -3728.0D))) (type: double), ((- (- ((UDFToDouble(_col0) / _col1) + -3728.0D))) * ((UDFToDouble(_col0) / _col1) + -3728.0D)) (type: double), _col2 (type: double), (- (UDFToDouble(_col0) / _col1)) (type: double), power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5) (type: double), (((- (- ((UDFToDouble(_col0) / _col1) + -3728.0D))) * ((UDFToDouble(_col0) / _col1) + -3728.0D)) * (- (- ((UDFToDouble(_col0) / _col1) + -3728.0D)))) (type: double), power(((_col5 - ((_col6 * _col6) / _col7)) / CASE WHEN ((_col7 = 1L)) THEN (null) ELSE ((_col7 - 1)) END), 0.5) (type: double), (- power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5)) (type: double), (power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5) - (- (- ((UDFToDouble(_col0) / _col1) + -3728.0D)))) (type: double), ((power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5) - (- (- ((UDFToDouble(_col0) / _col1) + -3728.0D)))) * power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5)) (type: double), ((_col3 - ((_col4 * _col4) / _col1)) / CASE WHEN ((_col1 = 1L)) THEN (null) ELSE ((_col1 - 1)) END) (type: double), (_col8 / _col9) (type: double), (10.175D - ((_col3 - ((_col4 * _col4) / _col1)) / CASE WHEN ((_col1 = 1L)) THEN (null) ELSE ((_col1 - 1)) END)) (type: double), (- (10.175D - ((_col3 - ((_col4 * _col4) / _col1)) / CASE WHEN ((_col1 = 1L)) THEN (null) ELSE ((_col1 - 1)) END))) (type: double), ((- power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5)) / -563.0D) (type: double), power(((_col3 - ((_col4 * _col4) / _col1)) / CASE WHEN ((_col1 = 1L)) THEN (null) ELSE ((_col1 - 1)) END), 0.5) (type: double), (- ((- power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5)) / -563.0D)) (type: double), ((UDFToDouble(_col0) / _col1) / _col2) (type: double), _col10 (type: tinyint), _col7 (type: bigint), (UDFToDouble(_col10) / ((- power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5)) / -563.0D)) (type: double), (- ((UDFToDouble(_col0) / _col1) / _col2)) (type: double)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [12, 15, 19, 24, 33, 2, 36, 41, 56, 64, 70, 81, 98, 105, 106, 114, 123, 130, 138, 146, 149, 10, 7, 158, 162]
                      selectExpressions: DoubleColDivideLongColumn(col 11:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 11:double) -> 12:double, DoubleColAddDoubleScalar(col 14:double, val -3728.0)(children: DoubleColDivideLongColumn(col 13:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 13:double) -> 14:double) -> 15:double, DoubleColUnaryMinus(col 18:double)(children: DoubleColAddDoubleScalar(col 17:double, val -3728.0)(children: DoubleColDivideLongColumn(col 16:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 16:double) -> 17:double) -> 18:double) -> 19:double, DoubleColUnaryMinus(col 23:double)(children: DoubleColUnaryMinus(col 22:double)(children: DoubleColAddDoubleScalar(col 21:double, val -3728.0)(children: DoubleColDivideLongColumn(col 20:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 20:double) -> 21:double) -> 22:double) -> 23:double) -> 24:double, DoubleColMultiplyDoubleColumn(col 29:double, col 32:double)(children: DoubleColUnaryMinus(col 28:double)(children: DoubleColUnaryMinus(col 27:double)(children: DoubleColAddDoubleScalar(col 26:double, val -3728.0)(children: DoubleColDivideLongColumn(col 25:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 25:double) -> 26:double) -> 27:double) -> 28:double) -> 29:double, DoubleColAddDoubleScalar(col 31:double, val -3728.0)(children: DoubleColDivideLongColumn(col 30:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 30:double) -> 31:double) -> 32:double) -> 33:double, DoubleColUnaryMinus(col 35:double)(children: DoubleColDivideLongColumn(col 34:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 34:double) -> 35:double) -> 36:double, FuncPowerDoubleToDouble(col 40:double)(children: DoubleColDivideLongColumn(col 39:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 38:double)(children: DoubleColDivideLongColumn(col 37:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 37:double) -> 38:double) -> 39:double) -> 40:double) -> 41:double, DoubleColMultiplyDoubleColumn(col 50:double, col 55:double)(children: DoubleColMultiplyDoubleColumn(col 46:double, col 49:double)(children: DoubleColUnaryMinus(col 45:double)(children: DoubleColUnaryMinus(col 44:double)(children: DoubleColAddDoubleScalar(col 43:double, val -3728.0)(children: DoubleColDivideLongColumn(col 42:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 42:double) -> 43:double) -> 44:double) -> 45:double) -> 46:double, DoubleColAddDoubleScalar(col 48:double, val -3728.0)(children: DoubleColDivideLongColumn(col 47:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 47:double) -> 48:double) -> 49:double) -> 50:double, DoubleColUnaryMinus(col 54:double)(children: DoubleColUnaryMinus(col 53:double)(children: DoubleColAddDoubleScalar(col 52:double, val -3728.0)(children: DoubleColDivideLongColumn(col 51:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 51:double) -> 52:double) -> 53:double) -> 54:double) -> 55:double) -> 56:double, FuncPowerDoubleToDouble(col 63:double)(children: DoubleColDivideLongColumn(col 59:double, col 62:bigint)(children: DoubleColSubtractDoubleColumn(col 5:double, col 58:double)(children: DoubleColDivideLongColumn(col 57:double, col 7:bigint)(children: DoubleColMultiplyDoubleColumn(col 6:double, col 6:double) -> 57:double) -> 58:double) -> 59:double, IfExprNullCondExpr(col 60:boolean, null, col 61:bigint)(children: LongColEqualLongScalar(col 7:bigint, val 1) -> 60:boolean, LongColSubtractLongScalar(col 7:bigint, val 1) -> 61:bigint) -> 62:bigint) -> 63:double) -> 64:double, DoubleColUnaryMinus(col 69:double)(children: FuncPowerDoubleToDouble(col 68:double)(children: DoubleColDivideLongColumn(col 67:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 66:double)(children: DoubleColDivideLongColumn(col 65:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 65:double) -> 66:double) -> 67:double) -> 68:double) -> 69:double) -> 70:double, DoubleColSubtractDoubleColumn(col 75:double, col 80:double)(children: FuncPowerDoubleToDouble(col 74:double)(children: DoubleColDivideLongColumn(col 73:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 72:double)(children: DoubleColDivideLongColumn(col 71:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 71:double) -> 72:double) -> 73:double) -> 74:double) -> 75:double, DoubleColUnaryMinus(col 79:double)(children: DoubleColUnaryMinus(col 78:double)(children: DoubleColAddDoubleScalar(col 77:double, val -3728.0)(children: DoubleColDivideLongColumn(col 76:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 76:double) -> 77:double) -> 78:double) -> 79:double) -> 80:double) -> 81:double, DoubleColMultiplyDoubleColumn(col 92:double, col 97:double)(children: DoubleColSubtractDoubleColumn(col 86:double, col 91:double)(children: FuncPowerDoubleToDouble(col 85:double)(children: DoubleColDivideLongColumn(col 84:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 83:double)(children: DoubleColDivideLongColumn(col 82:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 82:double) -> 83:double) -> 84:double) -> 85:double) -> 86:double, DoubleColUnaryMinus(col 90:double)(children: DoubleColUnaryMinus(col 89:double)(children: DoubleColAddDoubleScalar(col 88:double, val -3728.0)(children: DoubleColDivideLongColumn(col 87:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 87:double) -> 88:double) -> 89:double) -> 90:double) -> 91:double) -> 92:double, FuncPowerDoubleToDouble(col 96:double)(children: DoubleColDivideLongColumn(col 95:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 94:double)(children: DoubleColDivideLongColumn(col 93:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 93:double) -> 94:double) -> 95:double) -> 96:double) -> 97:double) -> 98:double, DoubleColDivideLongColumn(col 101:double, col 104:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 100:double)(children: DoubleColDivideLongColumn(col 99:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 99:double) -> 100:double) -> 101:double, IfExprNullCondExpr(col 102:boolean, null, col 103:bigint)(children: LongColEqualLongScalar(col 1:bigint, val 1) -> 102:boolean, LongColSubtractLongScalar(col 1:bigint, val 1) -> 103:bigint) -> 104:bigint) -> 105:double, DoubleColDivideLongColumn(col 8:double, col 9:bigint) -> 106:double, DoubleScalarSubtractDoubleColumn(val 10.175, col 113:double)(children: DoubleColDivideLongColumn(col 109:double, col 112:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 108:double)(children: DoubleColDivideLongColumn(col 107:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 107:double) -> 108:double) -> 109:double, IfExprNullCondExpr(col 110:boolean, null, col 111:bigint)(children: LongColEqualLongScalar(col 1:bigint, val 1) -> 110:boolean, LongColSubtractLongScalar(col 1:bigint, val 1) -> 111:bigint) -> 112:bigint) -> 113:double) -> 114:double, DoubleColUnaryMinus(col 122:double)(children: DoubleScalarSubtractDoubleColumn(val 10.175, col 121:double)(children: DoubleColDivideLongColumn(col 117:double, col 120:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 116:double)(children: DoubleColDivideLongColumn(col 115:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 115:double) -> 116:double) -> 117:double, IfExprNullCondExpr(col 118:boolean, null, col 119:bigint)(children: LongColEqualLongScalar(col 1:bigint, val 1) -> 118:boolean, LongColSubtractLongScalar(col 1:bigint, val 1) -> 119:bigint) -> 120:bigint) -> 121:double) -> 122:double) -> 123:double, DoubleColDivideDoubleScalar(col 129:double, val -563.0)(children: DoubleColUnaryMinus(col 128:double)(children: FuncPowerDoubleToDouble(col 127:double)(children: DoubleColDivideLongColumn(col 126:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 125:double)(children: DoubleColDivideLongColumn(col 124:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 124:double) -> 125:double) -> 126:double) -> 127:double) -> 128:double) -> 129:double) -> 130:double, FuncPowerDoubleToDouble(col 137:double)(children: DoubleColDivideLongColumn(col 133:double, col 136:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 132:double)(children: DoubleColDivideLongColumn(col 131:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 131:double) -> 132:double) -> 133:double, IfExprNullCondExpr(col 134:boolean, null, col 135:bigint)(children: LongColEqualLongScalar(col 1:bigint, val 1) -> 134:boolean, LongColSubtractLongScalar(col 1:bigint, val 1) -> 135:bigint) -> 136:bigint) -> 137:double) -> 138:double, DoubleColUnaryMinus(col 145:double)(children: DoubleColDivideDoubleScalar(col 144:double, val -563.0)(children: DoubleColUnaryMinus(col 143:double)(children: FuncPowerDoubleToDouble(col 142:double)(children: DoubleColDivideLongColumn(col 141:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 140:double)(children: DoubleColDivideLongColumn(col 139:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 139:double) -> 140:double) -> 141:double) -> 142:double) -> 143:double) -> 144:double) -> 145:double) -> 146:double, DoubleColDivideDoubleColumn(col 148:double, col 2:double)(children: DoubleColDivideLongColumn(col 147:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 147:double) -> 148:double) -> 149:double, DoubleColDivideDoubleColumn(col 150:double, col 157:double)(children: CastLongToDouble(col 10:tinyint) -> 150:double, DoubleColDivideDoubleScalar(col 156:double, val -563.0)(children: DoubleColUnaryMinus(col 155:double)(children: FuncPowerDoubleToDouble(col 154:double)(children: DoubleColDivideLongColumn(col 153:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 152:double)(children: DoubleColDivideLongColumn(col 151:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 151:double) -> 152:double) -> 153:double) -> 154:double) -> 155:double) -> 156:double) -> 157:double) -> 158:double, DoubleColUnaryMinus(col 161:double)(children: DoubleColDivideDoubleColumn(col 160:double, col 2:double)(children: DoubleColDivideLongColumn(col 159:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 159:double) -> 160:double) -> 161:double) -> 162:double
                  Statistics: Num rows: 1 Data size: 196 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 1 Data size: 196 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

