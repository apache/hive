PREHOOK: query: DROP TABLE IF EXISTS test_1
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS test_1
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE TABLE test_1 
( 
member BIGINT 
, age VARCHAR (100) 
) 
STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_1
POSTHOOK: query: CREATE TABLE test_1 
( 
member BIGINT 
, age VARCHAR (100) 
) 
STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_1
PREHOOK: query: DROP TABLE IF EXISTS test_2
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS test_2
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE TABLE test_2 
( 
member BIGINT 
) 
STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_2
POSTHOOK: query: CREATE TABLE test_2 
( 
member BIGINT 
) 
STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_2
PREHOOK: query: INSERT INTO test_1 VALUES (1, '20'), (2, '30'), (3, '40')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_1
POSTHOOK: query: INSERT INTO test_1 VALUES (1, '20'), (2, '30'), (3, '40')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_1
POSTHOOK: Lineage: test_1.age SCRIPT []
POSTHOOK: Lineage: test_1.member SCRIPT []
PREHOOK: query: INSERT INTO test_2 VALUES (1), (2), (3)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_2
POSTHOOK: query: INSERT INTO test_2 VALUES (1), (2), (3)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_2
POSTHOOK: Lineage: test_2.member SCRIPT []
PREHOOK: query: EXPLAIN
SELECT 
t2.member 
, t1.age_1 
, t1.age_2 
FROM 
test_2 t2 
LEFT JOIN ( 
SELECT 
member 
, age as age_1 
, age as age_2 
FROM 
test_1 
) t1 
ON t2.member = t1.member
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT 
t2.member 
, t1.age_1 
, t1.age_2 
FROM 
test_2 t2 
LEFT JOIN ( 
SELECT 
member 
, age as age_1 
, age as age_2 
FROM 
test_1 
) t1 
ON t2.member = t1.member
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 2 (BROADCAST_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t2
                  Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: member (type: bigint)
                    outputColumnNames: _col0
                    Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Left Outer Join 0 to 1
                      keys:
                        0 _col0 (type: bigint)
                        1 _col0 (type: bigint)
                      outputColumnNames: _col0, _col2, _col3
                      input vertices:
                        1 Map 2
                      Statistics: Num rows: 3 Data size: 540 Basic stats: COMPLETE Column stats: COMPLETE
                      Select Operator
                        expressions: _col0 (type: bigint), _col2 (type: varchar(100)), _col3 (type: varchar(100))
                        outputColumnNames: _col0, _col1, _col2
                        Statistics: Num rows: 3 Data size: 540 Basic stats: COMPLETE Column stats: COMPLETE
                        File Output Operator
                          compressed: false
                          Statistics: Num rows: 3 Data size: 540 Basic stats: COMPLETE Column stats: COMPLETE
                          table:
                              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test_1
                  Statistics: Num rows: 3 Data size: 282 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: member (type: bigint), age (type: varchar(100)), age (type: varchar(100))
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 3 Data size: 540 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: bigint)
                      sort order: +
                      Map-reduce partition columns: _col0 (type: bigint)
                      Statistics: Num rows: 3 Data size: 540 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: varchar(100)), _col2 (type: varchar(100))
            Execution mode: vectorized, llap
            LLAP IO: no inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT 
t2.member 
, t1.age_1 
, t1.age_2 
FROM 
test_2 t2 
LEFT JOIN ( 
SELECT 
member 
, age as age_1 
, age as age_2 
FROM 
test_1 
) t1 
ON t2.member = t1.member
PREHOOK: type: QUERY
PREHOOK: Input: default@test_1
PREHOOK: Input: default@test_2
#### A masked pattern was here ####
POSTHOOK: query: SELECT 
t2.member 
, t1.age_1 
, t1.age_2 
FROM 
test_2 t2 
LEFT JOIN ( 
SELECT 
member 
, age as age_1 
, age as age_2 
FROM 
test_1 
) t1 
ON t2.member = t1.member
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_1
POSTHOOK: Input: default@test_2
#### A masked pattern was here ####
1	20	20
2	30	30
3	40	40
