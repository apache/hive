PREHOOK: query: create table vector_ptf_part_simple_text(p_mfgr string, p_name string, p_retailprice double)
        ROW FORMAT DELIMITED
        FIELDS TERMINATED BY '\t'
        STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@vector_ptf_part_simple_text
POSTHOOK: query: create table vector_ptf_part_simple_text(p_mfgr string, p_name string, p_retailprice double)
        ROW FORMAT DELIMITED
        FIELDS TERMINATED BY '\t'
        STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@vector_ptf_part_simple_text
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/vector_ptf_part_simple.txt' OVERWRITE INTO TABLE vector_ptf_part_simple_text
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@vector_ptf_part_simple_text
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/vector_ptf_part_simple.txt' OVERWRITE INTO TABLE vector_ptf_part_simple_text
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@vector_ptf_part_simple_text
PREHOOK: query: create table vector_ptf_part_simple_orc(p_mfgr string, p_name string, p_retailprice double) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@vector_ptf_part_simple_orc
POSTHOOK: query: create table vector_ptf_part_simple_orc(p_mfgr string, p_name string, p_retailprice double) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@vector_ptf_part_simple_orc
PREHOOK: query: INSERT INTO TABLE vector_ptf_part_simple_orc SELECT * FROM vector_ptf_part_simple_text
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_text
PREHOOK: Output: default@vector_ptf_part_simple_orc
POSTHOOK: query: INSERT INTO TABLE vector_ptf_part_simple_orc SELECT * FROM vector_ptf_part_simple_text
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_text
POSTHOOK: Output: default@vector_ptf_part_simple_orc
POSTHOOK: Lineage: vector_ptf_part_simple_orc.p_mfgr SIMPLE [(vector_ptf_part_simple_text)vector_ptf_part_simple_text.FieldSchema(name:p_mfgr, type:string, comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc.p_name SIMPLE [(vector_ptf_part_simple_text)vector_ptf_part_simple_text.FieldSchema(name:p_name, type:string, comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc.p_retailprice SIMPLE [(vector_ptf_part_simple_text)vector_ptf_part_simple_text.FieldSchema(name:p_retailprice, type:double, comment:null), ]
vector_ptf_part_simple_text.p_mfgr	vector_ptf_part_simple_text.p_name	vector_ptf_part_simple_text.p_retailprice
PREHOOK: query: select * from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select * from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
vector_ptf_part_simple_orc.p_mfgr	vector_ptf_part_simple_orc.p_name	vector_ptf_part_simple_orc.p_retailprice
Manufacturer#2	almond aquamarine rose maroon antique	900.66
Manufacturer#1	almond aquamarine burnished black steel	1414.42
Manufacturer#2	almond aquamarine rose maroon antique	1698.66
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76
Manufacturer#5	almond antique medium spring khaki	1611.66
Manufacturer#5	almond antique blue firebrick mint	1789.69
Manufacturer#1	almond antique burnished rose metallic	1173.15
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66
Manufacturer#3	almond antique forest lavender goldenrod	1190.27
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76
Manufacturer#2	almond antique violet turquoise frosted	1800.7
Manufacturer#3	almond antique forest lavender goldenrod	NULL
Manufacturer#2	almond antique violet chocolate turquoise	1690.68
Manufacturer#4	almond antique violet mint lemon	1375.42
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66
Manufacturer#5	almond azure blanched chiffon midnight	1464.48
Manufacturer#3	almond antique forest lavender goldenrod	590.27
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76
Manufacturer#2	almond antique violet turquoise frosted	1800.7
Manufacturer#5	almond antique sky peru orange	1788.73
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66
Manufacturer#3	almond antique chartreuse khaki white	99.68
Manufacturer#4	almond antique gainsboro frosted violet	NULL
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76
Manufacturer#2	almond antique violet turquoise frosted	1800.7
Manufacturer#3	almond antique olive coral navajo	1337.29
Manufacturer#5	almond antique medium spring khaki	1611.66
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59
Manufacturer#3	almond antique misty red olive	1922.98
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6
Manufacturer#3	almond antique forest lavender goldenrod	1190.27
Manufacturer#2	almond aquamarine midnight light salmon	2031.98
Manufacturer#4	almond aquamarine floral ivory bisque	NULL
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1
Manufacturer#4	almond azure aquamarine papaya violet	1290.35
Manufacturer#3	almond antique metallic orange dim	55.39
Manufacturer#1	almond antique burnished rose metallic	1173.15
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv,
count(p_retailprice) over(partition by p_mfgr) as c,
count(*) over(partition by p_mfgr) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv,
count(p_retailprice) over(partition by p_mfgr) as c,
count(*) over(partition by p_mfgr) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string)
                    sort order: +
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkStringOperator
                        keyColumnNums: [0]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        valueColumnNums: [1, 2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_name (type: string), p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    dataColumns: KEY.reducesinkkey0:string, VALUE._col0:string, VALUE._col1:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, bigint, bigint, double, double, bigint, bigint]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2]
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: row_number_window_0
                              name: row_number
                              window function: GenericUDAFRowNumberEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: rank_window_1
                              arguments: _col0
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: dense_rank_window_2
                              arguments: _col0
                              name: dense_rank
                              window function: GenericUDAFDenseRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: first_value_window_3
                              arguments: _col2
                              name: first_value
                              window function: GenericUDAFFirstValueEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                            window function definition
                              alias: last_value_window_4
                              arguments: _col2
                              name: last_value
                              window function: GenericUDAFLastValueEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                            window function definition
                              alias: count_window_5
                              arguments: _col2
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                            window function definition
                              alias: count_window_6
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isStar: true
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorRowNumber, VectorPTFEvaluatorRank, VectorPTFEvaluatorDenseRank, VectorPTFEvaluatorDoubleFirstValue, VectorPTFEvaluatorDoubleLastValue, VectorPTFEvaluatorCount, VectorPTFEvaluatorCountStar]
                      functionInputExpressions: [null, col 0:string, col 0:string, col 2:double, col 2:double, col 2:double, null]
                      functionNames: [row_number, rank, dense_rank, first_value, last_value, count, count]
                      keyInputColumns: [0]
                      native: true
                      nonKeyInputColumns: [1, 2]
                      orderExpressions: [col 0:string]
                      outputColumns: [3, 4, 5, 6, 7, 8, 9, 0, 1, 2]
                      outputTypes: [int, int, int, double, double, bigint, bigint, string, string, double]
                      streamingColumns: [3, 4, 5, 6]
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), row_number_window_0 (type: int), rank_window_1 (type: int), dense_rank_window_2 (type: int), first_value_window_3 (type: double), last_value_window_4 (type: double), count_window_5 (type: bigint), count_window_6 (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
                    Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv,
count(p_retailprice) over(partition by p_mfgr) as c,
count(*) over(partition by p_mfgr) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv,
count(p_retailprice) over(partition by p_mfgr) as c,
count(*) over(partition by p_mfgr) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	rn	r	dr	fv	lv	c	cs
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	1	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond antique violet mint lemon	1375.42	2	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	3	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond antique gainsboro frosted violet	NULL	4	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	5	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	6	1	1	1290.35	1206.26	4	6
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	1	1	1	1464.48	1788.73	6	6
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	2	1	1	1464.48	1788.73	6	6
Manufacturer#5	almond antique medium spring khaki	1611.66	3	1	1	1464.48	1788.73	6	6
Manufacturer#5	almond antique blue firebrick mint	1789.69	4	1	1	1464.48	1788.73	6	6
Manufacturer#5	almond antique medium spring khaki	1611.66	5	1	1	1464.48	1788.73	6	6
Manufacturer#5	almond antique sky peru orange	1788.73	6	1	1	1464.48	1788.73	6	6
Manufacturer#2	almond aquamarine rose maroon antique	900.66	1	1	1	900.66	1800.7	8	8
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	2	1	1	900.66	1800.7	8	8
Manufacturer#2	almond antique violet turquoise frosted	1800.7	3	1	1	900.66	1800.7	8	8
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	4	1	1	900.66	1800.7	8	8
Manufacturer#2	almond antique violet turquoise frosted	1800.7	5	1	1	900.66	1800.7	8	8
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	6	1	1	900.66	1800.7	8	8
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	7	1	1	900.66	1800.7	8	8
Manufacturer#2	almond antique violet turquoise frosted	1800.7	8	1	1	900.66	1800.7	8	8
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	2	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	3	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	4	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine burnished black steel	1414.42	5	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique burnished rose metallic	1173.15	6	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	7	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	8	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique burnished rose metallic	1173.15	9	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	10	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	11	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	12	1	1	1753.76	1632.66	11	12
Manufacturer#3	almond antique forest lavender goldenrod	590.27	1	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique metallic orange dim	55.39	2	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	3	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique olive coral navajo	1337.29	4	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique misty red olive	1922.98	5	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	6	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique forest lavender goldenrod	NULL	7	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique chartreuse khaki white	99.68	8	1	1	590.27	99.68	7	8
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr range between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr range between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr range between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr range between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr range between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr range between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr range between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr range between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string)
                    sort order: +
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkStringOperator
                        keyColumnNums: [0]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        valueColumnNums: [1, 2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_name (type: string), p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                notVectorizedReason: PTF operator: row_number only CURRENT ROW end frame is supported for RANGE
                vectorized: false
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: row_number_window_0
                              name: row_number
                              window function: GenericUDAFRowNumberEvaluator
                              window frame: RANGE PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: rank_window_1
                              arguments: _col0
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: RANGE PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: dense_rank_window_2
                              arguments: _col0
                              name: dense_rank
                              window function: GenericUDAFDenseRankEvaluator
                              window frame: RANGE PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: first_value_window_3
                              arguments: _col2
                              name: first_value
                              window function: GenericUDAFFirstValueEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: last_value_window_4
                              arguments: _col2
                              name: last_value
                              window function: GenericUDAFLastValueEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: count_window_5
                              arguments: _col2
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: count_window_6
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                              isStar: true
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), row_number_window_0 (type: int), rank_window_1 (type: int), dense_rank_window_2 (type: int), first_value_window_3 (type: double), last_value_window_4 (type: double), count_window_5 (type: bigint), count_window_6 (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                    Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr range between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr range between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr range between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr range between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr range between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr range between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr range between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr range between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	rn	r	dr	fv	lv	c	cs
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	1	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond antique violet mint lemon	1375.42	2	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	3	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond antique gainsboro frosted violet	NULL	4	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	5	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	6	1	1	1290.35	1206.26	4	6
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	1	1	1	1464.48	1788.73	6	6
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	2	1	1	1464.48	1788.73	6	6
Manufacturer#5	almond antique medium spring khaki	1611.66	3	1	1	1464.48	1788.73	6	6
Manufacturer#5	almond antique blue firebrick mint	1789.69	4	1	1	1464.48	1788.73	6	6
Manufacturer#5	almond antique medium spring khaki	1611.66	5	1	1	1464.48	1788.73	6	6
Manufacturer#5	almond antique sky peru orange	1788.73	6	1	1	1464.48	1788.73	6	6
Manufacturer#2	almond aquamarine rose maroon antique	900.66	1	1	1	900.66	1800.7	8	8
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	2	1	1	900.66	1800.7	8	8
Manufacturer#2	almond antique violet turquoise frosted	1800.7	3	1	1	900.66	1800.7	8	8
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	4	1	1	900.66	1800.7	8	8
Manufacturer#2	almond antique violet turquoise frosted	1800.7	5	1	1	900.66	1800.7	8	8
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	6	1	1	900.66	1800.7	8	8
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	7	1	1	900.66	1800.7	8	8
Manufacturer#2	almond antique violet turquoise frosted	1800.7	8	1	1	900.66	1800.7	8	8
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	2	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	3	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	4	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine burnished black steel	1414.42	5	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique burnished rose metallic	1173.15	6	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	7	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	8	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique burnished rose metallic	1173.15	9	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	10	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	11	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	12	1	1	1753.76	1632.66	11	12
Manufacturer#3	almond antique forest lavender goldenrod	590.27	1	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique metallic orange dim	55.39	2	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	3	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique olive coral navajo	1337.29	4	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique misty red olive	1922.98	5	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	6	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique forest lavender goldenrod	NULL	7	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique chartreuse khaki white	99.68	8	1	1	590.27	99.68	7	8
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr rows between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr rows between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr rows between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr rows between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr rows between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr rows between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr rows between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr rows between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string)
                    sort order: +
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkStringOperator
                        keyColumnNums: [0]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        valueColumnNums: [1, 2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_name (type: string), p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                notVectorizedReason: PTF operator: first_value UNBOUNDED end frame is not supported for ROWS window type
                vectorized: false
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: row_number_window_0
                              name: row_number
                              window function: GenericUDAFRowNumberEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: rank_window_1
                              arguments: _col0
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: dense_rank_window_2
                              arguments: _col0
                              name: dense_rank
                              window function: GenericUDAFDenseRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: first_value_window_3
                              arguments: _col2
                              name: first_value
                              window function: GenericUDAFFirstValueEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: last_value_window_4
                              arguments: _col2
                              name: last_value
                              window function: GenericUDAFLastValueEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: count_window_5
                              arguments: _col2
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: count_window_6
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                              isStar: true
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), row_number_window_0 (type: int), rank_window_1 (type: int), dense_rank_window_2 (type: int), first_value_window_3 (type: double), last_value_window_4 (type: double), count_window_5 (type: bigint), count_window_6 (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                    Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr rows between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr rows between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr rows between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr rows between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr rows between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr rows between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr rows between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr rows between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	rn	r	dr	fv	lv	c	cs
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	1	1	1	1290.35	1290.35	1	1
Manufacturer#4	almond antique violet mint lemon	1375.42	2	1	1	1290.35	1375.42	2	2
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	3	1	1	1290.35	NULL	2	3
Manufacturer#4	almond antique gainsboro frosted violet	NULL	4	1	1	1290.35	NULL	2	4
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	5	1	1	1290.35	1844.92	3	5
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	6	1	1	1290.35	1206.26	4	6
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	1	1	1	1464.48	1464.48	1	1
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	2	1	1	1464.48	1018.1	2	2
Manufacturer#5	almond antique medium spring khaki	1611.66	3	1	1	1464.48	1611.66	3	3
Manufacturer#5	almond antique blue firebrick mint	1789.69	4	1	1	1464.48	1789.69	4	4
Manufacturer#5	almond antique medium spring khaki	1611.66	5	1	1	1464.48	1611.66	5	5
Manufacturer#5	almond antique sky peru orange	1788.73	6	1	1	1464.48	1788.73	6	6
Manufacturer#2	almond aquamarine rose maroon antique	900.66	1	1	1	900.66	900.66	1	1
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	2	1	1	900.66	1698.66	2	2
Manufacturer#2	almond antique violet turquoise frosted	1800.7	3	1	1	900.66	1800.7	3	3
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	4	1	1	900.66	1690.68	4	4
Manufacturer#2	almond antique violet turquoise frosted	1800.7	5	1	1	900.66	1800.7	5	5
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	6	1	1	900.66	1000.6	6	6
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	7	1	1	900.66	2031.98	7	7
Manufacturer#2	almond antique violet turquoise frosted	1800.7	8	1	1	900.66	1800.7	8	8
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1	1	1	1753.76	1753.76	1	1
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	2	1	1	1753.76	1632.66	2	2
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	3	1	1	1753.76	1632.66	3	3
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	4	1	1	1753.76	1753.76	4	4
Manufacturer#1	almond aquamarine burnished black steel	1414.42	5	1	1	1753.76	1414.42	5	5
Manufacturer#1	almond antique burnished rose metallic	1173.15	6	1	1	1753.76	1173.15	6	6
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	7	1	1	1753.76	1602.59	7	7
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	8	1	1	1753.76	1753.76	8	8
Manufacturer#1	almond antique burnished rose metallic	1173.15	9	1	1	1753.76	1173.15	9	9
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	10	1	1	1753.76	1753.76	10	10
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	11	1	1	1753.76	NULL	10	11
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	12	1	1	1753.76	1632.66	11	12
Manufacturer#3	almond antique forest lavender goldenrod	590.27	1	1	1	590.27	590.27	1	1
Manufacturer#3	almond antique metallic orange dim	55.39	2	1	1	590.27	55.39	2	2
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	3	1	1	590.27	1190.27	3	3
Manufacturer#3	almond antique olive coral navajo	1337.29	4	1	1	590.27	1337.29	4	4
Manufacturer#3	almond antique misty red olive	1922.98	5	1	1	590.27	1922.98	5	5
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	6	1	1	590.27	1190.27	6	6
Manufacturer#3	almond antique forest lavender goldenrod	NULL	7	1	1	590.27	NULL	6	7
Manufacturer#3	almond antique chartreuse khaki white	99.68	8	1	1	590.27	99.68	7	8
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name) as rn,
rank() over(partition by p_mfgr order by p_name) as r,
dense_rank() over(partition by p_mfgr order by p_name) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name) as c,
count(*) over(partition by p_mfgr order by p_name) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name) as rn,
rank() over(partition by p_mfgr order by p_name) as r,
dense_rank() over(partition by p_mfgr order by p_name) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name) as c,
count(*) over(partition by p_mfgr order by p_name) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), p_name (type: string)
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [0, 1]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [0]
                        valueColumnNums: [2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: aa
                reduceColumnSortOrder: ++
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    dataColumns: KEY.reducesinkkey0:string, KEY.reducesinkkey1:string, VALUE._col0:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, bigint, bigint, double, double, bigint, bigint]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2]
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: row_number_window_0
                              name: row_number
                              window function: GenericUDAFRowNumberEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: rank_window_1
                              arguments: _col1
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: dense_rank_window_2
                              arguments: _col1
                              name: dense_rank
                              window function: GenericUDAFDenseRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: first_value_window_3
                              arguments: _col2
                              name: first_value
                              window function: GenericUDAFFirstValueEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: last_value_window_4
                              arguments: _col2
                              name: last_value
                              window function: GenericUDAFLastValueEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: count_window_5
                              arguments: _col2
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: count_window_6
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                              isStar: true
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorRowNumber, VectorPTFEvaluatorRank, VectorPTFEvaluatorDenseRank, VectorPTFEvaluatorDoubleFirstValue, VectorPTFEvaluatorDoubleLastValue, VectorPTFEvaluatorCount, VectorPTFEvaluatorCountStar]
                      functionInputExpressions: [null, col 1:string, col 1:string, col 2:double, col 2:double, col 2:double, null]
                      functionNames: [row_number, rank, dense_rank, first_value, last_value, count, count]
                      keyInputColumns: [0, 1]
                      native: true
                      nonKeyInputColumns: [2]
                      orderExpressions: [col 1:string]
                      outputColumns: [3, 4, 5, 6, 7, 8, 9, 0, 1, 2]
                      outputTypes: [int, int, int, double, double, bigint, bigint, string, string, double]
                      partitionExpressions: [col 0:string]
                      streamingColumns: [3, 4, 5, 6]
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), row_number_window_0 (type: int), rank_window_1 (type: int), dense_rank_window_2 (type: int), first_value_window_3 (type: double), last_value_window_4 (type: double), count_window_5 (type: bigint), count_window_6 (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
                    Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name) as rn,
rank() over(partition by p_mfgr order by p_name) as r,
dense_rank() over(partition by p_mfgr order by p_name) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name) as c,
count(*) over(partition by p_mfgr order by p_name) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name) as rn,
rank() over(partition by p_mfgr order by p_name) as r,
dense_rank() over(partition by p_mfgr order by p_name) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name) as c,
count(*) over(partition by p_mfgr order by p_name) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	rn	r	dr	fv	lv	c	cs
Manufacturer#1	almond antique burnished rose metallic	1173.15	1	1	1	1173.15	1173.15	2	2
Manufacturer#1	almond antique burnished rose metallic	1173.15	2	1	1	1173.15	1173.15	2	2
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	4	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	5	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	6	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	7	7	3	1173.15	1602.59	7	7
Manufacturer#1	almond aquamarine burnished black steel	1414.42	8	8	4	1173.15	1414.42	8	8
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	9	9	5	1173.15	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	10	9	5	1173.15	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	11	9	5	1173.15	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	12	9	5	1173.15	1632.66	11	12
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1	1	1	1690.68	1690.68	1	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	2	2	2	1690.68	1800.7	4	4
Manufacturer#2	almond antique violet turquoise frosted	1800.7	3	2	2	1690.68	1800.7	4	4
Manufacturer#2	almond antique violet turquoise frosted	1800.7	4	2	2	1690.68	1800.7	4	4
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	5	5	3	1690.68	2031.98	5	5
Manufacturer#2	almond aquamarine rose maroon antique	900.66	6	6	4	1690.68	1698.66	7	7
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	7	6	4	1690.68	1698.66	7	7
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	8	8	5	1690.68	1000.6	8	8
Manufacturer#3	almond antique chartreuse khaki white	99.68	1	1	1	99.68	99.68	1	1
Manufacturer#3	almond antique forest lavender goldenrod	590.27	2	2	2	99.68	1190.27	4	5
Manufacturer#3	almond antique forest lavender goldenrod	NULL	3	2	2	99.68	1190.27	4	5
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	4	2	2	99.68	1190.27	4	5
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	5	2	2	99.68	1190.27	4	5
Manufacturer#3	almond antique metallic orange dim	55.39	6	6	3	99.68	55.39	5	6
Manufacturer#3	almond antique misty red olive	1922.98	7	7	4	99.68	1922.98	6	7
Manufacturer#3	almond antique olive coral navajo	1337.29	8	8	5	99.68	1337.29	7	8
Manufacturer#4	almond antique gainsboro frosted violet	NULL	1	1	1	NULL	NULL	0	1
Manufacturer#4	almond antique violet mint lemon	1375.42	2	2	2	NULL	1375.42	1	2
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	3	3	3	NULL	1206.26	2	4
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	4	3	3	NULL	1206.26	2	4
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	5	5	4	NULL	1844.92	3	5
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	6	6	5	NULL	1290.35	4	6
Manufacturer#5	almond antique blue firebrick mint	1789.69	1	1	1	1789.69	1789.69	1	1
Manufacturer#5	almond antique medium spring khaki	1611.66	2	2	2	1789.69	1611.66	3	3
Manufacturer#5	almond antique medium spring khaki	1611.66	3	2	2	1789.69	1611.66	3	3
Manufacturer#5	almond antique sky peru orange	1788.73	4	4	3	1789.69	1788.73	4	4
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	5	5	4	1789.69	1018.1	5	5
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	6	6	5	1789.69	1464.48	6	6
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), p_name (type: string)
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [0, 1]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [0]
                        valueColumnNums: [2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                notVectorizedReason: PTF operator: row_number only CURRENT ROW end frame is supported for RANGE
                vectorized: false
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: row_number_window_0
                              name: row_number
                              window function: GenericUDAFRowNumberEvaluator
                              window frame: RANGE PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: rank_window_1
                              arguments: _col1
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: RANGE PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: dense_rank_window_2
                              arguments: _col1
                              name: dense_rank
                              window function: GenericUDAFDenseRankEvaluator
                              window frame: RANGE PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: first_value_window_3
                              arguments: _col2
                              name: first_value
                              window function: GenericUDAFFirstValueEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: last_value_window_4
                              arguments: _col2
                              name: last_value
                              window function: GenericUDAFLastValueEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: count_window_5
                              arguments: _col2
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: count_window_6
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                              isStar: true
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), row_number_window_0 (type: int), rank_window_1 (type: int), dense_rank_window_2 (type: int), first_value_window_3 (type: double), last_value_window_4 (type: double), count_window_5 (type: bigint), count_window_6 (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                    Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	rn	r	dr	fv	lv	c	cs
Manufacturer#1	almond antique burnished rose metallic	1173.15	1	1	1	1173.15	1173.15	2	2
Manufacturer#1	almond antique burnished rose metallic	1173.15	2	1	1	1173.15	1173.15	2	2
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	4	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	5	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	6	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	7	7	3	1173.15	1602.59	7	7
Manufacturer#1	almond aquamarine burnished black steel	1414.42	8	8	4	1173.15	1414.42	8	8
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	9	9	5	1173.15	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	10	9	5	1173.15	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	11	9	5	1173.15	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	12	9	5	1173.15	1632.66	11	12
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1	1	1	1690.68	1690.68	1	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	2	2	2	1690.68	1800.7	4	4
Manufacturer#2	almond antique violet turquoise frosted	1800.7	3	2	2	1690.68	1800.7	4	4
Manufacturer#2	almond antique violet turquoise frosted	1800.7	4	2	2	1690.68	1800.7	4	4
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	5	5	3	1690.68	2031.98	5	5
Manufacturer#2	almond aquamarine rose maroon antique	900.66	6	6	4	1690.68	1698.66	7	7
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	7	6	4	1690.68	1698.66	7	7
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	8	8	5	1690.68	1000.6	8	8
Manufacturer#3	almond antique chartreuse khaki white	99.68	1	1	1	99.68	99.68	1	1
Manufacturer#3	almond antique forest lavender goldenrod	590.27	2	2	2	99.68	1190.27	4	5
Manufacturer#3	almond antique forest lavender goldenrod	NULL	3	2	2	99.68	1190.27	4	5
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	4	2	2	99.68	1190.27	4	5
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	5	2	2	99.68	1190.27	4	5
Manufacturer#3	almond antique metallic orange dim	55.39	6	6	3	99.68	55.39	5	6
Manufacturer#3	almond antique misty red olive	1922.98	7	7	4	99.68	1922.98	6	7
Manufacturer#3	almond antique olive coral navajo	1337.29	8	8	5	99.68	1337.29	7	8
Manufacturer#4	almond antique gainsboro frosted violet	NULL	1	1	1	NULL	NULL	0	1
Manufacturer#4	almond antique violet mint lemon	1375.42	2	2	2	NULL	1375.42	1	2
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	3	3	3	NULL	1206.26	2	4
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	4	3	3	NULL	1206.26	2	4
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	5	5	4	NULL	1844.92	3	5
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	6	6	5	NULL	1290.35	4	6
Manufacturer#5	almond antique blue firebrick mint	1789.69	1	1	1	1789.69	1789.69	1	1
Manufacturer#5	almond antique medium spring khaki	1611.66	2	2	2	1789.69	1611.66	3	3
Manufacturer#5	almond antique medium spring khaki	1611.66	3	2	2	1789.69	1611.66	3	3
Manufacturer#5	almond antique sky peru orange	1788.73	4	4	3	1789.69	1788.73	4	4
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	5	5	4	1789.69	1018.1	5	5
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	6	6	5	1789.69	1464.48	6	6
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name rows between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr order by p_name rows between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr order by p_name rows between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name rows between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr order by p_name rows between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr order by p_name rows between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), p_name (type: string)
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [0, 1]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [0]
                        valueColumnNums: [2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                notVectorizedReason: PTF operator: first_value UNBOUNDED end frame is not supported for ROWS window type
                vectorized: false
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: row_number_window_0
                              name: row_number
                              window function: GenericUDAFRowNumberEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: rank_window_1
                              arguments: _col1
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: dense_rank_window_2
                              arguments: _col1
                              name: dense_rank
                              window function: GenericUDAFDenseRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: first_value_window_3
                              arguments: _col2
                              name: first_value
                              window function: GenericUDAFFirstValueEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: last_value_window_4
                              arguments: _col2
                              name: last_value
                              window function: GenericUDAFLastValueEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: count_window_5
                              arguments: _col2
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: count_window_6
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                              isStar: true
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), row_number_window_0 (type: int), rank_window_1 (type: int), dense_rank_window_2 (type: int), first_value_window_3 (type: double), last_value_window_4 (type: double), count_window_5 (type: bigint), count_window_6 (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                    Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name rows between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr order by p_name rows between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr order by p_name rows between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name rows between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr order by p_name rows between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr order by p_name rows between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	rn	r	dr	fv	lv	c	cs
Manufacturer#1	almond antique burnished rose metallic	1173.15	1	1	1	1173.15	1173.15	1	1
Manufacturer#1	almond antique burnished rose metallic	1173.15	2	1	1	1173.15	1173.15	2	2
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3	3	2	1173.15	1753.76	3	3
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	4	3	2	1173.15	1753.76	4	4
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	5	3	2	1173.15	1753.76	5	5
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	6	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	7	7	3	1173.15	1602.59	7	7
Manufacturer#1	almond aquamarine burnished black steel	1414.42	8	8	4	1173.15	1414.42	8	8
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	9	9	5	1173.15	1632.66	9	9
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	10	9	5	1173.15	NULL	9	10
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	11	9	5	1173.15	1632.66	10	11
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	12	9	5	1173.15	1632.66	11	12
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1	1	1	1690.68	1690.68	1	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	2	2	2	1690.68	1800.7	2	2
Manufacturer#2	almond antique violet turquoise frosted	1800.7	3	2	2	1690.68	1800.7	3	3
Manufacturer#2	almond antique violet turquoise frosted	1800.7	4	2	2	1690.68	1800.7	4	4
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	5	5	3	1690.68	2031.98	5	5
Manufacturer#2	almond aquamarine rose maroon antique	900.66	6	6	4	1690.68	900.66	6	6
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	7	6	4	1690.68	1698.66	7	7
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	8	8	5	1690.68	1000.6	8	8
Manufacturer#3	almond antique chartreuse khaki white	99.68	1	1	1	99.68	99.68	1	1
Manufacturer#3	almond antique forest lavender goldenrod	590.27	2	2	2	99.68	590.27	2	2
Manufacturer#3	almond antique forest lavender goldenrod	NULL	3	2	2	99.68	NULL	2	3
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	4	2	2	99.68	1190.27	3	4
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	5	2	2	99.68	1190.27	4	5
Manufacturer#3	almond antique metallic orange dim	55.39	6	6	3	99.68	55.39	5	6
Manufacturer#3	almond antique misty red olive	1922.98	7	7	4	99.68	1922.98	6	7
Manufacturer#3	almond antique olive coral navajo	1337.29	8	8	5	99.68	1337.29	7	8
Manufacturer#4	almond antique gainsboro frosted violet	NULL	1	1	1	NULL	NULL	0	1
Manufacturer#4	almond antique violet mint lemon	1375.42	2	2	2	NULL	1375.42	1	2
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	3	3	3	NULL	NULL	1	3
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	4	3	3	NULL	1206.26	2	4
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	5	5	4	NULL	1844.92	3	5
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	6	6	5	NULL	1290.35	4	6
Manufacturer#5	almond antique blue firebrick mint	1789.69	1	1	1	1789.69	1789.69	1	1
Manufacturer#5	almond antique medium spring khaki	1611.66	2	2	2	1789.69	1611.66	2	2
Manufacturer#5	almond antique medium spring khaki	1611.66	3	2	2	1789.69	1611.66	3	3
Manufacturer#5	almond antique sky peru orange	1788.73	4	4	3	1789.69	1788.73	4	4
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	5	5	4	1789.69	1018.1	5	5
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	6	6	5	1789.69	1464.48	6	6
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(order by p_name) as rn,
rank() over(order by p_name) as r,
dense_rank() over(order by p_name) as dr,
first_value(p_retailprice) over(order by p_name) as fv,
last_value(p_retailprice) over(order by p_name) as lv,
count(p_retailprice) over(order by p_name) as c,
count(*) over(order by p_name) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(order by p_name) as rn,
rank() over(order by p_name) as r,
dense_rank() over(order by p_name) as dr,
first_value(p_retailprice) over(order by p_name) as fv,
last_value(p_retailprice) over(order by p_name) as lv,
count(p_retailprice) over(order by p_name) as c,
count(*) over(order by p_name) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: 0 (type: int), p_name (type: string)
                    sort order: ++
                    Map-reduce partition columns: 0 (type: int)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [4, 1]
                        keyExpressions: ConstantVectorExpression(val 0) -> 4:int
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [5]
                        valueColumnNums: [0, 2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_mfgr (type: string), p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, bigint]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: aa
                reduceColumnSortOrder: ++
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 4
                    dataColumns: KEY.reducesinkkey0:int, KEY.reducesinkkey1:string, VALUE._col0:string, VALUE._col1:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, bigint, bigint, double, double, bigint, bigint, bigint]
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col1 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [2, 1, 3]
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: 0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: row_number_window_0
                              name: row_number
                              window function: GenericUDAFRowNumberEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: rank_window_1
                              arguments: _col1
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: dense_rank_window_2
                              arguments: _col1
                              name: dense_rank
                              window function: GenericUDAFDenseRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: first_value_window_3
                              arguments: _col2
                              name: first_value
                              window function: GenericUDAFFirstValueEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: last_value_window_4
                              arguments: _col2
                              name: last_value
                              window function: GenericUDAFLastValueEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: count_window_5
                              arguments: _col2
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: count_window_6
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                              isStar: true
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorRowNumber, VectorPTFEvaluatorRank, VectorPTFEvaluatorDenseRank, VectorPTFEvaluatorDoubleFirstValue, VectorPTFEvaluatorDoubleLastValue, VectorPTFEvaluatorCount, VectorPTFEvaluatorCountStar]
                      functionInputExpressions: [null, col 1:string, col 1:string, col 3:double, col 3:double, col 3:double, null]
                      functionNames: [row_number, rank, dense_rank, first_value, last_value, count, count]
                      keyInputColumns: [1]
                      native: true
                      nonKeyInputColumns: [2, 3]
                      orderExpressions: [col 1:string]
                      outputColumns: [4, 5, 6, 7, 8, 9, 10, 2, 1, 3]
                      outputTypes: [int, int, int, double, double, bigint, bigint, string, string, double]
                      partitionExpressions: [ConstantVectorExpression(val 0) -> 11:int]
                      streamingColumns: [4, 5, 6, 7]
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), row_number_window_0 (type: int), rank_window_1 (type: int), dense_rank_window_2 (type: int), first_value_window_3 (type: double), last_value_window_4 (type: double), count_window_5 (type: bigint), count_window_6 (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [2, 1, 3, 4, 5, 6, 7, 8, 9, 10]
                    Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(order by p_name) as rn,
rank() over(order by p_name) as r,
dense_rank() over(order by p_name) as dr,
first_value(p_retailprice) over(order by p_name) as fv,
last_value(p_retailprice) over(order by p_name) as lv,
count(p_retailprice) over(order by p_name) as c,
count(*) over(order by p_name) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(order by p_name) as rn,
rank() over(order by p_name) as r,
dense_rank() over(order by p_name) as dr,
first_value(p_retailprice) over(order by p_name) as fv,
last_value(p_retailprice) over(order by p_name) as lv,
count(p_retailprice) over(order by p_name) as c,
count(*) over(order by p_name) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	rn	r	dr	fv	lv	c	cs
Manufacturer#5	almond antique blue firebrick mint	1789.69	1	1	1	1789.69	1789.69	1	1
Manufacturer#1	almond antique burnished rose metallic	1173.15	2	2	2	1789.69	1173.15	3	3
Manufacturer#1	almond antique burnished rose metallic	1173.15	3	2	2	1789.69	1173.15	3	3
Manufacturer#3	almond antique chartreuse khaki white	99.68	4	4	3	1789.69	99.68	4	4
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	5	5	4	1789.69	1753.76	8	8
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	6	5	4	1789.69	1753.76	8	8
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	7	5	4	1789.69	1753.76	8	8
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	8	5	4	1789.69	1753.76	8	8
Manufacturer#3	almond antique forest lavender goldenrod	NULL	9	9	5	1789.69	1190.27	11	12
Manufacturer#3	almond antique forest lavender goldenrod	590.27	10	9	5	1789.69	1190.27	11	12
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	11	9	5	1789.69	1190.27	11	12
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	12	9	5	1789.69	1190.27	11	12
Manufacturer#4	almond antique gainsboro frosted violet	NULL	13	13	6	1789.69	NULL	11	13
Manufacturer#5	almond antique medium spring khaki	1611.66	14	14	7	1789.69	1611.66	13	15
Manufacturer#5	almond antique medium spring khaki	1611.66	15	14	7	1789.69	1611.66	13	15
Manufacturer#3	almond antique metallic orange dim	55.39	16	16	8	1789.69	55.39	14	16
Manufacturer#3	almond antique misty red olive	1922.98	17	17	9	1789.69	1922.98	15	17
Manufacturer#3	almond antique olive coral navajo	1337.29	18	18	10	1789.69	1337.29	16	18
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	19	19	11	1789.69	1602.59	17	19
Manufacturer#5	almond antique sky peru orange	1788.73	20	20	12	1789.69	1788.73	18	20
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	21	21	13	1789.69	1690.68	19	21
Manufacturer#4	almond antique violet mint lemon	1375.42	22	22	14	1789.69	1375.42	20	22
Manufacturer#2	almond antique violet turquoise frosted	1800.7	23	23	15	1789.69	1800.7	23	25
Manufacturer#2	almond antique violet turquoise frosted	1800.7	24	23	15	1789.69	1800.7	23	25
Manufacturer#2	almond antique violet turquoise frosted	1800.7	25	23	15	1789.69	1800.7	23	25
Manufacturer#1	almond aquamarine burnished black steel	1414.42	26	26	16	1789.69	1414.42	24	26
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	27	27	17	1789.69	1018.1	25	27
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	28	28	18	1789.69	NULL	26	29
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	29	28	18	1789.69	NULL	26	29
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	30	30	19	1789.69	2031.98	27	30
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	31	31	20	1789.69	1632.66	30	34
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	32	31	20	1789.69	1632.66	30	34
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	33	31	20	1789.69	1632.66	30	34
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	34	31	20	1789.69	1632.66	30	34
Manufacturer#2	almond aquamarine rose maroon antique	900.66	35	35	21	1789.69	1698.66	32	36
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	36	35	21	1789.69	1698.66	32	36
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	37	37	22	1789.69	1000.6	33	37
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	38	38	23	1789.69	1844.92	34	38
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	39	39	24	1789.69	1290.35	35	39
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	40	40	25	1789.69	1464.48	36	40
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(order by p_name range between unbounded preceding and unbounded following) as rn,
rank() over(order by p_name range between unbounded preceding and unbounded following) as r,
dense_rank() over(order by p_name range between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(order by p_name range between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(order by p_name range between unbounded preceding and current row) as lv,
count(p_retailprice) over(order by p_name range between unbounded preceding and current row) as c,
count(*) over(order by p_name range between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(order by p_name range between unbounded preceding and unbounded following) as rn,
rank() over(order by p_name range between unbounded preceding and unbounded following) as r,
dense_rank() over(order by p_name range between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(order by p_name range between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(order by p_name range between unbounded preceding and current row) as lv,
count(p_retailprice) over(order by p_name range between unbounded preceding and current row) as c,
count(*) over(order by p_name range between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: 0 (type: int), p_name (type: string)
                    sort order: ++
                    Map-reduce partition columns: 0 (type: int)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [4, 1]
                        keyExpressions: ConstantVectorExpression(val 0) -> 4:int
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [5]
                        valueColumnNums: [0, 2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_mfgr (type: string), p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, bigint]
        Reducer 2 
            Execution mode: llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                notVectorizedReason: PTF operator: row_number only CURRENT ROW end frame is supported for RANGE
                vectorized: false
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col1 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: 0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: row_number_window_0
                              name: row_number
                              window function: GenericUDAFRowNumberEvaluator
                              window frame: RANGE PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: rank_window_1
                              arguments: _col1
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: RANGE PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: dense_rank_window_2
                              arguments: _col1
                              name: dense_rank
                              window function: GenericUDAFDenseRankEvaluator
                              window frame: RANGE PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: first_value_window_3
                              arguments: _col2
                              name: first_value
                              window function: GenericUDAFFirstValueEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: last_value_window_4
                              arguments: _col2
                              name: last_value
                              window function: GenericUDAFLastValueEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: count_window_5
                              arguments: _col2
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: count_window_6
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                              isStar: true
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), row_number_window_0 (type: int), rank_window_1 (type: int), dense_rank_window_2 (type: int), first_value_window_3 (type: double), last_value_window_4 (type: double), count_window_5 (type: bigint), count_window_6 (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                    Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(order by p_name range between unbounded preceding and unbounded following) as rn,
rank() over(order by p_name range between unbounded preceding and unbounded following) as r,
dense_rank() over(order by p_name range between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(order by p_name range between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(order by p_name range between unbounded preceding and current row) as lv,
count(p_retailprice) over(order by p_name range between unbounded preceding and current row) as c,
count(*) over(order by p_name range between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(order by p_name range between unbounded preceding and unbounded following) as rn,
rank() over(order by p_name range between unbounded preceding and unbounded following) as r,
dense_rank() over(order by p_name range between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(order by p_name range between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(order by p_name range between unbounded preceding and current row) as lv,
count(p_retailprice) over(order by p_name range between unbounded preceding and current row) as c,
count(*) over(order by p_name range between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	rn	r	dr	fv	lv	c	cs
Manufacturer#5	almond antique blue firebrick mint	1789.69	1	1	1	1789.69	1789.69	1	1
Manufacturer#1	almond antique burnished rose metallic	1173.15	2	2	2	1789.69	1173.15	3	3
Manufacturer#1	almond antique burnished rose metallic	1173.15	3	2	2	1789.69	1173.15	3	3
Manufacturer#3	almond antique chartreuse khaki white	99.68	4	4	3	1789.69	99.68	4	4
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	5	5	4	1789.69	1753.76	8	8
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	6	5	4	1789.69	1753.76	8	8
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	7	5	4	1789.69	1753.76	8	8
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	8	5	4	1789.69	1753.76	8	8
Manufacturer#3	almond antique forest lavender goldenrod	NULL	9	9	5	1789.69	1190.27	11	12
Manufacturer#3	almond antique forest lavender goldenrod	590.27	10	9	5	1789.69	1190.27	11	12
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	11	9	5	1789.69	1190.27	11	12
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	12	9	5	1789.69	1190.27	11	12
Manufacturer#4	almond antique gainsboro frosted violet	NULL	13	13	6	1789.69	NULL	11	13
Manufacturer#5	almond antique medium spring khaki	1611.66	14	14	7	1789.69	1611.66	13	15
Manufacturer#5	almond antique medium spring khaki	1611.66	15	14	7	1789.69	1611.66	13	15
Manufacturer#3	almond antique metallic orange dim	55.39	16	16	8	1789.69	55.39	14	16
Manufacturer#3	almond antique misty red olive	1922.98	17	17	9	1789.69	1922.98	15	17
Manufacturer#3	almond antique olive coral navajo	1337.29	18	18	10	1789.69	1337.29	16	18
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	19	19	11	1789.69	1602.59	17	19
Manufacturer#5	almond antique sky peru orange	1788.73	20	20	12	1789.69	1788.73	18	20
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	21	21	13	1789.69	1690.68	19	21
Manufacturer#4	almond antique violet mint lemon	1375.42	22	22	14	1789.69	1375.42	20	22
Manufacturer#2	almond antique violet turquoise frosted	1800.7	23	23	15	1789.69	1800.7	23	25
Manufacturer#2	almond antique violet turquoise frosted	1800.7	24	23	15	1789.69	1800.7	23	25
Manufacturer#2	almond antique violet turquoise frosted	1800.7	25	23	15	1789.69	1800.7	23	25
Manufacturer#1	almond aquamarine burnished black steel	1414.42	26	26	16	1789.69	1414.42	24	26
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	27	27	17	1789.69	1018.1	25	27
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	28	28	18	1789.69	NULL	26	29
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	29	28	18	1789.69	NULL	26	29
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	30	30	19	1789.69	2031.98	27	30
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	31	31	20	1789.69	1632.66	30	34
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	32	31	20	1789.69	1632.66	30	34
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	33	31	20	1789.69	1632.66	30	34
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	34	31	20	1789.69	1632.66	30	34
Manufacturer#2	almond aquamarine rose maroon antique	900.66	35	35	21	1789.69	1698.66	32	36
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	36	35	21	1789.69	1698.66	32	36
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	37	37	22	1789.69	1000.6	33	37
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	38	38	23	1789.69	1844.92	34	38
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	39	39	24	1789.69	1290.35	35	39
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	40	40	25	1789.69	1464.48	36	40
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(order by p_name rows between unbounded preceding and unbounded following) as rn,
rank() over(order by p_name rows between unbounded preceding and unbounded following) as r,
dense_rank() over(order by p_name rows between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as lv,
count(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as c,
count(*) over(order by p_name rows between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(order by p_name rows between unbounded preceding and unbounded following) as rn,
rank() over(order by p_name rows between unbounded preceding and unbounded following) as r,
dense_rank() over(order by p_name rows between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as lv,
count(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as c,
count(*) over(order by p_name rows between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: 0 (type: int), p_name (type: string)
                    sort order: ++
                    Map-reduce partition columns: 0 (type: int)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [4, 1]
                        keyExpressions: ConstantVectorExpression(val 0) -> 4:int
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [5]
                        valueColumnNums: [0, 2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_mfgr (type: string), p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, bigint]
        Reducer 2 
            Execution mode: llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                notVectorizedReason: PTF operator: first_value UNBOUNDED end frame is not supported for ROWS window type
                vectorized: false
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col1 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: 0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: row_number_window_0
                              name: row_number
                              window function: GenericUDAFRowNumberEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: rank_window_1
                              arguments: _col1
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: dense_rank_window_2
                              arguments: _col1
                              name: dense_rank
                              window function: GenericUDAFDenseRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: first_value_window_3
                              arguments: _col2
                              name: first_value
                              window function: GenericUDAFFirstValueEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: last_value_window_4
                              arguments: _col2
                              name: last_value
                              window function: GenericUDAFLastValueEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: count_window_5
                              arguments: _col2
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: count_window_6
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                              isStar: true
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), row_number_window_0 (type: int), rank_window_1 (type: int), dense_rank_window_2 (type: int), first_value_window_3 (type: double), last_value_window_4 (type: double), count_window_5 (type: bigint), count_window_6 (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                    Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 40 Data size: 10824 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(order by p_name rows between unbounded preceding and unbounded following) as rn,
rank() over(order by p_name rows between unbounded preceding and unbounded following) as r,
dense_rank() over(order by p_name rows between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as lv,
count(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as c,
count(*) over(order by p_name rows between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(order by p_name rows between unbounded preceding and unbounded following) as rn,
rank() over(order by p_name rows between unbounded preceding and unbounded following) as r,
dense_rank() over(order by p_name rows between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as lv,
count(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as c,
count(*) over(order by p_name rows between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	rn	r	dr	fv	lv	c	cs
Manufacturer#5	almond antique blue firebrick mint	1789.69	1	1	1	1789.69	1789.69	1	1
Manufacturer#1	almond antique burnished rose metallic	1173.15	2	2	2	1789.69	1173.15	2	2
Manufacturer#1	almond antique burnished rose metallic	1173.15	3	2	2	1789.69	1173.15	3	3
Manufacturer#3	almond antique chartreuse khaki white	99.68	4	4	3	1789.69	99.68	4	4
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	5	5	4	1789.69	1753.76	5	5
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	6	5	4	1789.69	1753.76	6	6
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	7	5	4	1789.69	1753.76	7	7
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	8	5	4	1789.69	1753.76	8	8
Manufacturer#3	almond antique forest lavender goldenrod	NULL	9	9	5	1789.69	NULL	8	9
Manufacturer#3	almond antique forest lavender goldenrod	590.27	10	9	5	1789.69	590.27	9	10
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	11	9	5	1789.69	1190.27	10	11
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	12	9	5	1789.69	1190.27	11	12
Manufacturer#4	almond antique gainsboro frosted violet	NULL	13	13	6	1789.69	NULL	11	13
Manufacturer#5	almond antique medium spring khaki	1611.66	14	14	7	1789.69	1611.66	12	14
Manufacturer#5	almond antique medium spring khaki	1611.66	15	14	7	1789.69	1611.66	13	15
Manufacturer#3	almond antique metallic orange dim	55.39	16	16	8	1789.69	55.39	14	16
Manufacturer#3	almond antique misty red olive	1922.98	17	17	9	1789.69	1922.98	15	17
Manufacturer#3	almond antique olive coral navajo	1337.29	18	18	10	1789.69	1337.29	16	18
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	19	19	11	1789.69	1602.59	17	19
Manufacturer#5	almond antique sky peru orange	1788.73	20	20	12	1789.69	1788.73	18	20
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	21	21	13	1789.69	1690.68	19	21
Manufacturer#4	almond antique violet mint lemon	1375.42	22	22	14	1789.69	1375.42	20	22
Manufacturer#2	almond antique violet turquoise frosted	1800.7	23	23	15	1789.69	1800.7	21	23
Manufacturer#2	almond antique violet turquoise frosted	1800.7	24	23	15	1789.69	1800.7	22	24
Manufacturer#2	almond antique violet turquoise frosted	1800.7	25	23	15	1789.69	1800.7	23	25
Manufacturer#1	almond aquamarine burnished black steel	1414.42	26	26	16	1789.69	1414.42	24	26
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	27	27	17	1789.69	1018.1	25	27
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	28	28	18	1789.69	1206.26	26	28
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	29	28	18	1789.69	NULL	26	29
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	30	30	19	1789.69	2031.98	27	30
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	31	31	20	1789.69	1632.66	28	31
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	32	31	20	1789.69	1632.66	29	32
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	33	31	20	1789.69	NULL	29	33
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	34	31	20	1789.69	1632.66	30	34
Manufacturer#2	almond aquamarine rose maroon antique	900.66	35	35	21	1789.69	900.66	31	35
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	36	35	21	1789.69	1698.66	32	36
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	37	37	22	1789.69	1000.6	33	37
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	38	38	23	1789.69	1844.92	34	38
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	39	39	24	1789.69	1290.35	35	39
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	40	40	25	1789.69	1464.48	36	40
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr) as s,
min(p_retailprice) over(partition by p_mfgr) as mi,
max(p_retailprice) over(partition by p_mfgr) as ma,
avg(p_retailprice) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr) as s,
min(p_retailprice) over(partition by p_mfgr) as mi,
max(p_retailprice) over(partition by p_mfgr) as ma,
avg(p_retailprice) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string)
                    sort order: +
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkStringOperator
                        keyColumnNums: [0]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        valueColumnNums: [1, 2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_name (type: string), p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    dataColumns: KEY.reducesinkkey0:string, VALUE._col0:string, VALUE._col1:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [double, double, double, double]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2]
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: sum_window_0
                              arguments: _col2
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                            window function definition
                              alias: min_window_1
                              arguments: _col2
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                            window function definition
                              alias: max_window_2
                              arguments: _col2
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                            window function definition
                              alias: avg_window_3
                              arguments: _col2
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorDoubleSum, VectorPTFEvaluatorDoubleMin, VectorPTFEvaluatorDoubleMax, VectorPTFEvaluatorDoubleAvg]
                      functionInputExpressions: [col 2:double, col 2:double, col 2:double, col 2:double]
                      functionNames: [sum, min, max, avg]
                      keyInputColumns: [0]
                      native: true
                      nonKeyInputColumns: [1, 2]
                      orderExpressions: [col 0:string]
                      outputColumns: [3, 4, 5, 6, 0, 1, 2]
                      outputTypes: [double, double, double, double, string, string, double]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), sum_window_0 (type: double), min_window_1 (type: double), max_window_2 (type: double), avg_window_3 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6]
                    Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr) as s,
min(p_retailprice) over(partition by p_mfgr) as mi,
max(p_retailprice) over(partition by p_mfgr) as ma,
avg(p_retailprice) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr) as s,
min(p_retailprice) over(partition by p_mfgr) as mi,
max(p_retailprice) over(partition by p_mfgr) as ma,
avg(p_retailprice) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	s	mi	ma	av
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#4	almond antique violet mint lemon	1375.42	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#4	almond antique gainsboro frosted violet	NULL	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#5	almond antique medium spring khaki	1611.66	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#5	almond antique blue firebrick mint	1789.69	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#5	almond antique medium spring khaki	1611.66	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#5	almond antique sky peru orange	1788.73	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#2	almond aquamarine rose maroon antique	900.66	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond antique violet turquoise frosted	1800.7	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond antique violet turquoise frosted	1800.7	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond antique violet turquoise frosted	1800.7	12724.68	900.66	2031.98	1590.585
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine burnished black steel	1414.42	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique burnished rose metallic	1173.15	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique burnished rose metallic	1173.15	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#3	almond antique forest lavender goldenrod	590.27	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#3	almond antique metallic orange dim	55.39	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#3	almond antique olive coral navajo	1337.29	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#3	almond antique misty red olive	1922.98	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#3	almond antique forest lavender goldenrod	NULL	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#3	almond antique chartreuse khaki white	99.68	6386.15	55.39	1922.98	912.3071428571428
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string)
                    sort order: +
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkStringOperator
                        keyColumnNums: [0]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        valueColumnNums: [1, 2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_name (type: string), p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    dataColumns: KEY.reducesinkkey0:string, VALUE._col0:string, VALUE._col1:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [double, double, double, double]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2]
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: sum_window_0
                              arguments: _col2
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: min_window_1
                              arguments: _col2
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: max_window_2
                              arguments: _col2
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: avg_window_3
                              arguments: _col2
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorDoubleSum, VectorPTFEvaluatorDoubleMin, VectorPTFEvaluatorDoubleMax, VectorPTFEvaluatorDoubleAvg]
                      functionInputExpressions: [col 2:double, col 2:double, col 2:double, col 2:double]
                      functionNames: [sum, min, max, avg]
                      keyInputColumns: [0]
                      native: true
                      nonKeyInputColumns: [1, 2]
                      orderExpressions: [col 0:string]
                      outputColumns: [3, 4, 5, 6, 0, 1, 2]
                      outputTypes: [double, double, double, double, string, string, double]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), sum_window_0 (type: double), min_window_1 (type: double), max_window_2 (type: double), avg_window_3 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6]
                    Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr range between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	s	mi	ma	av
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#4	almond antique violet mint lemon	1375.42	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#4	almond antique gainsboro frosted violet	NULL	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#5	almond antique medium spring khaki	1611.66	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#5	almond antique blue firebrick mint	1789.69	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#5	almond antique medium spring khaki	1611.66	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#5	almond antique sky peru orange	1788.73	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#2	almond aquamarine rose maroon antique	900.66	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond antique violet turquoise frosted	1800.7	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond antique violet turquoise frosted	1800.7	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond antique violet turquoise frosted	1800.7	12724.68	900.66	2031.98	1590.585
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine burnished black steel	1414.42	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique burnished rose metallic	1173.15	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique burnished rose metallic	1173.15	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#3	almond antique forest lavender goldenrod	590.27	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#3	almond antique metallic orange dim	55.39	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#3	almond antique olive coral navajo	1337.29	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#3	almond antique misty red olive	1922.98	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#3	almond antique forest lavender goldenrod	NULL	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#3	almond antique chartreuse khaki white	99.68	6386.15	55.39	1922.98	912.3071428571428
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string)
                    sort order: +
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkStringOperator
                        keyColumnNums: [0]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        valueColumnNums: [1, 2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_name (type: string), p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                notVectorizedReason: PTF operator: sum UNBOUNDED end frame is not supported for ROWS window type
                vectorized: false
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: sum_window_0
                              arguments: _col2
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: min_window_1
                              arguments: _col2
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: max_window_2
                              arguments: _col2
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: avg_window_3
                              arguments: _col2
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), sum_window_0 (type: double), min_window_1 (type: double), max_window_2 (type: double), avg_window_3 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                    Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr rows between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	s	mi	ma	av
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	1290.35	1290.35	1290.35	1290.35
Manufacturer#4	almond antique violet mint lemon	1375.42	2665.77	1290.35	1375.42	1332.885
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	2665.77	1290.35	1375.42	1332.885
Manufacturer#4	almond antique gainsboro frosted violet	NULL	2665.77	1290.35	1375.42	1332.885
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	4510.6900000000005	1290.35	1844.92	1503.5633333333335
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	1464.48	1464.48	1464.48	1464.48
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	2482.58	1018.1	1464.48	1241.29
Manufacturer#5	almond antique medium spring khaki	1611.66	4094.24	1018.1	1611.66	1364.7466666666667
Manufacturer#5	almond antique blue firebrick mint	1789.69	5883.93	1018.1	1789.69	1470.9825
Manufacturer#5	almond antique medium spring khaki	1611.66	7495.59	1018.1	1789.69	1499.118
Manufacturer#5	almond antique sky peru orange	1788.73	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#2	almond aquamarine rose maroon antique	900.66	900.66	900.66	900.66	900.66
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	2599.32	900.66	1698.66	1299.66
Manufacturer#2	almond antique violet turquoise frosted	1800.7	4400.02	900.66	1800.7	1466.6733333333334
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	6090.700000000001	900.66	1800.7	1522.6750000000002
Manufacturer#2	almond antique violet turquoise frosted	1800.7	7891.400000000001	900.66	1800.7	1578.2800000000002
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	8892.0	900.66	1800.7	1482.0
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	10923.98	900.66	2031.98	1560.5685714285714
Manufacturer#2	almond antique violet turquoise frosted	1800.7	12724.68	900.66	2031.98	1590.585
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1753.76	1753.76	1753.76	1753.76
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	3386.42	1632.66	1753.76	1693.21
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	5019.08	1632.66	1753.76	1673.0266666666666
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	6772.84	1632.66	1753.76	1693.21
Manufacturer#1	almond aquamarine burnished black steel	1414.42	8187.26	1414.42	1753.76	1637.452
Manufacturer#1	almond antique burnished rose metallic	1173.15	9360.41	1173.15	1753.76	1560.0683333333334
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	10963.0	1173.15	1753.76	1566.142857142857
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	12716.76	1173.15	1753.76	1589.595
Manufacturer#1	almond antique burnished rose metallic	1173.15	13889.91	1173.15	1753.76	1543.3233333333333
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	15643.67	1173.15	1753.76	1564.367
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	15643.67	1173.15	1753.76	1564.367
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#3	almond antique forest lavender goldenrod	590.27	590.27	590.27	590.27	590.27
Manufacturer#3	almond antique metallic orange dim	55.39	645.66	55.39	590.27	322.83
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	1835.9299999999998	55.39	1190.27	611.9766666666666
Manufacturer#3	almond antique olive coral navajo	1337.29	3173.22	55.39	1337.29	793.305
Manufacturer#3	almond antique misty red olive	1922.98	5096.2	55.39	1922.98	1019.24
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	6286.469999999999	55.39	1922.98	1047.745
Manufacturer#3	almond antique forest lavender goldenrod	NULL	6286.469999999999	55.39	1922.98	1047.745
Manufacturer#3	almond antique chartreuse khaki white	99.68	6386.15	55.39	1922.98	912.3071428571428
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), p_name (type: string)
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [0, 1]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [0]
                        valueColumnNums: [2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: aa
                reduceColumnSortOrder: ++
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    dataColumns: KEY.reducesinkkey0:string, KEY.reducesinkkey1:string, VALUE._col0:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [double, double, double, double]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2]
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: sum_window_0
                              arguments: _col2
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: min_window_1
                              arguments: _col2
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: max_window_2
                              arguments: _col2
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: avg_window_3
                              arguments: _col2
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorDoubleSum, VectorPTFEvaluatorDoubleMin, VectorPTFEvaluatorDoubleMax, VectorPTFEvaluatorDoubleAvg]
                      functionInputExpressions: [col 2:double, col 2:double, col 2:double, col 2:double]
                      functionNames: [sum, min, max, avg]
                      keyInputColumns: [0, 1]
                      native: true
                      nonKeyInputColumns: [2]
                      orderExpressions: [col 1:string]
                      outputColumns: [3, 4, 5, 6, 0, 1, 2]
                      outputTypes: [double, double, double, double, string, string, double]
                      partitionExpressions: [col 0:string]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), sum_window_0 (type: double), min_window_1 (type: double), max_window_2 (type: double), avg_window_3 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6]
                    Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	s	mi	ma	av
Manufacturer#1	almond antique burnished rose metallic	1173.15	2346.3	1173.15	1173.15	1173.15
Manufacturer#1	almond antique burnished rose metallic	1173.15	2346.3	1173.15	1173.15	1173.15
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	10963.93	1173.15	1753.76	1566.2757142857142
Manufacturer#1	almond aquamarine burnished black steel	1414.42	12378.35	1173.15	1753.76	1547.29375
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1690.68	1690.68	1690.68	1690.68
Manufacturer#2	almond antique violet turquoise frosted	1800.7	7092.780000000001	1690.68	1800.7	1773.1950000000002
Manufacturer#2	almond antique violet turquoise frosted	1800.7	7092.780000000001	1690.68	1800.7	1773.1950000000002
Manufacturer#2	almond antique violet turquoise frosted	1800.7	7092.780000000001	1690.68	1800.7	1773.1950000000002
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	9124.76	1690.68	2031.98	1824.952
Manufacturer#2	almond aquamarine rose maroon antique	900.66	11724.08	900.66	2031.98	1674.8685714285714
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	11724.08	900.66	2031.98	1674.8685714285714
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	12724.68	900.66	2031.98	1590.585
Manufacturer#3	almond antique chartreuse khaki white	99.68	99.68	99.68	99.68	99.68
Manufacturer#3	almond antique forest lavender goldenrod	590.27	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique forest lavender goldenrod	NULL	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique metallic orange dim	55.39	3125.8799999999997	55.39	1190.27	625.1759999999999
Manufacturer#3	almond antique misty red olive	1922.98	5048.86	55.39	1922.98	841.4766666666666
Manufacturer#3	almond antique olive coral navajo	1337.29	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#4	almond antique gainsboro frosted violet	NULL	NULL	NULL	NULL	NULL
Manufacturer#4	almond antique violet mint lemon	1375.42	1375.42	1375.42	1375.42	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	2581.6800000000003	1206.26	1375.42	1290.8400000000001
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	2581.6800000000003	1206.26	1375.42	1290.8400000000001
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	4426.6	1206.26	1844.92	1475.5333333333335
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#5	almond antique blue firebrick mint	1789.69	1789.69	1789.69	1789.69	1789.69
Manufacturer#5	almond antique medium spring khaki	1611.66	5013.01	1611.66	1789.69	1671.0033333333333
Manufacturer#5	almond antique medium spring khaki	1611.66	5013.01	1611.66	1789.69	1671.0033333333333
Manufacturer#5	almond antique sky peru orange	1788.73	6801.74	1611.66	1789.69	1700.435
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	7819.84	1018.1	1789.69	1563.968
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	9284.32	1018.1	1789.69	1547.3866666666665
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), p_name (type: string)
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [0, 1]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [0]
                        valueColumnNums: [2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: aa
                reduceColumnSortOrder: ++
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    dataColumns: KEY.reducesinkkey0:string, KEY.reducesinkkey1:string, VALUE._col0:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [double, double, double, double]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2]
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: sum_window_0
                              arguments: _col2
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: min_window_1
                              arguments: _col2
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: max_window_2
                              arguments: _col2
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: avg_window_3
                              arguments: _col2
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorDoubleSum, VectorPTFEvaluatorDoubleMin, VectorPTFEvaluatorDoubleMax, VectorPTFEvaluatorDoubleAvg]
                      functionInputExpressions: [col 2:double, col 2:double, col 2:double, col 2:double]
                      functionNames: [sum, min, max, avg]
                      keyInputColumns: [0, 1]
                      native: true
                      nonKeyInputColumns: [2]
                      orderExpressions: [col 1:string]
                      outputColumns: [3, 4, 5, 6, 0, 1, 2]
                      outputTypes: [double, double, double, double, string, string, double]
                      partitionExpressions: [col 0:string]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), sum_window_0 (type: double), min_window_1 (type: double), max_window_2 (type: double), avg_window_3 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6]
                    Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	s	mi	ma	av
Manufacturer#1	almond antique burnished rose metallic	1173.15	2346.3	1173.15	1173.15	1173.15
Manufacturer#1	almond antique burnished rose metallic	1173.15	2346.3	1173.15	1173.15	1173.15
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	10963.93	1173.15	1753.76	1566.2757142857142
Manufacturer#1	almond aquamarine burnished black steel	1414.42	12378.35	1173.15	1753.76	1547.29375
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1690.68	1690.68	1690.68	1690.68
Manufacturer#2	almond antique violet turquoise frosted	1800.7	7092.780000000001	1690.68	1800.7	1773.1950000000002
Manufacturer#2	almond antique violet turquoise frosted	1800.7	7092.780000000001	1690.68	1800.7	1773.1950000000002
Manufacturer#2	almond antique violet turquoise frosted	1800.7	7092.780000000001	1690.68	1800.7	1773.1950000000002
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	9124.76	1690.68	2031.98	1824.952
Manufacturer#2	almond aquamarine rose maroon antique	900.66	11724.08	900.66	2031.98	1674.8685714285714
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	11724.08	900.66	2031.98	1674.8685714285714
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	12724.68	900.66	2031.98	1590.585
Manufacturer#3	almond antique chartreuse khaki white	99.68	99.68	99.68	99.68	99.68
Manufacturer#3	almond antique forest lavender goldenrod	590.27	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique forest lavender goldenrod	NULL	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique metallic orange dim	55.39	3125.8799999999997	55.39	1190.27	625.1759999999999
Manufacturer#3	almond antique misty red olive	1922.98	5048.86	55.39	1922.98	841.4766666666666
Manufacturer#3	almond antique olive coral navajo	1337.29	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#4	almond antique gainsboro frosted violet	NULL	NULL	NULL	NULL	NULL
Manufacturer#4	almond antique violet mint lemon	1375.42	1375.42	1375.42	1375.42	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	2581.6800000000003	1206.26	1375.42	1290.8400000000001
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	2581.6800000000003	1206.26	1375.42	1290.8400000000001
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	4426.6	1206.26	1844.92	1475.5333333333335
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#5	almond antique blue firebrick mint	1789.69	1789.69	1789.69	1789.69	1789.69
Manufacturer#5	almond antique medium spring khaki	1611.66	5013.01	1611.66	1789.69	1671.0033333333333
Manufacturer#5	almond antique medium spring khaki	1611.66	5013.01	1611.66	1789.69	1671.0033333333333
Manufacturer#5	almond antique sky peru orange	1788.73	6801.74	1611.66	1789.69	1700.435
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	7819.84	1018.1	1789.69	1563.968
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	9284.32	1018.1	1789.69	1547.3866666666665
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), p_name (type: string)
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [0, 1]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [0]
                        valueColumnNums: [2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                notVectorizedReason: PTF operator: sum UNBOUNDED end frame is not supported for ROWS window type
                vectorized: false
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: sum_window_0
                              arguments: _col2
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: min_window_1
                              arguments: _col2
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: max_window_2
                              arguments: _col2
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: avg_window_3
                              arguments: _col2
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), sum_window_0 (type: double), min_window_1 (type: double), max_window_2 (type: double), avg_window_3 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                    Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	s	mi	ma	av
Manufacturer#1	almond antique burnished rose metallic	1173.15	1173.15	1173.15	1173.15	1173.15
Manufacturer#1	almond antique burnished rose metallic	1173.15	2346.3	1173.15	1173.15	1173.15
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	4100.06	1173.15	1753.76	1366.6866666666667
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	5853.820000000001	1173.15	1753.76	1463.4550000000002
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	7607.580000000001	1173.15	1753.76	1521.516
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	10963.93	1173.15	1753.76	1566.2757142857142
Manufacturer#1	almond aquamarine burnished black steel	1414.42	12378.35	1173.15	1753.76	1547.29375
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	14011.01	1173.15	1753.76	1556.778888888889
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	14011.01	1173.15	1753.76	1556.778888888889
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	15643.67	1173.15	1753.76	1564.367
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1690.68	1690.68	1690.68	1690.68
Manufacturer#2	almond antique violet turquoise frosted	1800.7	3491.38	1690.68	1800.7	1745.69
Manufacturer#2	almond antique violet turquoise frosted	1800.7	5292.08	1690.68	1800.7	1764.0266666666666
Manufacturer#2	almond antique violet turquoise frosted	1800.7	7092.78	1690.68	1800.7	1773.195
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	9124.76	1690.68	2031.98	1824.952
Manufacturer#2	almond aquamarine rose maroon antique	900.66	10025.42	900.66	2031.98	1670.9033333333334
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	11724.08	900.66	2031.98	1674.8685714285714
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	12724.68	900.66	2031.98	1590.585
Manufacturer#3	almond antique chartreuse khaki white	99.68	99.68	99.68	99.68	99.68
Manufacturer#3	almond antique forest lavender goldenrod	590.27	689.95	99.68	590.27	344.975
Manufacturer#3	almond antique forest lavender goldenrod	NULL	689.95	99.68	590.27	344.975
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	1880.22	99.68	1190.27	626.74
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique metallic orange dim	55.39	3125.8799999999997	55.39	1190.27	625.1759999999999
Manufacturer#3	almond antique misty red olive	1922.98	5048.86	55.39	1922.98	841.4766666666666
Manufacturer#3	almond antique olive coral navajo	1337.29	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#4	almond antique gainsboro frosted violet	NULL	NULL	NULL	NULL	NULL
Manufacturer#4	almond antique violet mint lemon	1375.42	1375.42	1375.42	1375.42	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	1375.42	1375.42	1375.42	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	2581.6800000000003	1206.26	1375.42	1290.8400000000001
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	4426.6	1206.26	1844.92	1475.5333333333335
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#5	almond antique blue firebrick mint	1789.69	1789.69	1789.69	1789.69	1789.69
Manufacturer#5	almond antique medium spring khaki	1611.66	3401.3500000000004	1611.66	1789.69	1700.6750000000002
Manufacturer#5	almond antique medium spring khaki	1611.66	5013.01	1611.66	1789.69	1671.0033333333333
Manufacturer#5	almond antique sky peru orange	1788.73	6801.74	1611.66	1789.69	1700.435
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	7819.84	1018.1	1789.69	1563.968
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	9284.32	1018.1	1789.69	1547.3866666666665
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(order by p_name) as s,
min(p_retailprice) over(order by p_name) as mi,
max(p_retailprice) over(order by p_name) as ma,
avg(p_retailprice) over(order by p_name) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(order by p_name) as s,
min(p_retailprice) over(order by p_name) as mi,
max(p_retailprice) over(order by p_name) as ma,
avg(p_retailprice) over(order by p_name) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: 0 (type: int), p_name (type: string)
                    sort order: ++
                    Map-reduce partition columns: 0 (type: int)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [4, 1]
                        keyExpressions: ConstantVectorExpression(val 0) -> 4:int
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [5]
                        valueColumnNums: [0, 2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_mfgr (type: string), p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, bigint]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: aa
                reduceColumnSortOrder: ++
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 4
                    dataColumns: KEY.reducesinkkey0:int, KEY.reducesinkkey1:string, VALUE._col0:string, VALUE._col1:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [double, double, double, double, bigint]
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col1 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [2, 1, 3]
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: 0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: sum_window_0
                              arguments: _col2
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: min_window_1
                              arguments: _col2
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: max_window_2
                              arguments: _col2
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: avg_window_3
                              arguments: _col2
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorDoubleSum, VectorPTFEvaluatorDoubleMin, VectorPTFEvaluatorDoubleMax, VectorPTFEvaluatorDoubleAvg]
                      functionInputExpressions: [col 3:double, col 3:double, col 3:double, col 3:double]
                      functionNames: [sum, min, max, avg]
                      keyInputColumns: [1]
                      native: true
                      nonKeyInputColumns: [2, 3]
                      orderExpressions: [col 1:string]
                      outputColumns: [4, 5, 6, 7, 2, 1, 3]
                      outputTypes: [double, double, double, double, string, string, double]
                      partitionExpressions: [ConstantVectorExpression(val 0) -> 8:int]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), sum_window_0 (type: double), min_window_1 (type: double), max_window_2 (type: double), avg_window_3 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [2, 1, 3, 4, 5, 6, 7]
                    Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(order by p_name) as s,
min(p_retailprice) over(order by p_name) as mi,
max(p_retailprice) over(order by p_name) as ma,
avg(p_retailprice) over(order by p_name) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(order by p_name) as s,
min(p_retailprice) over(order by p_name) as mi,
max(p_retailprice) over(order by p_name) as ma,
avg(p_retailprice) over(order by p_name) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	s	mi	ma	av
Manufacturer#5	almond antique blue firebrick mint	1789.69	1789.69	1789.69	1789.69	1789.69
Manufacturer#1	almond antique burnished rose metallic	1173.15	4135.99	1173.15	1789.69	1378.6633333333332
Manufacturer#1	almond antique burnished rose metallic	1173.15	4135.99	1173.15	1789.69	1378.6633333333332
Manufacturer#3	almond antique chartreuse khaki white	99.68	4235.67	99.68	1789.69	1058.9175
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	11250.71	99.68	1789.69	1406.33875
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	11250.71	99.68	1789.69	1406.33875
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	11250.71	99.68	1789.69	1406.33875
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	11250.71	99.68	1789.69	1406.33875
Manufacturer#3	almond antique forest lavender goldenrod	NULL	14221.519999999999	99.68	1789.69	1292.8654545454544
Manufacturer#3	almond antique forest lavender goldenrod	590.27	14221.519999999999	99.68	1789.69	1292.8654545454544
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	14221.519999999999	99.68	1789.69	1292.8654545454544
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	14221.519999999999	99.68	1789.69	1292.8654545454544
Manufacturer#4	almond antique gainsboro frosted violet	NULL	14221.519999999999	99.68	1789.69	1292.8654545454544
Manufacturer#5	almond antique medium spring khaki	1611.66	17444.84	99.68	1789.69	1341.9107692307693
Manufacturer#5	almond antique medium spring khaki	1611.66	17444.84	99.68	1789.69	1341.9107692307693
Manufacturer#3	almond antique metallic orange dim	55.39	17500.23	55.39	1789.69	1250.0164285714286
Manufacturer#3	almond antique misty red olive	1922.98	19423.21	55.39	1922.98	1294.8806666666667
Manufacturer#3	almond antique olive coral navajo	1337.29	20760.5	55.39	1922.98	1297.53125
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	22363.09	55.39	1922.98	1315.4758823529412
Manufacturer#5	almond antique sky peru orange	1788.73	24151.82	55.39	1922.98	1341.7677777777778
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	25842.5	55.39	1922.98	1360.1315789473683
Manufacturer#4	almond antique violet mint lemon	1375.42	27217.92	55.39	1922.98	1360.896
Manufacturer#2	almond antique violet turquoise frosted	1800.7	32620.019999999997	55.39	1922.98	1418.2617391304345
Manufacturer#2	almond antique violet turquoise frosted	1800.7	32620.019999999997	55.39	1922.98	1418.2617391304345
Manufacturer#2	almond antique violet turquoise frosted	1800.7	32620.019999999997	55.39	1922.98	1418.2617391304345
Manufacturer#1	almond aquamarine burnished black steel	1414.42	34034.439999999995	55.39	1922.98	1418.1016666666665
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	35052.53999999999	55.39	1922.98	1402.1015999999997
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	36258.799999999996	55.39	1922.98	1394.5692307692307
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	36258.799999999996	55.39	1922.98	1394.5692307692307
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	38290.78	55.39	2031.98	1418.177037037037
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	43188.76	55.39	2031.98	1439.6253333333334
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	43188.76	55.39	2031.98	1439.6253333333334
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	43188.76	55.39	2031.98	1439.6253333333334
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	43188.76	55.39	2031.98	1439.6253333333334
Manufacturer#2	almond aquamarine rose maroon antique	900.66	45788.08	55.39	2031.98	1430.8775
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	45788.08	55.39	2031.98	1430.8775
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	46788.68	55.39	2031.98	1417.8387878787878
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	48633.6	55.39	2031.98	1430.3999999999999
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	49923.95	55.39	2031.98	1426.3985714285714
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	51388.43	55.39	2031.98	1427.4563888888888
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(order by p_name range between unbounded preceding and current row) as s,
min(p_retailprice) over(order by p_name range between unbounded preceding and current row) as mi,
max(p_retailprice) over(order by p_name range between unbounded preceding and current row) as ma,
avg(p_retailprice) over(order by p_name range between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(order by p_name range between unbounded preceding and current row) as s,
min(p_retailprice) over(order by p_name range between unbounded preceding and current row) as mi,
max(p_retailprice) over(order by p_name range between unbounded preceding and current row) as ma,
avg(p_retailprice) over(order by p_name range between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: 0 (type: int), p_name (type: string)
                    sort order: ++
                    Map-reduce partition columns: 0 (type: int)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [4, 1]
                        keyExpressions: ConstantVectorExpression(val 0) -> 4:int
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [5]
                        valueColumnNums: [0, 2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_mfgr (type: string), p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, bigint]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: aa
                reduceColumnSortOrder: ++
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 4
                    dataColumns: KEY.reducesinkkey0:int, KEY.reducesinkkey1:string, VALUE._col0:string, VALUE._col1:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [double, double, double, double, bigint]
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col1 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [2, 1, 3]
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: 0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: sum_window_0
                              arguments: _col2
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: min_window_1
                              arguments: _col2
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: max_window_2
                              arguments: _col2
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: avg_window_3
                              arguments: _col2
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorDoubleSum, VectorPTFEvaluatorDoubleMin, VectorPTFEvaluatorDoubleMax, VectorPTFEvaluatorDoubleAvg]
                      functionInputExpressions: [col 3:double, col 3:double, col 3:double, col 3:double]
                      functionNames: [sum, min, max, avg]
                      keyInputColumns: [1]
                      native: true
                      nonKeyInputColumns: [2, 3]
                      orderExpressions: [col 1:string]
                      outputColumns: [4, 5, 6, 7, 2, 1, 3]
                      outputTypes: [double, double, double, double, string, string, double]
                      partitionExpressions: [ConstantVectorExpression(val 0) -> 8:int]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), sum_window_0 (type: double), min_window_1 (type: double), max_window_2 (type: double), avg_window_3 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [2, 1, 3, 4, 5, 6, 7]
                    Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(order by p_name range between unbounded preceding and current row) as s,
min(p_retailprice) over(order by p_name range between unbounded preceding and current row) as mi,
max(p_retailprice) over(order by p_name range between unbounded preceding and current row) as ma,
avg(p_retailprice) over(order by p_name range between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(order by p_name range between unbounded preceding and current row) as s,
min(p_retailprice) over(order by p_name range between unbounded preceding and current row) as mi,
max(p_retailprice) over(order by p_name range between unbounded preceding and current row) as ma,
avg(p_retailprice) over(order by p_name range between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	s	mi	ma	av
Manufacturer#5	almond antique blue firebrick mint	1789.69	1789.69	1789.69	1789.69	1789.69
Manufacturer#1	almond antique burnished rose metallic	1173.15	4135.99	1173.15	1789.69	1378.6633333333332
Manufacturer#1	almond antique burnished rose metallic	1173.15	4135.99	1173.15	1789.69	1378.6633333333332
Manufacturer#3	almond antique chartreuse khaki white	99.68	4235.67	99.68	1789.69	1058.9175
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	11250.71	99.68	1789.69	1406.33875
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	11250.71	99.68	1789.69	1406.33875
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	11250.71	99.68	1789.69	1406.33875
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	11250.71	99.68	1789.69	1406.33875
Manufacturer#3	almond antique forest lavender goldenrod	NULL	14221.519999999999	99.68	1789.69	1292.8654545454544
Manufacturer#3	almond antique forest lavender goldenrod	590.27	14221.519999999999	99.68	1789.69	1292.8654545454544
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	14221.519999999999	99.68	1789.69	1292.8654545454544
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	14221.519999999999	99.68	1789.69	1292.8654545454544
Manufacturer#4	almond antique gainsboro frosted violet	NULL	14221.519999999999	99.68	1789.69	1292.8654545454544
Manufacturer#5	almond antique medium spring khaki	1611.66	17444.84	99.68	1789.69	1341.9107692307693
Manufacturer#5	almond antique medium spring khaki	1611.66	17444.84	99.68	1789.69	1341.9107692307693
Manufacturer#3	almond antique metallic orange dim	55.39	17500.23	55.39	1789.69	1250.0164285714286
Manufacturer#3	almond antique misty red olive	1922.98	19423.21	55.39	1922.98	1294.8806666666667
Manufacturer#3	almond antique olive coral navajo	1337.29	20760.5	55.39	1922.98	1297.53125
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	22363.09	55.39	1922.98	1315.4758823529412
Manufacturer#5	almond antique sky peru orange	1788.73	24151.82	55.39	1922.98	1341.7677777777778
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	25842.5	55.39	1922.98	1360.1315789473683
Manufacturer#4	almond antique violet mint lemon	1375.42	27217.92	55.39	1922.98	1360.896
Manufacturer#2	almond antique violet turquoise frosted	1800.7	32620.019999999997	55.39	1922.98	1418.2617391304345
Manufacturer#2	almond antique violet turquoise frosted	1800.7	32620.019999999997	55.39	1922.98	1418.2617391304345
Manufacturer#2	almond antique violet turquoise frosted	1800.7	32620.019999999997	55.39	1922.98	1418.2617391304345
Manufacturer#1	almond aquamarine burnished black steel	1414.42	34034.439999999995	55.39	1922.98	1418.1016666666665
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	35052.53999999999	55.39	1922.98	1402.1015999999997
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	36258.799999999996	55.39	1922.98	1394.5692307692307
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	36258.799999999996	55.39	1922.98	1394.5692307692307
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	38290.78	55.39	2031.98	1418.177037037037
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	43188.76	55.39	2031.98	1439.6253333333334
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	43188.76	55.39	2031.98	1439.6253333333334
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	43188.76	55.39	2031.98	1439.6253333333334
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	43188.76	55.39	2031.98	1439.6253333333334
Manufacturer#2	almond aquamarine rose maroon antique	900.66	45788.08	55.39	2031.98	1430.8775
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	45788.08	55.39	2031.98	1430.8775
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	46788.68	55.39	2031.98	1417.8387878787878
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	48633.6	55.39	2031.98	1430.3999999999999
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	49923.95	55.39	2031.98	1426.3985714285714
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	51388.43	55.39	2031.98	1427.4563888888888
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as s,
min(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as mi,
max(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as ma,
avg(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as s,
min(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as mi,
max(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as ma,
avg(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: 0 (type: int), p_name (type: string)
                    sort order: ++
                    Map-reduce partition columns: 0 (type: int)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [4, 1]
                        keyExpressions: ConstantVectorExpression(val 0) -> 4:int
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [5]
                        valueColumnNums: [0, 2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_mfgr (type: string), p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, bigint]
        Reducer 2 
            Execution mode: llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                notVectorizedReason: PTF operator: sum UNBOUNDED end frame is not supported for ROWS window type
                vectorized: false
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col1 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: 0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: sum_window_0
                              arguments: _col2
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: min_window_1
                              arguments: _col2
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: max_window_2
                              arguments: _col2
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: avg_window_3
                              arguments: _col2
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), sum_window_0 (type: double), min_window_1 (type: double), max_window_2 (type: double), avg_window_3 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                    Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as s,
min(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as mi,
max(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as ma,
avg(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as s,
min(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as mi,
max(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as ma,
avg(p_retailprice) over(order by p_name rows between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	s	mi	ma	av
Manufacturer#5	almond antique blue firebrick mint	1789.69	1789.69	1789.69	1789.69	1789.69
Manufacturer#1	almond antique burnished rose metallic	1173.15	2962.84	1173.15	1789.69	1481.42
Manufacturer#1	almond antique burnished rose metallic	1173.15	4135.99	1173.15	1789.69	1378.6633333333332
Manufacturer#3	almond antique chartreuse khaki white	99.68	4235.67	99.68	1789.69	1058.9175
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	5989.43	99.68	1789.69	1197.886
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	7743.1900000000005	99.68	1789.69	1290.5316666666668
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9496.95	99.68	1789.69	1356.707142857143
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	11250.710000000001	99.68	1789.69	1406.3387500000001
Manufacturer#3	almond antique forest lavender goldenrod	NULL	11250.710000000001	99.68	1789.69	1406.3387500000001
Manufacturer#3	almond antique forest lavender goldenrod	590.27	11840.980000000001	99.68	1789.69	1315.6644444444446
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	13031.250000000002	99.68	1789.69	1303.1250000000002
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	14221.520000000002	99.68	1789.69	1292.8654545454547
Manufacturer#4	almond antique gainsboro frosted violet	NULL	14221.520000000002	99.68	1789.69	1292.8654545454547
Manufacturer#5	almond antique medium spring khaki	1611.66	15833.180000000002	99.68	1789.69	1319.4316666666668
Manufacturer#5	almond antique medium spring khaki	1611.66	17444.840000000004	99.68	1789.69	1341.9107692307696
Manufacturer#3	almond antique metallic orange dim	55.39	17500.230000000003	55.39	1789.69	1250.0164285714288
Manufacturer#3	almond antique misty red olive	1922.98	19423.210000000003	55.39	1922.98	1294.880666666667
Manufacturer#3	almond antique olive coral navajo	1337.29	20760.500000000004	55.39	1922.98	1297.5312500000002
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	22363.090000000004	55.39	1922.98	1315.4758823529414
Manufacturer#5	almond antique sky peru orange	1788.73	24151.820000000003	55.39	1922.98	1341.767777777778
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	25842.500000000004	55.39	1922.98	1360.1315789473686
Manufacturer#4	almond antique violet mint lemon	1375.42	27217.920000000006	55.39	1922.98	1360.8960000000002
Manufacturer#2	almond antique violet turquoise frosted	1800.7	29018.620000000006	55.39	1922.98	1381.839047619048
Manufacturer#2	almond antique violet turquoise frosted	1800.7	30819.320000000007	55.39	1922.98	1400.8781818181822
Manufacturer#2	almond antique violet turquoise frosted	1800.7	32620.020000000008	55.39	1922.98	1418.2617391304352
Manufacturer#1	almond aquamarine burnished black steel	1414.42	34034.44000000001	55.39	1922.98	1418.1016666666671
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	35052.54000000001	55.39	1922.98	1402.1016000000004
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	36258.80000000001	55.39	1922.98	1394.5692307692311
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	36258.80000000001	55.39	1922.98	1394.5692307692311
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	38290.78000000001	55.39	2031.98	1418.1770370370375
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	39923.44000000002	55.39	2031.98	1425.8371428571434
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	41556.10000000002	55.39	2031.98	1432.9689655172422
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	41556.10000000002	55.39	2031.98	1432.9689655172422
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	43188.760000000024	55.39	2031.98	1439.625333333334
Manufacturer#2	almond aquamarine rose maroon antique	900.66	44089.42000000003	55.39	2031.98	1422.2393548387106
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	45788.08000000003	55.39	2031.98	1430.877500000001
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	46788.68000000003	55.39	2031.98	1417.8387878787887
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	48633.60000000003	55.39	2031.98	1430.4000000000008
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	49923.950000000026	55.39	2031.98	1426.3985714285723
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	51388.43000000003	55.39	2031.98	1427.4563888888897
PREHOOK: query: create table vector_ptf_part_simple_text_decimal(p_mfgr string, p_name string, p_retailprice decimal(38,18))
        ROW FORMAT DELIMITED
        FIELDS TERMINATED BY '\t'
        STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@vector_ptf_part_simple_text_decimal
POSTHOOK: query: create table vector_ptf_part_simple_text_decimal(p_mfgr string, p_name string, p_retailprice decimal(38,18))
        ROW FORMAT DELIMITED
        FIELDS TERMINATED BY '\t'
        STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@vector_ptf_part_simple_text_decimal
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/vector_ptf_part_simple.txt' OVERWRITE INTO TABLE vector_ptf_part_simple_text_decimal
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@vector_ptf_part_simple_text_decimal
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/vector_ptf_part_simple.txt' OVERWRITE INTO TABLE vector_ptf_part_simple_text_decimal
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@vector_ptf_part_simple_text_decimal
PREHOOK: query: create table vector_ptf_part_simple_orc_decimal(p_mfgr string, p_name string, p_retailprice decimal(38,18)) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@vector_ptf_part_simple_orc_decimal
POSTHOOK: query: create table vector_ptf_part_simple_orc_decimal(p_mfgr string, p_name string, p_retailprice decimal(38,18)) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@vector_ptf_part_simple_orc_decimal
PREHOOK: query: INSERT INTO TABLE vector_ptf_part_simple_orc_decimal SELECT * FROM vector_ptf_part_simple_text_decimal
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_text_decimal
PREHOOK: Output: default@vector_ptf_part_simple_orc_decimal
POSTHOOK: query: INSERT INTO TABLE vector_ptf_part_simple_orc_decimal SELECT * FROM vector_ptf_part_simple_text_decimal
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_text_decimal
POSTHOOK: Output: default@vector_ptf_part_simple_orc_decimal
POSTHOOK: Lineage: vector_ptf_part_simple_orc_decimal.p_mfgr SIMPLE [(vector_ptf_part_simple_text_decimal)vector_ptf_part_simple_text_decimal.FieldSchema(name:p_mfgr, type:string, comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc_decimal.p_name SIMPLE [(vector_ptf_part_simple_text_decimal)vector_ptf_part_simple_text_decimal.FieldSchema(name:p_name, type:string, comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc_decimal.p_retailprice SIMPLE [(vector_ptf_part_simple_text_decimal)vector_ptf_part_simple_text_decimal.FieldSchema(name:p_retailprice, type:decimal(38,18), comment:null), ]
vector_ptf_part_simple_text_decimal.p_mfgr	vector_ptf_part_simple_text_decimal.p_name	vector_ptf_part_simple_text_decimal.p_retailprice
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr) as s,
min(p_retailprice) over(partition by p_mfgr) as mi,
max(p_retailprice) over(partition by p_mfgr) as ma,
avg(p_retailprice) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc_decimal
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr) as s,
min(p_retailprice) over(partition by p_mfgr) as mi,
max(p_retailprice) over(partition by p_mfgr) as ma,
avg(p_retailprice) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc_decimal
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc_decimal
                  Statistics: Num rows: 40 Data size: 12944 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:decimal(38,18), 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string)
                    sort order: +
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkStringOperator
                        keyColumnNums: [0]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        valueColumnNums: [1, 2]
                    Statistics: Num rows: 40 Data size: 12944 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_name (type: string), p_retailprice (type: decimal(38,18))
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:decimal(38,18)
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    dataColumns: KEY.reducesinkkey0:string, VALUE._col0:string, VALUE._col1:decimal(38,18)
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [decimal(38,18), decimal(38,18), decimal(38,18), decimal(38,18)]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: decimal(38,18))
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2]
                Statistics: Num rows: 40 Data size: 23664 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: decimal(38,18)
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: sum_window_0
                              arguments: _col2
                              name: sum
                              window function: GenericUDAFSumHiveDecimal
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                            window function definition
                              alias: min_window_1
                              arguments: _col2
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                            window function definition
                              alias: max_window_2
                              arguments: _col2
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                            window function definition
                              alias: avg_window_3
                              arguments: _col2
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDecimal
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorDecimalSum, VectorPTFEvaluatorDecimalMin, VectorPTFEvaluatorDecimalMax, VectorPTFEvaluatorDecimalAvg]
                      functionInputExpressions: [col 2:decimal(38,18), col 2:decimal(38,18), col 2:decimal(38,18), col 2:decimal(38,18)]
                      functionNames: [sum, min, max, avg]
                      keyInputColumns: [0]
                      native: true
                      nonKeyInputColumns: [1, 2]
                      orderExpressions: [col 0:string]
                      outputColumns: [3, 4, 5, 6, 0, 1, 2]
                      outputTypes: [decimal(38,18), decimal(38,18), decimal(38,18), decimal(38,18), string, string, decimal(38,18)]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 23664 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: decimal(38,18)), sum_window_0 (type: decimal(38,18)), min_window_1 (type: decimal(38,18)), max_window_2 (type: decimal(38,18)), avg_window_3 (type: decimal(38,18))
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6]
                    Statistics: Num rows: 40 Data size: 30416 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 30416 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr) as s,
min(p_retailprice) over(partition by p_mfgr) as mi,
max(p_retailprice) over(partition by p_mfgr) as ma,
avg(p_retailprice) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc_decimal
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc_decimal
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr) as s,
min(p_retailprice) over(partition by p_mfgr) as mi,
max(p_retailprice) over(partition by p_mfgr) as ma,
avg(p_retailprice) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc_decimal
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc_decimal
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	s	mi	ma	av
Manufacturer#4	almond azure aquamarine papaya violet	1290.350000000000000000	5716.950000000000000000	1206.260000000000000000	1844.920000000000000000	1429.237500000000000000
Manufacturer#4	almond antique violet mint lemon	1375.420000000000000000	5716.950000000000000000	1206.260000000000000000	1844.920000000000000000	1429.237500000000000000
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	5716.950000000000000000	1206.260000000000000000	1844.920000000000000000	1429.237500000000000000
Manufacturer#4	almond antique gainsboro frosted violet	NULL	5716.950000000000000000	1206.260000000000000000	1844.920000000000000000	1429.237500000000000000
Manufacturer#4	almond aquamarine yellow dodger mint	1844.920000000000000000	5716.950000000000000000	1206.260000000000000000	1844.920000000000000000	1429.237500000000000000
Manufacturer#4	almond aquamarine floral ivory bisque	1206.260000000000000000	5716.950000000000000000	1206.260000000000000000	1844.920000000000000000	1429.237500000000000000
Manufacturer#5	almond azure blanched chiffon midnight	1464.480000000000000000	9284.320000000000000000	1018.100000000000000000	1789.690000000000000000	1547.386666666666666667
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.100000000000000000	9284.320000000000000000	1018.100000000000000000	1789.690000000000000000	1547.386666666666666667
Manufacturer#5	almond antique medium spring khaki	1611.660000000000000000	9284.320000000000000000	1018.100000000000000000	1789.690000000000000000	1547.386666666666666667
Manufacturer#5	almond antique blue firebrick mint	1789.690000000000000000	9284.320000000000000000	1018.100000000000000000	1789.690000000000000000	1547.386666666666666667
Manufacturer#5	almond antique medium spring khaki	1611.660000000000000000	9284.320000000000000000	1018.100000000000000000	1789.690000000000000000	1547.386666666666666667
Manufacturer#5	almond antique sky peru orange	1788.730000000000000000	9284.320000000000000000	1018.100000000000000000	1789.690000000000000000	1547.386666666666666667
Manufacturer#2	almond aquamarine rose maroon antique	900.660000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#2	almond aquamarine rose maroon antique	1698.660000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#2	almond antique violet turquoise frosted	1800.700000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#2	almond antique violet chocolate turquoise	1690.680000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#2	almond antique violet turquoise frosted	1800.700000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.600000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#2	almond aquamarine midnight light salmon	2031.980000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#2	almond antique violet turquoise frosted	1800.700000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#1	almond antique chartreuse lavender yellow	1753.760000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.660000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.660000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond antique chartreuse lavender yellow	1753.760000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond aquamarine burnished black steel	1414.420000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond antique burnished rose metallic	1173.150000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.590000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond antique chartreuse lavender yellow	1753.760000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond antique burnished rose metallic	1173.150000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond antique chartreuse lavender yellow	1753.760000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.660000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#3	almond antique forest lavender goldenrod	590.270000000000000000	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
Manufacturer#3	almond antique metallic orange dim	55.390000000000000000	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
Manufacturer#3	almond antique forest lavender goldenrod	1190.270000000000000000	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
Manufacturer#3	almond antique olive coral navajo	1337.290000000000000000	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
Manufacturer#3	almond antique misty red olive	1922.980000000000000000	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
Manufacturer#3	almond antique forest lavender goldenrod	1190.270000000000000000	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
Manufacturer#3	almond antique forest lavender goldenrod	NULL	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
Manufacturer#3	almond antique chartreuse khaki white	99.680000000000000000	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc_decimal
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc_decimal
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc_decimal
                  Statistics: Num rows: 40 Data size: 12944 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:decimal(38,18), 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), p_name (type: string)
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [0, 1]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [0]
                        valueColumnNums: [2]
                    Statistics: Num rows: 40 Data size: 12944 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_retailprice (type: decimal(38,18))
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:decimal(38,18)
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: aa
                reduceColumnSortOrder: ++
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    dataColumns: KEY.reducesinkkey0:string, KEY.reducesinkkey1:string, VALUE._col0:decimal(38,18)
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [decimal(38,18), decimal(38,18), decimal(38,18), decimal(38,18)]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: decimal(38,18))
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2]
                Statistics: Num rows: 40 Data size: 23664 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: decimal(38,18)
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: sum_window_0
                              arguments: _col2
                              name: sum
                              window function: GenericUDAFSumHiveDecimal
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: min_window_1
                              arguments: _col2
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: max_window_2
                              arguments: _col2
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: avg_window_3
                              arguments: _col2
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDecimal
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorDecimalSum, VectorPTFEvaluatorDecimalMin, VectorPTFEvaluatorDecimalMax, VectorPTFEvaluatorDecimalAvg]
                      functionInputExpressions: [col 2:decimal(38,18), col 2:decimal(38,18), col 2:decimal(38,18), col 2:decimal(38,18)]
                      functionNames: [sum, min, max, avg]
                      keyInputColumns: [0, 1]
                      native: true
                      nonKeyInputColumns: [2]
                      orderExpressions: [col 1:string]
                      outputColumns: [3, 4, 5, 6, 0, 1, 2]
                      outputTypes: [decimal(38,18), decimal(38,18), decimal(38,18), decimal(38,18), string, string, decimal(38,18)]
                      partitionExpressions: [col 0:string]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 23664 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: decimal(38,18)), sum_window_0 (type: decimal(38,18)), min_window_1 (type: decimal(38,18)), max_window_2 (type: decimal(38,18)), avg_window_3 (type: decimal(38,18))
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6]
                    Statistics: Num rows: 40 Data size: 30416 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 30416 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc_decimal
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc_decimal
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc_decimal
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc_decimal
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	s	mi	ma	av
Manufacturer#1	almond antique burnished rose metallic	1173.150000000000000000	2346.300000000000000000	1173.150000000000000000	1173.150000000000000000	1173.150000000000000000
Manufacturer#1	almond antique burnished rose metallic	1173.150000000000000000	2346.300000000000000000	1173.150000000000000000	1173.150000000000000000	1173.150000000000000000
Manufacturer#1	almond antique chartreuse lavender yellow	1753.760000000000000000	9361.340000000000000000	1173.150000000000000000	1753.760000000000000000	1560.223333333333333333
Manufacturer#1	almond antique chartreuse lavender yellow	1753.760000000000000000	9361.340000000000000000	1173.150000000000000000	1753.760000000000000000	1560.223333333333333333
Manufacturer#1	almond antique chartreuse lavender yellow	1753.760000000000000000	9361.340000000000000000	1173.150000000000000000	1753.760000000000000000	1560.223333333333333333
Manufacturer#1	almond antique chartreuse lavender yellow	1753.760000000000000000	9361.340000000000000000	1173.150000000000000000	1753.760000000000000000	1560.223333333333333333
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.590000000000000000	10963.930000000000000000	1173.150000000000000000	1753.760000000000000000	1566.275714285714285714
Manufacturer#1	almond aquamarine burnished black steel	1414.420000000000000000	12378.350000000000000000	1173.150000000000000000	1753.760000000000000000	1547.293750000000000000
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.660000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.660000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.660000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#2	almond antique violet chocolate turquoise	1690.680000000000000000	1690.680000000000000000	1690.680000000000000000	1690.680000000000000000	1690.680000000000000000
Manufacturer#2	almond antique violet turquoise frosted	1800.700000000000000000	7092.780000000000000000	1690.680000000000000000	1800.700000000000000000	1773.195000000000000000
Manufacturer#2	almond antique violet turquoise frosted	1800.700000000000000000	7092.780000000000000000	1690.680000000000000000	1800.700000000000000000	1773.195000000000000000
Manufacturer#2	almond antique violet turquoise frosted	1800.700000000000000000	7092.780000000000000000	1690.680000000000000000	1800.700000000000000000	1773.195000000000000000
Manufacturer#2	almond aquamarine midnight light salmon	2031.980000000000000000	9124.760000000000000000	1690.680000000000000000	2031.980000000000000000	1824.952000000000000000
Manufacturer#2	almond aquamarine rose maroon antique	900.660000000000000000	11724.080000000000000000	900.660000000000000000	2031.980000000000000000	1674.868571428571428571
Manufacturer#2	almond aquamarine rose maroon antique	1698.660000000000000000	11724.080000000000000000	900.660000000000000000	2031.980000000000000000	1674.868571428571428571
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.600000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#3	almond antique chartreuse khaki white	99.680000000000000000	99.680000000000000000	99.680000000000000000	99.680000000000000000	99.680000000000000000
Manufacturer#3	almond antique forest lavender goldenrod	590.270000000000000000	3070.490000000000000000	99.680000000000000000	1190.270000000000000000	767.622500000000000000
Manufacturer#3	almond antique forest lavender goldenrod	NULL	3070.490000000000000000	99.680000000000000000	1190.270000000000000000	767.622500000000000000
Manufacturer#3	almond antique forest lavender goldenrod	1190.270000000000000000	3070.490000000000000000	99.680000000000000000	1190.270000000000000000	767.622500000000000000
Manufacturer#3	almond antique forest lavender goldenrod	1190.270000000000000000	3070.490000000000000000	99.680000000000000000	1190.270000000000000000	767.622500000000000000
Manufacturer#3	almond antique metallic orange dim	55.390000000000000000	3125.880000000000000000	55.390000000000000000	1190.270000000000000000	625.176000000000000000
Manufacturer#3	almond antique misty red olive	1922.980000000000000000	5048.860000000000000000	55.390000000000000000	1922.980000000000000000	841.476666666666666667
Manufacturer#3	almond antique olive coral navajo	1337.290000000000000000	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
Manufacturer#4	almond antique gainsboro frosted violet	NULL	NULL	NULL	NULL	NULL
Manufacturer#4	almond antique violet mint lemon	1375.420000000000000000	1375.420000000000000000	1375.420000000000000000	1375.420000000000000000	1375.420000000000000000
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	2581.680000000000000000	1206.260000000000000000	1375.420000000000000000	1290.840000000000000000
Manufacturer#4	almond aquamarine floral ivory bisque	1206.260000000000000000	2581.680000000000000000	1206.260000000000000000	1375.420000000000000000	1290.840000000000000000
Manufacturer#4	almond aquamarine yellow dodger mint	1844.920000000000000000	4426.600000000000000000	1206.260000000000000000	1844.920000000000000000	1475.533333333333333333
Manufacturer#4	almond azure aquamarine papaya violet	1290.350000000000000000	5716.950000000000000000	1206.260000000000000000	1844.920000000000000000	1429.237500000000000000
Manufacturer#5	almond antique blue firebrick mint	1789.690000000000000000	1789.690000000000000000	1789.690000000000000000	1789.690000000000000000	1789.690000000000000000
Manufacturer#5	almond antique medium spring khaki	1611.660000000000000000	5013.010000000000000000	1611.660000000000000000	1789.690000000000000000	1671.003333333333333333
Manufacturer#5	almond antique medium spring khaki	1611.660000000000000000	5013.010000000000000000	1611.660000000000000000	1789.690000000000000000	1671.003333333333333333
Manufacturer#5	almond antique sky peru orange	1788.730000000000000000	6801.740000000000000000	1611.660000000000000000	1789.690000000000000000	1700.435000000000000000
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.100000000000000000	7819.840000000000000000	1018.100000000000000000	1789.690000000000000000	1563.968000000000000000
Manufacturer#5	almond azure blanched chiffon midnight	1464.480000000000000000	9284.320000000000000000	1018.100000000000000000	1789.690000000000000000	1547.386666666666666667
PREHOOK: query: create table vector_ptf_part_simple_orc_long(p_mfgr string, p_name string, p_bigint bigint) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@vector_ptf_part_simple_orc_long
POSTHOOK: query: create table vector_ptf_part_simple_orc_long(p_mfgr string, p_name string, p_bigint bigint) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@vector_ptf_part_simple_orc_long
PREHOOK: query: INSERT INTO TABLE vector_ptf_part_simple_orc_long SELECT p_mfgr, p_name, cast(p_retailprice * 100 as bigint) FROM vector_ptf_part_simple_text_decimal
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_text_decimal
PREHOOK: Output: default@vector_ptf_part_simple_orc_long
POSTHOOK: query: INSERT INTO TABLE vector_ptf_part_simple_orc_long SELECT p_mfgr, p_name, cast(p_retailprice * 100 as bigint) FROM vector_ptf_part_simple_text_decimal
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_text_decimal
POSTHOOK: Output: default@vector_ptf_part_simple_orc_long
POSTHOOK: Lineage: vector_ptf_part_simple_orc_long.p_bigint EXPRESSION [(vector_ptf_part_simple_text_decimal)vector_ptf_part_simple_text_decimal.FieldSchema(name:p_retailprice, type:decimal(38,18), comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc_long.p_mfgr SIMPLE [(vector_ptf_part_simple_text_decimal)vector_ptf_part_simple_text_decimal.FieldSchema(name:p_mfgr, type:string, comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc_long.p_name SIMPLE [(vector_ptf_part_simple_text_decimal)vector_ptf_part_simple_text_decimal.FieldSchema(name:p_name, type:string, comment:null), ]
p_mfgr	p_name	_c2
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_bigint,
sum(p_bigint) over(partition by p_mfgr) as s,
min(p_bigint) over(partition by p_mfgr) as mi,
max(p_bigint) over(partition by p_mfgr) as ma,
avg(p_bigint) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc_long
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_bigint,
sum(p_bigint) over(partition by p_mfgr) as s,
min(p_bigint) over(partition by p_mfgr) as mi,
max(p_bigint) over(partition by p_mfgr) as ma,
avg(p_bigint) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc_long
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc_long
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_bigint:bigint, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string)
                    sort order: +
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkStringOperator
                        keyColumnNums: [0]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        valueColumnNums: [1, 2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_name (type: string), p_bigint (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_bigint:bigint
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    dataColumns: KEY.reducesinkkey0:string, VALUE._col0:string, VALUE._col1:bigint
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, bigint, bigint, double]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: bigint)
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2]
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: bigint
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: sum_window_0
                              arguments: _col2
                              name: sum
                              window function: GenericUDAFSumLong
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                            window function definition
                              alias: min_window_1
                              arguments: _col2
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                            window function definition
                              alias: max_window_2
                              arguments: _col2
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                            window function definition
                              alias: avg_window_3
                              arguments: _col2
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorLongSum, VectorPTFEvaluatorLongMin, VectorPTFEvaluatorLongMax, VectorPTFEvaluatorLongAvg]
                      functionInputExpressions: [col 2:bigint, col 2:bigint, col 2:bigint, col 2:bigint]
                      functionNames: [sum, min, max, avg]
                      keyInputColumns: [0]
                      native: true
                      nonKeyInputColumns: [1, 2]
                      orderExpressions: [col 0:string]
                      outputColumns: [3, 4, 5, 6, 0, 1, 2]
                      outputTypes: [bigint, bigint, bigint, double, string, string, bigint]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint), sum_window_0 (type: bigint), min_window_1 (type: bigint), max_window_2 (type: bigint), avg_window_3 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6]
                    Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_bigint,
sum(p_bigint) over(partition by p_mfgr) as s,
min(p_bigint) over(partition by p_mfgr) as mi,
max(p_bigint) over(partition by p_mfgr) as ma,
avg(p_bigint) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc_long
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc_long
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_bigint,
sum(p_bigint) over(partition by p_mfgr) as s,
min(p_bigint) over(partition by p_mfgr) as mi,
max(p_bigint) over(partition by p_mfgr) as ma,
avg(p_bigint) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc_long
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc_long
#### A masked pattern was here ####
p_mfgr	p_name	p_bigint	s	mi	ma	av
Manufacturer#4	almond azure aquamarine papaya violet	129035	571695	120626	184492	142923.75
Manufacturer#4	almond antique violet mint lemon	137542	571695	120626	184492	142923.75
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	571695	120626	184492	142923.75
Manufacturer#4	almond antique gainsboro frosted violet	NULL	571695	120626	184492	142923.75
Manufacturer#4	almond aquamarine yellow dodger mint	184492	571695	120626	184492	142923.75
Manufacturer#4	almond aquamarine floral ivory bisque	120626	571695	120626	184492	142923.75
Manufacturer#5	almond azure blanched chiffon midnight	146448	928432	101810	178969	154738.66666666666
Manufacturer#5	almond aquamarine dodger light gainsboro	101810	928432	101810	178969	154738.66666666666
Manufacturer#5	almond antique medium spring khaki	161166	928432	101810	178969	154738.66666666666
Manufacturer#5	almond antique blue firebrick mint	178969	928432	101810	178969	154738.66666666666
Manufacturer#5	almond antique medium spring khaki	161166	928432	101810	178969	154738.66666666666
Manufacturer#5	almond antique sky peru orange	178873	928432	101810	178969	154738.66666666666
Manufacturer#2	almond aquamarine rose maroon antique	90066	1272468	90066	203198	159058.5
Manufacturer#2	almond aquamarine rose maroon antique	169866	1272468	90066	203198	159058.5
Manufacturer#2	almond antique violet turquoise frosted	180070	1272468	90066	203198	159058.5
Manufacturer#2	almond antique violet chocolate turquoise	169068	1272468	90066	203198	159058.5
Manufacturer#2	almond antique violet turquoise frosted	180070	1272468	90066	203198	159058.5
Manufacturer#2	almond aquamarine sandy cyan gainsboro	100060	1272468	90066	203198	159058.5
Manufacturer#2	almond aquamarine midnight light salmon	203198	1272468	90066	203198	159058.5
Manufacturer#2	almond antique violet turquoise frosted	180070	1272468	90066	203198	159058.5
Manufacturer#1	almond antique chartreuse lavender yellow	175376	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond aquamarine pink moccasin thistle	163266	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond aquamarine pink moccasin thistle	163266	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond antique chartreuse lavender yellow	175376	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond aquamarine burnished black steel	141442	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond antique burnished rose metallic	117315	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond antique salmon chartreuse burlywood	160259	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond antique chartreuse lavender yellow	175376	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond antique burnished rose metallic	117315	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond antique chartreuse lavender yellow	175376	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond aquamarine pink moccasin thistle	163266	1727633	117315	175376	157057.54545454544
Manufacturer#3	almond antique forest lavender goldenrod	59027	638615	5539	192298	91230.71428571429
Manufacturer#3	almond antique metallic orange dim	5539	638615	5539	192298	91230.71428571429
Manufacturer#3	almond antique forest lavender goldenrod	119027	638615	5539	192298	91230.71428571429
Manufacturer#3	almond antique olive coral navajo	133729	638615	5539	192298	91230.71428571429
Manufacturer#3	almond antique misty red olive	192298	638615	5539	192298	91230.71428571429
Manufacturer#3	almond antique forest lavender goldenrod	119027	638615	5539	192298	91230.71428571429
Manufacturer#3	almond antique forest lavender goldenrod	NULL	638615	5539	192298	91230.71428571429
Manufacturer#3	almond antique chartreuse khaki white	9968	638615	5539	192298	91230.71428571429
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_bigint,
sum(p_bigint) over(partition by p_mfgr order by p_name) as s,
min(p_bigint) over(partition by p_mfgr order by p_name) as mi,
max(p_bigint) over(partition by p_mfgr order by p_name) as ma,
avg(p_bigint) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc_long
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_bigint,
sum(p_bigint) over(partition by p_mfgr order by p_name) as s,
min(p_bigint) over(partition by p_mfgr order by p_name) as mi,
max(p_bigint) over(partition by p_mfgr order by p_name) as ma,
avg(p_bigint) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc_long
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc_long
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_bigint:bigint, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), p_name (type: string)
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [0, 1]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [0]
                        valueColumnNums: [2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_bigint (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_bigint:bigint
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: aa
                reduceColumnSortOrder: ++
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    dataColumns: KEY.reducesinkkey0:string, KEY.reducesinkkey1:string, VALUE._col0:bigint
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, bigint, bigint, double]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: bigint)
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2]
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: bigint
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: sum_window_0
                              arguments: _col2
                              name: sum
                              window function: GenericUDAFSumLong
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: min_window_1
                              arguments: _col2
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: max_window_2
                              arguments: _col2
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: avg_window_3
                              arguments: _col2
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: RANGE PRECEDING(MAX)~CURRENT
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorLongSum, VectorPTFEvaluatorLongMin, VectorPTFEvaluatorLongMax, VectorPTFEvaluatorLongAvg]
                      functionInputExpressions: [col 2:bigint, col 2:bigint, col 2:bigint, col 2:bigint]
                      functionNames: [sum, min, max, avg]
                      keyInputColumns: [0, 1]
                      native: true
                      nonKeyInputColumns: [2]
                      orderExpressions: [col 1:string]
                      outputColumns: [3, 4, 5, 6, 0, 1, 2]
                      outputTypes: [bigint, bigint, bigint, double, string, string, bigint]
                      partitionExpressions: [col 0:string]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint), sum_window_0 (type: bigint), min_window_1 (type: bigint), max_window_2 (type: bigint), avg_window_3 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6]
                    Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 10344 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_bigint,
sum(p_bigint) over(partition by p_mfgr order by p_name) as s,
min(p_bigint) over(partition by p_mfgr order by p_name) as mi,
max(p_bigint) over(partition by p_mfgr order by p_name) as ma,
avg(p_bigint) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc_long
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc_long
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_bigint,
sum(p_bigint) over(partition by p_mfgr order by p_name) as s,
min(p_bigint) over(partition by p_mfgr order by p_name) as mi,
max(p_bigint) over(partition by p_mfgr order by p_name) as ma,
avg(p_bigint) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc_long
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc_long
#### A masked pattern was here ####
p_mfgr	p_name	p_bigint	s	mi	ma	av
Manufacturer#1	almond antique burnished rose metallic	117315	234630	117315	117315	117315.0
Manufacturer#1	almond antique burnished rose metallic	117315	234630	117315	117315	117315.0
Manufacturer#1	almond antique chartreuse lavender yellow	175376	936134	117315	175376	156022.33333333334
Manufacturer#1	almond antique chartreuse lavender yellow	175376	936134	117315	175376	156022.33333333334
Manufacturer#1	almond antique chartreuse lavender yellow	175376	936134	117315	175376	156022.33333333334
Manufacturer#1	almond antique chartreuse lavender yellow	175376	936134	117315	175376	156022.33333333334
Manufacturer#1	almond antique salmon chartreuse burlywood	160259	1096393	117315	175376	156627.57142857142
Manufacturer#1	almond aquamarine burnished black steel	141442	1237835	117315	175376	154729.375
Manufacturer#1	almond aquamarine pink moccasin thistle	163266	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond aquamarine pink moccasin thistle	163266	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond aquamarine pink moccasin thistle	163266	1727633	117315	175376	157057.54545454544
Manufacturer#2	almond antique violet chocolate turquoise	169068	169068	169068	169068	169068.0
Manufacturer#2	almond antique violet turquoise frosted	180070	709278	169068	180070	177319.5
Manufacturer#2	almond antique violet turquoise frosted	180070	709278	169068	180070	177319.5
Manufacturer#2	almond antique violet turquoise frosted	180070	709278	169068	180070	177319.5
Manufacturer#2	almond aquamarine midnight light salmon	203198	912476	169068	203198	182495.2
Manufacturer#2	almond aquamarine rose maroon antique	90066	1172408	90066	203198	167486.85714285713
Manufacturer#2	almond aquamarine rose maroon antique	169866	1172408	90066	203198	167486.85714285713
Manufacturer#2	almond aquamarine sandy cyan gainsboro	100060	1272468	90066	203198	159058.5
Manufacturer#3	almond antique chartreuse khaki white	9968	9968	9968	9968	9968.0
Manufacturer#3	almond antique forest lavender goldenrod	59027	307049	9968	119027	76762.25
Manufacturer#3	almond antique forest lavender goldenrod	NULL	307049	9968	119027	76762.25
Manufacturer#3	almond antique forest lavender goldenrod	119027	307049	9968	119027	76762.25
Manufacturer#3	almond antique forest lavender goldenrod	119027	307049	9968	119027	76762.25
Manufacturer#3	almond antique metallic orange dim	5539	312588	5539	119027	62517.6
Manufacturer#3	almond antique misty red olive	192298	504886	5539	192298	84147.66666666667
Manufacturer#3	almond antique olive coral navajo	133729	638615	5539	192298	91230.71428571429
Manufacturer#4	almond antique gainsboro frosted violet	NULL	NULL	NULL	NULL	NULL
Manufacturer#4	almond antique violet mint lemon	137542	137542	137542	137542	137542.0
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	258168	120626	137542	129084.0
Manufacturer#4	almond aquamarine floral ivory bisque	120626	258168	120626	137542	129084.0
Manufacturer#4	almond aquamarine yellow dodger mint	184492	442660	120626	184492	147553.33333333334
Manufacturer#4	almond azure aquamarine papaya violet	129035	571695	120626	184492	142923.75
Manufacturer#5	almond antique blue firebrick mint	178969	178969	178969	178969	178969.0
Manufacturer#5	almond antique medium spring khaki	161166	501301	161166	178969	167100.33333333334
Manufacturer#5	almond antique medium spring khaki	161166	501301	161166	178969	167100.33333333334
Manufacturer#5	almond antique sky peru orange	178873	680174	161166	178969	170043.5
Manufacturer#5	almond aquamarine dodger light gainsboro	101810	781984	101810	178969	156396.8
Manufacturer#5	almond azure blanched chiffon midnight	146448	928432	101810	178969	154738.66666666666
PREHOOK: query: explain vectorization detail
select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 4216 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string)
                    sort order: +
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkStringOperator
                        keyColumnNums: [0]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        valueColumnNums: [2]
                    Statistics: Num rows: 40 Data size: 4216 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 2
                    dataColumns: KEY.reducesinkkey0:string, VALUE._col1:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col1 (type: double)
                outputColumnNames: _col0, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1]
                Statistics: Num rows: 40 Data size: 14936 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: rank_window_0
                              arguments: _col0
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorRank]
                      functionInputExpressions: [col 0:string]
                      functionNames: [rank]
                      keyInputColumns: [0]
                      native: true
                      nonKeyInputColumns: [1]
                      orderExpressions: [col 0:string]
                      outputColumns: [2, 0, 1]
                      outputTypes: [int, string, double]
                      streamingColumns: [2]
                  Statistics: Num rows: 40 Data size: 14936 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col2 (type: double), rank_window_0 (type: int)
                    outputColumnNames: _col0, _col1, _col2
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 1, 2]
                    Statistics: Num rows: 40 Data size: 4344 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 4344 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_retailprice	r
Manufacturer#4	1290.35	1
Manufacturer#4	1375.42	1
Manufacturer#4	NULL	1
Manufacturer#4	NULL	1
Manufacturer#4	1844.92	1
Manufacturer#4	1206.26	1
Manufacturer#5	1464.48	1
Manufacturer#5	1018.1	1
Manufacturer#5	1611.66	1
Manufacturer#5	1789.69	1
Manufacturer#5	1611.66	1
Manufacturer#5	1788.73	1
Manufacturer#2	900.66	1
Manufacturer#2	1698.66	1
Manufacturer#2	1800.7	1
Manufacturer#2	1690.68	1
Manufacturer#2	1800.7	1
Manufacturer#2	1000.6	1
Manufacturer#2	2031.98	1
Manufacturer#2	1800.7	1
Manufacturer#1	1753.76	1
Manufacturer#1	1632.66	1
Manufacturer#1	1632.66	1
Manufacturer#1	1753.76	1
Manufacturer#1	1414.42	1
Manufacturer#1	1173.15	1
Manufacturer#1	1602.59	1
Manufacturer#1	1753.76	1
Manufacturer#1	1173.15	1
Manufacturer#1	1753.76	1
Manufacturer#1	NULL	1
Manufacturer#1	1632.66	1
Manufacturer#3	590.27	1
Manufacturer#3	55.39	1
Manufacturer#3	1190.27	1
Manufacturer#3	1337.29	1
Manufacturer#3	1922.98	1
Manufacturer#3	1190.27	1
Manufacturer#3	NULL	1
Manufacturer#3	99.68	1
PREHOOK: query: explain vectorization detail
select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr order by p_name) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr order by p_name) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), p_name (type: string)
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [0, 1]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [0]
                        valueColumnNums: [2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: aa
                reduceColumnSortOrder: ++
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    dataColumns: KEY.reducesinkkey0:string, KEY.reducesinkkey1:string, VALUE._col0:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2]
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: rank_window_0
                              arguments: _col1
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorRank]
                      functionInputExpressions: [col 1:string]
                      functionNames: [rank]
                      keyInputColumns: [0, 1]
                      native: true
                      nonKeyInputColumns: [2]
                      orderExpressions: [col 1:string]
                      outputColumns: [3, 0, 1, 2]
                      outputTypes: [int, string, string, double]
                      partitionExpressions: [col 0:string]
                      streamingColumns: [3]
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col2 (type: double), rank_window_0 (type: int)
                    outputColumnNames: _col0, _col1, _col2
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 2, 3]
                    Statistics: Num rows: 40 Data size: 4344 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 4344 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr order by p_name) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr order by p_name) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_retailprice	r
Manufacturer#1	1173.15	1
Manufacturer#1	1173.15	1
Manufacturer#1	1753.76	3
Manufacturer#1	1753.76	3
Manufacturer#1	1753.76	3
Manufacturer#1	1753.76	3
Manufacturer#1	1602.59	7
Manufacturer#1	1414.42	8
Manufacturer#1	1632.66	9
Manufacturer#1	NULL	9
Manufacturer#1	1632.66	9
Manufacturer#1	1632.66	9
Manufacturer#2	1690.68	1
Manufacturer#2	1800.7	2
Manufacturer#2	1800.7	2
Manufacturer#2	1800.7	2
Manufacturer#2	2031.98	5
Manufacturer#2	900.66	6
Manufacturer#2	1698.66	6
Manufacturer#2	1000.6	8
Manufacturer#3	99.68	1
Manufacturer#3	590.27	2
Manufacturer#3	NULL	2
Manufacturer#3	1190.27	2
Manufacturer#3	1190.27	2
Manufacturer#3	55.39	6
Manufacturer#3	1922.98	7
Manufacturer#3	1337.29	8
Manufacturer#4	NULL	1
Manufacturer#4	1375.42	2
Manufacturer#4	NULL	3
Manufacturer#4	1206.26	3
Manufacturer#4	1844.92	5
Manufacturer#4	1290.35	6
Manufacturer#5	1789.69	1
Manufacturer#5	1611.66	2
Manufacturer#5	1611.66	2
Manufacturer#5	1788.73	4
Manufacturer#5	1018.1	5
Manufacturer#5	1464.48	6
PREHOOK: query: explain vectorization detail
select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), CASE WHEN ((p_mfgr = 'Manufacturer#2')) THEN (TIMESTAMP'2000-01-01 00:00:00.0') ELSE (CAST( null AS TIMESTAMP)) END (type: timestamp)
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string), CASE WHEN ((p_mfgr = 'Manufacturer#2')) THEN (TIMESTAMP'2000-01-01 00:00:00.0') ELSE (CAST( null AS TIMESTAMP)) END (type: timestamp)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkMultiKeyOperator
                        keyColumnNums: [0, 6]
                        keyExpressions: IfExprColumnNull(col 4:boolean, col 5:timestamp, null)(children: StringGroupColEqualStringScalar(col 0:string, val Manufacturer#2) -> 4:boolean, ConstantVectorExpression(val 2000-01-01 00:00:00.0) -> 5:timestamp) -> 6:timestamp
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        valueColumnNums: [1, 2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_name (type: string), p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, timestamp, timestamp]
        Reducer 2 
            Execution mode: llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                notVectorizedReason: PTF operator: More than 1 argument expression of aggregation function rank
                vectorized: false
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST, CASE WHEN ((_col0 = 'Manufacturer#2')) THEN (TIMESTAMP'2000-01-01 00:00:00.0') ELSE (CAST( null AS TIMESTAMP)) END ASC NULLS FIRST
                        partition by: _col0, CASE WHEN ((_col0 = 'Manufacturer#2')) THEN (TIMESTAMP'2000-01-01 00:00:00.0') ELSE (CAST( null AS TIMESTAMP)) END
                        raw input shape:
                        window functions:
                            window function definition
                              alias: rank_window_0
                              arguments: _col0, CASE WHEN ((_col0 = 'Manufacturer#2')) THEN (TIMESTAMP'2000-01-01 00:00:00.0') ELSE (CAST( null AS TIMESTAMP)) END
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), rank_window_0 (type: int)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 40 Data size: 9224 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 40 Data size: 9224 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	r
Manufacturer#1	almond aquamarine burnished black steel	1414.42	1
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	1
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	1
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1
Manufacturer#1	almond antique burnished rose metallic	1173.15	1
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	1
Manufacturer#1	almond antique burnished rose metallic	1173.15	1
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	1
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	1
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1
Manufacturer#2	almond aquamarine rose maroon antique	900.66	1
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	1
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	1
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	1
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	1
Manufacturer#4	almond antique violet mint lemon	1375.42	1
Manufacturer#4	almond antique gainsboro frosted violet	NULL	1
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	1
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	1
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	1
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	1
Manufacturer#3	almond antique misty red olive	1922.98	1
Manufacturer#3	almond antique chartreuse khaki white	99.68	1
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	1
Manufacturer#3	almond antique metallic orange dim	55.39	1
Manufacturer#3	almond antique olive coral navajo	1337.29	1
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	1
Manufacturer#3	almond antique forest lavender goldenrod	590.27	1
Manufacturer#3	almond antique forest lavender goldenrod	NULL	1
Manufacturer#5	almond antique medium spring khaki	1611.66	1
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	1
Manufacturer#5	almond antique sky peru orange	1788.73	1
Manufacturer#5	almond antique medium spring khaki	1611.66	1
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	1
Manufacturer#5	almond antique blue firebrick mint	1789.69	1
PREHOOK: query: explain vectorization detail
select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end order by p_name) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end order by p_name) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), CASE WHEN ((p_mfgr = 'Manufacturer#2')) THEN (TIMESTAMP'2000-01-01 00:00:00.0') ELSE (CAST( null AS TIMESTAMP)) END (type: timestamp), p_name (type: string)
                    sort order: +++
                    Map-reduce partition columns: p_mfgr (type: string), CASE WHEN ((p_mfgr = 'Manufacturer#2')) THEN (TIMESTAMP'2000-01-01 00:00:00.0') ELSE (CAST( null AS TIMESTAMP)) END (type: timestamp)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [0, 6, 1]
                        keyExpressions: IfExprColumnNull(col 4:boolean, col 5:timestamp, null)(children: StringGroupColEqualStringScalar(col 0:string, val Manufacturer#2) -> 4:boolean, ConstantVectorExpression(val 2000-01-01 00:00:00.0) -> 5:timestamp) -> 6:timestamp
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [0, 9]
                        valueColumnNums: [2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, timestamp, timestamp, bigint, timestamp, timestamp]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: aaa
                reduceColumnSortOrder: +++
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 4
                    dataColumns: KEY.reducesinkkey0:string, KEY.reducesinkkey1:timestamp, KEY.reducesinkkey2:string, VALUE._col0:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, bigint, timestamp, timestamp]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey2 (type: string), VALUE._col0 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 2, 3]
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: _col0, CASE WHEN ((_col0 = 'Manufacturer#2')) THEN (TIMESTAMP'2000-01-01 00:00:00.0') ELSE (CAST( null AS TIMESTAMP)) END
                        raw input shape:
                        window functions:
                            window function definition
                              alias: rank_window_0
                              arguments: _col1
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorRank]
                      functionInputExpressions: [col 2:string]
                      functionNames: [rank]
                      keyInputColumns: [0, 2]
                      native: true
                      nonKeyInputColumns: [3]
                      orderExpressions: [col 2:string]
                      outputColumns: [4, 0, 2, 3]
                      outputTypes: [int, string, string, double]
                      partitionExpressions: [col 0:string, IfExprColumnNull(col 5:boolean, col 6:timestamp, null)(children: StringGroupColEqualStringScalar(col 0:string, val Manufacturer#2) -> 5:boolean, ConstantVectorExpression(val 2000-01-01 00:00:00.0) -> 6:timestamp) -> 7:timestamp]
                      streamingColumns: [4]
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), rank_window_0 (type: int)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 2, 3, 4]
                    Statistics: Num rows: 40 Data size: 9224 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 9224 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end order by p_name) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end order by p_name) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	r
Manufacturer#1	almond antique burnished rose metallic	1173.15	1
Manufacturer#1	almond antique burnished rose metallic	1173.15	1
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	7
Manufacturer#1	almond aquamarine burnished black steel	1414.42	8
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	9
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	9
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	9
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	9
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	2
Manufacturer#2	almond antique violet turquoise frosted	1800.7	2
Manufacturer#2	almond antique violet turquoise frosted	1800.7	2
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	5
Manufacturer#2	almond aquamarine rose maroon antique	900.66	6
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	6
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	8
Manufacturer#3	almond antique chartreuse khaki white	99.68	1
Manufacturer#3	almond antique forest lavender goldenrod	590.27	2
Manufacturer#3	almond antique forest lavender goldenrod	NULL	2
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	2
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	2
Manufacturer#3	almond antique metallic orange dim	55.39	6
Manufacturer#3	almond antique misty red olive	1922.98	7
Manufacturer#3	almond antique olive coral navajo	1337.29	8
Manufacturer#4	almond antique gainsboro frosted violet	NULL	1
Manufacturer#4	almond antique violet mint lemon	1375.42	2
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	3
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	3
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	5
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	6
Manufacturer#5	almond antique blue firebrick mint	1789.69	1
Manufacturer#5	almond antique medium spring khaki	1611.66	2
Manufacturer#5	almond antique medium spring khaki	1611.66	2
Manufacturer#5	almond antique sky peru orange	1788.73	4
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	5
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	6
PREHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv,
count(p_retailprice) over(partition by p_mfgr) as c,
count(*) over(partition by p_mfgr) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv,
count(p_retailprice) over(partition by p_mfgr) as c,
count(*) over(partition by p_mfgr) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	rn	r	dr	fv	lv	c	cs
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	1	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond antique violet mint lemon	1375.42	2	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	3	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond antique gainsboro frosted violet	NULL	4	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	5	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	6	1	1	1290.35	1206.26	4	6
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	1	1	1	1464.48	1788.73	6	6
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	2	1	1	1464.48	1788.73	6	6
Manufacturer#5	almond antique medium spring khaki	1611.66	3	1	1	1464.48	1788.73	6	6
Manufacturer#5	almond antique blue firebrick mint	1789.69	4	1	1	1464.48	1788.73	6	6
Manufacturer#5	almond antique medium spring khaki	1611.66	5	1	1	1464.48	1788.73	6	6
Manufacturer#5	almond antique sky peru orange	1788.73	6	1	1	1464.48	1788.73	6	6
Manufacturer#2	almond aquamarine rose maroon antique	900.66	1	1	1	900.66	1800.7	8	8
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	2	1	1	900.66	1800.7	8	8
Manufacturer#2	almond antique violet turquoise frosted	1800.7	3	1	1	900.66	1800.7	8	8
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	4	1	1	900.66	1800.7	8	8
Manufacturer#2	almond antique violet turquoise frosted	1800.7	5	1	1	900.66	1800.7	8	8
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	6	1	1	900.66	1800.7	8	8
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	7	1	1	900.66	1800.7	8	8
Manufacturer#2	almond antique violet turquoise frosted	1800.7	8	1	1	900.66	1800.7	8	8
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	2	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	3	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	4	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine burnished black steel	1414.42	5	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique burnished rose metallic	1173.15	6	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	7	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	8	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique burnished rose metallic	1173.15	9	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	10	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	11	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	12	1	1	1753.76	1632.66	11	12
Manufacturer#3	almond antique forest lavender goldenrod	590.27	1	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique metallic orange dim	55.39	2	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	3	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique olive coral navajo	1337.29	4	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique misty red olive	1922.98	5	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	6	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique forest lavender goldenrod	NULL	7	1	1	590.27	99.68	7	8
Manufacturer#3	almond antique chartreuse khaki white	99.68	8	1	1	590.27	99.68	7	8
PREHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name) as rn,
rank() over(partition by p_mfgr order by p_name) as r,
dense_rank() over(partition by p_mfgr order by p_name) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name) as c,
count(*) over(partition by p_mfgr order by p_name) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name) as rn,
rank() over(partition by p_mfgr order by p_name) as r,
dense_rank() over(partition by p_mfgr order by p_name) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name) as c,
count(*) over(partition by p_mfgr order by p_name) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	rn	r	dr	fv	lv	c	cs
Manufacturer#1	almond antique burnished rose metallic	1173.15	1	1	1	1173.15	1173.15	2	2
Manufacturer#1	almond antique burnished rose metallic	1173.15	2	1	1	1173.15	1173.15	2	2
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	4	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	5	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	6	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	7	7	3	1173.15	1602.59	7	7
Manufacturer#1	almond aquamarine burnished black steel	1414.42	8	8	4	1173.15	1414.42	8	8
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	9	9	5	1173.15	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	10	9	5	1173.15	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	11	9	5	1173.15	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	12	9	5	1173.15	1632.66	11	12
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1	1	1	1690.68	1690.68	1	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	2	2	2	1690.68	1800.7	4	4
Manufacturer#2	almond antique violet turquoise frosted	1800.7	3	2	2	1690.68	1800.7	4	4
Manufacturer#2	almond antique violet turquoise frosted	1800.7	4	2	2	1690.68	1800.7	4	4
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	5	5	3	1690.68	2031.98	5	5
Manufacturer#2	almond aquamarine rose maroon antique	900.66	6	6	4	1690.68	1698.66	7	7
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	7	6	4	1690.68	1698.66	7	7
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	8	8	5	1690.68	1000.6	8	8
Manufacturer#3	almond antique chartreuse khaki white	99.68	1	1	1	99.68	99.68	1	1
Manufacturer#3	almond antique forest lavender goldenrod	590.27	2	2	2	99.68	1190.27	4	5
Manufacturer#3	almond antique forest lavender goldenrod	NULL	3	2	2	99.68	1190.27	4	5
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	4	2	2	99.68	1190.27	4	5
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	5	2	2	99.68	1190.27	4	5
Manufacturer#3	almond antique metallic orange dim	55.39	6	6	3	99.68	55.39	5	6
Manufacturer#3	almond antique misty red olive	1922.98	7	7	4	99.68	1922.98	6	7
Manufacturer#3	almond antique olive coral navajo	1337.29	8	8	5	99.68	1337.29	7	8
Manufacturer#4	almond antique gainsboro frosted violet	NULL	1	1	1	NULL	NULL	0	1
Manufacturer#4	almond antique violet mint lemon	1375.42	2	2	2	NULL	1375.42	1	2
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	3	3	3	NULL	1206.26	2	4
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	4	3	3	NULL	1206.26	2	4
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	5	5	4	NULL	1844.92	3	5
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	6	6	5	NULL	1290.35	4	6
Manufacturer#5	almond antique blue firebrick mint	1789.69	1	1	1	1789.69	1789.69	1	1
Manufacturer#5	almond antique medium spring khaki	1611.66	2	2	2	1789.69	1611.66	3	3
Manufacturer#5	almond antique medium spring khaki	1611.66	3	2	2	1789.69	1611.66	3	3
Manufacturer#5	almond antique sky peru orange	1788.73	4	4	3	1789.69	1788.73	4	4
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	5	5	4	1789.69	1018.1	5	5
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	6	6	5	1789.69	1464.48	6	6
PREHOOK: query: explain vectorization detail
select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 4216 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string)
                    sort order: +
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkStringOperator
                        keyColumnNums: [0]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        valueColumnNums: [2]
                    Statistics: Num rows: 40 Data size: 4216 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 2
                    dataColumns: KEY.reducesinkkey0:string, VALUE._col1:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col1 (type: double)
                outputColumnNames: _col0, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1]
                Statistics: Num rows: 40 Data size: 14936 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: rank_window_0
                              arguments: _col0
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorRank]
                      functionInputExpressions: [col 0:string]
                      functionNames: [rank]
                      keyInputColumns: [0]
                      native: true
                      nonKeyInputColumns: [1]
                      orderExpressions: [col 0:string]
                      outputColumns: [2, 0, 1]
                      outputTypes: [int, string, double]
                      streamingColumns: [2]
                  Statistics: Num rows: 40 Data size: 14936 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col2 (type: double), rank_window_0 (type: int)
                    outputColumnNames: _col0, _col1, _col2
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 1, 2]
                    Statistics: Num rows: 40 Data size: 4344 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 4344 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_retailprice	r
Manufacturer#4	1290.35	1
Manufacturer#4	1375.42	1
Manufacturer#4	NULL	1
Manufacturer#4	NULL	1
Manufacturer#4	1844.92	1
Manufacturer#4	1206.26	1
Manufacturer#5	1464.48	1
Manufacturer#5	1018.1	1
Manufacturer#5	1611.66	1
Manufacturer#5	1789.69	1
Manufacturer#5	1611.66	1
Manufacturer#5	1788.73	1
Manufacturer#2	900.66	1
Manufacturer#2	1698.66	1
Manufacturer#2	1800.7	1
Manufacturer#2	1690.68	1
Manufacturer#2	1800.7	1
Manufacturer#2	1000.6	1
Manufacturer#2	2031.98	1
Manufacturer#2	1800.7	1
Manufacturer#1	1753.76	1
Manufacturer#1	1632.66	1
Manufacturer#1	1632.66	1
Manufacturer#1	1753.76	1
Manufacturer#1	1414.42	1
Manufacturer#1	1173.15	1
Manufacturer#1	1602.59	1
Manufacturer#1	1753.76	1
Manufacturer#1	1173.15	1
Manufacturer#1	1753.76	1
Manufacturer#1	NULL	1
Manufacturer#1	1632.66	1
Manufacturer#3	590.27	1
Manufacturer#3	55.39	1
Manufacturer#3	1190.27	1
Manufacturer#3	1337.29	1
Manufacturer#3	1922.98	1
Manufacturer#3	1190.27	1
Manufacturer#3	NULL	1
Manufacturer#3	99.68	1
PREHOOK: query: explain vectorization detail
select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr order by p_name) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr order by p_name) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), p_name (type: string)
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [0, 1]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [0]
                        valueColumnNums: [2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: aa
                reduceColumnSortOrder: ++
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    dataColumns: KEY.reducesinkkey0:string, KEY.reducesinkkey1:string, VALUE._col0:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2]
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: rank_window_0
                              arguments: _col1
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorRank]
                      functionInputExpressions: [col 1:string]
                      functionNames: [rank]
                      keyInputColumns: [0, 1]
                      native: true
                      nonKeyInputColumns: [2]
                      orderExpressions: [col 1:string]
                      outputColumns: [3, 0, 1, 2]
                      outputTypes: [int, string, string, double]
                      partitionExpressions: [col 0:string]
                      streamingColumns: [3]
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col2 (type: double), rank_window_0 (type: int)
                    outputColumnNames: _col0, _col1, _col2
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 2, 3]
                    Statistics: Num rows: 40 Data size: 4344 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 4344 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr order by p_name) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr order by p_name) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_retailprice	r
Manufacturer#1	1173.15	1
Manufacturer#1	1173.15	1
Manufacturer#1	1753.76	3
Manufacturer#1	1753.76	3
Manufacturer#1	1753.76	3
Manufacturer#1	1753.76	3
Manufacturer#1	1602.59	7
Manufacturer#1	1414.42	8
Manufacturer#1	1632.66	9
Manufacturer#1	NULL	9
Manufacturer#1	1632.66	9
Manufacturer#1	1632.66	9
Manufacturer#2	1690.68	1
Manufacturer#2	1800.7	2
Manufacturer#2	1800.7	2
Manufacturer#2	1800.7	2
Manufacturer#2	2031.98	5
Manufacturer#2	900.66	6
Manufacturer#2	1698.66	6
Manufacturer#2	1000.6	8
Manufacturer#3	99.68	1
Manufacturer#3	590.27	2
Manufacturer#3	NULL	2
Manufacturer#3	1190.27	2
Manufacturer#3	1190.27	2
Manufacturer#3	55.39	6
Manufacturer#3	1922.98	7
Manufacturer#3	1337.29	8
Manufacturer#4	NULL	1
Manufacturer#4	1375.42	2
Manufacturer#4	NULL	3
Manufacturer#4	1206.26	3
Manufacturer#4	1844.92	5
Manufacturer#4	1290.35	6
Manufacturer#5	1789.69	1
Manufacturer#5	1611.66	2
Manufacturer#5	1611.66	2
Manufacturer#5	1788.73	4
Manufacturer#5	1018.1	5
Manufacturer#5	1464.48	6
PREHOOK: query: explain vectorization detail
select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end order by p_name) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end order by p_name) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), CASE WHEN ((p_mfgr = 'Manufacturer#2')) THEN (TIMESTAMP'2000-01-01 00:00:00.0') ELSE (CAST( null AS TIMESTAMP)) END (type: timestamp), p_name (type: string)
                    sort order: +++
                    Map-reduce partition columns: p_mfgr (type: string), CASE WHEN ((p_mfgr = 'Manufacturer#2')) THEN (TIMESTAMP'2000-01-01 00:00:00.0') ELSE (CAST( null AS TIMESTAMP)) END (type: timestamp)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [0, 6, 1]
                        keyExpressions: IfExprColumnNull(col 4:boolean, col 5:timestamp, null)(children: StringGroupColEqualStringScalar(col 0:string, val Manufacturer#2) -> 4:boolean, ConstantVectorExpression(val 2000-01-01 00:00:00.0) -> 5:timestamp) -> 6:timestamp
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [0, 9]
                        valueColumnNums: [2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, timestamp, timestamp, bigint, timestamp, timestamp]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: aaa
                reduceColumnSortOrder: +++
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 4
                    dataColumns: KEY.reducesinkkey0:string, KEY.reducesinkkey1:timestamp, KEY.reducesinkkey2:string, VALUE._col0:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, bigint, timestamp, timestamp]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey2 (type: string), VALUE._col0 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 2, 3]
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: _col0, CASE WHEN ((_col0 = 'Manufacturer#2')) THEN (TIMESTAMP'2000-01-01 00:00:00.0') ELSE (CAST( null AS TIMESTAMP)) END
                        raw input shape:
                        window functions:
                            window function definition
                              alias: rank_window_0
                              arguments: _col1
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  PTF Vectorization:
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorRank]
                      functionInputExpressions: [col 2:string]
                      functionNames: [rank]
                      keyInputColumns: [0, 2]
                      native: true
                      nonKeyInputColumns: [3]
                      orderExpressions: [col 2:string]
                      outputColumns: [4, 0, 2, 3]
                      outputTypes: [int, string, string, double]
                      partitionExpressions: [col 0:string, IfExprColumnNull(col 5:boolean, col 6:timestamp, null)(children: StringGroupColEqualStringScalar(col 0:string, val Manufacturer#2) -> 5:boolean, ConstantVectorExpression(val 2000-01-01 00:00:00.0) -> 6:timestamp) -> 7:timestamp]
                      streamingColumns: [4]
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), rank_window_0 (type: int)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 2, 3, 4]
                    Statistics: Num rows: 40 Data size: 9224 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 9224 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end order by p_name) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end order by p_name) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	r
Manufacturer#1	almond antique burnished rose metallic	1173.15	1
Manufacturer#1	almond antique burnished rose metallic	1173.15	1
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	7
Manufacturer#1	almond aquamarine burnished black steel	1414.42	8
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	9
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	9
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	9
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	9
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	2
Manufacturer#2	almond antique violet turquoise frosted	1800.7	2
Manufacturer#2	almond antique violet turquoise frosted	1800.7	2
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	5
Manufacturer#2	almond aquamarine rose maroon antique	900.66	6
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	6
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	8
Manufacturer#3	almond antique chartreuse khaki white	99.68	1
Manufacturer#3	almond antique forest lavender goldenrod	590.27	2
Manufacturer#3	almond antique forest lavender goldenrod	NULL	2
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	2
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	2
Manufacturer#3	almond antique metallic orange dim	55.39	6
Manufacturer#3	almond antique misty red olive	1922.98	7
Manufacturer#3	almond antique olive coral navajo	1337.29	8
Manufacturer#4	almond antique gainsboro frosted violet	NULL	1
Manufacturer#4	almond antique violet mint lemon	1375.42	2
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	3
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	3
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	5
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	6
Manufacturer#5	almond antique blue firebrick mint	1789.69	1
Manufacturer#5	almond antique medium spring khaki	1611.66	2
Manufacturer#5	almond antique medium spring khaki	1611.66	2
Manufacturer#5	almond antique sky peru orange	1788.73	4
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	5
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	6
PREHOOK: query: explain vectorization detail
select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_retailprice:double, 3:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), CASE WHEN ((p_mfgr = 'Manufacturer#2')) THEN (TIMESTAMP'2000-01-01 00:00:00.0') ELSE (CAST( null AS TIMESTAMP)) END (type: timestamp)
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string), CASE WHEN ((p_mfgr = 'Manufacturer#2')) THEN (TIMESTAMP'2000-01-01 00:00:00.0') ELSE (CAST( null AS TIMESTAMP)) END (type: timestamp)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkMultiKeyOperator
                        keyColumnNums: [0, 6]
                        keyExpressions: IfExprColumnNull(col 4:boolean, col 5:timestamp, null)(children: StringGroupColEqualStringScalar(col 0:string, val Manufacturer#2) -> 4:boolean, ConstantVectorExpression(val 2000-01-01 00:00:00.0) -> 5:timestamp) -> 6:timestamp
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        valueColumnNums: [1, 2]
                    Statistics: Num rows: 40 Data size: 9096 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_name (type: string), p_retailprice (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, timestamp, timestamp]
        Reducer 2 
            Execution mode: llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                notVectorizedReason: PTF operator: More than 1 argument expression of aggregation function rank
                vectorized: false
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: double)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST, CASE WHEN ((_col0 = 'Manufacturer#2')) THEN (TIMESTAMP'2000-01-01 00:00:00.0') ELSE (CAST( null AS TIMESTAMP)) END ASC NULLS FIRST
                        partition by: _col0, CASE WHEN ((_col0 = 'Manufacturer#2')) THEN (TIMESTAMP'2000-01-01 00:00:00.0') ELSE (CAST( null AS TIMESTAMP)) END
                        raw input shape:
                        window functions:
                            window function definition
                              alias: rank_window_0
                              arguments: _col0, CASE WHEN ((_col0 = 'Manufacturer#2')) THEN (TIMESTAMP'2000-01-01 00:00:00.0') ELSE (CAST( null AS TIMESTAMP)) END
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 40 Data size: 19816 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), rank_window_0 (type: int)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 40 Data size: 9224 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 40 Data size: 9224 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	r
Manufacturer#1	almond aquamarine burnished black steel	1414.42	1
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	1
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	1
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1
Manufacturer#1	almond antique burnished rose metallic	1173.15	1
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	1
Manufacturer#1	almond antique burnished rose metallic	1173.15	1
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	1
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	1
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1
Manufacturer#2	almond aquamarine rose maroon antique	900.66	1
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	1
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	1
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	1
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	1
Manufacturer#4	almond antique violet mint lemon	1375.42	1
Manufacturer#4	almond antique gainsboro frosted violet	NULL	1
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	1
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	1
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	1
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	1
Manufacturer#3	almond antique misty red olive	1922.98	1
Manufacturer#3	almond antique chartreuse khaki white	99.68	1
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	1
Manufacturer#3	almond antique metallic orange dim	55.39	1
Manufacturer#3	almond antique olive coral navajo	1337.29	1
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	1
Manufacturer#3	almond antique forest lavender goldenrod	590.27	1
Manufacturer#3	almond antique forest lavender goldenrod	NULL	1
Manufacturer#5	almond antique medium spring khaki	1611.66	1
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	1
Manufacturer#5	almond antique sky peru orange	1788.73	1
Manufacturer#5	almond antique medium spring khaki	1611.66	1
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	1
Manufacturer#5	almond antique blue firebrick mint	1789.69	1
