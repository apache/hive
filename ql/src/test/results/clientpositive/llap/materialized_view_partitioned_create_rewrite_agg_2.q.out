PREHOOK: query: CREATE TABLE t1(a int, b int, c int, d string, e float) STORED AS ORC TBLPROPERTIES ('transactional' = 'true')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@t1
POSTHOOK: query: CREATE TABLE t1(a int, b int, c int, d string, e float) STORED AS ORC TBLPROPERTIES ('transactional' = 'true')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t1
PREHOOK: query: INSERT INTO t1(a, b, c, d, e) VALUES
(1, 1, 1, 'one', 1.1),
(1, 4, 1, 'one', 4.2),
(2, 2, 2, 'two', 2.2),
(1, 10, 1, 'one', 10.1),
(2, 2, 2, 'two', 2.2),
(1, 3, 1, 'one', 3.1),
(null, 4, null, 'unknown', 4.6),
(null, 4, 2, 'unknown', 4.7)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@t1
POSTHOOK: query: INSERT INTO t1(a, b, c, d, e) VALUES
(1, 1, 1, 'one', 1.1),
(1, 4, 1, 'one', 4.2),
(2, 2, 2, 'two', 2.2),
(1, 10, 1, 'one', 10.1),
(2, 2, 2, 'two', 2.2),
(1, 3, 1, 'one', 3.1),
(null, 4, null, 'unknown', 4.6),
(null, 4, 2, 'unknown', 4.7)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@t1
POSTHOOK: Lineage: t1.a SCRIPT []
POSTHOOK: Lineage: t1.b SCRIPT []
POSTHOOK: Lineage: t1.c SCRIPT []
POSTHOOK: Lineage: t1.d SCRIPT []
POSTHOOK: Lineage: t1.e SCRIPT []
PREHOOK: query: CREATE MATERIALIZED VIEW mat1 PARTITIONED ON (a, c, d) STORED AS ORC TBLPROPERTIES ('transactional'='true', 'transactional_properties'='insert_only') AS
SELECT a, sum(b) sumb, c, d, sum(e) sume FROM t1 GROUP BY a, c, d
PREHOOK: type: CREATE_MATERIALIZED_VIEW
PREHOOK: Input: default@t1
PREHOOK: Output: database:default
PREHOOK: Output: default@mat1
PREHOOK: Output: default@mat1
POSTHOOK: query: CREATE MATERIALIZED VIEW mat1 PARTITIONED ON (a, c, d) STORED AS ORC TBLPROPERTIES ('transactional'='true', 'transactional_properties'='insert_only') AS
SELECT a, sum(b) sumb, c, d, sum(e) sume FROM t1 GROUP BY a, c, d
POSTHOOK: type: CREATE_MATERIALIZED_VIEW
POSTHOOK: Input: default@t1
POSTHOOK: Output: database:default
POSTHOOK: Output: default@mat1
POSTHOOK: Output: default@mat1
POSTHOOK: Output: default@mat1@a=1/c=1/d=one
POSTHOOK: Output: default@mat1@a=2/c=2/d=two
POSTHOOK: Output: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=2/d=unknown
POSTHOOK: Output: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=__HIVE_DEFAULT_PARTITION__/d=unknown
POSTHOOK: Lineage: mat1.sumb EXPRESSION [(t1)t1.FieldSchema(name:b, type:int, comment:null), ]
POSTHOOK: Lineage: mat1.sume EXPRESSION [(t1)t1.FieldSchema(name:e, type:float, comment:null), ]
POSTHOOK: Lineage: mat1 PARTITION(a=1,c=1,d=one).sumb EXPRESSION [(t1)t1.FieldSchema(name:b, type:int, comment:null), ]
POSTHOOK: Lineage: mat1 PARTITION(a=1,c=1,d=one).sume EXPRESSION [(t1)t1.FieldSchema(name:e, type:float, comment:null), ]
POSTHOOK: Lineage: mat1 PARTITION(a=2,c=2,d=two).sumb EXPRESSION [(t1)t1.FieldSchema(name:b, type:int, comment:null), ]
POSTHOOK: Lineage: mat1 PARTITION(a=2,c=2,d=two).sume EXPRESSION [(t1)t1.FieldSchema(name:e, type:float, comment:null), ]
POSTHOOK: Lineage: mat1 PARTITION(a=__HIVE_DEFAULT_PARTITION__,c=2,d=unknown).sumb EXPRESSION [(t1)t1.FieldSchema(name:b, type:int, comment:null), ]
POSTHOOK: Lineage: mat1 PARTITION(a=__HIVE_DEFAULT_PARTITION__,c=2,d=unknown).sume EXPRESSION [(t1)t1.FieldSchema(name:e, type:float, comment:null), ]
POSTHOOK: Lineage: mat1 PARTITION(a=__HIVE_DEFAULT_PARTITION__,c=__HIVE_DEFAULT_PARTITION__,d=unknown).sumb EXPRESSION [(t1)t1.FieldSchema(name:b, type:int, comment:null), ]
POSTHOOK: Lineage: mat1 PARTITION(a=__HIVE_DEFAULT_PARTITION__,c=__HIVE_DEFAULT_PARTITION__,d=unknown).sume EXPRESSION [(t1)t1.FieldSchema(name:e, type:float, comment:null), ]
PREHOOK: query: INSERT INTO t1(a, b, c, d, e) VALUES
(1, 3, 1, 'one', 3.3),
(1, 110, 1, 'one', 110.11),
(null, 20, null, 'unknown', 20.22)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@t1
POSTHOOK: query: INSERT INTO t1(a, b, c, d, e) VALUES
(1, 3, 1, 'one', 3.3),
(1, 110, 1, 'one', 110.11),
(null, 20, null, 'unknown', 20.22)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@t1
POSTHOOK: Lineage: t1.a SCRIPT []
POSTHOOK: Lineage: t1.b SCRIPT []
POSTHOOK: Lineage: t1.c SCRIPT []
POSTHOOK: Lineage: t1.d SCRIPT []
POSTHOOK: Lineage: t1.e SCRIPT []
PREHOOK: query: EXPLAIN CBO
ALTER MATERIALIZED VIEW mat1 REBUILD
PREHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD
PREHOOK: Input: default@mat1
PREHOOK: Input: default@mat1@a=1/c=1/d=one
PREHOOK: Input: default@mat1@a=2/c=2/d=two
PREHOOK: Input: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=2/d=unknown
PREHOOK: Input: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=__HIVE_DEFAULT_PARTITION__/d=unknown
PREHOOK: Input: default@t1
PREHOOK: Output: default@mat1
POSTHOOK: query: EXPLAIN CBO
ALTER MATERIALIZED VIEW mat1 REBUILD
POSTHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD
POSTHOOK: Input: default@mat1
POSTHOOK: Input: default@mat1@a=1/c=1/d=one
POSTHOOK: Input: default@mat1@a=2/c=2/d=two
POSTHOOK: Input: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=2/d=unknown
POSTHOOK: Input: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=__HIVE_DEFAULT_PARTITION__/d=unknown
POSTHOOK: Input: default@t1
POSTHOOK: Output: default@mat1
CBO PLAN:
HiveProject(sumb=[$3], sume=[$4], a=[$0], c=[$1], d=[$2])
  HiveAggregate(group=[{0, 1, 2}], agg#0=[sum($3)], agg#1=[sum($4)])
    HiveProject(a=[$0], c=[$1], d=[$2], sumb=[$3], sume=[$4])
      HiveUnion(all=[true])
        HiveProject(a=[$0], c=[$1], d=[$2], sumb=[$3], sume=[$4])
          HiveSemiJoin(condition=[AND(IS NOT DISTINCT FROM($0, $5), IS NOT DISTINCT FROM($1, $6), IS NOT DISTINCT FROM($2, $7))], joinType=[semi])
            HiveProject(a=[$2], c=[$3], d=[$4], sumb=[$0], sume=[$1])
              HiveTableScan(table=[[default, mat1]], table:alias=[default.mat1])
            HiveProject(a=[$0], c=[$1], d=[$2])
              HiveAggregate(group=[{0, 2, 3}])
                HiveFilter(condition=[<(1, $7.writeid)])
                  HiveTableScan(table=[[default, t1]], table:alias=[t1])
        HiveProject(a=[$0], c=[$1], d=[$2], $f3=[$3], $f4=[$4])
          HiveAggregate(group=[{0, 2, 3}], agg#0=[sum($1)], agg#1=[sum($4)])
            HiveFilter(condition=[<(1, $7.writeid)])
              HiveTableScan(table=[[default, t1]], table:alias=[t1])

PREHOOK: query: EXPLAIN
ALTER MATERIALIZED VIEW mat1 REBUILD
PREHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD
PREHOOK: Input: default@mat1
PREHOOK: Input: default@mat1@a=1/c=1/d=one
PREHOOK: Input: default@mat1@a=2/c=2/d=two
PREHOOK: Input: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=2/d=unknown
PREHOOK: Input: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=__HIVE_DEFAULT_PARTITION__/d=unknown
PREHOOK: Input: default@t1
PREHOOK: Output: default@mat1
POSTHOOK: query: EXPLAIN
ALTER MATERIALIZED VIEW mat1 REBUILD
POSTHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD
POSTHOOK: Input: default@mat1
POSTHOOK: Input: default@mat1@a=1/c=1/d=one
POSTHOOK: Input: default@mat1@a=2/c=2/d=two
POSTHOOK: Input: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=2/d=unknown
POSTHOOK: Input: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=__HIVE_DEFAULT_PARTITION__/d=unknown
POSTHOOK: Input: default@t1
POSTHOOK: Output: default@mat1
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0
  Stage-4 depends on stages: Stage-3

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE), Union 3 (CONTAINS)
        Reducer 4 <- Union 3 (SIMPLE_EDGE)
        Reducer 6 <- Map 5 (SIMPLE_EDGE)
        Reducer 7 <- Map 5 (SIMPLE_EDGE), Union 3 (CONTAINS)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: default.mat1
                  Statistics: Num rows: 4 Data size: 832 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: a (type: int), c (type: int), d (type: string), sumb (type: bigint), sume (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4
                    Statistics: Num rows: 4 Data size: 832 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                      null sort order: zzz
                      sort order: +++
                      Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                      Statistics: Num rows: 4 Data size: 832 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col3 (type: bigint), _col4 (type: double)
            Execution mode: vectorized, llap
            LLAP IO: may be used (ACID table)
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: t1
                  filterExpr: (ROW__ID.writeid > 1L) (type: boolean)
                  Statistics: Num rows: 11 Data size: 1044 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (ROW__ID.writeid > 1L) (type: boolean)
                    Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: a (type: int), c (type: int), d (type: string)
                      outputColumnNames: a, c, d
                      Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        keys: a (type: int), c (type: int), d (type: string)
                        minReductionHashAggr: 0.4
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2
                        Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                          null sort order: zzz
                          sort order: +++
                          Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                          Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: a (type: int), b (type: int), c (type: int), d (type: string), e (type: float)
                      outputColumnNames: a, b, c, d, e
                      Statistics: Num rows: 3 Data size: 312 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: sum(b), sum(e)
                        keys: a (type: int), c (type: int), d (type: string)
                        minReductionHashAggr: 0.4
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4
                        Statistics: Num rows: 3 Data size: 336 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                          null sort order: zzz
                          sort order: +++
                          Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                          Statistics: Num rows: 3 Data size: 336 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col3 (type: bigint), _col4 (type: double)
            Execution mode: vectorized, llap
            LLAP IO: may be used (ACID table)
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col0 (type: int), _col1 (type: int), _col2 (type: string)
                  1 _col0 (type: int), _col1 (type: int), _col2 (type: string)
                nullSafes: [true, true, true]
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 4 Data size: 832 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: sum(_col3), sum(_col4)
                  keys: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                  minReductionHashAggr: 0.4285714
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4
                  Statistics: Num rows: 3 Data size: 624 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                    null sort order: zzz
                    sort order: +++
                    Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                    Statistics: Num rows: 3 Data size: 624 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col3 (type: bigint), _col4 (type: double)
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), sum(VALUE._col1)
                keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 3 Data size: 624 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col3 (type: bigint), _col4 (type: double), _col0 (type: int), _col1 (type: int), _col2 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4
                  Statistics: Num rows: 3 Data size: 624 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: bigint), _col1 (type: double), _col2 (type: int), _col3 (type: int), _col4 (type: string)
                    outputColumnNames: sumb, sume, a, c, d
                    Statistics: Num rows: 3 Data size: 624 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: min(sumb), max(sumb), count(1), count(sumb), compute_bit_vector_hll(sumb), min(sume), max(sume), count(sume), compute_bit_vector_hll(sume)
                      keys: a (type: int), c (type: int), d (type: string)
                      mode: complete
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11
                      Statistics: Num rows: 3 Data size: 1608 Basic stats: COMPLETE Column stats: COMPLETE
                      Select Operator
                        expressions: 'LONG' (type: string), _col3 (type: bigint), _col4 (type: bigint), (_col5 - _col6) (type: bigint), COALESCE(ndv_compute_bit_vector(_col7),0) (type: bigint), _col7 (type: binary), 'DOUBLE' (type: string), _col8 (type: double), _col9 (type: double), (_col5 - _col10) (type: bigint), COALESCE(ndv_compute_bit_vector(_col11),0) (type: bigint), _col11 (type: binary), _col0 (type: int), _col1 (type: int), _col2 (type: string)
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14
                        Statistics: Num rows: 3 Data size: 2166 Basic stats: COMPLETE Column stats: COMPLETE
                        File Output Operator
                          compressed: false
                          Statistics: Num rows: 3 Data size: 2166 Basic stats: COMPLETE Column stats: COMPLETE
                          table:
                              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                  Select Operator
                    expressions: _col0 (type: bigint), _col1 (type: double), _col2 (type: int), _col3 (type: int), _col4 (type: string)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4
                    File Output Operator
                      compressed: false
                      Dp Sort State: PARTITION_SORTED
                      Statistics: Num rows: 3 Data size: 624 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                          output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
                          serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
                          name: default.mat1
                      Write Type: INSERT
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  keys: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                  minReductionHashAggr: 0.4
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                    null sort order: zzz
                    sort order: +++
                    Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                    Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
        Reducer 7 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), sum(VALUE._col1)
                keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 3 Data size: 336 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: sum(_col3), sum(_col4)
                  keys: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                  minReductionHashAggr: 0.4285714
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4
                  Statistics: Num rows: 3 Data size: 624 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                    null sort order: zzz
                    sort order: +++
                    Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                    Statistics: Num rows: 3 Data size: 624 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col3 (type: bigint), _col4 (type: double)
        Union 3 
            Vertex: Union 3

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            a 
            c 
            d 
          replace: false
          table:
              input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
              output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
              serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
              name: default.mat1
          Write Type: INSERT
          micromanaged table: true

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: sumb, sume
          Column Types: bigint, double
          Table: default.mat1

  Stage: Stage-4
    Materialized View Update
      name: default.mat1
      update creation metadata: true

PREHOOK: query: ALTER MATERIALIZED VIEW mat1 REBUILD
PREHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD
PREHOOK: Input: default@mat1
PREHOOK: Input: default@mat1@a=1/c=1/d=one
PREHOOK: Input: default@mat1@a=2/c=2/d=two
PREHOOK: Input: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=2/d=unknown
PREHOOK: Input: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=__HIVE_DEFAULT_PARTITION__/d=unknown
PREHOOK: Input: default@t1
PREHOOK: Output: default@mat1
POSTHOOK: query: ALTER MATERIALIZED VIEW mat1 REBUILD
POSTHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD
POSTHOOK: Input: default@mat1
POSTHOOK: Input: default@mat1@a=1/c=1/d=one
POSTHOOK: Input: default@mat1@a=2/c=2/d=two
POSTHOOK: Input: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=2/d=unknown
POSTHOOK: Input: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=__HIVE_DEFAULT_PARTITION__/d=unknown
POSTHOOK: Input: default@t1
POSTHOOK: Output: default@mat1
POSTHOOK: Output: default@mat1@a=1/c=1/d=one
POSTHOOK: Output: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=__HIVE_DEFAULT_PARTITION__/d=unknown
POSTHOOK: Lineage: mat1 PARTITION(a=1,c=1,d=one).sumb EXPRESSION [(mat1)default.mat1.FieldSchema(name:sumb, type:bigint, comment:null), (t1)t1.FieldSchema(name:b, type:int, comment:null), ]
POSTHOOK: Lineage: mat1 PARTITION(a=1,c=1,d=one).sume EXPRESSION [(mat1)default.mat1.FieldSchema(name:sume, type:double, comment:null), (t1)t1.FieldSchema(name:e, type:float, comment:null), ]
POSTHOOK: Lineage: mat1 PARTITION(a=__HIVE_DEFAULT_PARTITION__,c=__HIVE_DEFAULT_PARTITION__,d=unknown).sumb EXPRESSION [(mat1)default.mat1.FieldSchema(name:sumb, type:bigint, comment:null), (t1)t1.FieldSchema(name:b, type:int, comment:null), ]
POSTHOOK: Lineage: mat1 PARTITION(a=__HIVE_DEFAULT_PARTITION__,c=__HIVE_DEFAULT_PARTITION__,d=unknown).sume EXPRESSION [(mat1)default.mat1.FieldSchema(name:sume, type:double, comment:null), (t1)t1.FieldSchema(name:e, type:float, comment:null), ]
PREHOOK: query: SELECT a, sumb, c, d, sume FROM mat1
order by a, c, d
PREHOOK: type: QUERY
PREHOOK: Input: default@mat1
PREHOOK: Input: default@mat1@a=1/c=1/d=one
PREHOOK: Input: default@mat1@a=2/c=2/d=two
PREHOOK: Input: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=2/d=unknown
PREHOOK: Input: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=__HIVE_DEFAULT_PARTITION__/d=unknown
#### A masked pattern was here ####
POSTHOOK: query: SELECT a, sumb, c, d, sume FROM mat1
order by a, c, d
POSTHOOK: type: QUERY
POSTHOOK: Input: default@mat1
POSTHOOK: Input: default@mat1@a=1/c=1/d=one
POSTHOOK: Input: default@mat1@a=2/c=2/d=two
POSTHOOK: Input: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=2/d=unknown
POSTHOOK: Input: default@mat1@a=__HIVE_DEFAULT_PARTITION__/c=__HIVE_DEFAULT_PARTITION__/d=unknown
#### A masked pattern was here ####
1	131	1	one	131.91000068187714
2	4	2	two	4.400000095367432
NULL	4	2	unknown	4.699999809265137
NULL	24	NULL	unknown	24.81999921798706
PREHOOK: query: DROP MATERIALIZED VIEW mat1
PREHOOK: type: DROP_MATERIALIZED_VIEW
PREHOOK: Input: default@mat1
PREHOOK: Output: default@mat1
POSTHOOK: query: DROP MATERIALIZED VIEW mat1
POSTHOOK: type: DROP_MATERIALIZED_VIEW
POSTHOOK: Input: default@mat1
POSTHOOK: Output: default@mat1
PREHOOK: query: SELECT a, sum(b), c, d, sum(e) FROM t1 GROUP BY a, c, d
order by a, c, d
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: SELECT a, sum(b), c, d, sum(e) FROM t1 GROUP BY a, c, d
order by a, c, d
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
1	131	1	one	131.91000068187714
2	4	2	two	4.400000095367432
NULL	4	2	unknown	4.699999809265137
NULL	24	NULL	unknown	24.81999921798706
