PREHOOK: query: drop table if exists x1_store_sales
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists x1_store_sales
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists x1_date_dim
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists x1_date_dim
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists x1_item
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists x1_item
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table x1_store_sales 
(
	ss_item_sk	int
)
partitioned by (ss_sold_date_sk int)
stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@x1_store_sales
POSTHOOK: query: create table x1_store_sales 
(
	ss_item_sk	int
)
partitioned by (ss_sold_date_sk int)
stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@x1_store_sales
PREHOOK: query: create table x1_date_dim
(
	d_date_sk	int,
	d_month_seq	int,
	d_year		int,
	d_moy		int
)
stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@x1_date_dim
POSTHOOK: query: create table x1_date_dim
(
	d_date_sk	int,
	d_month_seq	int,
	d_year		int,
	d_moy		int
)
stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@x1_date_dim
PREHOOK: query: create table x1_item
(
	i_item_sk	int,
	i_category	char(10),
	i_current_price	decimal(7,2)
)
stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@x1_item
POSTHOOK: query: create table x1_item
(
	i_item_sk	int,
	i_category	char(10),
	i_current_price	decimal(7,2)
)
stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@x1_item
PREHOOK: query: insert into x1_date_dim values	(1,1,2000,2),
				(1,2,2001,2)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@x1_date_dim
POSTHOOK: query: insert into x1_date_dim values	(1,1,2000,2),
				(1,2,2001,2)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@x1_date_dim
POSTHOOK: Lineage: x1_date_dim.d_date_sk SCRIPT []
POSTHOOK: Lineage: x1_date_dim.d_month_seq SCRIPT []
POSTHOOK: Lineage: x1_date_dim.d_moy SCRIPT []
POSTHOOK: Lineage: x1_date_dim.d_year SCRIPT []
PREHOOK: query: insert into x1_store_sales partition (ss_sold_date_sk=1) values (1)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@x1_store_sales@ss_sold_date_sk=1
POSTHOOK: query: insert into x1_store_sales partition (ss_sold_date_sk=1) values (1)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@x1_store_sales@ss_sold_date_sk=1
POSTHOOK: Lineage: x1_store_sales PARTITION(ss_sold_date_sk=1).ss_item_sk SCRIPT []
PREHOOK: query: insert into x1_store_sales partition (ss_sold_date_sk=2) values (2)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@x1_store_sales@ss_sold_date_sk=2
POSTHOOK: query: insert into x1_store_sales partition (ss_sold_date_sk=2) values (2)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@x1_store_sales@ss_sold_date_sk=2
POSTHOOK: Lineage: x1_store_sales PARTITION(ss_sold_date_sk=2).ss_item_sk SCRIPT []
PREHOOK: query: insert into x1_item values (1,2,1),(1,2,1),(2,2,1)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@x1_item
POSTHOOK: query: insert into x1_item values (1,2,1),(1,2,1),(2,2,1)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@x1_item
POSTHOOK: Lineage: x1_item.i_category SCRIPT []
POSTHOOK: Lineage: x1_item.i_current_price SCRIPT []
POSTHOOK: Lineage: x1_item.i_item_sk SCRIPT []
PREHOOK: query: alter table x1_store_sales partition (ss_sold_date_sk=1) update statistics set(
'numRows'='123456',
'rawDataSize'='1234567')
PREHOOK: type: ALTERTABLE_UPDATEPARTSTATS
PREHOOK: Input: default@x1_store_sales
PREHOOK: Output: default@x1_store_sales@ss_sold_date_sk=1
POSTHOOK: query: alter table x1_store_sales partition (ss_sold_date_sk=1) update statistics set(
'numRows'='123456',
'rawDataSize'='1234567')
POSTHOOK: type: ALTERTABLE_UPDATEPARTSTATS
POSTHOOK: Input: default@x1_store_sales
POSTHOOK: Input: default@x1_store_sales@ss_sold_date_sk=1
POSTHOOK: Output: default@x1_store_sales@ss_sold_date_sk=1
PREHOOK: query: alter table x1_date_dim update statistics set(
'numRows'='28',
'rawDataSize'='81449')
PREHOOK: type: ALTERTABLE_UPDATETABLESTATS
PREHOOK: Input: default@x1_date_dim
PREHOOK: Output: default@x1_date_dim
POSTHOOK: query: alter table x1_date_dim update statistics set(
'numRows'='28',
'rawDataSize'='81449')
POSTHOOK: type: ALTERTABLE_UPDATETABLESTATS
POSTHOOK: Input: default@x1_date_dim
POSTHOOK: Output: default@x1_date_dim
PREHOOK: query: alter table x1_item update statistics set(
'numRows'='18',
'rawDataSize'='32710')
PREHOOK: type: ALTERTABLE_UPDATETABLESTATS
PREHOOK: Input: default@x1_item
PREHOOK: Output: default@x1_item
POSTHOOK: query: alter table x1_item update statistics set(
'numRows'='18',
'rawDataSize'='32710')
POSTHOOK: type: ALTERTABLE_UPDATETABLESTATS
POSTHOOK: Input: default@x1_item
POSTHOOK: Output: default@x1_item
PREHOOK: query: explain 
select   count(*) cnt
 from
     x1_store_sales s
     ,x1_date_dim d
     ,x1_item i
 where  
	1=1
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq in	 
 	     (select distinct (d_month_seq)
 	      from x1_date_dim
               where d_year = 2000 and d_year*d_moy > 200000
 	        and d_moy = 2 )
 	and i.i_current_price > 
            (select min(j.i_current_price) 
 	     from x1_item j 
 	     where j.i_category = i.i_category)

 group by d.d_month_seq
 order by cnt 
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@x1_date_dim
PREHOOK: Input: default@x1_item
PREHOOK: Input: default@x1_store_sales
PREHOOK: Input: default@x1_store_sales@ss_sold_date_sk=1
PREHOOK: Input: default@x1_store_sales@ss_sold_date_sk=2
#### A masked pattern was here ####
POSTHOOK: query: explain 
select   count(*) cnt
 from
     x1_store_sales s
     ,x1_date_dim d
     ,x1_item i
 where  
	1=1
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq in	 
 	     (select distinct (d_month_seq)
 	      from x1_date_dim
               where d_year = 2000 and d_year*d_moy > 200000
 	        and d_moy = 2 )
 	and i.i_current_price > 
            (select min(j.i_current_price) 
 	     from x1_item j 
 	     where j.i_category = i.i_category)

 group by d.d_month_seq
 order by cnt 
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x1_date_dim
POSTHOOK: Input: default@x1_item
POSTHOOK: Input: default@x1_store_sales
POSTHOOK: Input: default@x1_store_sales@ss_sold_date_sk=1
POSTHOOK: Input: default@x1_store_sales@ss_sold_date_sk=2
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 4 (BROADCAST_EDGE), Map 6 (BROADCAST_EDGE), Reducer 5 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 5 <- Map 4 (SIMPLE_EDGE)
Reducer 7 <- Map 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 3 vectorized, llap
      File Output Operator [FS_149]
        Limit [LIM_148] (rows=2 width=8)
          Number of rows:100
          Select Operator [SEL_147] (rows=2 width=8)
            Output:["_col0"]
          <-Reducer 2 [SIMPLE_EDGE] vectorized, llap
            SHUFFLE [RS_146]
              Select Operator [SEL_145] (rows=2 width=8)
                Output:["_col0"]
                Top N Key Operator [TNK_144] (rows=2 width=12)
                  keys:_col1,top n:100
                  Group By Operator [GBY_143] (rows=2 width=12)
                    Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                  <-Map 1 [SIMPLE_EDGE] llap
                    SHUFFLE [RS_38]
                      PartitionCols:_col0
                      Group By Operator [GBY_37] (rows=10 width=12)
                        Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                        Select Operator [SEL_36] (rows=5185194 width=228)
                          Output:["_col0"]
                          Map Join Operator [MAPJOIN_107] (rows=5185194 width=228)
                            Conds:SEL_24._col1=RS_123._col1(Inner),Output:["_col0","_col2","_col3"],residual filter predicates:{(_col2 > _col3)}
                          <-Reducer 5 [BROADCAST_EDGE] vectorized, llap
                            BROADCAST [RS_123]
                              PartitionCols:_col1
                              Select Operator [SEL_122] (rows=1 width=197)
                                Output:["_col0","_col1"]
                                Filter Operator [FIL_121] (rows=1 width=197)
                                  predicate:_col1 is not null
                                  Group By Operator [GBY_120] (rows=1 width=197)
                                    Output:["_col0","_col1"],aggregations:["min(VALUE._col0)"],keys:KEY._col0
                                  <-Map 4 [SIMPLE_EDGE] vectorized, llap
                                    SHUFFLE [RS_119]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_117] (rows=1 width=197)
                                        Output:["_col0","_col1"],aggregations:["min(i_current_price)"],keys:i_category
                                        Filter Operator [FIL_115] (rows=18 width=197)
                                          predicate:i_category is not null
                                          TableScan [TS_3] (rows=18 width=201)
                                            default@x1_item,i,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_category","i_current_price"]
                          <-Select Operator [SEL_24] (rows=15555582 width=201)
                              Output:["_col0","_col1","_col2"]
                              Map Join Operator [MAPJOIN_106] (rows=15555582 width=201)
                                Conds:SEL_15._col3=RS_132._col0(Left Semi),Output:["_col3","_col5","_col6"]
                              <-Map 6 [BROADCAST_EDGE] vectorized, llap
                                SHUFFLE [RS_132]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_130] (rows=2 width=4)
                                    Output:["_col0"],keys:_col0
                                    Select Operator [SEL_127] (rows=4 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_125] (rows=4 width=12)
                                        predicate:((d_year = 2000) and ((d_year * d_moy) > 200000) and (d_moy = 2) and d_month_seq is not null)
                                        TableScan [TS_6] (rows=28 width=8)
                                          default@x1_date_dim,d,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_month_seq","d_year","d_moy"]
                              <-Select Operator [SEL_15] (rows=15555582 width=201)
                                  Output:["_col3","_col5","_col6"]
                                  Map Join Operator [MAPJOIN_105] (rows=15555582 width=201)
                                    Conds:MAPJOIN_104._col1=RS_135._col0(Inner),Output:["_col3","_col4","_col6"]
                                  <-Reducer 7 [BROADCAST_EDGE] vectorized, llap
                                    BROADCAST [RS_135]
                                      PartitionCols:_col0
                                      Select Operator [SEL_134]
                                        Output:["_col0","_col1"]
                                  <-Map Join Operator [MAPJOIN_104] (rows=1111113 width=201)
                                      Conds:SEL_2._col0=RS_118._col0(Inner),Output:["_col1","_col3","_col4"]
                                    <-Map 4 [BROADCAST_EDGE] vectorized, llap
                                      SHUFFLE [RS_118]
                                        PartitionCols:_col0
                                        Select Operator [SEL_116] (rows=18 width=201)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_114] (rows=18 width=201)
                                            predicate:(i_item_sk is not null and i_category is not null and i_current_price is not null)
                                             Please refer to the previous TableScan [TS_3]
                                    <-Select Operator [SEL_2] (rows=123457 width=8)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_59] (rows=123457 width=8)
                                          predicate:ss_item_sk is not null
                                          TableScan [TS_0] (rows=123457 width=8)
                                            default@x1_store_sales,s,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk"]

PREHOOK: query: select   count(*) cnt
 from
     x1_store_sales s
     ,x1_date_dim d
     ,x1_item i
 where  
	1=1
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq in	 
 	     (select distinct (d_month_seq)
 	      from x1_date_dim
               where d_year = 2000 and d_year*d_moy > 200000
 	        and d_moy = 2 )
 	and i.i_current_price > 
            (select min(j.i_current_price) 
 	     from x1_item j 
 	     where j.i_category = i.i_category)

 group by d.d_month_seq
 order by cnt 
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@x1_date_dim
PREHOOK: Input: default@x1_item
PREHOOK: Input: default@x1_store_sales
PREHOOK: Input: default@x1_store_sales@ss_sold_date_sk=1
PREHOOK: Input: default@x1_store_sales@ss_sold_date_sk=2
#### A masked pattern was here ####
POSTHOOK: query: select   count(*) cnt
 from
     x1_store_sales s
     ,x1_date_dim d
     ,x1_item i
 where  
	1=1
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq in	 
 	     (select distinct (d_month_seq)
 	      from x1_date_dim
               where d_year = 2000 and d_year*d_moy > 200000
 	        and d_moy = 2 )
 	and i.i_current_price > 
            (select min(j.i_current_price) 
 	     from x1_item j 
 	     where j.i_category = i.i_category)

 group by d.d_month_seq
 order by cnt 
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x1_date_dim
POSTHOOK: Input: default@x1_item
POSTHOOK: Input: default@x1_store_sales
POSTHOOK: Input: default@x1_store_sales@ss_sold_date_sk=1
POSTHOOK: Input: default@x1_store_sales@ss_sold_date_sk=2
#### A masked pattern was here ####
