PREHOOK: query: create view cv1 as 
select * 
from src b 
where exists
  (select a.key 
  from src a 
  where b.value = a.value  and a.key = b.key and a.value > 'val_9')
PREHOOK: type: CREATEVIEW
PREHOOK: Input: default@src
PREHOOK: Output: database:default
PREHOOK: Output: default@cv1
POSTHOOK: query: create view cv1 as 
select * 
from src b 
where exists
  (select a.key 
  from src a 
  where b.value = a.value  and a.key = b.key and a.value > 'val_9')
POSTHOOK: type: CREATEVIEW
POSTHOOK: Input: default@src
POSTHOOK: Output: database:default
POSTHOOK: Output: default@cv1
POSTHOOK: Lineage: cv1.key SIMPLE [(src)b.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: cv1.value SIMPLE [(src)b.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: describe extended cv1
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@cv1
POSTHOOK: query: describe extended cv1
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@cv1
key                 	string              	                    
value               	string              	                    
	 	 
#### A masked pattern was here ####
PREHOOK: query: select * 
from cv1 where cv1.key in (select key from cv1 c where c.key > '95')
PREHOOK: type: QUERY
PREHOOK: Input: default@cv1
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select * 
from cv1 where cv1.key in (select key from cv1 c where c.key > '95')
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cv1
POSTHOOK: Input: default@src
#### A masked pattern was here ####
96	val_96
97	val_97
97	val_97
98	val_98
98	val_98
PREHOOK: query: create view cv2 as 
select * 
from src b 
where b.key not in
  (select a.key 
  from src a 
  where b.value = a.value  and a.key = b.key and a.value > 'val_11'
  )
PREHOOK: type: CREATEVIEW
PREHOOK: Input: default@src
PREHOOK: Output: database:default
PREHOOK: Output: default@cv2
POSTHOOK: query: create view cv2 as 
select * 
from src b 
where b.key not in
  (select a.key 
  from src a 
  where b.value = a.value  and a.key = b.key and a.value > 'val_11'
  )
POSTHOOK: type: CREATEVIEW
POSTHOOK: Input: default@src
POSTHOOK: Output: database:default
POSTHOOK: Output: default@cv2
POSTHOOK: Lineage: cv2.key SIMPLE [(src)b.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: cv2.value SIMPLE [(src)b.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: describe extended cv2
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@cv2
POSTHOOK: query: describe extended cv2
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@cv2
key                 	string              	                    
value               	string              	                    
	 	 
#### A masked pattern was here ####
PREHOOK: query: explain
select * 
from cv2 where cv2.key in (select key from cv2 c where c.key < '11')
PREHOOK: type: QUERY
POSTHOOK: query: explain
select * 
from cv2 where cv2.key in (select key from cv2 c where c.key < '11')
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 10 <- Map 9 (SIMPLE_EDGE)
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 4 (ONE_TO_ONE_EDGE), Reducer 6 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
        Reducer 4 <- Map 1 (SIMPLE_EDGE)
        Reducer 5 <- Map 1 (SIMPLE_EDGE)
        Reducer 6 <- Reducer 10 (ONE_TO_ONE_EDGE), Reducer 5 (SIMPLE_EDGE)
        Reducer 7 <- Map 1 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE), Reducer 8 (ONE_TO_ONE_EDGE)
        Reducer 8 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: b
                  properties:
                    insideView TRUE
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (key < '11') (type: boolean)
                    Statistics: Num rows: 166 Data size: 29548 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: string), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 166 Data size: 29548 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 166 Data size: 29548 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((value > 'val_11') and key is not null) (type: boolean)
                    Statistics: Num rows: 166 Data size: 29548 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count(), count(key)
                      keys: key (type: string), value (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 83 Data size: 16102 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 83 Data size: 16102 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: bigint), _col3 (type: bigint)
                  Filter Operator
                    predicate: ((value > 'val_11') and key is not null) (type: boolean)
                    Statistics: Num rows: 166 Data size: 29548 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: key (type: string), value (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 83 Data size: 14774 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 83 Data size: 14774 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (key < '11') (type: boolean)
                    Statistics: Num rows: 166 Data size: 29548 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: string), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 166 Data size: 29548 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 166 Data size: 29548 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((value > 'val_11') and key is not null) (type: boolean)
                    Statistics: Num rows: 166 Data size: 29548 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count(), count(key)
                      keys: key (type: string), value (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 83 Data size: 16102 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 83 Data size: 16102 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: bigint), _col3 (type: bigint)
            Execution mode: llap
            LLAP IO: no inputs
        Map 9 
            Map Operator Tree:
                TableScan
                  alias: b
                  properties:
                    insideView TRUE
                  Statistics: Num rows: 500 Data size: 43500 Basic stats: COMPLETE Column stats: COMPLETE
                  Group By Operator
                    keys: key (type: string)
                    mode: hash
                    outputColumnNames: _col0
                    Statistics: Num rows: 250 Data size: 21750 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Map-reduce partition columns: _col0 (type: string)
                      Statistics: Num rows: 250 Data size: 21750 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 10 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 250 Data size: 21750 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col0 (type: string)
                  sort order: +
                  Map-reduce partition columns: _col0 (type: string)
                  Statistics: Num rows: 250 Data size: 21750 Basic stats: COMPLETE Column stats: COMPLETE
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                     Left Outer Join 0 to 2
                keys:
                  0 _col0 (type: string), _col1 (type: string)
                  1 _col0 (type: string), _col1 (type: string)
                  2 _col3 (type: string), _col1 (type: string)
                outputColumnNames: _col0, _col1, _col4, _col5, _col8
                Statistics: Num rows: 87 Data size: 17226 Basic stats: COMPLETE Column stats: COMPLETE
                Filter Operator
                  predicate: CASE WHEN ((_col4 = 0L)) THEN (true) WHEN (_col4 is null) THEN (true) WHEN (_col8 is not null) THEN (false) WHEN (_col0 is null) THEN (null) WHEN ((_col5 < _col4)) THEN (false) ELSE (true) END (type: boolean)
                  Statistics: Num rows: 43 Data size: 8514 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 43 Data size: 7654 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Map-reduce partition columns: _col0 (type: string)
                      Statistics: Num rows: 43 Data size: 7654 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: string)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col0 (type: string)
                  1 _col0 (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 43 Data size: 7654 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 43 Data size: 7654 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0), count(VALUE._col1)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 83 Data size: 16102 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col0 (type: string), _col1 (type: string)
                  sort order: ++
                  Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                  Statistics: Num rows: 83 Data size: 16102 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col2 (type: bigint), _col3 (type: bigint)
        Reducer 5 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 83 Data size: 14774 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), true (type: boolean)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 83 Data size: 15106 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string)
                    sort order: +
                    Map-reduce partition columns: _col0 (type: string)
                    Statistics: Num rows: 83 Data size: 15106 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col1 (type: string), _col2 (type: boolean)
        Reducer 6 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: string)
                  1 _col0 (type: string)
                outputColumnNames: _col1, _col2, _col3
                Statistics: Num rows: 67 Data size: 12194 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col3 (type: string), _col1 (type: string)
                  sort order: ++
                  Map-reduce partition columns: _col3 (type: string), _col1 (type: string)
                  Statistics: Num rows: 67 Data size: 12194 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col2 (type: boolean)
                Reduce Output Operator
                  key expressions: _col3 (type: string), _col1 (type: string)
                  sort order: ++
                  Map-reduce partition columns: _col3 (type: string), _col1 (type: string)
                  Statistics: Num rows: 67 Data size: 12194 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col2 (type: boolean)
        Reducer 7 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                     Left Outer Join 0 to 2
                keys:
                  0 _col0 (type: string), _col1 (type: string)
                  1 _col0 (type: string), _col1 (type: string)
                  2 _col3 (type: string), _col1 (type: string)
                outputColumnNames: _col0, _col4, _col5, _col8
                Statistics: Num rows: 87 Data size: 9309 Basic stats: COMPLETE Column stats: COMPLETE
                Filter Operator
                  predicate: CASE WHEN ((_col4 = 0L)) THEN (true) WHEN (_col4 is null) THEN (true) WHEN (_col8 is not null) THEN (false) WHEN (_col0 is null) THEN (null) WHEN ((_col5 < _col4)) THEN (false) ELSE (true) END (type: boolean)
                  Statistics: Num rows: 43 Data size: 4601 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string)
                    outputColumnNames: _col0
                    Statistics: Num rows: 43 Data size: 3741 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: _col0 (type: string)
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 8 Data size: 696 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 8 Data size: 696 Basic stats: COMPLETE Column stats: COMPLETE
        Reducer 8 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0), count(VALUE._col1)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 83 Data size: 16102 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col0 (type: string), _col1 (type: string)
                  sort order: ++
                  Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                  Statistics: Num rows: 83 Data size: 16102 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col2 (type: bigint), _col3 (type: bigint)

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * 
from cv2 where cv2.key in (select key from cv2 c where c.key < '11')
PREHOOK: type: QUERY
PREHOOK: Input: default@cv2
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select * 
from cv2 where cv2.key in (select key from cv2 c where c.key < '11')
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cv2
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0	val_0
0	val_0
0	val_0
10	val_10
100	val_100
100	val_100
103	val_103
103	val_103
104	val_104
104	val_104
105	val_105
PREHOOK: query: create view cv3 as
select key, value, count(*) 
from src b
where b.key in (select key from src where src.key > '8')
group by key, value
having count(*) in (select count(*) from src s1 where s1.key > '9' group by s1.key )
PREHOOK: type: CREATEVIEW
PREHOOK: Input: default@src
PREHOOK: Output: database:default
PREHOOK: Output: default@cv3
POSTHOOK: query: create view cv3 as
select key, value, count(*) 
from src b
where b.key in (select key from src where src.key > '8')
group by key, value
having count(*) in (select count(*) from src s1 where s1.key > '9' group by s1.key )
POSTHOOK: type: CREATEVIEW
POSTHOOK: Input: default@src
POSTHOOK: Output: database:default
POSTHOOK: Output: default@cv3
POSTHOOK: Lineage: cv3._c2 EXPRESSION [(src)b.null, ]
POSTHOOK: Lineage: cv3.key SIMPLE [(src)b.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: cv3.value SIMPLE [(src)b.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: describe extended cv3
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@cv3
POSTHOOK: query: describe extended cv3
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@cv3
key                 	string              	                    
value               	string              	                    
_c2                 	bigint              	                    
	 	 
#### A masked pattern was here ####
PREHOOK: query: select * from cv3
PREHOOK: type: QUERY
PREHOOK: Input: default@cv3
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select * from cv3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cv3
POSTHOOK: Input: default@src
#### A masked pattern was here ####
80	val_80	1
82	val_82	1
83	val_83	2
84	val_84	2
85	val_85	1
86	val_86	1
87	val_87	1
9	val_9	1
90	val_90	3
92	val_92	1
95	val_95	2
96	val_96	1
97	val_97	2
98	val_98	2
PREHOOK: query: select *
from cv3
where cv3.key in (select key from cv1)
PREHOOK: type: QUERY
PREHOOK: Input: default@cv1
PREHOOK: Input: default@cv3
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select *
from cv3
where cv3.key in (select key from cv1)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cv1
POSTHOOK: Input: default@cv3
POSTHOOK: Input: default@src
#### A masked pattern was here ####
90	val_90	3
92	val_92	1
95	val_95	2
96	val_96	1
97	val_97	2
98	val_98	2
PREHOOK: query: drop table tc
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table tc
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table tc (`@d` int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tc
POSTHOOK: query: create table tc (`@d` int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tc
PREHOOK: query: insert overwrite table tc select 1 from src limit 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@tc
POSTHOOK: query: insert overwrite table tc select 1 from src limit 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@tc
POSTHOOK: Lineage: tc.@d SIMPLE []
PREHOOK: query: drop view tcv
PREHOOK: type: DROPVIEW
POSTHOOK: query: drop view tcv
POSTHOOK: type: DROPVIEW
PREHOOK: query: create view tcv as select * from tc b where exists (select a.`@d` from tc a where b.`@d`=a.`@d`)
PREHOOK: type: CREATEVIEW
PREHOOK: Input: default@tc
PREHOOK: Output: database:default
PREHOOK: Output: default@tcv
POSTHOOK: query: create view tcv as select * from tc b where exists (select a.`@d` from tc a where b.`@d`=a.`@d`)
POSTHOOK: type: CREATEVIEW
POSTHOOK: Input: default@tc
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tcv
POSTHOOK: Lineage: tcv.@d SIMPLE [(tc)b.FieldSchema(name:@d, type:int, comment:null), ]
PREHOOK: query: describe extended tcv
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@tcv
POSTHOOK: query: describe extended tcv
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@tcv
@d                  	int                 	                    
	 	 
#### A masked pattern was here ####
PREHOOK: query: select * from tcv
PREHOOK: type: QUERY
PREHOOK: Input: default@tc
PREHOOK: Input: default@tcv
#### A masked pattern was here ####
POSTHOOK: query: select * from tcv
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tc
POSTHOOK: Input: default@tcv
#### A masked pattern was here ####
1
