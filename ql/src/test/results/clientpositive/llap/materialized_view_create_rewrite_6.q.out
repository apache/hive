PREHOOK: query: create table t1(a char(15), b int, c int) stored as orc TBLPROPERTIES ('transactional'='true')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@t1
POSTHOOK: query: create table t1(a char(15), b int, c int) stored as orc TBLPROPERTIES ('transactional'='true')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t1
PREHOOK: query: create table t2(a char(15), b int) stored as orc TBLPROPERTIES ('transactional'='true')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@t2
POSTHOOK: query: create table t2(a char(15), b int) stored as orc TBLPROPERTIES ('transactional'='true')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t2
PREHOOK: query: insert into t1(a, b, c) values
('update', 1, 1), ('update', 2, 1),
('null_update', null, 1), ('null_update', null, 2)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@t1
POSTHOOK: query: insert into t1(a, b, c) values
('update', 1, 1), ('update', 2, 1),
('null_update', null, 1), ('null_update', null, 2)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@t1
POSTHOOK: Lineage: t1.a SCRIPT []
POSTHOOK: Lineage: t1.b SCRIPT []
POSTHOOK: Lineage: t1.c SCRIPT []
PREHOOK: query: insert into t1(a, b, c) values ('remove', 3, 1), ('null_remove', null, 1)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@t1
POSTHOOK: query: insert into t1(a, b, c) values ('remove', 3, 1), ('null_remove', null, 1)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@t1
POSTHOOK: Lineage: t1.a SCRIPT []
POSTHOOK: Lineage: t1.b SCRIPT []
POSTHOOK: Lineage: t1.c SCRIPT []
PREHOOK: query: insert into t1(a, b, c) values ('sum0', 0, 1), ('sum0', 0, 2)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@t1
POSTHOOK: query: insert into t1(a, b, c) values ('sum0', 0, 1), ('sum0', 0, 2)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@t1
POSTHOOK: Lineage: t1.a SCRIPT []
POSTHOOK: Lineage: t1.b SCRIPT []
POSTHOOK: Lineage: t1.c SCRIPT []
PREHOOK: query: insert into t2(a, b) values
('update', 10),
('null_update', null)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@t2
POSTHOOK: query: insert into t2(a, b) values
('update', 10),
('null_update', null)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@t2
POSTHOOK: Lineage: t2.a SCRIPT []
POSTHOOK: Lineage: t2.b SCRIPT []
PREHOOK: query: insert into t2(a, b) values ('remove', 30), ('null_remove', null)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@t2
POSTHOOK: query: insert into t2(a, b) values ('remove', 30), ('null_remove', null)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@t2
POSTHOOK: Lineage: t2.a SCRIPT []
POSTHOOK: Lineage: t2.b SCRIPT []
PREHOOK: query: insert into t2(a, b) values ('sum0', 0)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@t2
POSTHOOK: query: insert into t2(a, b) values ('sum0', 0)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@t2
POSTHOOK: Lineage: t2.a SCRIPT []
POSTHOOK: Lineage: t2.b SCRIPT []
PREHOOK: query: create materialized view mat1 stored as orc TBLPROPERTIES ('transactional'='true') as
select t1.a, sum(t1.b), count(*) from t1
join t2 on (t1.a = t2.a)
group by t1.a
PREHOOK: type: CREATE_MATERIALIZED_VIEW
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
PREHOOK: Output: database:default
PREHOOK: Output: default@mat1
POSTHOOK: query: create materialized view mat1 stored as orc TBLPROPERTIES ('transactional'='true') as
select t1.a, sum(t1.b), count(*) from t1
join t2 on (t1.a = t2.a)
group by t1.a
POSTHOOK: type: CREATE_MATERIALIZED_VIEW
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
POSTHOOK: Output: database:default
POSTHOOK: Output: default@mat1
PREHOOK: query: explain cbo
select t1.a, sum(t1.b) from t1
join t2 on (t1.a = t2.a)
group by t1.a
PREHOOK: type: QUERY
PREHOOK: Input: default@mat1
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: explain cbo
select t1.a, sum(t1.b) from t1
join t2 on (t1.a = t2.a)
group by t1.a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@mat1
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
CBO PLAN:
HiveProject(a=[$0], _c1=[$1])
  HiveTableScan(table=[[default, mat1]], table:alias=[default.mat1])

PREHOOK: query: delete from t1 where b = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Output: default@t1
POSTHOOK: query: delete from t1 where b = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Output: default@t1
PREHOOK: query: delete from t1 where a like '%remove'
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Output: default@t1
POSTHOOK: query: delete from t1 where a like '%remove'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Output: default@t1
PREHOOK: query: delete from t1 where c = 2
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Output: default@t1
POSTHOOK: query: delete from t1 where c = 2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Output: default@t1
PREHOOK: query: insert into t1(a,b,c) values
('update', 5, 1),
('add', 5, 1),
('add/remove', 0, 0),
('null_update', null, 0),
('null_add', null, 0),
('null_add/remove', null, 0)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@t1
POSTHOOK: query: insert into t1(a,b,c) values
('update', 5, 1),
('add', 5, 1),
('add/remove', 0, 0),
('null_update', null, 0),
('null_add', null, 0),
('null_add/remove', null, 0)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@t1
POSTHOOK: Lineage: t1.a SCRIPT []
POSTHOOK: Lineage: t1.b SCRIPT []
POSTHOOK: Lineage: t1.c SCRIPT []
PREHOOK: query: insert into t2(a,b) values
('add', 15),
('add/remove', 0),
('null_add', null),
('null_add/remove', null)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@t2
POSTHOOK: query: insert into t2(a,b) values
('add', 15),
('add/remove', 0),
('null_add', null),
('null_add/remove', null)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@t2
POSTHOOK: Lineage: t2.a SCRIPT []
POSTHOOK: Lineage: t2.b SCRIPT []
PREHOOK: query: delete from t1 where a like '%add/remove'
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Output: default@t1
POSTHOOK: query: delete from t1 where a like '%add/remove'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Output: default@t1
PREHOOK: query: explain cbo
select t1.a, sum(t1.b) from t1
join t2 on (t1.a = t2.a)
group by t1.a
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: explain cbo
select t1.a, sum(t1.b) from t1
join t2 on (t1.a = t2.a)
group by t1.a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
CBO PLAN:
HiveAggregate(group=[{0}], agg#0=[sum($1)])
  HiveJoin(condition=[=($0, $2)], joinType=[inner], algorithm=[none], cost=[not available])
    HiveProject(a=[$0], b=[$1])
      HiveFilter(condition=[IS NOT NULL($0)])
        HiveTableScan(table=[[default, t1]], table:alias=[t1])
    HiveProject(a=[$0])
      HiveFilter(condition=[IS NOT NULL($0)])
        HiveTableScan(table=[[default, t2]], table:alias=[t2])

PREHOOK: query: explain cbo
alter materialized view mat1 rebuild
PREHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD
PREHOOK: Input: default@mat1
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
PREHOOK: Output: default@mat1
PREHOOK: Output: default@mat1
PREHOOK: Output: default@mat1
POSTHOOK: query: explain cbo
alter materialized view mat1 rebuild
POSTHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD
POSTHOOK: Input: default@mat1
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
POSTHOOK: Output: default@mat1
POSTHOOK: Output: default@mat1
POSTHOOK: Output: default@mat1
CBO PLAN:
HiveProject(a0=[$4], $f1=[CASE(IS NULL($1), $5, IS NULL($5), $1, +($5, $1))], $f2=[CASE(IS NULL($2), $6, +($6, $2))])
  HiveFilter(condition=[OR(AND($3, OR(AND(IS NULL($2), =($6, 0)), AND(=(+($6, $2), 0), IS NOT NULL($2)))), AND(IS NULL($3), OR(AND(IS NULL($2), >($6, 0)), AND(>(+($6, $2), 0), IS NOT NULL($2)))), AND($3, OR(AND(IS NULL($2), >($6, 0)), AND(>(+($6, $2), 0), IS NOT NULL($2)))))])
    HiveJoin(condition=[IS NOT DISTINCT FROM($0, $4)], joinType=[right], algorithm=[none], cost=[not available])
      HiveProject(a=[$0], _c1=[$1], _c2=[$2], $f3=[true])
        HiveTableScan(table=[[default, mat1]], table:alias=[default.mat1])
      HiveProject(a=[$0], $f1=[$1], $f2=[$2])
        HiveAggregate(group=[{0}], agg#0=[SUM($1)], agg#1=[SUM($2)])
          HiveProject(a=[$0], $f3=[CASE(OR($2, $5), *(-1, $1), $1)], $f4=[CASE(OR($2, $5), -1, 1)])
            HiveJoin(condition=[AND(=($0, $4), OR($3, $6))], joinType=[inner], algorithm=[none], cost=[not available])
              HiveProject(a=[$0], b=[$1], ROW__IS__DELETED=[$6], <=[<(3, $5.writeid)])
                HiveFilter(condition=[IS NOT NULL($0)])
                  HiveTableScan(table=[[default, t1]], table:alias=[t1])
              HiveProject(a=[$0], ROW__IS__DELETED=[$5], <=[<(3, $4.writeid)])
                HiveFilter(condition=[IS NOT NULL($0)])
                  HiveTableScan(table=[[default, t2]], table:alias=[t2])

PREHOOK: query: explain
alter materialized view mat1 rebuild
PREHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD
PREHOOK: Input: default@mat1
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
PREHOOK: Output: default@mat1
PREHOOK: Output: default@mat1
PREHOOK: Output: default@mat1
POSTHOOK: query: explain
alter materialized view mat1 rebuild
POSTHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD
POSTHOOK: Input: default@mat1
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
POSTHOOK: Output: default@mat1
POSTHOOK: Output: default@mat1
POSTHOOK: Output: default@mat1
STAGE DEPENDENCIES:
  Stage-3 is a root stage
  Stage-4 depends on stages: Stage-3
  Stage-0 depends on stages: Stage-4
  Stage-5 depends on stages: Stage-0
  Stage-8 depends on stages: Stage-5, Stage-6, Stage-7
  Stage-1 depends on stages: Stage-4
  Stage-6 depends on stages: Stage-1
  Stage-2 depends on stages: Stage-4
  Stage-7 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-3
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
        Reducer 5 <- Reducer 2 (SIMPLE_EDGE)
        Reducer 7 <- Map 6 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
        Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: default.mat1
                  Statistics: Num rows: 5 Data size: 532 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: a (type: char(15)), _c1 (type: bigint), _c2 (type: bigint), true (type: boolean), ROW__ID (type: struct<writeid:bigint,bucketid:int,rowid:bigint>)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4
                    Statistics: Num rows: 5 Data size: 932 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: char(15))
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: char(15))
                      Statistics: Num rows: 5 Data size: 932 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: bigint), _col2 (type: bigint), _col3 (type: boolean), _col4 (type: struct<writeid:bigint,bucketid:int,rowid:bigint>)
            Execution mode: vectorized, llap
            LLAP IO: may be used (ACID table)
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: t1
                  filterExpr: a is not null (type: boolean)
                  properties:
                    acid.fetch.deleted.rows TRUE
                  Statistics: Num rows: 7 Data size: 671 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: a is not null (type: boolean)
                    Statistics: Num rows: 7 Data size: 671 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: a (type: char(15)), b (type: int), ROW__IS__DELETED (type: boolean), (ROW__ID.writeid > 3L) (type: boolean)
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 7 Data size: 727 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: char(15))
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: char(15))
                        Statistics: Num rows: 7 Data size: 727 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: int), _col2 (type: boolean), _col3 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: may be used (ACID table)
        Map 9 
            Map Operator Tree:
                TableScan
                  alias: t2
                  filterExpr: a is not null (type: boolean)
                  properties:
                    acid.fetch.deleted.rows TRUE
                  Statistics: Num rows: 9 Data size: 837 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: a is not null (type: boolean)
                    Statistics: Num rows: 9 Data size: 837 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: a (type: char(15)), ROW__IS__DELETED (type: boolean), (ROW__ID.writeid > 3L) (type: boolean)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 9 Data size: 909 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: char(15))
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: char(15))
                        Statistics: Num rows: 9 Data size: 909 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: boolean), _col2 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: may be used (ACID table)
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Right Outer Join 0 to 1
                keys:
                  0 _col0 (type: char(15))
                  1 _col0 (type: char(15))
                nullSafes: [true]
                outputColumnNames: _col1, _col2, _col3, _col4, _col5, _col6, _col7
                Statistics: Num rows: 5 Data size: 1017 Basic stats: COMPLETE Column stats: COMPLETE
                Filter Operator
                  predicate: (_col3 and ((_col2 is null and (_col7 = 0L)) or (((_col7 + _col2) = 0) and _col2 is not null))) (type: boolean)
                  Statistics: Num rows: 1 Data size: 205 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col4 (type: struct<writeid:bigint,bucketid:int,rowid:bigint>)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 76 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: struct<writeid:bigint,bucketid:int,rowid:bigint>)
                      null sort order: a
                      sort order: +
                      Map-reduce partition columns: UDFToInteger(_col0) (type: int)
                      Statistics: Num rows: 1 Data size: 76 Basic stats: COMPLETE Column stats: COMPLETE
                Filter Operator
                  predicate: (_col3 is null and ((_col2 is null and (_col7 > 0L)) or (((_col7 + _col2) > 0) and _col2 is not null))) (type: boolean)
                  Statistics: Num rows: 1 Data size: 205 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col5 (type: char(15)), CASE WHEN (_col1 is null) THEN (_col6) WHEN (_col6 is null) THEN (_col1) ELSE ((_col6 + _col1)) END (type: bigint), CASE WHEN (_col2 is null) THEN (_col7) ELSE ((_col7 + _col2)) END (type: bigint)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 109 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 1 Data size: 109 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                          output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
                          serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
                          name: default.mat1
                      Write Type: INSERT
                    Select Operator
                      expressions: _col0 (type: char(15)), _col1 (type: bigint), _col2 (type: bigint)
                      outputColumnNames: a, _c1, _c2
                      Statistics: Num rows: 1 Data size: 109 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: max(length(a)), avg(COALESCE(length(a),0)), count(1), count(a), compute_bit_vector_hll(a), min(_c1), max(_c1), count(_c1), compute_bit_vector_hll(_c1), min(_c2), max(_c2), count(_c2), compute_bit_vector_hll(_c2)
                        minReductionHashAggr: 0.4
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                        Statistics: Num rows: 1 Data size: 576 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          null sort order: 
                          sort order: 
                          Statistics: Num rows: 1 Data size: 576 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: int), _col1 (type: struct<count:bigint,sum:double,input:int>), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: binary), _col5 (type: bigint), _col6 (type: bigint), _col7 (type: bigint), _col8 (type: binary), _col9 (type: bigint), _col10 (type: bigint), _col11 (type: bigint), _col12 (type: binary)
                Filter Operator
                  predicate: (_col3 and ((_col2 is null and (_col7 > 0L)) or (((_col7 + _col2) > 0) and _col2 is not null))) (type: boolean)
                  Statistics: Num rows: 1 Data size: 205 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col4 (type: struct<writeid:bigint,bucketid:int,rowid:bigint>), _col5 (type: char(15)), CASE WHEN (_col1 is null) THEN (_col6) WHEN (_col6 is null) THEN (_col1) ELSE ((_col6 + _col1)) END (type: bigint), CASE WHEN (_col2 is null) THEN (_col7) ELSE ((_col7 + _col2)) END (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 1 Data size: 185 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: struct<writeid:bigint,bucketid:int,rowid:bigint>)
                      null sort order: a
                      sort order: +
                      Map-reduce partition columns: UDFToInteger(_col0) (type: int)
                      Statistics: Num rows: 1 Data size: 185 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: char(15)), _col2 (type: bigint), _col3 (type: bigint)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: struct<writeid:bigint,bucketid:int,rowid:bigint>)
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 76 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 76 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                      output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
                      serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
                      name: default.mat1
                  Write Type: DELETE
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0), avg(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector_hll(VALUE._col4), min(VALUE._col5), max(VALUE._col6), count(VALUE._col7), compute_bit_vector_hll(VALUE._col8), min(VALUE._col9), max(VALUE._col10), count(VALUE._col11), compute_bit_vector_hll(VALUE._col12)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                Statistics: Num rows: 1 Data size: 508 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: 'STRING' (type: string), UDFToLong(COALESCE(_col0,0)) (type: bigint), COALESCE(_col1,0) (type: double), (_col2 - _col3) (type: bigint), COALESCE(ndv_compute_bit_vector(_col4),0) (type: bigint), _col4 (type: binary), 'LONG' (type: string), _col5 (type: bigint), _col6 (type: bigint), (_col2 - _col7) (type: bigint), COALESCE(ndv_compute_bit_vector(_col8),0) (type: bigint), _col8 (type: binary), 'LONG' (type: string), _col9 (type: bigint), _col10 (type: bigint), (_col2 - _col11) (type: bigint), COALESCE(ndv_compute_bit_vector(_col12),0) (type: bigint), _col12 (type: binary)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17
                  Statistics: Num rows: 1 Data size: 794 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 794 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 5 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: struct<writeid:bigint,bucketid:int,rowid:bigint>), VALUE._col0 (type: char(15)), VALUE._col1 (type: bigint), VALUE._col2 (type: bigint)
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 1 Data size: 185 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 185 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                      output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
                      serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
                      name: default.mat1
                  Write Type: UPDATE
        Reducer 7 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: char(15))
                  1 _col0 (type: char(15))
                outputColumnNames: _col0, _col1, _col2, _col3, _col5, _col6
                residual filter predicates: {(_col3 or _col6)}
                Statistics: Num rows: 6 Data size: 670 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: char(15)), CASE WHEN ((_col2 or _col5)) THEN ((-1 * _col1)) ELSE (_col1) END (type: int), CASE WHEN ((_col2 or _col5)) THEN (-1) ELSE (1) END (type: int)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 6 Data size: 670 Basic stats: COMPLETE Column stats: COMPLETE
                  Group By Operator
                    aggregations: sum(_col1), sum(_col2)
                    keys: _col0 (type: char(15))
                    minReductionHashAggr: 0.4
                    mode: hash
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 5 Data size: 545 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: char(15))
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: char(15))
                      Statistics: Num rows: 5 Data size: 545 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: bigint), _col2 (type: bigint)
        Reducer 8 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), sum(VALUE._col1)
                keys: KEY._col0 (type: char(15))
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 5 Data size: 545 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col0 (type: char(15))
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col0 (type: char(15))
                  Statistics: Num rows: 5 Data size: 545 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col1 (type: bigint), _col2 (type: bigint)

  Stage: Stage-4
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          replace: false
          table:
              input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
              output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
              serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
              name: default.mat1
          Write Type: DELETE

  Stage: Stage-5
    Stats Work
      Basic Stats Work:

  Stage: Stage-8
    Materialized View Update
      name: default.mat1
      update creation metadata: true

  Stage: Stage-1
    Move Operator
      tables:
          replace: false
          table:
              input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
              output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
              serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
              name: default.mat1
          Write Type: INSERT

  Stage: Stage-6
    Stats Work
      Basic Stats Work:

  Stage: Stage-2
    Move Operator
      tables:
          replace: false
          table:
              input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
              output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
              serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
              name: default.mat1
          Write Type: UPDATE

  Stage: Stage-7
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: a, _c1, _c2
          Column Types: char(15), bigint, bigint
          Table: default.mat1

PREHOOK: query: alter materialized view mat1 rebuild
PREHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD
PREHOOK: Input: default@mat1
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
PREHOOK: Output: default@mat1
PREHOOK: Output: default@mat1
PREHOOK: Output: default@mat1
POSTHOOK: query: alter materialized view mat1 rebuild
POSTHOOK: type: ALTER_MATERIALIZED_VIEW_REBUILD
POSTHOOK: Input: default@mat1
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
POSTHOOK: Output: default@mat1
POSTHOOK: Output: default@mat1
POSTHOOK: Output: default@mat1
POSTHOOK: Lineage: mat1._c1 EXPRESSION [(mat1)default.mat1.FieldSchema(name:_c1, type:bigint, comment:null), (t1)t1.FieldSchema(name:ROW__IS__DELETED, type:boolean, comment:), (t2)t2.FieldSchema(name:ROW__IS__DELETED, type:boolean, comment:), (t1)t1.FieldSchema(name:b, type:int, comment:null), ]
POSTHOOK: Lineage: mat1._c2 EXPRESSION [(mat1)default.mat1.FieldSchema(name:_c2, type:bigint, comment:null), (t1)t1.FieldSchema(name:ROW__IS__DELETED, type:boolean, comment:), (t2)t2.FieldSchema(name:ROW__IS__DELETED, type:boolean, comment:), ]
POSTHOOK: Lineage: mat1.a SIMPLE [(t1)t1.FieldSchema(name:a, type:char(15), comment:null), ]
PREHOOK: query: explain cbo
select t1.a, sum(t1.b) from t1
join t2 on (t1.a = t2.a)
group by t1.a
PREHOOK: type: QUERY
PREHOOK: Input: default@mat1
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: explain cbo
select t1.a, sum(t1.b) from t1
join t2 on (t1.a = t2.a)
group by t1.a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@mat1
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
CBO PLAN:
HiveProject(a=[$0], _c1=[$1])
  HiveTableScan(table=[[default, mat1]], table:alias=[default.mat1])

PREHOOK: query: select t1.a, sum(t1.b) from t1
join t2 on (t1.a = t2.a)
group by t1.a
PREHOOK: type: QUERY
PREHOOK: Input: default@mat1
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: select t1.a, sum(t1.b) from t1
join t2 on (t1.a = t2.a)
group by t1.a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@mat1
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
add            	5
null_add       	NULL
null_update    	NULL
sum0           	0
update         	7
PREHOOK: query: drop materialized view mat1
PREHOOK: type: DROP_MATERIALIZED_VIEW
PREHOOK: Input: default@mat1
PREHOOK: Output: default@mat1
POSTHOOK: query: drop materialized view mat1
POSTHOOK: type: DROP_MATERIALIZED_VIEW
POSTHOOK: Input: default@mat1
POSTHOOK: Output: default@mat1
PREHOOK: query: select t1.a, sum(t1.b) from t1
join t2 on (t1.a = t2.a)
group by t1.a
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: select t1.a, sum(t1.b) from t1
join t2 on (t1.a = t2.a)
group by t1.a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
add            	5
null_add       	NULL
null_update    	NULL
sum0           	0
update         	7
