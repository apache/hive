PREHOOK: query: CREATE TABLE item_dim (key1 int, name string) stored as ORC
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@item_dim
POSTHOOK: query: CREATE TABLE item_dim (key1 int, name string) stored as ORC
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@item_dim
PREHOOK: query: CREATE TABLE orders_fact (nokey int, key2 int, dt timestamp) stored as ORC
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@orders_fact
POSTHOOK: query: CREATE TABLE orders_fact (nokey int, key2 int, dt timestamp) stored as ORC
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@orders_fact
PREHOOK: query: INSERT INTO item_dim values(101, "Item 101")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@item_dim
POSTHOOK: query: INSERT INTO item_dim values(101, "Item 101")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@item_dim
POSTHOOK: Lineage: item_dim.key1 SCRIPT []
POSTHOOK: Lineage: item_dim.name SCRIPT []
PREHOOK: query: INSERT INTO item_dim values(102, "Item 102")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@item_dim
POSTHOOK: query: INSERT INTO item_dim values(102, "Item 102")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@item_dim
POSTHOOK: Lineage: item_dim.key1 SCRIPT []
POSTHOOK: Lineage: item_dim.name SCRIPT []
PREHOOK: query: INSERT INTO orders_fact values(12345, 101, '2001-01-30 00:00:00')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@orders_fact
POSTHOOK: query: INSERT INTO orders_fact values(12345, 101, '2001-01-30 00:00:00')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@orders_fact
POSTHOOK: Lineage: orders_fact.dt SCRIPT []
POSTHOOK: Lineage: orders_fact.key2 SCRIPT []
POSTHOOK: Lineage: orders_fact.nokey SCRIPT []
PREHOOK: query: INSERT INTO orders_fact values(23456, 104, '2002-02-30 00:00:00')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@orders_fact
POSTHOOK: query: INSERT INTO orders_fact values(23456, 104, '2002-02-30 00:00:00')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@orders_fact
POSTHOOK: Lineage: orders_fact.dt SCRIPT []
POSTHOOK: Lineage: orders_fact.key2 SCRIPT []
POSTHOOK: Lineage: orders_fact.nokey SCRIPT []
PREHOOK: query: INSERT INTO orders_fact values(34567, 108, '2003-03-30 00:00:00')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@orders_fact
POSTHOOK: query: INSERT INTO orders_fact values(34567, 108, '2003-03-30 00:00:00')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@orders_fact
POSTHOOK: Lineage: orders_fact.dt SCRIPT []
POSTHOOK: Lineage: orders_fact.key2 SCRIPT []
POSTHOOK: Lineage: orders_fact.nokey SCRIPT []
PREHOOK: query: INSERT INTO orders_fact values(45678, 102, '2004-04-30 00:00:00')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@orders_fact
POSTHOOK: query: INSERT INTO orders_fact values(45678, 102, '2004-04-30 00:00:00')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@orders_fact
POSTHOOK: Lineage: orders_fact.dt SCRIPT []
POSTHOOK: Lineage: orders_fact.key2 SCRIPT []
POSTHOOK: Lineage: orders_fact.nokey SCRIPT []
PREHOOK: query: INSERT INTO orders_fact values(56789, 109, '2005-05-30 00:00:00')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@orders_fact
POSTHOOK: query: INSERT INTO orders_fact values(56789, 109, '2005-05-30 00:00:00')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@orders_fact
POSTHOOK: Lineage: orders_fact.dt SCRIPT []
POSTHOOK: Lineage: orders_fact.key2 SCRIPT []
POSTHOOK: Lineage: orders_fact.nokey SCRIPT []
PREHOOK: query: INSERT INTO orders_fact values(67891, 110, '2006-06-30 00:00:00')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@orders_fact
POSTHOOK: query: INSERT INTO orders_fact values(67891, 110, '2006-06-30 00:00:00')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@orders_fact
POSTHOOK: Lineage: orders_fact.dt SCRIPT []
POSTHOOK: Lineage: orders_fact.key2 SCRIPT []
POSTHOOK: Lineage: orders_fact.nokey SCRIPT []
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL select key1, key2, name, dt from orders_fact join item_dim on (orders_fact.key2 = item_dim.key1)
PREHOOK: type: QUERY
PREHOOK: Input: default@item_dim
PREHOOK: Input: default@orders_fact
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL select key1, key2, name, dt from orders_fact join item_dim on (orders_fact.key2 = item_dim.key1)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@item_dim
POSTHOOK: Input: default@orders_fact
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 2 (BROADCAST_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: orders_fact
                  filterExpr: key2 is not null (type: boolean)
                  probeDecodeDetails: cacheKey:HASH_MAP_MAPJOIN_25_container, bigKeyColName:key2, smallTablePos:1, keyRatio:1.0
                  Statistics: Num rows: 6 Data size: 264 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:nokey:int, 1:key2:int, 2:dt:timestamp, 3:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: SelectColumnIsNotNull(col 1:int)
                    predicate: key2 is not null (type: boolean)
                    Statistics: Num rows: 6 Data size: 264 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key2 (type: int), dt (type: timestamp)
                      outputColumnNames: _col0, _col1
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [1, 2]
                      Statistics: Num rows: 6 Data size: 264 Basic stats: COMPLETE Column stats: NONE
                      Map Join Operator
                        condition map:
                             Inner Join 0 to 1
                        keys:
                          0 _col0 (type: int)
                          1 _col0 (type: int)
                        Map Join Vectorization:
                            bigTableKeyColumns: 1:int
                            bigTableRetainColumnNums: [1, 2]
                            bigTableValueColumns: 1:int, 2:timestamp
                            className: VectorMapJoinInnerLongOperator
                            native: true
                            nativeConditionsMet: hive.mapjoin.optimized.hashtable IS true, hive.vectorized.execution.mapjoin.native.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, One MapJoin Condition IS true, No nullsafe IS true, Small table vectorizes IS true, Fast Hash Table and No Hybrid Hash Join IS true
                            nonOuterSmallTableKeyMapping: []
                            projectedOutput: 1:int, 2:timestamp, 1:int, 4:string
                            smallTableValueMapping: 4:string
                            hashTableImplementationType: FAST
                        outputColumnNames: _col0, _col1, _col2, _col3
                        input vertices:
                          1 Map 2
                        Statistics: Num rows: 6 Data size: 290 Basic stats: COMPLETE Column stats: NONE
                        Select Operator
                          expressions: _col2 (type: int), _col0 (type: int), _col3 (type: string), _col1 (type: timestamp)
                          outputColumnNames: _col0, _col1, _col2, _col3
                          Select Vectorization:
                              className: VectorSelectOperator
                              native: true
                              projectedOutputColumnNums: [1, 1, 4, 2]
                          Statistics: Num rows: 6 Data size: 290 Basic stats: COMPLETE Column stats: NONE
                          File Output Operator
                            compressed: false
                            File Sink Vectorization:
                                className: VectorFileSinkOperator
                                native: false
                            Statistics: Num rows: 6 Data size: 290 Basic stats: COMPLETE Column stats: NONE
                            table:
                                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [1, 2]
                    dataColumns: nokey:int, key2:int, dt:timestamp
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [string]
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: item_dim
                  filterExpr: key1 is not null (type: boolean)
                  Statistics: Num rows: 2 Data size: 376 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:key1:int, 1:name:string, 2:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: SelectColumnIsNotNull(col 0:int)
                    predicate: key1 is not null (type: boolean)
                    Statistics: Num rows: 2 Data size: 376 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key1 (type: int), name (type: string)
                      outputColumnNames: _col0, _col1
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [0, 1]
                      Statistics: Num rows: 2 Data size: 376 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkLongOperator
                            keyColumns: 0:int
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                            valueColumns: 1:string
                        Statistics: Num rows: 2 Data size: 376 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 2
                    includeColumns: [0, 1]
                    dataColumns: key1:int, name:string
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key1, key2, name, dt from orders_fact join item_dim on (orders_fact.key2 = item_dim.key1)
PREHOOK: type: QUERY
PREHOOK: Input: default@item_dim
PREHOOK: Input: default@orders_fact
#### A masked pattern was here ####
POSTHOOK: query: select key1, key2, name, dt from orders_fact join item_dim on (orders_fact.key2 = item_dim.key1)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@item_dim
POSTHOOK: Input: default@orders_fact
#### A masked pattern was here ####
102	102	Item 102	2004-04-30 00:00:00
101	101	Item 101	2001-01-30 00:00:00
