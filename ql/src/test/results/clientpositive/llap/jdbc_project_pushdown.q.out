PREHOOK: query: CREATE EXTERNAL TABLE book
(
    id int,
    title varchar(20),
    author int
)
STORED BY                                          
'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (                                    
    "hive.sql.database.type" = "POSTGRES",
    "hive.sql.jdbc.driver" = "org.postgresql.Driver",
    "hive.sql.jdbc.url" = "jdbc:postgresql://localhost:5432/qtestDB",
    "hive.sql.dbcp.username" = "qtestuser",
    "hive.sql.dbcp.password" = "qtestpassword",
    "hive.sql.table" = "book"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@book
POSTHOOK: query: CREATE EXTERNAL TABLE book
(
    id int,
    title varchar(20),
    author int
)
STORED BY                                          
'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (                                    
    "hive.sql.database.type" = "POSTGRES",
    "hive.sql.jdbc.driver" = "org.postgresql.Driver",
    "hive.sql.jdbc.url" = "jdbc:postgresql://localhost:5432/qtestDB",
    "hive.sql.dbcp.username" = "qtestuser",
    "hive.sql.dbcp.password" = "qtestpassword",
    "hive.sql.table" = "book"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@book
PREHOOK: query: CREATE EXTERNAL TABLE author
( id int,
fname string,
lname string)
STORED BY
'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (                                    
    "hive.sql.database.type" = "POSTGRES",
    "hive.sql.jdbc.driver" = "org.postgresql.Driver",
    "hive.sql.jdbc.url" = "jdbc:postgresql://localhost:5432/qtestDB",
    "hive.sql.dbcp.username" = "qtestuser",
    "hive.sql.dbcp.password" = "qtestpassword",
    "hive.sql.table" = "author"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@author
POSTHOOK: query: CREATE EXTERNAL TABLE author
( id int,
fname string,
lname string)
STORED BY
'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (                                    
    "hive.sql.database.type" = "POSTGRES",
    "hive.sql.jdbc.driver" = "org.postgresql.Driver",
    "hive.sql.jdbc.url" = "jdbc:postgresql://localhost:5432/qtestDB",
    "hive.sql.dbcp.username" = "qtestuser",
    "hive.sql.dbcp.password" = "qtestpassword",
    "hive.sql.table" = "author"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@author
PREHOOK: query: explain cbo select id from book where substring(title, 0, 3) = 'Les'
PREHOOK: type: QUERY
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain cbo select id from book where substring(title, 0, 3) = 'Les'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@book
#### A masked pattern was here ####
CBO PLAN:
HiveJdbcConverter(convention=[JDBC.POSTGRES])
  JdbcProject(id=[$0])
    JdbcFilter(condition=[=(SUBSTRING($1, 0, 3), _UTF-16LE'Les')])
      JdbcProject(id=[$0], title=[$1])
        JdbcHiveTableScan(table=[[default, book]], table:alias=[book])

PREHOOK: query: explain cbo select id from book where ucase(title) = 'LES MISERABLES'
PREHOOK: type: QUERY
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain cbo select id from book where ucase(title) = 'LES MISERABLES'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@book
#### A masked pattern was here ####
CBO PLAN:
HiveProject(id=[$0])
  HiveFilter(condition=[=(CAST(ucase($1)):VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'LES MISERABLES')])
    HiveProject(id=[$0], title=[$1])
      HiveJdbcConverter(convention=[JDBC.POSTGRES])
        JdbcProject(id=[$0], title=[$1])
          JdbcHiveTableScan(table=[[default, book]], table:alias=[book])

PREHOOK: query: explain cbo select book.title, author.fname from book join author on book.author = author.id
PREHOOK: type: QUERY
PREHOOK: Input: default@author
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain cbo select book.title, author.fname from book join author on book.author = author.id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@author
POSTHOOK: Input: default@book
#### A masked pattern was here ####
CBO PLAN:
HiveJdbcConverter(convention=[JDBC.POSTGRES])
  JdbcProject(title=[$0], fname=[$3])
    JdbcJoin(condition=[=($1, $2)], joinType=[inner])
      JdbcProject(title=[$0], author=[$1])
        JdbcFilter(condition=[IS NOT NULL($1)])
          JdbcProject(title=[$1], author=[$2])
            JdbcHiveTableScan(table=[[default, book]], table:alias=[book])
      JdbcProject(id=[$0], fname=[$1])
        JdbcFilter(condition=[IS NOT NULL($0)])
          JdbcProject(id=[$0], fname=[$1])
            JdbcHiveTableScan(table=[[default, author]], table:alias=[author])

PREHOOK: query: explain cbo select book.title, author.fname from book join author
where book.author = author.id
and ucase(book.title) = 'LES MISERABLES'
and substring(author.lname, 0, 3) = 'Hug'
PREHOOK: type: QUERY
PREHOOK: Input: default@author
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain cbo select book.title, author.fname from book join author
where book.author = author.id
and ucase(book.title) = 'LES MISERABLES'
and substring(author.lname, 0, 3) = 'Hug'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@author
POSTHOOK: Input: default@book
#### A masked pattern was here ####
CBO PLAN:
HiveProject(title=[$0], fname=[$3])
  HiveJoin(condition=[=($1, $2)], joinType=[inner], algorithm=[none], cost=[not available])
    HiveProject(title=[$0], author=[$1])
      HiveFilter(condition=[=(CAST(ucase($0)):VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'LES MISERABLES')])
        HiveProject(title=[$0], author=[$1])
          HiveJdbcConverter(convention=[JDBC.POSTGRES])
            JdbcFilter(condition=[IS NOT NULL($1)])
              JdbcProject(title=[$1], author=[$2])
                JdbcHiveTableScan(table=[[default, book]], table:alias=[book])
    HiveProject(id=[$0], fname=[$1])
      HiveJdbcConverter(convention=[JDBC.POSTGRES])
        JdbcProject(id=[$0], fname=[$1])
          JdbcFilter(condition=[AND(=(SUBSTRING($2, 0, 3), _UTF-16LE'Hug'), IS NOT NULL($0))])
            JdbcHiveTableScan(table=[[default, author]], table:alias=[author])

PREHOOK: query: explain cbo 
select author.fname, count(book.title) as books
from book join author
where book.author = author.id
group by author.fname
PREHOOK: type: QUERY
PREHOOK: Input: default@author
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain cbo 
select author.fname, count(book.title) as books
from book join author
where book.author = author.id
group by author.fname
POSTHOOK: type: QUERY
POSTHOOK: Input: default@author
POSTHOOK: Input: default@book
#### A masked pattern was here ####
CBO PLAN:
HiveJdbcConverter(convention=[JDBC.POSTGRES])
  JdbcAggregate(group=[{3}], agg#0=[count($0)])
    JdbcJoin(condition=[=($1, $2)], joinType=[inner])
      JdbcProject(title=[$0], author=[$1])
        JdbcFilter(condition=[IS NOT NULL($1)])
          JdbcProject(title=[$1], author=[$2])
            JdbcHiveTableScan(table=[[default, book]], table:alias=[book])
      JdbcProject(id=[$0], fname=[$1])
        JdbcFilter(condition=[IS NOT NULL($0)])
          JdbcProject(id=[$0], fname=[$1])
            JdbcHiveTableScan(table=[[default, author]], table:alias=[author])

PREHOOK: query: explain cbo 
select ucase(author.fname), count(book.title) as books
from book join author
where book.author = author.id
group by ucase(author.fname)
PREHOOK: type: QUERY
PREHOOK: Input: default@author
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain cbo 
select ucase(author.fname), count(book.title) as books
from book join author
where book.author = author.id
group by ucase(author.fname)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@author
POSTHOOK: Input: default@book
#### A masked pattern was here ####
CBO PLAN:
HiveAggregate(group=[{3}], agg#0=[count($0)])
  HiveJoin(condition=[=($1, $2)], joinType=[inner], algorithm=[none], cost=[not available])
    HiveProject(title=[$0], author=[$1])
      HiveJdbcConverter(convention=[JDBC.POSTGRES])
        JdbcFilter(condition=[IS NOT NULL($1)])
          JdbcProject(title=[$1], author=[$2])
            JdbcHiveTableScan(table=[[default, book]], table:alias=[book])
    HiveProject(id=[$0], ucase=[ucase($1)])
      HiveProject(id=[$0], fname=[$1])
        HiveJdbcConverter(convention=[JDBC.POSTGRES])
          JdbcFilter(condition=[IS NOT NULL($0)])
            JdbcProject(id=[$0], fname=[$1])
              JdbcHiveTableScan(table=[[default, author]], table:alias=[author])

PREHOOK: query: explain cbo 
select ucase(author.fname), count(book.title) as books
from book join author
where book.author = author.id
group by author.fname
order by ucase(author.fname)
limit 5
PREHOOK: type: QUERY
PREHOOK: Input: default@author
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain cbo 
select ucase(author.fname), count(book.title) as books
from book join author
where book.author = author.id
group by author.fname
order by ucase(author.fname)
limit 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@author
POSTHOOK: Input: default@book
#### A masked pattern was here ####
CBO PLAN:
HiveProject(_o__c0=[$0], books=[$1])
  HiveSortLimit(sort0=[$2], dir0=[ASC], fetch=[5])
    HiveProject(_o__c0=[ucase($0)], books=[$1], _o__col4=[ucase($0)])
      HiveProject(fname=[$0], $f1=[$1])
        HiveJdbcConverter(convention=[JDBC.POSTGRES])
          JdbcAggregate(group=[{3}], agg#0=[count($0)])
            JdbcJoin(condition=[=($1, $2)], joinType=[inner])
              JdbcProject(title=[$0], author=[$1])
                JdbcFilter(condition=[IS NOT NULL($1)])
                  JdbcProject(title=[$1], author=[$2])
                    JdbcHiveTableScan(table=[[default, book]], table:alias=[book])
              JdbcProject(id=[$0], fname=[$1])
                JdbcFilter(condition=[IS NOT NULL($0)])
                  JdbcProject(id=[$0], fname=[$1])
                    JdbcHiveTableScan(table=[[default, author]], table:alias=[author])

