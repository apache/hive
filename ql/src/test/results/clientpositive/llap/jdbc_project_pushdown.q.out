PREHOOK: query: CREATE EXTERNAL TABLE book
(
    id int,
    title varchar(20),
    author int
)
STORED BY                                          
'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (                                    
    "hive.sql.database.type" = "POSTGRES",
    "hive.sql.jdbc.driver" = "org.postgresql.Driver",
    "hive.sql.jdbc.url" = "jdbc:postgresql://localhost:5432/qtestDB",
    "hive.sql.dbcp.username" = "qtestuser",
    "hive.sql.dbcp.password" = "qtestpassword",
    "hive.sql.table" = "book"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@book
POSTHOOK: query: CREATE EXTERNAL TABLE book
(
    id int,
    title varchar(20),
    author int
)
STORED BY                                          
'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (                                    
    "hive.sql.database.type" = "POSTGRES",
    "hive.sql.jdbc.driver" = "org.postgresql.Driver",
    "hive.sql.jdbc.url" = "jdbc:postgresql://localhost:5432/qtestDB",
    "hive.sql.dbcp.username" = "qtestuser",
    "hive.sql.dbcp.password" = "qtestpassword",
    "hive.sql.table" = "book"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@book
PREHOOK: query: CREATE EXTERNAL TABLE author
( id int,
fname string,
lname string)
STORED BY
'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (                                    
    "hive.sql.database.type" = "POSTGRES",
    "hive.sql.jdbc.driver" = "org.postgresql.Driver",
    "hive.sql.jdbc.url" = "jdbc:postgresql://localhost:5432/qtestDB",
    "hive.sql.dbcp.username" = "qtestuser",
    "hive.sql.dbcp.password" = "qtestpassword",
    "hive.sql.table" = "author"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@author
POSTHOOK: query: CREATE EXTERNAL TABLE author
( id int,
fname string,
lname string)
STORED BY
'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (                                    
    "hive.sql.database.type" = "POSTGRES",
    "hive.sql.jdbc.driver" = "org.postgresql.Driver",
    "hive.sql.jdbc.url" = "jdbc:postgresql://localhost:5432/qtestDB",
    "hive.sql.dbcp.username" = "qtestuser",
    "hive.sql.dbcp.password" = "qtestpassword",
    "hive.sql.table" = "author"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@author
PREHOOK: query: explain cbo select id from book where substring(title, 0, 4) = 'Les'
PREHOOK: type: QUERY
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain cbo select id from book where substring(title, 0, 4) = 'Les'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@book
#### A masked pattern was here ####
CBO PLAN:
HiveJdbcConverter(convention=[JDBC.POSTGRES])
  JdbcProject(id=[$0])
    JdbcFilter(condition=[=(SUBSTRING($1, 0, 4), _UTF-16LE'Les')])
      JdbcProject(id=[$0], title=[$1])
        JdbcHiveTableScan(table=[[default, book]], table:alias=[book])

PREHOOK: query: explain select id from book where substring(title, 0, 4) = 'Les'
PREHOOK: type: QUERY
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain select id from book where substring(title, 0, 4) = 'Les'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@book
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: book
          properties:
            hive.sql.query SELECT "id"
FROM (SELECT "id", "title"
FROM "book") AS "t"
WHERE SUBSTRING("title" FROM 0 FOR 4) = 'Les'
            hive.sql.query.fieldNames id
            hive.sql.query.fieldTypes int
            hive.sql.query.split true
          Select Operator
            expressions: id (type: int)
            outputColumnNames: _col0
            ListSink

PREHOOK: query: select id from book where substring(title, 0, 4) = 'Les'
PREHOOK: type: QUERY
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: select id from book where substring(title, 0, 4) = 'Les'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@book
#### A masked pattern was here ####
1
PREHOOK: query: explain cbo select id from book where ucase(title) = 'LES MISERABLES'
PREHOOK: type: QUERY
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain cbo select id from book where ucase(title) = 'LES MISERABLES'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@book
#### A masked pattern was here ####
CBO PLAN:
HiveProject(id=[$0])
  HiveFilter(condition=[=(CAST(ucase($1)):VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'LES MISERABLES')])
    HiveProject(id=[$0], title=[$1])
      HiveJdbcConverter(convention=[JDBC.POSTGRES])
        JdbcProject(id=[$0], title=[$1])
          JdbcHiveTableScan(table=[[default, book]], table:alias=[book])

PREHOOK: query: explain select id from book where ucase(title) = 'LES MISERABLES'
PREHOOK: type: QUERY
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain select id from book where ucase(title) = 'LES MISERABLES'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@book
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: book
          properties:
            hive.sql.query SELECT "id", "title"
FROM "book"
            hive.sql.query.fieldNames id,title
            hive.sql.query.fieldTypes int,varchar(20)
            hive.sql.query.split true
          Select Operator
            expressions: id (type: int), title (type: varchar(20))
            outputColumnNames: _col0, _col1
            Filter Operator
              predicate: (CAST( upper(_col1) AS STRING) = 'LES MISERABLES') (type: boolean)
              Select Operator
                expressions: _col0 (type: int)
                outputColumnNames: _col0
                ListSink

PREHOOK: query: select id from book where ucase(title) = 'LES MISERABLES'
PREHOOK: type: QUERY
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: select id from book where ucase(title) = 'LES MISERABLES'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@book
#### A masked pattern was here ####
1
PREHOOK: query: explain cbo select book.title, author.fname from book join author on book.author = author.id
PREHOOK: type: QUERY
PREHOOK: Input: default@author
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain cbo select book.title, author.fname from book join author on book.author = author.id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@author
POSTHOOK: Input: default@book
#### A masked pattern was here ####
CBO PLAN:
HiveJdbcConverter(convention=[JDBC.POSTGRES])
  JdbcProject(title=[$0], fname=[$3])
    JdbcJoin(condition=[=($1, $2)], joinType=[inner])
      JdbcProject(title=[$0], author=[$1])
        JdbcFilter(condition=[IS NOT NULL($1)])
          JdbcProject(title=[$1], author=[$2])
            JdbcHiveTableScan(table=[[default, book]], table:alias=[book])
      JdbcProject(id=[$0], fname=[$1])
        JdbcFilter(condition=[IS NOT NULL($0)])
          JdbcProject(id=[$0], fname=[$1])
            JdbcHiveTableScan(table=[[default, author]], table:alias=[author])

PREHOOK: query: explain select book.title, author.fname from book join author on book.author = author.id
PREHOOK: type: QUERY
PREHOOK: Input: default@author
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain select book.title, author.fname from book join author on book.author = author.id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@author
POSTHOOK: Input: default@book
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: book
          properties:
            hive.sql.query SELECT "t1"."title", "t4"."fname"
FROM (SELECT "title", "author"
FROM (SELECT "title", "author"
FROM "book") AS "t"
WHERE "author" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "id", "fname"
FROM (SELECT "id", "fname"
FROM "author") AS "t2"
WHERE "id" IS NOT NULL) AS "t4" ON "t1"."author" = "t4"."id"
            hive.sql.query.fieldNames title,fname
            hive.sql.query.fieldTypes varchar(20),string
            hive.sql.query.split false
          Select Operator
            expressions: title (type: varchar(20)), fname (type: string)
            outputColumnNames: _col0, _col1
            ListSink

PREHOOK: query: select book.title, author.fname from book join author on book.author = author.id
PREHOOK: type: QUERY
PREHOOK: Input: default@author
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: select book.title, author.fname from book join author on book.author = author.id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@author
POSTHOOK: Input: default@book
#### A masked pattern was here ####
Les Miserables	Victor
The Count Of Monte C	Alexandre
PREHOOK: query: explain cbo select book.title, author.fname from book join author
where book.author = author.id
and ucase(book.title) = 'LES MISERABLES'
and substring(author.lname, 0, 4) = 'Hug'
PREHOOK: type: QUERY
PREHOOK: Input: default@author
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain cbo select book.title, author.fname from book join author
where book.author = author.id
and ucase(book.title) = 'LES MISERABLES'
and substring(author.lname, 0, 4) = 'Hug'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@author
POSTHOOK: Input: default@book
#### A masked pattern was here ####
CBO PLAN:
HiveProject(title=[$0], fname=[$3])
  HiveJoin(condition=[=($1, $2)], joinType=[inner], algorithm=[none], cost=[not available])
    HiveProject(title=[$0], author=[$1])
      HiveFilter(condition=[=(CAST(ucase($0)):VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'LES MISERABLES')])
        HiveProject(title=[$0], author=[$1])
          HiveJdbcConverter(convention=[JDBC.POSTGRES])
            JdbcFilter(condition=[IS NOT NULL($1)])
              JdbcProject(title=[$1], author=[$2])
                JdbcHiveTableScan(table=[[default, book]], table:alias=[book])
    HiveProject(id=[$0], fname=[$1])
      HiveJdbcConverter(convention=[JDBC.POSTGRES])
        JdbcProject(id=[$0], fname=[$1])
          JdbcFilter(condition=[AND(=(SUBSTRING($2, 0, 4), _UTF-16LE'Hug'), IS NOT NULL($0))])
            JdbcHiveTableScan(table=[[default, author]], table:alias=[author])

PREHOOK: query: explain select book.title, author.fname from book join author
where book.author = author.id
and ucase(book.title) = 'LES MISERABLES'
and substring(author.lname, 0, 4) = 'Hug'
PREHOOK: type: QUERY
PREHOOK: Input: default@author
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain select book.title, author.fname from book join author
where book.author = author.id
and ucase(book.title) = 'LES MISERABLES'
and substring(author.lname, 0, 4) = 'Hug'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@author
POSTHOOK: Input: default@book
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: book
                  properties:
                    hive.sql.query SELECT "title", "author"
FROM (SELECT "title", "author"
FROM "book") AS "t"
WHERE "author" IS NOT NULL
                    hive.sql.query.fieldNames title,author
                    hive.sql.query.fieldTypes varchar(20),int
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 108 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: title (type: varchar(20)), author (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 108 Basic stats: COMPLETE Column stats: NONE
                    Filter Operator
                      predicate: (CAST( upper(_col0) AS STRING) = 'LES MISERABLES') (type: boolean)
                      Statistics: Num rows: 1 Data size: 108 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 1 Data size: 108 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: varchar(20))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: author
                  properties:
                    hive.sql.query SELECT "id", "fname"
FROM "author"
WHERE SUBSTRING("lname" FROM 0 FOR 4) = 'Hug' AND "id" IS NOT NULL
                    hive.sql.query.fieldNames id,fname
                    hive.sql.query.fieldTypes int,string
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: id (type: int), fname (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col3
                Statistics: Num rows: 1 Data size: 118 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: varchar(20)), _col3 (type: string)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 118 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 118 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select book.title, author.fname from book join author
where book.author = author.id
and ucase(book.title) = 'LES MISERABLES'
and substring(author.lname, 0, 4) = 'Hug'
PREHOOK: type: QUERY
PREHOOK: Input: default@author
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: select book.title, author.fname from book join author
where book.author = author.id
and ucase(book.title) = 'LES MISERABLES'
and substring(author.lname, 0, 4) = 'Hug'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@author
POSTHOOK: Input: default@book
#### A masked pattern was here ####
Les Miserables	Victor
PREHOOK: query: explain cbo 
select author.fname, count(book.title) as books
from book join author
where book.author = author.id
group by author.fname
PREHOOK: type: QUERY
PREHOOK: Input: default@author
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain cbo 
select author.fname, count(book.title) as books
from book join author
where book.author = author.id
group by author.fname
POSTHOOK: type: QUERY
POSTHOOK: Input: default@author
POSTHOOK: Input: default@book
#### A masked pattern was here ####
CBO PLAN:
HiveJdbcConverter(convention=[JDBC.POSTGRES])
  JdbcAggregate(group=[{3}], agg#0=[count($0)])
    JdbcJoin(condition=[=($1, $2)], joinType=[inner])
      JdbcProject(title=[$0], author=[$1])
        JdbcFilter(condition=[IS NOT NULL($1)])
          JdbcProject(title=[$1], author=[$2])
            JdbcHiveTableScan(table=[[default, book]], table:alias=[book])
      JdbcProject(id=[$0], fname=[$1])
        JdbcFilter(condition=[IS NOT NULL($0)])
          JdbcProject(id=[$0], fname=[$1])
            JdbcHiveTableScan(table=[[default, author]], table:alias=[author])

PREHOOK: query: explain 
select author.fname, count(book.title) as books
from book join author
where book.author = author.id
group by author.fname
PREHOOK: type: QUERY
PREHOOK: Input: default@author
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain 
select author.fname, count(book.title) as books
from book join author
where book.author = author.id
group by author.fname
POSTHOOK: type: QUERY
POSTHOOK: Input: default@author
POSTHOOK: Input: default@book
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: book
          properties:
            hive.sql.query SELECT "t4"."fname", COUNT("t1"."title") AS "$f1"
FROM (SELECT "title", "author"
FROM (SELECT "title", "author"
FROM "book") AS "t"
WHERE "author" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "id", "fname"
FROM (SELECT "id", "fname"
FROM "author") AS "t2"
WHERE "id" IS NOT NULL) AS "t4" ON "t1"."author" = "t4"."id"
GROUP BY "t4"."fname"
            hive.sql.query.fieldNames fname,$f1
            hive.sql.query.fieldTypes string,bigint
            hive.sql.query.split false
          Select Operator
            expressions: fname (type: string), $f1 (type: bigint)
            outputColumnNames: _col0, _col1
            ListSink

PREHOOK: query: select author.fname, count(book.title) as books
from book join author
where book.author = author.id
group by author.fname
PREHOOK: type: QUERY
PREHOOK: Input: default@author
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: select author.fname, count(book.title) as books
from book join author
where book.author = author.id
group by author.fname
POSTHOOK: type: QUERY
POSTHOOK: Input: default@author
POSTHOOK: Input: default@book
#### A masked pattern was here ####
Victor	1
Alexandre	1
PREHOOK: query: explain cbo 
select ucase(author.fname), count(book.title) as books
from book join author
where book.author = author.id
group by author.fname
order by ucase(author.fname)
limit 5
PREHOOK: type: QUERY
PREHOOK: Input: default@author
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain cbo 
select ucase(author.fname), count(book.title) as books
from book join author
where book.author = author.id
group by author.fname
order by ucase(author.fname)
limit 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@author
POSTHOOK: Input: default@book
#### A masked pattern was here ####
CBO PLAN:
HiveProject(_o__c0=[$0], books=[$1])
  HiveSortLimit(sort0=[$2], dir0=[ASC], fetch=[5])
    HiveProject(_o__c0=[ucase($0)], books=[$1], _o__col4=[ucase($0)])
      HiveProject(fname=[$0], $f1=[$1])
        HiveJdbcConverter(convention=[JDBC.POSTGRES])
          JdbcAggregate(group=[{3}], agg#0=[count($0)])
            JdbcJoin(condition=[=($1, $2)], joinType=[inner])
              JdbcProject(title=[$0], author=[$1])
                JdbcFilter(condition=[IS NOT NULL($1)])
                  JdbcProject(title=[$1], author=[$2])
                    JdbcHiveTableScan(table=[[default, book]], table:alias=[book])
              JdbcProject(id=[$0], fname=[$1])
                JdbcFilter(condition=[IS NOT NULL($0)])
                  JdbcProject(id=[$0], fname=[$1])
                    JdbcHiveTableScan(table=[[default, author]], table:alias=[author])

PREHOOK: query: explain 
select ucase(author.fname), count(book.title) as books
from book join author
where book.author = author.id
group by author.fname
order by ucase(author.fname)
limit 5
PREHOOK: type: QUERY
PREHOOK: Input: default@author
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: explain 
select ucase(author.fname), count(book.title) as books
from book join author
where book.author = author.id
group by author.fname
order by ucase(author.fname)
limit 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@author
POSTHOOK: Input: default@book
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: book
                  properties:
                    hive.sql.query SELECT "t4"."fname", COUNT("t1"."title") AS "$f1"
FROM (SELECT "title", "author"
FROM (SELECT "title", "author"
FROM "book") AS "t"
WHERE "author" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "id", "fname"
FROM (SELECT "id", "fname"
FROM "author") AS "t2"
WHERE "id" IS NOT NULL) AS "t4" ON "t1"."author" = "t4"."id"
GROUP BY "t4"."fname"
                    hive.sql.query.fieldNames fname,$f1
                    hive.sql.query.fieldTypes string,bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                  Top N Key Operator
                    sort order: +
                    keys: upper(fname) (type: string)
                    null sort order: z
                    Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                    top n: 5
                    Select Operator
                      expressions: $f1 (type: bigint), upper(fname) (type: string)
                      outputColumnNames: _col1, _col2
                      Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col2 (type: string)
                        null sort order: z
                        sort order: +
                        Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col1 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: bigint)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 5
                  Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select ucase(author.fname), count(book.title) as books
from book join author
where book.author = author.id
group by author.fname
order by ucase(author.fname)
limit 5
PREHOOK: type: QUERY
PREHOOK: Input: default@author
PREHOOK: Input: default@book
#### A masked pattern was here ####
POSTHOOK: query: select ucase(author.fname), count(book.title) as books
from book join author
where book.author = author.id
group by author.fname
order by ucase(author.fname)
limit 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@author
POSTHOOK: Input: default@book
#### A masked pattern was here ####
ALEXANDRE	1
VICTOR	1
