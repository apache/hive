PREHOOK: query: create table testtable_n1000 (s_state string, ss_net_profit double)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@testtable_n1000
POSTHOOK: query: create table testtable_n1000 (s_state string, ss_net_profit double)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@testtable_n1000
PREHOOK: query: insert into testtable_n1000 values
  ('AA', 101),
  ('AB', 102),
  ('AC', 103),
  ('AD', 104),
  ('AE', 105),
  ('AF', 106),
  ('AG', 107),
  ('AH', 108),
  ('AI', 109),
  ('AJ', 110)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@testtable_n1000
POSTHOOK: query: insert into testtable_n1000 values
  ('AA', 101),
  ('AB', 102),
  ('AC', 103),
  ('AD', 104),
  ('AE', 105),
  ('AF', 106),
  ('AG', 107),
  ('AH', 108),
  ('AI', 109),
  ('AJ', 110)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@testtable_n1000
POSTHOOK: Lineage: testtable_n1000.s_state SCRIPT []
POSTHOOK: Lineage: testtable_n1000.ss_net_profit SCRIPT []
PREHOOK: query: explain
select s_state, ranking
from (
  select s_state as s_state,
    sum(ss_net_profit),
    rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
  from testtable_n1000
  group by s_state) tmp1
where ranking <= 5
PREHOOK: type: QUERY
PREHOOK: Input: default@testtable_n1000
#### A masked pattern was here ####
POSTHOOK: query: explain
select s_state, ranking
from (
  select s_state as s_state,
    sum(ss_net_profit),
    rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
  from testtable_n1000
  group by s_state) tmp1
where ranking <= 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@testtable_n1000
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: testtable_n1000
                  Statistics: Num rows: 10 Data size: 940 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: s_state (type: string), ss_net_profit (type: double)
                    outputColumnNames: s_state, ss_net_profit
                    Statistics: Num rows: 10 Data size: 940 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: sum(ss_net_profit)
                      keys: s_state (type: string)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 10 Data size: 940 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 10 Data size: 940 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 10 Data size: 940 Basic stats: COMPLETE Column stats: COMPLETE
                Top N Key Operator
                  sort order: +-
                  keys: _col0 (type: string), _col1 (type: double)
                  null sort order: aa
                  Map-reduce partition columns: _col0 (type: string)
                  Statistics: Num rows: 10 Data size: 940 Basic stats: COMPLETE Column stats: COMPLETE
                  top n: 6
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: double)
                    null sort order: aa
                    sort order: +-
                    Map-reduce partition columns: _col0 (type: string)
                    Statistics: Num rows: 10 Data size: 940 Basic stats: COMPLETE Column stats: COMPLETE
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: double)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 10 Data size: 940 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: double
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 DESC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: rank_window_0
                              arguments: _col1
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 10 Data size: 940 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (rank_window_0 <= 5) (type: boolean)
                    Statistics: Num rows: 3 Data size: 282 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: _col0 (type: string), rank_window_0 (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 3 Data size: 270 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 3 Data size: 270 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select s_state, ranking
from (
  select s_state as s_state,
    sum(ss_net_profit),
    rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
  from testtable_n1000
  group by s_state) tmp1
where ranking <= 5
PREHOOK: type: QUERY
PREHOOK: Input: default@testtable_n1000
#### A masked pattern was here ####
POSTHOOK: query: select s_state, ranking
from (
  select s_state as s_state,
    sum(ss_net_profit),
    rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
  from testtable_n1000
  group by s_state) tmp1
where ranking <= 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@testtable_n1000
#### A masked pattern was here ####
AA	1
AB	1
AC	1
AD	1
AE	1
AF	1
AG	1
AH	1
AI	1
AJ	1
PREHOOK: query: drop table testtable_n1000
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@testtable_n1000
PREHOOK: Output: default@testtable_n1000
POSTHOOK: query: drop table testtable_n1000
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@testtable_n1000
POSTHOOK: Output: default@testtable_n1000
