PREHOOK: query: CREATE TABLE T1_n6(key STRING, val STRING)
CLUSTERED BY (val) SORTED BY (key, val) INTO 2 BUCKETS STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@T1_n6
POSTHOOK: query: CREATE TABLE T1_n6(key STRING, val STRING)
CLUSTERED BY (val) SORTED BY (key, val) INTO 2 BUCKETS STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@T1_n6
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/bucket_files/000000_0' INTO TABLE T1_n6
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@t1_n6
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/bucket_files/000000_0' INTO TABLE T1_n6
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@t1_n6
PREHOOK: query: INSERT OVERWRITE TABLE T1_n6 select key, val from T1_n6
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n6
PREHOOK: Output: default@t1_n6
POSTHOOK: query: INSERT OVERWRITE TABLE T1_n6 select key, val from T1_n6
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n6
POSTHOOK: Output: default@t1_n6
POSTHOOK: Lineage: t1_n6.key SIMPLE [(t1_n6)t1_n6.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: t1_n6.val SIMPLE [(t1_n6)t1_n6.FieldSchema(name:val, type:string, comment:null), ]
PREHOOK: query: CREATE TABLE outputTbl1_n5(key STRING, val STRING, cnt INT)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@outputTbl1_n5
POSTHOOK: query: CREATE TABLE outputTbl1_n5(key STRING, val STRING, cnt INT)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@outputTbl1_n5
PREHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE outputTbl1_n5
SELECT key, val, count(1) FROM T1_n6 GROUP BY key, val
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n6
PREHOOK: Output: default@outputtbl1_n5
POSTHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE outputTbl1_n5
SELECT key, val, count(1) FROM T1_n6 GROUP BY key, val
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n6
POSTHOOK: Output: default@outputtbl1_n5
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1_n6
                  Statistics: Num rows: 6 Data size: 2208 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), val (type: string)
                    outputColumnNames: key, val
                    Statistics: Num rows: 6 Data size: 2208 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), val (type: string)
                      mode: final
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                      Select Operator
                        expressions: _col0 (type: string), _col1 (type: string), UDFToInteger(_col2) (type: int)
                        outputColumnNames: _col0, _col1, _col2
                        Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                        File Output Operator
                          compressed: false
                          Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                          table:
                              input format: org.apache.hadoop.mapred.TextInputFormat
                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                              name: default.outputtbl1_n5
                        Select Operator
                          expressions: _col0 (type: string), _col1 (type: string), _col2 (type: int)
                          outputColumnNames: key, val, cnt
                          Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                          Group By Operator
                            aggregations: max(length(key)), avg(COALESCE(length(key),0)), count(1), count(key), compute_bit_vector_hll(key), max(length(val)), avg(COALESCE(length(val),0)), count(val), compute_bit_vector_hll(val), min(cnt), max(cnt), count(cnt), compute_bit_vector_hll(cnt)
                            minReductionHashAggr: 0.99
                            mode: hash
                            outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                            Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                            Reduce Output Operator
                              null sort order: 
                              sort order: 
                              Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                              value expressions: _col0 (type: int), _col1 (type: struct<count:bigint,sum:double,input:int>), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: binary), _col5 (type: int), _col6 (type: struct<count:bigint,sum:double,input:int>), _col7 (type: bigint), _col8 (type: binary), _col9 (type: int), _col10 (type: int), _col11 (type: bigint), _col12 (type: binary)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0), avg(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector_hll(VALUE._col4), max(VALUE._col5), avg(VALUE._col6), count(VALUE._col7), compute_bit_vector_hll(VALUE._col8), min(VALUE._col9), max(VALUE._col10), count(VALUE._col11), compute_bit_vector_hll(VALUE._col12)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: 'STRING' (type: string), UDFToLong(COALESCE(_col0,0)) (type: bigint), COALESCE(_col1,0) (type: double), (_col2 - _col3) (type: bigint), COALESCE(ndv_compute_bit_vector(_col4),0) (type: bigint), _col4 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col5,0)) (type: bigint), COALESCE(_col6,0) (type: double), (_col2 - _col7) (type: bigint), COALESCE(ndv_compute_bit_vector(_col8),0) (type: bigint), _col8 (type: binary), 'LONG' (type: string), UDFToLong(_col9) (type: bigint), UDFToLong(_col10) (type: bigint), (_col2 - _col11) (type: bigint), COALESCE(ndv_compute_bit_vector(_col12),0) (type: bigint), _col12 (type: binary)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17
                  Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.outputtbl1_n5

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key, val, cnt
          Column Types: string, string, int
          Table: default.outputtbl1_n5

PREHOOK: query: INSERT OVERWRITE TABLE outputTbl1_n5
SELECT key, val, count(1) FROM T1_n6 GROUP BY key, val
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n6
PREHOOK: Output: default@outputtbl1_n5
POSTHOOK: query: INSERT OVERWRITE TABLE outputTbl1_n5
SELECT key, val, count(1) FROM T1_n6 GROUP BY key, val
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n6
POSTHOOK: Output: default@outputtbl1_n5
POSTHOOK: Lineage: outputtbl1_n5.cnt EXPRESSION [(t1_n6)t1_n6.null, ]
POSTHOOK: Lineage: outputtbl1_n5.key SIMPLE [(t1_n6)t1_n6.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: outputtbl1_n5.val SIMPLE [(t1_n6)t1_n6.FieldSchema(name:val, type:string, comment:null), ]
PREHOOK: query: SELECT * FROM outputTbl1_n5
PREHOOK: type: QUERY
PREHOOK: Input: default@outputtbl1_n5
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM outputTbl1_n5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@outputtbl1_n5
#### A masked pattern was here ####
1	11	1
2	12	1
3	13	1
7	17	1
8	18	1
8	28	1
PREHOOK: query: DROP TABLE T1_n6
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t1_n6
PREHOOK: Output: default@t1_n6
POSTHOOK: query: DROP TABLE T1_n6
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t1_n6
POSTHOOK: Output: default@t1_n6
PREHOOK: query: CREATE TABLE T1_n6(key STRING, val STRING)
CLUSTERED BY (val, key) SORTED BY (key, val) INTO 2 BUCKETS STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@T1_n6
POSTHOOK: query: CREATE TABLE T1_n6(key STRING, val STRING)
CLUSTERED BY (val, key) SORTED BY (key, val) INTO 2 BUCKETS STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@T1_n6
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/bucket_files/000000_0' INTO TABLE T1_n6
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@t1_n6
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/bucket_files/000000_0' INTO TABLE T1_n6
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@t1_n6
PREHOOK: query: INSERT OVERWRITE TABLE T1_n6 select key, val from T1_n6
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n6
PREHOOK: Output: default@t1_n6
POSTHOOK: query: INSERT OVERWRITE TABLE T1_n6 select key, val from T1_n6
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n6
POSTHOOK: Output: default@t1_n6
POSTHOOK: Lineage: t1_n6.key SIMPLE [(t1_n6)t1_n6.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: t1_n6.val SIMPLE [(t1_n6)t1_n6.FieldSchema(name:val, type:string, comment:null), ]
PREHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE outputTbl1_n5
SELECT key, val, count(1) FROM T1_n6 GROUP BY key, val
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n6
PREHOOK: Output: default@outputtbl1_n5
POSTHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE outputTbl1_n5
SELECT key, val, count(1) FROM T1_n6 GROUP BY key, val
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n6
POSTHOOK: Output: default@outputtbl1_n5
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1_n6
                  Statistics: Num rows: 6 Data size: 2208 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), val (type: string)
                    outputColumnNames: key, val
                    Statistics: Num rows: 6 Data size: 2208 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), val (type: string)
                      mode: final
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                      Select Operator
                        expressions: _col0 (type: string), _col1 (type: string), UDFToInteger(_col2) (type: int)
                        outputColumnNames: _col0, _col1, _col2
                        Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                        File Output Operator
                          compressed: false
                          Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                          table:
                              input format: org.apache.hadoop.mapred.TextInputFormat
                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                              name: default.outputtbl1_n5
                        Select Operator
                          expressions: _col0 (type: string), _col1 (type: string), _col2 (type: int)
                          outputColumnNames: key, val, cnt
                          Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                          Group By Operator
                            aggregations: max(length(key)), avg(COALESCE(length(key),0)), count(1), count(key), compute_bit_vector_hll(key), max(length(val)), avg(COALESCE(length(val),0)), count(val), compute_bit_vector_hll(val), min(cnt), max(cnt), count(cnt), compute_bit_vector_hll(cnt)
                            minReductionHashAggr: 0.99
                            mode: hash
                            outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                            Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                            Reduce Output Operator
                              null sort order: 
                              sort order: 
                              Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                              value expressions: _col0 (type: int), _col1 (type: struct<count:bigint,sum:double,input:int>), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: binary), _col5 (type: int), _col6 (type: struct<count:bigint,sum:double,input:int>), _col7 (type: bigint), _col8 (type: binary), _col9 (type: int), _col10 (type: int), _col11 (type: bigint), _col12 (type: binary)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0), avg(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector_hll(VALUE._col4), max(VALUE._col5), avg(VALUE._col6), count(VALUE._col7), compute_bit_vector_hll(VALUE._col8), min(VALUE._col9), max(VALUE._col10), count(VALUE._col11), compute_bit_vector_hll(VALUE._col12)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: 'STRING' (type: string), UDFToLong(COALESCE(_col0,0)) (type: bigint), COALESCE(_col1,0) (type: double), (_col2 - _col3) (type: bigint), COALESCE(ndv_compute_bit_vector(_col4),0) (type: bigint), _col4 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col5,0)) (type: bigint), COALESCE(_col6,0) (type: double), (_col2 - _col7) (type: bigint), COALESCE(ndv_compute_bit_vector(_col8),0) (type: bigint), _col8 (type: binary), 'LONG' (type: string), UDFToLong(_col9) (type: bigint), UDFToLong(_col10) (type: bigint), (_col2 - _col11) (type: bigint), COALESCE(ndv_compute_bit_vector(_col12),0) (type: bigint), _col12 (type: binary)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17
                  Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.outputtbl1_n5

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key, val, cnt
          Column Types: string, string, int
          Table: default.outputtbl1_n5

PREHOOK: query: INSERT OVERWRITE TABLE outputTbl1_n5
SELECT key, val, count(1) FROM T1_n6 GROUP BY key, val
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n6
PREHOOK: Output: default@outputtbl1_n5
POSTHOOK: query: INSERT OVERWRITE TABLE outputTbl1_n5
SELECT key, val, count(1) FROM T1_n6 GROUP BY key, val
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n6
POSTHOOK: Output: default@outputtbl1_n5
POSTHOOK: Lineage: outputtbl1_n5.cnt EXPRESSION [(t1_n6)t1_n6.null, ]
POSTHOOK: Lineage: outputtbl1_n5.key SIMPLE [(t1_n6)t1_n6.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: outputtbl1_n5.val SIMPLE [(t1_n6)t1_n6.FieldSchema(name:val, type:string, comment:null), ]
PREHOOK: query: SELECT * FROM outputTbl1_n5
PREHOOK: type: QUERY
PREHOOK: Input: default@outputtbl1_n5
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM outputTbl1_n5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@outputtbl1_n5
#### A masked pattern was here ####
1	11	1
2	12	1
3	13	1
7	17	1
8	18	1
8	28	1
PREHOOK: query: DROP TABLE T1_n6
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t1_n6
PREHOOK: Output: default@t1_n6
POSTHOOK: query: DROP TABLE T1_n6
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t1_n6
POSTHOOK: Output: default@t1_n6
PREHOOK: query: CREATE TABLE T1_n6(key STRING, val STRING)
CLUSTERED BY (val) SORTED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@T1_n6
POSTHOOK: query: CREATE TABLE T1_n6(key STRING, val STRING)
CLUSTERED BY (val) SORTED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@T1_n6
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/bucket_files/000000_0' INTO TABLE T1_n6
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@t1_n6
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/bucket_files/000000_0' INTO TABLE T1_n6
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@t1_n6
PREHOOK: query: INSERT OVERWRITE TABLE T1_n6 select key, val from T1_n6
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n6
PREHOOK: Output: default@t1_n6
POSTHOOK: query: INSERT OVERWRITE TABLE T1_n6 select key, val from T1_n6
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n6
POSTHOOK: Output: default@t1_n6
POSTHOOK: Lineage: t1_n6.key SIMPLE [(t1_n6)t1_n6.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: t1_n6.val SIMPLE [(t1_n6)t1_n6.FieldSchema(name:val, type:string, comment:null), ]
PREHOOK: query: CREATE TABLE outputTbl2_n1(key STRING, cnt INT)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@outputTbl2_n1
POSTHOOK: query: CREATE TABLE outputTbl2_n1(key STRING, cnt INT)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@outputTbl2_n1
PREHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE outputTbl2_n1
SELECT key, count(1) FROM T1_n6 GROUP BY key
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n6
PREHOOK: Output: default@outputtbl2_n1
POSTHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE outputTbl2_n1
SELECT key, count(1) FROM T1_n6 GROUP BY key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n6
POSTHOOK: Output: default@outputtbl2_n1
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1_n6
                  Statistics: Num rows: 6 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string)
                    outputColumnNames: key
                    Statistics: Num rows: 6 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count()
                      bucketGroup: true
                      keys: key (type: string)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 6 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 6 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col1 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 3 Data size: 552 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: string), UDFToInteger(_col1) (type: int)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 3 Data size: 552 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 3 Data size: 552 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        name: default.outputtbl2_n1
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: int)
                    outputColumnNames: key, cnt
                    Statistics: Num rows: 3 Data size: 552 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: max(length(key)), avg(COALESCE(length(key),0)), count(1), count(key), compute_bit_vector_hll(key), min(cnt), max(cnt), count(cnt), compute_bit_vector_hll(cnt)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                      Statistics: Num rows: 1 Data size: 584 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 584 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: int), _col1 (type: struct<count:bigint,sum:double,input:int>), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: binary), _col5 (type: int), _col6 (type: int), _col7 (type: bigint), _col8 (type: binary)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0), avg(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector_hll(VALUE._col4), min(VALUE._col5), max(VALUE._col6), count(VALUE._col7), compute_bit_vector_hll(VALUE._col8)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                Statistics: Num rows: 1 Data size: 584 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: 'STRING' (type: string), UDFToLong(COALESCE(_col0,0)) (type: bigint), COALESCE(_col1,0) (type: double), (_col2 - _col3) (type: bigint), COALESCE(ndv_compute_bit_vector(_col4),0) (type: bigint), _col4 (type: binary), 'LONG' (type: string), UDFToLong(_col5) (type: bigint), UDFToLong(_col6) (type: bigint), (_col2 - _col7) (type: bigint), COALESCE(ndv_compute_bit_vector(_col8),0) (type: bigint), _col8 (type: binary)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11
                  Statistics: Num rows: 1 Data size: 584 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 584 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.outputtbl2_n1

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key, cnt
          Column Types: string, int
          Table: default.outputtbl2_n1

PREHOOK: query: INSERT OVERWRITE TABLE outputTbl2_n1
SELECT key, count(1) FROM T1_n6 GROUP BY key
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n6
PREHOOK: Output: default@outputtbl2_n1
POSTHOOK: query: INSERT OVERWRITE TABLE outputTbl2_n1
SELECT key, count(1) FROM T1_n6 GROUP BY key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n6
POSTHOOK: Output: default@outputtbl2_n1
POSTHOOK: Lineage: outputtbl2_n1.cnt EXPRESSION [(t1_n6)t1_n6.null, ]
POSTHOOK: Lineage: outputtbl2_n1.key SIMPLE [(t1_n6)t1_n6.FieldSchema(name:key, type:string, comment:null), ]
PREHOOK: query: SELECT * FROM outputTbl2_n1
PREHOOK: type: QUERY
PREHOOK: Input: default@outputtbl2_n1
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM outputTbl2_n1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@outputtbl2_n1
#### A masked pattern was here ####
1	1
2	1
3	1
7	1
8	2
PREHOOK: query: DROP TABLE T1_n6
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t1_n6
PREHOOK: Output: default@t1_n6
POSTHOOK: query: DROP TABLE T1_n6
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t1_n6
POSTHOOK: Output: default@t1_n6
