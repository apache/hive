PREHOOK: query: CREATE TEMPORARY FUNCTION dboutput AS 'org.apache.hadoop.hive.contrib.genericudf.example.GenericUDFDBOutput'
PREHOOK: type: CREATEFUNCTION
PREHOOK: Output: dboutput
POSTHOOK: query: CREATE TEMPORARY FUNCTION dboutput AS 'org.apache.hadoop.hive.contrib.genericudf.example.GenericUDFDBOutput'
POSTHOOK: type: CREATEFUNCTION
POSTHOOK: Output: dboutput
PREHOOK: query: FROM src
#### A masked pattern was here ####
'CREATE TABLE JDBC_HANDLER_JOIN_TABLES (a BOOLEAN, b  INTEGER, c BIGINT, d FLOAT, e DOUBLE, f DATE, g VARCHAR(27),
                                  h VARCHAR(27), i CHAR(2), j TIMESTAMP, k DECIMAL(5,4), l SMALLINT, m SMALLINT, b1 CHAR(10))' )
limit 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: FROM src
#### A masked pattern was here ####
'CREATE TABLE JDBC_HANDLER_JOIN_TABLES (a BOOLEAN, b  INTEGER, c BIGINT, d FLOAT, e DOUBLE, f DATE, g VARCHAR(27),
                                  h VARCHAR(27), i CHAR(2), j TIMESTAMP, k DECIMAL(5,4), l SMALLINT, m SMALLINT, b1 CHAR(10))' )
limit 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0
PREHOOK: query: CREATE EXTERNAL TABLE external_jdbc_table_join
(
 a BOOLEAN,
 b INTEGER,
 c BIGINT,
 d FLOAT,
 e DOUBLE,
 f DATE,
 g VARCHAR(27),
 h STRING,
 i CHAR(2),
 j TIMESTAMP,
 k DECIMAL(5,4),
 l TINYINT,
 m SMALLINT,
 b1 BOOLEAN
 )
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.jdbc.EmbeddedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "APP",
                "hive.sql.dbcp.password" = "mine",
                "hive.sql.table" = "JDBC_HANDLER_JOIN_TABLES",
                "hive.sql.dbcp.maxActive" = "1"
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@external_jdbc_table_join
POSTHOOK: query: CREATE EXTERNAL TABLE external_jdbc_table_join
(
 a BOOLEAN,
 b INTEGER,
 c BIGINT,
 d FLOAT,
 e DOUBLE,
 f DATE,
 g VARCHAR(27),
 h STRING,
 i CHAR(2),
 j TIMESTAMP,
 k DECIMAL(5,4),
 l TINYINT,
 m SMALLINT,
 b1 BOOLEAN
 )
STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler'
TBLPROPERTIES (
                "hive.sql.database.type" = "DERBY",
                "hive.sql.jdbc.driver" = "org.apache.derby.jdbc.EmbeddedDriver",
#### A masked pattern was here ####
                "hive.sql.dbcp.username" = "APP",
                "hive.sql.dbcp.password" = "mine",
                "hive.sql.table" = "JDBC_HANDLER_JOIN_TABLES",
                "hive.sql.dbcp.maxActive" = "1"
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@external_jdbc_table_join
PREHOOK: query: CREATE TABLE hive_table
(
 a BOOLEAN,
 b INTEGER,
 c BIGINT,
 d FLOAT,
 e DOUBLE,
 f DATE,
 g VARCHAR(27),
 h STRING,
 i CHAR(2),
 j TIMESTAMP,
 k DECIMAL(5,4),
 l TINYINT,
 m SMALLINT,
 b1 BOOLEAN
 )
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@hive_table
POSTHOOK: query: CREATE TABLE hive_table
(
 a BOOLEAN,
 b INTEGER,
 c BIGINT,
 d FLOAT,
 e DOUBLE,
 f DATE,
 g VARCHAR(27),
 h STRING,
 i CHAR(2),
 j TIMESTAMP,
 k DECIMAL(5,4),
 l TINYINT,
 m SMALLINT,
 b1 BOOLEAN
 )
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@hive_table
PREHOOK: query: INSERT INTO hive_table VALUES(true, 342, 8900, 9.63, 1099.9999, '2019-04-11', 'abcd', 'efgh', 'k', '2019-05-01 00:00:00', 1.8899, 1, 2, true)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@hive_table
POSTHOOK: query: INSERT INTO hive_table VALUES(true, 342, 8900, 9.63, 1099.9999, '2019-04-11', 'abcd', 'efgh', 'k', '2019-05-01 00:00:00', 1.8899, 1, 2, true)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@hive_table
POSTHOOK: Lineage: hive_table.a SCRIPT []
POSTHOOK: Lineage: hive_table.b SCRIPT []
POSTHOOK: Lineage: hive_table.b1 SCRIPT []
POSTHOOK: Lineage: hive_table.c SCRIPT []
POSTHOOK: Lineage: hive_table.d SCRIPT []
POSTHOOK: Lineage: hive_table.e SCRIPT []
POSTHOOK: Lineage: hive_table.f SCRIPT []
POSTHOOK: Lineage: hive_table.g SCRIPT []
POSTHOOK: Lineage: hive_table.h SCRIPT []
POSTHOOK: Lineage: hive_table.i SCRIPT []
POSTHOOK: Lineage: hive_table.j SCRIPT []
POSTHOOK: Lineage: hive_table.k SCRIPT []
POSTHOOK: Lineage: hive_table.l SCRIPT []
POSTHOOK: Lineage: hive_table.m SCRIPT []
PREHOOK: query: INSERT INTO hive_table VALUES(true, 343, 8900, 9.63, 1099.9999, '2019-04-11', 'abcd', 'efgh', 'k', '2019-05-01 00:00:00', 1.8899, 1, 2, true)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@hive_table
POSTHOOK: query: INSERT INTO hive_table VALUES(true, 343, 8900, 9.63, 1099.9999, '2019-04-11', 'abcd', 'efgh', 'k', '2019-05-01 00:00:00', 1.8899, 1, 2, true)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@hive_table
POSTHOOK: Lineage: hive_table.a SCRIPT []
POSTHOOK: Lineage: hive_table.b SCRIPT []
POSTHOOK: Lineage: hive_table.b1 SCRIPT []
POSTHOOK: Lineage: hive_table.c SCRIPT []
POSTHOOK: Lineage: hive_table.d SCRIPT []
POSTHOOK: Lineage: hive_table.e SCRIPT []
POSTHOOK: Lineage: hive_table.f SCRIPT []
POSTHOOK: Lineage: hive_table.g SCRIPT []
POSTHOOK: Lineage: hive_table.h SCRIPT []
POSTHOOK: Lineage: hive_table.i SCRIPT []
POSTHOOK: Lineage: hive_table.j SCRIPT []
POSTHOOK: Lineage: hive_table.k SCRIPT []
POSTHOOK: Lineage: hive_table.l SCRIPT []
POSTHOOK: Lineage: hive_table.m SCRIPT []
PREHOOK: query: INSERT INTO hive_table VALUES(true, 344, 8900, 9.63, 1099.9999, '2019-04-11', 'abcd', 'efgh', 'k', '2019-05-01 00:00:00', 1.8899, 1, 2, true)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@hive_table
POSTHOOK: query: INSERT INTO hive_table VALUES(true, 344, 8900, 9.63, 1099.9999, '2019-04-11', 'abcd', 'efgh', 'k', '2019-05-01 00:00:00', 1.8899, 1, 2, true)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@hive_table
POSTHOOK: Lineage: hive_table.a SCRIPT []
POSTHOOK: Lineage: hive_table.b SCRIPT []
POSTHOOK: Lineage: hive_table.b1 SCRIPT []
POSTHOOK: Lineage: hive_table.c SCRIPT []
POSTHOOK: Lineage: hive_table.d SCRIPT []
POSTHOOK: Lineage: hive_table.e SCRIPT []
POSTHOOK: Lineage: hive_table.f SCRIPT []
POSTHOOK: Lineage: hive_table.g SCRIPT []
POSTHOOK: Lineage: hive_table.h SCRIPT []
POSTHOOK: Lineage: hive_table.i SCRIPT []
POSTHOOK: Lineage: hive_table.j SCRIPT []
POSTHOOK: Lineage: hive_table.k SCRIPT []
POSTHOOK: Lineage: hive_table.l SCRIPT []
POSTHOOK: Lineage: hive_table.m SCRIPT []
PREHOOK: query: INSERT INTO hive_table VALUES(true, 345, 8900, 9.63, 1099.9999, '2019-04-11', 'abcd', 'efgh', 'k', '2019-05-01 00:00:00', 1.8899, 1, 2, true)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@hive_table
POSTHOOK: query: INSERT INTO hive_table VALUES(true, 345, 8900, 9.63, 1099.9999, '2019-04-11', 'abcd', 'efgh', 'k', '2019-05-01 00:00:00', 1.8899, 1, 2, true)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@hive_table
POSTHOOK: Lineage: hive_table.a SCRIPT []
POSTHOOK: Lineage: hive_table.b SCRIPT []
POSTHOOK: Lineage: hive_table.b1 SCRIPT []
POSTHOOK: Lineage: hive_table.c SCRIPT []
POSTHOOK: Lineage: hive_table.d SCRIPT []
POSTHOOK: Lineage: hive_table.e SCRIPT []
POSTHOOK: Lineage: hive_table.f SCRIPT []
POSTHOOK: Lineage: hive_table.g SCRIPT []
POSTHOOK: Lineage: hive_table.h SCRIPT []
POSTHOOK: Lineage: hive_table.i SCRIPT []
POSTHOOK: Lineage: hive_table.j SCRIPT []
POSTHOOK: Lineage: hive_table.k SCRIPT []
POSTHOOK: Lineage: hive_table.l SCRIPT []
POSTHOOK: Lineage: hive_table.m SCRIPT []
PREHOOK: query: INSERT INTO hive_table VALUES(true, 346, 8900, 9.63, 1099.9999, '2019-04-11', 'abcd', 'efgh', 'k', '2019-05-01 00:00:00', 1.8899, 1, 2, true)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@hive_table
POSTHOOK: query: INSERT INTO hive_table VALUES(true, 346, 8900, 9.63, 1099.9999, '2019-04-11', 'abcd', 'efgh', 'k', '2019-05-01 00:00:00', 1.8899, 1, 2, true)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@hive_table
POSTHOOK: Lineage: hive_table.a SCRIPT []
POSTHOOK: Lineage: hive_table.b SCRIPT []
POSTHOOK: Lineage: hive_table.b1 SCRIPT []
POSTHOOK: Lineage: hive_table.c SCRIPT []
POSTHOOK: Lineage: hive_table.d SCRIPT []
POSTHOOK: Lineage: hive_table.e SCRIPT []
POSTHOOK: Lineage: hive_table.f SCRIPT []
POSTHOOK: Lineage: hive_table.g SCRIPT []
POSTHOOK: Lineage: hive_table.h SCRIPT []
POSTHOOK: Lineage: hive_table.i SCRIPT []
POSTHOOK: Lineage: hive_table.j SCRIPT []
POSTHOOK: Lineage: hive_table.k SCRIPT []
POSTHOOK: Lineage: hive_table.l SCRIPT []
POSTHOOK: Lineage: hive_table.m SCRIPT []
PREHOOK: query: INSERT INTO external_jdbc_table_join select * from hive_table
PREHOOK: type: QUERY
PREHOOK: Input: default@hive_table
PREHOOK: Output: default@external_jdbc_table_join
POSTHOOK: query: INSERT INTO external_jdbc_table_join select * from hive_table
POSTHOOK: type: QUERY
POSTHOOK: Input: default@hive_table
POSTHOOK: Output: default@external_jdbc_table_join
PREHOOK: query: INSERT INTO external_jdbc_table_join select * from hive_table
PREHOOK: type: QUERY
PREHOOK: Input: default@hive_table
PREHOOK: Output: default@external_jdbc_table_join
POSTHOOK: query: INSERT INTO external_jdbc_table_join select * from hive_table
POSTHOOK: type: QUERY
POSTHOOK: Input: default@hive_table
POSTHOOK: Output: default@external_jdbc_table_join
PREHOOK: query: INSERT INTO external_jdbc_table_join select * from hive_table
PREHOOK: type: QUERY
PREHOOK: Input: default@hive_table
PREHOOK: Output: default@external_jdbc_table_join
POSTHOOK: query: INSERT INTO external_jdbc_table_join select * from hive_table
POSTHOOK: type: QUERY
POSTHOOK: Input: default@hive_table
POSTHOOK: Output: default@external_jdbc_table_join
PREHOOK: query: INSERT INTO external_jdbc_table_join select * from hive_table
PREHOOK: type: QUERY
PREHOOK: Input: default@hive_table
PREHOOK: Output: default@external_jdbc_table_join
POSTHOOK: query: INSERT INTO external_jdbc_table_join select * from hive_table
POSTHOOK: type: QUERY
POSTHOOK: Input: default@hive_table
POSTHOOK: Output: default@external_jdbc_table_join
PREHOOK: query: INSERT INTO external_jdbc_table_join select * from hive_table
PREHOOK: type: QUERY
PREHOOK: Input: default@hive_table
PREHOOK: Output: default@external_jdbc_table_join
POSTHOOK: query: INSERT INTO external_jdbc_table_join select * from hive_table
POSTHOOK: type: QUERY
POSTHOOK: Input: default@hive_table
POSTHOOK: Output: default@external_jdbc_table_join
PREHOOK: query: INSERT INTO external_jdbc_table_join select * from hive_table
PREHOOK: type: QUERY
PREHOOK: Input: default@hive_table
PREHOOK: Output: default@external_jdbc_table_join
POSTHOOK: query: INSERT INTO external_jdbc_table_join select * from hive_table
POSTHOOK: type: QUERY
POSTHOOK: Input: default@hive_table
POSTHOOK: Output: default@external_jdbc_table_join
PREHOOK: query: INSERT INTO external_jdbc_table_join select * from hive_table
PREHOOK: type: QUERY
PREHOOK: Input: default@hive_table
PREHOOK: Output: default@external_jdbc_table_join
POSTHOOK: query: INSERT INTO external_jdbc_table_join select * from hive_table
POSTHOOK: type: QUERY
POSTHOOK: Input: default@hive_table
POSTHOOK: Output: default@external_jdbc_table_join
PREHOOK: query: select count(*) from hive_table
PREHOOK: type: QUERY
PREHOOK: Input: default@hive_table
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from hive_table
POSTHOOK: type: QUERY
POSTHOOK: Input: default@hive_table
#### A masked pattern was here ####
5
PREHOOK: query: select count(*) from external_jdbc_table_join
PREHOOK: type: QUERY
PREHOOK: Input: default@external_jdbc_table_join
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from external_jdbc_table_join
POSTHOOK: type: QUERY
POSTHOOK: Input: default@external_jdbc_table_join
#### A masked pattern was here ####
35
Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 2' is a cross product
PREHOOK: query: EXPLAIN SELECT d.* FROM external_jdbc_table_join d JOIN hive_table i ON d.b=342
PREHOOK: type: QUERY
PREHOOK: Input: default@external_jdbc_table_join
PREHOOK: Input: default@hive_table
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN SELECT d.* FROM external_jdbc_table_join d JOIN hive_table i ON d.b=342
POSTHOOK: type: QUERY
POSTHOOK: Input: default@external_jdbc_table_join
POSTHOOK: Input: default@hive_table
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 2 <- Map 1 (BROADCAST_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: d
                  properties:
                    hive.sql.query SELECT "A", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "B1"
FROM "JDBC_HANDLER_JOIN_TABLES"
WHERE "B" = 342
                    hive.sql.query.fieldNames A,C,D,E,F,G,H,I,J,K,L,M,B1
                    hive.sql.query.fieldTypes boolean,bigint,float,double,date,varchar(27),string,char(2),timestamp,decimal(5,4),tinyint,smallint,boolean
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 625 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: a (type: boolean), c (type: bigint), d (type: float), e (type: double), f (type: date), g (type: varchar(27)), h (type: string), i (type: char(2)), j (type: timestamp), k (type: decimal(5,4)), l (type: tinyint), m (type: smallint), b1 (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                    Statistics: Num rows: 1 Data size: 625 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 625 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: boolean), _col1 (type: bigint), _col2 (type: float), _col3 (type: double), _col4 (type: date), _col5 (type: varchar(27)), _col6 (type: string), _col7 (type: char(2)), _col8 (type: timestamp), _col9 (type: decimal(5,4)), _col10 (type: tinyint), _col11 (type: smallint), _col12 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: i
                  Statistics: Num rows: 5 Data size: 440 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    Statistics: Num rows: 5 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Inner Join 0 to 1
                      keys:
                        0 
                        1 
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                      input vertices:
                        0 Map 1
                      Statistics: Num rows: 5 Data size: 3170 Basic stats: COMPLETE Column stats: NONE
                      Select Operator
                        expressions: _col0 (type: boolean), 342 (type: int), _col1 (type: bigint), _col2 (type: float), _col3 (type: double), _col4 (type: date), _col5 (type: varchar(27)), _col6 (type: string), _col7 (type: char(2)), _col8 (type: timestamp), _col9 (type: decimal(5,4)), _col10 (type: tinyint), _col11 (type: smallint), _col12 (type: boolean)
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                        Statistics: Num rows: 5 Data size: 3170 Basic stats: COMPLETE Column stats: NONE
                        File Output Operator
                          compressed: false
                          Statistics: Num rows: 5 Data size: 3170 Basic stats: COMPLETE Column stats: NONE
                          table:
                              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: all inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN SELECT d.* FROM external_jdbc_table_join d JOIN hive_table i ON d.b=342
PREHOOK: type: QUERY
PREHOOK: Input: default@external_jdbc_table_join
PREHOOK: Input: default@hive_table
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN SELECT d.* FROM external_jdbc_table_join d JOIN hive_table i ON d.b=342
POSTHOOK: type: QUERY
POSTHOOK: Input: default@external_jdbc_table_join
POSTHOOK: Input: default@hive_table
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: d
                  properties:
                    hive.sql.query SELECT "A", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "B1"
FROM "JDBC_HANDLER_JOIN_TABLES"
WHERE "B" = 342
                    hive.sql.query.fieldNames A,C,D,E,F,G,H,I,J,K,L,M,B1
                    hive.sql.query.fieldTypes boolean,bigint,float,double,date,varchar(27),string,char(2),timestamp,decimal(5,4),tinyint,smallint,boolean
                    hive.sql.query.split true
                  Select Operator
                    expressions: a (type: boolean), c (type: bigint), d (type: float), e (type: double), f (type: date), g (type: varchar(27)), h (type: string), i (type: char(2)), j (type: timestamp), k (type: decimal(5,4)), l (type: tinyint), m (type: smallint), b1 (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      value expressions: _col0 (type: boolean), _col1 (type: bigint), _col2 (type: float), _col3 (type: double), _col4 (type: date), _col5 (type: varchar(27)), _col6 (type: string), _col7 (type: char(2)), _col8 (type: timestamp), _col9 (type: decimal(5,4)), _col10 (type: tinyint), _col11 (type: smallint), _col12 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: i
                  Statistics: Num rows: 5 Data size: 440 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    Statistics: Num rows: 5 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 5 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                Select Operator
                  expressions: _col0 (type: boolean), 342 (type: int), _col1 (type: bigint), _col2 (type: float), _col3 (type: double), _col4 (type: date), _col5 (type: varchar(27)), _col6 (type: string), _col7 (type: char(2)), _col8 (type: timestamp), _col9 (type: decimal(5,4)), _col10 (type: tinyint), _col11 (type: smallint), _col12 (type: boolean)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                  File Output Operator
                    compressed: false
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT d.* FROM external_jdbc_table_join d JOIN hive_table i ON d.b=342
PREHOOK: type: QUERY
PREHOOK: Input: default@external_jdbc_table_join
PREHOOK: Input: default@hive_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT d.* FROM external_jdbc_table_join d JOIN hive_table i ON d.b=342
POSTHOOK: type: QUERY
POSTHOOK: Input: default@external_jdbc_table_join
POSTHOOK: Input: default@hive_table
#### A masked pattern was here ####
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
true	342	8900	9.63	1099.9999	2019-04-11	abcd	efgh	k 	2019-05-01 00:00:00	1.8899	1	2	true
