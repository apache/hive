PREHOOK: query: create temporary table tmp_tbl(
`rule_id` string,
`severity` string,
`alert_id` string,
`alert_type` string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tmp_tbl
POSTHOOK: query: create temporary table tmp_tbl(
`rule_id` string,
`severity` string,
`alert_id` string,
`alert_type` string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tmp_tbl
PREHOOK: query: insert into tmp_tbl values
('a', 'a', 'a', 'a'),
('a', 'b', 'a', 'b'),
('c', 'a', 'a', 'a'),
('c', 'b', 'a', 'b')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tmp_tbl
POSTHOOK: query: insert into tmp_tbl values
('a', 'a', 'a', 'a'),
('a', 'b', 'a', 'b'),
('c', 'a', 'a', 'a'),
('c', 'b', 'a', 'b')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tmp_tbl
POSTHOOK: Lineage: tmp_tbl.alert_id SCRIPT []
POSTHOOK: Lineage: tmp_tbl.alert_type SCRIPT []
POSTHOOK: Lineage: tmp_tbl.rule_id SCRIPT []
POSTHOOK: Lineage: tmp_tbl.severity SCRIPT []
PREHOOK: query: explain cbo
select `k`.`rule_id`,
count(distinct `k`.`alert_id`) over(partition by `k`.`rule_id`) `subj_cnt`
from tmp_tbl k
PREHOOK: type: QUERY
PREHOOK: Input: default@tmp_tbl
#### A masked pattern was here ####
POSTHOOK: query: explain cbo
select `k`.`rule_id`,
count(distinct `k`.`alert_id`) over(partition by `k`.`rule_id`) `subj_cnt`
from tmp_tbl k
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tmp_tbl
#### A masked pattern was here ####
CBO PLAN:
HiveProject(rule_id=[$0], _o__col9=[count(DISTINCT $2) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
  HiveTableScan(table=[[default, tmp_tbl]], table:alias=[k])

PREHOOK: query: explain
select `k`.`rule_id`,
count(distinct `k`.`alert_id`) over(partition by `k`.`rule_id`) `subj_cnt`
from tmp_tbl k
PREHOOK: type: QUERY
PREHOOK: Input: default@tmp_tbl
#### A masked pattern was here ####
POSTHOOK: query: explain
select `k`.`rule_id`,
count(distinct `k`.`alert_id`) over(partition by `k`.`rule_id`) `subj_cnt`
from tmp_tbl k
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tmp_tbl
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: k
                  Statistics: Num rows: 4 Data size: 1472 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: rule_id (type: string)
                    null sort order: a
                    sort order: +
                    Map-reduce partition columns: rule_id (type: string)
                    Statistics: Num rows: 4 Data size: 1472 Basic stats: COMPLETE Column stats: NONE
                    value expressions: alert_id (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col1 (type: string)
                outputColumnNames: _col0, _col2
                Statistics: Num rows: 4 Data size: 1472 Basic stats: COMPLETE Column stats: NONE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col2: string
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              arguments: _col2
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                  Statistics: Num rows: 4 Data size: 1472 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: _col0 (type: string), count_window_0 (type: bigint)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 4 Data size: 1472 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 4 Data size: 1472 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select `k`.`rule_id`,
count(distinct `k`.`alert_id`) over(partition by `k`.`rule_id`) `subj_cnt`
,count(`k`.`alert_id`) over(partition by `k`.`rule_id`)
from tmp_tbl k
PREHOOK: type: QUERY
PREHOOK: Input: default@tmp_tbl
#### A masked pattern was here ####
POSTHOOK: query: select `k`.`rule_id`,
count(distinct `k`.`alert_id`) over(partition by `k`.`rule_id`) `subj_cnt`
,count(`k`.`alert_id`) over(partition by `k`.`rule_id`)
from tmp_tbl k
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tmp_tbl
#### A masked pattern was here ####
c	1	2
c	1	2
a	1	2
a	1	2
