PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT AVG(cint),
       (AVG(cint) + -3728),
       (-((AVG(cint) + -3728))),
       (-((-((AVG(cint) + -3728))))),
       ((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)),
       SUM(cdouble),
       (-(AVG(cint))),
       STDDEV_POP(cint),
       (((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)) * (-((-((AVG(cint) + -3728)))))),
       STDDEV_SAMP(csmallint),
       (-(STDDEV_POP(cint))),
       (STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))),
       ((STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))) * STDDEV_POP(cint)),
       VAR_SAMP(cint),
       AVG(cfloat),
       (10.175 - VAR_SAMP(cint)),
       (-((10.175 - VAR_SAMP(cint)))),
       ((-(STDDEV_POP(cint))) / -563),
       STDDEV_SAMP(cint),
       (-(((-(STDDEV_POP(cint))) / -563))),
       (AVG(cint) / SUM(cdouble)),
       MIN(ctinyint),
       COUNT(csmallint),
       (MIN(ctinyint) / ((-(STDDEV_POP(cint))) / -563)),
       (-((AVG(cint) / SUM(cdouble))))
FROM   alltypesorc
WHERE  ((762 = cbigint)
        OR ((csmallint < cfloat)
            AND ((ctimestamp2 > -5)
                 AND (cdouble != cint)))
        OR (cstring1 = 'a')
           OR ((cbigint <= -1.389)
               AND ((cstring2 != 'a')
                    AND ((79.553 != cint)
                         AND (cboolean2 != cboolean1)))))
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT AVG(cint),
       (AVG(cint) + -3728),
       (-((AVG(cint) + -3728))),
       (-((-((AVG(cint) + -3728))))),
       ((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)),
       SUM(cdouble),
       (-(AVG(cint))),
       STDDEV_POP(cint),
       (((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)) * (-((-((AVG(cint) + -3728)))))),
       STDDEV_SAMP(csmallint),
       (-(STDDEV_POP(cint))),
       (STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))),
       ((STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))) * STDDEV_POP(cint)),
       VAR_SAMP(cint),
       AVG(cfloat),
       (10.175 - VAR_SAMP(cint)),
       (-((10.175 - VAR_SAMP(cint)))),
       ((-(STDDEV_POP(cint))) / -563),
       STDDEV_SAMP(cint),
       (-(((-(STDDEV_POP(cint))) / -563))),
       (AVG(cint) / SUM(cdouble)),
       MIN(ctinyint),
       COUNT(csmallint),
       (MIN(ctinyint) / ((-(STDDEV_POP(cint))) / -563)),
       (-((AVG(cint) / SUM(cdouble))))
FROM   alltypesorc
WHERE  ((762 = cbigint)
        OR ((csmallint < cfloat)
            AND ((ctimestamp2 > -5)
                 AND (cdouble != cint)))
        OR (cstring1 = 'a')
           OR ((cbigint <= -1.389)
               AND ((cstring2 != 'a')
                    AND ((79.553 != cint)
                         AND (cboolean2 != cboolean1)))))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  filterExpr: ((cbigint = 762L) or ((UDFToFloat(csmallint) < cfloat) and (UDFToDouble(ctimestamp2) > -5.0D) and (cdouble <> UDFToDouble(cint))) or (cstring1 = 'a') or ((CAST( cbigint AS decimal(22,3)) <= -1.389) and (cstring2 <> 'a') and (CAST( cint AS decimal(13,3)) <> 79.553) and (cboolean2 <> cboolean1))) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 2601650 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprOrExpr(children: FilterLongColEqualLongScalar(col 3:bigint, val 762), FilterExprAndExpr(children: FilterDoubleColLessDoubleColumn(col 13:float, col 4:float)(children: CastLongToFloatViaLongToDouble(col 1:smallint) -> 13:float), FilterDoubleColGreaterDoubleScalar(col 13:double, val -5.0)(children: CastTimestampToDouble(col 9:timestamp) -> 13:double), FilterDoubleColNotEqualDoubleColumn(col 5:double, col 13:double)(children: CastLongToDouble(col 2:int) -> 13:double)), FilterStringGroupColEqualStringScalar(col 6:string, val a), FilterExprAndExpr(children: FilterDecimalColLessEqualDecimalScalar(col 14:decimal(22,3), val -1.389)(children: CastLongToDecimal(col 3:bigint) -> 14:decimal(22,3)), FilterStringGroupColNotEqualStringScalar(col 7:string, val a), FilterDecimalColNotEqualDecimalScalar(col 15:decimal(13,3), val 79.553)(children: CastLongToDecimal(col 2:int) -> 15:decimal(13,3)), FilterLongColNotEqualLongColumn(col 11:boolean, col 10:boolean)))
                    predicate: (((CAST( cbigint AS decimal(22,3)) <= -1.389) and (cstring2 <> 'a') and (CAST( cint AS decimal(13,3)) <> 79.553) and (cboolean2 <> cboolean1)) or ((UDFToFloat(csmallint) < cfloat) and (UDFToDouble(ctimestamp2) > -5.0D) and (cdouble <> UDFToDouble(cint))) or (cbigint = 762L) or (cstring1 = 'a')) (type: boolean)
                    Statistics: Num rows: 5465 Data size: 1157230 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: cint (type: int), cdouble (type: double), csmallint (type: smallint), cfloat (type: float), ctinyint (type: tinyint), UDFToDouble(cint) (type: double), (UDFToDouble(cint) * UDFToDouble(cint)) (type: double), UDFToDouble(csmallint) (type: double), (UDFToDouble(csmallint) * UDFToDouble(csmallint)) (type: double)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [2, 5, 1, 4, 0, 13, 18, 16, 20]
                          selectExpressions: CastLongToDouble(col 2:int) -> 13:double, DoubleColMultiplyDoubleColumn(col 16:double, col 17:double)(children: CastLongToDouble(col 2:int) -> 16:double, CastLongToDouble(col 2:int) -> 17:double) -> 18:double, CastLongToDouble(col 1:smallint) -> 16:double, DoubleColMultiplyDoubleColumn(col 17:double, col 19:double)(children: CastLongToDouble(col 1:smallint) -> 17:double, CastLongToDouble(col 1:smallint) -> 19:double) -> 20:double
                      Statistics: Num rows: 5465 Data size: 1157230 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: sum(_col0), count(_col0), sum(_col1), sum(_col6), sum(_col5), sum(_col8), sum(_col7), count(_col2), sum(_col3), count(_col3), min(_col4)
                        Group By Vectorization:
                            aggregators: VectorUDAFSumLong(col 2:int) -> bigint, VectorUDAFCount(col 2:int) -> bigint, VectorUDAFSumDouble(col 5:double) -> double, VectorUDAFSumDouble(col 18:double) -> double, VectorUDAFSumDouble(col 13:double) -> double, VectorUDAFSumDouble(col 20:double) -> double, VectorUDAFSumDouble(col 16:double) -> double, VectorUDAFCount(col 1:smallint) -> bigint, VectorUDAFSumDouble(col 4:float) -> double, VectorUDAFCount(col 4:float) -> bigint, VectorUDAFMinLong(col 0:tinyint) -> tinyint
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10
                        Statistics: Num rows: 1 Data size: 84 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          sort order: 
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkEmptyKeyOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          Statistics: Num rows: 1 Data size: 84 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: bigint), _col1 (type: bigint), _col2 (type: double), _col3 (type: double), _col4 (type: double), _col5 (type: double), _col6 (type: double), _col7 (type: bigint), _col8 (type: double), _col9 (type: bigint), _col10 (type: tinyint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1), sum(VALUE._col2), sum(VALUE._col3), sum(VALUE._col4), sum(VALUE._col5), sum(VALUE._col6), count(VALUE._col7), sum(VALUE._col8), count(VALUE._col9), min(VALUE._col10)
                Group By Vectorization:
                    aggregators: VectorUDAFSumLong(col 0:bigint) -> bigint, VectorUDAFCountMerge(col 1:bigint) -> bigint, VectorUDAFSumDouble(col 2:double) -> double, VectorUDAFSumDouble(col 3:double) -> double, VectorUDAFSumDouble(col 4:double) -> double, VectorUDAFSumDouble(col 5:double) -> double, VectorUDAFSumDouble(col 6:double) -> double, VectorUDAFCountMerge(col 7:bigint) -> bigint, VectorUDAFSumDouble(col 8:double) -> double, VectorUDAFCountMerge(col 9:bigint) -> bigint, VectorUDAFMinLong(col 10:tinyint) -> tinyint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10
                Statistics: Num rows: 1 Data size: 84 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: (UDFToDouble(_col0) / _col1) (type: double), ((UDFToDouble(_col0) / _col1) + -3728.0D) (type: double), (- ((UDFToDouble(_col0) / _col1) + -3728.0D)) (type: double), (- (- ((UDFToDouble(_col0) / _col1) + -3728.0D))) (type: double), ((- (- ((UDFToDouble(_col0) / _col1) + -3728.0D))) * ((UDFToDouble(_col0) / _col1) + -3728.0D)) (type: double), _col2 (type: double), (- (UDFToDouble(_col0) / _col1)) (type: double), power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5) (type: double), (((- (- ((UDFToDouble(_col0) / _col1) + -3728.0D))) * ((UDFToDouble(_col0) / _col1) + -3728.0D)) * (- (- ((UDFToDouble(_col0) / _col1) + -3728.0D)))) (type: double), power(((_col5 - ((_col6 * _col6) / _col7)) / CASE WHEN ((_col7 = 1L)) THEN (null) ELSE ((_col7 - 1)) END), 0.5) (type: double), (- power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5)) (type: double), (power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5) - (- (- ((UDFToDouble(_col0) / _col1) + -3728.0D)))) (type: double), ((power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5) - (- (- ((UDFToDouble(_col0) / _col1) + -3728.0D)))) * power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5)) (type: double), ((_col3 - ((_col4 * _col4) / _col1)) / CASE WHEN ((_col1 = 1L)) THEN (null) ELSE ((_col1 - 1)) END) (type: double), (_col8 / _col9) (type: double), (10.175D - ((_col3 - ((_col4 * _col4) / _col1)) / CASE WHEN ((_col1 = 1L)) THEN (null) ELSE ((_col1 - 1)) END)) (type: double), (- (10.175D - ((_col3 - ((_col4 * _col4) / _col1)) / CASE WHEN ((_col1 = 1L)) THEN (null) ELSE ((_col1 - 1)) END))) (type: double), ((- power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5)) / -563.0D) (type: double), power(((_col3 - ((_col4 * _col4) / _col1)) / CASE WHEN ((_col1 = 1L)) THEN (null) ELSE ((_col1 - 1)) END), 0.5) (type: double), (- ((- power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5)) / -563.0D)) (type: double), ((UDFToDouble(_col0) / _col1) / _col2) (type: double), _col10 (type: tinyint), _col7 (type: bigint), (UDFToDouble(_col10) / ((- power(((_col3 - ((_col4 * _col4) / _col1)) / _col1), 0.5)) / -563.0D)) (type: double), (- ((UDFToDouble(_col0) / _col1) / _col2)) (type: double)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [12, 11, 14, 13, 17, 2, 15, 16, 19, 18, 24, 26, 25, 27, 20, 30, 34, 31, 37, 41, 38, 10, 7, 44, 43]
                      selectExpressions: DoubleColDivideLongColumn(col 11:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 11:double) -> 12:double, DoubleColAddDoubleScalar(col 13:double, val -3728.0)(children: DoubleColDivideLongColumn(col 11:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 11:double) -> 13:double) -> 11:double, DoubleColUnaryMinus(col 13:double)(children: DoubleColAddDoubleScalar(col 14:double, val -3728.0)(children: DoubleColDivideLongColumn(col 13:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 13:double) -> 14:double) -> 13:double) -> 14:double, DoubleColUnaryMinus(col 15:double)(children: DoubleColUnaryMinus(col 13:double)(children: DoubleColAddDoubleScalar(col 15:double, val -3728.0)(children: DoubleColDivideLongColumn(col 13:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 13:double) -> 15:double) -> 13:double) -> 15:double) -> 13:double, DoubleColMultiplyDoubleColumn(col 15:double, col 16:double)(children: DoubleColUnaryMinus(col 16:double)(children: DoubleColUnaryMinus(col 15:double)(children: DoubleColAddDoubleScalar(col 16:double, val -3728.0)(children: DoubleColDivideLongColumn(col 15:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 15:double) -> 16:double) -> 15:double) -> 16:double) -> 15:double, DoubleColAddDoubleScalar(col 17:double, val -3728.0)(children: DoubleColDivideLongColumn(col 16:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 16:double) -> 17:double) -> 16:double) -> 17:double, DoubleColUnaryMinus(col 16:double)(children: DoubleColDivideLongColumn(col 15:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 15:double) -> 16:double) -> 15:double, FuncPowerDoubleToDouble(col 18:double)(children: DoubleColDivideLongColumn(col 16:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 18:double)(children: DoubleColDivideLongColumn(col 16:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 16:double) -> 18:double) -> 16:double) -> 18:double) -> 16:double, DoubleColMultiplyDoubleColumn(col 20:double, col 18:double)(children: DoubleColMultiplyDoubleColumn(col 18:double, col 19:double)(children: DoubleColUnaryMinus(col 19:double)(children: DoubleColUnaryMinus(col 18:double)(children: DoubleColAddDoubleScalar(col 19:double, val -3728.0)(children: DoubleColDivideLongColumn(col 18:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 18:double) -> 19:double) -> 18:double) -> 19:double) -> 18:double, DoubleColAddDoubleScalar(col 20:double, val -3728.0)(children: DoubleColDivideLongColumn(col 19:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 19:double) -> 20:double) -> 19:double) -> 20:double, DoubleColUnaryMinus(col 19:double)(children: DoubleColUnaryMinus(col 18:double)(children: DoubleColAddDoubleScalar(col 19:double, val -3728.0)(children: DoubleColDivideLongColumn(col 18:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 18:double) -> 19:double) -> 18:double) -> 19:double) -> 18:double) -> 19:double, FuncPowerDoubleToDouble(col 20:double)(children: DoubleColDivideLongColumn(col 18:double, col 23:bigint)(children: DoubleColSubtractDoubleColumn(col 5:double, col 20:double)(children: DoubleColDivideLongColumn(col 18:double, col 7:bigint)(children: DoubleColMultiplyDoubleColumn(col 6:double, col 6:double) -> 18:double) -> 20:double) -> 18:double, IfExprNullCondExpr(col 21:boolean, null, col 22:bigint)(children: LongColEqualLongScalar(col 7:bigint, val 1) -> 21:boolean, LongColSubtractLongScalar(col 7:bigint, val 1) -> 22:bigint) -> 23:bigint) -> 20:double) -> 18:double, DoubleColUnaryMinus(col 20:double)(children: FuncPowerDoubleToDouble(col 24:double)(children: DoubleColDivideLongColumn(col 20:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 24:double)(children: DoubleColDivideLongColumn(col 20:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 20:double) -> 24:double) -> 20:double) -> 24:double) -> 20:double) -> 24:double, DoubleColSubtractDoubleColumn(col 20:double, col 25:double)(children: FuncPowerDoubleToDouble(col 25:double)(children: DoubleColDivideLongColumn(col 20:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 25:double)(children: DoubleColDivideLongColumn(col 20:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 20:double) -> 25:double) -> 20:double) -> 25:double) -> 20:double, DoubleColUnaryMinus(col 26:double)(children: DoubleColUnaryMinus(col 25:double)(children: DoubleColAddDoubleScalar(col 26:double, val -3728.0)(children: DoubleColDivideLongColumn(col 25:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 25:double) -> 26:double) -> 25:double) -> 26:double) -> 25:double) -> 26:double, DoubleColMultiplyDoubleColumn(col 27:double, col 20:double)(children: DoubleColSubtractDoubleColumn(col 20:double, col 25:double)(children: FuncPowerDoubleToDouble(col 25:double)(children: DoubleColDivideLongColumn(col 20:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 25:double)(children: DoubleColDivideLongColumn(col 20:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 20:double) -> 25:double) -> 20:double) -> 25:double) -> 20:double, DoubleColUnaryMinus(col 27:double)(children: DoubleColUnaryMinus(col 25:double)(children: DoubleColAddDoubleScalar(col 27:double, val -3728.0)(children: DoubleColDivideLongColumn(col 25:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 25:double) -> 27:double) -> 25:double) -> 27:double) -> 25:double) -> 27:double, FuncPowerDoubleToDouble(col 25:double)(children: DoubleColDivideLongColumn(col 20:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 25:double)(children: DoubleColDivideLongColumn(col 20:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 20:double) -> 25:double) -> 20:double) -> 25:double) -> 20:double) -> 25:double, DoubleColDivideLongColumn(col 20:double, col 29:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 27:double)(children: DoubleColDivideLongColumn(col 20:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 20:double) -> 27:double) -> 20:double, IfExprNullCondExpr(col 23:boolean, null, col 28:bigint)(children: LongColEqualLongScalar(col 1:bigint, val 1) -> 23:boolean, LongColSubtractLongScalar(col 1:bigint, val 1) -> 28:bigint) -> 29:bigint) -> 27:double, DoubleColDivideLongColumn(col 8:double, col 9:bigint) -> 20:double, DoubleScalarSubtractDoubleColumn(val 10.175, col 31:double)(children: DoubleColDivideLongColumn(col 30:double, col 33:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 31:double)(children: DoubleColDivideLongColumn(col 30:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 30:double) -> 31:double) -> 30:double, IfExprNullCondExpr(col 29:boolean, null, col 32:bigint)(children: LongColEqualLongScalar(col 1:bigint, val 1) -> 29:boolean, LongColSubtractLongScalar(col 1:bigint, val 1) -> 32:bigint) -> 33:bigint) -> 31:double) -> 30:double, DoubleColUnaryMinus(col 31:double)(children: DoubleScalarSubtractDoubleColumn(val 10.175, col 34:double)(children: DoubleColDivideLongColumn(col 31:double, col 36:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 34:double)(children: DoubleColDivideLongColumn(col 31:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 31:double) -> 34:double) -> 31:double, IfExprNullCondExpr(col 33:boolean, null, col 35:bigint)(children: LongColEqualLongScalar(col 1:bigint, val 1) -> 33:boolean, LongColSubtractLongScalar(col 1:bigint, val 1) -> 35:bigint) -> 36:bigint) -> 34:double) -> 31:double) -> 34:double, DoubleColDivideDoubleScalar(col 37:double, val -563.0)(children: DoubleColUnaryMinus(col 31:double)(children: FuncPowerDoubleToDouble(col 37:double)(children: DoubleColDivideLongColumn(col 31:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 37:double)(children: DoubleColDivideLongColumn(col 31:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 31:double) -> 37:double) -> 31:double) -> 37:double) -> 31:double) -> 37:double) -> 31:double, FuncPowerDoubleToDouble(col 38:double)(children: DoubleColDivideLongColumn(col 37:double, col 40:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 38:double)(children: DoubleColDivideLongColumn(col 37:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 37:double) -> 38:double) -> 37:double, IfExprNullCondExpr(col 36:boolean, null, col 39:bigint)(children: LongColEqualLongScalar(col 1:bigint, val 1) -> 36:boolean, LongColSubtractLongScalar(col 1:bigint, val 1) -> 39:bigint) -> 40:bigint) -> 38:double) -> 37:double, DoubleColUnaryMinus(col 38:double)(children: DoubleColDivideDoubleScalar(col 41:double, val -563.0)(children: DoubleColUnaryMinus(col 38:double)(children: FuncPowerDoubleToDouble(col 41:double)(children: DoubleColDivideLongColumn(col 38:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 41:double)(children: DoubleColDivideLongColumn(col 38:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 38:double) -> 41:double) -> 38:double) -> 41:double) -> 38:double) -> 41:double) -> 38:double) -> 41:double, DoubleColDivideDoubleColumn(col 42:double, col 2:double)(children: DoubleColDivideLongColumn(col 38:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 38:double) -> 42:double) -> 38:double, DoubleColDivideDoubleColumn(col 42:double, col 43:double)(children: CastLongToDouble(col 10:tinyint) -> 42:double, DoubleColDivideDoubleScalar(col 44:double, val -563.0)(children: DoubleColUnaryMinus(col 43:double)(children: FuncPowerDoubleToDouble(col 44:double)(children: DoubleColDivideLongColumn(col 43:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 44:double)(children: DoubleColDivideLongColumn(col 43:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 43:double) -> 44:double) -> 43:double) -> 44:double) -> 43:double) -> 44:double) -> 43:double) -> 44:double, DoubleColUnaryMinus(col 42:double)(children: DoubleColDivideDoubleColumn(col 43:double, col 2:double)(children: DoubleColDivideLongColumn(col 42:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 42:double) -> 43:double) -> 42:double) -> 43:double
                  Statistics: Num rows: 1 Data size: 196 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 1 Data size: 196 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT AVG(cint),
       (AVG(cint) + -3728),
       (-((AVG(cint) + -3728))),
       (-((-((AVG(cint) + -3728))))),
       ((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)),
       SUM(cdouble),
       (-(AVG(cint))),
       STDDEV_POP(cint),
       (((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)) * (-((-((AVG(cint) + -3728)))))),
       STDDEV_SAMP(csmallint),
       (-(STDDEV_POP(cint))),
       (STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))),
       ((STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))) * STDDEV_POP(cint)),
       VAR_SAMP(cint),
       AVG(cfloat),
       (10.175 - VAR_SAMP(cint)),
       (-((10.175 - VAR_SAMP(cint)))),
       ((-(STDDEV_POP(cint))) / -563),
       STDDEV_SAMP(cint),
       (-(((-(STDDEV_POP(cint))) / -563))),
       (AVG(cint) / SUM(cdouble)),
       MIN(ctinyint),
       COUNT(csmallint),
       (MIN(ctinyint) / ((-(STDDEV_POP(cint))) / -563)),
       (-((AVG(cint) / SUM(cdouble))))
FROM   alltypesorc
WHERE  ((762 = cbigint)
        OR ((csmallint < cfloat)
            AND ((ctimestamp2 > -5)
                 AND (cdouble != cint)))
        OR (cstring1 = 'a')
           OR ((cbigint <= -1.389)
               AND ((cstring2 != 'a')
                    AND ((79.553 != cint)
                         AND (cboolean2 != cboolean1)))))
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: SELECT AVG(cint),
       (AVG(cint) + -3728),
       (-((AVG(cint) + -3728))),
       (-((-((AVG(cint) + -3728))))),
       ((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)),
       SUM(cdouble),
       (-(AVG(cint))),
       STDDEV_POP(cint),
       (((-((-((AVG(cint) + -3728))))) * (AVG(cint) + -3728)) * (-((-((AVG(cint) + -3728)))))),
       STDDEV_SAMP(csmallint),
       (-(STDDEV_POP(cint))),
       (STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))),
       ((STDDEV_POP(cint) - (-((-((AVG(cint) + -3728)))))) * STDDEV_POP(cint)),
       VAR_SAMP(cint),
       AVG(cfloat),
       (10.175 - VAR_SAMP(cint)),
       (-((10.175 - VAR_SAMP(cint)))),
       ((-(STDDEV_POP(cint))) / -563),
       STDDEV_SAMP(cint),
       (-(((-(STDDEV_POP(cint))) / -563))),
       (AVG(cint) / SUM(cdouble)),
       MIN(ctinyint),
       COUNT(csmallint),
       (MIN(ctinyint) / ((-(STDDEV_POP(cint))) / -563)),
       (-((AVG(cint) / SUM(cdouble))))
FROM   alltypesorc
WHERE  ((762 = cbigint)
        OR ((csmallint < cfloat)
            AND ((ctimestamp2 > -5)
                 AND (cdouble != cint)))
        OR (cstring1 = 'a')
           OR ((cbigint <= -1.389)
               AND ((cstring2 != 'a')
                    AND ((79.553 != cint)
                         AND (cboolean2 != cboolean1)))))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
-1.2803533196894065E7	-1.2807261196894065E7	1.2807261196894065E7	-1.2807261196894065E7	1.6402593936546838E14	-275125.557	1.2803533196894065E7	6.102557176084042E8	-2.1007230485194618E21	9480.304481867239	-6.102557176084042E8	6.230629788052982E8	3.8022774524605715E17	3.7261870682317882E17	-11.503947368421052	-3.7261870682317882E17	3.7261870682317882E17	1083935.5552547143	6.104250214589658E8	-1083935.5552547143	46.53705506862114	-51	1029	-4.705076768887381E-5	-46.53705506862114
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT MAX(cint),
       (MAX(cint) / -3728),
       (MAX(cint) * -3728),
       VAR_POP(cbigint),
       (-((MAX(cint) * -3728))),
       STDDEV_POP(csmallint),
       (-563 % (MAX(cint) * -3728)),
       (VAR_POP(cbigint) / STDDEV_POP(csmallint)),
       (-(STDDEV_POP(csmallint))),
       MAX(cdouble),
       AVG(ctinyint),
       (STDDEV_POP(csmallint) - 10.175),
       MIN(cint),
       ((MAX(cint) * -3728) % (STDDEV_POP(csmallint) - 10.175)),
       (-(MAX(cdouble))),
       MIN(cdouble),
       (MAX(cdouble) % -26.28),
       STDDEV_SAMP(csmallint),
       (-((MAX(cint) / -3728))),
       ((-((MAX(cint) * -3728))) % (-563 % (MAX(cint) * -3728))),
       ((MAX(cint) / -3728) - AVG(ctinyint)),
       (-((MAX(cint) * -3728))),
       VAR_SAMP(cint)
FROM   alltypesorc
WHERE  (((cbigint <= 197)
         AND (cint < cbigint))
        OR ((cdouble >= -26.28)
            AND (csmallint > cdouble))
        OR ((ctinyint > cfloat)
            AND (cstring1 RLIKE '.*ss.*'))
           OR ((cfloat > 79.553)
               AND (cstring2 LIKE '10%')))
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT MAX(cint),
       (MAX(cint) / -3728),
       (MAX(cint) * -3728),
       VAR_POP(cbigint),
       (-((MAX(cint) * -3728))),
       STDDEV_POP(csmallint),
       (-563 % (MAX(cint) * -3728)),
       (VAR_POP(cbigint) / STDDEV_POP(csmallint)),
       (-(STDDEV_POP(csmallint))),
       MAX(cdouble),
       AVG(ctinyint),
       (STDDEV_POP(csmallint) - 10.175),
       MIN(cint),
       ((MAX(cint) * -3728) % (STDDEV_POP(csmallint) - 10.175)),
       (-(MAX(cdouble))),
       MIN(cdouble),
       (MAX(cdouble) % -26.28),
       STDDEV_SAMP(csmallint),
       (-((MAX(cint) / -3728))),
       ((-((MAX(cint) * -3728))) % (-563 % (MAX(cint) * -3728))),
       ((MAX(cint) / -3728) - AVG(ctinyint)),
       (-((MAX(cint) * -3728))),
       VAR_SAMP(cint)
FROM   alltypesorc
WHERE  (((cbigint <= 197)
         AND (cint < cbigint))
        OR ((cdouble >= -26.28)
            AND (csmallint > cdouble))
        OR ((ctinyint > cfloat)
            AND (cstring1 RLIKE '.*ss.*'))
           OR ((cfloat > 79.553)
               AND (cstring2 LIKE '10%')))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  filterExpr: (((cbigint <= 197L) and (UDFToLong(cint) < cbigint)) or ((cdouble >= -26.28D) and (UDFToDouble(csmallint) > cdouble)) or ((UDFToFloat(ctinyint) > cfloat) and cstring1 regexp '.*ss.*') or ((cfloat > 79.553) and (cstring2 like '10%'))) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 2036734 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprOrExpr(children: FilterExprAndExpr(children: FilterLongColLessEqualLongScalar(col 3:bigint, val 197), FilterLongColLessLongColumn(col 2:bigint, col 3:bigint)(children: col 2:int)), FilterExprAndExpr(children: FilterDoubleColGreaterEqualDoubleScalar(col 5:double, val -26.28), FilterDoubleColGreaterDoubleColumn(col 13:double, col 5:double)(children: CastLongToDouble(col 1:smallint) -> 13:double)), FilterExprAndExpr(children: FilterDoubleColGreaterDoubleColumn(col 13:float, col 4:float)(children: CastLongToFloatViaLongToDouble(col 0:tinyint) -> 13:float), FilterStringColRegExpStringScalar(col 6:string, pattern .*ss.*)), FilterExprAndExpr(children: FilterDoubleColGreaterDoubleScalar(col 4:float, val 79.5530014038086), FilterStringColLikeStringScalar(col 7:string, pattern 10%)))
                    predicate: (((UDFToFloat(ctinyint) > cfloat) and cstring1 regexp '.*ss.*') or ((cbigint <= 197L) and (UDFToLong(cint) < cbigint)) or ((cdouble >= -26.28D) and (UDFToDouble(csmallint) > cdouble)) or ((cfloat > 79.553) and (cstring2 like '10%'))) (type: boolean)
                    Statistics: Num rows: 6826 Data size: 1131534 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: cint (type: int), cbigint (type: bigint), csmallint (type: smallint), cdouble (type: double), ctinyint (type: tinyint), UDFToDouble(cbigint) (type: double), (UDFToDouble(cbigint) * UDFToDouble(cbigint)) (type: double), UDFToDouble(csmallint) (type: double), (UDFToDouble(csmallint) * UDFToDouble(csmallint)) (type: double), UDFToDouble(cint) (type: double), (UDFToDouble(cint) * UDFToDouble(cint)) (type: double)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [2, 3, 1, 5, 0, 13, 16, 14, 18, 15, 20]
                          selectExpressions: CastLongToDouble(col 3:bigint) -> 13:double, DoubleColMultiplyDoubleColumn(col 14:double, col 15:double)(children: CastLongToDouble(col 3:bigint) -> 14:double, CastLongToDouble(col 3:bigint) -> 15:double) -> 16:double, CastLongToDouble(col 1:smallint) -> 14:double, DoubleColMultiplyDoubleColumn(col 15:double, col 17:double)(children: CastLongToDouble(col 1:smallint) -> 15:double, CastLongToDouble(col 1:smallint) -> 17:double) -> 18:double, CastLongToDouble(col 2:int) -> 15:double, DoubleColMultiplyDoubleColumn(col 17:double, col 19:double)(children: CastLongToDouble(col 2:int) -> 17:double, CastLongToDouble(col 2:int) -> 19:double) -> 20:double
                      Statistics: Num rows: 6826 Data size: 1131534 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: max(_col0), sum(_col6), sum(_col5), count(_col1), sum(_col8), sum(_col7), count(_col2), max(_col3), sum(_col4), count(_col4), min(_col0), min(_col3), sum(_col10), sum(_col9), count(_col0)
                        Group By Vectorization:
                            aggregators: VectorUDAFMaxLong(col 2:int) -> int, VectorUDAFSumDouble(col 16:double) -> double, VectorUDAFSumDouble(col 13:double) -> double, VectorUDAFCount(col 3:bigint) -> bigint, VectorUDAFSumDouble(col 18:double) -> double, VectorUDAFSumDouble(col 14:double) -> double, VectorUDAFCount(col 1:smallint) -> bigint, VectorUDAFMaxDouble(col 5:double) -> double, VectorUDAFSumLong(col 0:tinyint) -> bigint, VectorUDAFCount(col 0:tinyint) -> bigint, VectorUDAFMinLong(col 2:int) -> int, VectorUDAFMinDouble(col 5:double) -> double, VectorUDAFSumDouble(col 20:double) -> double, VectorUDAFSumDouble(col 15:double) -> double, VectorUDAFCount(col 2:int) -> bigint
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14
                        Statistics: Num rows: 1 Data size: 112 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          sort order: 
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkEmptyKeyOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          Statistics: Num rows: 1 Data size: 112 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: int), _col1 (type: double), _col2 (type: double), _col3 (type: bigint), _col4 (type: double), _col5 (type: double), _col6 (type: bigint), _col7 (type: double), _col8 (type: bigint), _col9 (type: bigint), _col10 (type: int), _col11 (type: double), _col12 (type: double), _col13 (type: double), _col14 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0), sum(VALUE._col1), sum(VALUE._col2), count(VALUE._col3), sum(VALUE._col4), sum(VALUE._col5), count(VALUE._col6), max(VALUE._col7), sum(VALUE._col8), count(VALUE._col9), min(VALUE._col10), min(VALUE._col11), sum(VALUE._col12), sum(VALUE._col13), count(VALUE._col14)
                Group By Vectorization:
                    aggregators: VectorUDAFMaxLong(col 0:int) -> int, VectorUDAFSumDouble(col 1:double) -> double, VectorUDAFSumDouble(col 2:double) -> double, VectorUDAFCountMerge(col 3:bigint) -> bigint, VectorUDAFSumDouble(col 4:double) -> double, VectorUDAFSumDouble(col 5:double) -> double, VectorUDAFCountMerge(col 6:bigint) -> bigint, VectorUDAFMaxDouble(col 7:double) -> double, VectorUDAFSumLong(col 8:bigint) -> bigint, VectorUDAFCountMerge(col 9:bigint) -> bigint, VectorUDAFMinLong(col 10:int) -> int, VectorUDAFMinDouble(col 11:double) -> double, VectorUDAFSumDouble(col 12:double) -> double, VectorUDAFSumDouble(col 13:double) -> double, VectorUDAFCountMerge(col 14:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14
                Statistics: Num rows: 1 Data size: 112 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), (UDFToDouble(_col0) / -3728.0D) (type: double), (_col0 * -3728) (type: int), ((_col1 - ((_col2 * _col2) / _col3)) / _col3) (type: double), (- (_col0 * -3728)) (type: int), power(((_col4 - ((_col5 * _col5) / _col6)) / _col6), 0.5) (type: double), (-563 % (_col0 * -3728)) (type: int), (((_col1 - ((_col2 * _col2) / _col3)) / _col3) / power(((_col4 - ((_col5 * _col5) / _col6)) / _col6), 0.5)) (type: double), (- power(((_col4 - ((_col5 * _col5) / _col6)) / _col6), 0.5)) (type: double), _col7 (type: double), (UDFToDouble(_col8) / _col9) (type: double), (power(((_col4 - ((_col5 * _col5) / _col6)) / _col6), 0.5) - 10.175D) (type: double), _col10 (type: int), (UDFToDouble((_col0 * -3728)) % (power(((_col4 - ((_col5 * _col5) / _col6)) / _col6), 0.5) - 10.175D)) (type: double), (- _col7) (type: double), _col11 (type: double), (_col7 % -26.28D) (type: double), power(((_col4 - ((_col5 * _col5) / _col6)) / CASE WHEN ((_col6 = 1L)) THEN (null) ELSE ((_col6 - 1)) END), 0.5) (type: double), (- (UDFToDouble(_col0) / -3728.0D)) (type: double), ((- (_col0 * -3728)) % (-563 % (_col0 * -3728))) (type: int), ((UDFToDouble(_col0) / -3728.0D) - (UDFToDouble(_col8) / _col9)) (type: double), (- (_col0 * -3728)) (type: int), ((_col12 - ((_col13 * _col13) / _col14)) / CASE WHEN ((_col14 = 1L)) THEN (null) ELSE ((_col14 - 1)) END) (type: double)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [0, 16, 17, 18, 20, 15, 22, 24, 23, 7, 25, 26, 10, 27, 21, 11, 28, 29, 30, 32, 33, 35, 37]
                      selectExpressions: DoubleColDivideDoubleScalar(col 15:double, val -3728.0)(children: CastLongToDouble(col 0:int) -> 15:double) -> 16:double, LongColMultiplyLongScalar(col 0:int, val -3728) -> 17:int, DoubleColDivideLongColumn(col 15:double, col 3:bigint)(children: DoubleColSubtractDoubleColumn(col 1:double, col 18:double)(children: DoubleColDivideLongColumn(col 15:double, col 3:bigint)(children: DoubleColMultiplyDoubleColumn(col 2:double, col 2:double) -> 15:double) -> 18:double) -> 15:double) -> 18:double, LongColUnaryMinus(col 19:int)(children: LongColMultiplyLongScalar(col 0:int, val -3728) -> 19:int) -> 20:int, FuncPowerDoubleToDouble(col 21:double)(children: DoubleColDivideLongColumn(col 15:double, col 6:bigint)(children: DoubleColSubtractDoubleColumn(col 4:double, col 21:double)(children: DoubleColDivideLongColumn(col 15:double, col 6:bigint)(children: DoubleColMultiplyDoubleColumn(col 5:double, col 5:double) -> 15:double) -> 21:double) -> 15:double) -> 21:double) -> 15:double, LongScalarModuloLongColumn(val -563, col 19:int)(children: LongColMultiplyLongScalar(col 0:int, val -3728) -> 19:int) -> 22:int, DoubleColDivideDoubleColumn(col 23:double, col 21:double)(children: DoubleColDivideLongColumn(col 21:double, col 3:bigint)(children: DoubleColSubtractDoubleColumn(col 1:double, col 23:double)(children: DoubleColDivideLongColumn(col 21:double, col 3:bigint)(children: DoubleColMultiplyDoubleColumn(col 2:double, col 2:double) -> 21:double) -> 23:double) -> 21:double) -> 23:double, FuncPowerDoubleToDouble(col 24:double)(children: DoubleColDivideLongColumn(col 21:double, col 6:bigint)(children: DoubleColSubtractDoubleColumn(col 4:double, col 24:double)(children: DoubleColDivideLongColumn(col 21:double, col 6:bigint)(children: DoubleColMultiplyDoubleColumn(col 5:double, col 5:double) -> 21:double) -> 24:double) -> 21:double) -> 24:double) -> 21:double) -> 24:double, DoubleColUnaryMinus(col 21:double)(children: FuncPowerDoubleToDouble(col 23:double)(children: DoubleColDivideLongColumn(col 21:double, col 6:bigint)(children: DoubleColSubtractDoubleColumn(col 4:double, col 23:double)(children: DoubleColDivideLongColumn(col 21:double, col 6:bigint)(children: DoubleColMultiplyDoubleColumn(col 5:double, col 5:double) -> 21:double) -> 23:double) -> 21:double) -> 23:double) -> 21:double) -> 23:double, DoubleColDivideLongColumn(col 21:double, col 9:bigint)(children: CastLongToDouble(col 8:bigint) -> 21:double) -> 25:double, DoubleColSubtractDoubleScalar(col 21:double, val 10.175)(children: FuncPowerDoubleToDouble(col 26:double)(children: DoubleColDivideLongColumn(col 21:double, col 6:bigint)(children: DoubleColSubtractDoubleColumn(col 4:double, col 26:double)(children: DoubleColDivideLongColumn(col 21:double, col 6:bigint)(children: DoubleColMultiplyDoubleColumn(col 5:double, col 5:double) -> 21:double) -> 26:double) -> 21:double) -> 26:double) -> 21:double) -> 26:double, DoubleColModuloDoubleColumn(col 21:double, col 28:double)(children: CastLongToDouble(col 19:int)(children: LongColMultiplyLongScalar(col 0:int, val -3728) -> 19:int) -> 21:double, DoubleColSubtractDoubleScalar(col 27:double, val 10.175)(children: FuncPowerDoubleToDouble(col 28:double)(children: DoubleColDivideLongColumn(col 27:double, col 6:bigint)(children: DoubleColSubtractDoubleColumn(col 4:double, col 28:double)(children: DoubleColDivideLongColumn(col 27:double, col 6:bigint)(children: DoubleColMultiplyDoubleColumn(col 5:double, col 5:double) -> 27:double) -> 28:double) -> 27:double) -> 28:double) -> 27:double) -> 28:double) -> 27:double, DoubleColUnaryMinus(col 7:double) -> 21:double, DoubleColModuloDoubleScalar(col 7:double, val -26.28) -> 28:double, FuncPowerDoubleToDouble(col 30:double)(children: DoubleColDivideLongColumn(col 29:double, col 32:bigint)(children: DoubleColSubtractDoubleColumn(col 4:double, col 30:double)(children: DoubleColDivideLongColumn(col 29:double, col 6:bigint)(children: DoubleColMultiplyDoubleColumn(col 5:double, col 5:double) -> 29:double) -> 30:double) -> 29:double, IfExprNullCondExpr(col 19:boolean, null, col 31:bigint)(children: LongColEqualLongScalar(col 6:bigint, val 1) -> 19:boolean, LongColSubtractLongScalar(col 6:bigint, val 1) -> 31:bigint) -> 32:bigint) -> 30:double) -> 29:double, DoubleColUnaryMinus(col 33:double)(children: DoubleColDivideDoubleScalar(col 30:double, val -3728.0)(children: CastLongToDouble(col 0:int) -> 30:double) -> 33:double) -> 30:double, LongColModuloLongColumn(col 34:int, col 35:int)(children: LongColUnaryMinus(col 32:int)(children: LongColMultiplyLongScalar(col 0:int, val -3728) -> 32:int) -> 34:int, LongScalarModuloLongColumn(val -563, col 32:int)(children: LongColMultiplyLongScalar(col 0:int, val -3728) -> 32:int) -> 35:int) -> 32:int, DoubleColSubtractDoubleColumn(col 36:double, col 37:double)(children: DoubleColDivideDoubleScalar(col 33:double, val -3728.0)(children: CastLongToDouble(col 0:int) -> 33:double) -> 36:double, DoubleColDivideLongColumn(col 33:double, col 9:bigint)(children: CastLongToDouble(col 8:bigint) -> 33:double) -> 37:double) -> 33:double, LongColUnaryMinus(col 34:int)(children: LongColMultiplyLongScalar(col 0:int, val -3728) -> 34:int) -> 35:int, DoubleColDivideLongColumn(col 36:double, col 39:bigint)(children: DoubleColSubtractDoubleColumn(col 12:double, col 37:double)(children: DoubleColDivideLongColumn(col 36:double, col 14:bigint)(children: DoubleColMultiplyDoubleColumn(col 13:double, col 13:double) -> 36:double) -> 37:double) -> 36:double, IfExprNullCondExpr(col 34:boolean, null, col 38:bigint)(children: LongColEqualLongScalar(col 14:bigint, val 1) -> 34:boolean, LongColSubtractLongScalar(col 14:bigint, val 1) -> 38:bigint) -> 39:bigint) -> 37:double
                  Statistics: Num rows: 1 Data size: 156 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 1 Data size: 156 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT MAX(cint),
       (MAX(cint) / -3728),
       (MAX(cint) * -3728),
       VAR_POP(cbigint),
       (-((MAX(cint) * -3728))),
       STDDEV_POP(csmallint),
       (-563 % (MAX(cint) * -3728)),
       (VAR_POP(cbigint) / STDDEV_POP(csmallint)),
       (-(STDDEV_POP(csmallint))),
       MAX(cdouble),
       AVG(ctinyint),
       (STDDEV_POP(csmallint) - 10.175),
       MIN(cint),
       ((MAX(cint) * -3728) % (STDDEV_POP(csmallint) - 10.175)),
       (-(MAX(cdouble))),
       MIN(cdouble),
       (MAX(cdouble) % -26.28),
       STDDEV_SAMP(csmallint),
       (-((MAX(cint) / -3728))),
       ((-((MAX(cint) * -3728))) % (-563 % (MAX(cint) * -3728))),
       ((MAX(cint) / -3728) - AVG(ctinyint)),
       (-((MAX(cint) * -3728))),
       VAR_SAMP(cint)
FROM   alltypesorc
WHERE  (((cbigint <= 197)
         AND (cint < cbigint))
        OR ((cdouble >= -26.28)
            AND (csmallint > cdouble))
        OR ((ctinyint > cfloat)
            AND (cstring1 RLIKE '.*ss.*'))
           OR ((cfloat > 79.553)
               AND (cstring2 LIKE '10%')))
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: SELECT MAX(cint),
       (MAX(cint) / -3728),
       (MAX(cint) * -3728),
       VAR_POP(cbigint),
       (-((MAX(cint) * -3728))),
       STDDEV_POP(csmallint),
       (-563 % (MAX(cint) * -3728)),
       (VAR_POP(cbigint) / STDDEV_POP(csmallint)),
       (-(STDDEV_POP(csmallint))),
       MAX(cdouble),
       AVG(ctinyint),
       (STDDEV_POP(csmallint) - 10.175),
       MIN(cint),
       ((MAX(cint) * -3728) % (STDDEV_POP(csmallint) - 10.175)),
       (-(MAX(cdouble))),
       MIN(cdouble),
       (MAX(cdouble) % -26.28),
       STDDEV_SAMP(csmallint),
       (-((MAX(cint) / -3728))),
       ((-((MAX(cint) * -3728))) % (-563 % (MAX(cint) * -3728))),
       ((MAX(cint) / -3728) - AVG(ctinyint)),
       (-((MAX(cint) * -3728))),
       VAR_SAMP(cint)
FROM   alltypesorc
WHERE  (((cbigint <= 197)
         AND (cint < cbigint))
        OR ((cdouble >= -26.28)
            AND (csmallint > cdouble))
        OR ((ctinyint > cfloat)
            AND (cstring1 RLIKE '.*ss.*'))
           OR ((cfloat > 79.553)
               AND (cstring2 LIKE '10%')))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
-20301111	5445.576984978541	-1626869520	7.9684972882908896E16	1626869520	NULL	-563	NULL	NULL	NULL	-8.935323383084578	NULL	-1069736047	NULL	NULL	NULL	NULL	NULL	-5445.576984978541	-58	5454.512308361625	1626869520	7.2647256545687872E16
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT VAR_POP(cbigint),
       (-(VAR_POP(cbigint))),
       (VAR_POP(cbigint) - (-(VAR_POP(cbigint)))),
       COUNT(*),
       (COUNT(*) % 79.553),
       MAX(ctinyint),
       (COUNT(*) - (-(VAR_POP(cbigint)))),
       (-((-(VAR_POP(cbigint))))),
       (-1 % (-(VAR_POP(cbigint)))),
       COUNT(*),
       (-(COUNT(*))),
       STDDEV_POP(csmallint),
       (-((-((-(VAR_POP(cbigint))))))),
       (762 * (-(COUNT(*)))),
       MAX(cint),
       (MAX(ctinyint) + (762 * (-(COUNT(*))))),
       ((-(VAR_POP(cbigint))) + MAX(cint)),
       STDDEV_SAMP(cdouble),
       ((-(COUNT(*))) % COUNT(*)),
       COUNT(ctinyint),
       AVG(ctinyint),
       (-3728 % (MAX(ctinyint) + (762 * (-(COUNT(*))))))
FROM   alltypesorc
WHERE  ((ctimestamp1 = ctimestamp2)
        OR (762 = cfloat)
        OR (cstring1 = 'ss')
           OR ((csmallint <= cbigint)
               AND (1 = cboolean2))
              OR ((cboolean1 IS NOT NULL)
                  AND ((ctimestamp2 IS NOT NULL)
                       AND (cstring2 > 'a'))))
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT VAR_POP(cbigint),
       (-(VAR_POP(cbigint))),
       (VAR_POP(cbigint) - (-(VAR_POP(cbigint)))),
       COUNT(*),
       (COUNT(*) % 79.553),
       MAX(ctinyint),
       (COUNT(*) - (-(VAR_POP(cbigint)))),
       (-((-(VAR_POP(cbigint))))),
       (-1 % (-(VAR_POP(cbigint)))),
       COUNT(*),
       (-(COUNT(*))),
       STDDEV_POP(csmallint),
       (-((-((-(VAR_POP(cbigint))))))),
       (762 * (-(COUNT(*)))),
       MAX(cint),
       (MAX(ctinyint) + (762 * (-(COUNT(*))))),
       ((-(VAR_POP(cbigint))) + MAX(cint)),
       STDDEV_SAMP(cdouble),
       ((-(COUNT(*))) % COUNT(*)),
       COUNT(ctinyint),
       AVG(ctinyint),
       (-3728 % (MAX(ctinyint) + (762 * (-(COUNT(*))))))
FROM   alltypesorc
WHERE  ((ctimestamp1 = ctimestamp2)
        OR (762 = cfloat)
        OR (cstring1 = 'ss')
           OR ((csmallint <= cbigint)
               AND (1 = cboolean2))
              OR ((cboolean1 IS NOT NULL)
                  AND ((ctimestamp2 IS NOT NULL)
                       AND (cstring2 > 'a'))))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  filterExpr: ((ctimestamp1 = ctimestamp2) or (cfloat = 762) or (cstring1 = 'ss') or ((UDFToLong(csmallint) <= cbigint) and (cboolean2 = 1)) or (cboolean1 is not null and ctimestamp2 is not null and (cstring2 > 'a'))) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 3093170 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprOrExpr(children: FilterTimestampColEqualTimestampColumn(col 8:timestamp, col 9:timestamp), FilterDoubleColEqualDoubleScalar(col 4:float, val 762.0), FilterStringGroupColEqualStringScalar(col 6:string, val ss), FilterExprAndExpr(children: FilterLongColLessEqualLongColumn(col 1:bigint, col 3:bigint)(children: col 1:smallint), FilterLongColEqualLongScalar(col 11:boolean, val 1)), FilterExprAndExpr(children: SelectColumnIsNotNull(col 10:boolean), SelectColumnIsNotNull(col 9:timestamp), FilterStringGroupColGreaterStringScalar(col 7:string, val a)))
                    predicate: (((UDFToLong(csmallint) <= cbigint) and (cboolean2 = 1)) or (cboolean1 is not null and ctimestamp2 is not null and (cstring2 > 'a')) or (cfloat = 762) or (cstring1 = 'ss') or (ctimestamp1 = ctimestamp2)) (type: boolean)
                    Statistics: Num rows: 11346 Data size: 2856120 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: cbigint (type: bigint), ctinyint (type: tinyint), csmallint (type: smallint), cint (type: int), cdouble (type: double), UDFToDouble(cbigint) (type: double), (UDFToDouble(cbigint) * UDFToDouble(cbigint)) (type: double), UDFToDouble(csmallint) (type: double), (UDFToDouble(csmallint) * UDFToDouble(csmallint)) (type: double), (cdouble * cdouble) (type: double)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [3, 0, 1, 2, 5, 13, 16, 14, 18, 15]
                          selectExpressions: CastLongToDouble(col 3:bigint) -> 13:double, DoubleColMultiplyDoubleColumn(col 14:double, col 15:double)(children: CastLongToDouble(col 3:bigint) -> 14:double, CastLongToDouble(col 3:bigint) -> 15:double) -> 16:double, CastLongToDouble(col 1:smallint) -> 14:double, DoubleColMultiplyDoubleColumn(col 15:double, col 17:double)(children: CastLongToDouble(col 1:smallint) -> 15:double, CastLongToDouble(col 1:smallint) -> 17:double) -> 18:double, DoubleColMultiplyDoubleColumn(col 5:double, col 5:double) -> 15:double
                      Statistics: Num rows: 11346 Data size: 2856120 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: sum(_col6), sum(_col5), count(_col0), count(), max(_col1), sum(_col8), sum(_col7), count(_col2), max(_col3), sum(_col9), sum(_col4), count(_col4), count(_col1), sum(_col1)
                        Group By Vectorization:
                            aggregators: VectorUDAFSumDouble(col 16:double) -> double, VectorUDAFSumDouble(col 13:double) -> double, VectorUDAFCount(col 3:bigint) -> bigint, VectorUDAFCountStar(*) -> bigint, VectorUDAFMaxLong(col 0:tinyint) -> tinyint, VectorUDAFSumDouble(col 18:double) -> double, VectorUDAFSumDouble(col 14:double) -> double, VectorUDAFCount(col 1:smallint) -> bigint, VectorUDAFMaxLong(col 2:int) -> int, VectorUDAFSumDouble(col 15:double) -> double, VectorUDAFSumDouble(col 5:double) -> double, VectorUDAFCount(col 5:double) -> bigint, VectorUDAFCount(col 0:tinyint) -> bigint, VectorUDAFSumLong(col 0:tinyint) -> bigint
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                        Statistics: Num rows: 1 Data size: 104 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          sort order: 
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkEmptyKeyOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          Statistics: Num rows: 1 Data size: 104 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: double), _col1 (type: double), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: tinyint), _col5 (type: double), _col6 (type: double), _col7 (type: bigint), _col8 (type: int), _col9 (type: double), _col10 (type: double), _col11 (type: bigint), _col12 (type: bigint), _col13 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), sum(VALUE._col1), count(VALUE._col2), count(VALUE._col3), max(VALUE._col4), sum(VALUE._col5), sum(VALUE._col6), count(VALUE._col7), max(VALUE._col8), sum(VALUE._col9), sum(VALUE._col10), count(VALUE._col11), count(VALUE._col12), sum(VALUE._col13)
                Group By Vectorization:
                    aggregators: VectorUDAFSumDouble(col 0:double) -> double, VectorUDAFSumDouble(col 1:double) -> double, VectorUDAFCountMerge(col 2:bigint) -> bigint, VectorUDAFCountMerge(col 3:bigint) -> bigint, VectorUDAFMaxLong(col 4:tinyint) -> tinyint, VectorUDAFSumDouble(col 5:double) -> double, VectorUDAFSumDouble(col 6:double) -> double, VectorUDAFCountMerge(col 7:bigint) -> bigint, VectorUDAFMaxLong(col 8:int) -> int, VectorUDAFSumDouble(col 9:double) -> double, VectorUDAFSumDouble(col 10:double) -> double, VectorUDAFCountMerge(col 11:bigint) -> bigint, VectorUDAFCountMerge(col 12:bigint) -> bigint, VectorUDAFSumLong(col 13:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                Statistics: Num rows: 1 Data size: 104 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: ((_col0 - ((_col1 * _col1) / _col2)) / _col2) (type: double), (- ((_col0 - ((_col1 * _col1) / _col2)) / _col2)) (type: double), (((_col0 - ((_col1 * _col1) / _col2)) / _col2) - (- ((_col0 - ((_col1 * _col1) / _col2)) / _col2))) (type: double), _col3 (type: bigint), (CAST( _col3 AS decimal(19,0)) % 79.553) (type: decimal(5,3)), _col4 (type: tinyint), (UDFToDouble(_col3) - (- ((_col0 - ((_col1 * _col1) / _col2)) / _col2))) (type: double), (- (- ((_col0 - ((_col1 * _col1) / _col2)) / _col2))) (type: double), (-1.0D % (- ((_col0 - ((_col1 * _col1) / _col2)) / _col2))) (type: double), _col3 (type: bigint), (- _col3) (type: bigint), power(((_col5 - ((_col6 * _col6) / _col7)) / _col7), 0.5) (type: double), (- (- (- ((_col0 - ((_col1 * _col1) / _col2)) / _col2)))) (type: double), (762L * (- _col3)) (type: bigint), _col8 (type: int), (UDFToLong(_col4) + (762L * (- _col3))) (type: bigint), ((- ((_col0 - ((_col1 * _col1) / _col2)) / _col2)) + UDFToDouble(_col8)) (type: double), power(((_col9 - ((_col10 * _col10) / _col11)) / CASE WHEN ((_col11 = 1L)) THEN (null) ELSE ((_col11 - 1)) END), 0.5) (type: double), ((- _col3) % _col3) (type: bigint), _col12 (type: bigint), (UDFToDouble(_col13) / _col12) (type: double), (-3728L % (UDFToLong(_col4) + (762L * (- _col3)))) (type: bigint)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [15, 14, 18, 3, 20, 4, 21, 17, 22, 3, 23, 16, 24, 27, 8, 26, 30, 25, 33, 12, 34, 35]
                      selectExpressions: DoubleColDivideLongColumn(col 14:double, col 2:bigint)(children: DoubleColSubtractDoubleColumn(col 0:double, col 15:double)(children: DoubleColDivideLongColumn(col 14:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 14:double) -> 15:double) -> 14:double) -> 15:double, DoubleColUnaryMinus(col 16:double)(children: DoubleColDivideLongColumn(col 14:double, col 2:bigint)(children: DoubleColSubtractDoubleColumn(col 0:double, col 16:double)(children: DoubleColDivideLongColumn(col 14:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 14:double) -> 16:double) -> 14:double) -> 16:double) -> 14:double, DoubleColSubtractDoubleColumn(col 17:double, col 16:double)(children: DoubleColDivideLongColumn(col 16:double, col 2:bigint)(children: DoubleColSubtractDoubleColumn(col 0:double, col 17:double)(children: DoubleColDivideLongColumn(col 16:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 16:double) -> 17:double) -> 16:double) -> 17:double, DoubleColUnaryMinus(col 18:double)(children: DoubleColDivideLongColumn(col 16:double, col 2:bigint)(children: DoubleColSubtractDoubleColumn(col 0:double, col 18:double)(children: DoubleColDivideLongColumn(col 16:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 16:double) -> 18:double) -> 16:double) -> 18:double) -> 16:double) -> 18:double, DecimalColModuloDecimalScalar(col 19:decimal(19,0), val 79.553)(children: CastLongToDecimal(col 3:bigint) -> 19:decimal(19,0)) -> 20:decimal(5,3), DoubleColSubtractDoubleColumn(col 16:double, col 17:double)(children: CastLongToDouble(col 3:bigint) -> 16:double, DoubleColUnaryMinus(col 21:double)(children: DoubleColDivideLongColumn(col 17:double, col 2:bigint)(children: DoubleColSubtractDoubleColumn(col 0:double, col 21:double)(children: DoubleColDivideLongColumn(col 17:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 17:double) -> 21:double) -> 17:double) -> 21:double) -> 17:double) -> 21:double, DoubleColUnaryMinus(col 16:double)(children: DoubleColUnaryMinus(col 17:double)(children: DoubleColDivideLongColumn(col 16:double, col 2:bigint)(children: DoubleColSubtractDoubleColumn(col 0:double, col 17:double)(children: DoubleColDivideLongColumn(col 16:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 16:double) -> 17:double) -> 16:double) -> 17:double) -> 16:double) -> 17:double, DoubleScalarModuloDoubleColumn(val -1.0, col 16:double)(children: DoubleColUnaryMinus(col 22:double)(children: DoubleColDivideLongColumn(col 16:double, col 2:bigint)(children: DoubleColSubtractDoubleColumn(col 0:double, col 22:double)(children: DoubleColDivideLongColumn(col 16:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 16:double) -> 22:double) -> 16:double) -> 22:double) -> 16:double) -> 22:double, LongColUnaryMinus(col 3:bigint) -> 23:bigint, FuncPowerDoubleToDouble(col 24:double)(children: DoubleColDivideLongColumn(col 16:double, col 7:bigint)(children: DoubleColSubtractDoubleColumn(col 5:double, col 24:double)(children: DoubleColDivideLongColumn(col 16:double, col 7:bigint)(children: DoubleColMultiplyDoubleColumn(col 6:double, col 6:double) -> 16:double) -> 24:double) -> 16:double) -> 24:double) -> 16:double, DoubleColUnaryMinus(col 25:double)(children: DoubleColUnaryMinus(col 24:double)(children: DoubleColUnaryMinus(col 25:double)(children: DoubleColDivideLongColumn(col 24:double, col 2:bigint)(children: DoubleColSubtractDoubleColumn(col 0:double, col 25:double)(children: DoubleColDivideLongColumn(col 24:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 24:double) -> 25:double) -> 24:double) -> 25:double) -> 24:double) -> 25:double) -> 24:double, LongScalarMultiplyLongColumn(val 762, col 26:bigint)(children: LongColUnaryMinus(col 3:bigint) -> 26:bigint) -> 27:bigint, LongColAddLongColumn(col 4:bigint, col 28:bigint)(children: col 4:tinyint, LongScalarMultiplyLongColumn(val 762, col 26:bigint)(children: LongColUnaryMinus(col 3:bigint) -> 26:bigint) -> 28:bigint) -> 26:bigint, DoubleColAddDoubleColumn(col 25:double, col 29:double)(children: DoubleColUnaryMinus(col 29:double)(children: DoubleColDivideLongColumn(col 25:double, col 2:bigint)(children: DoubleColSubtractDoubleColumn(col 0:double, col 29:double)(children: DoubleColDivideLongColumn(col 25:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 25:double) -> 29:double) -> 25:double) -> 29:double) -> 25:double, CastLongToDouble(col 8:int) -> 29:double) -> 30:double, FuncPowerDoubleToDouble(col 29:double)(children: DoubleColDivideLongColumn(col 25:double, col 32:bigint)(children: DoubleColSubtractDoubleColumn(col 9:double, col 29:double)(children: DoubleColDivideLongColumn(col 25:double, col 11:bigint)(children: DoubleColMultiplyDoubleColumn(col 10:double, col 10:double) -> 25:double) -> 29:double) -> 25:double, IfExprNullCondExpr(col 28:boolean, null, col 31:bigint)(children: LongColEqualLongScalar(col 11:bigint, val 1) -> 28:boolean, LongColSubtractLongScalar(col 11:bigint, val 1) -> 31:bigint) -> 32:bigint) -> 29:double) -> 25:double, LongColModuloLongColumn(col 32:bigint, col 3:bigint)(children: LongColUnaryMinus(col 3:bigint) -> 32:bigint) -> 33:bigint, DoubleColDivideLongColumn(col 29:double, col 12:bigint)(children: CastLongToDouble(col 13:bigint) -> 29:double) -> 34:double, LongScalarModuloLongColumn(val -3728, col 32:bigint)(children: LongColAddLongColumn(col 4:bigint, col 35:bigint)(children: col 4:tinyint, LongScalarMultiplyLongColumn(val 762, col 32:bigint)(children: LongColUnaryMinus(col 3:bigint) -> 32:bigint) -> 35:bigint) -> 32:bigint) -> 35:bigint
                  Statistics: Num rows: 1 Data size: 272 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 1 Data size: 272 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT VAR_POP(cbigint),
       (-(VAR_POP(cbigint))),
       (VAR_POP(cbigint) - (-(VAR_POP(cbigint)))),
       COUNT(*),
       (COUNT(*) % 79.553),
       MAX(ctinyint),
       (COUNT(*) - (-(VAR_POP(cbigint)))),
       (-((-(VAR_POP(cbigint))))),
       (-1 % (-(VAR_POP(cbigint)))),
       COUNT(*),
       (-(COUNT(*))),
       STDDEV_POP(csmallint),
       (-((-((-(VAR_POP(cbigint))))))),
       (762 * (-(COUNT(*)))),
       MAX(cint),
       (MAX(ctinyint) + (762 * (-(COUNT(*))))),
       ((-(VAR_POP(cbigint))) + MAX(cint)),
       STDDEV_SAMP(cdouble),
       ((-(COUNT(*))) % COUNT(*)),
       COUNT(ctinyint),
       AVG(ctinyint),
       (-3728 % (MAX(ctinyint) + (762 * (-(COUNT(*))))))
FROM   alltypesorc
WHERE  ((ctimestamp1 = ctimestamp2)
        OR (762 = cfloat)
        OR (cstring1 = 'ss')
           OR ((csmallint <= cbigint)
               AND (1 = cboolean2))
              OR ((cboolean1 IS NOT NULL)
                  AND ((ctimestamp2 IS NOT NULL)
                       AND (cstring2 > 'a'))))
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: SELECT VAR_POP(cbigint),
       (-(VAR_POP(cbigint))),
       (VAR_POP(cbigint) - (-(VAR_POP(cbigint)))),
       COUNT(*),
       (COUNT(*) % 79.553),
       MAX(ctinyint),
       (COUNT(*) - (-(VAR_POP(cbigint)))),
       (-((-(VAR_POP(cbigint))))),
       (-1 % (-(VAR_POP(cbigint)))),
       COUNT(*),
       (-(COUNT(*))),
       STDDEV_POP(csmallint),
       (-((-((-(VAR_POP(cbigint))))))),
       (762 * (-(COUNT(*)))),
       MAX(cint),
       (MAX(ctinyint) + (762 * (-(COUNT(*))))),
       ((-(VAR_POP(cbigint))) + MAX(cint)),
       STDDEV_SAMP(cdouble),
       ((-(COUNT(*))) % COUNT(*)),
       COUNT(ctinyint),
       AVG(ctinyint),
       (-3728 % (MAX(ctinyint) + (762 * (-(COUNT(*))))))
FROM   alltypesorc
WHERE  ((ctimestamp1 = ctimestamp2)
        OR (762 = cfloat)
        OR (cstring1 = 'ss')
           OR ((csmallint <= cbigint)
               AND (1 = cboolean2))
              OR ((cboolean1 IS NOT NULL)
                  AND ((ctimestamp2 IS NOT NULL)
                       AND (cstring2 > 'a'))))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
2.5109214708344376E18	-2.5109214708344376E18	5.0218429416688753E18	2780	75.198	62	2.5109214708344402E18	2.5109214708344376E18	-1.0	2780	-2780	9460.675803068356	-2.5109214708344376E18	-2118360	1072872630	-2118298	-2.5109214697615652E18	185935.34910862715	0	758	-1.733509234828496	-3728
WARNING: Comparing a bigint and a double may result in a loss of precision.
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT AVG(ctinyint),
       (AVG(ctinyint) + 6981),
       ((AVG(ctinyint) + 6981) + AVG(ctinyint)),
       MAX(cbigint),
       (((AVG(ctinyint) + 6981) + AVG(ctinyint)) / AVG(ctinyint)),
       (-((AVG(ctinyint) + 6981))),
       STDDEV_SAMP(cint),
       (AVG(ctinyint) % (-((AVG(ctinyint) + 6981)))),
       VAR_POP(cint),
       VAR_POP(cbigint),
       (-(MAX(cbigint))),
       ((-(MAX(cbigint))) / STDDEV_SAMP(cint)),
       MAX(cfloat),
       (VAR_POP(cbigint) * -26.28)
FROM   alltypesorc
WHERE  (((ctimestamp2 <= ctimestamp1)
         AND ((cbigint != cdouble)
              AND ('ss' <= cstring1)))
        OR ((csmallint < ctinyint)
            AND (ctimestamp1 >= 0))
           OR (cfloat = 17))
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT AVG(ctinyint),
       (AVG(ctinyint) + 6981),
       ((AVG(ctinyint) + 6981) + AVG(ctinyint)),
       MAX(cbigint),
       (((AVG(ctinyint) + 6981) + AVG(ctinyint)) / AVG(ctinyint)),
       (-((AVG(ctinyint) + 6981))),
       STDDEV_SAMP(cint),
       (AVG(ctinyint) % (-((AVG(ctinyint) + 6981)))),
       VAR_POP(cint),
       VAR_POP(cbigint),
       (-(MAX(cbigint))),
       ((-(MAX(cbigint))) / STDDEV_SAMP(cint)),
       MAX(cfloat),
       (VAR_POP(cbigint) * -26.28)
FROM   alltypesorc
WHERE  (((ctimestamp2 <= ctimestamp1)
         AND ((cbigint != cdouble)
              AND ('ss' <= cstring1)))
        OR ((csmallint < ctinyint)
            AND (ctimestamp1 >= 0))
           OR (cfloat = 17))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  filterExpr: (((ctimestamp2 <= ctimestamp1) and (UDFToDouble(cbigint) <> cdouble) and (cstring1 >= 'ss')) or ((csmallint < UDFToShort(ctinyint)) and (UDFToDouble(ctimestamp1) >= 0.0D)) or (cfloat = 17)) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 2139070 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprOrExpr(children: FilterExprAndExpr(children: FilterTimestampColLessEqualTimestampColumn(col 9:timestamp, col 8:timestamp), FilterDoubleColNotEqualDoubleColumn(col 13:double, col 5:double)(children: CastLongToDouble(col 3:bigint) -> 13:double), FilterStringGroupColGreaterEqualStringScalar(col 6:string, val ss)), FilterExprAndExpr(children: FilterLongColLessLongColumn(col 1:smallint, col 0:smallint)(children: col 0:tinyint), FilterDoubleColGreaterEqualDoubleScalar(col 13:double, val 0.0)(children: CastTimestampToDouble(col 8:timestamp) -> 13:double)), FilterDoubleColEqualDoubleScalar(col 4:float, val 17.0))
                    predicate: (((csmallint < UDFToShort(ctinyint)) and (UDFToDouble(ctimestamp1) >= 0.0D)) or ((ctimestamp2 <= ctimestamp1) and (UDFToDouble(cbigint) <> cdouble) and (cstring1 >= 'ss')) or (cfloat = 17)) (type: boolean)
                    Statistics: Num rows: 2824 Data size: 491654 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: ctinyint (type: tinyint), cbigint (type: bigint), cint (type: int), cfloat (type: float), UDFToDouble(cint) (type: double), (UDFToDouble(cint) * UDFToDouble(cint)) (type: double), UDFToDouble(cbigint) (type: double), (UDFToDouble(cbigint) * UDFToDouble(cbigint)) (type: double)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [0, 3, 2, 4, 13, 16, 14, 18]
                          selectExpressions: CastLongToDouble(col 2:int) -> 13:double, DoubleColMultiplyDoubleColumn(col 14:double, col 15:double)(children: CastLongToDouble(col 2:int) -> 14:double, CastLongToDouble(col 2:int) -> 15:double) -> 16:double, CastLongToDouble(col 3:bigint) -> 14:double, DoubleColMultiplyDoubleColumn(col 15:double, col 17:double)(children: CastLongToDouble(col 3:bigint) -> 15:double, CastLongToDouble(col 3:bigint) -> 17:double) -> 18:double
                      Statistics: Num rows: 2824 Data size: 491654 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: sum(_col0), count(_col0), max(_col1), sum(_col5), sum(_col4), count(_col2), sum(_col7), sum(_col6), count(_col1), max(_col3)
                        Group By Vectorization:
                            aggregators: VectorUDAFSumLong(col 0:tinyint) -> bigint, VectorUDAFCount(col 0:tinyint) -> bigint, VectorUDAFMaxLong(col 3:bigint) -> bigint, VectorUDAFSumDouble(col 16:double) -> double, VectorUDAFSumDouble(col 13:double) -> double, VectorUDAFCount(col 2:int) -> bigint, VectorUDAFSumDouble(col 18:double) -> double, VectorUDAFSumDouble(col 14:double) -> double, VectorUDAFCount(col 3:bigint) -> bigint, VectorUDAFMaxDouble(col 4:float) -> float
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                        Statistics: Num rows: 1 Data size: 76 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          sort order: 
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkEmptyKeyOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          Statistics: Num rows: 1 Data size: 76 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: bigint), _col1 (type: bigint), _col2 (type: bigint), _col3 (type: double), _col4 (type: double), _col5 (type: bigint), _col6 (type: double), _col7 (type: double), _col8 (type: bigint), _col9 (type: float)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1), max(VALUE._col2), sum(VALUE._col3), sum(VALUE._col4), count(VALUE._col5), sum(VALUE._col6), sum(VALUE._col7), count(VALUE._col8), max(VALUE._col9)
                Group By Vectorization:
                    aggregators: VectorUDAFSumLong(col 0:bigint) -> bigint, VectorUDAFCountMerge(col 1:bigint) -> bigint, VectorUDAFMaxLong(col 2:bigint) -> bigint, VectorUDAFSumDouble(col 3:double) -> double, VectorUDAFSumDouble(col 4:double) -> double, VectorUDAFCountMerge(col 5:bigint) -> bigint, VectorUDAFSumDouble(col 6:double) -> double, VectorUDAFSumDouble(col 7:double) -> double, VectorUDAFCountMerge(col 8:bigint) -> bigint, VectorUDAFMaxDouble(col 9:float) -> float
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                Statistics: Num rows: 1 Data size: 76 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: (UDFToDouble(_col0) / _col1) (type: double), ((UDFToDouble(_col0) / _col1) + 6981.0D) (type: double), (((UDFToDouble(_col0) / _col1) + 6981.0D) + (UDFToDouble(_col0) / _col1)) (type: double), _col2 (type: bigint), ((((UDFToDouble(_col0) / _col1) + 6981.0D) + (UDFToDouble(_col0) / _col1)) / (UDFToDouble(_col0) / _col1)) (type: double), (- ((UDFToDouble(_col0) / _col1) + 6981.0D)) (type: double), power(((_col3 - ((_col4 * _col4) / _col5)) / CASE WHEN ((_col5 = 1L)) THEN (null) ELSE ((_col5 - 1)) END), 0.5) (type: double), ((UDFToDouble(_col0) / _col1) % (- ((UDFToDouble(_col0) / _col1) + 6981.0D))) (type: double), ((_col3 - ((_col4 * _col4) / _col5)) / _col5) (type: double), ((_col6 - ((_col7 * _col7) / _col8)) / _col8) (type: double), (- _col2) (type: bigint), (UDFToDouble((- _col2)) / power(((_col3 - ((_col4 * _col4) / _col5)) / CASE WHEN ((_col5 = 1L)) THEN (null) ELSE ((_col5 - 1)) END), 0.5)) (type: double), _col9 (type: float), (((_col6 - ((_col7 * _col7) / _col8)) / _col8) * -26.28D) (type: double)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [11, 10, 13, 2, 12, 15, 14, 16, 21, 22, 19, 25, 9, 20]
                      selectExpressions: DoubleColDivideLongColumn(col 10:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 10:double) -> 11:double, DoubleColAddDoubleScalar(col 12:double, val 6981.0)(children: DoubleColDivideLongColumn(col 10:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 10:double) -> 12:double) -> 10:double, DoubleColAddDoubleColumn(col 12:double, col 14:double)(children: DoubleColAddDoubleScalar(col 13:double, val 6981.0)(children: DoubleColDivideLongColumn(col 12:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 12:double) -> 13:double) -> 12:double, DoubleColDivideLongColumn(col 13:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 13:double) -> 14:double) -> 13:double, DoubleColDivideDoubleColumn(col 14:double, col 15:double)(children: DoubleColAddDoubleColumn(col 12:double, col 15:double)(children: DoubleColAddDoubleScalar(col 14:double, val 6981.0)(children: DoubleColDivideLongColumn(col 12:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 12:double) -> 14:double) -> 12:double, DoubleColDivideLongColumn(col 14:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 14:double) -> 15:double) -> 14:double, DoubleColDivideLongColumn(col 12:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 12:double) -> 15:double) -> 12:double, DoubleColUnaryMinus(col 14:double)(children: DoubleColAddDoubleScalar(col 15:double, val 6981.0)(children: DoubleColDivideLongColumn(col 14:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 14:double) -> 15:double) -> 14:double) -> 15:double, FuncPowerDoubleToDouble(col 16:double)(children: DoubleColDivideLongColumn(col 14:double, col 19:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 16:double)(children: DoubleColDivideLongColumn(col 14:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 14:double) -> 16:double) -> 14:double, IfExprNullCondExpr(col 17:boolean, null, col 18:bigint)(children: LongColEqualLongScalar(col 5:bigint, val 1) -> 17:boolean, LongColSubtractLongScalar(col 5:bigint, val 1) -> 18:bigint) -> 19:bigint) -> 16:double) -> 14:double, DoubleColModuloDoubleColumn(col 20:double, col 21:double)(children: DoubleColDivideLongColumn(col 16:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 16:double) -> 20:double, DoubleColUnaryMinus(col 16:double)(children: DoubleColAddDoubleScalar(col 21:double, val 6981.0)(children: DoubleColDivideLongColumn(col 16:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 16:double) -> 21:double) -> 16:double) -> 21:double) -> 16:double, DoubleColDivideLongColumn(col 20:double, col 5:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 21:double)(children: DoubleColDivideLongColumn(col 20:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 20:double) -> 21:double) -> 20:double) -> 21:double, DoubleColDivideLongColumn(col 20:double, col 8:bigint)(children: DoubleColSubtractDoubleColumn(col 6:double, col 22:double)(children: DoubleColDivideLongColumn(col 20:double, col 8:bigint)(children: DoubleColMultiplyDoubleColumn(col 7:double, col 7:double) -> 20:double) -> 22:double) -> 20:double) -> 22:double, LongColUnaryMinus(col 2:bigint) -> 19:bigint, DoubleColDivideDoubleColumn(col 20:double, col 24:double)(children: CastLongToDouble(col 23:bigint)(children: LongColUnaryMinus(col 2:bigint) -> 23:bigint) -> 20:double, FuncPowerDoubleToDouble(col 25:double)(children: DoubleColDivideLongColumn(col 24:double, col 27:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 25:double)(children: DoubleColDivideLongColumn(col 24:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 24:double) -> 25:double) -> 24:double, IfExprNullCondExpr(col 23:boolean, null, col 26:bigint)(children: LongColEqualLongScalar(col 5:bigint, val 1) -> 23:boolean, LongColSubtractLongScalar(col 5:bigint, val 1) -> 26:bigint) -> 27:bigint) -> 25:double) -> 24:double) -> 25:double, DoubleColMultiplyDoubleScalar(col 24:double, val -26.28)(children: DoubleColDivideLongColumn(col 20:double, col 8:bigint)(children: DoubleColSubtractDoubleColumn(col 6:double, col 24:double)(children: DoubleColDivideLongColumn(col 20:double, col 8:bigint)(children: DoubleColMultiplyDoubleColumn(col 7:double, col 7:double) -> 20:double) -> 24:double) -> 20:double) -> 24:double) -> 20:double
                  Statistics: Num rows: 1 Data size: 108 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 1 Data size: 108 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

WARNING: Comparing a bigint and a double may result in a loss of precision.
PREHOOK: query: SELECT AVG(ctinyint),
       (AVG(ctinyint) + 6981),
       ((AVG(ctinyint) + 6981) + AVG(ctinyint)),
       MAX(cbigint),
       (((AVG(ctinyint) + 6981) + AVG(ctinyint)) / AVG(ctinyint)),
       (-((AVG(ctinyint) + 6981))),
       STDDEV_SAMP(cint),
       (AVG(ctinyint) % (-((AVG(ctinyint) + 6981)))),
       VAR_POP(cint),
       VAR_POP(cbigint),
       (-(MAX(cbigint))),
       ((-(MAX(cbigint))) / STDDEV_SAMP(cint)),
       MAX(cfloat),
       (VAR_POP(cbigint) * -26.28)
FROM   alltypesorc
WHERE  (((ctimestamp2 <= ctimestamp1)
         AND ((cbigint != cdouble)
              AND ('ss' <= cstring1)))
        OR ((csmallint < ctinyint)
            AND (ctimestamp1 >= 0))
           OR (cfloat = 17))
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: SELECT AVG(ctinyint),
       (AVG(ctinyint) + 6981),
       ((AVG(ctinyint) + 6981) + AVG(ctinyint)),
       MAX(cbigint),
       (((AVG(ctinyint) + 6981) + AVG(ctinyint)) / AVG(ctinyint)),
       (-((AVG(ctinyint) + 6981))),
       STDDEV_SAMP(cint),
       (AVG(ctinyint) % (-((AVG(ctinyint) + 6981)))),
       VAR_POP(cint),
       VAR_POP(cbigint),
       (-(MAX(cbigint))),
       ((-(MAX(cbigint))) / STDDEV_SAMP(cint)),
       MAX(cfloat),
       (VAR_POP(cbigint) * -26.28)
FROM   alltypesorc
WHERE  (((ctimestamp2 <= ctimestamp1)
         AND ((cbigint != cdouble)
              AND ('ss' <= cstring1)))
        OR ((csmallint < ctinyint)
            AND (ctimestamp1 >= 0))
           OR (cfloat = 17))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
17.0	6998.0	7015.0	1942088700	412.6470588235294	-6998.0	1.7455632335840696E8	17.0	2.9018961928004512E16	1.0774839990192407E18	-1942088700	-11.125857045077739	17.0	-2.8316279494225646E19
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT cint,
       cdouble,
       ctimestamp2,
       cstring1,
       cboolean2,
       ctinyint,
       cfloat,
       ctimestamp1,
       csmallint,
       cbigint,
       (-3728 * cbigint) as c1,
       (-(cint)) as c2,
       (-863.257 - cint) as c3,
       (-(csmallint)) as c4,
       (csmallint - (-(csmallint))) as c5,
       ((csmallint - (-(csmallint))) + (-(csmallint))) as c6,
       (cint / cint) as c7,
       ((-863.257 - cint) - -26.28) as c8,
       (-(cfloat)) as c9,
       (cdouble * -89010) as c10,
       (ctinyint / 988888) as c11,
       (-(ctinyint)) as c12,
       (79.553 / ctinyint) as c13
FROM   alltypesorc
WHERE  (((cstring1 RLIKE 'a.*')
         AND (cstring2 LIKE '%ss%'))
        OR ((1 != cboolean2)
            AND ((csmallint < 79.553)
                 AND (-257 != ctinyint)))
        OR ((cdouble > ctinyint)
            AND (cfloat >= cint))
           OR ((cint < cbigint)
               AND (ctinyint > cbigint)))
ORDER BY cint, cdouble, ctimestamp2, cstring1, cboolean2, ctinyint, cfloat, ctimestamp1, csmallint, cbigint, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13
LIMIT 50
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT cint,
       cdouble,
       ctimestamp2,
       cstring1,
       cboolean2,
       ctinyint,
       cfloat,
       ctimestamp1,
       csmallint,
       cbigint,
       (-3728 * cbigint) as c1,
       (-(cint)) as c2,
       (-863.257 - cint) as c3,
       (-(csmallint)) as c4,
       (csmallint - (-(csmallint))) as c5,
       ((csmallint - (-(csmallint))) + (-(csmallint))) as c6,
       (cint / cint) as c7,
       ((-863.257 - cint) - -26.28) as c8,
       (-(cfloat)) as c9,
       (cdouble * -89010) as c10,
       (ctinyint / 988888) as c11,
       (-(ctinyint)) as c12,
       (79.553 / ctinyint) as c13
FROM   alltypesorc
WHERE  (((cstring1 RLIKE 'a.*')
         AND (cstring2 LIKE '%ss%'))
        OR ((1 != cboolean2)
            AND ((csmallint < 79.553)
                 AND (-257 != ctinyint)))
        OR ((cdouble > ctinyint)
            AND (cfloat >= cint))
           OR ((cint < cbigint)
               AND (ctinyint > cbigint)))
ORDER BY cint, cdouble, ctimestamp2, cstring1, cboolean2, ctinyint, cfloat, ctimestamp1, csmallint, cbigint, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13
LIMIT 50
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  filterExpr: ((cstring1 regexp 'a.*' and (cstring2 like '%ss%')) or ((cboolean2 <> 1) and (CAST( csmallint AS decimal(8,3)) < 79.553) and (UDFToInteger(ctinyint) <> -257)) or ((cdouble > UDFToDouble(ctinyint)) and (cfloat >= UDFToFloat(cint))) or ((UDFToLong(cint) < cbigint) and (UDFToLong(ctinyint) > cbigint))) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 3056470 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprOrExpr(children: FilterExprAndExpr(children: FilterStringColRegExpStringScalar(col 6:string, pattern a.*), FilterStringColLikeStringScalar(col 7:string, pattern %ss%)), FilterExprAndExpr(children: FilterLongColNotEqualLongScalar(col 11:boolean, val 1), FilterDecimalColLessDecimalScalar(col 13:decimal(8,3), val 79.553)(children: CastLongToDecimal(col 1:smallint) -> 13:decimal(8,3)), FilterLongColNotEqualLongScalar(col 0:int, val -257)(children: col 0:tinyint)), FilterExprAndExpr(children: FilterDoubleColGreaterDoubleColumn(col 5:double, col 14:double)(children: CastLongToDouble(col 0:tinyint) -> 14:double), FilterDoubleColGreaterEqualDoubleColumn(col 4:float, col 14:float)(children: CastLongToFloatViaLongToDouble(col 2:int) -> 14:float)), FilterExprAndExpr(children: FilterLongColLessLongColumn(col 2:bigint, col 3:bigint)(children: col 2:int), FilterLongColGreaterLongColumn(col 0:bigint, col 3:bigint)(children: col 0:tinyint)))
                    predicate: (((UDFToLong(cint) < cbigint) and (UDFToLong(ctinyint) > cbigint)) or ((cboolean2 <> 1) and (CAST( csmallint AS decimal(8,3)) < 79.553) and (UDFToInteger(ctinyint) <> -257)) or ((cdouble > UDFToDouble(ctinyint)) and (cfloat >= UDFToFloat(cint))) or (cstring1 regexp 'a.*' and (cstring2 like '%ss%'))) (type: boolean)
                    Statistics: Num rows: 9898 Data size: 2462086 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: cint (type: int), cdouble (type: double), ctimestamp2 (type: timestamp), cstring1 (type: string), cboolean2 (type: boolean), ctinyint (type: tinyint), cfloat (type: float), ctimestamp1 (type: timestamp), csmallint (type: smallint), cbigint (type: bigint), (-3728L * cbigint) (type: bigint), (- cint) (type: int), (-863.257 - CAST( cint AS decimal(10,0))) (type: decimal(14,3)), (- csmallint) (type: smallint), (csmallint - (- csmallint)) (type: smallint), ((csmallint - (- csmallint)) + (- csmallint)) (type: smallint), (UDFToDouble(cint) / UDFToDouble(cint)) (type: double), ((-863.257 - CAST( cint AS decimal(10,0))) - -26.28) (type: decimal(15,3)), (- cfloat) (type: float), (cdouble * -89010.0D) (type: double), (UDFToDouble(ctinyint) / 988888.0D) (type: double), (- ctinyint) (type: tinyint), (79.553 / CAST( ctinyint AS decimal(3,0))) (type: decimal(9,7))
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [2, 5, 9, 6, 11, 0, 4, 8, 1, 3, 15, 16, 18, 19, 21, 23, 25, 27, 14, 24, 29, 20, 31]
                          selectExpressions: LongScalarMultiplyLongColumn(val -3728, col 3:bigint) -> 15:bigint, LongColUnaryMinus(col 2:int) -> 16:int, DecimalScalarSubtractDecimalColumn(val -863.257, col 17:decimal(10,0))(children: CastLongToDecimal(col 2:int) -> 17:decimal(10,0)) -> 18:decimal(14,3), LongColUnaryMinus(col 1:smallint) -> 19:smallint, LongColSubtractLongColumn(col 1:smallint, col 20:smallint)(children: LongColUnaryMinus(col 1:smallint) -> 20:smallint) -> 21:smallint, LongColAddLongColumn(col 22:smallint, col 20:smallint)(children: LongColSubtractLongColumn(col 1:smallint, col 20:smallint)(children: LongColUnaryMinus(col 1:smallint) -> 20:smallint) -> 22:smallint, LongColUnaryMinus(col 1:smallint) -> 20:smallint) -> 23:smallint, DoubleColDivideDoubleColumn(col 14:double, col 24:double)(children: CastLongToDouble(col 2:int) -> 14:double, CastLongToDouble(col 2:int) -> 24:double) -> 25:double, DecimalColSubtractDecimalScalar(col 26:decimal(14,3), val -26.28)(children: DecimalScalarSubtractDecimalColumn(val -863.257, col 17:decimal(10,0))(children: CastLongToDecimal(col 2:int) -> 17:decimal(10,0)) -> 26:decimal(14,3)) -> 27:decimal(15,3), DoubleColUnaryMinus(col 4:float) -> 14:float, DoubleColMultiplyDoubleScalar(col 5:double, val -89010.0) -> 24:double, DoubleColDivideDoubleScalar(col 28:double, val 988888.0)(children: CastLongToDouble(col 0:tinyint) -> 28:double) -> 29:double, LongColUnaryMinus(col 0:tinyint) -> 20:tinyint, DecimalScalarDivideDecimalColumn(val 79.553, col 30:decimal(3,0))(children: CastLongToDecimal(col 0:tinyint) -> 30:decimal(3,0)) -> 31:decimal(9,7)
                      Statistics: Num rows: 9898 Data size: 5632662 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: double), _col2 (type: timestamp), _col3 (type: string), _col4 (type: boolean), _col5 (type: tinyint), _col6 (type: float), _col7 (type: timestamp), _col8 (type: smallint), _col9 (type: bigint), _col10 (type: bigint), _col11 (type: int), _col12 (type: decimal(14,3)), _col13 (type: smallint), _col14 (type: smallint), _col15 (type: smallint), _col16 (type: double), _col17 (type: decimal(15,3)), _col18 (type: float), _col19 (type: double), _col20 (type: double), _col21 (type: tinyint), _col22 (type: decimal(9,7))
                        sort order: +++++++++++++++++++++++
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkObjectHashOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 9898 Data size: 5632662 Basic stats: COMPLETE Column stats: COMPLETE
                        TopN Hash Memory Usage: 0.1
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), KEY.reducesinkkey1 (type: double), KEY.reducesinkkey2 (type: timestamp), KEY.reducesinkkey3 (type: string), KEY.reducesinkkey4 (type: boolean), KEY.reducesinkkey5 (type: tinyint), KEY.reducesinkkey6 (type: float), KEY.reducesinkkey7 (type: timestamp), KEY.reducesinkkey8 (type: smallint), KEY.reducesinkkey9 (type: bigint), KEY.reducesinkkey10 (type: bigint), KEY.reducesinkkey11 (type: int), KEY.reducesinkkey12 (type: decimal(14,3)), KEY.reducesinkkey13 (type: smallint), KEY.reducesinkkey14 (type: smallint), KEY.reducesinkkey15 (type: smallint), KEY.reducesinkkey16 (type: double), KEY.reducesinkkey17 (type: decimal(15,3)), KEY.reducesinkkey18 (type: float), KEY.reducesinkkey19 (type: double), KEY.reducesinkkey20 (type: double), KEY.reducesinkkey21 (type: tinyint), KEY.reducesinkkey22 (type: decimal(9,7))
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
                Statistics: Num rows: 9898 Data size: 5632662 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 50
                  Limit Vectorization:
                      className: VectorLimitOperator
                      native: true
                  Statistics: Num rows: 50 Data size: 28540 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 50 Data size: 28540 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 50
      Processor Tree:
        ListSink

PREHOOK: query: SELECT cint,
       cdouble,
       ctimestamp2,
       cstring1,
       cboolean2,
       ctinyint,
       cfloat,
       ctimestamp1,
       csmallint,
       cbigint,
       (-3728 * cbigint) as c1,
       (-(cint)) as c2,
       (-863.257 - cint) as c3,
       (-(csmallint)) as c4,
       (csmallint - (-(csmallint))) as c5,
       ((csmallint - (-(csmallint))) + (-(csmallint))) as c6,
       (cint / cint) as c7,
       ((-863.257 - cint) - -26.28) as c8,
       (-(cfloat)) as c9,
       (cdouble * -89010) as c10,
       (ctinyint / 988888) as c11,
       (-(ctinyint)) as c12,
       (79.553 / ctinyint) as c13
FROM   alltypesorc
WHERE  (((cstring1 RLIKE 'a.*')
         AND (cstring2 LIKE '%ss%'))
        OR ((1 != cboolean2)
            AND ((csmallint < 79.553)
                 AND (-257 != ctinyint)))
        OR ((cdouble > ctinyint)
            AND (cfloat >= cint))
           OR ((cint < cbigint)
               AND (ctinyint > cbigint)))
ORDER BY cint, cdouble, ctimestamp2, cstring1, cboolean2, ctinyint, cfloat, ctimestamp1, csmallint, cbigint, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13
LIMIT 50
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: SELECT cint,
       cdouble,
       ctimestamp2,
       cstring1,
       cboolean2,
       ctinyint,
       cfloat,
       ctimestamp1,
       csmallint,
       cbigint,
       (-3728 * cbigint) as c1,
       (-(cint)) as c2,
       (-863.257 - cint) as c3,
       (-(csmallint)) as c4,
       (csmallint - (-(csmallint))) as c5,
       ((csmallint - (-(csmallint))) + (-(csmallint))) as c6,
       (cint / cint) as c7,
       ((-863.257 - cint) - -26.28) as c8,
       (-(cfloat)) as c9,
       (cdouble * -89010) as c10,
       (ctinyint / 988888) as c11,
       (-(ctinyint)) as c12,
       (79.553 / ctinyint) as c13
FROM   alltypesorc
WHERE  (((cstring1 RLIKE 'a.*')
         AND (cstring2 LIKE '%ss%'))
        OR ((1 != cboolean2)
            AND ((csmallint < 79.553)
                 AND (-257 != ctinyint)))
        OR ((cdouble > ctinyint)
            AND (cfloat >= cint))
           OR ((cint < cbigint)
               AND (ctinyint > cbigint)))
ORDER BY cint, cdouble, ctimestamp2, cstring1, cboolean2, ctinyint, cfloat, ctimestamp1, csmallint, cbigint, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13
LIMIT 50
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
-1000804087	NULL	NULL	H8LCu4M2u4f1S	true	-51	-51.0	1969-12-31 16:00:08.451	NULL	-873515594	3256466134432	1000804087	1000803223.743	NULL	NULL	NULL	1.0	1000803250.023	51.0	NULL	-5.157308006568995E-5	51	-1.5598627
-1003789565	NULL	NULL	dq1Ji5vGb4GVow42	false	-51	-51.0	1969-12-31 16:00:08.451	NULL	-505400643	1884133597104	1003789565	1003788701.743	NULL	NULL	NULL	1.0	1003788728.023	51.0	NULL	-5.157308006568995E-5	51	-1.5598627
-1012011232	NULL	NULL	7q0iMi2GDq0Q	false	11	11.0	1969-12-31 16:00:02.351	NULL	-806973080	3008395642240	1012011232	1012010368.743	NULL	NULL	NULL	1.0	1012010395.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-1015510885	NULL	NULL	Kw7fOuw4DHeyXe2yg	false	-51	-51.0	1969-12-31 16:00:08.451	NULL	-67812054	252803337312	1015510885	1015510021.743	NULL	NULL	NULL	1.0	1015510048.023	51.0	NULL	-5.157308006568995E-5	51	-1.5598627
-1016835101	NULL	NULL	Md2lY0T7reBu	false	8	8.0	1969-12-31 16:00:15.892	NULL	-491294009	1831544065552	1016835101	1016834237.743	NULL	NULL	NULL	1.0	1016834264.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-1017266554	NULL	NULL	DU1m68i1Q7W3	false	-51	-51.0	1969-12-31 16:00:08.451	NULL	-145067516	540811699648	1017266554	1017265690.743	NULL	NULL	NULL	1.0	1017265717.023	51.0	NULL	-5.157308006568995E-5	51	-1.5598627
-1020120834	NULL	NULL	6Ob80MBP350rI275	true	8	8.0	1969-12-31 16:00:15.892	NULL	-100465694	374536107232	1020120834	1020119970.743	NULL	NULL	NULL	1.0	1020119997.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-1020466796	NULL	NULL	7hCJ5yJvt0775jjgq8S0bX6W	false	11	11.0	1969-12-31 16:00:02.351	NULL	-926772952	3455009565056	1020466796	1020465932.743	NULL	NULL	NULL	1.0	1020465959.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-1023165277	NULL	NULL	438Lxo541TwY5ID80cnR5	false	11	11.0	1969-12-31 16:00:02.351	NULL	-1004780673	3745822348944	1023165277	1023164413.743	NULL	NULL	NULL	1.0	1023164440.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-1023644243	NULL	NULL	Cxas82oA2hX884xmYQ2jrpDX	true	11	11.0	1969-12-31 16:00:02.351	NULL	-866431241	3230055666448	1023644243	1023643379.743	NULL	NULL	NULL	1.0	1023643406.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-1024321144	NULL	NULL	CE22Wjuk7d20ouN	true	8	8.0	1969-12-31 16:00:15.892	NULL	-94624654	352760710112	1024321144	1024320280.743	NULL	NULL	NULL	1.0	1024320307.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-1026019772	NULL	NULL	T6Al7d0hN770XB65M0F2g	true	11	11.0	1969-12-31 16:00:02.351	NULL	-338489479	1261888777712	1026019772	1026018908.743	NULL	NULL	NULL	1.0	1026018935.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-1039292315	NULL	NULL	07488p5vb4d2	true	8	8.0	1969-12-31 16:00:15.892	NULL	-432155916	1611077254848	1039292315	1039291451.743	NULL	NULL	NULL	1.0	1039291478.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-1039495786	NULL	NULL	b0BEyNEe1bvQ	true	8	8.0	1969-12-31 16:00:15.892	NULL	-760564106	2835382987168	1039495786	1039494922.743	NULL	NULL	NULL	1.0	1039494949.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-1039715238	NULL	NULL	oOt2v	true	-51	-51.0	1969-12-31 16:00:08.451	NULL	-86361999	321957532272	1039715238	1039714374.743	NULL	NULL	NULL	1.0	1039714401.023	51.0	NULL	-5.157308006568995E-5	51	-1.5598627
-1041353707	NULL	NULL	25Qky6lf2pt5FP47Mqmb	true	11	11.0	1969-12-31 16:00:02.351	NULL	-931949639	3474308254192	1041353707	1041352843.743	NULL	NULL	NULL	1.0	1041352870.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-1043979188	NULL	NULL	2d3tQdCGQN5k7u7S	false	11	11.0	1969-12-31 16:00:02.351	NULL	-8894336	33158084608	1043979188	1043978324.743	NULL	NULL	NULL	1.0	1043978351.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-1046913669	NULL	NULL	40r4yyU6T0A0Mekf24k	false	8	8.0	1969-12-31 16:00:15.892	NULL	-90393132	336985596096	1046913669	1046912805.743	NULL	NULL	NULL	1.0	1046912832.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-1047036113	NULL	NULL	Js07yFa2qnrfVU1j2e3	false	11	11.0	1969-12-31 16:00:02.351	NULL	-240113848	895144425344	1047036113	1047035249.743	NULL	NULL	NULL	1.0	1047035276.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-1048097158	NULL	NULL	fpt3gpLE	true	11	11.0	1969-12-31 16:00:02.351	NULL	-234579722	874513203616	1048097158	1048096294.743	NULL	NULL	NULL	1.0	1048096321.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-1049984461	NULL	NULL	qUY8Rl34NWRg	false	8	8.0	1969-12-31 16:00:15.892	NULL	-247067895	921069112560	1049984461	1049983597.743	NULL	NULL	NULL	1.0	1049983624.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-1054849160	NULL	NULL	CEGOy	true	11	11.0	1969-12-31 16:00:02.351	NULL	-1027630923	3831008080944	1054849160	1054848296.743	NULL	NULL	NULL	1.0	1054848323.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-1055185482	NULL	NULL	l20vn2Awc	true	11	11.0	1969-12-31 16:00:02.351	NULL	-398806473	1486750531344	1055185482	1055184618.743	NULL	NULL	NULL	1.0	1055184645.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-1058286942	NULL	NULL	R6q656btrqQM6a5nQ4GcVg	true	8	8.0	1969-12-31 16:00:15.892	NULL	-922041114	3437369272992	1058286942	1058286078.743	NULL	NULL	NULL	1.0	1058286105.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-1058897881	NULL	NULL	6fPk0A	false	8	8.0	1969-12-31 16:00:15.892	NULL	-800997317	2986117997776	1058897881	1058897017.743	NULL	NULL	NULL	1.0	1058897044.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-1060624784	NULL	NULL	Das7E73	true	-51	-51.0	1969-12-31 16:00:08.451	NULL	-941434751	3509668751728	1060624784	1060623920.743	NULL	NULL	NULL	1.0	1060623947.023	51.0	NULL	-5.157308006568995E-5	51	-1.5598627
-1063164541	NULL	NULL	1NydRD5y5o3	false	8	8.0	1969-12-31 16:00:15.892	NULL	-74907656	279255741568	1063164541	1063163677.743	NULL	NULL	NULL	1.0	1063163704.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-1063745167	NULL	NULL	L47nqo	true	8	8.0	1969-12-31 16:00:15.892	NULL	-68741114	256266872992	1063745167	1063744303.743	NULL	NULL	NULL	1.0	1063744330.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-1068247011	NULL	NULL	dPbX4jd1v47r1bB6506si	false	8	8.0	1969-12-31 16:00:15.892	NULL	-729456614	2719414256992	1068247011	1068246147.743	NULL	NULL	NULL	1.0	1068246174.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-1069103950	NULL	NULL	41A0nYX72UOSfxO4053xy	true	11	11.0	1969-12-31 16:00:02.351	NULL	-927759444	3458687207232	1069103950	1069103086.743	NULL	NULL	NULL	1.0	1069103113.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-1069736047	NULL	NULL	k17Am8uPHWk02cEf1jet	true	11	11.0	1969-12-31 16:00:02.351	NULL	-453772520	1691663954560	1069736047	1069735183.743	NULL	NULL	NULL	1.0	1069735210.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-919940926	NULL	NULL	i1P3Wlat5EnBugL24oS4I3	true	-51	-51.0	1969-12-31 16:00:08.451	NULL	-533395388	1988498006464	919940926	919940062.743	NULL	NULL	NULL	1.0	919940089.023	51.0	NULL	-5.157308006568995E-5	51	-1.5598627
-923400421	NULL	NULL	MJ7Ej4tBYS8l2mK	true	8	8.0	1969-12-31 16:00:15.892	NULL	-67708318	252416609504	923400421	923399557.743	NULL	NULL	NULL	1.0	923399584.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-925336063	NULL	NULL	060EnWLmWE4K8Pv	false	-51	-51.0	1969-12-31 16:00:08.451	NULL	-477173411	1778902476208	925336063	925335199.743	NULL	NULL	NULL	1.0	925335226.023	51.0	NULL	-5.157308006568995E-5	51	-1.5598627
-928500968	NULL	NULL	34oSgU32X	true	8	8.0	1969-12-31 16:00:15.892	NULL	-831143834	3098504213152	928500968	928500104.743	NULL	NULL	NULL	1.0	928500131.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-930153712	NULL	NULL	Jj21024T2xdn6	false	11	11.0	1969-12-31 16:00:02.351	NULL	-737116859	2747971650352	930153712	930152848.743	NULL	NULL	NULL	1.0	930152875.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-930463965	NULL	NULL	ldk1K	false	11	11.0	1969-12-31 16:00:02.351	NULL	-414014176	1543444848128	930463965	930463101.743	NULL	NULL	NULL	1.0	930463128.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-932998902	NULL	NULL	kAr0ffWGEU7MHSKp	true	8	8.0	1969-12-31 16:00:15.892	NULL	-230462122	859162790816	932998902	932998038.743	NULL	NULL	NULL	1.0	932998065.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-937557606	NULL	NULL	2251WSv5eA2l6WqesdKPM2	true	8	8.0	1969-12-31 16:00:15.892	NULL	-532708003	1985935435184	937557606	937556742.743	NULL	NULL	NULL	1.0	937556769.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-943342622	NULL	NULL	3w6XYq04J0Lb3Sv82eOV2HJ	true	-51	-51.0	1969-12-31 16:00:08.451	NULL	-750731096	2798725525888	943342622	943341758.743	NULL	NULL	NULL	1.0	943341785.023	51.0	NULL	-5.157308006568995E-5	51	-1.5598627
-949286785	NULL	NULL	XWuYuk5qpn5Khs3764E56	true	-51	-51.0	1969-12-31 16:00:08.451	NULL	-946341072	3527959516416	949286785	949285921.743	NULL	NULL	NULL	1.0	949285948.023	51.0	NULL	-5.157308006568995E-5	51	-1.5598627
-954917203	NULL	NULL	1M4eTm8OcOW2dAMV2V5slS1	true	-51	-51.0	1969-12-31 16:00:08.451	NULL	-710267209	2647876155152	954917203	954916339.743	NULL	NULL	NULL	1.0	954916366.023	51.0	NULL	-5.157308006568995E-5	51	-1.5598627
-965597463	NULL	NULL	b0G65a66732y6yE65hQ0	false	8	8.0	1969-12-31 16:00:15.892	NULL	-922745115	3439993788720	965597463	965596599.743	NULL	NULL	NULL	1.0	965596626.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-970640948	NULL	NULL	frhe0	false	11	11.0	1969-12-31 16:00:02.351	NULL	-935612665	3487964015120	970640948	970640084.743	NULL	NULL	NULL	1.0	970640111.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-970918963	NULL	NULL	suoqdh	false	-51	-51.0	1969-12-31 16:00:08.451	NULL	-588508542	2193959844576	970918963	970918099.743	NULL	NULL	NULL	1.0	970918126.023	51.0	NULL	-5.157308006568995E-5	51	-1.5598627
-978898374	NULL	NULL	ShA4jlmOwF8u7kjN	false	11	11.0	1969-12-31 16:00:02.351	NULL	-277483031	1034456739568	978898374	978897510.743	NULL	NULL	NULL	1.0	978897537.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-980072140	NULL	NULL	Jt7E0sR3X7V	true	-51	-51.0	1969-12-31 16:00:08.451	NULL	-819889345	3056547478160	980072140	980071276.743	NULL	NULL	NULL	1.0	980071303.023	51.0	NULL	-5.157308006568995E-5	51	-1.5598627
-980511555	NULL	NULL	1TBB2v0eBqlr4c7d	true	8	8.0	1969-12-31 16:00:15.892	NULL	-890261594	3318895222432	980511555	980510691.743	NULL	NULL	NULL	1.0	980510718.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
-988289401	NULL	NULL	CeG187j	false	11	11.0	1969-12-31 16:00:02.351	NULL	-446065499	1662932180272	988289401	988288537.743	NULL	NULL	NULL	1.0	988288564.023	-11.0	NULL	1.1123605504364498E-5	-11	7.2320909
-993291633	NULL	NULL	8reJCOg48gHGHDs	true	8	8.0	1969-12-31 16:00:15.892	NULL	-861531376	3211788969728	993291633	993290769.743	NULL	NULL	NULL	1.0	993290796.023	-8.0	NULL	8.08989491226509E-6	-8	9.9441250
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT cint,
       cbigint,
       cstring1,
       cboolean1,
       cfloat,
       cdouble,
       ctimestamp2,
       csmallint,
       cstring2,
       cboolean2,
       (cint / cbigint) as c1,
       (cbigint % 79.553) as c2,
       (-((cint / cbigint))) as c3,
       (10.175 % cfloat) as c4,
       (-(cfloat)) as c5,
       (cfloat - (-(cfloat))) as c6,
       ((cfloat - (-(cfloat))) % -6432) as c7,
       (cdouble * csmallint) as c8,
       (-(cdouble)) as c9,
       (-(cbigint)) as c10,
       (cfloat - (cint / cbigint)) as c11,
       (-(csmallint)) as c12,
       (3569 % cbigint) as c13,
       (359 - cdouble) as c14,
       (-(csmallint)) as c15
FROM   alltypesorc
WHERE  (((197 > ctinyint)
         AND (cint = cbigint))
        OR (cbigint = 359)
        OR (cboolean1 < 0)
           OR ((cstring1 LIKE '%ss')
               AND (cfloat <= ctinyint)))
ORDER BY cint, cbigint, cstring1, cboolean1, cfloat, cdouble, ctimestamp2, csmallint, cstring2, cboolean2, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15
LIMIT 25
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT cint,
       cbigint,
       cstring1,
       cboolean1,
       cfloat,
       cdouble,
       ctimestamp2,
       csmallint,
       cstring2,
       cboolean2,
       (cint / cbigint) as c1,
       (cbigint % 79.553) as c2,
       (-((cint / cbigint))) as c3,
       (10.175 % cfloat) as c4,
       (-(cfloat)) as c5,
       (cfloat - (-(cfloat))) as c6,
       ((cfloat - (-(cfloat))) % -6432) as c7,
       (cdouble * csmallint) as c8,
       (-(cdouble)) as c9,
       (-(cbigint)) as c10,
       (cfloat - (cint / cbigint)) as c11,
       (-(csmallint)) as c12,
       (3569 % cbigint) as c13,
       (359 - cdouble) as c14,
       (-(csmallint)) as c15
FROM   alltypesorc
WHERE  (((197 > ctinyint)
         AND (cint = cbigint))
        OR (cbigint = 359)
        OR (cboolean1 < 0)
           OR ((cstring1 LIKE '%ss')
               AND (cfloat <= ctinyint)))
ORDER BY cint, cbigint, cstring1, cboolean1, cfloat, cdouble, ctimestamp2, csmallint, cstring2, cboolean2, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15
LIMIT 25
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  filterExpr: (((UDFToInteger(ctinyint) < 197) and (UDFToLong(cint) = cbigint)) or (cbigint = 359L) or (cboolean1 < 0) or ((cstring1 like '%ss') and (cfloat <= UDFToFloat(ctinyint)))) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 2601650 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprOrExpr(children: FilterExprAndExpr(children: FilterLongColLessLongScalar(col 0:int, val 197)(children: col 0:tinyint), FilterLongColEqualLongColumn(col 2:bigint, col 3:bigint)(children: col 2:int)), FilterLongColEqualLongScalar(col 3:bigint, val 359), FilterLongColLessLongScalar(col 10:boolean, val 0), FilterExprAndExpr(children: FilterStringColLikeStringScalar(col 6:string, pattern %ss), FilterDoubleColLessEqualDoubleColumn(col 4:float, col 13:float)(children: CastLongToFloatViaLongToDouble(col 0:tinyint) -> 13:float)))
                    predicate: (((UDFToInteger(ctinyint) < 197) and (UDFToLong(cint) = cbigint)) or ((cstring1 like '%ss') and (cfloat <= UDFToFloat(ctinyint))) or (cbigint = 359L) or (cboolean1 < 0)) (type: boolean)
                    Statistics: Num rows: 8194 Data size: 1734900 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: cint (type: int), cbigint (type: bigint), cstring1 (type: string), cboolean1 (type: boolean), cfloat (type: float), cdouble (type: double), ctimestamp2 (type: timestamp), csmallint (type: smallint), cstring2 (type: string), cboolean2 (type: boolean), (UDFToDouble(cint) / UDFToDouble(cbigint)) (type: double), (CAST( cbigint AS decimal(19,0)) % 79.553) (type: decimal(5,3)), (- (UDFToDouble(cint) / UDFToDouble(cbigint))) (type: double), (10.175 % cfloat) (type: float), (- cfloat) (type: float), (cfloat - (- cfloat)) (type: float), ((cfloat - (- cfloat)) % -6432.0) (type: float), (cdouble * UDFToDouble(csmallint)) (type: double), (- cdouble) (type: double), (- cbigint) (type: bigint), (UDFToDouble(cfloat) - (UDFToDouble(cint) / UDFToDouble(cbigint))) (type: double), (- csmallint) (type: smallint), (3569L % cbigint) (type: bigint), (359.0D - cdouble) (type: double), (- csmallint) (type: smallint)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [2, 3, 6, 10, 4, 5, 9, 1, 7, 11, 15, 17, 13, 14, 18, 20, 19, 22, 21, 23, 24, 27, 28, 25, 29]
                          selectExpressions: DoubleColDivideDoubleColumn(col 13:double, col 14:double)(children: CastLongToDouble(col 2:int) -> 13:double, CastLongToDouble(col 3:bigint) -> 14:double) -> 15:double, DecimalColModuloDecimalScalar(col 16:decimal(19,0), val 79.553)(children: CastLongToDecimal(col 3:bigint) -> 16:decimal(19,0)) -> 17:decimal(5,3), DoubleColUnaryMinus(col 18:double)(children: DoubleColDivideDoubleColumn(col 13:double, col 14:double)(children: CastLongToDouble(col 2:int) -> 13:double, CastLongToDouble(col 3:bigint) -> 14:double) -> 18:double) -> 13:double, DoubleScalarModuloDoubleColumn(val 10.175000190734863, col 4:float) -> 14:float, DoubleColUnaryMinus(col 4:float) -> 18:float, DoubleColSubtractDoubleColumn(col 4:float, col 19:float)(children: DoubleColUnaryMinus(col 4:float) -> 19:float) -> 20:float, DoubleColModuloDoubleScalar(col 21:float, val -6432.0)(children: DoubleColSubtractDoubleColumn(col 4:float, col 19:float)(children: DoubleColUnaryMinus(col 4:float) -> 19:float) -> 21:float) -> 19:float, DoubleColMultiplyDoubleColumn(col 5:double, col 21:double)(children: CastLongToDouble(col 1:smallint) -> 21:double) -> 22:double, DoubleColUnaryMinus(col 5:double) -> 21:double, LongColUnaryMinus(col 3:bigint) -> 23:bigint, DoubleColSubtractDoubleColumn(col 4:double, col 26:double)(children: col 4:float, DoubleColDivideDoubleColumn(col 24:double, col 25:double)(children: CastLongToDouble(col 2:int) -> 24:double, CastLongToDouble(col 3:bigint) -> 25:double) -> 26:double) -> 24:double, LongColUnaryMinus(col 1:smallint) -> 27:smallint, LongScalarModuloLongColumn(val 3569, col 3:bigint) -> 28:bigint, DoubleScalarSubtractDoubleColumn(val 359.0, col 5:double) -> 25:double, LongColUnaryMinus(col 1:smallint) -> 29:smallint
                      Statistics: Num rows: 8194 Data size: 3349228 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: bigint), _col2 (type: string), _col3 (type: boolean), _col4 (type: float), _col5 (type: double), _col6 (type: timestamp), _col7 (type: smallint), _col8 (type: string), _col9 (type: boolean), _col10 (type: double), _col11 (type: decimal(5,3)), _col12 (type: double), _col13 (type: float), _col14 (type: float), _col15 (type: float), _col16 (type: float), _col17 (type: double), _col18 (type: double), _col19 (type: bigint), _col20 (type: double), _col21 (type: smallint), _col22 (type: bigint), _col23 (type: double), _col24 (type: smallint)
                        sort order: +++++++++++++++++++++++++
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkObjectHashOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 8194 Data size: 3349228 Basic stats: COMPLETE Column stats: COMPLETE
                        TopN Hash Memory Usage: 0.1
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), KEY.reducesinkkey1 (type: bigint), KEY.reducesinkkey2 (type: string), KEY.reducesinkkey3 (type: boolean), KEY.reducesinkkey4 (type: float), KEY.reducesinkkey5 (type: double), KEY.reducesinkkey6 (type: timestamp), KEY.reducesinkkey7 (type: smallint), KEY.reducesinkkey8 (type: string), KEY.reducesinkkey9 (type: boolean), KEY.reducesinkkey10 (type: double), KEY.reducesinkkey11 (type: decimal(5,3)), KEY.reducesinkkey12 (type: double), KEY.reducesinkkey13 (type: float), KEY.reducesinkkey14 (type: float), KEY.reducesinkkey15 (type: float), KEY.reducesinkkey16 (type: float), KEY.reducesinkkey17 (type: double), KEY.reducesinkkey18 (type: double), KEY.reducesinkkey19 (type: bigint), KEY.reducesinkkey20 (type: double), KEY.reducesinkkey21 (type: smallint), KEY.reducesinkkey22 (type: bigint), KEY.reducesinkkey23 (type: double), KEY.reducesinkkey21 (type: smallint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 21]
                Statistics: Num rows: 8194 Data size: 3349228 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 25
                  Limit Vectorization:
                      className: VectorLimitOperator
                      native: true
                  Statistics: Num rows: 25 Data size: 10520 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 25 Data size: 10520 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 25
      Processor Tree:
        ListSink

PREHOOK: query: SELECT cint,
       cbigint,
       cstring1,
       cboolean1,
       cfloat,
       cdouble,
       ctimestamp2,
       csmallint,
       cstring2,
       cboolean2,
       (cint / cbigint) as c1,
       (cbigint % 79.553) as c2,
       (-((cint / cbigint))) as c3,
       (10.175 % cfloat) as c4,
       (-(cfloat)) as c5,
       (cfloat - (-(cfloat))) as c6,
       ((cfloat - (-(cfloat))) % -6432) as c7,
       (cdouble * csmallint) as c8,
       (-(cdouble)) as c9,
       (-(cbigint)) as c10,
       (cfloat - (cint / cbigint)) as c11,
       (-(csmallint)) as c12,
       (3569 % cbigint) as c13,
       (359 - cdouble) as c14,
       (-(csmallint)) as c15
FROM   alltypesorc
WHERE  (((197 > ctinyint)
         AND (cint = cbigint))
        OR (cbigint = 359)
        OR (cboolean1 < 0)
           OR ((cstring1 LIKE '%ss')
               AND (cfloat <= ctinyint)))
ORDER BY cint, cbigint, cstring1, cboolean1, cfloat, cdouble, ctimestamp2, csmallint, cstring2, cboolean2, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15
LIMIT 25
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: SELECT cint,
       cbigint,
       cstring1,
       cboolean1,
       cfloat,
       cdouble,
       ctimestamp2,
       csmallint,
       cstring2,
       cboolean2,
       (cint / cbigint) as c1,
       (cbigint % 79.553) as c2,
       (-((cint / cbigint))) as c3,
       (10.175 % cfloat) as c4,
       (-(cfloat)) as c5,
       (cfloat - (-(cfloat))) as c6,
       ((cfloat - (-(cfloat))) % -6432) as c7,
       (cdouble * csmallint) as c8,
       (-(cdouble)) as c9,
       (-(cbigint)) as c10,
       (cfloat - (cint / cbigint)) as c11,
       (-(csmallint)) as c12,
       (3569 % cbigint) as c13,
       (359 - cdouble) as c14,
       (-(csmallint)) as c15
FROM   alltypesorc
WHERE  (((197 > ctinyint)
         AND (cint = cbigint))
        OR (cbigint = 359)
        OR (cboolean1 < 0)
           OR ((cstring1 LIKE '%ss')
               AND (cfloat <= ctinyint)))
ORDER BY cint, cbigint, cstring1, cboolean1, cfloat, cdouble, ctimestamp2, csmallint, cstring2, cboolean2, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15
LIMIT 25
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
-462839731	988888	ss	false	-51.0	NULL	NULL	NULL	Lml5J2QBU77	false	-468.04059812638036	44.210	468.04059812638036	10.175	51.0	-102.0	-102.0	NULL	NULL	-988888	417.04059812638036	NULL	3569	NULL	NULL
-635141101	-89010	ss	false	-51.0	NULL	NULL	NULL	rVWAj4N1MCg8Scyp7wj2C	true	7135.6151106617235	-69.746	-7135.6151106617235	10.175	51.0	-102.0	-102.0	NULL	NULL	89010	-7186.6151106617235	NULL	3569	NULL	NULL
WARNING: Comparing a bigint and a double may result in a loss of precision.
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT   cint,
         cstring1,
         cboolean2,
         ctimestamp2,
         cdouble,
         cfloat,
         cbigint,
         csmallint,
         cboolean1,
         (cint + csmallint) as c1,
         (cbigint - ctinyint) as c2,
         (-(cbigint)) as c3,
         (-(cfloat)) as c4,
         ((cbigint - ctinyint) + cbigint) as c5,
         (cdouble / cdouble) as c6,
         (-(cdouble)) as c7,
         ((cint + csmallint) * (-(cbigint))) as c8,
         ((-(cdouble)) + cbigint) as c9,
         (-1.389 / ctinyint) as c10,
         (cbigint % cdouble) as c11,
         (-(csmallint)) as c12,
         (csmallint + (cint + csmallint)) as c13
FROM     alltypesorc
WHERE    (((csmallint > -26.28)
           AND (cstring2 LIKE 'ss'))
          OR ((cdouble <= cbigint)
              AND ((cstring1 >= 'ss')
                   AND (cint != cdouble)))
          OR (ctinyint = -89010)
             OR ((cbigint <= cfloat)
                 AND (-26.28 <= csmallint)))
ORDER BY cboolean1, cstring1, ctimestamp2, cfloat, cbigint, cstring1, cdouble, cint, csmallint, cdouble, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13
LIMIT 75
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT   cint,
         cstring1,
         cboolean2,
         ctimestamp2,
         cdouble,
         cfloat,
         cbigint,
         csmallint,
         cboolean1,
         (cint + csmallint) as c1,
         (cbigint - ctinyint) as c2,
         (-(cbigint)) as c3,
         (-(cfloat)) as c4,
         ((cbigint - ctinyint) + cbigint) as c5,
         (cdouble / cdouble) as c6,
         (-(cdouble)) as c7,
         ((cint + csmallint) * (-(cbigint))) as c8,
         ((-(cdouble)) + cbigint) as c9,
         (-1.389 / ctinyint) as c10,
         (cbigint % cdouble) as c11,
         (-(csmallint)) as c12,
         (csmallint + (cint + csmallint)) as c13
FROM     alltypesorc
WHERE    (((csmallint > -26.28)
           AND (cstring2 LIKE 'ss'))
          OR ((cdouble <= cbigint)
              AND ((cstring1 >= 'ss')
                   AND (cint != cdouble)))
          OR (ctinyint = -89010)
             OR ((cbigint <= cfloat)
                 AND (-26.28 <= csmallint)))
ORDER BY cboolean1, cstring1, ctimestamp2, cfloat, cbigint, cstring1, cdouble, cint, csmallint, cdouble, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13
LIMIT 75
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  filterExpr: (((CAST( csmallint AS decimal(7,2)) > -26.28) and (cstring2 like 'ss')) or ((cdouble <= UDFToDouble(cbigint)) and (cstring1 >= 'ss') and (UDFToDouble(cint) <> cdouble)) or (UDFToInteger(ctinyint) = -89010) or ((UDFToFloat(cbigint) <= cfloat) and (CAST( csmallint AS decimal(7,2)) >= -26.28))) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 2601650 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprOrExpr(children: FilterExprAndExpr(children: FilterDecimalColGreaterDecimalScalar(col 13:decimal(7,2), val -26.28)(children: CastLongToDecimal(col 1:smallint) -> 13:decimal(7,2)), FilterStringColLikeStringScalar(col 7:string, pattern ss)), FilterExprAndExpr(children: FilterDoubleColLessEqualDoubleColumn(col 5:double, col 14:double)(children: CastLongToDouble(col 3:bigint) -> 14:double), FilterStringGroupColGreaterEqualStringScalar(col 6:string, val ss), FilterDoubleColNotEqualDoubleColumn(col 14:double, col 5:double)(children: CastLongToDouble(col 2:int) -> 14:double)), FilterLongColEqualLongScalar(col 0:int, val -89010)(children: col 0:tinyint), FilterExprAndExpr(children: FilterDoubleColLessEqualDoubleColumn(col 14:float, col 4:float)(children: CastLongToFloatViaLongToDouble(col 3:bigint) -> 14:float), FilterDecimalColGreaterEqualDecimalScalar(col 13:decimal(7,2), val -26.28)(children: CastLongToDecimal(col 1:smallint) -> 13:decimal(7,2))))
                    predicate: (((CAST( csmallint AS decimal(7,2)) > -26.28) and (cstring2 like 'ss')) or ((UDFToFloat(cbigint) <= cfloat) and (CAST( csmallint AS decimal(7,2)) >= -26.28)) or ((cdouble <= UDFToDouble(cbigint)) and (cstring1 >= 'ss') and (UDFToDouble(cint) <> cdouble)) or (UDFToInteger(ctinyint) = -89010)) (type: boolean)
                    Statistics: Num rows: 10922 Data size: 2312410 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: cint (type: int), cstring1 (type: string), cboolean2 (type: boolean), ctimestamp2 (type: timestamp), cdouble (type: double), cfloat (type: float), cbigint (type: bigint), csmallint (type: smallint), cboolean1 (type: boolean), (cint + UDFToInteger(csmallint)) (type: int), (cbigint - UDFToLong(ctinyint)) (type: bigint), (- cbigint) (type: bigint), (- cfloat) (type: float), ((cbigint - UDFToLong(ctinyint)) + cbigint) (type: bigint), (cdouble / cdouble) (type: double), (- cdouble) (type: double), (UDFToLong((cint + UDFToInteger(csmallint))) * (- cbigint)) (type: bigint), ((- cdouble) + UDFToDouble(cbigint)) (type: double), (-1.389 / CAST( ctinyint AS decimal(3,0))) (type: decimal(8,7)), (UDFToDouble(cbigint) % cdouble) (type: double), (- csmallint) (type: smallint), (UDFToInteger(csmallint) + (cint + UDFToInteger(csmallint))) (type: int)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [2, 6, 11, 9, 5, 4, 3, 1, 10, 15, 16, 17, 14, 19, 20, 21, 23, 26, 28, 25, 18, 29]
                          selectExpressions: LongColAddLongColumn(col 2:int, col 1:int)(children: col 1:smallint) -> 15:int, LongColSubtractLongColumn(col 3:bigint, col 0:bigint)(children: col 0:tinyint) -> 16:bigint, LongColUnaryMinus(col 3:bigint) -> 17:bigint, DoubleColUnaryMinus(col 4:float) -> 14:float, LongColAddLongColumn(col 18:bigint, col 3:bigint)(children: LongColSubtractLongColumn(col 3:bigint, col 0:bigint)(children: col 0:tinyint) -> 18:bigint) -> 19:bigint, DoubleColDivideDoubleColumn(col 5:double, col 5:double) -> 20:double, DoubleColUnaryMinus(col 5:double) -> 21:double, LongColMultiplyLongColumn(col 18:bigint, col 22:bigint)(children: LongColAddLongColumn(col 2:int, col 1:int)(children: col 1:smallint) -> 18:int, LongColUnaryMinus(col 3:bigint) -> 22:bigint) -> 23:bigint, DoubleColAddDoubleColumn(col 24:double, col 25:double)(children: DoubleColUnaryMinus(col 5:double) -> 24:double, CastLongToDouble(col 3:bigint) -> 25:double) -> 26:double, DecimalScalarDivideDecimalColumn(val -1.389, col 27:decimal(3,0))(children: CastLongToDecimal(col 0:tinyint) -> 27:decimal(3,0)) -> 28:decimal(8,7), DoubleColModuloDoubleColumn(col 24:double, col 5:double)(children: CastLongToDouble(col 3:bigint) -> 24:double) -> 25:double, LongColUnaryMinus(col 1:smallint) -> 18:smallint, LongColAddLongColumn(col 1:int, col 22:int)(children: col 1:smallint, LongColAddLongColumn(col 2:int, col 1:int)(children: col 1:smallint) -> 22:int) -> 29:int
                      Statistics: Num rows: 10922 Data size: 3594034 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col8 (type: boolean), _col1 (type: string), _col3 (type: timestamp), _col5 (type: float), _col6 (type: bigint), _col4 (type: double), _col0 (type: int), _col7 (type: smallint), _col9 (type: int), _col10 (type: bigint), _col11 (type: bigint), _col12 (type: float), _col13 (type: bigint), _col14 (type: double), _col15 (type: double), _col16 (type: bigint), _col17 (type: double), _col18 (type: decimal(8,7)), _col19 (type: double), _col20 (type: smallint), _col21 (type: int)
                        sort order: +++++++++++++++++++++
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkObjectHashOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 10922 Data size: 3594034 Basic stats: COMPLETE Column stats: COMPLETE
                        TopN Hash Memory Usage: 0.1
                        value expressions: _col2 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey6 (type: int), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: boolean), KEY.reducesinkkey2 (type: timestamp), KEY.reducesinkkey5 (type: double), KEY.reducesinkkey3 (type: float), KEY.reducesinkkey4 (type: bigint), KEY.reducesinkkey7 (type: smallint), KEY.reducesinkkey0 (type: boolean), KEY.reducesinkkey8 (type: int), KEY.reducesinkkey9 (type: bigint), KEY.reducesinkkey10 (type: bigint), KEY.reducesinkkey11 (type: float), KEY.reducesinkkey12 (type: bigint), KEY.reducesinkkey13 (type: double), KEY.reducesinkkey14 (type: double), KEY.reducesinkkey15 (type: bigint), KEY.reducesinkkey16 (type: double), KEY.reducesinkkey17 (type: decimal(8,7)), KEY.reducesinkkey18 (type: double), KEY.reducesinkkey19 (type: smallint), KEY.reducesinkkey20 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [6, 1, 21, 2, 5, 3, 4, 7, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
                Statistics: Num rows: 10922 Data size: 3594034 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 75
                  Limit Vectorization:
                      className: VectorLimitOperator
                      native: true
                  Statistics: Num rows: 75 Data size: 24810 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 75 Data size: 24810 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 75
      Processor Tree:
        ListSink

WARNING: Comparing a bigint and a double may result in a loss of precision.
PREHOOK: query: SELECT   cint,
         cstring1,
         cboolean2,
         ctimestamp2,
         cdouble,
         cfloat,
         cbigint,
         csmallint,
         cboolean1,
         (cint + csmallint) as c1,
         (cbigint - ctinyint) as c2,
         (-(cbigint)) as c3,
         (-(cfloat)) as c4,
         ((cbigint - ctinyint) + cbigint) as c5,
         (cdouble / cdouble) as c6,
         (-(cdouble)) as c7,
         ((cint + csmallint) * (-(cbigint))) as c8,
         ((-(cdouble)) + cbigint) as c9,
         (-1.389 / ctinyint) as c10,
         (cbigint % cdouble) as c11,
         (-(csmallint)) as c12,
         (csmallint + (cint + csmallint)) as c13
FROM     alltypesorc
WHERE    (((csmallint > -26.28)
           AND (cstring2 LIKE 'ss'))
          OR ((cdouble <= cbigint)
              AND ((cstring1 >= 'ss')
                   AND (cint != cdouble)))
          OR (ctinyint = -89010)
             OR ((cbigint <= cfloat)
                 AND (-26.28 <= csmallint)))
ORDER BY cboolean1, cstring1, ctimestamp2, cfloat, cbigint, cstring1, cdouble, cint, csmallint, cdouble, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13
LIMIT 75
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: SELECT   cint,
         cstring1,
         cboolean2,
         ctimestamp2,
         cdouble,
         cfloat,
         cbigint,
         csmallint,
         cboolean1,
         (cint + csmallint) as c1,
         (cbigint - ctinyint) as c2,
         (-(cbigint)) as c3,
         (-(cfloat)) as c4,
         ((cbigint - ctinyint) + cbigint) as c5,
         (cdouble / cdouble) as c6,
         (-(cdouble)) as c7,
         ((cint + csmallint) * (-(cbigint))) as c8,
         ((-(cdouble)) + cbigint) as c9,
         (-1.389 / ctinyint) as c10,
         (cbigint % cdouble) as c11,
         (-(csmallint)) as c12,
         (csmallint + (cint + csmallint)) as c13
FROM     alltypesorc
WHERE    (((csmallint > -26.28)
           AND (cstring2 LIKE 'ss'))
          OR ((cdouble <= cbigint)
              AND ((cstring1 >= 'ss')
                   AND (cint != cdouble)))
          OR (ctinyint = -89010)
             OR ((cbigint <= cfloat)
                 AND (-26.28 <= csmallint)))
ORDER BY cboolean1, cstring1, ctimestamp2, cfloat, cbigint, cstring1, cdouble, cint, csmallint, cdouble, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13
LIMIT 75
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
-104148943	tEO4vj3G	true	1969-12-31 15:59:44.53	2248.0	NULL	1864027286	2248	false	-104146695	NULL	-1864027286	NULL	NULL	1.0	-2248.0	194132281226719770	1.864025038E9	NULL	1422.0	-2248	-104144447
-110450673	uv5m1sFX10	true	1969-12-31 16:00:16.376	-8148.0	NULL	1864027286	-8148	true	-110458821	NULL	-1864027286	NULL	NULL	1.0	8148.0	205898256323389806	1.864035434E9	NULL	1178.0	8148	-110466969
-128417177	ygkC2e2sUm2036Sd1U8kCG62	true	1969-12-31 16:00:01.936	-8871.0	NULL	1864027286	-8871	false	-128426048	NULL	-1864027286	NULL	NULL	1.0	8871.0	239389657705145728	1.864036157E9	NULL	8411.0	8871	-128434919
-129248849	w3OO7InLN4ic3M0h8xpvuBMn	true	1969-12-31 15:59:48.413	3255.0	NULL	1864027286	3255	true	-129245594	NULL	-1864027286	NULL	NULL	1.0	-3255.0	240917313811277884	1.864024031E9	NULL	2711.0	-3255	-129242339
-140351494	xh0Qhj80MAcHEMVKx	true	1969-12-31 16:00:14.98	-11115.0	NULL	1864027286	-11115	true	-140362609	NULL	-1864027286	NULL	NULL	1.0	11115.0	261639733110149174	1.864038401E9	NULL	8441.0	11115	-140373724
-198739996	uxnt0fsrBtPD807	true	1969-12-31 16:00:11.528	-14709.0	NULL	1864027286	-14709	false	-198754705	NULL	-1864027286	NULL	NULL	1.0	14709.0	370484193340880630	1.864041995E9	NULL	14552.0	14709	-198769414
-203191502	wK0N1nX22KSjcTVhDYq	true	1969-12-31 15:59:49.907	-6663.0	NULL	1864027286	-6663	true	-203198165	NULL	-1864027286	NULL	NULL	1.0	6663.0	378766924025130190	1.864033949E9	NULL	6395.0	6663	-203204828
-25028803	x8n40D35c65l	true	1969-12-31 15:59:43.775	-4002.0	NULL	1864027286	-4002	true	-25032805	NULL	-1864027286	NULL	NULL	1.0	4002.0	46661831565117230	1.864031288E9	NULL	3740.0	4002	-25036807
-315135285	y4jD1v2Go	true	1969-12-31 15:59:43.97	-4683.0	NULL	1864027286	-4683	false	-315139968	NULL	-1864027286	NULL	NULL	1.0	4683.0	587429499261166848	1.864031969E9	NULL	1283.0	4683	-315144651
-360475292	uq2hp	true	1969-12-31 16:00:10.933	-1007.0	NULL	1864027286	-1007	false	-360476299	NULL	-1864027286	NULL	NULL	1.0	1007.0	671937657292294514	1.864028293E9	NULL	803.0	1007	-360477306
-362733967	tUi8QYP4S53YPcw	true	1969-12-31 16:00:00.003	-7959.0	NULL	1864027286	-7959	true	-362741926	NULL	-1864027286	NULL	NULL	1.0	7959.0	676160847840192836	1.864035245E9	NULL	5609.0	7959	-362749885
-367195514	t5805L0xlU0YM	true	1969-12-31 15:59:43.799	-13339.0	NULL	1864027286	-13339	false	-367208853	NULL	-1864027286	NULL	NULL	1.0	13339.0	684487321652762958	1.864040625E9	NULL	8748.0	13339	-367222192
-370283300	x0w77gi6iqtTQ1	true	1969-12-31 15:59:44.652	1850.0	NULL	1864027286	1850	true	-370281450	NULL	-1864027286	NULL	NULL	1.0	-1850.0	690214726299644700	1.864025436E9	NULL	586.0	-1850	-370279600
-372506148	utfrK57P2tp0	true	1969-12-31 16:00:05.326	-12525.0	NULL	1864027286	-12525	false	-372518673	NULL	-1864027286	NULL	NULL	1.0	12525.0	694384971016511478	1.864039811E9	NULL	6686.0	12525	-372531198
-380733719	t7s5did	true	NULL	-2120.0	NULL	1864027286	-2120	false	-380735839	NULL	-1864027286	NULL	NULL	1.0	2120.0	709701992654102954	1.864029406E9	NULL	326.0	2120	-380737959
-412772386	uO4aN4J0dKv3717r8fPG	true	1969-12-31 16:00:07.824	-11809.0	NULL	1864027286	-11809	true	-412784195	NULL	-1864027286	NULL	NULL	1.0	11809.0	769441002709544770	1.864039095E9	NULL	254.0	11809	-412796004
-452599200	v4L3dR650oy4O8MPhjc	true	1969-12-31 15:59:46.988	8757.0	NULL	1864027286	8757	false	-452590443	NULL	-1864027286	NULL	NULL	1.0	-8757.0	843640935134827698	1.864018529E9	NULL	3509.0	-8757	-452581686
-459571311	taArL704d542R82qw8	true	1969-12-31 16:00:00.738	-13901.0	NULL	1864027286	-13901	false	-459585212	NULL	-1864027286	NULL	NULL	1.0	13901.0	856679375410094632	1.864041187E9	NULL	493.0	13901	-459599113
-487903609	tINcSR1MT3f2P4	true	1969-12-31 16:00:12.099	-9147.0	NULL	1864027286	-9147	false	-487912756	NULL	-1864027286	NULL	NULL	1.0	9147.0	909482690371460216	1.864036433E9	NULL	5891.0	9147	-487921903
-518918140	ugq0uAy0qXj2D0fX	true	1969-12-31 16:00:12.479	5245.0	NULL	1864027286	5245	false	-518912895	NULL	-1864027286	NULL	NULL	1.0	-5245.0	967267795337252970	1.864022041E9	NULL	1491.0	-5245	-518907650
-520054643	wc4Ae163B5VxG2L	true	1969-12-31 16:00:06.693	301.0	NULL	1864027286	301	true	-520054342	NULL	-1864027286	NULL	NULL	1.0	-301.0	969395483690775812	1.864026985E9	NULL	205.0	-301	-520054041
-520765672	vQalqQ	true	1969-12-31 15:59:44.48	-3969.0	NULL	1864027286	-3969	false	-520769641	NULL	-1864027286	NULL	NULL	1.0	3969.0	970728820544424326	1.864031255E9	NULL	2312.0	3969	-520773610
-532611088	wLWrtVNx188P7uXPV	true	1969-12-31 16:00:04.012	-1428.0	NULL	1864027286	-1428	false	-532612516	NULL	-1864027286	NULL	NULL	1.0	1428.0	992804262689111576	1.864028714E9	NULL	338.0	1428	-532613944
-553779656	weQ0d24K116Y0	true	1969-12-31 16:00:12.009	11147.0	NULL	1864027286	11147	true	-553768509	NULL	-1864027286	NULL	NULL	1.0	-11147.0	1032239610903536574	1.864016139E9	NULL	3652.0	-11147	-553757362
-601825532	v4gQqo0bxX256o7EEN42lSoU	true	1969-12-31 15:59:58.417	11021.0	NULL	1864027286	11021	false	-601814511	NULL	-1864027286	NULL	NULL	1.0	-11021.0	1121798669614747146	1.864016265E9	NULL	1472.0	-11021	-601803490
-64947310	vvictFVSOgi	true	1969-12-31 15:59:48.172	6612.0	NULL	1864027286	6612	false	-64940698	NULL	-1864027286	NULL	NULL	1.0	-6612.0	121051233043885628	1.864020674E9	NULL	5306.0	-6612	-64934086
-719899789	umNykRkKiih6Cx6K42	true	1969-12-31 15:59:55.878	-10134.0	NULL	1864027286	-10134	true	-719909923	NULL	-1864027286	NULL	NULL	1.0	10134.0	1341931739934158978	1.86403742E9	NULL	9728.0	10134	-719920057
-758062600	vA0bEQqO50LlKcj7AAR56P63	true	1969-12-31 16:00:16.169	7111.0	NULL	1864027286	7111	false	-758055489	NULL	-1864027286	NULL	NULL	1.0	-7111.0	1413036115798072854	1.864020175E9	NULL	6634.0	-7111	-758048378
-770958258	uXu1mj3tWs36cGpu4p3aHq	true	1969-12-31 15:59:56.944	8059.0	NULL	1864027286	8059	false	-770950199	NULL	-1864027286	NULL	NULL	1.0	-8059.0	1437072207083129914	1.864019227E9	NULL	4763.0	-8059	-770942140
-778541551	t66fkUkSNP78t2856Lcn	true	1969-12-31 16:00:03.35	15678.0	NULL	1864027286	15678	true	-778525873	NULL	-1864027286	NULL	NULL	1.0	-15678.0	1451193470128970678	1.864011608E9	NULL	7154.0	-15678	-778510195
-804390280	uNJPm	true	1969-12-31 16:00:12.321	-10737.0	NULL	1864027286	-10737	true	-804401017	NULL	-1864027286	NULL	NULL	1.0	10737.0	1499425444574149862	1.864038023E9	NULL	8927.0	10737	-804411754
-804959350	v2wRf43gpDUt1lfieq	true	1969-12-31 16:00:08.659	-8072.0	NULL	1864027286	-8072	true	-804967422	NULL	-1864027286	NULL	NULL	1.0	8072.0	1500481238949076692	1.864035358E9	NULL	686.0	8072	-804975494
-87388872	veoqj217BlDBBVkN0ei3c	true	1969-12-31 16:00:03.492	10039.0	NULL	1864027286	10039	false	-87378833	NULL	-1864027286	NULL	NULL	1.0	-10039.0	162876528930837238	1.864017247E9	NULL	5844.0	-10039	-87368794
-894394703	tFtQ26aDMi1tJ026luPcu	true	1969-12-31 15:59:56.928	-3178.0	NULL	1864027286	-3178	true	-894397881	NULL	-1864027286	NULL	NULL	1.0	3178.0	1667182054724580966	1.864030464E9	NULL	3166.0	3178	-894401059
-933664265	ue8IUf0GlY18RT325P2tu	true	1969-12-31 16:00:02.456	13750.0	NULL	1864027286	13750	false	-933650515	NULL	-1864027286	NULL	NULL	1.0	-13750.0	1740350035547952290	1.864013536E9	NULL	8536.0	-13750	-933636765
-947255611	vgKx505VdPsHO	true	1969-12-31 15:59:46.062	13661.0	NULL	1864027286	13661	true	-947241950	NULL	-1864027286	NULL	NULL	1.0	-13661.0	1765684841243847700	1.864013625E9	NULL	11158.0	-13661	-947228289
1030560824	tmS75um6Mvyb6N1oiKP7	true	1969-12-31 15:59:53.233	-11073.0	NULL	1864027286	-11073	false	1030549751	NULL	-1864027286	NULL	NULL	1.0	11073.0	-1920972855444505786	1.864038359E9	NULL	9539.0	11073	1030538678
108023602	veIw1kh7	true	1969-12-31 16:00:14.188	9239.0	NULL	1864027286	9239	true	108032841	NULL	-1864027286	NULL	NULL	1.0	-9239.0	-201376163408099526	1.864018047E9	NULL	3602.0	-9239	108042080
136715714	y2Q3YW	true	1969-12-31 15:59:50.737	11813.0	NULL	1864027286	11813	false	136727527	NULL	-1864027286	NULL	NULL	1.0	-11813.0	-254863841075301722	1.864015473E9	NULL	6764.0	-11813	136739340
194353234	vtad71tYi1fs1e0tcJg0	true	1969-12-31 15:59:55.372	2960.0	NULL	1864027286	2960	true	194356194	NULL	-1864027286	NULL	NULL	1.0	-2960.0	-362285248819109484	1.864024326E9	NULL	2806.0	-2960	194359154
200690208	wfT8d53abPxBj0L	true	1969-12-31 16:00:15.522	-12052.0	NULL	1864027286	-12052	true	200678156	NULL	-1864027286	NULL	NULL	1.0	12052.0	-374069558488164616	1.864039338E9	NULL	4706.0	12052	200666104
2101183	x7By66525	true	1969-12-31 16:00:05.831	-8915.0	NULL	1864027286	-8915	false	2092268	NULL	-1864027286	NULL	NULL	1.0	8915.0	-3900044641624648	1.864036201E9	NULL	7766.0	8915	2083353
223484391	tca24E6L	true	1969-12-31 16:00:02.505	-12721.0	NULL	1864027286	-12721	false	223471670	NULL	-1864027286	NULL	NULL	1.0	12721.0	-416557290527987620	1.864040007E9	NULL	6435.0	12721	223458949
236934374	wiBqE2A1x8T8gcT4	true	1969-12-31 16:00:11.324	-15101.0	NULL	1864027286	-15101	false	236919273	NULL	-1864027286	NULL	NULL	1.0	15101.0	-441623989451283078	1.864042387E9	NULL	5149.0	15101	236904172
245429195	vXc7m82uAg2g24	true	1969-12-31 15:59:57.185	-16001.0	NULL	1864027286	-16001	false	245413194	NULL	-1864027286	NULL	NULL	1.0	16001.0	-457456889960411484	1.864043287E9	NULL	6792.0	16001	245397193
247204221	wblxBWSlwWlX7E	true	1969-12-31 15:59:54.186	4502.0	NULL	1864027286	4502	true	247208723	NULL	-1864027286	NULL	NULL	1.0	-4502.0	-460803805009215778	1.864022784E9	NULL	1198.0	-4502	247213225
252479879	tdUWi	true	1969-12-31 16:00:01.806	-877.0	NULL	1864027286	-877	false	252479002	NULL	-1864027286	NULL	NULL	1.0	877.0	-470627748870048572	1.864028163E9	NULL	620.0	877	252478125
304132102	vxAjxUq0k	true	1969-12-31 16:00:03.466	-12962.0	NULL	1864027286	-12962	true	304119140	NULL	-1864027286	NULL	NULL	1.0	12962.0	-566886375154854040	1.864040248E9	NULL	952.0	12962	304106178
308450217	t7i26BC11U1YTY8I0p	true	1969-12-31 15:59:46.402	1017.0	NULL	1864027286	1017	true	308451234	NULL	-1864027286	NULL	NULL	1.0	-1017.0	-574961516576370924	1.864026269E9	NULL	530.0	-1017	308452251
319983133	t78m7	true	1969-12-31 16:00:09.36	14512.0	NULL	1864027286	14512	true	319997645	NULL	-1864027286	NULL	NULL	1.0	-14512.0	-596484341735741470	1.864012774E9	NULL	4422.0	-14512	320012157
336043289	xow6f03825H0h8mFjVr	true	1969-12-31 15:59:51.587	-97.0	NULL	1864027286	-97	true	336043192	NULL	-1864027286	NULL	NULL	1.0	97.0	-626393679162536912	1.864027383E9	NULL	14.0	97	336043095
336056067	tJ7bf	true	1969-12-31 15:59:50.481	16124.0	NULL	1864027286	16124	false	336072191	NULL	-1864027286	NULL	NULL	1.0	-16124.0	-626447734089803626	1.864011162E9	NULL	12266.0	-16124	336088315
396908469	uGD31tQ70Py2E0T	true	1969-12-31 15:59:50.224	16084.0	NULL	1864027286	16084	false	396924553	NULL	-1864027286	NULL	NULL	1.0	-16084.0	-739878197275353158	1.864011202E9	NULL	4274.0	-16084	396940637
421764768	whw6kHIbH	true	1969-12-31 16:00:06.463	5142.0	NULL	1864027286	5142	true	421769910	NULL	-1864027286	NULL	NULL	1.0	-5142.0	-786190620653764260	1.864022144E9	NULL	866.0	-5142	421775052
426284338	u6ELlhG3	true	1969-12-31 16:00:00.64	-15070.0	NULL	1864027286	-15070	true	426269268	NULL	-1864027286	NULL	NULL	1.0	15070.0	-794577546735246648	1.864042356E9	NULL	3916.0	15070	426254198
434741484	uxI8i	true	1969-12-31 16:00:12.505	8120.0	NULL	1864027286	8120	false	434749604	NULL	-1864027286	NULL	NULL	1.0	-8120.0	-810385124433694744	1.864019166E9	NULL	86.0	-8120	434757724
460817498	v3A1iI77YBRwl3I16	true	1969-12-31 16:00:08.026	7391.0	NULL	1864027286	7391	true	460824889	NULL	-1864027286	NULL	NULL	1.0	-7391.0	-858990167163921254	1.864019895E9	NULL	2304.0	-7391	460832280
466063930	w6OUE6V3UjfE2	true	1969-12-31 15:59:56.958	14276.0	NULL	1864027286	14276	true	466078206	NULL	-1864027286	NULL	NULL	1.0	-14276.0	-868782493393928916	1.86401301E9	NULL	9966.0	-14276	466092482
526337887	t0346137k7Lk0O	true	1969-12-31 15:59:51.609	15044.0	NULL	1864027286	15044	false	526352931	NULL	-1864027286	NULL	NULL	1.0	-15044.0	-981136225450075266	1.864012242E9	NULL	466.0	-15044	526367975
54908166	wLIR3B37	true	1969-12-31 16:00:05.971	8499.0	NULL	1864027286	8499	true	54916665	NULL	-1864027286	NULL	NULL	1.0	-8499.0	-102366162016121190	1.864018787E9	NULL	1109.0	-8499	54925164
573439687	vALXyM54AgSH4e0O4IN	true	1969-12-31 16:00:10.069	-150.0	NULL	1864027286	-150	false	573439537	NULL	-1864027286	NULL	NULL	1.0	150.0	-1068906943839206582	1.864027436E9	NULL	86.0	150	573439387
573476034	x1832l1R2m3V	true	1969-12-31 15:59:49.722	-5070.0	NULL	1864027286	-5070	false	573470964	NULL	-1864027286	NULL	NULL	1.0	5070.0	-1068965524624723704	1.864032356E9	NULL	1226.0	5070	573465894
58198060	t7Sx50XeM	true	1969-12-31 16:00:07.889	7557.0	NULL	1864027286	7557	true	58205617	NULL	-1864027286	NULL	NULL	1.0	-7557.0	-108496858286465462	1.864019729E9	NULL	2552.0	-7557	58213174
605953955	x5vy367f6d81FfL8AI8XJ	true	1969-12-31 16:00:01.206	11683.0	NULL	1864027286	11683	false	605965638	NULL	-1864027286	NULL	NULL	1.0	-11683.0	-1129536483610398468	1.864015603E9	NULL	4636.0	-11683	605977321
732924624	yxN0212hM17E8J8bJj8D7b	true	1969-12-31 15:59:46.461	-6751.0	NULL	1864027286	-6751	false	732917873	NULL	-1864027286	NULL	NULL	1.0	6751.0	-1366178913669082678	1.864034037E9	NULL	1925.0	6751	732911122
741306115	y1uSBY0	true	1969-12-31 15:59:56.456	-16032.0	NULL	1864027286	-16032	false	741290083	NULL	-1864027286	NULL	NULL	1.0	16032.0	-1381784941553204738	1.864043318E9	NULL	2678.0	16032	741274051
746145173	wEe2THv60F6	true	1969-12-31 16:00:03.372	-5589.0	NULL	1864027286	-5589	true	746139584	NULL	-1864027286	NULL	NULL	1.0	5589.0	-1390824543740689024	1.864032875E9	NULL	773.0	5589	746133995
773036466	xnk564ke0a7kay3aE6IC	true	1969-12-31 16:00:12.369	-12066.0	NULL	1864027286	-12066	true	773024400	NULL	-1864027286	NULL	NULL	1.0	12066.0	-1440938574343778400	1.864039352E9	NULL	11276.0	12066	773012334
773348268	vwb48kytjp0Q2YEb	true	1969-12-31 15:59:44.909	12581.0	NULL	1864027286	12581	false	773360849	NULL	-1864027286	NULL	NULL	1.0	-12581.0	-1441565724460125814	1.864014705E9	NULL	1164.0	-12581	773373430
855072260	y7S47c5V	true	1969-12-31 16:00:08.381	-11734.0	NULL	1864027286	-11734	false	855060526	NULL	-1864027286	NULL	NULL	1.0	11734.0	-1593856151645512436	1.86403902E9	NULL	10982.0	11734	855048792
86487282	vH8AHgcWaDm	true	1969-12-31 16:00:10.869	13309.0	NULL	1864027286	13309	false	86500591	NULL	-1864027286	NULL	NULL	1.0	-13309.0	-161239461879126026	1.864013977E9	NULL	8673.0	-13309	86513900
872474570	wT50ouOe760m3AyJ7x4p83U6	true	1969-12-31 15:59:46.57	-2856.0	NULL	1864027286	-2856	true	872471714	NULL	-1864027286	NULL	NULL	1.0	2856.0	-1626311081159188204	1.864030142E9	NULL	1766.0	2856	872468858
936765787	wP0re2S74Y308jgOTc6	true	1969-12-31 15:59:50.924	-10311.0	NULL	1864027286	-10311	false	936755476	NULL	-1864027286	NULL	NULL	1.0	10311.0	-1746137767573918136	1.864037597E9	NULL	4706.0	10311	936745165
95424126	txKwQS70d20	true	1969-12-31 16:00:16.343	9766.0	NULL	1864027286	9766	false	95433892	NULL	-1864027286	NULL	NULL	1.0	-9766.0	-177891378697177112	1.86401752E9	NULL	632.0	-9766	95443658
97246854	vvK378scVFuBh8Q3HXUJsP	true	1969-12-31 16:00:01.629	-9554.0	NULL	1864027286	-9554	true	97237300	NULL	-1864027286	NULL	NULL	1.0	9554.0	-181252980416967800	1.86403684E9	NULL	3670.0	9554	97227746
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT   ctimestamp1,
         cstring2,
         cdouble,
         cfloat,
         cbigint,
         csmallint,
         (cbigint / 3569) as c1,
         (-257 - csmallint) as c2,
         (-6432 * cfloat) as c3,
         (-(cdouble)) as c4,
         (cdouble * 10.175) as c5,
         ((-6432 * cfloat) / cfloat) as c6,
         (-(cfloat)) as c7,
         (cint % csmallint) as c8,
         (-(cdouble)) as c9,
         (cdouble * (-(cdouble))) as c10
FROM     alltypesorc
WHERE    (((-1.389 >= cint)
           AND ((csmallint < ctinyint)
                AND (-6432 > csmallint)))
          OR ((cdouble >= cfloat)
              AND (cstring2 <= 'a'))
             OR ((cstring1 LIKE 'ss%')
                 AND (10.175 > cbigint)))
ORDER BY csmallint, cstring2, cdouble, cfloat, cbigint, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10
LIMIT 45
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT   ctimestamp1,
         cstring2,
         cdouble,
         cfloat,
         cbigint,
         csmallint,
         (cbigint / 3569) as c1,
         (-257 - csmallint) as c2,
         (-6432 * cfloat) as c3,
         (-(cdouble)) as c4,
         (cdouble * 10.175) as c5,
         ((-6432 * cfloat) / cfloat) as c6,
         (-(cfloat)) as c7,
         (cint % csmallint) as c8,
         (-(cdouble)) as c9,
         (cdouble * (-(cdouble))) as c10
FROM     alltypesorc
WHERE    (((-1.389 >= cint)
           AND ((csmallint < ctinyint)
                AND (-6432 > csmallint)))
          OR ((cdouble >= cfloat)
              AND (cstring2 <= 'a'))
             OR ((cstring1 LIKE 'ss%')
                 AND (10.175 > cbigint)))
ORDER BY csmallint, cstring2, cdouble, cfloat, cbigint, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10
LIMIT 45
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  filterExpr: (((CAST( cint AS decimal(13,3)) <= -1.389) and (csmallint < UDFToShort(ctinyint)) and (UDFToInteger(csmallint) < -6432)) or ((cdouble >= UDFToDouble(cfloat)) and (cstring2 <= 'a')) or ((cstring1 like 'ss%') and (CAST( cbigint AS decimal(22,3)) < 10.175))) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 2528254 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprOrExpr(children: FilterExprAndExpr(children: FilterDecimalColLessEqualDecimalScalar(col 13:decimal(13,3), val -1.389)(children: CastLongToDecimal(col 2:int) -> 13:decimal(13,3)), FilterLongColLessLongColumn(col 1:smallint, col 0:smallint)(children: col 0:tinyint), FilterLongColLessLongScalar(col 1:int, val -6432)(children: col 1:smallint)), FilterExprAndExpr(children: FilterDoubleColGreaterEqualDoubleColumn(col 5:double, col 4:double)(children: col 4:float), FilterStringGroupColLessEqualStringScalar(col 7:string, val a)), FilterExprAndExpr(children: FilterStringColLikeStringScalar(col 6:string, pattern ss%), FilterDecimalColLessDecimalScalar(col 14:decimal(22,3), val 10.175)(children: CastLongToDecimal(col 3:bigint) -> 14:decimal(22,3))))
                    predicate: (((CAST( cint AS decimal(13,3)) <= -1.389) and (csmallint < UDFToShort(ctinyint)) and (UDFToInteger(csmallint) < -6432)) or ((cdouble >= UDFToDouble(cfloat)) and (cstring2 <= 'a')) or ((cstring1 like 'ss%') and (CAST( cbigint AS decimal(22,3)) < 10.175))) (type: boolean)
                    Statistics: Num rows: 3868 Data size: 795962 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: ctimestamp1 (type: timestamp), cstring2 (type: string), cdouble (type: double), cfloat (type: float), cbigint (type: bigint), csmallint (type: smallint), (UDFToDouble(cbigint) / 3569.0D) (type: double), (-257 - UDFToInteger(csmallint)) (type: int), (-6432.0 * cfloat) (type: float), (- cdouble) (type: double), (cdouble * 10.175D) (type: double), (UDFToDouble((-6432.0 * cfloat)) / UDFToDouble(cfloat)) (type: double), (- cfloat) (type: float), (cint % UDFToInteger(csmallint)) (type: int), (- cdouble) (type: double), (cdouble * (- cdouble)) (type: double)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [8, 7, 5, 4, 3, 1, 16, 17, 15, 18, 19, 21, 20, 22, 23, 25]
                          selectExpressions: DoubleColDivideDoubleScalar(col 15:double, val 3569.0)(children: CastLongToDouble(col 3:bigint) -> 15:double) -> 16:double, LongScalarSubtractLongColumn(val -257, col 1:int)(children: col 1:smallint) -> 17:int, DoubleScalarMultiplyDoubleColumn(val -6432.0, col 4:float) -> 15:float, DoubleColUnaryMinus(col 5:double) -> 18:double, DoubleColMultiplyDoubleScalar(col 5:double, val 10.175) -> 19:double, DoubleColDivideDoubleColumn(col 20:double, col 4:double)(children: DoubleScalarMultiplyDoubleColumn(val -6432.0, col 4:float) -> 20:float, col 4:float) -> 21:double, DoubleColUnaryMinus(col 4:float) -> 20:float, LongColModuloLongColumn(col 2:int, col 1:int)(children: col 1:smallint) -> 22:int, DoubleColUnaryMinus(col 5:double) -> 23:double, DoubleColMultiplyDoubleColumn(col 5:double, col 24:double)(children: DoubleColUnaryMinus(col 5:double) -> 24:double) -> 25:double
                      Statistics: Num rows: 3868 Data size: 748844 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col5 (type: smallint), _col1 (type: string), _col2 (type: double), _col3 (type: float), _col4 (type: bigint), _col6 (type: double), _col7 (type: int), _col8 (type: float), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: float), _col13 (type: int), _col14 (type: double), _col15 (type: double)
                        sort order: +++++++++++++++
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkObjectHashOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 3868 Data size: 748844 Basic stats: COMPLETE Column stats: COMPLETE
                        TopN Hash Memory Usage: 0.1
                        value expressions: _col0 (type: timestamp)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: timestamp), KEY.reducesinkkey1 (type: string), KEY.reducesinkkey2 (type: double), KEY.reducesinkkey3 (type: float), KEY.reducesinkkey4 (type: bigint), KEY.reducesinkkey0 (type: smallint), KEY.reducesinkkey5 (type: double), KEY.reducesinkkey6 (type: int), KEY.reducesinkkey7 (type: float), KEY.reducesinkkey8 (type: double), KEY.reducesinkkey9 (type: double), KEY.reducesinkkey10 (type: double), KEY.reducesinkkey11 (type: float), KEY.reducesinkkey12 (type: int), KEY.reducesinkkey8 (type: double), KEY.reducesinkkey14 (type: double)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [15, 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 12, 8, 14]
                Statistics: Num rows: 3868 Data size: 748844 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 45
                  Limit Vectorization:
                      className: VectorLimitOperator
                      native: true
                  Statistics: Num rows: 45 Data size: 8880 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 45 Data size: 8880 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 45
      Processor Tree:
        ListSink

PREHOOK: query: SELECT   ctimestamp1,
         cstring2,
         cdouble,
         cfloat,
         cbigint,
         csmallint,
         (cbigint / 3569) as c1,
         (-257 - csmallint) as c2,
         (-6432 * cfloat) as c3,
         (-(cdouble)) as c4,
         (cdouble * 10.175) as c5,
         ((-6432 * cfloat) / cfloat) as c6,
         (-(cfloat)) as c7,
         (cint % csmallint) as c8,
         (-(cdouble)) as c9,
         (cdouble * (-(cdouble))) as c10
FROM     alltypesorc
WHERE    (((-1.389 >= cint)
           AND ((csmallint < ctinyint)
                AND (-6432 > csmallint)))
          OR ((cdouble >= cfloat)
              AND (cstring2 <= 'a'))
             OR ((cstring1 LIKE 'ss%')
                 AND (10.175 > cbigint)))
ORDER BY csmallint, cstring2, cdouble, cfloat, cbigint, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10
LIMIT 45
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: SELECT   ctimestamp1,
         cstring2,
         cdouble,
         cfloat,
         cbigint,
         csmallint,
         (cbigint / 3569) as c1,
         (-257 - csmallint) as c2,
         (-6432 * cfloat) as c3,
         (-(cdouble)) as c4,
         (cdouble * 10.175) as c5,
         ((-6432 * cfloat) / cfloat) as c6,
         (-(cfloat)) as c7,
         (cint % csmallint) as c8,
         (-(cdouble)) as c9,
         (cdouble * (-(cdouble))) as c10
FROM     alltypesorc
WHERE    (((-1.389 >= cint)
           AND ((csmallint < ctinyint)
                AND (-6432 > csmallint)))
          OR ((cdouble >= cfloat)
              AND (cstring2 <= 'a'))
             OR ((cstring1 LIKE 'ss%')
                 AND (10.175 > cbigint)))
ORDER BY csmallint, cstring2, cdouble, cfloat, cbigint, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10
LIMIT 45
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
1969-12-31 15:59:44.115	0p6665Ys81o1ITrC5DSoHV	15601.0	-20.0	-258993110	15601	-72567.41664331745	-15858	128640.0	-15601.0	158740.17500000002	-6432.0	20.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:44.661	10mF5gYR5Fey1vTEHx	15601.0	25.0	-2030132877	15601	-568824.0058840011	-15858	-160800.0	-15601.0	158740.17500000002	-6432.0	-25.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:45.655	0QVeMpE1JOCOS1427vP47tk0	15601.0	-23.0	649202618	15601	181900.4253292239	-15858	147936.0	-15601.0	158740.17500000002	-6432.0	23.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:46.258	0E6V6dPe00Ort5Ia6Ha8	15601.0	-26.0	1351243372	15601	378605.5959652564	-15858	167232.0	-15601.0	158740.17500000002	-6432.0	26.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:46.33	0e8O8CeLi	15601.0	24.0	-1740312484	15601	-487619.0764920146	-15858	-154368.0	-15601.0	158740.17500000002	-6432.0	-24.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:46.351	155506i0h358vma3m1tGku	15601.0	-57.0	1328883886	15601	372340.6797422247	-15858	366624.0	-15601.0	158740.17500000002	-6432.0	57.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:46.443	0034fkcXMQI3	15601.0	-43.0	-223687300	15601	-62675.06304286915	-15858	276576.0	-15601.0	158740.17500000002	-6432.0	43.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:46.82	0bsH6qR	15601.0	-46.0	-208932264	15601	-58540.8416923508	-15858	295872.0	-15601.0	158740.17500000002	-6432.0	46.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:47.436	08wTUR832pDS4Hd8O40	15601.0	-51.0	69448698	15601	19458.86746987952	-15858	328032.0	-15601.0	158740.17500000002	-6432.0	51.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:48.552	0Ef374	15601.0	62.0	-1488190636	15601	-416976.9223872233	-15858	-398784.0	-15601.0	158740.17500000002	-6432.0	-62.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:48.71	0h046K61PUKMqHs6v4	15601.0	-30.0	1221840945	15601	342348.26141776406	-15858	192960.0	-15601.0	158740.17500000002	-6432.0	30.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:48.932	10	15601.0	16.0	NULL	15601	NULL	-15858	-102912.0	-15601.0	158740.17500000002	-6432.0	-16.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:50.575	0q1A0HR4Q8Cd6r	15601.0	29.0	-221039350	15601	-61933.132530120485	-15858	-186528.0	-15601.0	158740.17500000002	-6432.0	-29.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:51.153	0Yo1dcEr7D57no22Tiv2TXR	15601.0	-44.0	-399793337	15601	-112018.30680862987	-15858	283008.0	-15601.0	158740.17500000002	-6432.0	44.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:51.535	0JA4aw00Rkv1mSy	15601.0	55.0	-1044215393	15601	-292579.26393947884	-15858	-353760.0	-15601.0	158740.17500000002	-6432.0	-55.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:51.645	0ORX152g18fL0nI10TVqI	15601.0	10.0	-1043251982	15601	-292309.3253012048	-15858	-64320.0	-15601.0	158740.17500000002	-6432.0	-10.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:52.617	16NIx33qB1Thp5q	15601.0	-9.0	1660201497	15601	465172.7366209022	-15858	57888.0	-15601.0	158740.17500000002	-6432.0	9.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:52.778	00d5kr1wEB7evExG	15601.0	4.0	-941884962	15601	-263907.24628747546	-15858	-25728.0	-15601.0	158740.17500000002	-6432.0	-4.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:52.786	0to563s4g3qycP5T8	15601.0	-1.0	672512361	15601	188431.59456430373	-15858	6432.0	-15601.0	158740.17500000002	-6432.0	1.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:53.279	0vC4nYJsnNgXvL5	15601.0	-11.0	1778089631	15601	498203.87531521433	-15858	70752.0	-15601.0	158740.17500000002	-6432.0	11.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:53.715	0aQBRP67JY0gpi	15601.0	-44.0	-75975416	15601	-21287.59204258896	-15858	283008.0	-15601.0	158740.17500000002	-6432.0	44.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:54.253	047TAc3t6f6rU8M7Dk7Gh8	15601.0	-44.0	272368436	15601	76315.05631829644	-15858	283008.0	-15601.0	158740.17500000002	-6432.0	44.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:54.384	0uO20	15601.0	-59.0	1850076369	15601	518373.87755673856	-15858	379488.0	-15601.0	158740.17500000002	-6432.0	59.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:54.524	0ltFl7	15601.0	52.0	1551262646	15601	434649.1022695433	-15858	-334464.0	-15601.0	158740.17500000002	-6432.0	-52.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:56.481	0IJJNV0BH	15601.0	10.0	-1230115822	15601	-344666.80358643876	-15858	-64320.0	-15601.0	158740.17500000002	-6432.0	-10.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:57.729	020gtq4CLjybO3F40kpyXi	15601.0	30.0	-1986754040	15601	-556669.6665732699	-15858	-192960.0	-15601.0	158740.17500000002	-6432.0	-30.0	NULL	-15601.0	-2.43391201E8
1969-12-31 15:59:58.704	041Ph15F	15601.0	-55.0	-1338667765	15601	-375082.02998038667	-15858	353760.0	-15601.0	158740.17500000002	-6432.0	55.0	NULL	-15601.0	-2.43391201E8
1969-12-31 16:00:02.401	0q4ykcW1A0SyL68L2FH45a	15601.0	30.0	2033485401	15601	569763.3513589241	-15858	-192960.0	-15601.0	158740.17500000002	-6432.0	-30.0	NULL	-15601.0	-2.43391201E8
1969-12-31 16:00:03.888	0KoLN8L6Iih8ej2sW7JF	15601.0	-23.0	-2104361963	15601	-589622.2927991034	-15858	147936.0	-15601.0	158740.17500000002	-6432.0	23.0	NULL	-15601.0	-2.43391201E8
1969-12-31 16:00:04.063	04XP4DrTCblC7885	15601.0	79.553	-1452617198	15601	-407009.58195572987	-15858	-511684.9	-15601.0	158740.17500000002	-6432.0	-79.553	NULL	-15601.0	-2.43391201E8
1969-12-31 16:00:05.007	0nur4r8MV673GcJp3h765I	15601.0	35.0	2123136080	15601	594882.6225833567	-15858	-225120.0	-15601.0	158740.17500000002	-6432.0	-35.0	NULL	-15601.0	-2.43391201E8
1969-12-31 16:00:05.334	0u7Jba8i21vWm	15601.0	22.0	-1875861804	15601	-525598.7122443261	-15858	-141504.0	-15601.0	158740.17500000002	-6432.0	-22.0	NULL	-15601.0	-2.43391201E8
1969-12-31 16:00:05.83	06Tj8f5xNhpaiE71AWqJ7b5	15601.0	-49.0	226841234	15601	63558.76548052676	-15858	315168.0	-15601.0	158740.17500000002	-6432.0	49.0	NULL	-15601.0	-2.43391201E8
1969-12-31 16:00:05.997	12AEw	15601.0	-64.0	1421812187	15601	398378.30961053516	-15858	411648.0	-15601.0	158740.17500000002	-6432.0	64.0	NULL	-15601.0	-2.43391201E8
1969-12-31 16:00:07.499	14MDiWrX	15601.0	-33.0	42147119	15601	11809.223592042588	-15858	212256.0	-15601.0	158740.17500000002	-6432.0	33.0	NULL	-15601.0	-2.43391201E8
1969-12-31 16:00:08.488	16jmamsEtKc51n	15601.0	1.0	-832606494	15601	-233288.45446903896	-15858	-6432.0	-15601.0	158740.17500000002	-6432.0	-1.0	NULL	-15601.0	-2.43391201E8
1969-12-31 16:00:09.123	064GHv0UW8	15601.0	-14.0	1007181336	15601	282202.67189688986	-15858	90048.0	-15601.0	158740.17500000002	-6432.0	14.0	NULL	-15601.0	-2.43391201E8
1969-12-31 16:00:11.928	0UugmY0R5hI	15601.0	-32.0	1701987317	15601	476880.7276548053	-15858	205824.0	-15601.0	158740.17500000002	-6432.0	32.0	NULL	-15601.0	-2.43391201E8
1969-12-31 16:00:12.853	12gbSP4px465TdXmV5F2apmC	15601.0	28.0	-1556827241	15601	-436208.2490893808	-15858	-180096.0	-15601.0	158740.17500000002	-6432.0	-28.0	NULL	-15601.0	-2.43391201E8
1969-12-31 16:00:14.175	0Q7LP3644p	15601.0	-50.0	716349726	15601	200714.40907817316	-15858	321600.0	-15601.0	158740.17500000002	-6432.0	50.0	NULL	-15601.0	-2.43391201E8
1969-12-31 16:00:15.522	1618frAK6kL	15601.0	-44.0	1296727292	15601	363330.70664051553	-15858	283008.0	-15601.0	158740.17500000002	-6432.0	44.0	NULL	-15601.0	-2.43391201E8
1969-12-31 16:00:15.671	1434C61RVhlDmptMem1X	15601.0	-4.0	913861995	15601	256055.47632390025	-15858	25728.0	-15601.0	158740.17500000002	-6432.0	4.0	NULL	-15601.0	-2.43391201E8
NULL	4hA4KQj2vD3fI6gX82220d	12329.0	NULL	-1887561756	12329	-528876.9279910339	-12586	NULL	-12329.0	125447.57500000001	NULL	NULL	-3104	-12329.0	-1.52004241E8
NULL	4hA4KQj2vD3fI6gX82220d	477.0	NULL	-1887561756	477	-528876.9279910339	-734	NULL	-477.0	4853.475	NULL	NULL	-326	-477.0	-227529.0
NULL	xH7445Rals48VOulSyR5F	10221.0	NULL	-1645852809	10221	-461152.37013168953	-10478	NULL	-10221.0	103998.675	NULL	NULL	5022	-10221.0	-1.04468841E8
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT   csmallint,
         (csmallint % -75) as c1,
         STDDEV_SAMP(csmallint) as c2,
         (-1.389 / csmallint) as c3,
         SUM(cbigint) as c4,
         ((csmallint % -75) / SUM(cbigint)) as c5,
         (-((csmallint % -75))) as c6,
         VAR_POP(ctinyint) as c7,
         (-((-((csmallint % -75))))) as c8,
         COUNT(*) as c9,
         (COUNT(*) - -89010) as c10
FROM     alltypesorc
WHERE    (((csmallint >= -257))
          AND ((-6432 = csmallint)
               OR ((cint >= cdouble)
                   AND (ctinyint <= cint))))
GROUP BY csmallint
ORDER BY csmallint, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT   csmallint,
         (csmallint % -75) as c1,
         STDDEV_SAMP(csmallint) as c2,
         (-1.389 / csmallint) as c3,
         SUM(cbigint) as c4,
         ((csmallint % -75) / SUM(cbigint)) as c5,
         (-((csmallint % -75))) as c6,
         VAR_POP(ctinyint) as c7,
         (-((-((csmallint % -75))))) as c8,
         COUNT(*) as c9,
         (COUNT(*) - -89010) as c10
FROM     alltypesorc
WHERE    (((csmallint >= -257))
          AND ((-6432 = csmallint)
               OR ((cint >= cdouble)
                   AND (ctinyint <= cint))))
GROUP BY csmallint
ORDER BY csmallint, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  filterExpr: ((UDFToInteger(csmallint) >= -257) and ((UDFToInteger(csmallint) = -6432) or ((UDFToDouble(cint) >= cdouble) and (UDFToInteger(ctinyint) <= cint)))) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 256884 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprAndExpr(children: FilterLongColGreaterEqualLongScalar(col 1:int, val -257)(children: col 1:smallint), FilterExprOrExpr(children: FilterLongColEqualLongScalar(col 1:int, val -6432)(children: col 1:smallint), FilterExprAndExpr(children: FilterDoubleColGreaterEqualDoubleColumn(col 13:double, col 5:double)(children: CastLongToDouble(col 2:int) -> 13:double), FilterLongColLessEqualLongColumn(col 0:int, col 2:int)(children: col 0:tinyint))))
                    predicate: (((UDFToInteger(csmallint) = -6432) or ((UDFToDouble(cint) >= cdouble) and (UDFToInteger(ctinyint) <= cint))) and (UDFToInteger(csmallint) >= -257)) (type: boolean)
                    Statistics: Num rows: 2503 Data size: 52344 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: csmallint (type: smallint), cbigint (type: bigint), ctinyint (type: tinyint), UDFToDouble(csmallint) (type: double), (UDFToDouble(csmallint) * UDFToDouble(csmallint)) (type: double), UDFToDouble(ctinyint) (type: double), (UDFToDouble(ctinyint) * UDFToDouble(ctinyint)) (type: double)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [1, 3, 0, 13, 16, 14, 18]
                          selectExpressions: CastLongToDouble(col 1:smallint) -> 13:double, DoubleColMultiplyDoubleColumn(col 14:double, col 15:double)(children: CastLongToDouble(col 1:smallint) -> 14:double, CastLongToDouble(col 1:smallint) -> 15:double) -> 16:double, CastLongToDouble(col 0:tinyint) -> 14:double, DoubleColMultiplyDoubleColumn(col 15:double, col 17:double)(children: CastLongToDouble(col 0:tinyint) -> 15:double, CastLongToDouble(col 0:tinyint) -> 17:double) -> 18:double
                      Statistics: Num rows: 2503 Data size: 52344 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: sum(_col4), sum(_col3), count(_col0), sum(_col1), sum(_col6), sum(_col5), count(_col2), count()
                        Group By Vectorization:
                            aggregators: VectorUDAFSumDouble(col 16:double) -> double, VectorUDAFSumDouble(col 13:double) -> double, VectorUDAFCount(col 1:smallint) -> bigint, VectorUDAFSumLong(col 3:bigint) -> bigint, VectorUDAFSumDouble(col 18:double) -> double, VectorUDAFSumDouble(col 14:double) -> double, VectorUDAFCount(col 0:tinyint) -> bigint, VectorUDAFCountStar(*) -> bigint
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            keyExpressions: col 1:smallint
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7]
                        keys: _col0 (type: smallint)
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                        Statistics: Num rows: 1251 Data size: 83804 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: smallint)
                          sort order: +
                          Map-reduce partition columns: _col0 (type: smallint)
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkLongOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          Statistics: Num rows: 1251 Data size: 83804 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col1 (type: double), _col2 (type: double), _col3 (type: bigint), _col4 (type: bigint), _col5 (type: double), _col6 (type: double), _col7 (type: bigint), _col8 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), sum(VALUE._col1), count(VALUE._col2), sum(VALUE._col3), sum(VALUE._col4), sum(VALUE._col5), count(VALUE._col6), count(VALUE._col7)
                Group By Vectorization:
                    aggregators: VectorUDAFSumDouble(col 1:double) -> double, VectorUDAFSumDouble(col 2:double) -> double, VectorUDAFCountMerge(col 3:bigint) -> bigint, VectorUDAFSumLong(col 4:bigint) -> bigint, VectorUDAFSumDouble(col 5:double) -> double, VectorUDAFSumDouble(col 6:double) -> double, VectorUDAFCountMerge(col 7:bigint) -> bigint, VectorUDAFCountMerge(col 8:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    keyExpressions: col 0:smallint
                    native: false
                    vectorProcessingMode: MERGE_PARTIAL
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7]
                keys: KEY._col0 (type: smallint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                Statistics: Num rows: 1251 Data size: 83804 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: smallint), (UDFToInteger(_col0) % -75) (type: int), power(((_col1 - ((_col2 * _col2) / _col3)) / CASE WHEN ((_col3 = 1L)) THEN (null) ELSE ((_col3 - 1)) END), 0.5) (type: double), (-1.389 / CAST( _col0 AS decimal(5,0))) (type: decimal(10,9)), _col4 (type: bigint), (UDFToDouble((UDFToInteger(_col0) % -75)) / UDFToDouble(_col4)) (type: double), (- (UDFToInteger(_col0) % -75)) (type: int), ((_col5 - ((_col6 * _col6) / _col7)) / _col7) (type: double), (- (- (UDFToInteger(_col0) % -75))) (type: int), _col8 (type: bigint), (_col8 - -89010L) (type: bigint)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [0, 9, 10, 16, 4, 18, 19, 17, 14, 8, 20]
                      selectExpressions: LongColModuloLongScalar(col 0:int, val -75)(children: col 0:smallint) -> 9:int, FuncPowerDoubleToDouble(col 11:double)(children: DoubleColDivideLongColumn(col 10:double, col 14:bigint)(children: DoubleColSubtractDoubleColumn(col 1:double, col 11:double)(children: DoubleColDivideLongColumn(col 10:double, col 3:bigint)(children: DoubleColMultiplyDoubleColumn(col 2:double, col 2:double) -> 10:double) -> 11:double) -> 10:double, IfExprNullCondExpr(col 12:boolean, null, col 13:bigint)(children: LongColEqualLongScalar(col 3:bigint, val 1) -> 12:boolean, LongColSubtractLongScalar(col 3:bigint, val 1) -> 13:bigint) -> 14:bigint) -> 11:double) -> 10:double, DecimalScalarDivideDecimalColumn(val -1.389, col 15:decimal(5,0))(children: CastLongToDecimal(col 0:smallint) -> 15:decimal(5,0)) -> 16:decimal(10,9), DoubleColDivideDoubleColumn(col 11:double, col 17:double)(children: CastLongToDouble(col 14:int)(children: LongColModuloLongScalar(col 0:int, val -75)(children: col 0:smallint) -> 14:int) -> 11:double, CastLongToDouble(col 4:bigint) -> 17:double) -> 18:double, LongColUnaryMinus(col 14:int)(children: LongColModuloLongScalar(col 0:int, val -75)(children: col 0:smallint) -> 14:int) -> 19:int, DoubleColDivideLongColumn(col 11:double, col 7:bigint)(children: DoubleColSubtractDoubleColumn(col 5:double, col 17:double)(children: DoubleColDivideLongColumn(col 11:double, col 7:bigint)(children: DoubleColMultiplyDoubleColumn(col 6:double, col 6:double) -> 11:double) -> 17:double) -> 11:double) -> 17:double, LongColUnaryMinus(col 20:int)(children: LongColUnaryMinus(col 14:int)(children: LongColModuloLongScalar(col 0:int, val -75)(children: col 0:smallint) -> 14:int) -> 20:int) -> 14:int, LongColSubtractLongScalar(col 8:bigint, val -89010) -> 20:bigint
                  Statistics: Num rows: 1251 Data size: 218912 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: smallint), _col1 (type: int), _col2 (type: double), _col3 (type: decimal(10,9)), _col4 (type: bigint), _col5 (type: double), _col6 (type: int), _col7 (type: double), _col8 (type: int), _col9 (type: bigint), _col10 (type: bigint)
                    sort order: +++++++++++
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                    Statistics: Num rows: 1251 Data size: 218912 Basic stats: COMPLETE Column stats: COMPLETE
                    TopN Hash Memory Usage: 0.1
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: smallint), KEY.reducesinkkey1 (type: int), KEY.reducesinkkey2 (type: double), KEY.reducesinkkey3 (type: decimal(10,9)), KEY.reducesinkkey4 (type: bigint), KEY.reducesinkkey5 (type: double), KEY.reducesinkkey6 (type: int), KEY.reducesinkkey7 (type: double), KEY.reducesinkkey8 (type: int), KEY.reducesinkkey9 (type: bigint), KEY.reducesinkkey10 (type: bigint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                Statistics: Num rows: 1251 Data size: 218912 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 20
                  Limit Vectorization:
                      className: VectorLimitOperator
                      native: true
                  Statistics: Num rows: 20 Data size: 3504 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 20 Data size: 3504 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20
      Processor Tree:
        ListSink

PREHOOK: query: SELECT   csmallint,
         (csmallint % -75) as c1,
         STDDEV_SAMP(csmallint) as c2,
         (-1.389 / csmallint) as c3,
         SUM(cbigint) as c4,
         ((csmallint % -75) / SUM(cbigint)) as c5,
         (-((csmallint % -75))) as c6,
         VAR_POP(ctinyint) as c7,
         (-((-((csmallint % -75))))) as c8,
         COUNT(*) as c9,
         (COUNT(*) - -89010) as c10
FROM     alltypesorc
WHERE    (((csmallint >= -257))
          AND ((-6432 = csmallint)
               OR ((cint >= cdouble)
                   AND (ctinyint <= cint))))
GROUP BY csmallint
ORDER BY csmallint, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: SELECT   csmallint,
         (csmallint % -75) as c1,
         STDDEV_SAMP(csmallint) as c2,
         (-1.389 / csmallint) as c3,
         SUM(cbigint) as c4,
         ((csmallint % -75) / SUM(cbigint)) as c5,
         (-((csmallint % -75))) as c6,
         VAR_POP(ctinyint) as c7,
         (-((-((csmallint % -75))))) as c8,
         COUNT(*) as c9,
         (COUNT(*) - -89010) as c10
FROM     alltypesorc
WHERE    (((csmallint >= -257))
          AND ((-6432 = csmallint)
               OR ((cint >= cdouble)
                   AND (ctinyint <= cint))))
GROUP BY csmallint
ORDER BY csmallint, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
-100	-25	NULL	0.013890000	NULL	NULL	25	0.0	-25	1	89011
-113	-38	NULL	0.012292035	NULL	NULL	38	0.0	-38	1	89011
-118	-43	NULL	0.011771186	NULL	NULL	43	0.0	-43	1	89011
-165	-15	NULL	0.008418182	NULL	NULL	15	0.0	-15	1	89011
-168	-18	NULL	0.008267857	NULL	NULL	18	0.0	-18	1	89011
-171	-21	NULL	0.008122807	NULL	NULL	21	0.0	-21	1	89011
-180	-30	NULL	0.007716667	NULL	NULL	30	0.0	-30	1	89011
-203	-53	NULL	0.006842365	NULL	NULL	53	0.0	-53	1	89011
-217	-67	NULL	0.006400922	NULL	NULL	67	0.0	-67	1	89011
-220	-70	NULL	0.006313636	NULL	NULL	70	0.0	-70	1	89011
-257	-32	0.0	0.005404669	NULL	NULL	32	0.0	-32	2	89012
-29	-29	NULL	0.047896552	NULL	NULL	29	0.0	-29	1	89011
-42	-42	NULL	0.033071429	NULL	NULL	42	0.0	-42	1	89011
-49	-49	NULL	0.028346939	NULL	NULL	49	0.0	-49	1	89011
-62	-62	NULL	0.022403226	NULL	NULL	62	0.0	-62	1	89011
-75	0	0.0	0.018520000	NULL	NULL	0	107.55555555555554	0	3	89013
-77	-2	NULL	0.018038961	NULL	NULL	2	0.0	-2	1	89011
-84	-9	NULL	0.016535714	NULL	NULL	9	0.0	-9	1	89011
-89	-14	NULL	0.015606742	NULL	NULL	14	0.0	-14	1	89011
-95	-20	NULL	0.014621053	NULL	NULL	20	0.0	-20	1	89011
WARNING: Comparing a bigint and a double may result in a loss of precision.
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT   cdouble,
         VAR_SAMP(cdouble),
         (2563.58 * VAR_SAMP(cdouble)),
         (-(VAR_SAMP(cdouble))),
         COUNT(cfloat),
         ((2563.58 * VAR_SAMP(cdouble)) + -5638.15),
         ((-(VAR_SAMP(cdouble))) * ((2563.58 * VAR_SAMP(cdouble)) + -5638.15)),
         SUM(cfloat),
         VAR_POP(cdouble),
         (cdouble - (-(VAR_SAMP(cdouble)))),
         STDDEV_POP(cdouble),
         (cdouble + VAR_SAMP(cdouble)),
         (cdouble * 762),
         SUM(cdouble),
         (-863.257 % (cdouble * 762)),
         SUM(cdouble)
FROM     alltypesorc
WHERE    (((cdouble > 2563.58))
          AND (((cbigint >= cint)
                AND ((csmallint < cint)
                     AND (cfloat < -5638.15)))
               OR (2563.58 = ctinyint)
                  OR ((cdouble <= cbigint)
                      AND (-5638.15 > cbigint))))
GROUP BY cdouble
ORDER BY cdouble
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT   cdouble,
         VAR_SAMP(cdouble),
         (2563.58 * VAR_SAMP(cdouble)),
         (-(VAR_SAMP(cdouble))),
         COUNT(cfloat),
         ((2563.58 * VAR_SAMP(cdouble)) + -5638.15),
         ((-(VAR_SAMP(cdouble))) * ((2563.58 * VAR_SAMP(cdouble)) + -5638.15)),
         SUM(cfloat),
         VAR_POP(cdouble),
         (cdouble - (-(VAR_SAMP(cdouble)))),
         STDDEV_POP(cdouble),
         (cdouble + VAR_SAMP(cdouble)),
         (cdouble * 762),
         SUM(cdouble),
         (-863.257 % (cdouble * 762)),
         SUM(cdouble)
FROM     alltypesorc
WHERE    (((cdouble > 2563.58))
          AND (((cbigint >= cint)
                AND ((csmallint < cint)
                     AND (cfloat < -5638.15)))
               OR (2563.58 = ctinyint)
                  OR ((cdouble <= cbigint)
                      AND (-5638.15 > cbigint))))
GROUP BY cdouble
ORDER BY cdouble
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  filterExpr: ((cdouble > 2563.58D) and (((cbigint >= UDFToLong(cint)) and (UDFToInteger(csmallint) < cint) and (cfloat < -5638.15)) or (CAST( ctinyint AS decimal(6,2)) = 2563.58) or ((cdouble <= UDFToDouble(cbigint)) and (CAST( cbigint AS decimal(21,2)) < -5638.15)))) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 293580 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprAndExpr(children: FilterDoubleColGreaterDoubleScalar(col 5:double, val 2563.58), FilterExprOrExpr(children: FilterExprAndExpr(children: FilterLongColGreaterEqualLongColumn(col 3:bigint, col 2:bigint)(children: col 2:int), FilterLongColLessLongColumn(col 1:int, col 2:int)(children: col 1:smallint), FilterDoubleColLessDoubleScalar(col 4:float, val -5638.14990234375)), FilterDecimalColEqualDecimalScalar(col 13:decimal(6,2), val 2563.58)(children: CastLongToDecimal(col 0:tinyint) -> 13:decimal(6,2)), FilterExprAndExpr(children: FilterDoubleColLessEqualDoubleColumn(col 5:double, col 14:double)(children: CastLongToDouble(col 3:bigint) -> 14:double), FilterDecimalColLessDecimalScalar(col 15:decimal(21,2), val -5638.15)(children: CastLongToDecimal(col 3:bigint) -> 15:decimal(21,2)))))
                    predicate: ((((cbigint >= UDFToLong(cint)) and (UDFToInteger(csmallint) < cint) and (cfloat < -5638.15)) or (CAST( ctinyint AS decimal(6,2)) = 2563.58) or ((cdouble <= UDFToDouble(cbigint)) and (CAST( cbigint AS decimal(21,2)) < -5638.15))) and (cdouble > 2563.58D)) (type: boolean)
                    Statistics: Num rows: 2503 Data size: 59820 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: cdouble (type: double), cfloat (type: float), (cdouble * cdouble) (type: double)
                      outputColumnNames: _col0, _col1, _col2
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [5, 4, 14]
                          selectExpressions: DoubleColMultiplyDoubleColumn(col 5:double, col 5:double) -> 14:double
                      Statistics: Num rows: 2503 Data size: 59820 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: sum(_col2), sum(_col0), count(_col0), count(_col1), sum(_col1)
                        Group By Vectorization:
                            aggregators: VectorUDAFSumDouble(col 14:double) -> double, VectorUDAFSumDouble(col 5:double) -> double, VectorUDAFCount(col 5:double) -> bigint, VectorUDAFCount(col 4:float) -> bigint, VectorUDAFSumDouble(col 4:float) -> double
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            keyExpressions: col 5:double
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0, 1, 2, 3, 4]
                        keys: _col0 (type: double)
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                        Statistics: Num rows: 1251 Data size: 57520 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: double)
                          sort order: +
                          Map-reduce partition columns: _col0 (type: double)
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkMultiKeyOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          Statistics: Num rows: 1251 Data size: 57520 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col1 (type: double), _col2 (type: double), _col3 (type: bigint), _col4 (type: bigint), _col5 (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), sum(VALUE._col1), count(VALUE._col2), count(VALUE._col3), sum(VALUE._col4)
                Group By Vectorization:
                    aggregators: VectorUDAFSumDouble(col 1:double) -> double, VectorUDAFSumDouble(col 2:double) -> double, VectorUDAFCountMerge(col 3:bigint) -> bigint, VectorUDAFCountMerge(col 4:bigint) -> bigint, VectorUDAFSumDouble(col 5:double) -> double
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    keyExpressions: col 0:double
                    native: false
                    vectorProcessingMode: MERGE_PARTIAL
                    projectedOutputColumnNums: [0, 1, 2, 3, 4]
                keys: KEY._col0 (type: double)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 1251 Data size: 57520 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: double), ((_col1 - ((_col2 * _col2) / _col3)) / CASE WHEN ((_col3 = 1L)) THEN (null) ELSE ((_col3 - 1)) END) (type: double), (2563.58D * ((_col1 - ((_col2 * _col2) / _col3)) / CASE WHEN ((_col3 = 1L)) THEN (null) ELSE ((_col3 - 1)) END)) (type: double), (- ((_col1 - ((_col2 * _col2) / _col3)) / CASE WHEN ((_col3 = 1L)) THEN (null) ELSE ((_col3 - 1)) END)) (type: double), _col4 (type: bigint), ((2563.58D * ((_col1 - ((_col2 * _col2) / _col3)) / CASE WHEN ((_col3 = 1L)) THEN (null) ELSE ((_col3 - 1)) END)) + -5638.15D) (type: double), ((- ((_col1 - ((_col2 * _col2) / _col3)) / CASE WHEN ((_col3 = 1L)) THEN (null) ELSE ((_col3 - 1)) END)) * ((2563.58D * ((_col1 - ((_col2 * _col2) / _col3)) / CASE WHEN ((_col3 = 1L)) THEN (null) ELSE ((_col3 - 1)) END)) + -5638.15D)) (type: double), _col5 (type: double), ((_col1 - ((_col2 * _col2) / _col3)) / _col3) (type: double), (_col0 - (- ((_col1 - ((_col2 * _col2) / _col3)) / CASE WHEN ((_col3 = 1L)) THEN (null) ELSE ((_col3 - 1)) END))) (type: double), power(((_col1 - ((_col2 * _col2) / _col3)) / _col3), 0.5) (type: double), (_col0 + ((_col1 - ((_col2 * _col2) / _col3)) / CASE WHEN ((_col3 = 1L)) THEN (null) ELSE ((_col3 - 1)) END)) (type: double), (_col0 * 762.0D) (type: double), _col2 (type: double), (-863.257D % (_col0 * 762.0D)) (type: double)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [0, 7, 6, 11, 4, 17, 20, 5, 23, 26, 14, 29, 30, 2, 34]
                      selectExpressions: DoubleColDivideLongColumn(col 6:double, col 10:bigint)(children: DoubleColSubtractDoubleColumn(col 1:double, col 7:double)(children: DoubleColDivideLongColumn(col 6:double, col 3:bigint)(children: DoubleColMultiplyDoubleColumn(col 2:double, col 2:double) -> 6:double) -> 7:double) -> 6:double, IfExprNullCondExpr(col 8:boolean, null, col 9:bigint)(children: LongColEqualLongScalar(col 3:bigint, val 1) -> 8:boolean, LongColSubtractLongScalar(col 3:bigint, val 1) -> 9:bigint) -> 10:bigint) -> 7:double, DoubleScalarMultiplyDoubleColumn(val 2563.58, col 11:double)(children: DoubleColDivideLongColumn(col 6:double, col 13:bigint)(children: DoubleColSubtractDoubleColumn(col 1:double, col 11:double)(children: DoubleColDivideLongColumn(col 6:double, col 3:bigint)(children: DoubleColMultiplyDoubleColumn(col 2:double, col 2:double) -> 6:double) -> 11:double) -> 6:double, IfExprNullCondExpr(col 10:boolean, null, col 12:bigint)(children: LongColEqualLongScalar(col 3:bigint, val 1) -> 10:boolean, LongColSubtractLongScalar(col 3:bigint, val 1) -> 12:bigint) -> 13:bigint) -> 11:double) -> 6:double, DoubleColUnaryMinus(col 14:double)(children: DoubleColDivideLongColumn(col 11:double, col 16:bigint)(children: DoubleColSubtractDoubleColumn(col 1:double, col 14:double)(children: DoubleColDivideLongColumn(col 11:double, col 3:bigint)(children: DoubleColMultiplyDoubleColumn(col 2:double, col 2:double) -> 11:double) -> 14:double) -> 11:double, IfExprNullCondExpr(col 13:boolean, null, col 15:bigint)(children: LongColEqualLongScalar(col 3:bigint, val 1) -> 13:boolean, LongColSubtractLongScalar(col 3:bigint, val 1) -> 15:bigint) -> 16:bigint) -> 14:double) -> 11:double, DoubleColAddDoubleScalar(col 14:double, val -5638.15)(children: DoubleScalarMultiplyDoubleColumn(val 2563.58, col 17:double)(children: DoubleColDivideLongColumn(col 14:double, col 19:bigint)(children: DoubleColSubtractDoubleColumn(col 1:double, col 17:double)(children: DoubleColDivideLongColumn(col 14:double, col 3:bigint)(children: DoubleColMultiplyDoubleColumn(col 2:double, col 2:double) -> 14:double) -> 17:double) -> 14:double, IfExprNullCondExpr(col 16:boolean, null, col 18:bigint)(children: LongColEqualLongScalar(col 3:bigint, val 1) -> 16:boolean, LongColSubtractLongScalar(col 3:bigint, val 1) -> 18:bigint) -> 19:bigint) -> 17:double) -> 14:double) -> 17:double, DoubleColMultiplyDoubleColumn(col 14:double, col 23:double)(children: DoubleColUnaryMinus(col 20:double)(children: DoubleColDivideLongColumn(col 14:double, col 22:bigint)(children: DoubleColSubtractDoubleColumn(col 1:double, col 20:double)(children: DoubleColDivideLongColumn(col 14:double, col 3:bigint)(children: DoubleColMultiplyDoubleColumn(col 2:double, col 2:double) -> 14:double) -> 20:double) -> 14:double, IfExprNullCondExpr(col 19:boolean, null, col 21:bigint)(children: LongColEqualLongScalar(col 3:bigint, val 1) -> 19:boolean, LongColSubtractLongScalar(col 3:bigint, val 1) -> 21:bigint) -> 22:bigint) -> 20:double) -> 14:double, DoubleColAddDoubleScalar(col 20:double, val -5638.15)(children: DoubleScalarMultiplyDoubleColumn(val 2563.58, col 23:double)(children: DoubleColDivideLongColumn(col 20:double, col 25:bigint)(children: DoubleColSubtractDoubleColumn(col 1:double, col 23:double)(children: DoubleColDivideLongColumn(col 20:double, col 3:bigint)(children: DoubleColMultiplyDoubleColumn(col 2:double, col 2:double) -> 20:double) -> 23:double) -> 20:double, IfExprNullCondExpr(col 22:boolean, null, col 24:bigint)(children: LongColEqualLongScalar(col 3:bigint, val 1) -> 22:boolean, LongColSubtractLongScalar(col 3:bigint, val 1) -> 24:bigint) -> 25:bigint) -> 23:double) -> 20:double) -> 23:double) -> 20:double, DoubleColDivideLongColumn(col 14:double, col 3:bigint)(children: DoubleColSubtractDoubleColumn(col 1:double, col 23:double)(children: DoubleColDivideLongColumn(col 14:double, col 3:bigint)(children: DoubleColMultiplyDoubleColumn(col 2:double, col 2:double) -> 14:double) -> 23:double) -> 14:double) -> 23:double, DoubleColSubtractDoubleColumn(col 0:double, col 14:double)(children: DoubleColUnaryMinus(col 26:double)(children: DoubleColDivideLongColumn(col 14:double, col 28:bigint)(children: DoubleColSubtractDoubleColumn(col 1:double, col 26:double)(children: DoubleColDivideLongColumn(col 14:double, col 3:bigint)(children: DoubleColMultiplyDoubleColumn(col 2:double, col 2:double) -> 14:double) -> 26:double) -> 14:double, IfExprNullCondExpr(col 25:boolean, null, col 27:bigint)(children: LongColEqualLongScalar(col 3:bigint, val 1) -> 25:boolean, LongColSubtractLongScalar(col 3:bigint, val 1) -> 27:bigint) -> 28:bigint) -> 26:double) -> 14:double) -> 26:double, FuncPowerDoubleToDouble(col 29:double)(children: DoubleColDivideLongColumn(col 14:double, col 3:bigint)(children: DoubleColSubtractDoubleColumn(col 1:double, col 29:double)(children: DoubleColDivideLongColumn(col 14:double, col 3:bigint)(children: DoubleColMultiplyDoubleColumn(col 2:double, col 2:double) -> 14:double) -> 29:double) -> 14:double) -> 29:double) -> 14:double, DoubleColAddDoubleColumn(col 0:double, col 30:double)(children: DoubleColDivideLongColumn(col 29:double, col 32:bigint)(children: DoubleColSubtractDoubleColumn(col 1:double, col 30:double)(children: DoubleColDivideLongColumn(col 29:double, col 3:bigint)(children: DoubleColMultiplyDoubleColumn(col 2:double, col 2:double) -> 29:double) -> 30:double) -> 29:double, IfExprNullCondExpr(col 28:boolean, null, col 31:bigint)(children: LongColEqualLongScalar(col 3:bigint, val 1) -> 28:boolean, LongColSubtractLongScalar(col 3:bigint, val 1) -> 31:bigint) -> 32:bigint) -> 30:double) -> 29:double, DoubleColMultiplyDoubleScalar(col 0:double, val 762.0) -> 30:double, DoubleScalarModuloDoubleColumn(val -863.257, col 33:double)(children: DoubleColMultiplyDoubleScalar(col 0:double, val 762.0) -> 33:double) -> 34:double
                  Statistics: Num rows: 1251 Data size: 157600 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: double)
                    sort order: +
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                    Statistics: Num rows: 1251 Data size: 157600 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col1 (type: double), _col2 (type: double), _col3 (type: double), _col4 (type: bigint), _col5 (type: double), _col6 (type: double), _col7 (type: double), _col8 (type: double), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: double), _col13 (type: double), _col14 (type: double)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: double), VALUE._col0 (type: double), VALUE._col1 (type: double), VALUE._col2 (type: double), VALUE._col3 (type: bigint), VALUE._col4 (type: double), VALUE._col5 (type: double), VALUE._col6 (type: double), VALUE._col7 (type: double), VALUE._col8 (type: double), VALUE._col9 (type: double), VALUE._col10 (type: double), VALUE._col11 (type: double), VALUE._col12 (type: double), VALUE._col13 (type: double), VALUE._col12 (type: double)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 13]
                Statistics: Num rows: 1251 Data size: 157600 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1251 Data size: 157600 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

WARNING: Comparing a bigint and a double may result in a loss of precision.
PREHOOK: query: SELECT   cdouble,
         VAR_SAMP(cdouble),
         (2563.58 * VAR_SAMP(cdouble)),
         (-(VAR_SAMP(cdouble))),
         COUNT(cfloat),
         ((2563.58 * VAR_SAMP(cdouble)) + -5638.15),
         ((-(VAR_SAMP(cdouble))) * ((2563.58 * VAR_SAMP(cdouble)) + -5638.15)),
         SUM(cfloat),
         VAR_POP(cdouble),
         (cdouble - (-(VAR_SAMP(cdouble)))),
         STDDEV_POP(cdouble),
         (cdouble + VAR_SAMP(cdouble)),
         (cdouble * 762),
         SUM(cdouble),
         (-863.257 % (cdouble * 762)),
         SUM(cdouble)
FROM     alltypesorc
WHERE    (((cdouble > 2563.58))
          AND (((cbigint >= cint)
                AND ((csmallint < cint)
                     AND (cfloat < -5638.15)))
               OR (2563.58 = ctinyint)
                  OR ((cdouble <= cbigint)
                      AND (-5638.15 > cbigint))))
GROUP BY cdouble
ORDER BY cdouble
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: SELECT   cdouble,
         VAR_SAMP(cdouble),
         (2563.58 * VAR_SAMP(cdouble)),
         (-(VAR_SAMP(cdouble))),
         COUNT(cfloat),
         ((2563.58 * VAR_SAMP(cdouble)) + -5638.15),
         ((-(VAR_SAMP(cdouble))) * ((2563.58 * VAR_SAMP(cdouble)) + -5638.15)),
         SUM(cfloat),
         VAR_POP(cdouble),
         (cdouble - (-(VAR_SAMP(cdouble)))),
         STDDEV_POP(cdouble),
         (cdouble + VAR_SAMP(cdouble)),
         (cdouble * 762),
         SUM(cdouble),
         (-863.257 % (cdouble * 762)),
         SUM(cdouble)
FROM     alltypesorc
WHERE    (((cdouble > 2563.58))
          AND (((cbigint >= cint)
                AND ((csmallint < cint)
                     AND (cfloat < -5638.15)))
               OR (2563.58 = ctinyint)
                  OR ((cdouble <= cbigint)
                      AND (-5638.15 > cbigint))))
GROUP BY cdouble
ORDER BY cdouble
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT   ctimestamp1,
         cstring1,
         STDDEV_POP(cint) as c1,
         (STDDEV_POP(cint) * 10.175) as c2,
         (-(STDDEV_POP(cint))) as c3,
         AVG(csmallint) as c4,
         (-(STDDEV_POP(cint))) as c5,
         (-26.28 - STDDEV_POP(cint)) as c6,
         COUNT(*) as c7,
         (-(COUNT(*))) as c8,
         ((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) as c9,
         MIN(ctinyint) as c10,
         (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*)))) as c11,
         (-((STDDEV_POP(cint) * 10.175))) as c12,
         VAR_SAMP(csmallint) as c13,
         (VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) as c14,
         (-((-(STDDEV_POP(cint))))) as c15,
         ((-(COUNT(*))) / STDDEV_POP(cint)) as c16,
         VAR_POP(cfloat) as c17,
         (10.175 / AVG(csmallint)) as c18,
         AVG(cint) as c19,
         VAR_SAMP(cfloat) as c20,
         ((VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) - (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) as c21,
         (-((-((STDDEV_POP(cint) * 10.175))))) as c22,
         AVG(cfloat) as c23,
         (((VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) - (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) * 10.175) as c24,
         (10.175 % (10.175 / AVG(csmallint))) as c25,
         (-(MIN(ctinyint))) as c26,
         MIN(cdouble) as c27,
         VAR_POP(csmallint) as c28,
         (-(((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))))) as c29,
         ((-(STDDEV_POP(cint))) % AVG(cfloat)) as c30,
         (-26.28 / (-(MIN(ctinyint)))) as c31,
         STDDEV_POP(ctinyint) as c32,
         SUM(cint) as c33,
         ((VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) / VAR_POP(cfloat)) as c34,
         (-((-(COUNT(*))))) as c35,
         COUNT(*) as c36,
         ((VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) % -26.28) as c37
FROM     alltypesorc
WHERE    (((ctimestamp1 != 0))
          AND ((((-257 != ctinyint)
                 AND (cboolean2 IS NOT NULL))
                AND ((cstring1 RLIKE '.*ss')
                     AND (-3 < ctimestamp1)))
               OR (ctimestamp2 = -5)
               OR ((ctimestamp1 < 0)
                   AND (cstring2 LIKE '%b%'))
                  OR (cdouble = cint)
                     OR ((cboolean1 IS NULL)
                         AND (cfloat < cint))))
GROUP BY ctimestamp1, cstring1
ORDER BY ctimestamp1, cstring1, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37
LIMIT 50
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT   ctimestamp1,
         cstring1,
         STDDEV_POP(cint) as c1,
         (STDDEV_POP(cint) * 10.175) as c2,
         (-(STDDEV_POP(cint))) as c3,
         AVG(csmallint) as c4,
         (-(STDDEV_POP(cint))) as c5,
         (-26.28 - STDDEV_POP(cint)) as c6,
         COUNT(*) as c7,
         (-(COUNT(*))) as c8,
         ((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) as c9,
         MIN(ctinyint) as c10,
         (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*)))) as c11,
         (-((STDDEV_POP(cint) * 10.175))) as c12,
         VAR_SAMP(csmallint) as c13,
         (VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) as c14,
         (-((-(STDDEV_POP(cint))))) as c15,
         ((-(COUNT(*))) / STDDEV_POP(cint)) as c16,
         VAR_POP(cfloat) as c17,
         (10.175 / AVG(csmallint)) as c18,
         AVG(cint) as c19,
         VAR_SAMP(cfloat) as c20,
         ((VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) - (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) as c21,
         (-((-((STDDEV_POP(cint) * 10.175))))) as c22,
         AVG(cfloat) as c23,
         (((VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) - (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) * 10.175) as c24,
         (10.175 % (10.175 / AVG(csmallint))) as c25,
         (-(MIN(ctinyint))) as c26,
         MIN(cdouble) as c27,
         VAR_POP(csmallint) as c28,
         (-(((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))))) as c29,
         ((-(STDDEV_POP(cint))) % AVG(cfloat)) as c30,
         (-26.28 / (-(MIN(ctinyint)))) as c31,
         STDDEV_POP(ctinyint) as c32,
         SUM(cint) as c33,
         ((VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) / VAR_POP(cfloat)) as c34,
         (-((-(COUNT(*))))) as c35,
         COUNT(*) as c36,
         ((VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) % -26.28) as c37
FROM     alltypesorc
WHERE    (((ctimestamp1 != 0))
          AND ((((-257 != ctinyint)
                 AND (cboolean2 IS NOT NULL))
                AND ((cstring1 RLIKE '.*ss')
                     AND (-3 < ctimestamp1)))
               OR (ctimestamp2 = -5)
               OR ((ctimestamp1 < 0)
                   AND (cstring2 LIKE '%b%'))
                  OR (cdouble = cint)
                     OR ((cboolean1 IS NULL)
                         AND (cfloat < cint))))
GROUP BY ctimestamp1, cstring1
ORDER BY ctimestamp1, cstring1, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37
LIMIT 50
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  filterExpr: ((UDFToDouble(ctimestamp1) <> 0.0D) and (((UDFToInteger(ctinyint) <> -257) and cboolean2 is not null and cstring1 regexp '.*ss' and (UDFToDouble(ctimestamp1) > -3.0D)) or (UDFToDouble(ctimestamp2) = -5.0D) or ((UDFToDouble(ctimestamp1) < 0.0D) and (cstring2 like '%b%')) or (cdouble = UDFToDouble(cint)) or (cboolean1 is null and (cfloat < UDFToFloat(cint))))) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 3019778 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprAndExpr(children: FilterDoubleColNotEqualDoubleScalar(col 13:double, val 0.0)(children: CastTimestampToDouble(col 8:timestamp) -> 13:double), FilterExprOrExpr(children: FilterExprAndExpr(children: FilterLongColNotEqualLongScalar(col 0:int, val -257)(children: col 0:tinyint), SelectColumnIsNotNull(col 11:boolean), FilterStringColRegExpStringScalar(col 6:string, pattern .*ss), FilterDoubleColGreaterDoubleScalar(col 13:double, val -3.0)(children: CastTimestampToDouble(col 8:timestamp) -> 13:double)), FilterDoubleColEqualDoubleScalar(col 13:double, val -5.0)(children: CastTimestampToDouble(col 9:timestamp) -> 13:double), FilterExprAndExpr(children: FilterDoubleColLessDoubleScalar(col 13:double, val 0.0)(children: CastTimestampToDouble(col 8:timestamp) -> 13:double), FilterStringColLikeStringScalar(col 7:string, pattern %b%)), FilterDoubleColEqualDoubleColumn(col 5:double, col 13:double)(children: CastLongToDouble(col 2:int) -> 13:double), FilterExprAndExpr(children: SelectColumnIsNull(col 10:boolean), FilterDoubleColLessDoubleColumn(col 4:float, col 13:float)(children: CastLongToFloatViaLongToDouble(col 2:int) -> 13:float))))
                    predicate: ((((UDFToInteger(ctinyint) <> -257) and cboolean2 is not null and cstring1 regexp '.*ss' and (UDFToDouble(ctimestamp1) > -3.0D)) or (UDFToDouble(ctimestamp2) = -5.0D) or ((UDFToDouble(ctimestamp1) < 0.0D) and (cstring2 like '%b%')) or (cdouble = UDFToDouble(cint)) or (cboolean1 is null and (cfloat < UDFToFloat(cint)))) and (UDFToDouble(ctimestamp1) <> 0.0D)) (type: boolean)
                    Statistics: Num rows: 12288 Data size: 3019778 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: ctimestamp1 (type: timestamp), cstring1 (type: string), cint (type: int), csmallint (type: smallint), ctinyint (type: tinyint), cfloat (type: float), cdouble (type: double), UDFToDouble(cint) (type: double), (UDFToDouble(cint) * UDFToDouble(cint)) (type: double), UDFToDouble(csmallint) (type: double), (UDFToDouble(csmallint) * UDFToDouble(csmallint)) (type: double), UDFToDouble(cfloat) (type: double), (UDFToDouble(cfloat) * UDFToDouble(cfloat)) (type: double), UDFToDouble(ctinyint) (type: double), (UDFToDouble(ctinyint) * UDFToDouble(ctinyint)) (type: double)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [8, 6, 2, 1, 0, 4, 5, 13, 16, 14, 18, 4, 15, 17, 21]
                          selectExpressions: CastLongToDouble(col 2:int) -> 13:double, DoubleColMultiplyDoubleColumn(col 14:double, col 15:double)(children: CastLongToDouble(col 2:int) -> 14:double, CastLongToDouble(col 2:int) -> 15:double) -> 16:double, CastLongToDouble(col 1:smallint) -> 14:double, DoubleColMultiplyDoubleColumn(col 15:double, col 17:double)(children: CastLongToDouble(col 1:smallint) -> 15:double, CastLongToDouble(col 1:smallint) -> 17:double) -> 18:double, DoubleColMultiplyDoubleColumn(col 4:double, col 4:double)(children: col 4:float, col 4:float) -> 15:double, CastLongToDouble(col 0:tinyint) -> 17:double, DoubleColMultiplyDoubleColumn(col 19:double, col 20:double)(children: CastLongToDouble(col 0:tinyint) -> 19:double, CastLongToDouble(col 0:tinyint) -> 20:double) -> 21:double
                      Statistics: Num rows: 12288 Data size: 3019778 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: sum(_col8), sum(_col7), count(_col2), sum(_col3), count(_col3), count(), min(_col4), sum(_col10), sum(_col9), sum(_col12), sum(_col11), count(_col5), sum(_col2), sum(_col5), min(_col6), sum(_col14), sum(_col13), count(_col4)
                        Group By Vectorization:
                            aggregators: VectorUDAFSumDouble(col 16:double) -> double, VectorUDAFSumDouble(col 13:double) -> double, VectorUDAFCount(col 2:int) -> bigint, VectorUDAFSumLong(col 1:smallint) -> bigint, VectorUDAFCount(col 1:smallint) -> bigint, VectorUDAFCountStar(*) -> bigint, VectorUDAFMinLong(col 0:tinyint) -> tinyint, VectorUDAFSumDouble(col 18:double) -> double, VectorUDAFSumDouble(col 14:double) -> double, VectorUDAFSumDouble(col 15:double) -> double, VectorUDAFSumDouble(col 4:double) -> double, VectorUDAFCount(col 4:float) -> bigint, VectorUDAFSumLong(col 2:int) -> bigint, VectorUDAFSumDouble(col 4:float) -> double, VectorUDAFMinDouble(col 5:double) -> double, VectorUDAFSumDouble(col 21:double) -> double, VectorUDAFSumDouble(col 17:double) -> double, VectorUDAFCount(col 0:tinyint) -> bigint
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            keyExpressions: col 8:timestamp, col 6:string
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
                        keys: _col0 (type: timestamp), _col1 (type: string)
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19
                        Statistics: Num rows: 6144 Data size: 1537192 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: timestamp), _col1 (type: string)
                          sort order: ++
                          Map-reduce partition columns: _col0 (type: timestamp), _col1 (type: string)
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkMultiKeyOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          Statistics: Num rows: 6144 Data size: 1537192 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col2 (type: double), _col3 (type: double), _col4 (type: bigint), _col5 (type: bigint), _col6 (type: bigint), _col7 (type: bigint), _col8 (type: tinyint), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: double), _col13 (type: bigint), _col14 (type: bigint), _col15 (type: double), _col16 (type: double), _col17 (type: double), _col18 (type: double), _col19 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), sum(VALUE._col1), count(VALUE._col2), sum(VALUE._col3), count(VALUE._col4), count(VALUE._col5), min(VALUE._col6), sum(VALUE._col7), sum(VALUE._col8), sum(VALUE._col9), sum(VALUE._col10), count(VALUE._col11), sum(VALUE._col12), sum(VALUE._col13), min(VALUE._col14), sum(VALUE._col15), sum(VALUE._col16), count(VALUE._col17)
                Group By Vectorization:
                    aggregators: VectorUDAFSumDouble(col 2:double) -> double, VectorUDAFSumDouble(col 3:double) -> double, VectorUDAFCountMerge(col 4:bigint) -> bigint, VectorUDAFSumLong(col 5:bigint) -> bigint, VectorUDAFCountMerge(col 6:bigint) -> bigint, VectorUDAFCountMerge(col 7:bigint) -> bigint, VectorUDAFMinLong(col 8:tinyint) -> tinyint, VectorUDAFSumDouble(col 9:double) -> double, VectorUDAFSumDouble(col 10:double) -> double, VectorUDAFSumDouble(col 11:double) -> double, VectorUDAFSumDouble(col 12:double) -> double, VectorUDAFCountMerge(col 13:bigint) -> bigint, VectorUDAFSumLong(col 14:bigint) -> bigint, VectorUDAFSumDouble(col 15:double) -> double, VectorUDAFMinDouble(col 16:double) -> double, VectorUDAFSumDouble(col 17:double) -> double, VectorUDAFSumDouble(col 18:double) -> double, VectorUDAFCountMerge(col 19:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    keyExpressions: col 0:timestamp, col 1:string
                    native: false
                    vectorProcessingMode: MERGE_PARTIAL
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
                keys: KEY._col0 (type: timestamp), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19
                Statistics: Num rows: 3072 Data size: 768596 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: timestamp), _col1 (type: string), power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5) (type: double), (power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5) * 10.175D) (type: double), (- power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5)) (type: double), (UDFToDouble(_col5) / _col6) (type: double), (- power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5)) (type: double), (-26.28D - power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5)) (type: double), _col7 (type: bigint), (- _col7) (type: bigint), ((-26.28D - power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5)) * (- power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5))) (type: double), _col8 (type: tinyint), (((-26.28D - power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5)) * (- power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5))) * UDFToDouble((- _col7))) (type: double), (- (power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5) * 10.175D)) (type: double), ((_col9 - ((_col10 * _col10) / _col6)) / CASE WHEN ((_col6 = 1L)) THEN (null) ELSE ((_col6 - 1)) END) (type: double), (((_col9 - ((_col10 * _col10) / _col6)) / CASE WHEN ((_col6 = 1L)) THEN (null) ELSE ((_col6 - 1)) END) + (((-26.28D - power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5)) * (- power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5))) * UDFToDouble((- _col7)))) (type: double), (- (- power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5))) (type: double), (UDFToDouble((- _col7)) / power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5)) (type: double), ((_col11 - ((_col12 * _col12) / _col13)) / _col13) (type: double), (10.175D / (UDFToDouble(_col5) / _col6)) (type: double), (UDFToDouble(_col14) / _col4) (type: double), ((_col11 - ((_col12 * _col12) / _col13)) / CASE WHEN ((_col13 = 1L)) THEN (null) ELSE ((_col13 - 1)) END) (type: double), ((((_col9 - ((_col10 * _col10) / _col6)) / CASE WHEN ((_col6 = 1L)) THEN (null) ELSE ((_col6 - 1)) END) + (((-26.28D - power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5)) * (- power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5))) * UDFToDouble((- _col7)))) - (((-26.28D - power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5)) * (- power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5))) * UDFToDouble((- _col7)))) (type: double), (- (- (power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5) * 10.175D))) (type: double), (_col15 / _col13) (type: double), (((((_col9 - ((_col10 * _col10) / _col6)) / CASE WHEN ((_col6 = 1L)) THEN (null) ELSE ((_col6 - 1)) END) + (((-26.28D - power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5)) * (- power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5))) * UDFToDouble((- _col7)))) - (((-26.28D - power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5)) * (- power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5))) * UDFToDouble((- _col7)))) * 10.175D) (type: double), (10.175D % (10.175D / (UDFToDouble(_col5) / _col6))) (type: double), (- _col8) (type: tinyint), _col16 (type: double), ((_col9 - ((_col10 * _col10) / _col6)) / _col6) (type: double), (- ((-26.28D - power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5)) * (- power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5)))) (type: double), ((- power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5)) % (_col15 / _col13)) (type: double), (-26.28 / CAST( (- _col8) AS decimal(3,0))) (type: decimal(8,6)), power(((_col17 - ((_col18 * _col18) / _col19)) / _col19), 0.5) (type: double), _col14 (type: bigint), ((((_col9 - ((_col10 * _col10) / _col6)) / CASE WHEN ((_col6 = 1L)) THEN (null) ELSE ((_col6 - 1)) END) + (((-26.28D - power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5)) * (- power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5))) * UDFToDouble((- _col7)))) / ((_col11 - ((_col12 * _col12) / _col13)) / _col13)) (type: double), (- (- _col7)) (type: bigint), _col7 (type: bigint), ((((_col9 - ((_col10 * _col10) / _col6)) / CASE WHEN ((_col6 = 1L)) THEN (null) ELSE ((_col6 - 1)) END) + (((-26.28D - power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5)) * (- power(((_col2 - ((_col3 * _col3) / _col4)) / _col4), 0.5))) * UDFToDouble((- _col7)))) % -26.28D) (type: double)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30, _col31, _col32, _col33, _col34, _col35, _col36, _col37, _col38
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [0, 1, 20, 22, 23, 24, 25, 26, 7, 27, 21, 8, 30, 28, 32, 29, 35, 40, 39, 38, 42, 43, 46, 49, 41, 50, 54, 53, 16, 55, 56, 58, 61, 51, 14, 62, 67, 7, 65]
                      selectExpressions: FuncPowerDoubleToDouble(col 21:double)(children: DoubleColDivideLongColumn(col 20:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 21:double)(children: DoubleColDivideLongColumn(col 20:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 20:double) -> 21:double) -> 20:double) -> 21:double) -> 20:double, DoubleColMultiplyDoubleScalar(col 21:double, val 10.175)(children: FuncPowerDoubleToDouble(col 22:double)(children: DoubleColDivideLongColumn(col 21:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 22:double)(children: DoubleColDivideLongColumn(col 21:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 21:double) -> 22:double) -> 21:double) -> 22:double) -> 21:double) -> 22:double, DoubleColUnaryMinus(col 21:double)(children: FuncPowerDoubleToDouble(col 23:double)(children: DoubleColDivideLongColumn(col 21:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 23:double)(children: DoubleColDivideLongColumn(col 21:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 21:double) -> 23:double) -> 21:double) -> 23:double) -> 21:double) -> 23:double, DoubleColDivideLongColumn(col 21:double, col 6:bigint)(children: CastLongToDouble(col 5:bigint) -> 21:double) -> 24:double, DoubleColUnaryMinus(col 21:double)(children: FuncPowerDoubleToDouble(col 25:double)(children: DoubleColDivideLongColumn(col 21:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 25:double)(children: DoubleColDivideLongColumn(col 21:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 21:double) -> 25:double) -> 21:double) -> 25:double) -> 21:double) -> 25:double, DoubleScalarSubtractDoubleColumn(val -26.28, col 21:double)(children: FuncPowerDoubleToDouble(col 26:double)(children: DoubleColDivideLongColumn(col 21:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 26:double)(children: DoubleColDivideLongColumn(col 21:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 21:double) -> 26:double) -> 21:double) -> 26:double) -> 21:double) -> 26:double, LongColUnaryMinus(col 7:bigint) -> 27:bigint, DoubleColMultiplyDoubleColumn(col 28:double, col 29:double)(children: DoubleScalarSubtractDoubleColumn(val -26.28, col 21:double)(children: FuncPowerDoubleToDouble(col 28:double)(children: DoubleColDivideLongColumn(col 21:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 28:double)(children: DoubleColDivideLongColumn(col 21:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 21:double) -> 28:double) -> 21:double) -> 28:double) -> 21:double) -> 28:double, DoubleColUnaryMinus(col 21:double)(children: FuncPowerDoubleToDouble(col 29:double)(children: DoubleColDivideLongColumn(col 21:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 29:double)(children: DoubleColDivideLongColumn(col 21:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 21:double) -> 29:double) -> 21:double) -> 29:double) -> 21:double) -> 29:double) -> 21:double, DoubleColMultiplyDoubleColumn(col 28:double, col 29:double)(children: DoubleColMultiplyDoubleColumn(col 29:double, col 30:double)(children: DoubleScalarSubtractDoubleColumn(val -26.28, col 28:double)(children: FuncPowerDoubleToDouble(col 29:double)(children: DoubleColDivideLongColumn(col 28:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 29:double)(children: DoubleColDivideLongColumn(col 28:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 28:double) -> 29:double) -> 28:double) -> 29:double) -> 28:double) -> 29:double, DoubleColUnaryMinus(col 28:double)(children: FuncPowerDoubleToDouble(col 30:double)(children: DoubleColDivideLongColumn(col 28:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 30:double)(children: DoubleColDivideLongColumn(col 28:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 28:double) -> 30:double) -> 28:double) -> 30:double) -> 28:double) -> 30:double) -> 28:double, CastLongToDouble(col 31:bigint)(children: LongColUnaryMinus(col 7:bigint) -> 31:bigint) -> 29:double) -> 30:double, DoubleColUnaryMinus(col 29:double)(children: DoubleColMultiplyDoubleScalar(col 28:double, val 10.175)(children: FuncPowerDoubleToDouble(col 29:double)(children: DoubleColDivideLongColumn(col 28:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 29:double)(children: DoubleColDivideLongColumn(col 28:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 28:double) -> 29:double) -> 28:double) -> 29:double) -> 28:double) -> 29:double) -> 28:double, DoubleColDivideLongColumn(col 29:double, col 34:bigint)(children: DoubleColSubtractDoubleColumn(col 9:double, col 32:double)(children: DoubleColDivideLongColumn(col 29:double, col 6:bigint)(children: DoubleColMultiplyDoubleColumn(col 10:double, col 10:double) -> 29:double) -> 32:double) -> 29:double, IfExprNullCondExpr(col 31:boolean, null, col 33:bigint)(children: LongColEqualLongScalar(col 6:bigint, val 1) -> 31:boolean, LongColSubtractLongScalar(col 6:bigint, val 1) -> 33:bigint) -> 34:bigint) -> 32:double, DoubleColAddDoubleColumn(col 35:double, col 39:double)(children: DoubleColDivideLongColumn(col 29:double, col 37:bigint)(children: DoubleColSubtractDoubleColumn(col 9:double, col 35:double)(children: DoubleColDivideLongColumn(col 29:double, col 6:bigint)(children: DoubleColMultiplyDoubleColumn(col 10:double, col 10:double) -> 29:double) -> 35:double) -> 29:double, IfExprNullCondExpr(col 34:boolean, null, col 36:bigint)(children: LongColEqualLongScalar(col 6:bigint, val 1) -> 34:boolean, LongColSubtractLongScalar(col 6:bigint, val 1) -> 36:bigint) -> 37:bigint) -> 35:double, DoubleColMultiplyDoubleColumn(col 29:double, col 38:double)(children: DoubleColMultiplyDoubleColumn(col 38:double, col 39:double)(children: DoubleScalarSubtractDoubleColumn(val -26.28, col 29:double)(children: FuncPowerDoubleToDouble(col 38:double)(children: DoubleColDivideLongColumn(col 29:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 38:double)(children: DoubleColDivideLongColumn(col 29:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 29:double) -> 38:double) -> 29:double) -> 38:double) -> 29:double) -> 38:double, DoubleColUnaryMinus(col 29:double)(children: FuncPowerDoubleToDouble(col 39:double)(children: DoubleColDivideLongColumn(col 29:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 39:double)(children: DoubleColDivideLongColumn(col 29:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 29:double) -> 39:double) -> 29:double) -> 39:double) -> 29:double) -> 39:double) -> 29:double, CastLongToDouble(col 37:bigint)(children: LongColUnaryMinus(col 7:bigint) -> 37:bigint) -> 38:double) -> 39:double) -> 29:double, DoubleColUnaryMinus(col 38:double)(children: DoubleColUnaryMinus(col 35:double)(children: FuncPowerDoubleToDouble(col 38:double)(children: DoubleColDivideLongColumn(col 35:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 38:double)(children: DoubleColDivideLongColumn(col 35:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 35:double) -> 38:double) -> 35:double) -> 38:double) -> 35:double) -> 38:double) -> 35:double, DoubleColDivideDoubleColumn(col 38:double, col 39:double)(children: CastLongToDouble(col 37:bigint)(children: LongColUnaryMinus(col 7:bigint) -> 37:bigint) -> 38:double, FuncPowerDoubleToDouble(col 40:double)(children: DoubleColDivideLongColumn(col 39:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 40:double)(children: DoubleColDivideLongColumn(col 39:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 39:double) -> 40:double) -> 39:double) -> 40:double) -> 39:double) -> 40:double, DoubleColDivideLongColumn(col 38:double, col 13:bigint)(children: DoubleColSubtractDoubleColumn(col 11:double, col 39:double)(children: DoubleColDivideLongColumn(col 38:double, col 13:bigint)(children: DoubleColMultiplyDoubleColumn(col 12:double, col 12:double) -> 38:double) -> 39:double) -> 38:double) -> 39:double, DoubleScalarDivideDoubleColumn(val 10.175, col 41:double)(children: DoubleColDivideLongColumn(col 38:double, col 6:bigint)(children: CastLongToDouble(col 5:bigint) -> 38:double) -> 41:double) -> 38:double, DoubleColDivideLongColumn(col 41:double, col 4:bigint)(children: CastLongToDouble(col 14:bigint) -> 41:double) -> 42:double, DoubleColDivideLongColumn(col 41:double, col 45:bigint)(children: DoubleColSubtractDoubleColumn(col 11:double, col 43:double)(children: DoubleColDivideLongColumn(col 41:double, col 13:bigint)(children: DoubleColMultiplyDoubleColumn(col 12:double, col 12:double) -> 41:double) -> 43:double) -> 41:double, IfExprNullCondExpr(col 37:boolean, null, col 44:bigint)(children: LongColEqualLongScalar(col 13:bigint, val 1) -> 37:boolean, LongColSubtractLongScalar(col 13:bigint, val 1) -> 44:bigint) -> 45:bigint) -> 43:double, DoubleColSubtractDoubleColumn(col 41:double, col 50:double)(children: DoubleColAddDoubleColumn(col 46:double, col 50:double)(children: DoubleColDivideLongColumn(col 41:double, col 48:bigint)(children: DoubleColSubtractDoubleColumn(col 9:double, col 46:double)(children: DoubleColDivideLongColumn(col 41:double, col 6:bigint)(children: DoubleColMultiplyDoubleColumn(col 10:double, col 10:double) -> 41:double) -> 46:double) -> 41:double, IfExprNullCondExpr(col 45:boolean, null, col 47:bigint)(children: LongColEqualLongScalar(col 6:bigint, val 1) -> 45:boolean, LongColSubtractLongScalar(col 6:bigint, val 1) -> 47:bigint) -> 48:bigint) -> 46:double, DoubleColMultiplyDoubleColumn(col 41:double, col 49:double)(children: DoubleColMultiplyDoubleColumn(col 49:double, col 50:double)(children: DoubleScalarSubtractDoubleColumn(val -26.28, col 41:double)(children: FuncPowerDoubleToDouble(col 49:double)(children: DoubleColDivideLongColumn(col 41:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 49:double)(children: DoubleColDivideLongColumn(col 41:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 41:double) -> 49:double) -> 41:double) -> 49:double) -> 41:double) -> 49:double, DoubleColUnaryMinus(col 41:double)(children: FuncPowerDoubleToDouble(col 50:double)(children: DoubleColDivideLongColumn(col 41:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 50:double)(children: DoubleColDivideLongColumn(col 41:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 41:double) -> 50:double) -> 41:double) -> 50:double) -> 41:double) -> 50:double) -> 41:double, CastLongToDouble(col 48:bigint)(children: LongColUnaryMinus(col 7:bigint) -> 48:bigint) -> 49:double) -> 50:double) -> 41:double, DoubleColMultiplyDoubleColumn(col 46:double, col 49:double)(children: DoubleColMultiplyDoubleColumn(col 49:double, col 50:double)(children: DoubleScalarSubtractDoubleColumn(val -26.28, col 46:double)(children: FuncPowerDoubleToDouble(col 49:double)(children: DoubleColDivideLongColumn(col 46:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 49:double)(children: DoubleColDivideLongColumn(col 46:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 46:double) -> 49:double) -> 46:double) -> 49:double) -> 46:double) -> 49:double, DoubleColUnaryMinus(col 46:double)(children: FuncPowerDoubleToDouble(col 50:double)(children: DoubleColDivideLongColumn(col 46:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 50:double)(children: DoubleColDivideLongColumn(col 46:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 46:double) -> 50:double) -> 46:double) -> 50:double) -> 46:double) -> 50:double) -> 46:double, CastLongToDouble(col 48:bigint)(children: LongColUnaryMinus(col 7:bigint) -> 48:bigint) -> 49:double) -> 50:double) -> 46:double, DoubleColUnaryMinus(col 41:double)(children: DoubleColUnaryMinus(col 49:double)(children: DoubleColMultiplyDoubleScalar(col 41:double, val 10.175)(children: FuncPowerDoubleToDouble(col 49:double)(children: DoubleColDivideLongColumn(col 41:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 49:double)(children: DoubleColDivideLongColumn(col 41:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 41:double) -> 49:double) -> 41:double) -> 49:double) -> 41:double) -> 49:double) -> 41:double) -> 49:double, DoubleColDivideLongColumn(col 15:double, col 13:bigint) -> 41:double, DoubleColMultiplyDoubleScalar(col 51:double, val 10.175)(children: DoubleColSubtractDoubleColumn(col 50:double, col 55:double)(children: DoubleColAddDoubleColumn(col 51:double, col 55:double)(children: DoubleColDivideLongColumn(col 50:double, col 53:bigint)(children: DoubleColSubtractDoubleColumn(col 9:double, col 51:double)(children: DoubleColDivideLongColumn(col 50:double, col 6:bigint)(children: DoubleColMultiplyDoubleColumn(col 10:double, col 10:double) -> 50:double) -> 51:double) -> 50:double, IfExprNullCondExpr(col 48:boolean, null, col 52:bigint)(children: LongColEqualLongScalar(col 6:bigint, val 1) -> 48:boolean, LongColSubtractLongScalar(col 6:bigint, val 1) -> 52:bigint) -> 53:bigint) -> 51:double, DoubleColMultiplyDoubleColumn(col 50:double, col 54:double)(children: DoubleColMultiplyDoubleColumn(col 54:double, col 55:double)(children: DoubleScalarSubtractDoubleColumn(val -26.28, col 50:double)(children: FuncPowerDoubleToDouble(col 54:double)(children: DoubleColDivideLongColumn(col 50:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 54:double)(children: DoubleColDivideLongColumn(col 50:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 50:double) -> 54:double) -> 50:double) -> 54:double) -> 50:double) -> 54:double, DoubleColUnaryMinus(col 50:double)(children: FuncPowerDoubleToDouble(col 55:double)(children: DoubleColDivideLongColumn(col 50:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 55:double)(children: DoubleColDivideLongColumn(col 50:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 50:double) -> 55:double) -> 50:double) -> 55:double) -> 50:double) -> 55:double) -> 50:double, CastLongToDouble(col 53:bigint)(children: LongColUnaryMinus(col 7:bigint) -> 53:bigint) -> 54:double) -> 55:double) -> 50:double, DoubleColMultiplyDoubleColumn(col 51:double, col 54:double)(children: DoubleColMultiplyDoubleColumn(col 54:double, col 55:double)(children: DoubleScalarSubtractDoubleColumn(val -26.28, col 51:double)(children: FuncPowerDoubleToDouble(col 54:double)(children: DoubleColDivideLongColumn(col 51:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 54:double)(children: DoubleColDivideLongColumn(col 51:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 51:double) -> 54:double) -> 51:double) -> 54:double) -> 51:double) -> 54:double, DoubleColUnaryMinus(col 51:double)(children: FuncPowerDoubleToDouble(col 55:double)(children: DoubleColDivideLongColumn(col 51:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 55:double)(children: DoubleColDivideLongColumn(col 51:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 51:double) -> 55:double) -> 51:double) -> 55:double) -> 51:double) -> 55:double) -> 51:double, CastLongToDouble(col 53:bigint)(children: LongColUnaryMinus(col 7:bigint) -> 53:bigint) -> 54:double) -> 55:double) -> 51:double) -> 50:double, DoubleScalarModuloDoubleColumn(val 10.175, col 51:double)(children: DoubleScalarDivideDoubleColumn(val 10.175, col 54:double)(children: DoubleColDivideLongColumn(col 51:double, col 6:bigint)(children: CastLongToDouble(col 5:bigint) -> 51:double) -> 54:double) -> 51:double) -> 54:double, LongColUnaryMinus(col 8:tinyint) -> 53:tinyint, DoubleColDivideLongColumn(col 51:double, col 6:bigint)(children: DoubleColSubtractDoubleColumn(col 9:double, col 55:double)(children: DoubleColDivideLongColumn(col 51:double, col 6:bigint)(children: DoubleColMultiplyDoubleColumn(col 10:double, col 10:double) -> 51:double) -> 55:double) -> 51:double) -> 55:double, DoubleColUnaryMinus(col 51:double)(children: DoubleColMultiplyDoubleColumn(col 56:double, col 57:double)(children: DoubleScalarSubtractDoubleColumn(val -26.28, col 51:double)(children: FuncPowerDoubleToDouble(col 56:double)(children: DoubleColDivideLongColumn(col 51:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 56:double)(children: DoubleColDivideLongColumn(col 51:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 51:double) -> 56:double) -> 51:double) -> 56:double) -> 51:double) -> 56:double, DoubleColUnaryMinus(col 51:double)(children: FuncPowerDoubleToDouble(col 57:double)(children: DoubleColDivideLongColumn(col 51:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 57:double)(children: DoubleColDivideLongColumn(col 51:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 51:double) -> 57:double) -> 51:double) -> 57:double) -> 51:double) -> 57:double) -> 51:double) -> 56:double, DoubleColModuloDoubleColumn(col 57:double, col 51:double)(children: DoubleColUnaryMinus(col 51:double)(children: FuncPowerDoubleToDouble(col 57:double)(children: DoubleColDivideLongColumn(col 51:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 57:double)(children: DoubleColDivideLongColumn(col 51:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 51:double) -> 57:double) -> 51:double) -> 57:double) -> 51:double) -> 57:double, DoubleColDivideLongColumn(col 15:double, col 13:bigint) -> 51:double) -> 58:double, DecimalScalarDivideDecimalColumn(val -26.28, col 60:decimal(3,0))(children: CastLongToDecimal(col 59:tinyint)(children: LongColUnaryMinus(col 8:tinyint) -> 59:tinyint) -> 60:decimal(3,0)) -> 61:decimal(8,6), FuncPowerDoubleToDouble(col 57:double)(children: DoubleColDivideLongColumn(col 51:double, col 19:bigint)(children: DoubleColSubtractDoubleColumn(col 17:double, col 57:double)(children: DoubleColDivideLongColumn(col 51:double, col 19:bigint)(children: DoubleColMultiplyDoubleColumn(col 18:double, col 18:double) -> 51:double) -> 57:double) -> 51:double) -> 57:double) -> 51:double, DoubleColDivideDoubleColumn(col 57:double, col 65:double)(children: DoubleColAddDoubleColumn(col 62:double, col 66:double)(children: DoubleColDivideLongColumn(col 57:double, col 64:bigint)(children: DoubleColSubtractDoubleColumn(col 9:double, col 62:double)(children: DoubleColDivideLongColumn(col 57:double, col 6:bigint)(children: DoubleColMultiplyDoubleColumn(col 10:double, col 10:double) -> 57:double) -> 62:double) -> 57:double, IfExprNullCondExpr(col 59:boolean, null, col 63:bigint)(children: LongColEqualLongScalar(col 6:bigint, val 1) -> 59:boolean, LongColSubtractLongScalar(col 6:bigint, val 1) -> 63:bigint) -> 64:bigint) -> 62:double, DoubleColMultiplyDoubleColumn(col 57:double, col 65:double)(children: DoubleColMultiplyDoubleColumn(col 65:double, col 66:double)(children: DoubleScalarSubtractDoubleColumn(val -26.28, col 57:double)(children: FuncPowerDoubleToDouble(col 65:double)(children: DoubleColDivideLongColumn(col 57:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 65:double)(children: DoubleColDivideLongColumn(col 57:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 57:double) -> 65:double) -> 57:double) -> 65:double) -> 57:double) -> 65:double, DoubleColUnaryMinus(col 57:double)(children: FuncPowerDoubleToDouble(col 66:double)(children: DoubleColDivideLongColumn(col 57:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 66:double)(children: DoubleColDivideLongColumn(col 57:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 57:double) -> 66:double) -> 57:double) -> 66:double) -> 57:double) -> 66:double) -> 57:double, CastLongToDouble(col 64:bigint)(children: LongColUnaryMinus(col 7:bigint) -> 64:bigint) -> 65:double) -> 66:double) -> 57:double, DoubleColDivideLongColumn(col 62:double, col 13:bigint)(children: DoubleColSubtractDoubleColumn(col 11:double, col 65:double)(children: DoubleColDivideLongColumn(col 62:double, col 13:bigint)(children: DoubleColMultiplyDoubleColumn(col 12:double, col 12:double) -> 62:double) -> 65:double) -> 62:double) -> 65:double) -> 62:double, LongColUnaryMinus(col 64:bigint)(children: LongColUnaryMinus(col 7:bigint) -> 64:bigint) -> 67:bigint, DoubleColModuloDoubleScalar(col 57:double, val -26.28)(children: DoubleColAddDoubleColumn(col 65:double, col 70:double)(children: DoubleColDivideLongColumn(col 57:double, col 69:bigint)(children: DoubleColSubtractDoubleColumn(col 9:double, col 65:double)(children: DoubleColDivideLongColumn(col 57:double, col 6:bigint)(children: DoubleColMultiplyDoubleColumn(col 10:double, col 10:double) -> 57:double) -> 65:double) -> 57:double, IfExprNullCondExpr(col 64:boolean, null, col 68:bigint)(children: LongColEqualLongScalar(col 6:bigint, val 1) -> 64:boolean, LongColSubtractLongScalar(col 6:bigint, val 1) -> 68:bigint) -> 69:bigint) -> 65:double, DoubleColMultiplyDoubleColumn(col 57:double, col 66:double)(children: DoubleColMultiplyDoubleColumn(col 66:double, col 70:double)(children: DoubleScalarSubtractDoubleColumn(val -26.28, col 57:double)(children: FuncPowerDoubleToDouble(col 66:double)(children: DoubleColDivideLongColumn(col 57:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 66:double)(children: DoubleColDivideLongColumn(col 57:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 57:double) -> 66:double) -> 57:double) -> 66:double) -> 57:double) -> 66:double, DoubleColUnaryMinus(col 57:double)(children: FuncPowerDoubleToDouble(col 70:double)(children: DoubleColDivideLongColumn(col 57:double, col 4:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 70:double)(children: DoubleColDivideLongColumn(col 57:double, col 4:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 57:double) -> 70:double) -> 57:double) -> 70:double) -> 57:double) -> 70:double) -> 57:double, CastLongToDouble(col 69:bigint)(children: LongColUnaryMinus(col 7:bigint) -> 69:bigint) -> 66:double) -> 70:double) -> 57:double) -> 65:double
                  Statistics: Num rows: 3072 Data size: 1542740 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: timestamp), _col1 (type: string), _col2 (type: double), _col3 (type: double), _col4 (type: double), _col5 (type: double), _col6 (type: double), _col7 (type: double), _col8 (type: bigint), _col9 (type: bigint), _col10 (type: double), _col11 (type: tinyint), _col12 (type: double), _col13 (type: double), _col14 (type: double), _col15 (type: double), _col16 (type: double), _col17 (type: double), _col18 (type: double), _col19 (type: double), _col20 (type: double), _col21 (type: double), _col22 (type: double), _col23 (type: double), _col24 (type: double), _col25 (type: double), _col26 (type: double), _col27 (type: tinyint), _col28 (type: double), _col29 (type: double), _col30 (type: double), _col31 (type: double), _col32 (type: decimal(8,6)), _col33 (type: double), _col34 (type: bigint), _col35 (type: double), _col36 (type: bigint), _col37 (type: bigint), _col38 (type: double)
                    sort order: +++++++++++++++++++++++++++++++++++++++
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                    Statistics: Num rows: 3072 Data size: 1542740 Basic stats: COMPLETE Column stats: COMPLETE
                    TopN Hash Memory Usage: 0.1
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: timestamp), KEY.reducesinkkey1 (type: string), KEY.reducesinkkey2 (type: double), KEY.reducesinkkey3 (type: double), KEY.reducesinkkey4 (type: double), KEY.reducesinkkey5 (type: double), KEY.reducesinkkey4 (type: double), KEY.reducesinkkey7 (type: double), KEY.reducesinkkey8 (type: bigint), KEY.reducesinkkey9 (type: bigint), KEY.reducesinkkey10 (type: double), KEY.reducesinkkey11 (type: tinyint), KEY.reducesinkkey12 (type: double), KEY.reducesinkkey13 (type: double), KEY.reducesinkkey14 (type: double), KEY.reducesinkkey15 (type: double), KEY.reducesinkkey16 (type: double), KEY.reducesinkkey17 (type: double), KEY.reducesinkkey18 (type: double), KEY.reducesinkkey19 (type: double), KEY.reducesinkkey20 (type: double), KEY.reducesinkkey21 (type: double), KEY.reducesinkkey22 (type: double), KEY.reducesinkkey23 (type: double), KEY.reducesinkkey24 (type: double), KEY.reducesinkkey25 (type: double), KEY.reducesinkkey26 (type: double), KEY.reducesinkkey27 (type: tinyint), KEY.reducesinkkey28 (type: double), KEY.reducesinkkey29 (type: double), KEY.reducesinkkey30 (type: double), KEY.reducesinkkey31 (type: double), KEY.reducesinkkey32 (type: decimal(8,6)), KEY.reducesinkkey33 (type: double), KEY.reducesinkkey34 (type: bigint), KEY.reducesinkkey35 (type: double), KEY.reducesinkkey36 (type: bigint), KEY.reducesinkkey8 (type: bigint), KEY.reducesinkkey38 (type: double)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30, _col31, _col32, _col33, _col34, _col35, _col36, _col37, _col38
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 8, 38]
                Statistics: Num rows: 3072 Data size: 1542740 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 50
                  Limit Vectorization:
                      className: VectorLimitOperator
                      native: true
                  Statistics: Num rows: 50 Data size: 25172 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 50 Data size: 25172 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 50
      Processor Tree:
        ListSink

PREHOOK: query: SELECT   ctimestamp1,
         cstring1,
         STDDEV_POP(cint) as c1,
         (STDDEV_POP(cint) * 10.175) as c2,
         (-(STDDEV_POP(cint))) as c3,
         AVG(csmallint) as c4,
         (-(STDDEV_POP(cint))) as c5,
         (-26.28 - STDDEV_POP(cint)) as c6,
         COUNT(*) as c7,
         (-(COUNT(*))) as c8,
         ((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) as c9,
         MIN(ctinyint) as c10,
         (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*)))) as c11,
         (-((STDDEV_POP(cint) * 10.175))) as c12,
         VAR_SAMP(csmallint) as c13,
         (VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) as c14,
         (-((-(STDDEV_POP(cint))))) as c15,
         ((-(COUNT(*))) / STDDEV_POP(cint)) as c16,
         VAR_POP(cfloat) as c17,
         (10.175 / AVG(csmallint)) as c18,
         AVG(cint) as c19,
         VAR_SAMP(cfloat) as c20,
         ((VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) - (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) as c21,
         (-((-((STDDEV_POP(cint) * 10.175))))) as c22,
         AVG(cfloat) as c23,
         (((VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) - (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) * 10.175) as c24,
         (10.175 % (10.175 / AVG(csmallint))) as c25,
         (-(MIN(ctinyint))) as c26,
         MIN(cdouble) as c27,
         VAR_POP(csmallint) as c28,
         (-(((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))))) as c29,
         ((-(STDDEV_POP(cint))) % AVG(cfloat)) as c30,
         (-26.28 / (-(MIN(ctinyint)))) as c31,
         STDDEV_POP(ctinyint) as c32,
         SUM(cint) as c33,
         ((VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) / VAR_POP(cfloat)) as c34,
         (-((-(COUNT(*))))) as c35,
         COUNT(*) as c36,
         ((VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) % -26.28) as c37
FROM     alltypesorc
WHERE    (((ctimestamp1 != 0))
          AND ((((-257 != ctinyint)
                 AND (cboolean2 IS NOT NULL))
                AND ((cstring1 RLIKE '.*ss')
                     AND (-3 < ctimestamp1)))
               OR (ctimestamp2 = -5)
               OR ((ctimestamp1 < 0)
                   AND (cstring2 LIKE '%b%'))
                  OR (cdouble = cint)
                     OR ((cboolean1 IS NULL)
                         AND (cfloat < cint))))
GROUP BY ctimestamp1, cstring1
ORDER BY ctimestamp1, cstring1, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37
LIMIT 50
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: SELECT   ctimestamp1,
         cstring1,
         STDDEV_POP(cint) as c1,
         (STDDEV_POP(cint) * 10.175) as c2,
         (-(STDDEV_POP(cint))) as c3,
         AVG(csmallint) as c4,
         (-(STDDEV_POP(cint))) as c5,
         (-26.28 - STDDEV_POP(cint)) as c6,
         COUNT(*) as c7,
         (-(COUNT(*))) as c8,
         ((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) as c9,
         MIN(ctinyint) as c10,
         (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*)))) as c11,
         (-((STDDEV_POP(cint) * 10.175))) as c12,
         VAR_SAMP(csmallint) as c13,
         (VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) as c14,
         (-((-(STDDEV_POP(cint))))) as c15,
         ((-(COUNT(*))) / STDDEV_POP(cint)) as c16,
         VAR_POP(cfloat) as c17,
         (10.175 / AVG(csmallint)) as c18,
         AVG(cint) as c19,
         VAR_SAMP(cfloat) as c20,
         ((VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) - (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) as c21,
         (-((-((STDDEV_POP(cint) * 10.175))))) as c22,
         AVG(cfloat) as c23,
         (((VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) - (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) * 10.175) as c24,
         (10.175 % (10.175 / AVG(csmallint))) as c25,
         (-(MIN(ctinyint))) as c26,
         MIN(cdouble) as c27,
         VAR_POP(csmallint) as c28,
         (-(((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))))) as c29,
         ((-(STDDEV_POP(cint))) % AVG(cfloat)) as c30,
         (-26.28 / (-(MIN(ctinyint)))) as c31,
         STDDEV_POP(ctinyint) as c32,
         SUM(cint) as c33,
         ((VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) / VAR_POP(cfloat)) as c34,
         (-((-(COUNT(*))))) as c35,
         COUNT(*) as c36,
         ((VAR_SAMP(csmallint) + (((-26.28 - STDDEV_POP(cint)) * (-(STDDEV_POP(cint)))) * (-(COUNT(*))))) % -26.28) as c37
FROM     alltypesorc
WHERE    (((ctimestamp1 != 0))
          AND ((((-257 != ctinyint)
                 AND (cboolean2 IS NOT NULL))
                AND ((cstring1 RLIKE '.*ss')
                     AND (-3 < ctimestamp1)))
               OR (ctimestamp2 = -5)
               OR ((ctimestamp1 < 0)
                   AND (cstring2 LIKE '%b%'))
                  OR (cdouble = cint)
                     OR ((cboolean1 IS NULL)
                         AND (cfloat < cint))))
GROUP BY ctimestamp1, cstring1
ORDER BY ctimestamp1, cstring1, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37
LIMIT 50
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
1969-12-31 15:59:43.773	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	-24	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	-24.0	NULL	0.0	24	-200.0	0.0	NULL	NULL	-1.095000	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:43.783	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	-11	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	-11.0	NULL	0.0	11	-200.0	0.0	NULL	NULL	-2.389091	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:43.874	NULL	NULL	NULL	NULL	-7196.0	NULL	NULL	1	-1	NULL	-8	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.0014139799888827128	NULL	NULL	NULL	NULL	-8.0	NULL	0.001413979988882123	8	-7196.0	0.0	NULL	NULL	-3.285000	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:43.904	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	7	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	7.0	NULL	0.0	-7	-200.0	0.0	NULL	NULL	3.754286	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:43.919	NULL	NULL	NULL	NULL	15601.0	NULL	NULL	1	-1	NULL	-21	NULL	NULL	NULL	NULL	NULL	NULL	0.0	6.522017819370554E-4	NULL	NULL	NULL	NULL	-21.0	NULL	6.522017819364598E-4	21	15601.0	0.0	NULL	NULL	-1.251429	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:43.995	NULL	NULL	NULL	NULL	-7196.0	NULL	NULL	1	-1	NULL	31	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.0014139799888827128	NULL	NULL	NULL	NULL	31.0	NULL	0.001413979988882123	-31	-7196.0	0.0	NULL	NULL	0.847742	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.07	NULL	NULL	NULL	NULL	15601.0	NULL	NULL	1	-1	NULL	-9	NULL	NULL	NULL	NULL	NULL	NULL	0.0	6.522017819370554E-4	NULL	NULL	NULL	NULL	-9.0	NULL	6.522017819364598E-4	9	15601.0	0.0	NULL	NULL	-2.920000	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.081	NULL	NULL	NULL	NULL	-7196.0	NULL	NULL	1	-1	NULL	61	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.0014139799888827128	NULL	NULL	NULL	NULL	61.0	NULL	0.001413979988882123	-61	-7196.0	0.0	NULL	NULL	0.430820	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.179	NULL	NULL	NULL	NULL	15601.0	NULL	NULL	1	-1	NULL	34	NULL	NULL	NULL	NULL	NULL	NULL	0.0	6.522017819370554E-4	NULL	NULL	NULL	NULL	34.0	NULL	6.522017819364598E-4	-34	15601.0	0.0	NULL	NULL	0.772941	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.286	NULL	NULL	NULL	NULL	-7196.0	NULL	NULL	1	-1	NULL	16	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.0014139799888827128	NULL	NULL	NULL	NULL	16.0	NULL	0.001413979988882123	-16	-7196.0	0.0	NULL	NULL	1.642500	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.291	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	-32	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	-32.0	NULL	0.0	32	-200.0	0.0	NULL	NULL	-0.821250	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.394	NULL	NULL	NULL	NULL	15601.0	NULL	NULL	1	-1	NULL	31	NULL	NULL	NULL	NULL	NULL	NULL	0.0	6.522017819370554E-4	NULL	NULL	NULL	NULL	31.0	NULL	6.522017819364598E-4	-31	15601.0	0.0	NULL	NULL	0.847742	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.448	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	22	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	22.0	NULL	0.0	-22	-200.0	0.0	NULL	NULL	1.194545	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.455	NULL	NULL	NULL	NULL	-7196.0	NULL	NULL	1	-1	NULL	-25	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.0014139799888827128	NULL	NULL	NULL	NULL	-25.0	NULL	0.001413979988882123	25	-7196.0	0.0	NULL	NULL	-1.051200	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.477	NULL	NULL	NULL	NULL	15601.0	NULL	NULL	1	-1	NULL	-42	NULL	NULL	NULL	NULL	NULL	NULL	0.0	6.522017819370554E-4	NULL	NULL	NULL	NULL	-42.0	NULL	6.522017819364598E-4	42	15601.0	0.0	NULL	NULL	-0.625714	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.549	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	59	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	59.0	NULL	0.0	-59	-200.0	0.0	NULL	NULL	0.445424	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.55	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	24	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	24.0	NULL	0.0	-24	-200.0	0.0	NULL	NULL	1.095000	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.559	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	-34	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	-34.0	NULL	0.0	34	-200.0	0.0	NULL	NULL	-0.772941	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.568	NULL	NULL	NULL	NULL	15601.0	NULL	NULL	1	-1	NULL	22	NULL	NULL	NULL	NULL	NULL	NULL	0.0	6.522017819370554E-4	NULL	NULL	NULL	NULL	22.0	NULL	6.522017819364598E-4	-22	15601.0	0.0	NULL	NULL	1.194545	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.571	NULL	NULL	NULL	NULL	15601.0	NULL	NULL	1	-1	NULL	-42	NULL	NULL	NULL	NULL	NULL	NULL	0.0	6.522017819370554E-4	NULL	NULL	NULL	NULL	-42.0	NULL	6.522017819364598E-4	42	15601.0	0.0	NULL	NULL	-0.625714	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.646	NULL	NULL	NULL	NULL	-7196.0	NULL	NULL	1	-1	NULL	54	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.0014139799888827128	NULL	NULL	NULL	NULL	54.0	NULL	0.001413979988882123	-54	-7196.0	0.0	NULL	NULL	0.486667	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.708	NULL	NULL	NULL	NULL	15601.0	NULL	NULL	1	-1	NULL	-22	NULL	NULL	NULL	NULL	NULL	NULL	0.0	6.522017819370554E-4	NULL	NULL	NULL	NULL	-22.0	NULL	6.522017819364598E-4	22	15601.0	0.0	NULL	NULL	-1.194545	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.782	NULL	NULL	NULL	NULL	15601.0	NULL	NULL	1	-1	NULL	7	NULL	NULL	NULL	NULL	NULL	NULL	0.0	6.522017819370554E-4	NULL	NULL	NULL	NULL	7.0	NULL	6.522017819364598E-4	-7	15601.0	0.0	NULL	NULL	3.754286	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:44.904	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	0	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	0.0	NULL	0.0	0	-200.0	0.0	NULL	NULL	NULL	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:45.137	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	-32	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	-32.0	NULL	0.0	32	-200.0	0.0	NULL	NULL	-0.821250	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:45.153	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	42	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	42.0	NULL	0.0	-42	-200.0	0.0	NULL	NULL	0.625714	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:45.169	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	-60	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	-60.0	NULL	0.0	60	-200.0	0.0	NULL	NULL	-0.438000	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:45.198	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	47	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	47.0	NULL	0.0	-47	-200.0	0.0	NULL	NULL	0.559149	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:45.314	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	56	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	56.0	NULL	0.0	-56	-200.0	0.0	NULL	NULL	0.469286	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:45.322	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	-15	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	-15.0	NULL	0.0	15	-200.0	0.0	NULL	NULL	-1.752000	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:45.39	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	-16	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	-16.0	NULL	0.0	16	-200.0	0.0	NULL	NULL	-1.642500	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:45.427	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	-7	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	-7.0	NULL	0.0	7	-200.0	0.0	NULL	NULL	-3.754286	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:45.572	NULL	NULL	NULL	NULL	-7196.0	NULL	NULL	1	-1	NULL	32	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.0014139799888827128	NULL	NULL	NULL	NULL	32.0	NULL	0.001413979988882123	-32	-7196.0	0.0	NULL	NULL	0.821250	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:45.644	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	-52	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	-52.0	NULL	0.0	52	-200.0	0.0	NULL	NULL	-0.505385	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:45.764	NULL	NULL	NULL	NULL	-7196.0	NULL	NULL	1	-1	NULL	54	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.0014139799888827128	NULL	NULL	NULL	NULL	54.0	NULL	0.001413979988882123	-54	-7196.0	0.0	NULL	NULL	0.486667	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:45.816	NULL	NULL	NULL	NULL	15601.0	NULL	NULL	1	-1	NULL	7	NULL	NULL	NULL	NULL	NULL	NULL	0.0	6.522017819370554E-4	NULL	NULL	NULL	NULL	7.0	NULL	6.522017819364598E-4	-7	15601.0	0.0	NULL	NULL	3.754286	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:45.932	NULL	NULL	NULL	NULL	-7196.0	NULL	NULL	1	-1	NULL	-51	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.0014139799888827128	NULL	NULL	NULL	NULL	-51.0	NULL	0.001413979988882123	51	-7196.0	0.0	NULL	NULL	-0.515294	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:45.947	NULL	NULL	NULL	NULL	-7196.0	NULL	NULL	1	-1	NULL	-59	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.0014139799888827128	NULL	NULL	NULL	NULL	-59.0	NULL	0.001413979988882123	59	-7196.0	0.0	NULL	NULL	-0.445424	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:45.978	NULL	NULL	NULL	NULL	-7196.0	NULL	NULL	1	-1	NULL	-52	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.0014139799888827128	NULL	NULL	NULL	NULL	-52.0	NULL	0.001413979988882123	52	-7196.0	0.0	NULL	NULL	-0.505385	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:46.015	NULL	NULL	NULL	NULL	-7196.0	NULL	NULL	1	-1	NULL	25	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.0014139799888827128	NULL	NULL	NULL	NULL	25.0	NULL	0.001413979988882123	-25	-7196.0	0.0	NULL	NULL	1.051200	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:46.022	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	19	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	19.0	NULL	0.0	-19	-200.0	0.0	NULL	NULL	1.383158	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:46.114	NULL	NULL	NULL	NULL	15601.0	NULL	NULL	1	-1	NULL	-3	NULL	NULL	NULL	NULL	NULL	NULL	0.0	6.522017819370554E-4	NULL	NULL	NULL	NULL	-3.0	NULL	6.522017819364598E-4	3	15601.0	0.0	NULL	NULL	-8.760000	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:46.38	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	28	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	28.0	NULL	0.0	-28	-200.0	0.0	NULL	NULL	0.938571	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:46.387	NULL	NULL	NULL	NULL	-7196.0	NULL	NULL	1	-1	NULL	3	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.0014139799888827128	NULL	NULL	NULL	NULL	3.0	NULL	0.001413979988882123	-3	-7196.0	0.0	NULL	NULL	8.760000	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:46.52	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	8	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	8.0	NULL	0.0	-8	-200.0	0.0	NULL	NULL	3.285000	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:46.762	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	12	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	12.0	NULL	0.0	-12	-200.0	0.0	NULL	NULL	2.190000	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:46.775	NULL	NULL	NULL	NULL	-7196.0	NULL	NULL	1	-1	NULL	4	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.0014139799888827128	NULL	NULL	NULL	NULL	4.0	NULL	0.001413979988882123	-4	-7196.0	0.0	NULL	NULL	6.570000	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:46.82	NULL	NULL	NULL	NULL	15601.0	NULL	NULL	1	-1	NULL	-46	NULL	NULL	NULL	NULL	NULL	NULL	0.0	6.522017819370554E-4	NULL	NULL	NULL	NULL	-46.0	NULL	6.522017819364598E-4	46	15601.0	0.0	NULL	NULL	-0.571304	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:46.847	NULL	NULL	NULL	NULL	-7196.0	NULL	NULL	1	-1	NULL	-26	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.0014139799888827128	NULL	NULL	NULL	NULL	-26.0	NULL	0.001413979988882123	26	-7196.0	0.0	NULL	NULL	-1.010769	0.0	NULL	NULL	1	1	NULL
1969-12-31 15:59:46.915	NULL	NULL	NULL	NULL	-200.0	NULL	NULL	1	-1	NULL	-25	NULL	NULL	NULL	NULL	NULL	NULL	0.0	-0.050875000000000004	NULL	NULL	NULL	NULL	-25.0	NULL	0.0	25	-200.0	0.0	NULL	NULL	-1.051200	0.0	NULL	NULL	1	1	NULL
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT   cboolean1,
         MAX(cfloat),
         (-(MAX(cfloat))),
         (-26.28 / MAX(cfloat)),
         SUM(cbigint),
         (SUM(cbigint) - 10.175),
         VAR_SAMP(cint),
         (VAR_SAMP(cint) % MAX(cfloat)),
         (10.175 + (-(MAX(cfloat)))),
         AVG(cdouble),
         ((SUM(cbigint) - 10.175) + VAR_SAMP(cint)),
         MIN(cbigint),
         VAR_POP(cbigint),
         (-((10.175 + (-(MAX(cfloat)))))),
         (79.553 / VAR_POP(cbigint)),
         (VAR_SAMP(cint) % (79.553 / VAR_POP(cbigint))),
         (-((10.175 + (-(MAX(cfloat)))))),
         SUM(cint),
         STDDEV_SAMP(ctinyint),
         (-1.389 * MIN(cbigint)),
         (SUM(cint) - (-1.389 * MIN(cbigint))),
         STDDEV_POP(csmallint),
         (-((SUM(cint) - (-1.389 * MIN(cbigint))))),
         AVG(cint),
         (-(AVG(cint))),
         (AVG(cint) * SUM(cint))
FROM     alltypesorc
WHERE    (((cboolean1 IS NOT NULL))
          AND (((cdouble < csmallint)
                AND ((cboolean2 = cboolean1)
                     AND (cbigint <= -863.257)))
               OR ((cint >= -257)
                   AND ((cstring1 IS NOT NULL)
                        AND (cboolean1 >= 1)))
               OR (cstring2 RLIKE 'b')
                  OR ((csmallint >= ctinyint)
                      AND (ctimestamp2 IS NULL))))
GROUP BY cboolean1
ORDER BY cboolean1
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT   cboolean1,
         MAX(cfloat),
         (-(MAX(cfloat))),
         (-26.28 / MAX(cfloat)),
         SUM(cbigint),
         (SUM(cbigint) - 10.175),
         VAR_SAMP(cint),
         (VAR_SAMP(cint) % MAX(cfloat)),
         (10.175 + (-(MAX(cfloat)))),
         AVG(cdouble),
         ((SUM(cbigint) - 10.175) + VAR_SAMP(cint)),
         MIN(cbigint),
         VAR_POP(cbigint),
         (-((10.175 + (-(MAX(cfloat)))))),
         (79.553 / VAR_POP(cbigint)),
         (VAR_SAMP(cint) % (79.553 / VAR_POP(cbigint))),
         (-((10.175 + (-(MAX(cfloat)))))),
         SUM(cint),
         STDDEV_SAMP(ctinyint),
         (-1.389 * MIN(cbigint)),
         (SUM(cint) - (-1.389 * MIN(cbigint))),
         STDDEV_POP(csmallint),
         (-((SUM(cint) - (-1.389 * MIN(cbigint))))),
         AVG(cint),
         (-(AVG(cint))),
         (AVG(cint) * SUM(cint))
FROM     alltypesorc
WHERE    (((cboolean1 IS NOT NULL))
          AND (((cdouble < csmallint)
                AND ((cboolean2 = cboolean1)
                     AND (cbigint <= -863.257)))
               OR ((cint >= -257)
                   AND ((cstring1 IS NOT NULL)
                        AND (cboolean1 >= 1)))
               OR (cstring2 RLIKE 'b')
                  OR ((csmallint >= ctinyint)
                      AND (ctimestamp2 IS NULL))))
GROUP BY cboolean1
ORDER BY cboolean1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  filterExpr: ((((cdouble < UDFToDouble(csmallint)) and (cboolean2 = cboolean1) and (CAST( cbigint AS decimal(22,3)) <= -863.257)) or ((cint >= -257) and cstring1 is not null and (cboolean1 >= 1)) or cstring2 regexp 'b' or ((csmallint >= UDFToShort(ctinyint)) and ctimestamp2 is null)) and cboolean1 is not null) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 2601650 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprAndExpr(children: FilterExprOrExpr(children: FilterExprAndExpr(children: FilterDoubleColLessDoubleColumn(col 5:double, col 13:double)(children: CastLongToDouble(col 1:smallint) -> 13:double), FilterLongColEqualLongColumn(col 11:boolean, col 10:boolean), FilterDecimalColLessEqualDecimalScalar(col 14:decimal(22,3), val -863.257)(children: CastLongToDecimal(col 3:bigint) -> 14:decimal(22,3))), FilterExprAndExpr(children: FilterLongColGreaterEqualLongScalar(col 2:int, val -257), SelectColumnIsNotNull(col 6:string), FilterLongColGreaterEqualLongScalar(col 10:boolean, val 1)), FilterStringColRegExpStringScalar(col 7:string, pattern b), FilterExprAndExpr(children: FilterLongColGreaterEqualLongColumn(col 1:smallint, col 0:smallint)(children: col 0:tinyint), SelectColumnIsNull(col 9:timestamp))), SelectColumnIsNotNull(col 10:boolean))
                    predicate: ((((cdouble < UDFToDouble(csmallint)) and (cboolean2 = cboolean1) and (CAST( cbigint AS decimal(22,3)) <= -863.257)) or ((cint >= -257) and cstring1 is not null and (cboolean1 >= 1)) or cstring2 regexp 'b' or ((csmallint >= UDFToShort(ctinyint)) and ctimestamp2 is null)) and cboolean1 is not null) (type: boolean)
                    Statistics: Num rows: 7845 Data size: 1661020 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: cboolean1 (type: boolean), cfloat (type: float), cbigint (type: bigint), cint (type: int), cdouble (type: double), ctinyint (type: tinyint), csmallint (type: smallint), UDFToDouble(cint) (type: double), (UDFToDouble(cint) * UDFToDouble(cint)) (type: double), UDFToDouble(cbigint) (type: double), (UDFToDouble(cbigint) * UDFToDouble(cbigint)) (type: double), UDFToDouble(ctinyint) (type: double), (UDFToDouble(ctinyint) * UDFToDouble(ctinyint)) (type: double), UDFToDouble(csmallint) (type: double), (UDFToDouble(csmallint) * UDFToDouble(csmallint)) (type: double)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [10, 4, 3, 2, 5, 0, 1, 13, 17, 15, 19, 16, 21, 18, 23]
                          selectExpressions: CastLongToDouble(col 2:int) -> 13:double, DoubleColMultiplyDoubleColumn(col 15:double, col 16:double)(children: CastLongToDouble(col 2:int) -> 15:double, CastLongToDouble(col 2:int) -> 16:double) -> 17:double, CastLongToDouble(col 3:bigint) -> 15:double, DoubleColMultiplyDoubleColumn(col 16:double, col 18:double)(children: CastLongToDouble(col 3:bigint) -> 16:double, CastLongToDouble(col 3:bigint) -> 18:double) -> 19:double, CastLongToDouble(col 0:tinyint) -> 16:double, DoubleColMultiplyDoubleColumn(col 18:double, col 20:double)(children: CastLongToDouble(col 0:tinyint) -> 18:double, CastLongToDouble(col 0:tinyint) -> 20:double) -> 21:double, CastLongToDouble(col 1:smallint) -> 18:double, DoubleColMultiplyDoubleColumn(col 20:double, col 22:double)(children: CastLongToDouble(col 1:smallint) -> 20:double, CastLongToDouble(col 1:smallint) -> 22:double) -> 23:double
                      Statistics: Num rows: 7845 Data size: 1661020 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: max(_col1), sum(_col2), sum(_col8), sum(_col7), count(_col3), sum(_col4), count(_col4), min(_col2), sum(_col10), sum(_col9), count(_col2), sum(_col3), sum(_col12), sum(_col11), count(_col5), sum(_col14), sum(_col13), count(_col6)
                        Group By Vectorization:
                            aggregators: VectorUDAFMaxDouble(col 4:float) -> float, VectorUDAFSumLong(col 3:bigint) -> bigint, VectorUDAFSumDouble(col 17:double) -> double, VectorUDAFSumDouble(col 13:double) -> double, VectorUDAFCount(col 2:int) -> bigint, VectorUDAFSumDouble(col 5:double) -> double, VectorUDAFCount(col 5:double) -> bigint, VectorUDAFMinLong(col 3:bigint) -> bigint, VectorUDAFSumDouble(col 19:double) -> double, VectorUDAFSumDouble(col 15:double) -> double, VectorUDAFCount(col 3:bigint) -> bigint, VectorUDAFSumLong(col 2:int) -> bigint, VectorUDAFSumDouble(col 21:double) -> double, VectorUDAFSumDouble(col 16:double) -> double, VectorUDAFCount(col 0:tinyint) -> bigint, VectorUDAFSumDouble(col 23:double) -> double, VectorUDAFSumDouble(col 18:double) -> double, VectorUDAFCount(col 1:smallint) -> bigint
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            keyExpressions: col 10:boolean
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
                        keys: _col0 (type: boolean)
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18
                        Statistics: Num rows: 3 Data size: 432 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: boolean)
                          sort order: +
                          Map-reduce partition columns: _col0 (type: boolean)
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkLongOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          Statistics: Num rows: 3 Data size: 432 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col1 (type: float), _col2 (type: bigint), _col3 (type: double), _col4 (type: double), _col5 (type: bigint), _col6 (type: double), _col7 (type: bigint), _col8 (type: bigint), _col9 (type: double), _col10 (type: double), _col11 (type: bigint), _col12 (type: bigint), _col13 (type: double), _col14 (type: double), _col15 (type: bigint), _col16 (type: double), _col17 (type: double), _col18 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0), sum(VALUE._col1), sum(VALUE._col2), sum(VALUE._col3), count(VALUE._col4), sum(VALUE._col5), count(VALUE._col6), min(VALUE._col7), sum(VALUE._col8), sum(VALUE._col9), count(VALUE._col10), sum(VALUE._col11), sum(VALUE._col12), sum(VALUE._col13), count(VALUE._col14), sum(VALUE._col15), sum(VALUE._col16), count(VALUE._col17)
                Group By Vectorization:
                    aggregators: VectorUDAFMaxDouble(col 1:float) -> float, VectorUDAFSumLong(col 2:bigint) -> bigint, VectorUDAFSumDouble(col 3:double) -> double, VectorUDAFSumDouble(col 4:double) -> double, VectorUDAFCountMerge(col 5:bigint) -> bigint, VectorUDAFSumDouble(col 6:double) -> double, VectorUDAFCountMerge(col 7:bigint) -> bigint, VectorUDAFMinLong(col 8:bigint) -> bigint, VectorUDAFSumDouble(col 9:double) -> double, VectorUDAFSumDouble(col 10:double) -> double, VectorUDAFCountMerge(col 11:bigint) -> bigint, VectorUDAFSumLong(col 12:bigint) -> bigint, VectorUDAFSumDouble(col 13:double) -> double, VectorUDAFSumDouble(col 14:double) -> double, VectorUDAFCountMerge(col 15:bigint) -> bigint, VectorUDAFSumDouble(col 16:double) -> double, VectorUDAFSumDouble(col 17:double) -> double, VectorUDAFCountMerge(col 18:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    keyExpressions: col 0:boolean
                    native: false
                    vectorProcessingMode: MERGE_PARTIAL
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
                keys: KEY._col0 (type: boolean)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18
                Statistics: Num rows: 3 Data size: 432 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: boolean), _col1 (type: float), (- _col1) (type: float), (-26.28D / UDFToDouble(_col1)) (type: double), _col2 (type: bigint), (CAST( _col2 AS decimal(19,0)) - 10.175) (type: decimal(23,3)), ((_col3 - ((_col4 * _col4) / _col5)) / CASE WHEN ((_col5 = 1L)) THEN (null) ELSE ((_col5 - 1)) END) (type: double), (((_col3 - ((_col4 * _col4) / _col5)) / CASE WHEN ((_col5 = 1L)) THEN (null) ELSE ((_col5 - 1)) END) % UDFToDouble(_col1)) (type: double), (10.175 + (- _col1)) (type: float), (_col6 / _col7) (type: double), (UDFToDouble((CAST( _col2 AS decimal(19,0)) - 10.175)) + ((_col3 - ((_col4 * _col4) / _col5)) / CASE WHEN ((_col5 = 1L)) THEN (null) ELSE ((_col5 - 1)) END)) (type: double), _col8 (type: bigint), ((_col9 - ((_col10 * _col10) / _col11)) / _col11) (type: double), (- (10.175 + (- _col1))) (type: float), (79.553D / ((_col9 - ((_col10 * _col10) / _col11)) / _col11)) (type: double), (((_col3 - ((_col4 * _col4) / _col5)) / CASE WHEN ((_col5 = 1L)) THEN (null) ELSE ((_col5 - 1)) END) % (79.553D / ((_col9 - ((_col10 * _col10) / _col11)) / _col11))) (type: double), _col12 (type: bigint), power(((_col13 - ((_col14 * _col14) / _col15)) / CASE WHEN ((_col15 = 1L)) THEN (null) ELSE ((_col15 - 1)) END), 0.5) (type: double), (-1.389 * CAST( _col8 AS decimal(19,0))) (type: decimal(24,3)), (CAST( _col12 AS decimal(19,0)) - (-1.389 * CAST( _col8 AS decimal(19,0)))) (type: decimal(25,3)), power(((_col16 - ((_col17 * _col17) / _col18)) / _col18), 0.5) (type: double), (- (CAST( _col12 AS decimal(19,0)) - (-1.389 * CAST( _col8 AS decimal(19,0))))) (type: decimal(25,3)), (UDFToDouble(_col12) / _col5) (type: double), (- (UDFToDouble(_col12) / _col5)) (type: double), ((UDFToDouble(_col12) / _col5) * UDFToDouble(_col12)) (type: double)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [0, 1, 19, 20, 2, 22, 24, 23, 31, 28, 34, 8, 35, 33, 38, 43, 12, 39, 46, 49, 40, 52, 53, 50, 56]
                      selectExpressions: DoubleColUnaryMinus(col 1:float) -> 19:float, DoubleScalarDivideDoubleColumn(val -26.28, col 1:double)(children: col 1:float) -> 20:double, DecimalColSubtractDecimalScalar(col 21:decimal(19,0), val 10.175)(children: CastLongToDecimal(col 2:bigint) -> 21:decimal(19,0)) -> 22:decimal(23,3), DoubleColDivideLongColumn(col 23:double, col 27:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 24:double)(children: DoubleColDivideLongColumn(col 23:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 23:double) -> 24:double) -> 23:double, IfExprNullCondExpr(col 25:boolean, null, col 26:bigint)(children: LongColEqualLongScalar(col 5:bigint, val 1) -> 25:boolean, LongColSubtractLongScalar(col 5:bigint, val 1) -> 26:bigint) -> 27:bigint) -> 24:double, DoubleColModuloDoubleColumn(col 28:double, col 1:double)(children: DoubleColDivideLongColumn(col 23:double, col 30:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 28:double)(children: DoubleColDivideLongColumn(col 23:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 23:double) -> 28:double) -> 23:double, IfExprNullCondExpr(col 27:boolean, null, col 29:bigint)(children: LongColEqualLongScalar(col 5:bigint, val 1) -> 27:boolean, LongColSubtractLongScalar(col 5:bigint, val 1) -> 29:bigint) -> 30:bigint) -> 28:double, col 1:float) -> 23:double, DoubleScalarAddDoubleColumn(val 10.175000190734863, col 28:float)(children: DoubleColUnaryMinus(col 1:float) -> 28:float) -> 31:float, DoubleColDivideLongColumn(col 6:double, col 7:bigint) -> 28:double, DoubleColAddDoubleColumn(col 33:double, col 35:double)(children: CastDecimalToDouble(col 32:decimal(23,3))(children: DecimalColSubtractDecimalScalar(col 21:decimal(19,0), val 10.175)(children: CastLongToDecimal(col 2:bigint) -> 21:decimal(19,0)) -> 32:decimal(23,3)) -> 33:double, DoubleColDivideLongColumn(col 34:double, col 37:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 35:double)(children: DoubleColDivideLongColumn(col 34:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 34:double) -> 35:double) -> 34:double, IfExprNullCondExpr(col 30:boolean, null, col 36:bigint)(children: LongColEqualLongScalar(col 5:bigint, val 1) -> 30:boolean, LongColSubtractLongScalar(col 5:bigint, val 1) -> 36:bigint) -> 37:bigint) -> 35:double) -> 34:double, DoubleColDivideLongColumn(col 33:double, col 11:bigint)(children: DoubleColSubtractDoubleColumn(col 9:double, col 35:double)(children: DoubleColDivideLongColumn(col 33:double, col 11:bigint)(children: DoubleColMultiplyDoubleColumn(col 10:double, col 10:double) -> 33:double) -> 35:double) -> 33:double) -> 35:double, DoubleColUnaryMinus(col 38:float)(children: DoubleScalarAddDoubleColumn(val 10.175000190734863, col 33:float)(children: DoubleColUnaryMinus(col 1:float) -> 33:float) -> 38:float) -> 33:float, DoubleScalarDivideDoubleColumn(val 79.553, col 39:double)(children: DoubleColDivideLongColumn(col 38:double, col 11:bigint)(children: DoubleColSubtractDoubleColumn(col 9:double, col 39:double)(children: DoubleColDivideLongColumn(col 38:double, col 11:bigint)(children: DoubleColMultiplyDoubleColumn(col 10:double, col 10:double) -> 38:double) -> 39:double) -> 38:double) -> 39:double) -> 38:double, DoubleColModuloDoubleColumn(col 40:double, col 39:double)(children: DoubleColDivideLongColumn(col 39:double, col 42:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 40:double)(children: DoubleColDivideLongColumn(col 39:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 39:double) -> 40:double) -> 39:double, IfExprNullCondExpr(col 37:boolean, null, col 41:bigint)(children: LongColEqualLongScalar(col 5:bigint, val 1) -> 37:boolean, LongColSubtractLongScalar(col 5:bigint, val 1) -> 41:bigint) -> 42:bigint) -> 40:double, DoubleScalarDivideDoubleColumn(val 79.553, col 43:double)(children: DoubleColDivideLongColumn(col 39:double, col 11:bigint)(children: DoubleColSubtractDoubleColumn(col 9:double, col 43:double)(children: DoubleColDivideLongColumn(col 39:double, col 11:bigint)(children: DoubleColMultiplyDoubleColumn(col 10:double, col 10:double) -> 39:double) -> 43:double) -> 39:double) -> 43:double) -> 39:double) -> 43:double, FuncPowerDoubleToDouble(col 40:double)(children: DoubleColDivideLongColumn(col 39:double, col 45:bigint)(children: DoubleColSubtractDoubleColumn(col 13:double, col 40:double)(children: DoubleColDivideLongColumn(col 39:double, col 15:bigint)(children: DoubleColMultiplyDoubleColumn(col 14:double, col 14:double) -> 39:double) -> 40:double) -> 39:double, IfExprNullCondExpr(col 42:boolean, null, col 44:bigint)(children: LongColEqualLongScalar(col 15:bigint, val 1) -> 42:boolean, LongColSubtractLongScalar(col 15:bigint, val 1) -> 44:bigint) -> 45:bigint) -> 40:double) -> 39:double, DecimalScalarMultiplyDecimalColumn(val -1.389, col 21:decimal(19,0))(children: CastLongToDecimal(col 8:bigint) -> 21:decimal(19,0)) -> 46:decimal(24,3), DecimalColSubtractDecimalColumn(col 21:decimal(19,0), col 48:decimal(24,3))(children: CastLongToDecimal(col 12:bigint) -> 21:decimal(19,0), DecimalScalarMultiplyDecimalColumn(val -1.389, col 47:decimal(19,0))(children: CastLongToDecimal(col 8:bigint) -> 47:decimal(19,0)) -> 48:decimal(24,3)) -> 49:decimal(25,3), FuncPowerDoubleToDouble(col 50:double)(children: DoubleColDivideLongColumn(col 40:double, col 18:bigint)(children: DoubleColSubtractDoubleColumn(col 16:double, col 50:double)(children: DoubleColDivideLongColumn(col 40:double, col 18:bigint)(children: DoubleColMultiplyDoubleColumn(col 17:double, col 17:double) -> 40:double) -> 50:double) -> 40:double) -> 50:double) -> 40:double, FuncNegateDecimalToDecimal(col 51:decimal(25,3))(children: DecimalColSubtractDecimalColumn(col 21:decimal(19,0), col 48:decimal(24,3))(children: CastLongToDecimal(col 12:bigint) -> 21:decimal(19,0), DecimalScalarMultiplyDecimalColumn(val -1.389, col 47:decimal(19,0))(children: CastLongToDecimal(col 8:bigint) -> 47:decimal(19,0)) -> 48:decimal(24,3)) -> 51:decimal(25,3)) -> 52:decimal(25,3), DoubleColDivideLongColumn(col 50:double, col 5:bigint)(children: CastLongToDouble(col 12:bigint) -> 50:double) -> 53:double, DoubleColUnaryMinus(col 54:double)(children: DoubleColDivideLongColumn(col 50:double, col 5:bigint)(children: CastLongToDouble(col 12:bigint) -> 50:double) -> 54:double) -> 50:double, DoubleColMultiplyDoubleColumn(col 55:double, col 54:double)(children: DoubleColDivideLongColumn(col 54:double, col 5:bigint)(children: CastLongToDouble(col 12:bigint) -> 54:double) -> 55:double, CastLongToDouble(col 12:bigint) -> 54:double) -> 56:double
                  Statistics: Num rows: 3 Data size: 1800 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: boolean)
                    sort order: +
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                    Statistics: Num rows: 3 Data size: 1800 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col1 (type: float), _col2 (type: float), _col3 (type: double), _col4 (type: bigint), _col5 (type: decimal(23,3)), _col6 (type: double), _col7 (type: double), _col8 (type: float), _col9 (type: double), _col10 (type: double), _col11 (type: bigint), _col12 (type: double), _col13 (type: float), _col14 (type: double), _col15 (type: double), _col17 (type: bigint), _col18 (type: double), _col19 (type: decimal(24,3)), _col20 (type: decimal(25,3)), _col21 (type: double), _col22 (type: decimal(25,3)), _col23 (type: double), _col24 (type: double), _col25 (type: double)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: boolean), VALUE._col0 (type: float), VALUE._col1 (type: float), VALUE._col2 (type: double), VALUE._col3 (type: bigint), VALUE._col4 (type: decimal(23,3)), VALUE._col5 (type: double), VALUE._col6 (type: double), VALUE._col7 (type: float), VALUE._col8 (type: double), VALUE._col9 (type: double), VALUE._col10 (type: bigint), VALUE._col11 (type: double), VALUE._col12 (type: float), VALUE._col13 (type: double), VALUE._col14 (type: double), VALUE._col12 (type: float), VALUE._col15 (type: bigint), VALUE._col16 (type: double), VALUE._col17 (type: decimal(24,3)), VALUE._col18 (type: decimal(25,3)), VALUE._col19 (type: double), VALUE._col20 (type: decimal(25,3)), VALUE._col21 (type: double), VALUE._col22 (type: double), VALUE._col23 (type: double)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24]
                Statistics: Num rows: 3 Data size: 1800 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 3 Data size: 1800 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT   cboolean1,
         MAX(cfloat),
         (-(MAX(cfloat))),
         (-26.28 / MAX(cfloat)),
         SUM(cbigint),
         (SUM(cbigint) - 10.175),
         VAR_SAMP(cint),
         (VAR_SAMP(cint) % MAX(cfloat)),
         (10.175 + (-(MAX(cfloat)))),
         AVG(cdouble),
         ((SUM(cbigint) - 10.175) + VAR_SAMP(cint)),
         MIN(cbigint),
         VAR_POP(cbigint),
         (-((10.175 + (-(MAX(cfloat)))))),
         (79.553 / VAR_POP(cbigint)),
         (VAR_SAMP(cint) % (79.553 / VAR_POP(cbigint))),
         (-((10.175 + (-(MAX(cfloat)))))),
         SUM(cint),
         STDDEV_SAMP(ctinyint),
         (-1.389 * MIN(cbigint)),
         (SUM(cint) - (-1.389 * MIN(cbigint))),
         STDDEV_POP(csmallint),
         (-((SUM(cint) - (-1.389 * MIN(cbigint))))),
         AVG(cint),
         (-(AVG(cint))),
         (AVG(cint) * SUM(cint))
FROM     alltypesorc
WHERE    (((cboolean1 IS NOT NULL))
          AND (((cdouble < csmallint)
                AND ((cboolean2 = cboolean1)
                     AND (cbigint <= -863.257)))
               OR ((cint >= -257)
                   AND ((cstring1 IS NOT NULL)
                        AND (cboolean1 >= 1)))
               OR (cstring2 RLIKE 'b')
                  OR ((csmallint >= ctinyint)
                      AND (ctimestamp2 IS NULL))))
GROUP BY cboolean1
ORDER BY cboolean1
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: SELECT   cboolean1,
         MAX(cfloat),
         (-(MAX(cfloat))),
         (-26.28 / MAX(cfloat)),
         SUM(cbigint),
         (SUM(cbigint) - 10.175),
         VAR_SAMP(cint),
         (VAR_SAMP(cint) % MAX(cfloat)),
         (10.175 + (-(MAX(cfloat)))),
         AVG(cdouble),
         ((SUM(cbigint) - 10.175) + VAR_SAMP(cint)),
         MIN(cbigint),
         VAR_POP(cbigint),
         (-((10.175 + (-(MAX(cfloat)))))),
         (79.553 / VAR_POP(cbigint)),
         (VAR_SAMP(cint) % (79.553 / VAR_POP(cbigint))),
         (-((10.175 + (-(MAX(cfloat)))))),
         SUM(cint),
         STDDEV_SAMP(ctinyint),
         (-1.389 * MIN(cbigint)),
         (SUM(cint) - (-1.389 * MIN(cbigint))),
         STDDEV_POP(csmallint),
         (-((SUM(cint) - (-1.389 * MIN(cbigint))))),
         AVG(cint),
         (-(AVG(cint))),
         (AVG(cint) * SUM(cint))
FROM     alltypesorc
WHERE    (((cboolean1 IS NOT NULL))
          AND (((cdouble < csmallint)
                AND ((cboolean2 = cboolean1)
                     AND (cbigint <= -863.257)))
               OR ((cint >= -257)
                   AND ((cstring1 IS NOT NULL)
                        AND (cboolean1 >= 1)))
               OR (cstring2 RLIKE 'b')
                  OR ((csmallint >= ctinyint)
                      AND (ctimestamp2 IS NULL))))
GROUP BY cboolean1
ORDER BY cboolean1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
false	11.0	-11.0	-2.389090909090909	-17881597706	-17881597716.175	3.8953387713327046E17	1.0	-0.8249998	-2454.8879999999995	3.8953385925167277E17	-2145884705	1.66288903197104486E18	0.8249998	4.7840233756130287E-17	3.8687857663039107E-17	0.8249998	-1051696618	28.692556844886425	2980633855.245	-4032330473.245	85.79562278396776	4032330473.245	-3983699.3106060605	3983699.3106060605	4.1896430920933255E15
true	79.553	-79.553	-0.33034580136836733	-401322621137	-401322621147.175	7.9255373737245296E16	36.51544952392578	-69.378	4856.6352637899645	7.9254972414624144E16	-2130544867	2.30133924842409984E18	69.378	3.456813247089751E-17	8.984773630290127E-18	69.378	2182477964777	34.65496805050828	2959326820.263	2179518637956.737	9461.197516216063	-2179518637956.737	4.592756659884259E8	-4.592756659884259E8	1.002359020778021E21
PREHOOK: query: create table test_count(i int) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_count
POSTHOOK: query: create table test_count(i int) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_count
PREHOOK: query: explain vectorization expression
select count(*) from test_count
PREHOOK: type: QUERY
PREHOOK: Input: default@test_count
#### A masked pattern was here ####
POSTHOOK: query: explain vectorization expression
select count(*) from test_count
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_count
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test_count
                  Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: []
                    Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      Group By Vectorization:
                          aggregators: VectorUDAFCountStar(*) -> bigint
                          className: VectorGroupByOperator
                          groupByMode: HASH
                          native: false
                          vectorProcessingMode: HASH
                          projectedOutputColumnNums: [0]
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 8 Basic stats: PARTIAL Column stats: COMPLETE
                      Reduce Output Operator
                        sort order: 
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkEmptyKeyOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 1 Data size: 8 Basic stats: PARTIAL Column stats: COMPLETE
                        value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                Group By Vectorization:
                    aggregators: VectorUDAFCountMerge(col 0:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0]
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: PARTIAL Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: PARTIAL Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(*) from test_count
PREHOOK: type: QUERY
PREHOOK: Input: default@test_count
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_count
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_count
#### A masked pattern was here ####
0
PREHOOK: query: explain vectorization expression
select count(i) from test_count
PREHOOK: type: QUERY
PREHOOK: Input: default@test_count
#### A masked pattern was here ####
POSTHOOK: query: explain vectorization expression
select count(i) from test_count
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_count
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test_count
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    expressions: i (type: int)
                    outputColumnNames: i
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0]
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(i)
                      Group By Vectorization:
                          aggregators: VectorUDAFCount(col 0:int) -> bigint
                          className: VectorGroupByOperator
                          groupByMode: HASH
                          native: false
                          vectorProcessingMode: HASH
                          projectedOutputColumnNums: [0]
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        sort order: 
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkEmptyKeyOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                Group By Vectorization:
                    aggregators: VectorUDAFCountMerge(col 0:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0]
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(i) from test_count
PREHOOK: type: QUERY
PREHOOK: Input: default@test_count
#### A masked pattern was here ####
POSTHOOK: query: select count(i) from test_count
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_count
#### A masked pattern was here ####
0
PREHOOK: query: CREATE TABLE alltypesnull(
    ctinyint TINYINT,
    csmallint SMALLINT,
    cint INT,
    cbigint BIGINT,
    cfloat FLOAT,
    cdouble DOUBLE,
    cstring1 STRING,
    cstring2 STRING,
    ctimestamp1 TIMESTAMP,
    ctimestamp2 TIMESTAMP,
    cboolean1 BOOLEAN,
    cboolean2 BOOLEAN)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@alltypesnull
POSTHOOK: query: CREATE TABLE alltypesnull(
    ctinyint TINYINT,
    csmallint SMALLINT,
    cint INT,
    cbigint BIGINT,
    cfloat FLOAT,
    cdouble DOUBLE,
    cstring1 STRING,
    cstring2 STRING,
    ctimestamp1 TIMESTAMP,
    ctimestamp2 TIMESTAMP,
    cboolean1 BOOLEAN,
    cboolean2 BOOLEAN)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@alltypesnull
PREHOOK: query: insert into table alltypesnull select null, null, null, null, null, null, null, null, null, null, null, null from alltypesorc
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
PREHOOK: Output: default@alltypesnull
POSTHOOK: query: insert into table alltypesnull select null, null, null, null, null, null, null, null, null, null, null, null from alltypesorc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
POSTHOOK: Output: default@alltypesnull
POSTHOOK: Lineage: alltypesnull.cbigint EXPRESSION []
POSTHOOK: Lineage: alltypesnull.cboolean1 EXPRESSION []
POSTHOOK: Lineage: alltypesnull.cboolean2 EXPRESSION []
POSTHOOK: Lineage: alltypesnull.cdouble EXPRESSION []
POSTHOOK: Lineage: alltypesnull.cfloat EXPRESSION []
POSTHOOK: Lineage: alltypesnull.cint EXPRESSION []
POSTHOOK: Lineage: alltypesnull.csmallint EXPRESSION []
POSTHOOK: Lineage: alltypesnull.cstring1 EXPRESSION []
POSTHOOK: Lineage: alltypesnull.cstring2 EXPRESSION []
POSTHOOK: Lineage: alltypesnull.ctimestamp1 EXPRESSION []
POSTHOOK: Lineage: alltypesnull.ctimestamp2 EXPRESSION []
POSTHOOK: Lineage: alltypesnull.ctinyint EXPRESSION []
PREHOOK: query: create table alltypesnullorc stored as orc as select * from alltypesnull
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@alltypesnull
PREHOOK: Output: database:default
PREHOOK: Output: default@alltypesnullorc
POSTHOOK: query: create table alltypesnullorc stored as orc as select * from alltypesnull
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@alltypesnull
POSTHOOK: Output: database:default
POSTHOOK: Output: default@alltypesnullorc
POSTHOOK: Lineage: alltypesnullorc.cbigint SIMPLE [(alltypesnull)alltypesnull.FieldSchema(name:cbigint, type:bigint, comment:null), ]
POSTHOOK: Lineage: alltypesnullorc.cboolean1 SIMPLE [(alltypesnull)alltypesnull.FieldSchema(name:cboolean1, type:boolean, comment:null), ]
POSTHOOK: Lineage: alltypesnullorc.cboolean2 SIMPLE [(alltypesnull)alltypesnull.FieldSchema(name:cboolean2, type:boolean, comment:null), ]
POSTHOOK: Lineage: alltypesnullorc.cdouble SIMPLE [(alltypesnull)alltypesnull.FieldSchema(name:cdouble, type:double, comment:null), ]
POSTHOOK: Lineage: alltypesnullorc.cfloat SIMPLE [(alltypesnull)alltypesnull.FieldSchema(name:cfloat, type:float, comment:null), ]
POSTHOOK: Lineage: alltypesnullorc.cint SIMPLE [(alltypesnull)alltypesnull.FieldSchema(name:cint, type:int, comment:null), ]
POSTHOOK: Lineage: alltypesnullorc.csmallint SIMPLE [(alltypesnull)alltypesnull.FieldSchema(name:csmallint, type:smallint, comment:null), ]
POSTHOOK: Lineage: alltypesnullorc.cstring1 SIMPLE [(alltypesnull)alltypesnull.FieldSchema(name:cstring1, type:string, comment:null), ]
POSTHOOK: Lineage: alltypesnullorc.cstring2 SIMPLE [(alltypesnull)alltypesnull.FieldSchema(name:cstring2, type:string, comment:null), ]
POSTHOOK: Lineage: alltypesnullorc.ctimestamp1 SIMPLE [(alltypesnull)alltypesnull.FieldSchema(name:ctimestamp1, type:timestamp, comment:null), ]
POSTHOOK: Lineage: alltypesnullorc.ctimestamp2 SIMPLE [(alltypesnull)alltypesnull.FieldSchema(name:ctimestamp2, type:timestamp, comment:null), ]
POSTHOOK: Lineage: alltypesnullorc.ctinyint SIMPLE [(alltypesnull)alltypesnull.FieldSchema(name:ctinyint, type:tinyint, comment:null), ]
PREHOOK: query: explain vectorization expression
select count(*) from alltypesnullorc
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
POSTHOOK: query: explain vectorization expression
select count(*) from alltypesnullorc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesnullorc
                  Statistics: Num rows: 12288 Data size: 9450 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: []
                    Statistics: Num rows: 12288 Data size: 9450 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      Group By Vectorization:
                          aggregators: VectorUDAFCountStar(*) -> bigint
                          className: VectorGroupByOperator
                          groupByMode: HASH
                          native: false
                          vectorProcessingMode: HASH
                          projectedOutputColumnNums: [0]
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        sort order: 
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkEmptyKeyOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                Group By Vectorization:
                    aggregators: VectorUDAFCountMerge(col 0:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0]
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(*) from alltypesnullorc
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from alltypesnullorc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
12288
PREHOOK: query: explain vectorization expression
select count(ctinyint) from alltypesnullorc
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
POSTHOOK: query: explain vectorization expression
select count(ctinyint) from alltypesnullorc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesnullorc
                  Statistics: Num rows: 12288 Data size: 46700 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    expressions: ctinyint (type: tinyint)
                    outputColumnNames: ctinyint
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0]
                    Statistics: Num rows: 12288 Data size: 46700 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(ctinyint)
                      Group By Vectorization:
                          aggregators: VectorUDAFCount(col 0:tinyint) -> bigint
                          className: VectorGroupByOperator
                          groupByMode: HASH
                          native: false
                          vectorProcessingMode: HASH
                          projectedOutputColumnNums: [0]
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        sort order: 
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkEmptyKeyOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                Group By Vectorization:
                    aggregators: VectorUDAFCountMerge(col 0:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0]
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(ctinyint) from alltypesnullorc
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
POSTHOOK: query: select count(ctinyint) from alltypesnullorc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
0
PREHOOK: query: explain vectorization expression
select count(cint) from alltypesnullorc
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
POSTHOOK: query: explain vectorization expression
select count(cint) from alltypesnullorc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesnullorc
                  Statistics: Num rows: 12288 Data size: 46700 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    expressions: cint (type: int)
                    outputColumnNames: cint
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [2]
                    Statistics: Num rows: 12288 Data size: 46700 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(cint)
                      Group By Vectorization:
                          aggregators: VectorUDAFCount(col 2:int) -> bigint
                          className: VectorGroupByOperator
                          groupByMode: HASH
                          native: false
                          vectorProcessingMode: HASH
                          projectedOutputColumnNums: [0]
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        sort order: 
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkEmptyKeyOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                Group By Vectorization:
                    aggregators: VectorUDAFCountMerge(col 0:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0]
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(cint) from alltypesnullorc
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
POSTHOOK: query: select count(cint) from alltypesnullorc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
0
PREHOOK: query: explain vectorization expression
select count(cfloat) from alltypesnullorc
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
POSTHOOK: query: explain vectorization expression
select count(cfloat) from alltypesnullorc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesnullorc
                  Statistics: Num rows: 12288 Data size: 46700 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    expressions: cfloat (type: float)
                    outputColumnNames: cfloat
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [4]
                    Statistics: Num rows: 12288 Data size: 46700 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(cfloat)
                      Group By Vectorization:
                          aggregators: VectorUDAFCount(col 4:float) -> bigint
                          className: VectorGroupByOperator
                          groupByMode: HASH
                          native: false
                          vectorProcessingMode: HASH
                          projectedOutputColumnNums: [0]
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        sort order: 
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkEmptyKeyOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                Group By Vectorization:
                    aggregators: VectorUDAFCountMerge(col 0:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0]
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(cfloat) from alltypesnullorc
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
POSTHOOK: query: select count(cfloat) from alltypesnullorc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
0
PREHOOK: query: explain vectorization expression
select count(cstring1) from alltypesnullorc
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
POSTHOOK: query: explain vectorization expression
select count(cstring1) from alltypesnullorc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesnullorc
                  Statistics: Num rows: 12288 Data size: 2148200 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    expressions: cstring1 (type: string)
                    outputColumnNames: cstring1
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [6]
                    Statistics: Num rows: 12288 Data size: 2148200 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(cstring1)
                      Group By Vectorization:
                          aggregators: VectorUDAFCount(col 6:string) -> bigint
                          className: VectorGroupByOperator
                          groupByMode: HASH
                          native: false
                          vectorProcessingMode: HASH
                          projectedOutputColumnNums: [0]
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        sort order: 
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkEmptyKeyOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                Group By Vectorization:
                    aggregators: VectorUDAFCountMerge(col 0:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0]
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(cstring1) from alltypesnullorc
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
POSTHOOK: query: select count(cstring1) from alltypesnullorc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
0
PREHOOK: query: explain vectorization expression
select count(cboolean1) from alltypesnullorc
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
POSTHOOK: query: explain vectorization expression
select count(cboolean1) from alltypesnullorc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesnullorc
                  Statistics: Num rows: 12288 Data size: 46700 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    expressions: cboolean1 (type: boolean)
                    outputColumnNames: cboolean1
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [10]
                    Statistics: Num rows: 12288 Data size: 46700 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(cboolean1)
                      Group By Vectorization:
                          aggregators: VectorUDAFCount(col 10:boolean) -> bigint
                          className: VectorGroupByOperator
                          groupByMode: HASH
                          native: false
                          vectorProcessingMode: HASH
                          projectedOutputColumnNums: [0]
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        sort order: 
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkEmptyKeyOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                Group By Vectorization:
                    aggregators: VectorUDAFCountMerge(col 0:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0]
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(cboolean1) from alltypesnullorc
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
POSTHOOK: query: select count(cboolean1) from alltypesnullorc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesnullorc
#### A masked pattern was here ####
0
