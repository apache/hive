PREHOOK: query: CREATE TABLE test_table1_n19 (key INT, value STRING) PARTITIONED BY (ds STRING)
CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_table1_n19
POSTHOOK: query: CREATE TABLE test_table1_n19 (key INT, value STRING) PARTITIONED BY (ds STRING)
CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_table1_n19
PREHOOK: query: CREATE TABLE test_table2_n18 (value STRING, key INT) PARTITIONED BY (ds STRING)
CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_table2_n18
POSTHOOK: query: CREATE TABLE test_table2_n18 (value STRING, key INT) PARTITIONED BY (ds STRING)
CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_table2_n18
PREHOOK: query: FROM src
INSERT OVERWRITE TABLE test_table1_n19 PARTITION (ds = '1') SELECT *
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@test_table1_n19@ds=1
POSTHOOK: query: FROM src
INSERT OVERWRITE TABLE test_table1_n19 PARTITION (ds = '1') SELECT *
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@test_table1_n19@ds=1
POSTHOOK: Lineage: test_table1_n19 PARTITION(ds=1).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: test_table1_n19 PARTITION(ds=1).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE test_table2_n18 PARTITION (ds = '1')
SELECT x.value, x.key from 
(SELECT a.key, a.value FROM test_table1_n19 a WHERE a.ds = '1')x
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1_n19
PREHOOK: Input: default@test_table1_n19@ds=1
PREHOOK: Output: default@test_table2_n18@ds=1
POSTHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE test_table2_n18 PARTITION (ds = '1')
SELECT x.value, x.key from 
(SELECT a.key, a.value FROM test_table1_n19 a WHERE a.ds = '1')x
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1_n19
POSTHOOK: Input: default@test_table1_n19@ds=1
POSTHOOK: Output: default@test_table2_n18@ds=1
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  filterExpr: (ds = '1') (type: boolean)
                  Statistics: Num rows: 500 Data size: 47500 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: value (type: string), key (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 47500 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 500 Data size: 47500 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                          name: default.test_table2_n18
            Execution mode: llap
            LLAP IO: all inputs

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds 1
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.test_table2_n18

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: value, key
          Column Types: string, int
          Table: default.test_table2_n18

PREHOOK: query: INSERT OVERWRITE TABLE test_table2_n18 PARTITION (ds = '1')
SELECT x.value, x.key from 
(SELECT a.key, a.value FROM test_table1_n19 a WHERE a.ds = '1')x
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1_n19
PREHOOK: Input: default@test_table1_n19@ds=1
PREHOOK: Output: default@test_table2_n18@ds=1
POSTHOOK: query: INSERT OVERWRITE TABLE test_table2_n18 PARTITION (ds = '1')
SELECT x.value, x.key from 
(SELECT a.key, a.value FROM test_table1_n19 a WHERE a.ds = '1')x
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1_n19
POSTHOOK: Input: default@test_table1_n19@ds=1
POSTHOOK: Output: default@test_table2_n18@ds=1
POSTHOOK: Lineage: test_table2_n18 PARTITION(ds=1).key SIMPLE [(test_table1_n19)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: test_table2_n18 PARTITION(ds=1).value SIMPLE [(test_table1_n19)a.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: select count(*) from test_table2_n18 where ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2_n18
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2_n18 where ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2_n18
#### A masked pattern was here ####
500
PREHOOK: query: select count(*) from test_table2_n18 tablesample (bucket 1 out of 2) s where ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2_n18
PREHOOK: Input: default@test_table2_n18@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2_n18 tablesample (bucket 1 out of 2) s where ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2_n18
POSTHOOK: Input: default@test_table2_n18@ds=1
#### A masked pattern was here ####
243
PREHOOK: query: select count(*) from test_table2_n18 tablesample (bucket 2 out of 2) s where ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2_n18
PREHOOK: Input: default@test_table2_n18@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2_n18 tablesample (bucket 2 out of 2) s where ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2_n18
POSTHOOK: Input: default@test_table2_n18@ds=1
#### A masked pattern was here ####
257
PREHOOK: query: CREATE TABLE test_table3_n10 (key INT, value STRING) PARTITIONED BY (ds STRING)
CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_table3_n10
POSTHOOK: query: CREATE TABLE test_table3_n10 (key INT, value STRING) PARTITIONED BY (ds STRING)
CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_table3_n10
PREHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE test_table2_n18 PARTITION (ds = '1')
SELECT x.key, x.value from 
(SELECT a.key, a.value FROM test_table1_n19 a WHERE a.ds = '1')x
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1_n19
PREHOOK: Input: default@test_table1_n19@ds=1
PREHOOK: Output: default@test_table2_n18@ds=1
POSTHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE test_table2_n18 PARTITION (ds = '1')
SELECT x.key, x.value from 
(SELECT a.key, a.value FROM test_table1_n19 a WHERE a.ds = '1')x
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1_n19
POSTHOOK: Input: default@test_table1_n19@ds=1
POSTHOOK: Output: default@test_table2_n18@ds=1
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  filterExpr: (ds = '1') (type: boolean)
                  Statistics: Num rows: 500 Data size: 47500 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: CAST( key AS STRING) (type: string), UDFToInteger(value) (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 94000 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: a
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 500 Data size: 94000 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string)
            Execution mode: llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), KEY.reducesinkkey0 (type: int)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 500 Data size: 94000 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 500 Data size: 94000 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.test_table2_n18
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: int), '1' (type: string)
                  outputColumnNames: value, key, ds
                  Statistics: Num rows: 500 Data size: 136500 Basic stats: COMPLETE Column stats: COMPLETE
                  Group By Operator
                    aggregations: max(length(value)), avg(COALESCE(length(value),0)), count(1), count(value), compute_bit_vector_hll(value), min(key), max(key), count(key), compute_bit_vector_hll(key)
                    keys: ds (type: string)
                    minReductionHashAggr: 0.99
                    mode: hash
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                    Statistics: Num rows: 1 Data size: 485 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: string)
                      Statistics: Num rows: 1 Data size: 485 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: int), _col2 (type: struct<count:bigint,sum:double,input:int>), _col3 (type: bigint), _col4 (type: bigint), _col5 (type: binary), _col6 (type: int), _col7 (type: int), _col8 (type: bigint), _col9 (type: binary)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0), avg(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector_hll(VALUE._col4), min(VALUE._col5), max(VALUE._col6), count(VALUE._col7), compute_bit_vector_hll(VALUE._col8)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                Statistics: Num rows: 1 Data size: 417 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: 'STRING' (type: string), UDFToLong(COALESCE(_col1,0)) (type: bigint), COALESCE(_col2,0) (type: double), (_col3 - _col4) (type: bigint), COALESCE(ndv_compute_bit_vector(_col5),0) (type: bigint), _col5 (type: binary), 'LONG' (type: string), UDFToLong(_col6) (type: bigint), UDFToLong(_col7) (type: bigint), (_col3 - _col8) (type: bigint), COALESCE(ndv_compute_bit_vector(_col9),0) (type: bigint), _col9 (type: binary), _col0 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                  Statistics: Num rows: 1 Data size: 615 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 615 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds 1
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.test_table2_n18

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: value, key
          Column Types: string, int
          Table: default.test_table2_n18

PREHOOK: query: INSERT OVERWRITE TABLE test_table2_n18 PARTITION (ds = '1')
SELECT x.key, x.value from 
(SELECT a.key, a.value FROM test_table1_n19 a WHERE a.ds = '1')x
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1_n19
PREHOOK: Input: default@test_table1_n19@ds=1
PREHOOK: Output: default@test_table2_n18@ds=1
POSTHOOK: query: INSERT OVERWRITE TABLE test_table2_n18 PARTITION (ds = '1')
SELECT x.key, x.value from 
(SELECT a.key, a.value FROM test_table1_n19 a WHERE a.ds = '1')x
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1_n19
POSTHOOK: Input: default@test_table1_n19@ds=1
POSTHOOK: Output: default@test_table2_n18@ds=1
POSTHOOK: Lineage: test_table2_n18 PARTITION(ds=1).key EXPRESSION [(test_table1_n19)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: test_table2_n18 PARTITION(ds=1).value EXPRESSION [(test_table1_n19)a.FieldSchema(name:key, type:int, comment:null), ]
PREHOOK: query: select count(*) from test_table2_n18 where ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2_n18
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2_n18 where ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2_n18
#### A masked pattern was here ####
500
PREHOOK: query: select count(*) from test_table2_n18 tablesample (bucket 1 out of 2) s where ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2_n18
PREHOOK: Input: default@test_table2_n18@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2_n18 tablesample (bucket 1 out of 2) s where ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2_n18
POSTHOOK: Input: default@test_table2_n18@ds=1
#### A masked pattern was here ####
500
PREHOOK: query: select count(*) from test_table2_n18 tablesample (bucket 2 out of 2) s where ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2_n18
PREHOOK: Input: default@test_table2_n18@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2_n18 tablesample (bucket 2 out of 2) s where ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2_n18
POSTHOOK: Input: default@test_table2_n18@ds=1
#### A masked pattern was here ####
0
