PREHOOK: query: create table a_n10(key int, value int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@a_n10
POSTHOOK: query: create table a_n10(key int, value int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@a_n10
PREHOOK: query: insert into table a_n10 values (1,2),(1,2),(1,3),(2,3)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@a_n10
POSTHOOK: query: insert into table a_n10 values (1,2),(1,2),(1,3),(2,3)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@a_n10
POSTHOOK: Lineage: a_n10.key SCRIPT []
POSTHOOK: Lineage: a_n10.value SCRIPT []
PREHOOK: query: create table b_n8(key int, value int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@b_n8
POSTHOOK: query: create table b_n8(key int, value int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@b_n8
PREHOOK: query: insert into table b_n8 values (1,2),(2,3)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@b_n8
POSTHOOK: query: insert into table b_n8 values (1,2),(2,3)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@b_n8
POSTHOOK: Lineage: b_n8.key SCRIPT []
POSTHOOK: Lineage: b_n8.value SCRIPT []
PREHOOK: query: select key, value, count(1) as c from a_n10 group by key, value
PREHOOK: type: QUERY
PREHOOK: Input: default@a_n10
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select key, value, count(1) as c from a_n10 group by key, value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a_n10
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	3	1
2	3	1
1	2	2
PREHOOK: query: select * from a_n10 intersect all select * from b_n8
PREHOOK: type: QUERY
PREHOOK: Input: default@a_n10
PREHOOK: Input: default@b_n8
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from a_n10 intersect all select * from b_n8
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a_n10
POSTHOOK: Input: default@b_n8
POSTHOOK: Output: hdfs://### HDFS PATH ###
2	3
1	2
PREHOOK: query: select * from b_n8 intersect all select * from a_n10 intersect all select * from b_n8
PREHOOK: type: QUERY
PREHOOK: Input: default@a_n10
PREHOOK: Input: default@b_n8
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from b_n8 intersect all select * from a_n10 intersect all select * from b_n8
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a_n10
POSTHOOK: Input: default@b_n8
POSTHOOK: Output: hdfs://### HDFS PATH ###
2	3
1	2
PREHOOK: query: select * from a_n10 intersect all select * from b_n8 union all select * from a_n10 intersect all select * from b_n8
PREHOOK: type: QUERY
PREHOOK: Input: default@a_n10
PREHOOK: Input: default@b_n8
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from a_n10 intersect all select * from b_n8 union all select * from a_n10 intersect all select * from b_n8
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a_n10
POSTHOOK: Input: default@b_n8
POSTHOOK: Output: hdfs://### HDFS PATH ###
2	3
1	2
PREHOOK: query: select * from a_n10 intersect all select * from b_n8 union select * from a_n10 intersect all select * from b_n8
PREHOOK: type: QUERY
PREHOOK: Input: default@a_n10
PREHOOK: Input: default@b_n8
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from a_n10 intersect all select * from b_n8 union select * from a_n10 intersect all select * from b_n8
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a_n10
POSTHOOK: Input: default@b_n8
POSTHOOK: Output: hdfs://### HDFS PATH ###
2	3
1	2
PREHOOK: query: select * from a_n10 intersect all select * from b_n8 intersect all select * from a_n10 intersect all select * from b_n8
PREHOOK: type: QUERY
PREHOOK: Input: default@a_n10
PREHOOK: Input: default@b_n8
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from a_n10 intersect all select * from b_n8 intersect all select * from a_n10 intersect all select * from b_n8
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a_n10
POSTHOOK: Input: default@b_n8
POSTHOOK: Output: hdfs://### HDFS PATH ###
2	3
1	2
PREHOOK: query: select * from (select a_n10.key, b_n8.value from a_n10 join b_n8 on a_n10.key=b_n8.key)sub1 
intersect all 
select * from (select a_n10.key, b_n8.value from a_n10 join b_n8 on a_n10.key=b_n8.key)sub2
PREHOOK: type: QUERY
PREHOOK: Input: default@a_n10
PREHOOK: Input: default@b_n8
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from (select a_n10.key, b_n8.value from a_n10 join b_n8 on a_n10.key=b_n8.key)sub1 
intersect all 
select * from (select a_n10.key, b_n8.value from a_n10 join b_n8 on a_n10.key=b_n8.key)sub2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a_n10
POSTHOOK: Input: default@b_n8
POSTHOOK: Output: hdfs://### HDFS PATH ###
2	3
1	2
1	2
1	2
PREHOOK: query: select * from (select a_n10.key, b_n8.value from a_n10 join b_n8 on a_n10.key=b_n8.key)sub1
intersect all
select * from (select b_n8.value as key, a_n10.key as value from a_n10 join b_n8 on a_n10.key=b_n8.key)sub2
PREHOOK: type: QUERY
PREHOOK: Input: default@a_n10
PREHOOK: Input: default@b_n8
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from (select a_n10.key, b_n8.value from a_n10 join b_n8 on a_n10.key=b_n8.key)sub1
intersect all
select * from (select b_n8.value as key, a_n10.key as value from a_n10 join b_n8 on a_n10.key=b_n8.key)sub2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a_n10
POSTHOOK: Input: default@b_n8
POSTHOOK: Output: hdfs://### HDFS PATH ###
PREHOOK: query: explain select * from src intersect all select * from src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain select * from src intersect all select * from src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: hdfs://### HDFS PATH ###
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Union 3 (CONTAINS)
        Reducer 4 <- Union 3 (SIMPLE_EDGE)
        Reducer 6 <- Map 5 (SIMPLE_EDGE), Union 3 (CONTAINS)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: key, value
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), value (type: string)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        null sort order: zz
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: key, value
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), value (type: string)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        null sort order: zz
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: min(_col2), count(_col2)
                  keys: _col0 (type: string), _col1 (type: string)
                  minReductionHashAggr: 0.4
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 316 Data size: 61304 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: string)
                    null sort order: zz
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                    Statistics: Num rows: 316 Data size: 61304 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: bigint), _col3 (type: bigint)
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: min(VALUE._col0), count(VALUE._col1)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 316 Data size: 61304 Basic stats: COMPLETE Column stats: COMPLETE
                Filter Operator
                  predicate: (_col3 = 2L) (type: boolean)
                  Statistics: Num rows: 1 Data size: 194 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col2 (type: bigint), _col0 (type: string), _col1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 186 Basic stats: COMPLETE Column stats: COMPLETE
                    UDTF Operator
                      Statistics: Num rows: 1 Data size: 186 Basic stats: COMPLETE Column stats: COMPLETE
                      function name: UDTFReplicateRows
                      Select Operator
                        expressions: col1 (type: string), col2 (type: string)
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                        File Output Operator
                          compressed: false
                          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                          table:
                              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: min(_col2), count(_col2)
                  keys: _col0 (type: string), _col1 (type: string)
                  minReductionHashAggr: 0.4
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 316 Data size: 61304 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: string)
                    null sort order: zz
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                    Statistics: Num rows: 316 Data size: 61304 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: bigint), _col3 (type: bigint)
        Union 3 
            Vertex: Union 3

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from src intersect all select * from src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from src intersect all select * from src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: hdfs://### HDFS PATH ###
10	val_10
100	val_100
100	val_100
103	val_103
103	val_103
104	val_104
104	val_104
105	val_105
11	val_11
111	val_111
114	val_114
116	val_116
118	val_118
118	val_118
125	val_125
125	val_125
126	val_126
131	val_131
133	val_133
134	val_134
134	val_134
143	val_143
15	val_15
15	val_15
150	val_150
152	val_152
152	val_152
155	val_155
157	val_157
163	val_163
164	val_164
164	val_164
167	val_167
167	val_167
167	val_167
168	val_168
169	val_169
169	val_169
169	val_169
169	val_169
17	val_17
170	val_170
174	val_174
174	val_174
175	val_175
175	val_175
176	val_176
176	val_176
177	val_177
18	val_18
18	val_18
180	val_180
183	val_183
187	val_187
187	val_187
187	val_187
189	val_189
19	val_19
190	val_190
191	val_191
191	val_191
192	val_192
193	val_193
193	val_193
193	val_193
195	val_195
195	val_195
197	val_197
197	val_197
199	val_199
199	val_199
199	val_199
2	val_2
20	val_20
200	val_200
200	val_200
201	val_201
202	val_202
203	val_203
203	val_203
205	val_205
205	val_205
207	val_207
207	val_207
208	val_208
208	val_208
208	val_208
213	val_213
213	val_213
214	val_214
216	val_216
216	val_216
217	val_217
217	val_217
221	val_221
221	val_221
229	val_229
229	val_229
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
237	val_237
237	val_237
238	val_238
238	val_238
239	val_239
239	val_239
24	val_24
24	val_24
241	val_241
244	val_244
248	val_248
252	val_252
258	val_258
26	val_26
26	val_26
263	val_263
27	val_27
272	val_272
272	val_272
273	val_273
273	val_273
273	val_273
274	val_274
278	val_278
278	val_278
281	val_281
281	val_281
282	val_282
282	val_282
283	val_283
285	val_285
286	val_286
287	val_287
288	val_288
288	val_288
291	val_291
298	val_298
298	val_298
298	val_298
30	val_30
302	val_302
305	val_305
306	val_306
307	val_307
307	val_307
309	val_309
309	val_309
315	val_315
316	val_316
316	val_316
316	val_316
321	val_321
321	val_321
322	val_322
322	val_322
323	val_323
325	val_325
325	val_325
33	val_33
332	val_332
333	val_333
333	val_333
335	val_335
336	val_336
338	val_338
34	val_34
344	val_344
344	val_344
348	val_348
348	val_348
348	val_348
348	val_348
348	val_348
35	val_35
35	val_35
35	val_35
353	val_353
353	val_353
360	val_360
362	val_362
366	val_366
367	val_367
367	val_367
373	val_373
379	val_379
386	val_386
394	val_394
399	val_399
399	val_399
4	val_4
401	val_401
401	val_401
401	val_401
401	val_401
401	val_401
402	val_402
404	val_404
404	val_404
406	val_406
406	val_406
406	val_406
406	val_406
409	val_409
409	val_409
409	val_409
41	val_41
411	val_411
413	val_413
413	val_413
418	val_418
419	val_419
421	val_421
424	val_424
424	val_424
427	val_427
429	val_429
429	val_429
431	val_431
431	val_431
431	val_431
432	val_432
435	val_435
436	val_436
437	val_437
438	val_438
438	val_438
438	val_438
444	val_444
452	val_452
453	val_453
455	val_455
457	val_457
459	val_459
459	val_459
463	val_463
463	val_463
466	val_466
466	val_466
466	val_466
47	val_47
472	val_472
475	val_475
478	val_478
478	val_478
479	val_479
482	val_482
483	val_483
484	val_484
492	val_492
492	val_492
494	val_494
498	val_498
498	val_498
498	val_498
5	val_5
5	val_5
5	val_5
54	val_54
57	val_57
65	val_65
69	val_69
72	val_72
72	val_72
76	val_76
76	val_76
78	val_78
8	val_8
80	val_80
90	val_90
90	val_90
90	val_90
98	val_98
98	val_98
0	val_0
0	val_0
0	val_0
113	val_113
113	val_113
119	val_119
119	val_119
119	val_119
12	val_12
12	val_12
120	val_120
120	val_120
128	val_128
128	val_128
128	val_128
129	val_129
129	val_129
136	val_136
137	val_137
137	val_137
138	val_138
138	val_138
138	val_138
138	val_138
145	val_145
146	val_146
146	val_146
149	val_149
149	val_149
153	val_153
156	val_156
158	val_158
160	val_160
162	val_162
165	val_165
165	val_165
166	val_166
172	val_172
172	val_172
178	val_178
179	val_179
179	val_179
181	val_181
186	val_186
194	val_194
196	val_196
209	val_209
209	val_209
218	val_218
219	val_219
219	val_219
222	val_222
223	val_223
223	val_223
224	val_224
224	val_224
226	val_226
228	val_228
233	val_233
233	val_233
235	val_235
242	val_242
242	val_242
247	val_247
249	val_249
255	val_255
255	val_255
256	val_256
256	val_256
257	val_257
260	val_260
262	val_262
265	val_265
265	val_265
266	val_266
275	val_275
277	val_277
277	val_277
277	val_277
277	val_277
28	val_28
280	val_280
280	val_280
284	val_284
289	val_289
292	val_292
296	val_296
308	val_308
310	val_310
311	val_311
311	val_311
311	val_311
317	val_317
317	val_317
318	val_318
318	val_318
318	val_318
327	val_327
327	val_327
327	val_327
331	val_331
331	val_331
339	val_339
341	val_341
342	val_342
342	val_342
345	val_345
351	val_351
356	val_356
364	val_364
365	val_365
368	val_368
369	val_369
369	val_369
369	val_369
37	val_37
37	val_37
374	val_374
375	val_375
377	val_377
378	val_378
382	val_382
382	val_382
384	val_384
384	val_384
384	val_384
389	val_389
392	val_392
393	val_393
395	val_395
395	val_395
396	val_396
396	val_396
396	val_396
397	val_397
397	val_397
400	val_400
403	val_403
403	val_403
403	val_403
407	val_407
414	val_414
414	val_414
417	val_417
417	val_417
417	val_417
42	val_42
42	val_42
43	val_43
430	val_430
430	val_430
430	val_430
439	val_439
439	val_439
44	val_44
443	val_443
446	val_446
448	val_448
449	val_449
454	val_454
454	val_454
454	val_454
458	val_458
458	val_458
460	val_460
462	val_462
462	val_462
467	val_467
468	val_468
468	val_468
468	val_468
468	val_468
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
470	val_470
477	val_477
480	val_480
480	val_480
480	val_480
481	val_481
485	val_485
487	val_487
489	val_489
489	val_489
489	val_489
489	val_489
490	val_490
491	val_491
493	val_493
495	val_495
496	val_496
497	val_497
51	val_51
51	val_51
53	val_53
58	val_58
58	val_58
64	val_64
66	val_66
67	val_67
67	val_67
70	val_70
70	val_70
70	val_70
74	val_74
77	val_77
82	val_82
83	val_83
83	val_83
84	val_84
84	val_84
85	val_85
86	val_86
87	val_87
9	val_9
92	val_92
95	val_95
95	val_95
96	val_96
97	val_97
97	val_97
PREHOOK: query: explain select * from src intersect all select * from src intersect all select * from src intersect all select * from src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain select * from src intersect all select * from src intersect all select * from src intersect all select * from src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: hdfs://### HDFS PATH ###
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 10 <- Map 9 (SIMPLE_EDGE), Union 3 (CONTAINS)
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Union 3 (CONTAINS)
        Reducer 4 <- Union 3 (SIMPLE_EDGE)
        Reducer 6 <- Map 5 (SIMPLE_EDGE), Union 3 (CONTAINS)
        Reducer 8 <- Map 7 (SIMPLE_EDGE), Union 3 (CONTAINS)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: key, value
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), value (type: string)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        null sort order: zz
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: key, value
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), value (type: string)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        null sort order: zz
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: key, value
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), value (type: string)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        null sort order: zz
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 9 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: key, value
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), value (type: string)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        null sort order: zz
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 10 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: min(_col2), count(_col2)
                  keys: _col0 (type: string), _col1 (type: string)
                  minReductionHashAggr: 0.4
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 632 Data size: 122608 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: string)
                    null sort order: zz
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                    Statistics: Num rows: 632 Data size: 122608 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: bigint), _col3 (type: bigint)
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: min(_col2), count(_col2)
                  keys: _col0 (type: string), _col1 (type: string)
                  minReductionHashAggr: 0.4
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 632 Data size: 122608 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: string)
                    null sort order: zz
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                    Statistics: Num rows: 632 Data size: 122608 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: bigint), _col3 (type: bigint)
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: min(VALUE._col0), count(VALUE._col1)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 632 Data size: 122608 Basic stats: COMPLETE Column stats: COMPLETE
                Filter Operator
                  predicate: (_col3 = 4L) (type: boolean)
                  Statistics: Num rows: 1 Data size: 194 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col2 (type: bigint), _col0 (type: string), _col1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 186 Basic stats: COMPLETE Column stats: COMPLETE
                    UDTF Operator
                      Statistics: Num rows: 1 Data size: 186 Basic stats: COMPLETE Column stats: COMPLETE
                      function name: UDTFReplicateRows
                      Select Operator
                        expressions: col1 (type: string), col2 (type: string)
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                        File Output Operator
                          compressed: false
                          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                          table:
                              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: min(_col2), count(_col2)
                  keys: _col0 (type: string), _col1 (type: string)
                  minReductionHashAggr: 0.4
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 632 Data size: 122608 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: string)
                    null sort order: zz
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                    Statistics: Num rows: 632 Data size: 122608 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: bigint), _col3 (type: bigint)
        Reducer 8 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 316 Data size: 58776 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: min(_col2), count(_col2)
                  keys: _col0 (type: string), _col1 (type: string)
                  minReductionHashAggr: 0.4
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 632 Data size: 122608 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: string)
                    null sort order: zz
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                    Statistics: Num rows: 632 Data size: 122608 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: bigint), _col3 (type: bigint)
        Union 3 
            Vertex: Union 3

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from src intersect all select * from src intersect all select * from src intersect all select * from src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from src intersect all select * from src intersect all select * from src intersect all select * from src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: hdfs://### HDFS PATH ###
10	val_10
100	val_100
100	val_100
103	val_103
103	val_103
104	val_104
104	val_104
105	val_105
11	val_11
111	val_111
114	val_114
116	val_116
118	val_118
118	val_118
125	val_125
125	val_125
126	val_126
131	val_131
133	val_133
134	val_134
134	val_134
143	val_143
15	val_15
15	val_15
150	val_150
152	val_152
152	val_152
155	val_155
157	val_157
163	val_163
164	val_164
164	val_164
167	val_167
167	val_167
167	val_167
168	val_168
169	val_169
169	val_169
169	val_169
169	val_169
17	val_17
170	val_170
174	val_174
174	val_174
175	val_175
175	val_175
176	val_176
176	val_176
177	val_177
18	val_18
18	val_18
180	val_180
183	val_183
187	val_187
187	val_187
187	val_187
189	val_189
19	val_19
190	val_190
191	val_191
191	val_191
192	val_192
193	val_193
193	val_193
193	val_193
195	val_195
195	val_195
197	val_197
197	val_197
199	val_199
199	val_199
199	val_199
2	val_2
20	val_20
200	val_200
200	val_200
201	val_201
202	val_202
203	val_203
203	val_203
205	val_205
205	val_205
207	val_207
207	val_207
208	val_208
208	val_208
208	val_208
213	val_213
213	val_213
214	val_214
216	val_216
216	val_216
217	val_217
217	val_217
221	val_221
221	val_221
229	val_229
229	val_229
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
237	val_237
237	val_237
238	val_238
238	val_238
239	val_239
239	val_239
24	val_24
24	val_24
241	val_241
244	val_244
248	val_248
252	val_252
258	val_258
26	val_26
26	val_26
263	val_263
27	val_27
272	val_272
272	val_272
273	val_273
273	val_273
273	val_273
274	val_274
278	val_278
278	val_278
281	val_281
281	val_281
282	val_282
282	val_282
283	val_283
285	val_285
286	val_286
287	val_287
288	val_288
288	val_288
291	val_291
298	val_298
298	val_298
298	val_298
30	val_30
302	val_302
305	val_305
306	val_306
307	val_307
307	val_307
309	val_309
309	val_309
315	val_315
316	val_316
316	val_316
316	val_316
321	val_321
321	val_321
322	val_322
322	val_322
323	val_323
325	val_325
325	val_325
33	val_33
332	val_332
333	val_333
333	val_333
335	val_335
336	val_336
338	val_338
34	val_34
344	val_344
344	val_344
348	val_348
348	val_348
348	val_348
348	val_348
348	val_348
35	val_35
35	val_35
35	val_35
353	val_353
353	val_353
360	val_360
362	val_362
366	val_366
367	val_367
367	val_367
373	val_373
379	val_379
386	val_386
394	val_394
399	val_399
399	val_399
4	val_4
401	val_401
401	val_401
401	val_401
401	val_401
401	val_401
402	val_402
404	val_404
404	val_404
406	val_406
406	val_406
406	val_406
406	val_406
409	val_409
409	val_409
409	val_409
41	val_41
411	val_411
413	val_413
413	val_413
418	val_418
419	val_419
421	val_421
424	val_424
424	val_424
427	val_427
429	val_429
429	val_429
431	val_431
431	val_431
431	val_431
432	val_432
435	val_435
436	val_436
437	val_437
438	val_438
438	val_438
438	val_438
444	val_444
452	val_452
453	val_453
455	val_455
457	val_457
459	val_459
459	val_459
463	val_463
463	val_463
466	val_466
466	val_466
466	val_466
47	val_47
472	val_472
475	val_475
478	val_478
478	val_478
479	val_479
482	val_482
483	val_483
484	val_484
492	val_492
492	val_492
494	val_494
498	val_498
498	val_498
498	val_498
5	val_5
5	val_5
5	val_5
54	val_54
57	val_57
65	val_65
69	val_69
72	val_72
72	val_72
76	val_76
76	val_76
78	val_78
8	val_8
80	val_80
90	val_90
90	val_90
90	val_90
98	val_98
98	val_98
0	val_0
0	val_0
0	val_0
113	val_113
113	val_113
119	val_119
119	val_119
119	val_119
12	val_12
12	val_12
120	val_120
120	val_120
128	val_128
128	val_128
128	val_128
129	val_129
129	val_129
136	val_136
137	val_137
137	val_137
138	val_138
138	val_138
138	val_138
138	val_138
145	val_145
146	val_146
146	val_146
149	val_149
149	val_149
153	val_153
156	val_156
158	val_158
160	val_160
162	val_162
165	val_165
165	val_165
166	val_166
172	val_172
172	val_172
178	val_178
179	val_179
179	val_179
181	val_181
186	val_186
194	val_194
196	val_196
209	val_209
209	val_209
218	val_218
219	val_219
219	val_219
222	val_222
223	val_223
223	val_223
224	val_224
224	val_224
226	val_226
228	val_228
233	val_233
233	val_233
235	val_235
242	val_242
242	val_242
247	val_247
249	val_249
255	val_255
255	val_255
256	val_256
256	val_256
257	val_257
260	val_260
262	val_262
265	val_265
265	val_265
266	val_266
275	val_275
277	val_277
277	val_277
277	val_277
277	val_277
28	val_28
280	val_280
280	val_280
284	val_284
289	val_289
292	val_292
296	val_296
308	val_308
310	val_310
311	val_311
311	val_311
311	val_311
317	val_317
317	val_317
318	val_318
318	val_318
318	val_318
327	val_327
327	val_327
327	val_327
331	val_331
331	val_331
339	val_339
341	val_341
342	val_342
342	val_342
345	val_345
351	val_351
356	val_356
364	val_364
365	val_365
368	val_368
369	val_369
369	val_369
369	val_369
37	val_37
37	val_37
374	val_374
375	val_375
377	val_377
378	val_378
382	val_382
382	val_382
384	val_384
384	val_384
384	val_384
389	val_389
392	val_392
393	val_393
395	val_395
395	val_395
396	val_396
396	val_396
396	val_396
397	val_397
397	val_397
400	val_400
403	val_403
403	val_403
403	val_403
407	val_407
414	val_414
414	val_414
417	val_417
417	val_417
417	val_417
42	val_42
42	val_42
43	val_43
430	val_430
430	val_430
430	val_430
439	val_439
439	val_439
44	val_44
443	val_443
446	val_446
448	val_448
449	val_449
454	val_454
454	val_454
454	val_454
458	val_458
458	val_458
460	val_460
462	val_462
462	val_462
467	val_467
468	val_468
468	val_468
468	val_468
468	val_468
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
470	val_470
477	val_477
480	val_480
480	val_480
480	val_480
481	val_481
485	val_485
487	val_487
489	val_489
489	val_489
489	val_489
489	val_489
490	val_490
491	val_491
493	val_493
495	val_495
496	val_496
497	val_497
51	val_51
51	val_51
53	val_53
58	val_58
58	val_58
64	val_64
66	val_66
67	val_67
67	val_67
70	val_70
70	val_70
70	val_70
74	val_74
77	val_77
82	val_82
83	val_83
83	val_83
84	val_84
84	val_84
85	val_85
86	val_86
87	val_87
9	val_9
92	val_92
95	val_95
95	val_95
96	val_96
97	val_97
97	val_97
PREHOOK: query: explain select value from a_n10 group by value intersect all select key from b_n8 group by key
PREHOOK: type: QUERY
PREHOOK: Input: default@a_n10
PREHOOK: Input: default@b_n8
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain select value from a_n10 group by value intersect all select key from b_n8 group by key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a_n10
POSTHOOK: Input: default@b_n8
POSTHOOK: Output: hdfs://### HDFS PATH ###
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Union 3 (CONTAINS)
        Reducer 4 <- Union 3 (SIMPLE_EDGE)
        Reducer 6 <- Map 5 (SIMPLE_EDGE), Union 3 (CONTAINS)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a_n10
                  Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: value (type: int)
                    outputColumnNames: value
                    Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: value (type: int)
                      minReductionHashAggr: 0.5
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: b_n8
                  Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int)
                    outputColumnNames: key
                    Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: key (type: int)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: int)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: count()
                  keys: _col0 (type: int)
                  mode: complete
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 2 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  Group By Operator
                    aggregations: min(_col1), count(_col1)
                    keys: _col0 (type: int)
                    minReductionHashAggr: 0.5
                    mode: hash
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 2 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 2 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: bigint), _col2 (type: bigint)
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: min(VALUE._col0), count(VALUE._col1)
                keys: KEY._col0 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 2 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                Filter Operator
                  predicate: (_col2 = 2L) (type: boolean)
                  Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col1 (type: bigint), _col0 (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
                    UDTF Operator
                      Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
                      function name: UDTFReplicateRows
                      Select Operator
                        expressions: col1 (type: int)
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                        File Output Operator
                          compressed: false
                          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                          table:
                              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: int)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: count()
                  keys: _col0 (type: int)
                  mode: complete
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 2 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  Group By Operator
                    aggregations: min(_col1), count(_col1)
                    keys: _col0 (type: int)
                    minReductionHashAggr: 0.5
                    mode: hash
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 2 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 2 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: bigint), _col2 (type: bigint)
        Union 3 
            Vertex: Union 3

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select value from a_n10 group by value intersect all select key from b_n8 group by key
PREHOOK: type: QUERY
PREHOOK: Input: default@a_n10
PREHOOK: Input: default@b_n8
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select value from a_n10 group by value intersect all select key from b_n8 group by key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a_n10
POSTHOOK: Input: default@b_n8
POSTHOOK: Output: hdfs://### HDFS PATH ###
2
