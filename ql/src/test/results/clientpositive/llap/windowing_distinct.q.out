PREHOOK: query: drop table windowing_distinct
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table windowing_distinct
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table windowing_distinct(
           index int,
           t tinyint,
           si smallint,
           i int,
           b bigint,
           f float,
           d double,
           bo boolean,
           s string,
           ts timestamp,
           `dec` decimal,
           bin binary)
       row format delimited
       fields terminated by '|'
       TBLPROPERTIES ("hive.serialization.decode.binary.as.base64"="false")
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@windowing_distinct
POSTHOOK: query: create table windowing_distinct(
           index int,
           t tinyint,
           si smallint,
           i int,
           b bigint,
           f float,
           d double,
           bo boolean,
           s string,
           ts timestamp,
           `dec` decimal,
           bin binary)
       row format delimited
       fields terminated by '|'
       TBLPROPERTIES ("hive.serialization.decode.binary.as.base64"="false")
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@windowing_distinct
PREHOOK: query: load data local inpath '../../data/files/windowing_distinct.txt' into table windowing_distinct
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@windowing_distinct
POSTHOOK: query: load data local inpath '../../data/files/windowing_distinct.txt' into table windowing_distinct
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@windowing_distinct
PREHOOK: query: EXPLAIN CBO
SELECT COUNT(DISTINCT t) OVER (PARTITION BY index),
       COUNT(DISTINCT d) OVER (PARTITION BY index),
       COUNT(DISTINCT bo) OVER (PARTITION BY index),
       COUNT(DISTINCT s) OVER (PARTITION BY index),
       COUNT(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       COUNT(DISTINCT ts) OVER (PARTITION BY index),
       COUNT(DISTINCT `dec`) OVER (PARTITION BY index),
       COUNT(DISTINCT bin) OVER (PARTITION BY index)
FROM windowing_distinct
PREHOOK: type: QUERY
PREHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN CBO
SELECT COUNT(DISTINCT t) OVER (PARTITION BY index),
       COUNT(DISTINCT d) OVER (PARTITION BY index),
       COUNT(DISTINCT bo) OVER (PARTITION BY index),
       COUNT(DISTINCT s) OVER (PARTITION BY index),
       COUNT(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       COUNT(DISTINCT ts) OVER (PARTITION BY index),
       COUNT(DISTINCT `dec`) OVER (PARTITION BY index),
       COUNT(DISTINCT bin) OVER (PARTITION BY index)
FROM windowing_distinct
POSTHOOK: type: QUERY
POSTHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
CBO PLAN:
HiveProject(_o__c0=[count(DISTINCT $1) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], _o__c1=[count(DISTINCT $6) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], _o__c2=[count(DISTINCT $7) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], _o__c3=[count(DISTINCT $8) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], _o__c4=[count(DISTINCT ||(_UTF-16LE'Mr.':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", $8)) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], _o__c5=[count(DISTINCT $9) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], _o__c6=[count(DISTINCT $10) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], _o__c7=[count(DISTINCT $11) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
  HiveTableScan(table=[[default, windowing_distinct]], table:alias=[windowing_distinct])

PREHOOK: query: EXPLAIN VECTORIZATION
SELECT COUNT(DISTINCT t) OVER (PARTITION BY index),
       COUNT(DISTINCT d) OVER (PARTITION BY index),
       COUNT(DISTINCT bo) OVER (PARTITION BY index),
       COUNT(DISTINCT s) OVER (PARTITION BY index),
       COUNT(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       COUNT(DISTINCT ts) OVER (PARTITION BY index),
       COUNT(DISTINCT `dec`) OVER (PARTITION BY index),
       COUNT(DISTINCT bin) OVER (PARTITION BY index)
FROM windowing_distinct
PREHOOK: type: QUERY
PREHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION
SELECT COUNT(DISTINCT t) OVER (PARTITION BY index),
       COUNT(DISTINCT d) OVER (PARTITION BY index),
       COUNT(DISTINCT bo) OVER (PARTITION BY index),
       COUNT(DISTINCT s) OVER (PARTITION BY index),
       COUNT(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       COUNT(DISTINCT ts) OVER (PARTITION BY index),
       COUNT(DISTINCT `dec`) OVER (PARTITION BY index),
       COUNT(DISTINCT bin) OVER (PARTITION BY index)
FROM windowing_distinct
POSTHOOK: type: QUERY
POSTHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: windowing_distinct
                  Statistics: Num rows: 1 Data size: 500 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: index (type: int)
                    null sort order: a
                    sort order: +
                    Map-reduce partition columns: index (type: int)
                    Statistics: Num rows: 1 Data size: 500 Basic stats: COMPLETE Column stats: NONE
                    value expressions: t (type: tinyint), d (type: double), bo (type: boolean), s (type: string), ts (type: timestamp), dec (type: decimal(10,0)), bin (type: binary)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vector.serde.deserialize IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.mapred.TextInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: tinyint), VALUE._col5 (type: double), VALUE._col6 (type: boolean), VALUE._col7 (type: string), VALUE._col8 (type: timestamp), VALUE._col9 (type: decimal(10,0)), VALUE._col10 (type: binary)
                outputColumnNames: _col0, _col1, _col6, _col7, _col8, _col9, _col10, _col11
                Statistics: Num rows: 1 Data size: 500 Basic stats: COMPLETE Column stats: NONE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: int, _col1: tinyint, _col6: double, _col7: boolean, _col8: string, _col9: timestamp, _col10: decimal(10,0), _col11: binary
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              arguments: _col1
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                            window function definition
                              alias: count_window_1
                              arguments: _col6
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                            window function definition
                              alias: count_window_2
                              arguments: _col7
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                            window function definition
                              alias: count_window_3
                              arguments: _col8
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                            window function definition
                              alias: count_window_4
                              arguments: concat('Mr.', _col8)
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                            window function definition
                              alias: count_window_5
                              arguments: _col9
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                            window function definition
                              alias: count_window_6
                              arguments: _col10
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                            window function definition
                              alias: count_window_7
                              arguments: _col11
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                  Statistics: Num rows: 1 Data size: 500 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: count_window_0 (type: bigint), count_window_1 (type: bigint), count_window_2 (type: bigint), count_window_3 (type: bigint), count_window_4 (type: bigint), count_window_5 (type: bigint), count_window_6 (type: bigint), count_window_7 (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                    Statistics: Num rows: 1 Data size: 500 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 1 Data size: 500 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT COUNT(DISTINCT t) OVER (PARTITION BY index),
       COUNT(DISTINCT d) OVER (PARTITION BY index),
       COUNT(DISTINCT bo) OVER (PARTITION BY index),
       COUNT(DISTINCT s) OVER (PARTITION BY index),
       COUNT(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       COUNT(DISTINCT ts) OVER (PARTITION BY index),
       COUNT(DISTINCT `dec`) OVER (PARTITION BY index),
       COUNT(DISTINCT bin) OVER (PARTITION BY index)
FROM windowing_distinct
PREHOOK: type: QUERY
PREHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
POSTHOOK: query: SELECT COUNT(DISTINCT t) OVER (PARTITION BY index),
       COUNT(DISTINCT d) OVER (PARTITION BY index),
       COUNT(DISTINCT bo) OVER (PARTITION BY index),
       COUNT(DISTINCT s) OVER (PARTITION BY index),
       COUNT(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       COUNT(DISTINCT ts) OVER (PARTITION BY index),
       COUNT(DISTINCT `dec`) OVER (PARTITION BY index),
       COUNT(DISTINCT bin) OVER (PARTITION BY index)
FROM windowing_distinct
POSTHOOK: type: QUERY
POSTHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
2	2	2	2	2	2	2	1
2	2	2	2	2	2	2	1
2	2	2	2	2	2	2	1
2	2	2	2	2	2	2	2
2	2	2	2	2	2	2	2
2	2	2	2	2	2	2	2
PREHOOK: query: EXPLAIN CBO
SELECT SUM(DISTINCT t) OVER (PARTITION BY index),
       SUM(DISTINCT d) OVER (PARTITION BY index),
       SUM(DISTINCT s) OVER (PARTITION BY index),
       SUM(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       SUM(DISTINCT ts) OVER (PARTITION BY index),
       SUM(DISTINCT `dec`) OVER (PARTITION BY index)
FROM windowing_distinct
PREHOOK: type: QUERY
PREHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN CBO
SELECT SUM(DISTINCT t) OVER (PARTITION BY index),
       SUM(DISTINCT d) OVER (PARTITION BY index),
       SUM(DISTINCT s) OVER (PARTITION BY index),
       SUM(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       SUM(DISTINCT ts) OVER (PARTITION BY index),
       SUM(DISTINCT `dec`) OVER (PARTITION BY index)
FROM windowing_distinct
POSTHOOK: type: QUERY
POSTHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
CBO PLAN:
HiveProject(_o__c0=[sum(DISTINCT $1) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], _o__c1=[sum(DISTINCT $6) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], _o__c2=[sum(DISTINCT $8) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], _o__c3=[sum(DISTINCT ||(_UTF-16LE'Mr.':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", $8)) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], _o__c4=[sum(DISTINCT $9) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], _o__c5=[sum(DISTINCT $10) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
  HiveTableScan(table=[[default, windowing_distinct]], table:alias=[windowing_distinct])

PREHOOK: query: EXPLAIN VECTORIZATION
SELECT SUM(DISTINCT t) OVER (PARTITION BY index),
       SUM(DISTINCT d) OVER (PARTITION BY index),
       SUM(DISTINCT s) OVER (PARTITION BY index),
       SUM(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       SUM(DISTINCT ts) OVER (PARTITION BY index),
       SUM(DISTINCT `dec`) OVER (PARTITION BY index)
FROM windowing_distinct
PREHOOK: type: QUERY
PREHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION
SELECT SUM(DISTINCT t) OVER (PARTITION BY index),
       SUM(DISTINCT d) OVER (PARTITION BY index),
       SUM(DISTINCT s) OVER (PARTITION BY index),
       SUM(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       SUM(DISTINCT ts) OVER (PARTITION BY index),
       SUM(DISTINCT `dec`) OVER (PARTITION BY index)
FROM windowing_distinct
POSTHOOK: type: QUERY
POSTHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: windowing_distinct
                  Statistics: Num rows: 1 Data size: 352 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: index (type: int)
                    null sort order: a
                    sort order: +
                    Map-reduce partition columns: index (type: int)
                    Statistics: Num rows: 1 Data size: 352 Basic stats: COMPLETE Column stats: NONE
                    value expressions: t (type: tinyint), d (type: double), s (type: string), ts (type: timestamp), dec (type: decimal(10,0))
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vector.serde.deserialize IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.mapred.TextInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                notVectorizedReason: PTF operator: sum distinct is not supported 
                vectorized: false
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: tinyint), VALUE._col5 (type: double), VALUE._col7 (type: string), VALUE._col8 (type: timestamp), VALUE._col9 (type: decimal(10,0))
                outputColumnNames: _col0, _col1, _col6, _col8, _col9, _col10
                Statistics: Num rows: 1 Data size: 352 Basic stats: COMPLETE Column stats: NONE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: int, _col1: tinyint, _col6: double, _col8: string, _col9: timestamp, _col10: decimal(10,0)
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: sum_window_0
                              arguments: _col1
                              name: sum
                              window function: GenericUDAFSumLong
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                            window function definition
                              alias: sum_window_1
                              arguments: _col6
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                            window function definition
                              alias: sum_window_2
                              arguments: _col8
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                            window function definition
                              alias: sum_window_3
                              arguments: concat('Mr.', _col8)
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                            window function definition
                              alias: sum_window_4
                              arguments: _col9
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                            window function definition
                              alias: sum_window_5
                              arguments: _col10
                              name: sum
                              window function: GenericUDAFSumHiveDecimal
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                  Statistics: Num rows: 1 Data size: 352 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: sum_window_0 (type: bigint), sum_window_1 (type: double), sum_window_2 (type: double), sum_window_3 (type: double), sum_window_4 (type: double), sum_window_5 (type: decimal(20,0))
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                    Statistics: Num rows: 1 Data size: 352 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 1 Data size: 352 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT SUM(DISTINCT t) OVER (PARTITION BY index),
       SUM(DISTINCT d) OVER (PARTITION BY index),
       SUM(DISTINCT s) OVER (PARTITION BY index),
       SUM(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       SUM(DISTINCT ts) OVER (PARTITION BY index),
       SUM(DISTINCT `dec`) OVER (PARTITION BY index)
FROM windowing_distinct
PREHOOK: type: QUERY
PREHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
POSTHOOK: query: SELECT SUM(DISTINCT t) OVER (PARTITION BY index),
       SUM(DISTINCT d) OVER (PARTITION BY index),
       SUM(DISTINCT s) OVER (PARTITION BY index),
       SUM(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       SUM(DISTINCT ts) OVER (PARTITION BY index),
       SUM(DISTINCT `dec`) OVER (PARTITION BY index)
FROM windowing_distinct
POSTHOOK: type: QUERY
POSTHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
54	56.63	0.0	0.0	2.724258237406296E9	57
54	56.63	0.0	0.0	2.724258237406296E9	57
54	56.63	0.0	0.0	2.724258237406296E9	57
235	77.42	0.0	0.0	2.724258237406612E9	69
235	77.42	0.0	0.0	2.724258237406612E9	69
235	77.42	0.0	0.0	2.724258237406612E9	69
PREHOOK: query: EXPLAIN CBO
SELECT AVG(DISTINCT t) OVER (PARTITION BY index),
       AVG(DISTINCT d) OVER (PARTITION BY index),
       AVG(DISTINCT s) OVER (PARTITION BY index),
       AVG(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       AVG(DISTINCT ts) OVER (PARTITION BY index),
       AVG(DISTINCT `dec`) OVER (PARTITION BY index)
FROM windowing_distinct
PREHOOK: type: QUERY
PREHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN CBO
SELECT AVG(DISTINCT t) OVER (PARTITION BY index),
       AVG(DISTINCT d) OVER (PARTITION BY index),
       AVG(DISTINCT s) OVER (PARTITION BY index),
       AVG(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       AVG(DISTINCT ts) OVER (PARTITION BY index),
       AVG(DISTINCT `dec`) OVER (PARTITION BY index)
FROM windowing_distinct
POSTHOOK: type: QUERY
POSTHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
CBO PLAN:
HiveProject(_o__c0=[avg(DISTINCT $1) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], _o__c1=[avg(DISTINCT $6) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], _o__c2=[avg(DISTINCT $8) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], _o__c3=[avg(DISTINCT ||(_UTF-16LE'Mr.':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", $8)) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], _o__c4=[avg(DISTINCT $9) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], _o__c5=[avg(DISTINCT $10) OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
  HiveTableScan(table=[[default, windowing_distinct]], table:alias=[windowing_distinct])

PREHOOK: query: EXPLAIN VECTORIZATION
SELECT AVG(DISTINCT t) OVER (PARTITION BY index),
       AVG(DISTINCT d) OVER (PARTITION BY index),
       AVG(DISTINCT s) OVER (PARTITION BY index),
       AVG(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       AVG(DISTINCT ts) OVER (PARTITION BY index),
       AVG(DISTINCT `dec`) OVER (PARTITION BY index)
FROM windowing_distinct
PREHOOK: type: QUERY
PREHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION
SELECT AVG(DISTINCT t) OVER (PARTITION BY index),
       AVG(DISTINCT d) OVER (PARTITION BY index),
       AVG(DISTINCT s) OVER (PARTITION BY index),
       AVG(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       AVG(DISTINCT ts) OVER (PARTITION BY index),
       AVG(DISTINCT `dec`) OVER (PARTITION BY index)
FROM windowing_distinct
POSTHOOK: type: QUERY
POSTHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: windowing_distinct
                  Statistics: Num rows: 1 Data size: 352 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: index (type: int)
                    null sort order: a
                    sort order: +
                    Map-reduce partition columns: index (type: int)
                    Statistics: Num rows: 1 Data size: 352 Basic stats: COMPLETE Column stats: NONE
                    value expressions: t (type: tinyint), d (type: double), s (type: string), ts (type: timestamp), dec (type: decimal(10,0))
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vector.serde.deserialize IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.mapred.TextInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                notVectorizedReason: PTF operator: avg distinct is not supported 
                vectorized: false
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: tinyint), VALUE._col5 (type: double), VALUE._col7 (type: string), VALUE._col8 (type: timestamp), VALUE._col9 (type: decimal(10,0))
                outputColumnNames: _col0, _col1, _col6, _col8, _col9, _col10
                Statistics: Num rows: 1 Data size: 352 Basic stats: COMPLETE Column stats: NONE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: int, _col1: tinyint, _col6: double, _col8: string, _col9: timestamp, _col10: decimal(10,0)
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: avg_window_0
                              arguments: _col1
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                            window function definition
                              alias: avg_window_1
                              arguments: _col6
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                            window function definition
                              alias: avg_window_2
                              arguments: _col8
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                            window function definition
                              alias: avg_window_3
                              arguments: concat('Mr.', _col8)
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                            window function definition
                              alias: avg_window_4
                              arguments: _col9
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                            window function definition
                              alias: avg_window_5
                              arguments: _col10
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDecimal
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isDistinct: true
                  Statistics: Num rows: 1 Data size: 352 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: avg_window_0 (type: double), avg_window_1 (type: double), avg_window_2 (type: double), avg_window_3 (type: double), avg_window_4 (type: double), avg_window_5 (type: decimal(14,4))
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                    Statistics: Num rows: 1 Data size: 352 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 1 Data size: 352 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT AVG(DISTINCT t) OVER (PARTITION BY index),
       AVG(DISTINCT d) OVER (PARTITION BY index),
       AVG(DISTINCT s) OVER (PARTITION BY index),
       AVG(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       AVG(DISTINCT ts) OVER (PARTITION BY index),
       AVG(DISTINCT `dec`) OVER (PARTITION BY index)
FROM windowing_distinct
PREHOOK: type: QUERY
PREHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
POSTHOOK: query: SELECT AVG(DISTINCT t) OVER (PARTITION BY index),
       AVG(DISTINCT d) OVER (PARTITION BY index),
       AVG(DISTINCT s) OVER (PARTITION BY index),
       AVG(DISTINCT concat('Mr.', s)) OVER (PARTITION BY index),
       AVG(DISTINCT ts) OVER (PARTITION BY index),
       AVG(DISTINCT `dec`) OVER (PARTITION BY index)
FROM windowing_distinct
POSTHOOK: type: QUERY
POSTHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
27.0	28.315	NULL	NULL	1.362129118703148E9	28.5000
27.0	28.315	NULL	NULL	1.362129118703148E9	28.5000
27.0	28.315	NULL	NULL	1.362129118703148E9	28.5000
117.5	38.71	NULL	NULL	1.362129118703306E9	34.5000
117.5	38.71	NULL	NULL	1.362129118703306E9	34.5000
117.5	38.71	NULL	NULL	1.362129118703306E9	34.5000
PREHOOK: query: select index, f, count(distinct f) over (partition by index order by f rows between 2 preceding and 1 preceding),
                 count(distinct f) over (partition by index order by f rows between unbounded preceding and 1 preceding),
                 count(distinct f) over (partition by index order by f rows between 1 following and 2 following),
                 count(distinct f) over (partition by index order by f rows between unbounded preceding and 1 following) from windowing_distinct
PREHOOK: type: QUERY
PREHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
POSTHOOK: query: select index, f, count(distinct f) over (partition by index order by f rows between 2 preceding and 1 preceding),
                 count(distinct f) over (partition by index order by f rows between unbounded preceding and 1 preceding),
                 count(distinct f) over (partition by index order by f rows between 1 following and 2 following),
                 count(distinct f) over (partition by index order by f rows between unbounded preceding and 1 following) from windowing_distinct
POSTHOOK: type: QUERY
POSTHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
1	26.43	0	0	2	1
1	26.43	1	1	1	2
1	96.91	1	1	0	2
2	13.01	0	0	1	2
2	74.72	1	1	1	2
2	74.72	2	2	0	2
PREHOOK: query: select index, f, sum(distinct f) over (partition by index order by f rows between 2 preceding and 1 preceding),
                 sum(distinct f) over (partition by index order by f rows between unbounded preceding and 1 preceding),
                 sum(distinct f) over (partition by index order by f rows between 1 following and 2 following),
                 sum(distinct f) over (partition by index order by f rows between unbounded preceding and 1 following) from windowing_distinct
PREHOOK: type: QUERY
PREHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
POSTHOOK: query: select index, f, sum(distinct f) over (partition by index order by f rows between 2 preceding and 1 preceding),
                 sum(distinct f) over (partition by index order by f rows between unbounded preceding and 1 preceding),
                 sum(distinct f) over (partition by index order by f rows between 1 following and 2 following),
                 sum(distinct f) over (partition by index order by f rows between unbounded preceding and 1 following) from windowing_distinct
POSTHOOK: type: QUERY
POSTHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
1	26.43	NULL	NULL	123.34000396728516	26.43000030517578
1	26.43	26.43000030517578	26.43000030517578	96.91000366210938	123.34000396728516
1	96.91	26.43000030517578	26.43000030517578	NULL	123.34000396728516
2	13.01	NULL	NULL	74.72000122070312	87.73000144958496
2	74.72	13.010000228881836	13.010000228881836	74.72000122070312	87.73000144958496
2	74.72	87.73000144958496	87.73000144958496	NULL	87.73000144958496
PREHOOK: query: select index, f, avg(distinct f) over (partition by index order by f rows between 2 preceding and 1 preceding),
                 avg(distinct f) over (partition by index order by f rows between unbounded preceding and 1 preceding),
                 avg(distinct f) over (partition by index order by f rows between 1 following and 2 following),
                 avg(distinct f) over (partition by index order by f rows between unbounded preceding and 1 following) from windowing_distinct
PREHOOK: type: QUERY
PREHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
POSTHOOK: query: select index, f, avg(distinct f) over (partition by index order by f rows between 2 preceding and 1 preceding),
                 avg(distinct f) over (partition by index order by f rows between unbounded preceding and 1 preceding),
                 avg(distinct f) over (partition by index order by f rows between 1 following and 2 following),
                 avg(distinct f) over (partition by index order by f rows between unbounded preceding and 1 following) from windowing_distinct
POSTHOOK: type: QUERY
POSTHOOK: Input: default@windowing_distinct
#### A masked pattern was here ####
1	26.43	NULL	NULL	61.67000198364258	26.43000030517578
1	26.43	26.43000030517578	26.43000030517578	96.91000366210938	61.67000198364258
1	96.91	26.43000030517578	26.43000030517578	NULL	61.67000198364258
2	13.01	NULL	NULL	74.72000122070312	43.86500072479248
2	74.72	13.010000228881836	13.010000228881836	74.72000122070312	43.86500072479248
2	74.72	43.86500072479248	43.86500072479248	NULL	43.86500072479248
