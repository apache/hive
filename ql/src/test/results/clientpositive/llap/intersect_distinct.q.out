PREHOOK: query: create table a(key int, value int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@a
POSTHOOK: query: create table a(key int, value int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@a
PREHOOK: query: insert into table a values (1,2),(1,2),(1,3),(2,3)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@a
POSTHOOK: query: insert into table a values (1,2),(1,2),(1,3),(2,3)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@a
POSTHOOK: Lineage: a.key SCRIPT []
POSTHOOK: Lineage: a.value SCRIPT []
PREHOOK: query: create table b(key int, value int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@b
POSTHOOK: query: create table b(key int, value int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@b
PREHOOK: query: insert into table b values (1,2),(2,3)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@b
POSTHOOK: query: insert into table b values (1,2),(2,3)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@b
POSTHOOK: Lineage: b.key SCRIPT []
POSTHOOK: Lineage: b.value SCRIPT []
PREHOOK: query: select key, count(1) as c from a group by key intersect all select value, max(key) as c from b group by value
PREHOOK: type: QUERY
PREHOOK: Input: default@a
PREHOOK: Input: default@b
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select key, count(1) as c from a group by key intersect all select value, max(key) as c from b group by value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a
POSTHOOK: Input: default@b
POSTHOOK: Output: hdfs://### HDFS PATH ###
2	1
PREHOOK: query: select * from a intersect distinct select * from b
PREHOOK: type: QUERY
PREHOOK: Input: default@a
PREHOOK: Input: default@b
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from a intersect distinct select * from b
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a
POSTHOOK: Input: default@b
POSTHOOK: Output: hdfs://### HDFS PATH ###
2	3
1	2
PREHOOK: query: select * from b intersect distinct select * from a intersect distinct select * from b
PREHOOK: type: QUERY
PREHOOK: Input: default@a
PREHOOK: Input: default@b
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from b intersect distinct select * from a intersect distinct select * from b
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a
POSTHOOK: Input: default@b
POSTHOOK: Output: hdfs://### HDFS PATH ###
2	3
1	2
PREHOOK: query: select * from a intersect distinct select * from b union all select * from a intersect distinct select * from b
PREHOOK: type: QUERY
PREHOOK: Input: default@a
PREHOOK: Input: default@b
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from a intersect distinct select * from b union all select * from a intersect distinct select * from b
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a
POSTHOOK: Input: default@b
POSTHOOK: Output: hdfs://### HDFS PATH ###
2	3
1	2
PREHOOK: query: select * from a intersect distinct select * from b union select * from a intersect distinct select * from b
PREHOOK: type: QUERY
PREHOOK: Input: default@a
PREHOOK: Input: default@b
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from a intersect distinct select * from b union select * from a intersect distinct select * from b
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a
POSTHOOK: Input: default@b
POSTHOOK: Output: hdfs://### HDFS PATH ###
2	3
1	2
PREHOOK: query: select * from a intersect distinct select * from b intersect distinct select * from a intersect distinct select * from b
PREHOOK: type: QUERY
PREHOOK: Input: default@a
PREHOOK: Input: default@b
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from a intersect distinct select * from b intersect distinct select * from a intersect distinct select * from b
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a
POSTHOOK: Input: default@b
POSTHOOK: Output: hdfs://### HDFS PATH ###
2	3
1	2
PREHOOK: query: select * from (select a.key, b.value from a join b on a.key=b.key)sub1 
intersect distinct 
select * from (select a.key, b.value from a join b on a.key=b.key)sub2
PREHOOK: type: QUERY
PREHOOK: Input: default@a
PREHOOK: Input: default@b
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from (select a.key, b.value from a join b on a.key=b.key)sub1 
intersect distinct 
select * from (select a.key, b.value from a join b on a.key=b.key)sub2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a
POSTHOOK: Input: default@b
POSTHOOK: Output: hdfs://### HDFS PATH ###
2	3
1	2
PREHOOK: query: select * from (select a.key, b.value from a join b on a.key=b.key)sub1
intersect distinct
select * from (select b.value as key, a.key as value from a join b on a.key=b.key)sub2
PREHOOK: type: QUERY
PREHOOK: Input: default@a
PREHOOK: Input: default@b
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from (select a.key, b.value from a join b on a.key=b.key)sub1
intersect distinct
select * from (select b.value as key, a.key as value from a join b on a.key=b.key)sub2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a
POSTHOOK: Input: default@b
POSTHOOK: Output: hdfs://### HDFS PATH ###
PREHOOK: query: explain select * from src intersect distinct select * from src
PREHOOK: type: QUERY
POSTHOOK: query: explain select * from src intersect distinct select * from src
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Union 3 (CONTAINS)
        Reducer 4 <- Union 3 (SIMPLE_EDGE)
        Reducer 6 <- Map 5 (SIMPLE_EDGE), Union 3 (CONTAINS)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: key, value
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), value (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: key, value
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), value (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: count(_col2)
                  keys: _col0 (type: string), _col1 (type: string)
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: string)
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                    Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: bigint)
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                Filter Operator
                  predicate: (_col2 = 2L) (type: boolean)
                  Statistics: Num rows: 1 Data size: 186 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 178 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 1 Data size: 178 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: count(_col2)
                  keys: _col0 (type: string), _col1 (type: string)
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: string)
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                    Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: bigint)
        Union 3 
            Vertex: Union 3

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from src intersect distinct select * from src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from src intersect distinct select * from src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: hdfs://### HDFS PATH ###
0	val_0
103	val_103
105	val_105
116	val_116
120	val_120
129	val_129
131	val_131
136	val_136
155	val_155
157	val_157
160	val_160
180	val_180
183	val_183
190	val_190
191	val_191
193	val_193
205	val_205
207	val_207
213	val_213
223	val_223
235	val_235
238	val_238
239	val_239
24	val_24
248	val_248
260	val_260
28	val_28
286	val_286
298	val_298
305	val_305
306	val_306
307	val_307
308	val_308
315	val_315
317	val_317
321	val_321
33	val_33
331	val_331
356	val_356
360	val_360
366	val_366
367	val_367
368	val_368
37	val_37
378	val_378
379	val_379
382	val_382
389	val_389
395	val_395
400	val_400
402	val_402
406	val_406
407	val_407
42	val_42
430	val_430
436	val_436
44	val_44
452	val_452
466	val_466
467	val_467
472	val_472
480	val_480
484	val_484
485	val_485
487	val_487
495	val_495
496	val_496
498	val_498
51	val_51
57	val_57
58	val_58
65	val_65
66	val_66
69	val_69
70	val_70
78	val_78
8	val_8
92	val_92
96	val_96
104	val_104
111	val_111
114	val_114
118	val_118
12	val_12
133	val_133
138	val_138
153	val_153
156	val_156
162	val_162
168	val_168
174	val_174
176	val_176
178	val_178
181	val_181
186	val_186
187	val_187
192	val_192
197	val_197
199	val_199
2	val_2
201	val_201
203	val_203
208	val_208
214	val_214
218	val_218
219	val_219
230	val_230
237	val_237
249	val_249
256	val_256
257	val_257
277	val_277
278	val_278
284	val_284
285	val_285
310	val_310
322	val_322
327	val_327
333	val_333
336	val_336
338	val_338
341	val_341
344	val_344
348	val_348
351	val_351
362	val_362
364	val_364
374	val_374
392	val_392
397	val_397
4	val_4
403	val_403
404	val_404
419	val_419
421	val_421
427	val_427
429	val_429
437	val_437
438	val_438
439	val_439
454	val_454
455	val_455
460	val_460
463	val_463
470	val_470
478	val_478
479	val_479
489	val_489
491	val_491
492	val_492
53	val_53
67	val_67
82	val_82
90	val_90
97	val_97
10	val_10
125	val_125
134	val_134
143	val_143
145	val_145
149	val_149
150	val_150
158	val_158
163	val_163
164	val_164
166	val_166
17	val_17
170	val_170
172	val_172
189	val_189
19	val_19
195	val_195
196	val_196
20	val_20
209	val_209
216	val_216
217	val_217
224	val_224
228	val_228
229	val_229
233	val_233
241	val_241
244	val_244
247	val_247
255	val_255
258	val_258
26	val_26
263	val_263
265	val_265
266	val_266
272	val_272
273	val_273
274	val_274
281	val_281
291	val_291
296	val_296
30	val_30
302	val_302
309	val_309
316	val_316
318	val_318
325	val_325
332	val_332
335	val_335
339	val_339
342	val_342
345	val_345
353	val_353
369	val_369
373	val_373
375	val_375
377	val_377
384	val_384
386	val_386
394	val_394
396	val_396
399	val_399
401	val_401
41	val_41
413	val_413
414	val_414
431	val_431
446	val_446
448	val_448
449	val_449
459	val_459
462	val_462
468	val_468
47	val_47
482	val_482
490	val_490
493	val_493
494	val_494
497	val_497
5	val_5
54	val_54
74	val_74
77	val_77
80	val_80
84	val_84
85	val_85
87	val_87
9	val_9
95	val_95
100	val_100
11	val_11
113	val_113
119	val_119
126	val_126
128	val_128
137	val_137
146	val_146
15	val_15
152	val_152
165	val_165
167	val_167
169	val_169
175	val_175
177	val_177
179	val_179
18	val_18
194	val_194
200	val_200
202	val_202
221	val_221
222	val_222
226	val_226
242	val_242
252	val_252
262	val_262
27	val_27
275	val_275
280	val_280
282	val_282
283	val_283
287	val_287
288	val_288
289	val_289
292	val_292
311	val_311
323	val_323
34	val_34
35	val_35
365	val_365
393	val_393
409	val_409
411	val_411
417	val_417
418	val_418
424	val_424
43	val_43
432	val_432
435	val_435
443	val_443
444	val_444
453	val_453
457	val_457
458	val_458
469	val_469
475	val_475
477	val_477
481	val_481
483	val_483
64	val_64
72	val_72
76	val_76
83	val_83
86	val_86
98	val_98
PREHOOK: query: explain select * from src intersect distinct select * from src intersect distinct select * from src intersect distinct select * from src
PREHOOK: type: QUERY
POSTHOOK: query: explain select * from src intersect distinct select * from src intersect distinct select * from src intersect distinct select * from src
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 10 <- Map 9 (SIMPLE_EDGE), Union 3 (CONTAINS)
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Union 3 (CONTAINS)
        Reducer 4 <- Union 3 (SIMPLE_EDGE)
        Reducer 6 <- Map 5 (SIMPLE_EDGE), Union 3 (CONTAINS)
        Reducer 8 <- Map 7 (SIMPLE_EDGE), Union 3 (CONTAINS)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: key, value
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), value (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: key, value
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), value (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: key, value
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), value (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 9 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: key, value
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), value (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 10 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: count(_col2)
                  keys: _col0 (type: string), _col1 (type: string)
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 500 Data size: 93000 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: string)
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                    Statistics: Num rows: 500 Data size: 93000 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: bigint)
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: count(_col2)
                  keys: _col0 (type: string), _col1 (type: string)
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 500 Data size: 93000 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: string)
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                    Statistics: Num rows: 500 Data size: 93000 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: bigint)
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 500 Data size: 93000 Basic stats: COMPLETE Column stats: COMPLETE
                Filter Operator
                  predicate: (_col2 = 4L) (type: boolean)
                  Statistics: Num rows: 1 Data size: 186 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 178 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 1 Data size: 178 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: count(_col2)
                  keys: _col0 (type: string), _col1 (type: string)
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 500 Data size: 93000 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: string)
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                    Statistics: Num rows: 500 Data size: 93000 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: bigint)
        Reducer 8 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 250 Data size: 46500 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: count(_col2)
                  keys: _col0 (type: string), _col1 (type: string)
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 500 Data size: 93000 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: string)
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                    Statistics: Num rows: 500 Data size: 93000 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: bigint)
        Union 3 
            Vertex: Union 3

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from src intersect distinct select * from src intersect distinct select * from src intersect distinct select * from src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from src intersect distinct select * from src intersect distinct select * from src intersect distinct select * from src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: hdfs://### HDFS PATH ###
0	val_0
103	val_103
105	val_105
116	val_116
120	val_120
129	val_129
131	val_131
136	val_136
155	val_155
157	val_157
160	val_160
180	val_180
183	val_183
190	val_190
191	val_191
193	val_193
205	val_205
207	val_207
213	val_213
223	val_223
235	val_235
238	val_238
239	val_239
24	val_24
248	val_248
260	val_260
28	val_28
286	val_286
298	val_298
305	val_305
306	val_306
307	val_307
308	val_308
315	val_315
317	val_317
321	val_321
33	val_33
331	val_331
356	val_356
360	val_360
366	val_366
367	val_367
368	val_368
37	val_37
378	val_378
379	val_379
382	val_382
389	val_389
395	val_395
400	val_400
402	val_402
406	val_406
407	val_407
42	val_42
430	val_430
436	val_436
44	val_44
452	val_452
466	val_466
467	val_467
472	val_472
480	val_480
484	val_484
485	val_485
487	val_487
495	val_495
496	val_496
498	val_498
51	val_51
57	val_57
58	val_58
65	val_65
66	val_66
69	val_69
70	val_70
78	val_78
8	val_8
92	val_92
96	val_96
104	val_104
111	val_111
114	val_114
118	val_118
12	val_12
133	val_133
138	val_138
153	val_153
156	val_156
162	val_162
168	val_168
174	val_174
176	val_176
178	val_178
181	val_181
186	val_186
187	val_187
192	val_192
197	val_197
199	val_199
2	val_2
201	val_201
203	val_203
208	val_208
214	val_214
218	val_218
219	val_219
230	val_230
237	val_237
249	val_249
256	val_256
257	val_257
277	val_277
278	val_278
284	val_284
285	val_285
310	val_310
322	val_322
327	val_327
333	val_333
336	val_336
338	val_338
341	val_341
344	val_344
348	val_348
351	val_351
362	val_362
364	val_364
374	val_374
392	val_392
397	val_397
4	val_4
403	val_403
404	val_404
419	val_419
421	val_421
427	val_427
429	val_429
437	val_437
438	val_438
439	val_439
454	val_454
455	val_455
460	val_460
463	val_463
470	val_470
478	val_478
479	val_479
489	val_489
491	val_491
492	val_492
53	val_53
67	val_67
82	val_82
90	val_90
97	val_97
10	val_10
125	val_125
134	val_134
143	val_143
145	val_145
149	val_149
150	val_150
158	val_158
163	val_163
164	val_164
166	val_166
17	val_17
170	val_170
172	val_172
189	val_189
19	val_19
195	val_195
196	val_196
20	val_20
209	val_209
216	val_216
217	val_217
224	val_224
228	val_228
229	val_229
233	val_233
241	val_241
244	val_244
247	val_247
255	val_255
258	val_258
26	val_26
263	val_263
265	val_265
266	val_266
272	val_272
273	val_273
274	val_274
281	val_281
291	val_291
296	val_296
30	val_30
302	val_302
309	val_309
316	val_316
318	val_318
325	val_325
332	val_332
335	val_335
339	val_339
342	val_342
345	val_345
353	val_353
369	val_369
373	val_373
375	val_375
377	val_377
384	val_384
386	val_386
394	val_394
396	val_396
399	val_399
401	val_401
41	val_41
413	val_413
414	val_414
431	val_431
446	val_446
448	val_448
449	val_449
459	val_459
462	val_462
468	val_468
47	val_47
482	val_482
490	val_490
493	val_493
494	val_494
497	val_497
5	val_5
54	val_54
74	val_74
77	val_77
80	val_80
84	val_84
85	val_85
87	val_87
9	val_9
95	val_95
100	val_100
11	val_11
113	val_113
119	val_119
126	val_126
128	val_128
137	val_137
146	val_146
15	val_15
152	val_152
165	val_165
167	val_167
169	val_169
175	val_175
177	val_177
179	val_179
18	val_18
194	val_194
200	val_200
202	val_202
221	val_221
222	val_222
226	val_226
242	val_242
252	val_252
262	val_262
27	val_27
275	val_275
280	val_280
282	val_282
283	val_283
287	val_287
288	val_288
289	val_289
292	val_292
311	val_311
323	val_323
34	val_34
35	val_35
365	val_365
393	val_393
409	val_409
411	val_411
417	val_417
418	val_418
424	val_424
43	val_43
432	val_432
435	val_435
443	val_443
444	val_444
453	val_453
457	val_457
458	val_458
469	val_469
475	val_475
477	val_477
481	val_481
483	val_483
64	val_64
72	val_72
76	val_76
83	val_83
86	val_86
98	val_98
PREHOOK: query: explain select value from a group by value intersect distinct select key from b group by key
PREHOOK: type: QUERY
POSTHOOK: query: explain select value from a group by value intersect distinct select key from b group by key
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Union 3 (CONTAINS)
        Reducer 4 <- Union 3 (SIMPLE_EDGE)
        Reducer 6 <- Map 5 (SIMPLE_EDGE), Union 3 (CONTAINS)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: value (type: int)
                    outputColumnNames: value
                    Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: value (type: int)
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int)
                    outputColumnNames: key
                    Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: key (type: int)
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: int)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: count()
                  keys: _col0 (type: int)
                  mode: complete
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 2 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  Group By Operator
                    aggregations: count(_col1)
                    keys: _col0 (type: int)
                    mode: hash
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: bigint)
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
                Filter Operator
                  predicate: (_col1 = 2L) (type: boolean)
                  Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: int)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: count()
                  keys: _col0 (type: int)
                  mode: complete
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
                  Group By Operator
                    aggregations: count(_col1)
                    keys: _col0 (type: int)
                    mode: hash
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: bigint)
        Union 3 
            Vertex: Union 3

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select value from a group by value intersect distinct select key from b group by key
PREHOOK: type: QUERY
PREHOOK: Input: default@a
PREHOOK: Input: default@b
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select value from a group by value intersect distinct select key from b group by key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@a
POSTHOOK: Input: default@b
POSTHOOK: Output: hdfs://### HDFS PATH ###
2
