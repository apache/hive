PREHOOK: query: drop table if exists cte_mat_9_a
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: drop table if exists cte_mat_9_a
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: create table cte_mat_9_a (id int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@cte_mat_9_a
POSTHOOK: query: create table cte_mat_9_a (id int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@cte_mat_9_a
PREHOOK: query: insert into cte_mat_9_a (id) values (1)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@cte_mat_9_a
POSTHOOK: query: insert into cte_mat_9_a (id) values (1)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@cte_mat_9_a
POSTHOOK: Lineage: cte_mat_9_a.id SCRIPT []
PREHOOK: query: drop table if exists cte_mat_9_b
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: drop table if exists cte_mat_9_b
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: create table cte_mat_9_b (id int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@cte_mat_9_b
POSTHOOK: query: create table cte_mat_9_b (id int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@cte_mat_9_b
PREHOOK: query: insert into cte_mat_9_b (id) values (1)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@cte_mat_9_b
POSTHOOK: query: insert into cte_mat_9_b (id) values (1)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@cte_mat_9_b
POSTHOOK: Lineage: cte_mat_9_b.id SCRIPT []
Warning: Shuffle Join MERGEJOIN[32][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 5' is a cross product
PREHOOK: query: explain with a0 AS (
  select id, 'a0' as tag from cte_mat_9_a
),
a1 as (
  select id, 'a1 <- ' || tag as tag from a0
),
b0 as (
  select id, 'b0' as tag from cte_mat_9_b
),
b1 as (
  select id, 'b1 <- ' || tag as tag from b0
),
b2 as (
  select id, 'b2 <- ' || tag as tag  from b1
),
b3 as (
  select id, 'b3 <- ' || tag as tag from b2
),
c as (
  select b2.id, 'c <- (' || b2.tag || ' & ' || b3.tag || ')' as tag
  from b2
  full outer join b3 on b2.id = b3.id
)
select b1.id, b1.tag, a1.tag, c.tag
from b1
full outer join a1 on b1.id = a1.id
full outer join c on c.id = c.id
PREHOOK: type: QUERY
PREHOOK: Input: default@b1
PREHOOK: Input: default@b2
PREHOOK: Input: default@cte_mat_9_a
#### A masked pattern was here ####
POSTHOOK: query: explain with a0 AS (
  select id, 'a0' as tag from cte_mat_9_a
),
a1 as (
  select id, 'a1 <- ' || tag as tag from a0
),
b0 as (
  select id, 'b0' as tag from cte_mat_9_b
),
b1 as (
  select id, 'b1 <- ' || tag as tag from b0
),
b2 as (
  select id, 'b2 <- ' || tag as tag  from b1
),
b3 as (
  select id, 'b3 <- ' || tag as tag from b2
),
c as (
  select b2.id, 'c <- (' || b2.tag || ' & ' || b3.tag || ')' as tag
  from b2
  full outer join b3 on b2.id = b3.id
)
select b1.id, b1.tag, a1.tag, c.tag
from b1
full outer join a1 on b1.id = a1.id
full outer join c on c.id = c.id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@b1
POSTHOOK: Input: default@b2
POSTHOOK: Input: default@cte_mat_9_a
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-4 depends on stages: Stage-2, Stage-0
  Stage-5 depends on stages: Stage-4
  Stage-7 depends on stages: Stage-2, Stage-0, Stage-5, Stage-3
  Stage-3 depends on stages: Stage-4
  Stage-0 depends on stages: Stage-1
  Stage-6 depends on stages: Stage-7

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: cte_mat_9_b
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: id (type: int), 'b1 <- b0' (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                          name: default.b1
            Execution mode: vectorized, llap
            LLAP IO: all inputs

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-4
    Tez
#### A masked pattern was here ####
      Vertices:
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: b1
                  Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: id (type: int), concat('b2 <- ', tag) (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                          name: default.b2
            Execution mode: vectorized, llap
            LLAP IO: all inputs

  Stage: Stage-5
    Dependency Collection

  Stage: Stage-7
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 4 <- Map 3 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
        Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE), Reducer 8 (CUSTOM_SIMPLE_EDGE)
        Reducer 8 <- Map 7 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: b1
                  Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: id (type: int), tag (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: cte_mat_9_a
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: id (type: int), 'a1 <- a0' (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: b2
                  Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: id (type: int), tag (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 9 
            Map Operator Tree:
                TableScan
                  alias: b2
                  Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: id (type: int), concat('b3 <- ', tag) (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Full Outer Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col1, _col3
                Statistics: Num rows: 1 Data size: 206 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 1 Data size: 206 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: int), _col1 (type: string), _col3 (type: string)
        Reducer 5 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Full Outer Join 0 to 1
                filter predicates:
                  0 
                  1 {VALUE._col0 is not null}
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col3, _col5
                Statistics: Num rows: 1 Data size: 413 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: string), _col3 (type: string), _col5 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 1 Data size: 413 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 413 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 8 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Full Outer Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col1, _col3
                Statistics: Num rows: 1 Data size: 206 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: int), concat(concat(concat(concat('c <- (', _col1), ' & '), _col3), ')') (type: string)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 206 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    null sort order: 
                    sort order: 
                    Statistics: Num rows: 1 Data size: 206 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: int), _col1 (type: string)

  Stage: Stage-3
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####

  Stage: Stage-0
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####

  Stage: Stage-6
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[32][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 5' is a cross product
PREHOOK: query: with a0 AS (
  select id, 'a0' as tag from cte_mat_9_a
),
a1 as (
  select id, 'a1 <- ' || tag as tag from a0
),
b0 as (
  select id, 'b0' as tag from cte_mat_9_b
),
b1 as (
  select id, 'b1 <- ' || tag as tag from b0
),
b2 as (
  select id, 'b2 <- ' || tag as tag  from b1
),
b3 as (
  select id, 'b3 <- ' || tag as tag from b2
),
c as (
  select b2.id, 'c <- (' || b2.tag || ' & ' || b3.tag || ')' as tag
  from b2
  full outer join b3 on b2.id = b3.id
)
select b1.id, b1.tag, a1.tag, c.tag
from b1
full outer join a1 on b1.id = a1.id
full outer join c on c.id = c.id
PREHOOK: type: QUERY
PREHOOK: Input: default@b1
PREHOOK: Input: default@b2
PREHOOK: Input: default@cte_mat_9_a
PREHOOK: Input: default@cte_mat_9_b
PREHOOK: Output: database:default
PREHOOK: Output: default@b1
PREHOOK: Output: default@b2
#### A masked pattern was here ####
POSTHOOK: query: with a0 AS (
  select id, 'a0' as tag from cte_mat_9_a
),
a1 as (
  select id, 'a1 <- ' || tag as tag from a0
),
b0 as (
  select id, 'b0' as tag from cte_mat_9_b
),
b1 as (
  select id, 'b1 <- ' || tag as tag from b0
),
b2 as (
  select id, 'b2 <- ' || tag as tag  from b1
),
b3 as (
  select id, 'b3 <- ' || tag as tag from b2
),
c as (
  select b2.id, 'c <- (' || b2.tag || ' & ' || b3.tag || ')' as tag
  from b2
  full outer join b3 on b2.id = b3.id
)
select b1.id, b1.tag, a1.tag, c.tag
from b1
full outer join a1 on b1.id = a1.id
full outer join c on c.id = c.id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@b1
POSTHOOK: Input: default@b2
POSTHOOK: Input: default@cte_mat_9_a
POSTHOOK: Input: default@cte_mat_9_b
POSTHOOK: Output: database:default
POSTHOOK: Output: default@b1
POSTHOOK: Output: default@b2
#### A masked pattern was here ####
1	b1 <- b0	a1 <- a0	c <- (b2 <- b1 <- b0 & b3 <- b2 <- b1 <- b0)
