PREHOOK: query: CREATE TABLE dest1_n1(c1 STRING, c2 STRING, c3 STRING, c4 STRING,
  c5 STRING, c6 STRING, c7 STRING, c8 STRING,
  c9 STRING, c10 STRING, c11 STRING, c12 STRING, c13 STRING,
  c14 STRING, c15 STRING, c16 STRING, c17 STRING,
  c18 STRING, c19 STRING, c20 STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@dest1_n1
POSTHOOK: query: CREATE TABLE dest1_n1(c1 STRING, c2 STRING, c3 STRING, c4 STRING,
  c5 STRING, c6 STRING, c7 STRING, c8 STRING,
  c9 STRING, c10 STRING, c11 STRING, c12 STRING, c13 STRING,
  c14 STRING, c15 STRING, c16 STRING, c17 STRING,
  c18 STRING, c19 STRING, c20 STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@dest1_n1
PREHOOK: query: EXPLAIN
FROM src INSERT OVERWRITE TABLE dest1_n1 SELECT 'a' LIKE '%a%', 'b' LIKE '%a%', 'ab' LIKE '%a%', 'ab' LIKE '%a_',
  '%_' LIKE '\%\_', 'ab' LIKE '\%\_', 'ab' LIKE '_a%', 'ab' LIKE 'a',
  '' RLIKE '.*', 'a' RLIKE '[ab]', '' RLIKE '[ab]', 'hadoop' RLIKE '[a-z]*', 'hadoop' RLIKE 'o*',
  REGEXP_REPLACE('abc', 'b', 'c'), REGEXP_REPLACE('abc', 'z', 'a'), REGEXP_REPLACE('abbbb', 'bb', 'b'),
  REGEXP_REPLACE('hadoop', '(.)[a-z]*', '$1ive'), REGEXP_REPLACE('hadoopAAA','A.*',''),
  REGEXP_REPLACE('abc', '', 'A'), 'abc' RLIKE ''
  WHERE src.key = 86
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n1
POSTHOOK: query: EXPLAIN
FROM src INSERT OVERWRITE TABLE dest1_n1 SELECT 'a' LIKE '%a%', 'b' LIKE '%a%', 'ab' LIKE '%a%', 'ab' LIKE '%a_',
  '%_' LIKE '\%\_', 'ab' LIKE '\%\_', 'ab' LIKE '_a%', 'ab' LIKE 'a',
  '' RLIKE '.*', 'a' RLIKE '[ab]', '' RLIKE '[ab]', 'hadoop' RLIKE '[a-z]*', 'hadoop' RLIKE 'o*',
  REGEXP_REPLACE('abc', 'b', 'c'), REGEXP_REPLACE('abc', 'z', 'a'), REGEXP_REPLACE('abbbb', 'bb', 'b'),
  REGEXP_REPLACE('hadoop', '(.)[a-z]*', '$1ive'), REGEXP_REPLACE('hadoopAAA','A.*',''),
  REGEXP_REPLACE('abc', '', 'A'), 'abc' RLIKE ''
  WHERE src.key = 86
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n1
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  filterExpr: (UDFToDouble(key) = 86.0D) (type: boolean)
                  Statistics: Num rows: 500 Data size: 43500 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (UDFToDouble(key) = 86.0D) (type: boolean)
                    Statistics: Num rows: 250 Data size: 21750 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: 'TRUE' (type: string), 'FALSE' (type: string), 'TRUE' (type: string), 'TRUE' (type: string), 'TRUE' (type: string), 'FALSE' (type: string), 'FALSE' (type: string), 'FALSE' (type: string), 'TRUE' (type: string), 'TRUE' (type: string), 'FALSE' (type: string), 'TRUE' (type: string), 'TRUE' (type: string), 'acc' (type: string), 'abc' (type: string), 'abb' (type: string), 'hive' (type: string), 'hadoop' (type: string), 'AaAbAcA' (type: string), 'FALSE' (type: string)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19
                      Statistics: Num rows: 250 Data size: 442000 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 250 Data size: 442000 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.TextInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                            name: default.dest1_n1
                      Select Operator
                        expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: string), _col8 (type: string), _col9 (type: string), _col10 (type: string), _col11 (type: string), _col12 (type: string), _col13 (type: string), _col14 (type: string), _col15 (type: string), _col16 (type: string), _col17 (type: string), _col18 (type: string), _col19 (type: string)
                        outputColumnNames: c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20
                        Statistics: Num rows: 250 Data size: 442000 Basic stats: COMPLETE Column stats: COMPLETE
                        Group By Operator
                          aggregations: max(length(c1)), avg(COALESCE(length(c1),0)), count(1), count(c1), compute_bit_vector_hll(c1), max(length(c2)), avg(COALESCE(length(c2),0)), count(c2), compute_bit_vector_hll(c2), max(length(c3)), avg(COALESCE(length(c3),0)), count(c3), compute_bit_vector_hll(c3), max(length(c4)), avg(COALESCE(length(c4),0)), count(c4), compute_bit_vector_hll(c4), max(length(c5)), avg(COALESCE(length(c5),0)), count(c5), compute_bit_vector_hll(c5), max(length(c6)), avg(COALESCE(length(c6),0)), count(c6), compute_bit_vector_hll(c6), max(length(c7)), avg(COALESCE(length(c7),0)), count(c7), compute_bit_vector_hll(c7), max(length(c8)), avg(COALESCE(length(c8),0)), count(c8), compute_bit_vector_hll(c8), max(length(c9)), avg(COALESCE(length(c9),0)), count(c9), compute_bit_vector_hll(c9), max(length(c10)), avg(COALESCE(length(c10),0)), count(c10), compute_bit_vector_hll(c10), max(length(c11)), avg(COALESCE(length(c11),0)), count(c11), compute_bit_vector_hll(c11), max(length(c12)), avg(COALESCE(length(c12),0)), count(c12), compute_bit_vector_hll(c12), max(length(c13)), avg(COALESCE(length(c13),0)), count(c13), compute_bit_vector_hll(c13), max(length(c14)), avg(COALESCE(length(c14),0)), count(c14), compute_bit_vector_hll(c14), max(length(c15)), avg(COALESCE(length(c15),0)), count(c15), compute_bit_vector_hll(c15), max(length(c16)), avg(COALESCE(length(c16),0)), count(c16), compute_bit_vector_hll(c16), max(length(c17)), avg(COALESCE(length(c17),0)), count(c17), compute_bit_vector_hll(c17), max(length(c18)), avg(COALESCE(length(c18),0)), count(c18), compute_bit_vector_hll(c18), max(length(c19)), avg(COALESCE(length(c19),0)), count(c19), compute_bit_vector_hll(c19), max(length(c20)), avg(COALESCE(length(c20),0)), count(c20), compute_bit_vector_hll(c20)
                          minReductionHashAggr: 0.99
                          mode: hash
                          outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30, _col31, _col32, _col33, _col34, _col35, _col36, _col37, _col38, _col39, _col40, _col41, _col42, _col43, _col44, _col45, _col46, _col47, _col48, _col49, _col50, _col51, _col52, _col53, _col54, _col55, _col56, _col57, _col58, _col59, _col60, _col61, _col62, _col63, _col64, _col65, _col66, _col67, _col68, _col69, _col70, _col71, _col72, _col73, _col74, _col75, _col76, _col77, _col78, _col79, _col80
                          Statistics: Num rows: 1 Data size: 4648 Basic stats: COMPLETE Column stats: COMPLETE
                          Reduce Output Operator
                            null sort order: 
                            sort order: 
                            Statistics: Num rows: 1 Data size: 4648 Basic stats: COMPLETE Column stats: COMPLETE
                            value expressions: _col0 (type: int), _col1 (type: struct<count:bigint,sum:double,input:int>), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: binary), _col5 (type: int), _col6 (type: struct<count:bigint,sum:double,input:int>), _col7 (type: bigint), _col8 (type: binary), _col9 (type: int), _col10 (type: struct<count:bigint,sum:double,input:int>), _col11 (type: bigint), _col12 (type: binary), _col13 (type: int), _col14 (type: struct<count:bigint,sum:double,input:int>), _col15 (type: bigint), _col16 (type: binary), _col17 (type: int), _col18 (type: struct<count:bigint,sum:double,input:int>), _col19 (type: bigint), _col20 (type: binary), _col21 (type: int), _col22 (type: struct<count:bigint,sum:double,input:int>), _col23 (type: bigint), _col24 (type: binary), _col25 (type: int), _col26 (type: struct<count:bigint,sum:double,input:int>), _col27 (type: bigint), _col28 (type: binary), _col29 (type: int), _col30 (type: struct<count:bigint,sum:double,input:int>), _col31 (type: bigint), _col32 (type: binary), _col33 (type: int), _col34 (type: struct<count:bigint,sum:double,input:int>), _col35 (type: bigint), _col36 (type: binary), _col37 (type: int), _col38 (type: struct<count:bigint,sum:double,input:int>), _col39 (type: bigint), _col40 (type: binary), _col41 (type: int), _col42 (type: struct<count:bigint,sum:double,input:int>), _col43 (type: bigint), _col44 (type: binary), _col45 (type: int), _col46 (type: struct<count:bigint,sum:double,input:int>), _col47 (type: bigint), _col48 (type: binary), _col49 (type: int), _col50 (type: struct<count:bigint,sum:double,input:int>), _col51 (type: bigint), _col52 (type: binary), _col53 (type: int), _col54 (type: struct<count:bigint,sum:double,input:int>), _col55 (type: bigint), _col56 (type: binary), _col57 (type: int), _col58 (type: struct<count:bigint,sum:double,input:int>), _col59 (type: bigint), _col60 (type: binary), _col61 (type: int), _col62 (type: struct<count:bigint,sum:double,input:int>), _col63 (type: bigint), _col64 (type: binary), _col65 (type: int), _col66 (type: struct<count:bigint,sum:double,input:int>), _col67 (type: bigint), _col68 (type: binary), _col69 (type: int), _col70 (type: struct<count:bigint,sum:double,input:int>), _col71 (type: bigint), _col72 (type: binary), _col73 (type: int), _col74 (type: struct<count:bigint,sum:double,input:int>), _col75 (type: bigint), _col76 (type: binary), _col77 (type: int), _col78 (type: struct<count:bigint,sum:double,input:int>), _col79 (type: bigint), _col80 (type: binary)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0), avg(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector_hll(VALUE._col4), max(VALUE._col5), avg(VALUE._col6), count(VALUE._col7), compute_bit_vector_hll(VALUE._col8), max(VALUE._col9), avg(VALUE._col10), count(VALUE._col11), compute_bit_vector_hll(VALUE._col12), max(VALUE._col13), avg(VALUE._col14), count(VALUE._col15), compute_bit_vector_hll(VALUE._col16), max(VALUE._col17), avg(VALUE._col18), count(VALUE._col19), compute_bit_vector_hll(VALUE._col20), max(VALUE._col21), avg(VALUE._col22), count(VALUE._col23), compute_bit_vector_hll(VALUE._col24), max(VALUE._col25), avg(VALUE._col26), count(VALUE._col27), compute_bit_vector_hll(VALUE._col28), max(VALUE._col29), avg(VALUE._col30), count(VALUE._col31), compute_bit_vector_hll(VALUE._col32), max(VALUE._col33), avg(VALUE._col34), count(VALUE._col35), compute_bit_vector_hll(VALUE._col36), max(VALUE._col37), avg(VALUE._col38), count(VALUE._col39), compute_bit_vector_hll(VALUE._col40), max(VALUE._col41), avg(VALUE._col42), count(VALUE._col43), compute_bit_vector_hll(VALUE._col44), max(VALUE._col45), avg(VALUE._col46), count(VALUE._col47), compute_bit_vector_hll(VALUE._col48), max(VALUE._col49), avg(VALUE._col50), count(VALUE._col51), compute_bit_vector_hll(VALUE._col52), max(VALUE._col53), avg(VALUE._col54), count(VALUE._col55), compute_bit_vector_hll(VALUE._col56), max(VALUE._col57), avg(VALUE._col58), count(VALUE._col59), compute_bit_vector_hll(VALUE._col60), max(VALUE._col61), avg(VALUE._col62), count(VALUE._col63), compute_bit_vector_hll(VALUE._col64), max(VALUE._col65), avg(VALUE._col66), count(VALUE._col67), compute_bit_vector_hll(VALUE._col68), max(VALUE._col69), avg(VALUE._col70), count(VALUE._col71), compute_bit_vector_hll(VALUE._col72), max(VALUE._col73), avg(VALUE._col74), count(VALUE._col75), compute_bit_vector_hll(VALUE._col76), max(VALUE._col77), avg(VALUE._col78), count(VALUE._col79), compute_bit_vector_hll(VALUE._col80)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30, _col31, _col32, _col33, _col34, _col35, _col36, _col37, _col38, _col39, _col40, _col41, _col42, _col43, _col44, _col45, _col46, _col47, _col48, _col49, _col50, _col51, _col52, _col53, _col54, _col55, _col56, _col57, _col58, _col59, _col60, _col61, _col62, _col63, _col64, _col65, _col66, _col67, _col68, _col69, _col70, _col71, _col72, _col73, _col74, _col75, _col76, _col77, _col78, _col79, _col80
                Statistics: Num rows: 1 Data size: 3288 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: 'STRING' (type: string), UDFToLong(COALESCE(_col0,0)) (type: bigint), COALESCE(_col1,0) (type: double), (_col2 - _col3) (type: bigint), COALESCE(ndv_compute_bit_vector(_col4),0) (type: bigint), _col4 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col5,0)) (type: bigint), COALESCE(_col6,0) (type: double), (_col2 - _col7) (type: bigint), COALESCE(ndv_compute_bit_vector(_col8),0) (type: bigint), _col8 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col9,0)) (type: bigint), COALESCE(_col10,0) (type: double), (_col2 - _col11) (type: bigint), COALESCE(ndv_compute_bit_vector(_col12),0) (type: bigint), _col12 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col13,0)) (type: bigint), COALESCE(_col14,0) (type: double), (_col2 - _col15) (type: bigint), COALESCE(ndv_compute_bit_vector(_col16),0) (type: bigint), _col16 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col17,0)) (type: bigint), COALESCE(_col18,0) (type: double), (_col2 - _col19) (type: bigint), COALESCE(ndv_compute_bit_vector(_col20),0) (type: bigint), _col20 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col21,0)) (type: bigint), COALESCE(_col22,0) (type: double), (_col2 - _col23) (type: bigint), COALESCE(ndv_compute_bit_vector(_col24),0) (type: bigint), _col24 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col25,0)) (type: bigint), COALESCE(_col26,0) (type: double), (_col2 - _col27) (type: bigint), COALESCE(ndv_compute_bit_vector(_col28),0) (type: bigint), _col28 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col29,0)) (type: bigint), COALESCE(_col30,0) (type: double), (_col2 - _col31) (type: bigint), COALESCE(ndv_compute_bit_vector(_col32),0) (type: bigint), _col32 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col33,0)) (type: bigint), COALESCE(_col34,0) (type: double), (_col2 - _col35) (type: bigint), COALESCE(ndv_compute_bit_vector(_col36),0) (type: bigint), _col36 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col37,0)) (type: bigint), COALESCE(_col38,0) (type: double), (_col2 - _col39) (type: bigint), COALESCE(ndv_compute_bit_vector(_col40),0) (type: bigint), _col40 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col41,0)) (type: bigint), COALESCE(_col42,0) (type: double), (_col2 - _col43) (type: bigint), COALESCE(ndv_compute_bit_vector(_col44),0) (type: bigint), _col44 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col45,0)) (type: bigint), COALESCE(_col46,0) (type: double), (_col2 - _col47) (type: bigint), COALESCE(ndv_compute_bit_vector(_col48),0) (type: bigint), _col48 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col49,0)) (type: bigint), COALESCE(_col50,0) (type: double), (_col2 - _col51) (type: bigint), COALESCE(ndv_compute_bit_vector(_col52),0) (type: bigint), _col52 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col53,0)) (type: bigint), COALESCE(_col54,0) (type: double), (_col2 - _col55) (type: bigint), COALESCE(ndv_compute_bit_vector(_col56),0) (type: bigint), _col56 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col57,0)) (type: bigint), COALESCE(_col58,0) (type: double), (_col2 - _col59) (type: bigint), COALESCE(ndv_compute_bit_vector(_col60),0) (type: bigint), _col60 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col61,0)) (type: bigint), COALESCE(_col62,0) (type: double), (_col2 - _col63) (type: bigint), COALESCE(ndv_compute_bit_vector(_col64),0) (type: bigint), _col64 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col65,0)) (type: bigint), COALESCE(_col66,0) (type: double), (_col2 - _col67) (type: bigint), COALESCE(ndv_compute_bit_vector(_col68),0) (type: bigint), _col68 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col69,0)) (type: bigint), COALESCE(_col70,0) (type: double), (_col2 - _col71) (type: bigint), COALESCE(ndv_compute_bit_vector(_col72),0) (type: bigint), _col72 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col73,0)) (type: bigint), COALESCE(_col74,0) (type: double), (_col2 - _col75) (type: bigint), COALESCE(ndv_compute_bit_vector(_col76),0) (type: bigint), _col76 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col77,0)) (type: bigint), COALESCE(_col78,0) (type: double), (_col2 - _col79) (type: bigint), COALESCE(ndv_compute_bit_vector(_col80),0) (type: bigint), _col80 (type: binary)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30, _col31, _col32, _col33, _col34, _col35, _col36, _col37, _col38, _col39, _col40, _col41, _col42, _col43, _col44, _col45, _col46, _col47, _col48, _col49, _col50, _col51, _col52, _col53, _col54, _col55, _col56, _col57, _col58, _col59, _col60, _col61, _col62, _col63, _col64, _col65, _col66, _col67, _col68, _col69, _col70, _col71, _col72, _col73, _col74, _col75, _col76, _col77, _col78, _col79, _col80, _col81, _col82, _col83, _col84, _col85, _col86, _col87, _col88, _col89, _col90, _col91, _col92, _col93, _col94, _col95, _col96, _col97, _col98, _col99, _col100, _col101, _col102, _col103, _col104, _col105, _col106, _col107, _col108, _col109, _col110, _col111, _col112, _col113, _col114, _col115, _col116, _col117, _col118, _col119
                  Statistics: Num rows: 1 Data size: 5320 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 5320 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.dest1_n1

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20
          Column Types: string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
          Table: default.dest1_n1

PREHOOK: query: FROM src INSERT OVERWRITE TABLE dest1_n1 SELECT 'a' LIKE '%a%', 'b' LIKE '%a%', 'ab' LIKE '%a%', 'ab' LIKE '%a_',
  '%_' LIKE '\%\_', 'ab' LIKE '\%\_', 'ab' LIKE '_a%', 'ab' LIKE 'a',
  '' RLIKE '.*', 'a' RLIKE '[ab]', '' RLIKE '[ab]', 'hadoop' RLIKE '[a-z]*', 'hadoop' RLIKE 'o*',
  REGEXP_REPLACE('abc', 'b', 'c'), REGEXP_REPLACE('abc', 'z', 'a'), REGEXP_REPLACE('abbbb', 'bb', 'b'),
  REGEXP_REPLACE('hadoop', '(.)[a-z]*', '$1ive'), REGEXP_REPLACE('hadoopAAA','A.*',''),
  REGEXP_REPLACE('abc', '', 'A'), 'abc' RLIKE ''
  WHERE src.key = 86
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n1
POSTHOOK: query: FROM src INSERT OVERWRITE TABLE dest1_n1 SELECT 'a' LIKE '%a%', 'b' LIKE '%a%', 'ab' LIKE '%a%', 'ab' LIKE '%a_',
  '%_' LIKE '\%\_', 'ab' LIKE '\%\_', 'ab' LIKE '_a%', 'ab' LIKE 'a',
  '' RLIKE '.*', 'a' RLIKE '[ab]', '' RLIKE '[ab]', 'hadoop' RLIKE '[a-z]*', 'hadoop' RLIKE 'o*',
  REGEXP_REPLACE('abc', 'b', 'c'), REGEXP_REPLACE('abc', 'z', 'a'), REGEXP_REPLACE('abbbb', 'bb', 'b'),
  REGEXP_REPLACE('hadoop', '(.)[a-z]*', '$1ive'), REGEXP_REPLACE('hadoopAAA','A.*',''),
  REGEXP_REPLACE('abc', '', 'A'), 'abc' RLIKE ''
  WHERE src.key = 86
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n1
POSTHOOK: Lineage: dest1_n1.c1 EXPRESSION []
POSTHOOK: Lineage: dest1_n1.c10 EXPRESSION []
POSTHOOK: Lineage: dest1_n1.c11 EXPRESSION []
POSTHOOK: Lineage: dest1_n1.c12 EXPRESSION []
POSTHOOK: Lineage: dest1_n1.c13 EXPRESSION []
POSTHOOK: Lineage: dest1_n1.c14 SIMPLE []
POSTHOOK: Lineage: dest1_n1.c15 SIMPLE []
POSTHOOK: Lineage: dest1_n1.c16 SIMPLE []
POSTHOOK: Lineage: dest1_n1.c17 SIMPLE []
POSTHOOK: Lineage: dest1_n1.c18 SIMPLE []
POSTHOOK: Lineage: dest1_n1.c19 SIMPLE []
POSTHOOK: Lineage: dest1_n1.c2 EXPRESSION []
POSTHOOK: Lineage: dest1_n1.c20 EXPRESSION []
POSTHOOK: Lineage: dest1_n1.c3 EXPRESSION []
POSTHOOK: Lineage: dest1_n1.c4 EXPRESSION []
POSTHOOK: Lineage: dest1_n1.c5 EXPRESSION []
POSTHOOK: Lineage: dest1_n1.c6 EXPRESSION []
POSTHOOK: Lineage: dest1_n1.c7 EXPRESSION []
POSTHOOK: Lineage: dest1_n1.c8 EXPRESSION []
POSTHOOK: Lineage: dest1_n1.c9 EXPRESSION []
PREHOOK: query: SELECT dest1_n1.* FROM dest1_n1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest1_n1
#### A masked pattern was here ####
POSTHOOK: query: SELECT dest1_n1.* FROM dest1_n1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest1_n1
#### A masked pattern was here ####
TRUE	FALSE	TRUE	TRUE	TRUE	FALSE	FALSE	FALSE	TRUE	TRUE	FALSE	TRUE	TRUE	acc	abc	abb	hive	hadoop	AaAbAcA	FALSE
