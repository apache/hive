PREHOOK: query: create table t1 (a1 int, b1 string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@t1
POSTHOOK: query: create table t1 (a1 int, b1 string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t1
PREHOOK: query: create table t2 (a2 int, b2 string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@t2
POSTHOOK: query: create table t2 (a2 int, b2 string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t2
PREHOOK: query: insert into t1 values (2, 'four'), (1, 'four'), (NULL, NULL), (NULL, 'nothing')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@t1
POSTHOOK: query: insert into t1 values (2, 'four'), (1, 'four'), (NULL, NULL), (NULL, 'nothing')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@t1
POSTHOOK: Lineage: t1.a1 SCRIPT []
POSTHOOK: Lineage: t1.b1 SCRIPT []
col1	col2
PREHOOK: query: insert into t2 values (1, 'three'), (3, 'three'), (NULL, NULL), (NULL, 'nothing2')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@t2
POSTHOOK: query: insert into t2 values (1, 'three'), (3, 'three'), (NULL, NULL), (NULL, 'nothing2')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@t2
POSTHOOK: Lineage: t2.a2 SCRIPT []
POSTHOOK: Lineage: t2.b2 SCRIPT []
col1	col2
PREHOOK: query: explain cbo
select a2, b2 from t2 where 1=0
union
select a1, b1 from t1
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: explain cbo
select a2, b2 from t2 where 1=0
union
select a1, b1 from t1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
Explain
CBO PLAN:
HiveAggregate(group=[{0, 1}])
  HiveTableScan(table=[[default, t1]], table:alias=[t1])

PREHOOK: query: explain cbo
select a1, b1 from t1
union
select a2, b2 from t2 where 1=0
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: explain cbo
select a1, b1 from t1
union
select a2, b2 from t2 where 1=0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
Explain
CBO PLAN:
HiveAggregate(group=[{0, 1}])
  HiveTableScan(table=[[default, t1]], table:alias=[t1])

PREHOOK: query: explain
select a1, b1 from t1
union
select a2, b2 from t2 where 1=0
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: explain
select a1, b1 from t1
union
select a2, b2 from t2 where 1=0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
Explain
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1
                  Statistics: Num rows: 4 Data size: 364 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: a1 (type: int), b1 (type: string)
                    outputColumnNames: a1, b1
                    Statistics: Num rows: 4 Data size: 364 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: a1 (type: int), b1 (type: string)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 2 Data size: 184 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: string)
                        null sort order: zz
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: int), _col1 (type: string)
                        Statistics: Num rows: 2 Data size: 184 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: int), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 2 Data size: 184 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 2 Data size: 184 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select a1, b1 from t1
union
select a2, b2 from t2 where 1=0
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: select a1, b1 from t1
union
select a2, b2 from t2 where 1=0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
a1	b1
1	four
2	four
NULL	nothing
NULL	NULL
