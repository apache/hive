PREHOOK: query: create table testvec(id int, dt int, greg_dt string) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@testvec
POSTHOOK: query: create table testvec(id int, dt int, greg_dt string) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@testvec
PREHOOK: query: insert into table testvec
values
(1,20150330, '2015-03-30'),
(2,20150301, '2015-03-01'),
(3,20150502, '2015-05-02'),
(4,20150401, '2015-04-01'),
(5,20150313, '2015-03-13'),
(6,20150314, '2015-03-14'),
(7,20150404, '2015-04-04')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@testvec
POSTHOOK: query: insert into table testvec
values
(1,20150330, '2015-03-30'),
(2,20150301, '2015-03-01'),
(3,20150502, '2015-05-02'),
(4,20150401, '2015-04-01'),
(5,20150313, '2015-03-13'),
(6,20150314, '2015-03-14'),
(7,20150404, '2015-04-04')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@testvec
POSTHOOK: Lineage: testvec.dt SCRIPT []
POSTHOOK: Lineage: testvec.greg_dt SCRIPT []
POSTHOOK: Lineage: testvec.id SCRIPT []
PREHOOK: query: explain vectorization detail
select max(dt), max(greg_dt) from testvec where id=5
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select max(dt), max(greg_dt) from testvec where id=5
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: testvec
                  Statistics: Num rows: 7 Data size: 714 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:id:int, 1:dt:int, 2:greg_dt:string, 3:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterLongColEqualLongScalar(col 0:int, val 5)
                    predicate: (id = 5) (type: boolean)
                    Statistics: Num rows: 1 Data size: 102 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: dt (type: int), greg_dt (type: string)
                      outputColumnNames: dt, greg_dt
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [1, 2]
                      Statistics: Num rows: 1 Data size: 102 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: max(dt), max(greg_dt)
                        Group By Vectorization:
                            aggregators: VectorUDAFMaxLong(col 1:int) -> int, VectorUDAFMaxString(col 2:string) -> string
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0, 1]
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          sort order: 
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkEmptyKeyOperator
                              keyColumnNums: []
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                              valueColumnNums: [0, 1]
                          Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: int), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    includeColumns: [0, 1, 2]
                    dataColumns: id:int, dt:int, greg_dt:string
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: 
                reduceColumnSortOrder: 
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 2
                    dataColumns: VALUE._col0:int, VALUE._col1:string
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0), max(VALUE._col1)
                Group By Vectorization:
                    aggregators: VectorUDAFMaxLong(col 0:int) -> int, VectorUDAFMaxString(col 1:string) -> string
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1]
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select max(dt), max(greg_dt) from testvec where id=5
PREHOOK: type: QUERY
PREHOOK: Input: default@testvec
#### A masked pattern was here ####
POSTHOOK: query: select max(dt), max(greg_dt) from testvec where id=5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@testvec
#### A masked pattern was here ####
20150313	2015-03-13
