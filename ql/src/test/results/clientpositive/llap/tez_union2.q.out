PREHOOK: query: explain 
SELECT key, value FROM
(
  SELECT key, value FROM src
  UNION ALL
  SELECT key, key as value FROM ( 
    SELECT distinct key FROM (
      SELECT key, value FROM (
        SELECT key, value FROM src
        UNION ALL
        SELECT key, value FROM src
      )t1 
    group by key, value)t2
  )t3
)t4
group by key, value
PREHOOK: type: QUERY
POSTHOOK: query: explain 
SELECT key, value FROM
(
  SELECT key, value FROM src
  UNION ALL
  SELECT key, key as value FROM ( 
    SELECT distinct key FROM (
      SELECT key, value FROM (
        SELECT key, value FROM src
        UNION ALL
        SELECT key, value FROM src
      )t1 
    group by key, value)t2
  )t3
)t4
group by key, value
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Union 2 (CONTAINS)
        Map 4 <- Union 5 (CONTAINS)
        Map 7 <- Union 5 (CONTAINS)
        Reducer 3 <- Union 2 (SIMPLE_EDGE)
        Reducer 6 <- Union 2 (CONTAINS), Union 5 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: _col0 (type: string), _col1 (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 408 Data size: 72624 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                        Statistics: Num rows: 408 Data size: 72624 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: _col0 (type: string), _col1 (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: _col0 (type: string), _col1 (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 408 Data size: 72624 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 408 Data size: 72624 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: string)
                  outputColumnNames: _col0
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Group By Operator
                    keys: _col0 (type: string)
                    mode: complete
                    outputColumnNames: _col0
                    Statistics: Num rows: 316 Data size: 27492 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: _col0 (type: string), _col0 (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 316 Data size: 54984 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        keys: _col0 (type: string), _col1 (type: string)
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 408 Data size: 72624 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: string), _col1 (type: string)
                          sort order: ++
                          Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                          Statistics: Num rows: 408 Data size: 72624 Basic stats: COMPLETE Column stats: COMPLETE
        Union 2 
            Vertex: Union 2
        Union 5 
            Vertex: Union 5

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT key, value FROM
(
  SELECT key, value FROM src
  UNION ALL
  SELECT key, key as value FROM ( 
    SELECT distinct key FROM (
      SELECT key, value FROM (
        SELECT key, value FROM src
        UNION ALL
        SELECT key, value FROM src
      )t1 
    group by key, value)t2
  )t3
)t4
group by key, value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: SELECT key, value FROM
(
  SELECT key, value FROM src
  UNION ALL
  SELECT key, key as value FROM ( 
    SELECT distinct key FROM (
      SELECT key, value FROM (
        SELECT key, value FROM src
        UNION ALL
        SELECT key, value FROM src
      )t1 
    group by key, value)t2
  )t3
)t4
group by key, value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0	0
10	10
104	104
104	val_104
105	105
105	val_105
113	val_113
118	val_118
119	119
12	val_12
120	val_120
129	129
131	131
133	val_133
136	136
136	val_136
145	145
155	val_155
157	157
158	val_158
160	val_160
162	162
162	val_162
164	164
165	165
168	val_168
17	val_17
170	val_170
175	val_175
177	177
178	178
179	179
18	val_18
180	val_180
186	val_186
187	187
189	189
19	val_19
190	190
193	193
197	val_197
200	val_200
202	202
208	208
216	val_216
218	val_218
222	val_222
224	val_224
228	228
228	val_228
230	230
235	val_235
237	237
237	val_237
239	val_239
242	242
244	val_244
247	val_247
256	256
256	val_256
260	260
263	val_263
265	265
273	val_273
28	val_28
283	val_283
286	val_286
292	val_292
305	305
306	val_306
308	308
308	val_308
317	317
327	val_327
33	val_33
348	val_348
35	35
353	val_353
362	val_362
366	val_366
377	377
382	382
392	392
396	val_396
397	val_397
399	399
401	401
401	val_401
403	403
409	val_409
411	val_411
419	val_419
421	421
427	val_427
43	val_43
431	431
432	val_432
436	val_436
439	val_439
443	val_443
444	444
446	446
452	452
453	453
453	val_453
455	455
457	457
460	460
460	val_460
462	462
462	val_462
463	463
467	467
47	47
47	val_47
470	470
472	val_472
477	477
479	479
485	val_485
489	489
491	491
493	493
494	494
495	495
496	val_496
498	498
54	val_54
57	57
64	val_64
66	66
70	70
70	val_70
8	val_8
83	val_83
84	84
84	val_84
85	val_85
90	90
90	val_90
97	97
0	val_0
103	val_103
11	11
114	val_114
118	118
125	val_125
133	133
137	137
138	val_138
146	146
146	val_146
15	15
150	val_150
152	152
152	val_152
153	val_153
155	155
156	156
156	val_156
157	val_157
158	158
160	160
163	163
165	val_165
167	167
168	168
170	170
172	val_172
175	175
177	val_177
179	val_179
18	18
181	181
187	val_187
191	191
195	val_195
196	val_196
197	197
199	199
200	200
201	201
217	val_217
219	219
223	223
229	229
233	233
242	val_242
248	val_248
249	249
252	252
252	val_252
257	257
265	val_265
266	266
27	27
27	val_27
272	272
272	val_272
277	277
280	val_280
291	val_291
298	298
30	30
305	val_305
309	309
309	val_309
311	val_311
315	val_315
316	316
317	val_317
318	318
322	322
322	val_322
332	332
333	333
333	val_333
336	336
34	val_34
344	344
345	345
345	val_345
35	val_35
356	val_356
364	val_364
367	367
368	368
368	val_368
369	val_369
37	val_37
373	val_373
377	val_377
378	378
4	val_4
402	val_402
404	val_404
41	41
411	411
413	val_413
417	417
419	419
42	val_42
427	427
430	val_430
431	val_431
432	432
437	437
443	443
444	val_444
448	448
449	449
449	val_449
452	val_452
454	454
454	val_454
457	val_457
459	459
463	val_463
466	466
466	val_466
470	val_470
472	472
475	val_475
481	val_481
482	482
487	487
489	val_489
491	val_491
492	492
496	496
57	val_57
65	val_65
66	val_66
69	69
74	val_74
76	76
76	val_76
77	77
78	val_78
8	8
80	80
9	9
9	val_9
92	val_92
95	val_95
100	val_100
103	103
113	113
114	114
116	116
119	val_119
125	125
126	126
128	128
128	val_128
129	val_129
145	val_145
149	149
153	153
166	166
167	val_167
172	172
174	174
174	val_174
176	176
178	val_178
180	180
181	val_181
183	183
186	186
19	19
192	192
193	val_193
194	194
195	195
196	196
199	val_199
20	20
20	val_20
201	val_201
209	209
213	213
213	val_213
214	val_214
216	216
217	217
218	218
219	val_219
221	val_221
223	val_223
224	224
226	val_226
233	val_233
238	238
239	239
24	24
241	241
241	val_241
244	244
247	247
248	248
249	val_249
26	26
260	val_260
262	262
262	val_262
275	275
277	val_277
28	28
280	280
281	val_281
282	282
283	283
287	val_287
288	288
288	val_288
298	val_298
302	val_302
307	307
310	310
310	val_310
311	311
315	315
323	323
323	val_323
335	335
336	val_336
338	338
34	34
341	341
341	val_341
342	342
344	val_344
348	348
351	351
351	val_351
356	356
362	362
364	364
365	365
374	374
375	val_375
382	val_382
384	val_384
386	386
389	389
393	393
393	val_393
394	394
395	val_395
399	val_399
4	4
400	400
403	val_403
406	406
406	val_406
409	409
414	414
418	val_418
424	424
435	val_435
455	val_455
458	458
459	val_459
468	468
469	469
477	val_477
478	478
478	val_478
479	val_479
481	481
482	val_482
484	484
490	490
493	val_493
494	val_494
495	val_495
497	val_497
5	val_5
51	51
53	53
54	54
58	58
58	val_58
65	65
67	val_67
72	72
74	74
77	val_77
80	val_80
85	85
86	val_86
87	87
92	92
97	val_97
98	98
98	val_98
10	val_10
100	100
11	val_11
111	111
111	val_111
116	val_116
12	12
120	120
126	val_126
131	val_131
134	134
134	val_134
137	val_137
138	138
143	143
143	val_143
149	val_149
15	val_15
150	150
163	val_163
164	val_164
166	val_166
169	169
169	val_169
17	17
176	val_176
183	val_183
189	val_189
190	val_190
191	val_191
192	val_192
194	val_194
2	2
2	val_2
202	val_202
203	203
203	val_203
205	205
205	val_205
207	207
207	val_207
208	val_208
209	val_209
214	214
221	221
222	222
226	226
229	val_229
230	val_230
235	235
238	val_238
24	val_24
255	255
255	val_255
257	val_257
258	258
258	val_258
26	val_26
263	263
266	val_266
273	273
274	274
274	val_274
275	val_275
278	278
278	val_278
281	281
282	val_282
284	284
284	val_284
285	285
285	val_285
286	286
287	287
289	289
289	val_289
291	291
292	292
296	296
296	val_296
30	val_30
302	302
306	306
307	val_307
316	val_316
318	val_318
321	321
321	val_321
325	325
325	val_325
327	327
33	33
331	331
331	val_331
332	val_332
335	val_335
338	val_338
339	339
339	val_339
342	val_342
353	353
360	360
360	val_360
365	val_365
366	366
367	val_367
369	369
37	37
373	373
374	val_374
375	375
378	val_378
379	379
379	val_379
384	384
386	val_386
389	val_389
392	val_392
394	val_394
395	395
396	396
397	397
400	val_400
402	402
404	404
407	407
407	val_407
41	val_41
413	413
414	val_414
417	val_417
418	418
42	42
421	val_421
424	val_424
429	429
429	val_429
43	43
430	430
435	435
436	436
437	val_437
438	438
438	val_438
439	439
44	44
44	val_44
446	val_446
448	val_448
458	val_458
467	val_467
468	val_468
469	val_469
475	475
480	480
480	val_480
483	483
483	val_483
484	val_484
485	485
487	val_487
490	val_490
492	val_492
497	497
498	val_498
5	5
51	val_51
53	val_53
64	64
67	67
69	val_69
72	val_72
78	78
82	82
82	val_82
83	83
86	86
87	val_87
95	95
96	96
96	val_96
