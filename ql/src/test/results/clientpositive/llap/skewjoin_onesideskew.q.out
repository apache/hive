PREHOOK: query: DROP TABLE IF EXISTS skewtable
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS skewtable
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE TABLE skewtable (key STRING, value STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@skewtable
POSTHOOK: query: CREATE TABLE skewtable (key STRING, value STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@skewtable
PREHOOK: query: INSERT INTO TABLE skewtable VALUES ("0", "val_0")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@skewtable
POSTHOOK: query: INSERT INTO TABLE skewtable VALUES ("0", "val_0")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@skewtable
POSTHOOK: Lineage: skewtable.key SCRIPT []
POSTHOOK: Lineage: skewtable.value SCRIPT []
PREHOOK: query: INSERT INTO TABLE skewtable VALUES ("0", "val_0")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@skewtable
POSTHOOK: query: INSERT INTO TABLE skewtable VALUES ("0", "val_0")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@skewtable
POSTHOOK: Lineage: skewtable.key SCRIPT []
POSTHOOK: Lineage: skewtable.value SCRIPT []
PREHOOK: query: INSERT INTO TABLE skewtable VALUES ("0", "val_0")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@skewtable
POSTHOOK: query: INSERT INTO TABLE skewtable VALUES ("0", "val_0")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@skewtable
POSTHOOK: Lineage: skewtable.key SCRIPT []
POSTHOOK: Lineage: skewtable.value SCRIPT []
PREHOOK: query: DROP TABLE IF EXISTS nonskewtable
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS nonskewtable
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE TABLE nonskewtable (key STRING, value STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@nonskewtable
POSTHOOK: query: CREATE TABLE nonskewtable (key STRING, value STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@nonskewtable
PREHOOK: query: INSERT INTO TABLE nonskewtable VALUES ("1", "val_1")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@nonskewtable
POSTHOOK: query: INSERT INTO TABLE nonskewtable VALUES ("1", "val_1")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@nonskewtable
POSTHOOK: Lineage: nonskewtable.key SCRIPT []
POSTHOOK: Lineage: nonskewtable.value SCRIPT []
PREHOOK: query: INSERT INTO TABLE nonskewtable VALUES ("2", "val_2")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@nonskewtable
POSTHOOK: query: INSERT INTO TABLE nonskewtable VALUES ("2", "val_2")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@nonskewtable
POSTHOOK: Lineage: nonskewtable.key SCRIPT []
POSTHOOK: Lineage: nonskewtable.value SCRIPT []
PREHOOK: query: EXPLAIN
CREATE TABLE result_n1 AS SELECT a.* FROM skewtable a JOIN nonskewtable b ON a.key=b.key
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@nonskewtable
PREHOOK: Input: default@skewtable
PREHOOK: Output: database:default
PREHOOK: Output: default@result_n1
POSTHOOK: query: EXPLAIN
CREATE TABLE result_n1 AS SELECT a.* FROM skewtable a JOIN nonskewtable b ON a.key=b.key
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@nonskewtable
POSTHOOK: Input: default@skewtable
POSTHOOK: Output: database:default
POSTHOOK: Output: default@result_n1
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-4 depends on stages: Stage-0, Stage-2
  Stage-3 depends on stages: Stage-4
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  filterExpr: key is not null (type: boolean)
                  Statistics: Num rows: 3 Data size: 522 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: key is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 522 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: string), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 3 Data size: 522 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 3 Data size: 522 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: b
                  filterExpr: key is not null (type: boolean)
                  Statistics: Num rows: 2 Data size: 170 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: key is not null (type: boolean)
                    Statistics: Num rows: 2 Data size: 170 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: string)
                      outputColumnNames: _col0
                      Statistics: Num rows: 2 Data size: 170 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 2 Data size: 170 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: string)
                  1 _col0 (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 3 Data size: 522 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 3 Data size: 522 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.result_n1
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string)
                  outputColumnNames: col1, col2
                  Statistics: Num rows: 3 Data size: 522 Basic stats: COMPLETE Column stats: COMPLETE
                  Group By Operator
                    aggregations: compute_stats(col1, 'hll'), compute_stats(col2, 'hll')
                    minReductionHashAggr: 0.6666666
                    mode: hash
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 880 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 880 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>), _col1 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: compute_stats(VALUE._col0), compute_stats(VALUE._col1)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 880 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 880 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-4
    Create Table
      columns: key string, value string
      name: default.result_n1
      input format: org.apache.hadoop.mapred.TextInputFormat
      output format: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
      serde name: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key, value
          Column Types: string, string
          Table: default.result_n1

  Stage: Stage-0
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####

PREHOOK: query: CREATE TABLE result_n1 AS SELECT a.* FROM skewtable a JOIN nonskewtable b ON a.key=b.key
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@nonskewtable
PREHOOK: Input: default@skewtable
PREHOOK: Output: database:default
PREHOOK: Output: default@result_n1
POSTHOOK: query: CREATE TABLE result_n1 AS SELECT a.* FROM skewtable a JOIN nonskewtable b ON a.key=b.key
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@nonskewtable
POSTHOOK: Input: default@skewtable
POSTHOOK: Output: database:default
POSTHOOK: Output: default@result_n1
POSTHOOK: Lineage: result_n1.key SIMPLE [(skewtable)a.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: result_n1.value SIMPLE [(skewtable)a.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: SELECT * FROM result_n1
PREHOOK: type: QUERY
PREHOOK: Input: default@result_n1
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM result_n1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@result_n1
#### A masked pattern was here ####
