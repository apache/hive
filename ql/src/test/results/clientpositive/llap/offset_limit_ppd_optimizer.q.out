PREHOOK: query: explain
select key,value from src order by key limit 10,20
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key,value from src order by key limit 10,20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                      TopN Hash Memory Usage: 0.3
                      value expressions: _col1 (type: string)
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 20
                  Offset of rows: 10
                  Statistics: Num rows: 20 Data size: 3560 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 20 Data size: 3560 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20
      Processor Tree:
        ListSink

PREHOOK: query: select key,value from src order by key limit 10,20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select key,value from src order by key limit 10,20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
105	val_105
11	val_11
111	val_111
113	val_113
113	val_113
114	val_114
116	val_116
118	val_118
118	val_118
119	val_119
119	val_119
119	val_119
12	val_12
12	val_12
120	val_120
120	val_120
125	val_125
125	val_125
126	val_126
128	val_128
PREHOOK: query: explain
select key,value from src order by key desc limit 10,20
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key,value from src order by key desc limit 10,20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: -
                      Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                      TopN Hash Memory Usage: 0.3
                      value expressions: _col1 (type: string)
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 20
                  Offset of rows: 10
                  Statistics: Num rows: 20 Data size: 3560 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 20 Data size: 3560 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20
      Processor Tree:
        ListSink

PREHOOK: query: select key,value from src order by key desc limit 10,20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select key,value from src order by key desc limit 10,20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
90	val_90
9	val_9
87	val_87
86	val_86
85	val_85
84	val_84
84	val_84
83	val_83
83	val_83
82	val_82
80	val_80
8	val_8
78	val_78
77	val_77
76	val_76
76	val_76
74	val_74
72	val_72
72	val_72
70	val_70
PREHOOK: query: explain
select value, sum(key + 1) as sum from src group by value order by value limit 10,20
PREHOOK: type: QUERY
POSTHOOK: query: explain
select value, sum(key + 1) as sum from src group by value order by value limit 10,20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: value (type: string), (UDFToDouble(key) + 1.0D) (type: double)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: sum(_col1)
                      keys: _col0 (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 250 Data size: 24750 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 250 Data size: 24750 Basic stats: COMPLETE Column stats: COMPLETE
                        TopN Hash Memory Usage: 0.3
                        value expressions: _col1 (type: double)
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 250 Data size: 24750 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 20
                  Offset of rows: 10
                  Statistics: Num rows: 20 Data size: 1980 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 20 Data size: 1980 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20
      Processor Tree:
        ListSink

PREHOOK: query: select value, sum(key + 1) as sum from src group by value order by value limit 10,20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select value, sum(key + 1) as sum from src group by value order by value limit 10,20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
val_116	117.0
val_118	238.0
val_119	360.0
val_12	26.0
val_120	242.0
val_125	252.0
val_126	127.0
val_128	387.0
val_129	260.0
val_131	132.0
val_133	134.0
val_134	270.0
val_136	137.0
val_137	276.0
val_138	556.0
val_143	144.0
val_145	146.0
val_146	294.0
val_149	300.0
val_15	32.0
PREHOOK: query: explain
select value,avg(key + 1) from src group by value order by value limit 10,20
PREHOOK: type: QUERY
POSTHOOK: query: explain
select value,avg(key + 1) from src group by value order by value limit 10,20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: value (type: string), (UDFToDouble(key) + 1.0D) (type: double)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: sum(_col1), count(_col1)
                      keys: _col0 (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 250 Data size: 26750 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 250 Data size: 26750 Basic stats: COMPLETE Column stats: COMPLETE
                        TopN Hash Memory Usage: 0.3
                        value expressions: _col1 (type: double), _col2 (type: bigint)
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 250 Data size: 26750 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: string), (_col1 / _col2) (type: double)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 250 Data size: 24750 Basic stats: COMPLETE Column stats: COMPLETE
                  Limit
                    Number of rows: 20
                    Offset of rows: 10
                    Statistics: Num rows: 20 Data size: 1980 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 20 Data size: 1980 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20
      Processor Tree:
        ListSink

PREHOOK: query: select value,avg(key + 1) from src group by value order by value limit 10,20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select value,avg(key + 1) from src group by value order by value limit 10,20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
val_116	117.0
val_118	119.0
val_119	120.0
val_12	13.0
val_120	121.0
val_125	126.0
val_126	127.0
val_128	129.0
val_129	130.0
val_131	132.0
val_133	134.0
val_134	135.0
val_136	137.0
val_137	138.0
val_138	139.0
val_143	144.0
val_145	146.0
val_146	147.0
val_149	150.0
val_15	16.0
PREHOOK: query: explain
select distinct(cdouble) as dis from alltypesorc order by dis limit 10,20
PREHOOK: type: QUERY
POSTHOOK: query: explain
select distinct(cdouble) as dis from alltypesorc order by dis limit 10,20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  Statistics: Num rows: 12288 Data size: 73400 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: cdouble (type: double)
                    outputColumnNames: cdouble
                    Statistics: Num rows: 12288 Data size: 73400 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: cdouble (type: double)
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 5570 Data size: 33272 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: double)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: double)
                        Statistics: Num rows: 5570 Data size: 33272 Basic stats: COMPLETE Column stats: COMPLETE
                        TopN Hash Memory Usage: 0.3
            Execution mode: llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: double)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 5570 Data size: 33272 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 20
                  Offset of rows: 10
                  Statistics: Num rows: 20 Data size: 128 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 20 Data size: 128 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20
      Processor Tree:
        ListSink

PREHOOK: query: select distinct(cdouble) as dis from alltypesorc order by dis limit 10,20
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: select distinct(cdouble) as dis from alltypesorc order by dis limit 10,20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
-16309.0
-16307.0
-16306.0
-16305.0
-16300.0
-16296.0
-16280.0
-16277.0
-16274.0
-16269.0
-16243.0
-16236.0
-16227.0
-16225.0
-16221.0
-16218.0
-16217.0
-16211.0
-16208.0
-16207.0
PREHOOK: query: explain
select ctinyint, count(distinct(cdouble)) from alltypesorc group by ctinyint order by ctinyint limit 10,20
PREHOOK: type: QUERY
POSTHOOK: query: explain
select ctinyint, count(distinct(cdouble)) from alltypesorc group by ctinyint order by ctinyint limit 10,20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  Statistics: Num rows: 12288 Data size: 110096 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: ctinyint (type: tinyint), cdouble (type: double)
                    outputColumnNames: ctinyint, cdouble
                    Statistics: Num rows: 12288 Data size: 110096 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: ctinyint (type: tinyint), cdouble (type: double)
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 6144 Data size: 55052 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: tinyint), _col1 (type: double)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: tinyint)
                        Statistics: Num rows: 6144 Data size: 55052 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: tinyint), KEY._col1 (type: double)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 6144 Data size: 55052 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: count(_col1)
                  keys: _col0 (type: tinyint)
                  mode: complete
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 128 Data size: 1412 Basic stats: COMPLETE Column stats: COMPLETE
                  Limit
                    Number of rows: 20
                    Offset of rows: 10
                    Statistics: Num rows: 20 Data size: 224 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 20 Data size: 224 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20
      Processor Tree:
        ListSink

PREHOOK: query: select ctinyint, count(distinct(cdouble)) from alltypesorc group by ctinyint order by ctinyint limit 10,20
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: select ctinyint, count(distinct(cdouble)) from alltypesorc group by ctinyint order by ctinyint limit 10,20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
-55	29
-54	26
-53	22
-52	33
-51	21
-50	30
-49	26
-48	29
-47	22
-46	24
-45	24
-44	24
-43	30
-42	17
-41	24
-40	26
-39	22
-38	31
-37	20
-36	26
PREHOOK: query: explain
select ctinyint, count(cdouble) from (select ctinyint, cdouble from alltypesorc group by ctinyint, cdouble) t1 group by ctinyint order by ctinyint limit 10,20
PREHOOK: type: QUERY
POSTHOOK: query: explain
select ctinyint, count(cdouble) from (select ctinyint, cdouble from alltypesorc group by ctinyint, cdouble) t1 group by ctinyint order by ctinyint limit 10,20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  Statistics: Num rows: 12288 Data size: 110096 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: ctinyint (type: tinyint), cdouble (type: double)
                    outputColumnNames: ctinyint, cdouble
                    Statistics: Num rows: 12288 Data size: 110096 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: ctinyint (type: tinyint), cdouble (type: double)
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 6144 Data size: 55052 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: tinyint), _col1 (type: double)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: tinyint)
                        Statistics: Num rows: 6144 Data size: 55052 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: tinyint), KEY._col1 (type: double)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 6144 Data size: 55052 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: count(_col1)
                  keys: _col0 (type: tinyint)
                  mode: complete
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 128 Data size: 1412 Basic stats: COMPLETE Column stats: COMPLETE
                  Limit
                    Number of rows: 20
                    Offset of rows: 10
                    Statistics: Num rows: 20 Data size: 224 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 20 Data size: 224 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20
      Processor Tree:
        ListSink

PREHOOK: query: select ctinyint, count(cdouble) from (select ctinyint, cdouble from alltypesorc group by ctinyint, cdouble) t1 group by ctinyint order by ctinyint limit 10,20
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: select ctinyint, count(cdouble) from (select ctinyint, cdouble from alltypesorc group by ctinyint, cdouble) t1 group by ctinyint order by ctinyint limit 10,20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
-55	29
-54	26
-53	22
-52	33
-51	21
-50	30
-49	26
-48	29
-47	22
-46	24
-45	24
-44	24
-43	30
-42	17
-41	24
-40	26
-39	22
-38	31
-37	20
-36	26
PREHOOK: query: explain
select ctinyint, count(distinct(cstring1)), count(distinct(cstring2)) from alltypesorc group by ctinyint order by ctinyint limit 10,20
PREHOOK: type: QUERY
POSTHOOK: query: explain
select ctinyint, count(distinct(cstring1)), count(distinct(cstring2)) from alltypesorc group by ctinyint order by ctinyint limit 10,20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  Statistics: Num rows: 12288 Data size: 1779850 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: ctinyint (type: tinyint), cstring1 (type: string), cstring2 (type: string)
                    outputColumnNames: ctinyint, cstring1, cstring2
                    Statistics: Num rows: 12288 Data size: 1779850 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count(DISTINCT cstring1), count(DISTINCT cstring2)
                      keys: ctinyint (type: tinyint), cstring1 (type: string), cstring2 (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 12288 Data size: 1976458 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: tinyint), _col1 (type: string), _col2 (type: string)
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: tinyint)
                        Statistics: Num rows: 12288 Data size: 1976458 Basic stats: COMPLETE Column stats: COMPLETE
                        TopN Hash Memory Usage: 0.3
            Execution mode: llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(DISTINCT KEY._col1:0._col0), count(DISTINCT KEY._col1:1._col0)
                keys: KEY._col0 (type: tinyint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 128 Data size: 2436 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 20
                  Offset of rows: 10
                  Statistics: Num rows: 20 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 20 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20
      Processor Tree:
        ListSink

PREHOOK: query: select ctinyint, count(distinct(cstring1)), count(distinct(cstring2)) from alltypesorc group by ctinyint order by ctinyint limit 10,20
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: select ctinyint, count(distinct(cstring1)), count(distinct(cstring2)) from alltypesorc group by ctinyint order by ctinyint limit 10,20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
-55	3	21
-54	3	21
-53	3	17
-52	3	21
-51	1012	1045
-50	3	25
-49	3	24
-48	3	27
-47	3	23
-46	3	19
-45	3	24
-44	3	31
-43	3	26
-42	3	22
-41	3	29
-40	3	25
-39	3	30
-38	3	19
-37	3	27
-36	3	18
PREHOOK: query: explain
select key,value from src order by key limit 0,0
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key,value from src order by key limit 0,0
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: 0
      Processor Tree:
        ListSink

PREHOOK: query: select key,value from src order by key limit 0,0
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select key,value from src order by key limit 0,0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
PREHOOK: query: explain
select value, sum(key) as sum from src group by value order by sum, value limit 10,20
PREHOOK: type: QUERY
POSTHOOK: query: explain
select value, sum(key) as sum from src group by value order by sum, value limit 10,20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: key, value
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: sum(key)
                      keys: value (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 250 Data size: 24750 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 250 Data size: 24750 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: double)
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 250 Data size: 24750 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col1 (type: double), _col0 (type: string)
                  sort order: ++
                  Statistics: Num rows: 250 Data size: 24750 Basic stats: COMPLETE Column stats: COMPLETE
                  TopN Hash Memory Usage: 0.3
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey1 (type: string), KEY.reducesinkkey0 (type: double)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 250 Data size: 24750 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 20
                  Offset of rows: 10
                  Statistics: Num rows: 20 Data size: 1980 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 20 Data size: 1980 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20
      Processor Tree:
        ListSink

PREHOOK: query: select value, sum(key) as sum from src group by value order by sum, value limit 10,20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select value, sum(key) as sum from src group by value order by sum, value limit 10,20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
val_20	20.0
val_12	24.0
val_27	27.0
val_28	28.0
val_15	30.0
val_30	30.0
val_33	33.0
val_34	34.0
val_18	36.0
val_41	41.0
val_43	43.0
val_44	44.0
val_47	47.0
val_24	48.0
val_26	52.0
val_53	53.0
val_54	54.0
val_57	57.0
val_64	64.0
val_65	65.0
PREHOOK: query: explain
select value, sum(key) as sum from src group by value order by value limit 10,20
PREHOOK: type: QUERY
POSTHOOK: query: explain
select value, sum(key) as sum from src group by value order by value limit 10,20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: key, value
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: value (type: string)
                      sort order: +
                      Map-reduce partition columns: value (type: string)
                      Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                      TopN Hash Memory Usage: 0.3
                      value expressions: key (type: string)
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: complete
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 309 Data size: 30591 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 20
                  Offset of rows: 10
                  Statistics: Num rows: 20 Data size: 1980 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 20 Data size: 1980 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20
      Processor Tree:
        ListSink

PREHOOK: query: select value, sum(key) as sum from src group by value order by value limit 10,20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select value, sum(key) as sum from src group by value order by value limit 10,20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
val_116	116.0
val_118	236.0
val_119	357.0
val_12	24.0
val_120	240.0
val_125	250.0
val_126	126.0
val_128	384.0
val_129	258.0
val_131	131.0
val_133	133.0
val_134	268.0
val_136	136.0
val_137	274.0
val_138	552.0
val_143	143.0
val_145	145.0
val_146	292.0
val_149	298.0
val_15	30.0
PREHOOK: query: explain
select key,value,value,value,value,value,value,value,value from src order by key limit 30,70
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key,value,value,value,value,value,value,value,value from src order by key limit 30,70
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 407500 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Statistics: Num rows: 500 Data size: 407500 Basic stats: COMPLETE Column stats: COMPLETE
                      TopN Hash Memory Usage: 2.0E-5
                      value expressions: _col1 (type: string)
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col0 (type: string), VALUE._col0 (type: string), VALUE._col0 (type: string), VALUE._col0 (type: string), VALUE._col0 (type: string), VALUE._col0 (type: string), VALUE._col0 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                Statistics: Num rows: 500 Data size: 407500 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 70
                  Offset of rows: 30
                  Statistics: Num rows: 70 Data size: 57050 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 70 Data size: 57050 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 70
      Processor Tree:
        ListSink

PREHOOK: query: select key,value,value,value,value,value,value,value,value from src order by key limit 30,70
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select key,value,value,value,value,value,value,value,value from src order by key limit 30,70
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
128	val_128	val_128	val_128	val_128	val_128	val_128	val_128	val_128
128	val_128	val_128	val_128	val_128	val_128	val_128	val_128	val_128
129	val_129	val_129	val_129	val_129	val_129	val_129	val_129	val_129
129	val_129	val_129	val_129	val_129	val_129	val_129	val_129	val_129
131	val_131	val_131	val_131	val_131	val_131	val_131	val_131	val_131
133	val_133	val_133	val_133	val_133	val_133	val_133	val_133	val_133
134	val_134	val_134	val_134	val_134	val_134	val_134	val_134	val_134
134	val_134	val_134	val_134	val_134	val_134	val_134	val_134	val_134
136	val_136	val_136	val_136	val_136	val_136	val_136	val_136	val_136
137	val_137	val_137	val_137	val_137	val_137	val_137	val_137	val_137
137	val_137	val_137	val_137	val_137	val_137	val_137	val_137	val_137
138	val_138	val_138	val_138	val_138	val_138	val_138	val_138	val_138
138	val_138	val_138	val_138	val_138	val_138	val_138	val_138	val_138
138	val_138	val_138	val_138	val_138	val_138	val_138	val_138	val_138
138	val_138	val_138	val_138	val_138	val_138	val_138	val_138	val_138
143	val_143	val_143	val_143	val_143	val_143	val_143	val_143	val_143
145	val_145	val_145	val_145	val_145	val_145	val_145	val_145	val_145
146	val_146	val_146	val_146	val_146	val_146	val_146	val_146	val_146
146	val_146	val_146	val_146	val_146	val_146	val_146	val_146	val_146
149	val_149	val_149	val_149	val_149	val_149	val_149	val_149	val_149
149	val_149	val_149	val_149	val_149	val_149	val_149	val_149	val_149
15	val_15	val_15	val_15	val_15	val_15	val_15	val_15	val_15
15	val_15	val_15	val_15	val_15	val_15	val_15	val_15	val_15
150	val_150	val_150	val_150	val_150	val_150	val_150	val_150	val_150
152	val_152	val_152	val_152	val_152	val_152	val_152	val_152	val_152
152	val_152	val_152	val_152	val_152	val_152	val_152	val_152	val_152
153	val_153	val_153	val_153	val_153	val_153	val_153	val_153	val_153
155	val_155	val_155	val_155	val_155	val_155	val_155	val_155	val_155
156	val_156	val_156	val_156	val_156	val_156	val_156	val_156	val_156
157	val_157	val_157	val_157	val_157	val_157	val_157	val_157	val_157
158	val_158	val_158	val_158	val_158	val_158	val_158	val_158	val_158
160	val_160	val_160	val_160	val_160	val_160	val_160	val_160	val_160
162	val_162	val_162	val_162	val_162	val_162	val_162	val_162	val_162
163	val_163	val_163	val_163	val_163	val_163	val_163	val_163	val_163
164	val_164	val_164	val_164	val_164	val_164	val_164	val_164	val_164
164	val_164	val_164	val_164	val_164	val_164	val_164	val_164	val_164
165	val_165	val_165	val_165	val_165	val_165	val_165	val_165	val_165
165	val_165	val_165	val_165	val_165	val_165	val_165	val_165	val_165
166	val_166	val_166	val_166	val_166	val_166	val_166	val_166	val_166
167	val_167	val_167	val_167	val_167	val_167	val_167	val_167	val_167
167	val_167	val_167	val_167	val_167	val_167	val_167	val_167	val_167
167	val_167	val_167	val_167	val_167	val_167	val_167	val_167	val_167
168	val_168	val_168	val_168	val_168	val_168	val_168	val_168	val_168
169	val_169	val_169	val_169	val_169	val_169	val_169	val_169	val_169
169	val_169	val_169	val_169	val_169	val_169	val_169	val_169	val_169
169	val_169	val_169	val_169	val_169	val_169	val_169	val_169	val_169
169	val_169	val_169	val_169	val_169	val_169	val_169	val_169	val_169
17	val_17	val_17	val_17	val_17	val_17	val_17	val_17	val_17
170	val_170	val_170	val_170	val_170	val_170	val_170	val_170	val_170
172	val_172	val_172	val_172	val_172	val_172	val_172	val_172	val_172
172	val_172	val_172	val_172	val_172	val_172	val_172	val_172	val_172
174	val_174	val_174	val_174	val_174	val_174	val_174	val_174	val_174
174	val_174	val_174	val_174	val_174	val_174	val_174	val_174	val_174
175	val_175	val_175	val_175	val_175	val_175	val_175	val_175	val_175
175	val_175	val_175	val_175	val_175	val_175	val_175	val_175	val_175
176	val_176	val_176	val_176	val_176	val_176	val_176	val_176	val_176
176	val_176	val_176	val_176	val_176	val_176	val_176	val_176	val_176
177	val_177	val_177	val_177	val_177	val_177	val_177	val_177	val_177
178	val_178	val_178	val_178	val_178	val_178	val_178	val_178	val_178
179	val_179	val_179	val_179	val_179	val_179	val_179	val_179	val_179
179	val_179	val_179	val_179	val_179	val_179	val_179	val_179	val_179
18	val_18	val_18	val_18	val_18	val_18	val_18	val_18	val_18
18	val_18	val_18	val_18	val_18	val_18	val_18	val_18	val_18
180	val_180	val_180	val_180	val_180	val_180	val_180	val_180	val_180
181	val_181	val_181	val_181	val_181	val_181	val_181	val_181	val_181
183	val_183	val_183	val_183	val_183	val_183	val_183	val_183	val_183
186	val_186	val_186	val_186	val_186	val_186	val_186	val_186	val_186
187	val_187	val_187	val_187	val_187	val_187	val_187	val_187	val_187
187	val_187	val_187	val_187	val_187	val_187	val_187	val_187	val_187
187	val_187	val_187	val_187	val_187	val_187	val_187	val_187	val_187
PREHOOK: query: explain
select sum(key) as sum from src group by concat(key,value,value,value,value,value,value,value,value,value) order by sum limit 30,70
PREHOOK: type: QUERY
POSTHOOK: query: explain
select sum(key) as sum from src group by concat(key,value,value,value,value,value,value,value,value,value) order by sum limit 30,70
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: concat(key, value, value, value, value, value, value, value, value, value) (type: string), key (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Map-reduce partition columns: _col0 (type: string)
                      Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: string)
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: complete
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 500 Data size: 96000 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col1 (type: double)
                  outputColumnNames: _col0
                  Statistics: Num rows: 500 Data size: 4000 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: double)
                    sort order: +
                    Statistics: Num rows: 500 Data size: 4000 Basic stats: COMPLETE Column stats: COMPLETE
                    TopN Hash Memory Usage: 2.0E-5
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: double)
                outputColumnNames: _col0
                Statistics: Num rows: 500 Data size: 4000 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 70
                  Offset of rows: 30
                  Statistics: Num rows: 70 Data size: 560 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 70 Data size: 560 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 70
      Processor Tree:
        ListSink

PREHOOK: query: select sum(key) as sum from src group by concat(key,value,value,value,value,value,value,value,value,value) order by sum limit 30,70
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select sum(key) as sum from src group by concat(key,value,value,value,value,value,value,value,value,value) order by sum limit 30,70
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
66.0
69.0
74.0
74.0
77.0
78.0
80.0
82.0
84.0
85.0
86.0
87.0
92.0
96.0
102.0
105.0
105.0
111.0
114.0
116.0
116.0
126.0
131.0
133.0
134.0
136.0
143.0
144.0
145.0
150.0
152.0
153.0
155.0
156.0
157.0
158.0
160.0
162.0
163.0
166.0
166.0
168.0
168.0
170.0
177.0
178.0
180.0
181.0
183.0
186.0
189.0
190.0
190.0
192.0
194.0
194.0
196.0
196.0
200.0
201.0
202.0
206.0
208.0
210.0
214.0
218.0
222.0
226.0
226.0
228.0
PREHOOK: query: explain
select * from
(select key, count(1) from src group by key order by key limit 10,20) subq
join
(select key, count(1) from src group by key limit 20,20) subq2
on subq.key=subq2.key limit 3,5
PREHOOK: type: QUERY
POSTHOOK: query: explain
select * from
(select key, count(1) from src group by key order by key limit 10,20) subq
join
(select key, count(1) from src group by key limit 20,20) subq2
on subq.key=subq2.key limit 3,5
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
        Reducer 4 <- Map 1 (SIMPLE_EDGE)
        Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 43500 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string)
                    outputColumnNames: key
                    Statistics: Num rows: 500 Data size: 43500 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: key (type: string)
                      sort order: +
                      Map-reduce partition columns: key (type: string)
                      Statistics: Num rows: 500 Data size: 43500 Basic stats: COMPLETE Column stats: COMPLETE
                      TopN Hash Memory Usage: 2.0E-5
                    Reduce Output Operator
                      key expressions: key (type: string)
                      sort order: +
                      Map-reduce partition columns: key (type: string)
                      Statistics: Num rows: 500 Data size: 43500 Basic stats: COMPLETE Column stats: COMPLETE
                      TopN Hash Memory Usage: 2.0E-5
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count()
                keys: KEY._col0 (type: string)
                mode: complete
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 309 Data size: 29355 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 20
                  Offset of rows: 10
                  Statistics: Num rows: 20 Data size: 1900 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: _col0 is not null (type: boolean)
                    Statistics: Num rows: 20 Data size: 1900 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Map-reduce partition columns: _col0 (type: string)
                      Statistics: Num rows: 20 Data size: 1900 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: bigint)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: string)
                  1 _col0 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 20 Data size: 3800 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 5
                  Offset of rows: 3
                  Statistics: Num rows: 5 Data size: 950 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 5 Data size: 950 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count()
                keys: KEY._col0 (type: string)
                mode: complete
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 309 Data size: 29355 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 20
                  Offset of rows: 20
                  Statistics: Num rows: 20 Data size: 1900 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    sort order: 
                    Statistics: Num rows: 20 Data size: 1900 Basic stats: COMPLETE Column stats: COMPLETE
                    TopN Hash Memory Usage: 2.0E-5
                    value expressions: _col0 (type: string), _col1 (type: bigint)
        Reducer 5 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), VALUE._col1 (type: bigint)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 20 Data size: 1900 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 20
                  Offset of rows: 20
                  Statistics: Num rows: 20 Data size: 1900 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: _col0 is not null (type: boolean)
                    Statistics: Num rows: 20 Data size: 1900 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Map-reduce partition columns: _col0 (type: string)
                      Statistics: Num rows: 20 Data size: 1900 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: bigint)

  Stage: Stage-0
    Fetch Operator
      limit: 5
      Processor Tree:
        ListSink

PREHOOK: query: select * from
(select key, count(1) from src group by key order by key limit 10,20) subq
join
(select key, count(1) from src group by key order by key limit 20,20) subq2
on subq.key=subq2.key limit 3,5
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select * from
(select key, count(1) from src group by key order by key limit 10,20) subq
join
(select key, count(1) from src group by key order by key limit 20,20) subq2
on subq.key=subq2.key limit 3,5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
137	2	137	2
138	4	138	4
143	1	143	1
145	1	145	1
146	2	146	2
