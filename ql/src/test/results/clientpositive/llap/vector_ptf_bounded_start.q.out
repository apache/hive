PREHOOK: query: CREATE TABLE vector_ptf_part_simple_text(p_mfgr string, p_name string, p_date date, p_retailprice double, rowindex int)
        ROW FORMAT DELIMITED
        FIELDS TERMINATED BY '\t'
        STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@vector_ptf_part_simple_text
POSTHOOK: query: CREATE TABLE vector_ptf_part_simple_text(p_mfgr string, p_name string, p_date date, p_retailprice double, rowindex int)
        ROW FORMAT DELIMITED
        FIELDS TERMINATED BY '\t'
        STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@vector_ptf_part_simple_text
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/vector_ptf_part_simple_all_datatypes.txt' OVERWRITE INTO TABLE vector_ptf_part_simple_text
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@vector_ptf_part_simple_text
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/vector_ptf_part_simple_all_datatypes.txt' OVERWRITE INTO TABLE vector_ptf_part_simple_text
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@vector_ptf_part_simple_text
PREHOOK: query: CREATE TABLE vector_ptf_part_simple_orc (p_mfgr string, p_name string, p_date date, p_timestamp timestamp, 
p_int int, p_retailprice double, p_decimal decimal(10,4), rowindex int) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@vector_ptf_part_simple_orc
POSTHOOK: query: CREATE TABLE vector_ptf_part_simple_orc (p_mfgr string, p_name string, p_date date, p_timestamp timestamp, 
p_int int, p_retailprice double, p_decimal decimal(10,4), rowindex int) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@vector_ptf_part_simple_orc
PREHOOK: query: INSERT INTO TABLE vector_ptf_part_simple_orc 
SELECT 
p_mfgr, p_name, p_date, 
CAST(FROM_UNIXTIME(UNIX_TIMESTAMP(p_date)) as TIMESTAMP), 
CAST(UNIX_TIMESTAMP(p_date) as int), p_retailprice, 
CAST(p_retailprice as DECIMAL(10,4)), 
rowindex 
FROM vector_ptf_part_simple_text
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_text
PREHOOK: Output: default@vector_ptf_part_simple_orc
POSTHOOK: query: INSERT INTO TABLE vector_ptf_part_simple_orc 
SELECT 
p_mfgr, p_name, p_date, 
CAST(FROM_UNIXTIME(UNIX_TIMESTAMP(p_date)) as TIMESTAMP), 
CAST(UNIX_TIMESTAMP(p_date) as int), p_retailprice, 
CAST(p_retailprice as DECIMAL(10,4)), 
rowindex 
FROM vector_ptf_part_simple_text
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_text
POSTHOOK: Output: default@vector_ptf_part_simple_orc
POSTHOOK: Lineage: vector_ptf_part_simple_orc.p_date SIMPLE [(vector_ptf_part_simple_text)vector_ptf_part_simple_text.FieldSchema(name:p_date, type:date, comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc.p_decimal EXPRESSION [(vector_ptf_part_simple_text)vector_ptf_part_simple_text.FieldSchema(name:p_retailprice, type:double, comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc.p_int EXPRESSION [(vector_ptf_part_simple_text)vector_ptf_part_simple_text.FieldSchema(name:p_date, type:date, comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc.p_mfgr SIMPLE [(vector_ptf_part_simple_text)vector_ptf_part_simple_text.FieldSchema(name:p_mfgr, type:string, comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc.p_name SIMPLE [(vector_ptf_part_simple_text)vector_ptf_part_simple_text.FieldSchema(name:p_name, type:string, comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc.p_retailprice SIMPLE [(vector_ptf_part_simple_text)vector_ptf_part_simple_text.FieldSchema(name:p_retailprice, type:double, comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc.p_timestamp EXPRESSION [(vector_ptf_part_simple_text)vector_ptf_part_simple_text.FieldSchema(name:p_date, type:date, comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc.rowindex SIMPLE [(vector_ptf_part_simple_text)vector_ptf_part_simple_text.FieldSchema(name:rowindex, type:int, comment:null), ]
p_mfgr	p_name	p_date	_c3	_c4	p_retailprice	_c6	rowindex
PREHOOK: query: select "************ NON_VECTORIZED REFERENCE ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ NON_VECTORIZED REFERENCE ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ NON_VECTORIZED REFERENCE ************
PREHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	rowindex	p_date	p_retailprice	cs1	cs2	c1	c2	c_order	s1	s2	min1	min2	max1	max2	avg1	avg2	rn	r	dr	r_date	dr_date	fv	lv
Manufacturer#3	almond antique forest lavender goldenrod	33	1970-01-03	1190.27	2	3	2	3	3	2527.56	4450.54	1190.27	1190.27	1337.29	1922.98	1263.78	1483.5133333333333	1	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique olive coral navajo	28	1970-01-03	1337.29	2	3	2	3	3	2527.56	4450.54	1190.27	1190.27	1337.29	1922.98	1263.78	1483.5133333333333	8	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique misty red olive	31	1970-01-01	1922.98	1	1	1	1	1	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	7	1	1	1	1	1190.27	1190.27
Manufacturer#3	almond antique chartreuse khaki white	24	1970-01-04	99.68	4	5	4	5	5	2627.24	4550.22	99.68	99.68	1337.29	1922.98	875.7466666666666	1137.555	6	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	14	1970-01-04	NULL	4	5	4	5	5	2627.24	4550.22	99.68	99.68	1337.29	1922.98	875.7466666666666	1137.555	5	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	10	1970-01-05	1190.27	3	5	3	5	5	1289.95	3817.51	99.68	99.68	1190.27	1337.29	644.975	954.3775	4	1	1	6	4	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	19	NULL	590.27	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	3	1	1	7	5	1190.27	1190.27
Manufacturer#3	almond antique metallic orange dim	38	NULL	55.39	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	2	1	1	7	5	1190.27	1190.27
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	1970-01-04	4.0	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	1	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	9	1970-01-04	1632.66	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	2	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	23	1970-01-03	1632.66	5	5	4	4	5	6194.2300000000005	6194.2300000000005	2.0	2.0	1753.76	1753.76	1238.846	1238.846	3	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	8	1970-01-03	1173.15	5	5	4	4	5	6194.2300000000005	6194.2300000000005	2.0	2.0	1753.76	1753.76	1238.846	1238.846	4	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	12	1970-01-02	1753.76	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	5	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	17	1970-01-02	1632.66	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	6	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine burnished black steel	NULL	1970-01-02	2.0	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	7	1	1	1	1	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	26	NULL	1753.76	1	1	1	1	0	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	8	1	1	12	5	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	20	1970-01-05	1753.76	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	9	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	1970-01-05	5.0	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	10	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique salmon chartreuse burlywood	30	1970-01-05	1602.59	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	11	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	39	1970-01-04	1173.15	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	12	1	1	6	3	4.0	4.0
Manufacturer#5	almond antique medium spring khaki	29	1970-01-04	1611.66	2	5	2	4	5	3076.1400000000003	5888.969999999999	1464.48	6.0	1611.66	1788.73	1538.0700000000002	1177.7939999999999	6	1	1	5	4	1789.69	1611.66
Manufacturer#5	almond antique blue firebrick mint	7	NULL	1789.69	1	1	1	1	0	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1	1	1	6	5	1789.69	1611.66
Manufacturer#5	almond aquamarine dodger light gainsboro	36	1970-01-01	1018.1	2	2	1	1	2	1024.1	1024.1	6.0	6.0	1018.1	1018.1	512.05	512.05	2	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique medium spring khaki	NULL	1970-01-01	6.0	2	2	1	1	2	1024.1	1024.1	6.0	6.0	1018.1	1018.1	512.05	512.05	3	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique sky peru orange	22	1970-01-02	1788.73	3	3	2	2	3	2812.83	2812.83	6.0	6.0	1788.73	1788.73	937.61	937.61	4	1	1	3	2	1789.69	1611.66
Manufacturer#5	almond azure blanched chiffon midnight	18	1970-01-03	1464.48	2	4	2	3	4	3253.21	4277.3099999999995	1464.48	6.0	1788.73	1788.73	1626.605	1069.3274999999999	5	1	1	4	3	1789.69	1611.66
Manufacturer#4	almond antique violet mint lemon	16	1970-01-01	1375.42	2	2	2	2	2	3220.34	3220.34	1375.42	1375.42	1844.92	1844.92	1610.17	1610.17	5	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond aquamarine yellow dodger mint	11	1970-01-01	1844.92	2	2	2	2	2	3220.34	3220.34	1375.42	1375.42	1844.92	1844.92	1610.17	1610.17	6	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond azure aquamarine papaya violet	37	1970-01-02	1290.35	3	3	3	3	3	4510.6900000000005	4510.6900000000005	1290.35	1290.35	1844.92	1844.92	1503.5633333333335	1503.5633333333335	1	1	1	3	2	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	40	1970-01-05	1206.26	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	2	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	35	1970-01-05	NULL	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	3	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond antique gainsboro frosted violet	25	NULL	NULL	1	1	1	1	0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4	1	1	6	4	1290.35	1375.42
Manufacturer#2	almond antique violet chocolate turquoise	15	1970-01-05	1690.68	2	4	2	4	4	3722.66	7222.020000000001	1690.68	1690.68	2031.98	2031.98	1861.33	1805.5050000000003	3	1	1	5	5	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	1	NULL	900.66	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	2	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	13	NULL	1800.7	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	1	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine sandy cyan gainsboro	32	NULL	1000.6	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	8	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	3	1970-01-03	1698.66	2	3	2	3	3	3499.36	5300.06	1698.66	1698.66	1800.7	1800.7	1749.68	1766.6866666666667	7	1	1	3	3	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	27	1970-01-02	1800.7	2	2	2	2	2	3601.4	3601.4	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	6	1	1	2	2	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	21	1970-01-01	1800.7	1	1	1	1	1	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	5	1	1	1	1	1800.7	1690.68
Manufacturer#2	almond aquamarine midnight light salmon	34	1970-01-04	2031.98	2	4	2	4	4	3730.6400000000003	7332.040000000001	1698.66	1698.66	2031.98	2031.98	1865.3200000000002	1833.0100000000002	4	1	1	4	4	1800.7	1690.68
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 11100 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_date:date, 3:p_timestamp:timestamp, 4:p_int:int, 5:p_retailprice:double, 6:p_decimal:decimal(10,4)/DECIMAL_64, 7:rowindex:int, 8:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), p_date (type: date)
                    null sort order: az
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumns: 0:string, 2:date
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumns: 0:string
                        valueColumns: 1:string, 5:double, 7:int
                    Statistics: Num rows: 40 Data size: 11100 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_name (type: string), p_retailprice (type: double), rowindex (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 8
                    includeColumns: [0, 1, 2, 5, 7]
                    dataColumns: p_mfgr:string, p_name:string, p_date:date, p_timestamp:timestamp, p_int:int, p_retailprice:double, p_decimal:decimal(10,4)/DECIMAL_64, rowindex:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: az
                reduceColumnSortOrder: ++
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 5
                    dataColumns: KEY.reducesinkkey0:string, KEY.reducesinkkey1:date, VALUE._col0:string, VALUE._col3:double, VALUE._col5:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, bigint, bigint, bigint, bigint, double, double, double, double, double, double, double, double, bigint, bigint]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), KEY.reducesinkkey1 (type: date), VALUE._col3 (type: double), VALUE._col5 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col5, _col7
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 2, 1, 3, 4]
                Statistics: Num rows: 40 Data size: 11100 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: date, _col5: double, _col7: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col2 ASC NULLS LAST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(1)~CURRENT
                              isStar: true
                            window function definition
                              alias: count_window_1
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(3)~CURRENT
                              isStar: true
                            window function definition
                              alias: count_window_2
                              arguments: _col7
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(1)~CURRENT
                            window function definition
                              alias: count_window_3
                              arguments: _col7
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(3)~CURRENT
                            window function definition
                              alias: count_window_4
                              arguments: _col2
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(3)~CURRENT
                            window function definition
                              alias: sum_window_5
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: RANGE PRECEDING(1)~CURRENT
                            window function definition
                              alias: sum_window_6
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: RANGE PRECEDING(3)~CURRENT
                            window function definition
                              alias: min_window_7
                              arguments: _col5
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: RANGE PRECEDING(1)~CURRENT
                            window function definition
                              alias: min_window_8
                              arguments: _col5
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: RANGE PRECEDING(3)~CURRENT
                            window function definition
                              alias: max_window_9
                              arguments: _col5
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: RANGE PRECEDING(1)~CURRENT
                            window function definition
                              alias: max_window_10
                              arguments: _col5
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: RANGE PRECEDING(3)~CURRENT
                            window function definition
                              alias: avg_window_11
                              arguments: _col5
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: RANGE PRECEDING(1)~CURRENT
                            window function definition
                              alias: avg_window_12
                              arguments: _col5
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: RANGE PRECEDING(3)~CURRENT
                            window function definition
                              alias: rank_window_16
                              arguments: _col2
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: dense_rank_window_17
                              arguments: _col2
                              name: dense_rank
                              window function: GenericUDAFDenseRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: false
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorCountStar, VectorPTFEvaluatorCountStar, VectorPTFEvaluatorCount, VectorPTFEvaluatorCount, VectorPTFEvaluatorCount, VectorPTFEvaluatorDoubleSum, VectorPTFEvaluatorDoubleSum, VectorPTFEvaluatorDoubleMin, VectorPTFEvaluatorDoubleMin, VectorPTFEvaluatorDoubleMax, VectorPTFEvaluatorDoubleMax, VectorPTFEvaluatorDoubleAvg, VectorPTFEvaluatorDoubleAvg, VectorPTFEvaluatorRank, VectorPTFEvaluatorDenseRank]
                      functionInputExpressions: [null, null, col 4:int, col 4:int, col 1:date, col 3:double, col 3:double, col 3:double, col 3:double, col 3:double, col 3:double, col 3:double, col 3:double, col 1:date, col 1:date]
                      functionNames: [count, count, count, count, count, sum, sum, min, min, max, max, avg, avg, rank, dense_rank]
                      keyInputColumns: [0, 1]
                      native: true
                      nonKeyInputColumns: [2, 3, 4]
                      orderExpressions: [col 1:date]
                      outputColumns: [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 2, 1, 3, 4]
                      outputTypes: [bigint, bigint, bigint, bigint, bigint, double, double, double, double, double, double, double, double, int, int, string, string, date, double, int]
                      partitionExpressions: [col 0:string]
                      streamingColumns: [18, 19]
                  Statistics: Num rows: 40 Data size: 11100 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: count_window_0 (type: bigint), count_window_1 (type: bigint), count_window_2 (type: bigint), count_window_3 (type: bigint), count_window_4 (type: bigint), sum_window_5 (type: double), sum_window_6 (type: double), min_window_7 (type: double), min_window_8 (type: double), max_window_9 (type: double), max_window_10 (type: double), avg_window_11 (type: double), avg_window_12 (type: double), rank_window_16 (type: int), dense_rank_window_17 (type: int), _col0 (type: string), _col1 (type: string), _col2 (type: date), _col5 (type: double), _col7 (type: int)
                    outputColumnNames: count_window_0, count_window_1, count_window_2, count_window_3, count_window_4, sum_window_5, sum_window_6, min_window_7, min_window_8, max_window_9, max_window_10, avg_window_11, avg_window_12, rank_window_16, dense_rank_window_17, _col0, _col1, _col2, _col5, _col7
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 2, 1, 3, 4]
                    Statistics: Num rows: 40 Data size: 11100 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      null sort order: a
                      sort order: +
                      Map-reduce partition columns: _col0 (type: string)
                      Reduce Sink Vectorization:
                          className: VectorReduceSinkStringOperator
                          keyColumns: 0:string
                          native: true
                          nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          valueColumns: 5:bigint, 6:bigint, 7:bigint, 8:bigint, 9:bigint, 10:double, 11:double, 12:double, 13:double, 14:double, 15:double, 16:double, 17:double, 18:int, 19:int, 2:string, 1:date, 3:double, 4:int
                      Statistics: Num rows: 40 Data size: 11100 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: count_window_0 (type: bigint), count_window_1 (type: bigint), count_window_2 (type: bigint), count_window_3 (type: bigint), count_window_4 (type: bigint), sum_window_5 (type: double), sum_window_6 (type: double), min_window_7 (type: double), min_window_8 (type: double), max_window_9 (type: double), max_window_10 (type: double), avg_window_11 (type: double), avg_window_12 (type: double), rank_window_16 (type: int), dense_rank_window_17 (type: int), _col1 (type: string), _col2 (type: date), _col5 (type: double), _col7 (type: int)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 20
                    dataColumns: KEY.reducesinkkey0:string, VALUE._col0:bigint, VALUE._col1:bigint, VALUE._col2:bigint, VALUE._col3:bigint, VALUE._col4:bigint, VALUE._col5:double, VALUE._col6:double, VALUE._col7:double, VALUE._col8:double, VALUE._col9:double, VALUE._col10:double, VALUE._col11:double, VALUE._col12:double, VALUE._col13:int, VALUE._col14:int, VALUE._col15:string, VALUE._col16:date, VALUE._col19:double, VALUE._col21:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, bigint, bigint, double]
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: bigint), VALUE._col1 (type: bigint), VALUE._col2 (type: bigint), VALUE._col3 (type: bigint), VALUE._col4 (type: bigint), VALUE._col5 (type: double), VALUE._col6 (type: double), VALUE._col7 (type: double), VALUE._col8 (type: double), VALUE._col9 (type: double), VALUE._col10 (type: double), VALUE._col11 (type: double), VALUE._col12 (type: double), VALUE._col13 (type: int), VALUE._col14 (type: int), KEY.reducesinkkey0 (type: string), VALUE._col15 (type: string), VALUE._col16 (type: date), VALUE._col19 (type: double), VALUE._col21 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col20, _col22
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 16, 17, 18, 19]
                Statistics: Num rows: 40 Data size: 15092 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: bigint, _col1: bigint, _col2: bigint, _col3: bigint, _col4: bigint, _col5: double, _col6: double, _col7: double, _col8: double, _col9: double, _col10: double, _col11: double, _col12: double, _col13: int, _col14: int, _col15: string, _col16: string, _col17: date, _col20: double, _col22: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col15 ASC NULLS FIRST
                        partition by: _col15
                        raw input shape:
                        window functions:
                            window function definition
                              alias: row_number_window_13
                              name: row_number
                              window function: GenericUDAFRowNumberEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: rank_window_14
                              arguments: _col15
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: dense_rank_window_15
                              arguments: _col15
                              name: dense_rank
                              window function: GenericUDAFDenseRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: first_value_window_18
                              arguments: _col20
                              name: first_value
                              window function: GenericUDAFFirstValueEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: true
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorRowNumber, VectorPTFEvaluatorRank, VectorPTFEvaluatorDenseRank, VectorPTFEvaluatorDoubleFirstValue]
                      functionInputExpressions: [null, col 0:string, col 0:string, col 18:double]
                      functionNames: [row_number, rank, dense_rank, first_value]
                      keyInputColumns: [0]
                      native: true
                      nonKeyInputColumns: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
                      orderExpressions: [col 0:string]
                      outputColumns: [20, 21, 22, 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 16, 17, 18, 19]
                      outputTypes: [int, int, int, double, bigint, bigint, bigint, bigint, bigint, double, double, double, double, double, double, double, double, int, int, string, string, date, double, int]
                      partitionExpressions: [col 0:string]
                      streamingColumns: [20, 21, 22, 23]
                  Statistics: Num rows: 40 Data size: 15092 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: row_number_window_13 (type: int), rank_window_14 (type: int), dense_rank_window_15 (type: int), first_value_window_18 (type: double), _col0 (type: bigint), _col1 (type: bigint), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: bigint), _col5 (type: double), _col6 (type: double), _col7 (type: double), _col8 (type: double), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: double), _col13 (type: int), _col14 (type: int), _col15 (type: string), _col16 (type: string), _col17 (type: date), _col20 (type: double), _col22 (type: int)
                    outputColumnNames: row_number_window_13, rank_window_14, dense_rank_window_15, first_value_window_18, _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col20, _col22
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [20, 21, 22, 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 16, 17, 18, 19]
                    Statistics: Num rows: 40 Data size: 15092 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col15 (type: string)
                      null sort order: z
                      sort order: -
                      Map-reduce partition columns: _col15 (type: string)
                      Reduce Sink Vectorization:
                          className: VectorReduceSinkStringOperator
                          keyColumns: 0:string
                          native: true
                          nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          valueColumns: 20:int, 21:int, 22:int, 23:double, 1:bigint, 2:bigint, 3:bigint, 4:bigint, 5:bigint, 6:double, 7:double, 8:double, 9:double, 10:double, 11:double, 12:double, 13:double, 14:int, 15:int, 16:string, 17:date, 18:double, 19:int
                      Statistics: Num rows: 40 Data size: 15092 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: row_number_window_13 (type: int), rank_window_14 (type: int), dense_rank_window_15 (type: int), first_value_window_18 (type: double), _col0 (type: bigint), _col1 (type: bigint), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: bigint), _col5 (type: double), _col6 (type: double), _col7 (type: double), _col8 (type: double), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: double), _col13 (type: int), _col14 (type: int), _col16 (type: string), _col17 (type: date), _col20 (type: double), _col22 (type: int)
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: z
                reduceColumnSortOrder: -
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 24
                    dataColumns: KEY.reducesinkkey0:string, VALUE._col0:int, VALUE._col1:int, VALUE._col2:int, VALUE._col3:double, VALUE._col4:bigint, VALUE._col5:bigint, VALUE._col6:bigint, VALUE._col7:bigint, VALUE._col8:bigint, VALUE._col9:double, VALUE._col10:double, VALUE._col11:double, VALUE._col12:double, VALUE._col13:double, VALUE._col14:double, VALUE._col15:double, VALUE._col16:double, VALUE._col17:int, VALUE._col18:int, VALUE._col19:string, VALUE._col20:date, VALUE._col23:double, VALUE._col25:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [double]
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: int), VALUE._col1 (type: int), VALUE._col2 (type: int), VALUE._col3 (type: double), VALUE._col4 (type: bigint), VALUE._col5 (type: bigint), VALUE._col6 (type: bigint), VALUE._col7 (type: bigint), VALUE._col8 (type: bigint), VALUE._col9 (type: double), VALUE._col10 (type: double), VALUE._col11 (type: double), VALUE._col12 (type: double), VALUE._col13 (type: double), VALUE._col14 (type: double), VALUE._col15 (type: double), VALUE._col16 (type: double), VALUE._col17 (type: int), VALUE._col18 (type: int), KEY.reducesinkkey0 (type: string), VALUE._col19 (type: string), VALUE._col20 (type: date), VALUE._col23 (type: double), VALUE._col25 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col24, _col26
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 20, 21, 22, 23]
                Statistics: Num rows: 40 Data size: 14916 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: int, _col1: int, _col2: int, _col3: double, _col4: bigint, _col5: bigint, _col6: bigint, _col7: bigint, _col8: bigint, _col9: double, _col10: double, _col11: double, _col12: double, _col13: double, _col14: double, _col15: double, _col16: double, _col17: int, _col18: int, _col19: string, _col20: string, _col21: date, _col24: double, _col26: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col19 DESC NULLS LAST
                        partition by: _col19
                        raw input shape:
                        window functions:
                            window function definition
                              alias: first_value_window_19
                              arguments: _col24
                              name: first_value
                              window function: GenericUDAFFirstValueEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: true
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorDoubleFirstValue]
                      functionInputExpressions: [col 22:double]
                      functionNames: [first_value]
                      keyInputColumns: [0]
                      native: true
                      nonKeyInputColumns: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
                      orderExpressions: [col 0:string]
                      outputColumns: [24, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 20, 21, 22, 23]
                      outputTypes: [double, int, int, int, double, bigint, bigint, bigint, bigint, bigint, double, double, double, double, double, double, double, double, int, int, string, string, date, double, int]
                      partitionExpressions: [col 0:string]
                      streamingColumns: [24]
                  Statistics: Num rows: 40 Data size: 14916 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col19 (type: string), _col20 (type: string), _col26 (type: int), _col21 (type: date), _col24 (type: double), _col4 (type: bigint), _col5 (type: bigint), _col6 (type: bigint), _col7 (type: bigint), _col8 (type: bigint), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: double), _col13 (type: double), _col14 (type: double), _col15 (type: double), _col16 (type: double), _col0 (type: int), _col1 (type: int), _col2 (type: int), _col17 (type: int), _col18 (type: int), _col3 (type: double), first_value_window_19 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 20, 23, 21, 22, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 18, 19, 4, 24]
                    Statistics: Num rows: 40 Data size: 13284 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 13284 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select "************ BATCH SIZE=2, BUFFERED BATCHES: 2 ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ BATCH SIZE=2, BUFFERED BATCHES: 2 ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ BATCH SIZE=2, BUFFERED BATCHES: 2 ************
PREHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	rowindex	p_date	p_retailprice	cs1	cs2	c1	c2	c_order	s1	s2	min1	min2	max1	max2	avg1	avg2	rn	r	dr	r_date	dr_date	fv	lv
Manufacturer#3	almond antique forest lavender goldenrod	33	1970-01-03	1190.27	2	3	2	3	3	2527.56	4450.54	1190.27	1190.27	1337.29	1922.98	1263.78	1483.5133333333333	1	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique olive coral navajo	28	1970-01-03	1337.29	2	3	2	3	3	2527.56	4450.54	1190.27	1190.27	1337.29	1922.98	1263.78	1483.5133333333333	8	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique misty red olive	31	1970-01-01	1922.98	1	1	1	1	1	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	7	1	1	1	1	1190.27	1190.27
Manufacturer#3	almond antique chartreuse khaki white	24	1970-01-04	99.68	4	5	4	5	5	2627.24	4550.22	99.68	99.68	1337.29	1922.98	875.7466666666666	1137.555	6	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	14	1970-01-04	NULL	4	5	4	5	5	2627.24	4550.22	99.68	99.68	1337.29	1922.98	875.7466666666666	1137.555	5	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	10	1970-01-05	1190.27	3	5	3	5	5	1289.95	3817.51	99.68	99.68	1190.27	1337.29	644.975	954.3775	4	1	1	6	4	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	19	NULL	590.27	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	3	1	1	7	5	1190.27	1190.27
Manufacturer#3	almond antique metallic orange dim	38	NULL	55.39	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	2	1	1	7	5	1190.27	1190.27
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	1970-01-04	4.0	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	1	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	9	1970-01-04	1632.66	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	2	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	23	1970-01-03	1632.66	5	5	4	4	5	6194.2300000000005	6194.2300000000005	2.0	2.0	1753.76	1753.76	1238.846	1238.846	3	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	8	1970-01-03	1173.15	5	5	4	4	5	6194.2300000000005	6194.2300000000005	2.0	2.0	1753.76	1753.76	1238.846	1238.846	4	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	12	1970-01-02	1753.76	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	5	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	17	1970-01-02	1632.66	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	6	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine burnished black steel	NULL	1970-01-02	2.0	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	7	1	1	1	1	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	26	NULL	1753.76	1	1	1	1	0	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	8	1	1	12	5	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	20	1970-01-05	1753.76	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	9	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	1970-01-05	5.0	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	10	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique salmon chartreuse burlywood	30	1970-01-05	1602.59	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	11	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	39	1970-01-04	1173.15	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	12	1	1	6	3	4.0	4.0
Manufacturer#5	almond antique medium spring khaki	29	1970-01-04	1611.66	2	5	2	4	5	3076.1400000000003	5888.969999999999	1464.48	6.0	1611.66	1788.73	1538.0700000000002	1177.7939999999999	6	1	1	5	4	1789.69	1611.66
Manufacturer#5	almond antique blue firebrick mint	7	NULL	1789.69	1	1	1	1	0	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1	1	1	6	5	1789.69	1611.66
Manufacturer#5	almond aquamarine dodger light gainsboro	36	1970-01-01	1018.1	2	2	1	1	2	1024.1	1024.1	6.0	6.0	1018.1	1018.1	512.05	512.05	2	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique medium spring khaki	NULL	1970-01-01	6.0	2	2	1	1	2	1024.1	1024.1	6.0	6.0	1018.1	1018.1	512.05	512.05	3	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique sky peru orange	22	1970-01-02	1788.73	3	3	2	2	3	2812.83	2812.83	6.0	6.0	1788.73	1788.73	937.61	937.61	4	1	1	3	2	1789.69	1611.66
Manufacturer#5	almond azure blanched chiffon midnight	18	1970-01-03	1464.48	2	4	2	3	4	3253.21	4277.3099999999995	1464.48	6.0	1788.73	1788.73	1626.605	1069.3274999999999	5	1	1	4	3	1789.69	1611.66
Manufacturer#4	almond antique violet mint lemon	16	1970-01-01	1375.42	2	2	2	2	2	3220.34	3220.34	1375.42	1375.42	1844.92	1844.92	1610.17	1610.17	5	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond aquamarine yellow dodger mint	11	1970-01-01	1844.92	2	2	2	2	2	3220.34	3220.34	1375.42	1375.42	1844.92	1844.92	1610.17	1610.17	6	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond azure aquamarine papaya violet	37	1970-01-02	1290.35	3	3	3	3	3	4510.6900000000005	4510.6900000000005	1290.35	1290.35	1844.92	1844.92	1503.5633333333335	1503.5633333333335	1	1	1	3	2	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	40	1970-01-05	1206.26	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	2	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	35	1970-01-05	NULL	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	3	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond antique gainsboro frosted violet	25	NULL	NULL	1	1	1	1	0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4	1	1	6	4	1290.35	1375.42
Manufacturer#2	almond antique violet chocolate turquoise	15	1970-01-05	1690.68	2	4	2	4	4	3722.66	7222.020000000001	1690.68	1690.68	2031.98	2031.98	1861.33	1805.5050000000003	3	1	1	5	5	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	1	NULL	900.66	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	2	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	13	NULL	1800.7	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	1	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine sandy cyan gainsboro	32	NULL	1000.6	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	8	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	3	1970-01-03	1698.66	2	3	2	3	3	3499.36	5300.06	1698.66	1698.66	1800.7	1800.7	1749.68	1766.6866666666667	7	1	1	3	3	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	27	1970-01-02	1800.7	2	2	2	2	2	3601.4	3601.4	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	6	1	1	2	2	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	21	1970-01-01	1800.7	1	1	1	1	1	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	5	1	1	1	1	1800.7	1690.68
Manufacturer#2	almond aquamarine midnight light salmon	34	1970-01-04	2031.98	2	4	2	4	4	3730.6400000000003	7332.040000000001	1698.66	1698.66	2031.98	2031.98	1865.3200000000002	1833.0100000000002	4	1	1	4	4	1800.7	1690.68
PREHOOK: query: select "************ BATCH SIZE=2, BUFFERED BATCHES: 3 ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ BATCH SIZE=2, BUFFERED BATCHES: 3 ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ BATCH SIZE=2, BUFFERED BATCHES: 3 ************
PREHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	rowindex	p_date	p_retailprice	cs1	cs2	c1	c2	c_order	s1	s2	min1	min2	max1	max2	avg1	avg2	rn	r	dr	r_date	dr_date	fv	lv
Manufacturer#3	almond antique forest lavender goldenrod	33	1970-01-03	1190.27	2	3	2	3	3	2527.56	4450.54	1190.27	1190.27	1337.29	1922.98	1263.78	1483.5133333333333	1	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique olive coral navajo	28	1970-01-03	1337.29	2	3	2	3	3	2527.56	4450.54	1190.27	1190.27	1337.29	1922.98	1263.78	1483.5133333333333	8	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique misty red olive	31	1970-01-01	1922.98	1	1	1	1	1	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	7	1	1	1	1	1190.27	1190.27
Manufacturer#3	almond antique chartreuse khaki white	24	1970-01-04	99.68	4	5	4	5	5	2627.24	4550.22	99.68	99.68	1337.29	1922.98	875.7466666666666	1137.555	6	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	14	1970-01-04	NULL	4	5	4	5	5	2627.24	4550.22	99.68	99.68	1337.29	1922.98	875.7466666666666	1137.555	5	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	10	1970-01-05	1190.27	3	5	3	5	5	1289.95	3817.51	99.68	99.68	1190.27	1337.29	644.975	954.3775	4	1	1	6	4	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	19	NULL	590.27	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	3	1	1	7	5	1190.27	1190.27
Manufacturer#3	almond antique metallic orange dim	38	NULL	55.39	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	2	1	1	7	5	1190.27	1190.27
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	1970-01-04	4.0	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	1	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	9	1970-01-04	1632.66	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	2	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	23	1970-01-03	1632.66	5	5	4	4	5	6194.2300000000005	6194.2300000000005	2.0	2.0	1753.76	1753.76	1238.846	1238.846	3	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	8	1970-01-03	1173.15	5	5	4	4	5	6194.2300000000005	6194.2300000000005	2.0	2.0	1753.76	1753.76	1238.846	1238.846	4	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	12	1970-01-02	1753.76	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	5	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	17	1970-01-02	1632.66	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	6	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine burnished black steel	NULL	1970-01-02	2.0	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	7	1	1	1	1	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	26	NULL	1753.76	1	1	1	1	0	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	8	1	1	12	5	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	20	1970-01-05	1753.76	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	9	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	1970-01-05	5.0	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	10	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique salmon chartreuse burlywood	30	1970-01-05	1602.59	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	11	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	39	1970-01-04	1173.15	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	12	1	1	6	3	4.0	4.0
Manufacturer#5	almond antique medium spring khaki	29	1970-01-04	1611.66	2	5	2	4	5	3076.1400000000003	5888.969999999999	1464.48	6.0	1611.66	1788.73	1538.0700000000002	1177.7939999999999	6	1	1	5	4	1789.69	1611.66
Manufacturer#5	almond antique blue firebrick mint	7	NULL	1789.69	1	1	1	1	0	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1	1	1	6	5	1789.69	1611.66
Manufacturer#5	almond aquamarine dodger light gainsboro	36	1970-01-01	1018.1	2	2	1	1	2	1024.1	1024.1	6.0	6.0	1018.1	1018.1	512.05	512.05	2	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique medium spring khaki	NULL	1970-01-01	6.0	2	2	1	1	2	1024.1	1024.1	6.0	6.0	1018.1	1018.1	512.05	512.05	3	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique sky peru orange	22	1970-01-02	1788.73	3	3	2	2	3	2812.83	2812.83	6.0	6.0	1788.73	1788.73	937.61	937.61	4	1	1	3	2	1789.69	1611.66
Manufacturer#5	almond azure blanched chiffon midnight	18	1970-01-03	1464.48	2	4	2	3	4	3253.21	4277.3099999999995	1464.48	6.0	1788.73	1788.73	1626.605	1069.3274999999999	5	1	1	4	3	1789.69	1611.66
Manufacturer#4	almond antique violet mint lemon	16	1970-01-01	1375.42	2	2	2	2	2	3220.34	3220.34	1375.42	1375.42	1844.92	1844.92	1610.17	1610.17	5	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond aquamarine yellow dodger mint	11	1970-01-01	1844.92	2	2	2	2	2	3220.34	3220.34	1375.42	1375.42	1844.92	1844.92	1610.17	1610.17	6	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond azure aquamarine papaya violet	37	1970-01-02	1290.35	3	3	3	3	3	4510.6900000000005	4510.6900000000005	1290.35	1290.35	1844.92	1844.92	1503.5633333333335	1503.5633333333335	1	1	1	3	2	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	40	1970-01-05	1206.26	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	2	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	35	1970-01-05	NULL	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	3	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond antique gainsboro frosted violet	25	NULL	NULL	1	1	1	1	0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4	1	1	6	4	1290.35	1375.42
Manufacturer#2	almond antique violet chocolate turquoise	15	1970-01-05	1690.68	2	4	2	4	4	3722.66	7222.020000000001	1690.68	1690.68	2031.98	2031.98	1861.33	1805.5050000000003	3	1	1	5	5	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	1	NULL	900.66	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	2	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	13	NULL	1800.7	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	1	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine sandy cyan gainsboro	32	NULL	1000.6	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	8	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	3	1970-01-03	1698.66	2	3	2	3	3	3499.36	5300.06	1698.66	1698.66	1800.7	1800.7	1749.68	1766.6866666666667	7	1	1	3	3	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	27	1970-01-02	1800.7	2	2	2	2	2	3601.4	3601.4	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	6	1	1	2	2	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	21	1970-01-01	1800.7	1	1	1	1	1	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	5	1	1	1	1	1800.7	1690.68
Manufacturer#2	almond aquamarine midnight light salmon	34	1970-01-04	2031.98	2	4	2	4	4	3730.6400000000003	7332.040000000001	1698.66	1698.66	2031.98	2031.98	1865.3200000000002	1833.0100000000002	4	1	1	4	4	1800.7	1690.68
PREHOOK: query: select "************ BATCH SIZE=2, BUFFERED BATCHES: 4 ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ BATCH SIZE=2, BUFFERED BATCHES: 4 ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ BATCH SIZE=2, BUFFERED BATCHES: 4 ************
PREHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	rowindex	p_date	p_retailprice	cs1	cs2	c1	c2	c_order	s1	s2	min1	min2	max1	max2	avg1	avg2	rn	r	dr	r_date	dr_date	fv	lv
Manufacturer#3	almond antique forest lavender goldenrod	33	1970-01-03	1190.27	2	3	2	3	3	2527.56	4450.54	1190.27	1190.27	1337.29	1922.98	1263.78	1483.5133333333333	1	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique olive coral navajo	28	1970-01-03	1337.29	2	3	2	3	3	2527.56	4450.54	1190.27	1190.27	1337.29	1922.98	1263.78	1483.5133333333333	8	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique misty red olive	31	1970-01-01	1922.98	1	1	1	1	1	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	7	1	1	1	1	1190.27	1190.27
Manufacturer#3	almond antique chartreuse khaki white	24	1970-01-04	99.68	4	5	4	5	5	2627.24	4550.22	99.68	99.68	1337.29	1922.98	875.7466666666666	1137.555	6	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	14	1970-01-04	NULL	4	5	4	5	5	2627.24	4550.22	99.68	99.68	1337.29	1922.98	875.7466666666666	1137.555	5	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	10	1970-01-05	1190.27	3	5	3	5	5	1289.95	3817.51	99.68	99.68	1190.27	1337.29	644.975	954.3775	4	1	1	6	4	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	19	NULL	590.27	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	3	1	1	7	5	1190.27	1190.27
Manufacturer#3	almond antique metallic orange dim	38	NULL	55.39	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	2	1	1	7	5	1190.27	1190.27
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	1970-01-04	4.0	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	1	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	9	1970-01-04	1632.66	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	2	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	23	1970-01-03	1632.66	5	5	4	4	5	6194.2300000000005	6194.2300000000005	2.0	2.0	1753.76	1753.76	1238.846	1238.846	3	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	8	1970-01-03	1173.15	5	5	4	4	5	6194.2300000000005	6194.2300000000005	2.0	2.0	1753.76	1753.76	1238.846	1238.846	4	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	12	1970-01-02	1753.76	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	5	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	17	1970-01-02	1632.66	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	6	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine burnished black steel	NULL	1970-01-02	2.0	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	7	1	1	1	1	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	26	NULL	1753.76	1	1	1	1	0	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	8	1	1	12	5	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	20	1970-01-05	1753.76	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	9	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	1970-01-05	5.0	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	10	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique salmon chartreuse burlywood	30	1970-01-05	1602.59	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	11	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	39	1970-01-04	1173.15	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	12	1	1	6	3	4.0	4.0
Manufacturer#5	almond antique medium spring khaki	29	1970-01-04	1611.66	2	5	2	4	5	3076.1400000000003	5888.969999999999	1464.48	6.0	1611.66	1788.73	1538.0700000000002	1177.7939999999999	6	1	1	5	4	1789.69	1611.66
Manufacturer#5	almond antique blue firebrick mint	7	NULL	1789.69	1	1	1	1	0	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1	1	1	6	5	1789.69	1611.66
Manufacturer#5	almond aquamarine dodger light gainsboro	36	1970-01-01	1018.1	2	2	1	1	2	1024.1	1024.1	6.0	6.0	1018.1	1018.1	512.05	512.05	2	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique medium spring khaki	NULL	1970-01-01	6.0	2	2	1	1	2	1024.1	1024.1	6.0	6.0	1018.1	1018.1	512.05	512.05	3	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique sky peru orange	22	1970-01-02	1788.73	3	3	2	2	3	2812.83	2812.83	6.0	6.0	1788.73	1788.73	937.61	937.61	4	1	1	3	2	1789.69	1611.66
Manufacturer#5	almond azure blanched chiffon midnight	18	1970-01-03	1464.48	2	4	2	3	4	3253.21	4277.3099999999995	1464.48	6.0	1788.73	1788.73	1626.605	1069.3274999999999	5	1	1	4	3	1789.69	1611.66
Manufacturer#4	almond antique violet mint lemon	16	1970-01-01	1375.42	2	2	2	2	2	3220.34	3220.34	1375.42	1375.42	1844.92	1844.92	1610.17	1610.17	5	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond aquamarine yellow dodger mint	11	1970-01-01	1844.92	2	2	2	2	2	3220.34	3220.34	1375.42	1375.42	1844.92	1844.92	1610.17	1610.17	6	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond azure aquamarine papaya violet	37	1970-01-02	1290.35	3	3	3	3	3	4510.6900000000005	4510.6900000000005	1290.35	1290.35	1844.92	1844.92	1503.5633333333335	1503.5633333333335	1	1	1	3	2	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	40	1970-01-05	1206.26	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	2	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	35	1970-01-05	NULL	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	3	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond antique gainsboro frosted violet	25	NULL	NULL	1	1	1	1	0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4	1	1	6	4	1290.35	1375.42
Manufacturer#2	almond antique violet chocolate turquoise	15	1970-01-05	1690.68	2	4	2	4	4	3722.66	7222.020000000001	1690.68	1690.68	2031.98	2031.98	1861.33	1805.5050000000003	3	1	1	5	5	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	1	NULL	900.66	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	2	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	13	NULL	1800.7	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	1	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine sandy cyan gainsboro	32	NULL	1000.6	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	8	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	3	1970-01-03	1698.66	2	3	2	3	3	3499.36	5300.06	1698.66	1698.66	1800.7	1800.7	1749.68	1766.6866666666667	7	1	1	3	3	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	27	1970-01-02	1800.7	2	2	2	2	2	3601.4	3601.4	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	6	1	1	2	2	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	21	1970-01-01	1800.7	1	1	1	1	1	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	5	1	1	1	1	1800.7	1690.68
Manufacturer#2	almond aquamarine midnight light salmon	34	1970-01-04	2031.98	2	4	2	4	4	3730.6400000000003	7332.040000000001	1698.66	1698.66	2031.98	2031.98	1865.3200000000002	1833.0100000000002	4	1	1	4	4	1800.7	1690.68
PREHOOK: query: select "************ BATCH SIZE=1, BUFFERED BATCHES: 2 ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ BATCH SIZE=1, BUFFERED BATCHES: 2 ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ BATCH SIZE=1, BUFFERED BATCHES: 2 ************
PREHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	rowindex	p_date	p_retailprice	cs1	cs2	c1	c2	c_order	s1	s2	min1	min2	max1	max2	avg1	avg2	rn	r	dr	r_date	dr_date	fv	lv
Manufacturer#3	almond antique forest lavender goldenrod	33	1970-01-03	1190.27	2	3	2	3	3	2527.56	4450.54	1190.27	1190.27	1337.29	1922.98	1263.78	1483.5133333333333	1	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique olive coral navajo	28	1970-01-03	1337.29	2	3	2	3	3	2527.56	4450.54	1190.27	1190.27	1337.29	1922.98	1263.78	1483.5133333333333	8	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique misty red olive	31	1970-01-01	1922.98	1	1	1	1	1	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	7	1	1	1	1	1190.27	1190.27
Manufacturer#3	almond antique chartreuse khaki white	24	1970-01-04	99.68	4	5	4	5	5	2627.24	4550.22	99.68	99.68	1337.29	1922.98	875.7466666666666	1137.555	6	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	14	1970-01-04	NULL	4	5	4	5	5	2627.24	4550.22	99.68	99.68	1337.29	1922.98	875.7466666666666	1137.555	5	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	10	1970-01-05	1190.27	3	5	3	5	5	1289.95	3817.51	99.68	99.68	1190.27	1337.29	644.975	954.3775	4	1	1	6	4	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	19	NULL	590.27	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	3	1	1	7	5	1190.27	1190.27
Manufacturer#3	almond antique metallic orange dim	38	NULL	55.39	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	2	1	1	7	5	1190.27	1190.27
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	1970-01-04	4.0	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	1	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	9	1970-01-04	1632.66	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	2	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	23	1970-01-03	1632.66	5	5	4	4	5	6194.2300000000005	6194.2300000000005	2.0	2.0	1753.76	1753.76	1238.846	1238.846	3	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	8	1970-01-03	1173.15	5	5	4	4	5	6194.2300000000005	6194.2300000000005	2.0	2.0	1753.76	1753.76	1238.846	1238.846	4	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	12	1970-01-02	1753.76	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	5	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	17	1970-01-02	1632.66	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	6	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine burnished black steel	NULL	1970-01-02	2.0	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	7	1	1	1	1	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	26	NULL	1753.76	1	1	1	1	0	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	8	1	1	12	5	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	20	1970-01-05	1753.76	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	9	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	1970-01-05	5.0	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	10	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique salmon chartreuse burlywood	30	1970-01-05	1602.59	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	11	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	39	1970-01-04	1173.15	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	12	1	1	6	3	4.0	4.0
Manufacturer#5	almond antique medium spring khaki	29	1970-01-04	1611.66	2	5	2	4	5	3076.1400000000003	5888.969999999999	1464.48	6.0	1611.66	1788.73	1538.0700000000002	1177.7939999999999	6	1	1	5	4	1789.69	1611.66
Manufacturer#5	almond antique blue firebrick mint	7	NULL	1789.69	1	1	1	1	0	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1	1	1	6	5	1789.69	1611.66
Manufacturer#5	almond aquamarine dodger light gainsboro	36	1970-01-01	1018.1	2	2	1	1	2	1024.1	1024.1	6.0	6.0	1018.1	1018.1	512.05	512.05	2	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique medium spring khaki	NULL	1970-01-01	6.0	2	2	1	1	2	1024.1	1024.1	6.0	6.0	1018.1	1018.1	512.05	512.05	3	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique sky peru orange	22	1970-01-02	1788.73	3	3	2	2	3	2812.83	2812.83	6.0	6.0	1788.73	1788.73	937.61	937.61	4	1	1	3	2	1789.69	1611.66
Manufacturer#5	almond azure blanched chiffon midnight	18	1970-01-03	1464.48	2	4	2	3	4	3253.21	4277.3099999999995	1464.48	6.0	1788.73	1788.73	1626.605	1069.3274999999999	5	1	1	4	3	1789.69	1611.66
Manufacturer#4	almond antique violet mint lemon	16	1970-01-01	1375.42	2	2	2	2	2	3220.34	3220.34	1375.42	1375.42	1844.92	1844.92	1610.17	1610.17	5	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond aquamarine yellow dodger mint	11	1970-01-01	1844.92	2	2	2	2	2	3220.34	3220.34	1375.42	1375.42	1844.92	1844.92	1610.17	1610.17	6	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond azure aquamarine papaya violet	37	1970-01-02	1290.35	3	3	3	3	3	4510.6900000000005	4510.6900000000005	1290.35	1290.35	1844.92	1844.92	1503.5633333333335	1503.5633333333335	1	1	1	3	2	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	40	1970-01-05	1206.26	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	2	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	35	1970-01-05	NULL	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	3	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond antique gainsboro frosted violet	25	NULL	NULL	1	1	1	1	0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4	1	1	6	4	1290.35	1375.42
Manufacturer#2	almond antique violet chocolate turquoise	15	1970-01-05	1690.68	2	4	2	4	4	3722.66	7222.020000000001	1690.68	1690.68	2031.98	2031.98	1861.33	1805.5050000000003	3	1	1	5	5	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	1	NULL	900.66	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	2	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	13	NULL	1800.7	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	1	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine sandy cyan gainsboro	32	NULL	1000.6	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	8	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	3	1970-01-03	1698.66	2	3	2	3	3	3499.36	5300.06	1698.66	1698.66	1800.7	1800.7	1749.68	1766.6866666666667	7	1	1	3	3	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	27	1970-01-02	1800.7	2	2	2	2	2	3601.4	3601.4	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	6	1	1	2	2	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	21	1970-01-01	1800.7	1	1	1	1	1	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	5	1	1	1	1	1800.7	1690.68
Manufacturer#2	almond aquamarine midnight light salmon	34	1970-01-04	2031.98	2	4	2	4	4	3730.6400000000003	7332.040000000001	1698.66	1698.66	2031.98	2031.98	1865.3200000000002	1833.0100000000002	4	1	1	4	4	1800.7	1690.68
PREHOOK: query: select "************ BATCH SIZE=2, BUFFERED BATCHES: 3 ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ BATCH SIZE=2, BUFFERED BATCHES: 3 ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ BATCH SIZE=2, BUFFERED BATCHES: 3 ************
PREHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	rowindex	p_date	p_retailprice	cs1	cs2	c1	c2	c_order	s1	s2	min1	min2	max1	max2	avg1	avg2	rn	r	dr	r_date	dr_date	fv	lv
Manufacturer#3	almond antique forest lavender goldenrod	33	1970-01-03	1190.27	2	3	2	3	3	2527.56	4450.54	1190.27	1190.27	1337.29	1922.98	1263.78	1483.5133333333333	1	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique olive coral navajo	28	1970-01-03	1337.29	2	3	2	3	3	2527.56	4450.54	1190.27	1190.27	1337.29	1922.98	1263.78	1483.5133333333333	8	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique misty red olive	31	1970-01-01	1922.98	1	1	1	1	1	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	7	1	1	1	1	1190.27	1190.27
Manufacturer#3	almond antique chartreuse khaki white	24	1970-01-04	99.68	4	5	4	5	5	2627.24	4550.22	99.68	99.68	1337.29	1922.98	875.7466666666666	1137.555	6	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	14	1970-01-04	NULL	4	5	4	5	5	2627.24	4550.22	99.68	99.68	1337.29	1922.98	875.7466666666666	1137.555	5	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	10	1970-01-05	1190.27	3	5	3	5	5	1289.95	3817.51	99.68	99.68	1190.27	1337.29	644.975	954.3775	4	1	1	6	4	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	19	NULL	590.27	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	3	1	1	7	5	1190.27	1190.27
Manufacturer#3	almond antique metallic orange dim	38	NULL	55.39	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	2	1	1	7	5	1190.27	1190.27
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	1970-01-04	4.0	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	1	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	9	1970-01-04	1632.66	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	2	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	23	1970-01-03	1632.66	5	5	4	4	5	6194.2300000000005	6194.2300000000005	2.0	2.0	1753.76	1753.76	1238.846	1238.846	3	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	8	1970-01-03	1173.15	5	5	4	4	5	6194.2300000000005	6194.2300000000005	2.0	2.0	1753.76	1753.76	1238.846	1238.846	4	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	12	1970-01-02	1753.76	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	5	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	17	1970-01-02	1632.66	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	6	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine burnished black steel	NULL	1970-01-02	2.0	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	7	1	1	1	1	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	26	NULL	1753.76	1	1	1	1	0	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	8	1	1	12	5	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	20	1970-01-05	1753.76	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	9	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	1970-01-05	5.0	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	10	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique salmon chartreuse burlywood	30	1970-01-05	1602.59	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	11	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	39	1970-01-04	1173.15	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	12	1	1	6	3	4.0	4.0
Manufacturer#5	almond antique medium spring khaki	29	1970-01-04	1611.66	2	5	2	4	5	3076.1400000000003	5888.969999999999	1464.48	6.0	1611.66	1788.73	1538.0700000000002	1177.7939999999999	6	1	1	5	4	1789.69	1611.66
Manufacturer#5	almond antique blue firebrick mint	7	NULL	1789.69	1	1	1	1	0	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1	1	1	6	5	1789.69	1611.66
Manufacturer#5	almond aquamarine dodger light gainsboro	36	1970-01-01	1018.1	2	2	1	1	2	1024.1	1024.1	6.0	6.0	1018.1	1018.1	512.05	512.05	2	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique medium spring khaki	NULL	1970-01-01	6.0	2	2	1	1	2	1024.1	1024.1	6.0	6.0	1018.1	1018.1	512.05	512.05	3	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique sky peru orange	22	1970-01-02	1788.73	3	3	2	2	3	2812.83	2812.83	6.0	6.0	1788.73	1788.73	937.61	937.61	4	1	1	3	2	1789.69	1611.66
Manufacturer#5	almond azure blanched chiffon midnight	18	1970-01-03	1464.48	2	4	2	3	4	3253.21	4277.3099999999995	1464.48	6.0	1788.73	1788.73	1626.605	1069.3274999999999	5	1	1	4	3	1789.69	1611.66
Manufacturer#4	almond antique violet mint lemon	16	1970-01-01	1375.42	2	2	2	2	2	3220.34	3220.34	1375.42	1375.42	1844.92	1844.92	1610.17	1610.17	5	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond aquamarine yellow dodger mint	11	1970-01-01	1844.92	2	2	2	2	2	3220.34	3220.34	1375.42	1375.42	1844.92	1844.92	1610.17	1610.17	6	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond azure aquamarine papaya violet	37	1970-01-02	1290.35	3	3	3	3	3	4510.6900000000005	4510.6900000000005	1290.35	1290.35	1844.92	1844.92	1503.5633333333335	1503.5633333333335	1	1	1	3	2	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	40	1970-01-05	1206.26	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	2	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	35	1970-01-05	NULL	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	3	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond antique gainsboro frosted violet	25	NULL	NULL	1	1	1	1	0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4	1	1	6	4	1290.35	1375.42
Manufacturer#2	almond antique violet chocolate turquoise	15	1970-01-05	1690.68	2	4	2	4	4	3722.66	7222.020000000001	1690.68	1690.68	2031.98	2031.98	1861.33	1805.5050000000003	3	1	1	5	5	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	1	NULL	900.66	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	2	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	13	NULL	1800.7	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	1	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine sandy cyan gainsboro	32	NULL	1000.6	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	8	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	3	1970-01-03	1698.66	2	3	2	3	3	3499.36	5300.06	1698.66	1698.66	1800.7	1800.7	1749.68	1766.6866666666667	7	1	1	3	3	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	27	1970-01-02	1800.7	2	2	2	2	2	3601.4	3601.4	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	6	1	1	2	2	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	21	1970-01-01	1800.7	1	1	1	1	1	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	5	1	1	1	1	1800.7	1690.68
Manufacturer#2	almond aquamarine midnight light salmon	34	1970-01-04	2031.98	2	4	2	4	4	3730.6400000000003	7332.040000000001	1698.66	1698.66	2031.98	2031.98	1865.3200000000002	1833.0100000000002	4	1	1	4	4	1800.7	1690.68
PREHOOK: query: select "************ BATCH SIZE=2, BUFFERED BATCHES: 5 ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ BATCH SIZE=2, BUFFERED BATCHES: 5 ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ BATCH SIZE=2, BUFFERED BATCHES: 5 ************
PREHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	rowindex	p_date	p_retailprice	cs1	cs2	c1	c2	c_order	s1	s2	min1	min2	max1	max2	avg1	avg2	rn	r	dr	r_date	dr_date	fv	lv
Manufacturer#3	almond antique forest lavender goldenrod	33	1970-01-03	1190.27	2	3	2	3	3	2527.56	4450.54	1190.27	1190.27	1337.29	1922.98	1263.78	1483.5133333333333	1	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique olive coral navajo	28	1970-01-03	1337.29	2	3	2	3	3	2527.56	4450.54	1190.27	1190.27	1337.29	1922.98	1263.78	1483.5133333333333	8	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique misty red olive	31	1970-01-01	1922.98	1	1	1	1	1	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	7	1	1	1	1	1190.27	1190.27
Manufacturer#3	almond antique chartreuse khaki white	24	1970-01-04	99.68	4	5	4	5	5	2627.24	4550.22	99.68	99.68	1337.29	1922.98	875.7466666666666	1137.555	6	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	14	1970-01-04	NULL	4	5	4	5	5	2627.24	4550.22	99.68	99.68	1337.29	1922.98	875.7466666666666	1137.555	5	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	10	1970-01-05	1190.27	3	5	3	5	5	1289.95	3817.51	99.68	99.68	1190.27	1337.29	644.975	954.3775	4	1	1	6	4	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	19	NULL	590.27	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	3	1	1	7	5	1190.27	1190.27
Manufacturer#3	almond antique metallic orange dim	38	NULL	55.39	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	2	1	1	7	5	1190.27	1190.27
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	1970-01-04	4.0	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	1	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	9	1970-01-04	1632.66	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	2	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	23	1970-01-03	1632.66	5	5	4	4	5	6194.2300000000005	6194.2300000000005	2.0	2.0	1753.76	1753.76	1238.846	1238.846	3	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	8	1970-01-03	1173.15	5	5	4	4	5	6194.2300000000005	6194.2300000000005	2.0	2.0	1753.76	1753.76	1238.846	1238.846	4	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	12	1970-01-02	1753.76	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	5	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	17	1970-01-02	1632.66	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	6	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine burnished black steel	NULL	1970-01-02	2.0	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	7	1	1	1	1	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	26	NULL	1753.76	1	1	1	1	0	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	8	1	1	12	5	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	20	1970-01-05	1753.76	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	9	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	1970-01-05	5.0	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	10	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique salmon chartreuse burlywood	30	1970-01-05	1602.59	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	11	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	39	1970-01-04	1173.15	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	12	1	1	6	3	4.0	4.0
Manufacturer#5	almond antique medium spring khaki	29	1970-01-04	1611.66	2	5	2	4	5	3076.1400000000003	5888.969999999999	1464.48	6.0	1611.66	1788.73	1538.0700000000002	1177.7939999999999	6	1	1	5	4	1789.69	1611.66
Manufacturer#5	almond antique blue firebrick mint	7	NULL	1789.69	1	1	1	1	0	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1	1	1	6	5	1789.69	1611.66
Manufacturer#5	almond aquamarine dodger light gainsboro	36	1970-01-01	1018.1	2	2	1	1	2	1024.1	1024.1	6.0	6.0	1018.1	1018.1	512.05	512.05	2	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique medium spring khaki	NULL	1970-01-01	6.0	2	2	1	1	2	1024.1	1024.1	6.0	6.0	1018.1	1018.1	512.05	512.05	3	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique sky peru orange	22	1970-01-02	1788.73	3	3	2	2	3	2812.83	2812.83	6.0	6.0	1788.73	1788.73	937.61	937.61	4	1	1	3	2	1789.69	1611.66
Manufacturer#5	almond azure blanched chiffon midnight	18	1970-01-03	1464.48	2	4	2	3	4	3253.21	4277.3099999999995	1464.48	6.0	1788.73	1788.73	1626.605	1069.3274999999999	5	1	1	4	3	1789.69	1611.66
Manufacturer#4	almond antique violet mint lemon	16	1970-01-01	1375.42	2	2	2	2	2	3220.34	3220.34	1375.42	1375.42	1844.92	1844.92	1610.17	1610.17	5	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond aquamarine yellow dodger mint	11	1970-01-01	1844.92	2	2	2	2	2	3220.34	3220.34	1375.42	1375.42	1844.92	1844.92	1610.17	1610.17	6	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond azure aquamarine papaya violet	37	1970-01-02	1290.35	3	3	3	3	3	4510.6900000000005	4510.6900000000005	1290.35	1290.35	1844.92	1844.92	1503.5633333333335	1503.5633333333335	1	1	1	3	2	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	40	1970-01-05	1206.26	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	2	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	35	1970-01-05	NULL	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	3	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond antique gainsboro frosted violet	25	NULL	NULL	1	1	1	1	0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4	1	1	6	4	1290.35	1375.42
Manufacturer#2	almond antique violet chocolate turquoise	15	1970-01-05	1690.68	2	4	2	4	4	3722.66	7222.020000000001	1690.68	1690.68	2031.98	2031.98	1861.33	1805.5050000000003	3	1	1	5	5	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	1	NULL	900.66	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	2	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	13	NULL	1800.7	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	1	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine sandy cyan gainsboro	32	NULL	1000.6	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	8	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	3	1970-01-03	1698.66	2	3	2	3	3	3499.36	5300.06	1698.66	1698.66	1800.7	1800.7	1749.68	1766.6866666666667	7	1	1	3	3	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	27	1970-01-02	1800.7	2	2	2	2	2	3601.4	3601.4	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	6	1	1	2	2	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	21	1970-01-01	1800.7	1	1	1	1	1	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	5	1	1	1	1	1800.7	1690.68
Manufacturer#2	almond aquamarine midnight light salmon	34	1970-01-04	2031.98	2	4	2	4	4	3730.6400000000003	7332.040000000001	1698.66	1698.66	2031.98	2031.98	1865.3200000000002	1833.0100000000002	4	1	1	4	4	1800.7	1690.68
PREHOOK: query: select "************ BATCH SIZE=2, BUFFERED BATCHES: 10 ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ BATCH SIZE=2, BUFFERED BATCHES: 10 ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ BATCH SIZE=2, BUFFERED BATCHES: 10 ************
PREHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and current row) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	rowindex	p_date	p_retailprice	cs1	cs2	c1	c2	c_order	s1	s2	min1	min2	max1	max2	avg1	avg2	rn	r	dr	r_date	dr_date	fv	lv
Manufacturer#3	almond antique forest lavender goldenrod	33	1970-01-03	1190.27	2	3	2	3	3	2527.56	4450.54	1190.27	1190.27	1337.29	1922.98	1263.78	1483.5133333333333	1	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique olive coral navajo	28	1970-01-03	1337.29	2	3	2	3	3	2527.56	4450.54	1190.27	1190.27	1337.29	1922.98	1263.78	1483.5133333333333	8	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique misty red olive	31	1970-01-01	1922.98	1	1	1	1	1	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	1922.98	7	1	1	1	1	1190.27	1190.27
Manufacturer#3	almond antique chartreuse khaki white	24	1970-01-04	99.68	4	5	4	5	5	2627.24	4550.22	99.68	99.68	1337.29	1922.98	875.7466666666666	1137.555	6	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	14	1970-01-04	NULL	4	5	4	5	5	2627.24	4550.22	99.68	99.68	1337.29	1922.98	875.7466666666666	1137.555	5	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	10	1970-01-05	1190.27	3	5	3	5	5	1289.95	3817.51	99.68	99.68	1190.27	1337.29	644.975	954.3775	4	1	1	6	4	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	19	NULL	590.27	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	3	1	1	7	5	1190.27	1190.27
Manufacturer#3	almond antique metallic orange dim	38	NULL	55.39	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	2	1	1	7	5	1190.27	1190.27
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	1970-01-04	4.0	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	1	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	9	1970-01-04	1632.66	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	2	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	23	1970-01-03	1632.66	5	5	4	4	5	6194.2300000000005	6194.2300000000005	2.0	2.0	1753.76	1753.76	1238.846	1238.846	3	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	8	1970-01-03	1173.15	5	5	4	4	5	6194.2300000000005	6194.2300000000005	2.0	2.0	1753.76	1753.76	1238.846	1238.846	4	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	12	1970-01-02	1753.76	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	5	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	17	1970-01-02	1632.66	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	6	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine burnished black steel	NULL	1970-01-02	2.0	3	3	2	2	3	3388.42	3388.42	2.0	2.0	1753.76	1753.76	1129.4733333333334	1129.4733333333334	7	1	1	1	1	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	26	NULL	1753.76	1	1	1	1	0	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	8	1	1	12	5	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	20	1970-01-05	1753.76	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	9	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	1970-01-05	5.0	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	10	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique salmon chartreuse burlywood	30	1970-01-05	1602.59	6	11	4	8	11	6171.16	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666666	1124.1263636363637	11	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	39	1970-01-04	1173.15	5	8	4	6	8	5615.620000000001	9004.04	4.0	2.0	1632.66	1753.76	1123.1240000000003	1125.505	12	1	1	6	3	4.0	4.0
Manufacturer#5	almond antique medium spring khaki	29	1970-01-04	1611.66	2	5	2	4	5	3076.1400000000003	5888.969999999999	1464.48	6.0	1611.66	1788.73	1538.0700000000002	1177.7939999999999	6	1	1	5	4	1789.69	1611.66
Manufacturer#5	almond antique blue firebrick mint	7	NULL	1789.69	1	1	1	1	0	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1	1	1	6	5	1789.69	1611.66
Manufacturer#5	almond aquamarine dodger light gainsboro	36	1970-01-01	1018.1	2	2	1	1	2	1024.1	1024.1	6.0	6.0	1018.1	1018.1	512.05	512.05	2	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique medium spring khaki	NULL	1970-01-01	6.0	2	2	1	1	2	1024.1	1024.1	6.0	6.0	1018.1	1018.1	512.05	512.05	3	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique sky peru orange	22	1970-01-02	1788.73	3	3	2	2	3	2812.83	2812.83	6.0	6.0	1788.73	1788.73	937.61	937.61	4	1	1	3	2	1789.69	1611.66
Manufacturer#5	almond azure blanched chiffon midnight	18	1970-01-03	1464.48	2	4	2	3	4	3253.21	4277.3099999999995	1464.48	6.0	1788.73	1788.73	1626.605	1069.3274999999999	5	1	1	4	3	1789.69	1611.66
Manufacturer#4	almond antique violet mint lemon	16	1970-01-01	1375.42	2	2	2	2	2	3220.34	3220.34	1375.42	1375.42	1844.92	1844.92	1610.17	1610.17	5	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond aquamarine yellow dodger mint	11	1970-01-01	1844.92	2	2	2	2	2	3220.34	3220.34	1375.42	1375.42	1844.92	1844.92	1610.17	1610.17	6	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond azure aquamarine papaya violet	37	1970-01-02	1290.35	3	3	3	3	3	4510.6900000000005	4510.6900000000005	1290.35	1290.35	1844.92	1844.92	1503.5633333333335	1503.5633333333335	1	1	1	3	2	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	40	1970-01-05	1206.26	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	2	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	35	1970-01-05	NULL	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	3	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond antique gainsboro frosted violet	25	NULL	NULL	1	1	1	1	0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4	1	1	6	4	1290.35	1375.42
Manufacturer#2	almond antique violet chocolate turquoise	15	1970-01-05	1690.68	2	4	2	4	4	3722.66	7222.020000000001	1690.68	1690.68	2031.98	2031.98	1861.33	1805.5050000000003	3	1	1	5	5	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	1	NULL	900.66	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	2	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	13	NULL	1800.7	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	1	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine sandy cyan gainsboro	32	NULL	1000.6	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	8	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	3	1970-01-03	1698.66	2	3	2	3	3	3499.36	5300.06	1698.66	1698.66	1800.7	1800.7	1749.68	1766.6866666666667	7	1	1	3	3	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	27	1970-01-02	1800.7	2	2	2	2	2	3601.4	3601.4	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	6	1	1	2	2	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	21	1970-01-01	1800.7	1	1	1	1	1	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	1800.7	5	1	1	1	1	1800.7	1690.68
Manufacturer#2	almond aquamarine midnight light salmon	34	1970-01-04	2031.98	2	4	2	4	4	3730.6400000000003	7332.040000000001	1698.66	1698.66	2031.98	2031.98	1865.3200000000002	1833.0100000000002	4	1	1	4	4	1800.7	1690.68
PREHOOK: query: select "************ FOLLOWING ROWS NON-VECTORIZED REFERENCE ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ FOLLOWING ROWS NON-VECTORIZED REFERENCE ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ FOLLOWING ROWS NON-VECTORIZED REFERENCE ************
PREHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	rowindex	p_date	p_retailprice	cs1	cs2	c1	c2	c_order	s1	s2	min1	min2	max1	max2	avg1	avg2	rn	r	dr	r_date	dr_date	fv	lv
Manufacturer#3	almond antique forest lavender goldenrod	33	1970-01-03	1190.27	5	5	5	5	5	3817.51	4550.219999999999	99.68	99.68	1337.29	1922.98	954.3775	1137.5549999999998	1	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique olive coral navajo	28	1970-01-03	1337.29	5	5	5	5	5	3817.51	4550.219999999999	99.68	99.68	1337.29	1922.98	954.3775	1137.5549999999998	8	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique misty red olive	31	1970-01-01	1922.98	5	1	5	1	1	4550.22	1922.98	99.68	1922.98	1922.98	1922.98	1137.555	1922.98	7	1	1	1	1	1190.27	1190.27
Manufacturer#3	almond antique chartreuse khaki white	24	1970-01-04	99.68	5	6	5	6	6	3817.51	5740.49	99.68	99.68	1337.29	1922.98	954.3775	1148.098	6	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	14	1970-01-04	NULL	5	6	5	6	6	3817.51	5740.49	99.68	99.68	1337.29	1922.98	954.3775	1148.098	5	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	10	1970-01-05	1190.27	3	5	3	5	5	1289.9500000000003	3817.5099999999998	99.68	99.68	1190.27	1337.29	644.9750000000001	954.3774999999999	4	1	1	6	4	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	19	NULL	590.27	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	3	1	1	7	5	1190.27	1190.27
Manufacturer#3	almond antique metallic orange dim	38	NULL	55.39	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	2	1	1	7	5	1190.27	1190.27
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	1970-01-04	4.0	8	11	6	8	11	8976.97	12365.390000000001	4.0	2.0	1753.76	1753.76	1122.12125	1124.1263636363637	1	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	9	1970-01-04	1632.66	8	11	6	8	11	8976.97	12365.390000000001	4.0	2.0	1753.76	1753.76	1122.12125	1124.1263636363637	2	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	23	1970-01-03	1632.66	11	8	8	6	8	12365.39	9004.04	2.0	2.0	1753.76	1753.76	1124.1263636363635	1125.505	3	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	8	1970-01-03	1173.15	11	8	8	6	8	12365.39	9004.04	2.0	2.0	1753.76	1753.76	1124.1263636363635	1125.505	4	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	12	1970-01-02	1753.76	11	5	8	4	5	12365.39	6194.23	2.0	2.0	1753.76	1753.76	1124.1263636363635	1238.846	5	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	17	1970-01-02	1632.66	11	5	8	4	5	12365.39	6194.23	2.0	2.0	1753.76	1753.76	1124.1263636363635	1238.846	6	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine burnished black steel	NULL	1970-01-02	2.0	11	5	8	4	5	12365.39	6194.23	2.0	2.0	1753.76	1753.76	1124.1263636363635	1238.846	7	1	1	1	1	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	26	NULL	1753.76	1	1	1	1	0	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	8	1	1	12	5	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	20	1970-01-05	1753.76	6	11	4	8	11	6171.159999999999	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666664	1124.1263636363637	9	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	1970-01-05	5.0	6	11	4	8	11	6171.159999999999	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666664	1124.1263636363637	10	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique salmon chartreuse burlywood	30	1970-01-05	1602.59	6	11	4	8	11	6171.159999999999	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666664	1124.1263636363637	11	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	39	1970-01-04	1173.15	8	11	6	8	11	8976.97	12365.390000000001	4.0	2.0	1753.76	1753.76	1122.12125	1124.1263636363637	12	1	1	6	3	4.0	4.0
Manufacturer#5	almond antique medium spring khaki	29	1970-01-04	1611.66	2	5	2	4	5	3076.139999999999	5888.969999999999	1464.48	6.0	1611.66	1788.73	1538.0699999999995	1177.7939999999999	6	1	1	5	4	1789.69	1611.66
Manufacturer#5	almond antique blue firebrick mint	7	NULL	1789.69	1	1	1	1	0	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1	1	1	6	5	1789.69	1611.66
Manufacturer#5	almond aquamarine dodger light gainsboro	36	1970-01-01	1018.1	5	3	4	2	3	5888.969999999999	2812.83	6.0	6.0	1788.73	1788.73	1177.7939999999999	937.61	2	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique medium spring khaki	NULL	1970-01-01	6.0	5	3	4	2	3	5888.969999999999	2812.83	6.0	6.0	1788.73	1788.73	1177.7939999999999	937.61	3	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique sky peru orange	22	1970-01-02	1788.73	5	4	4	3	4	5888.969999999999	4277.3099999999995	6.0	6.0	1788.73	1788.73	1177.7939999999999	1069.3274999999999	4	1	1	3	2	1789.69	1611.66
Manufacturer#5	almond azure blanched chiffon midnight	18	1970-01-03	1464.48	3	5	3	4	5	4864.869999999999	5888.969999999999	1464.48	6.0	1788.73	1788.73	1621.623333333333	1177.7939999999999	5	1	1	4	3	1789.69	1611.66
Manufacturer#4	almond antique violet mint lemon	16	1970-01-01	1375.42	3	3	3	3	3	4510.6900000000005	4510.6900000000005	1290.35	1290.35	1844.92	1844.92	1503.5633333333335	1503.5633333333335	5	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond aquamarine yellow dodger mint	11	1970-01-01	1844.92	3	3	3	3	3	4510.6900000000005	4510.6900000000005	1290.35	1290.35	1844.92	1844.92	1503.5633333333335	1503.5633333333335	6	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond azure aquamarine papaya violet	37	1970-01-02	1290.35	5	3	5	3	3	5716.950000000001	4510.6900000000005	1206.26	1290.35	1844.92	1844.92	1429.2375000000002	1503.5633333333335	1	1	1	3	2	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	40	1970-01-05	1206.26	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	2	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	35	1970-01-05	NULL	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	3	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond antique gainsboro frosted violet	25	NULL	NULL	1	1	1	1	0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4	1	1	6	4	1290.35	1375.42
Manufacturer#2	almond antique violet chocolate turquoise	15	1970-01-05	1690.68	2	4	2	4	4	3722.6600000000017	7222.020000000001	1690.68	1690.68	2031.98	2031.98	1861.3300000000008	1805.5050000000003	3	1	1	5	5	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	1	NULL	900.66	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	2	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	13	NULL	1800.7	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	1	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine sandy cyan gainsboro	32	NULL	1000.6	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	8	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	3	1970-01-03	1698.66	4	4	4	4	4	7222.020000000001	7332.040000000001	1690.68	1698.66	2031.98	2031.98	1805.5050000000003	1833.0100000000002	7	1	1	3	3	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	27	1970-01-02	1800.7	5	3	5	3	3	9022.720000000001	5300.06	1690.68	1698.66	2031.98	1800.7	1804.5440000000003	1766.6866666666667	6	1	1	2	2	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	21	1970-01-01	1800.7	4	2	4	2	2	7332.040000000001	3601.4	1698.66	1800.7	2031.98	1800.7	1833.0100000000002	1800.7	5	1	1	1	1	1800.7	1690.68
Manufacturer#2	almond aquamarine midnight light salmon	34	1970-01-04	2031.98	3	5	3	5	5	5421.3200000000015	9022.720000000001	1690.68	1690.68	2031.98	2031.98	1807.1066666666673	1804.5440000000003	4	1	1	4	4	1800.7	1690.68
PREHOOK: query: select "************ FOLLOWING ROWS ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ FOLLOWING ROWS ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ FOLLOWING ROWS ************
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 11100 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_date:date, 3:p_timestamp:timestamp, 4:p_int:int, 5:p_retailprice:double, 6:p_decimal:decimal(10,4)/DECIMAL_64, 7:rowindex:int, 8:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), p_date (type: date)
                    null sort order: az
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumns: 0:string, 2:date
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumns: 0:string
                        valueColumns: 1:string, 5:double, 7:int
                    Statistics: Num rows: 40 Data size: 11100 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_name (type: string), p_retailprice (type: double), rowindex (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 8
                    includeColumns: [0, 1, 2, 5, 7]
                    dataColumns: p_mfgr:string, p_name:string, p_date:date, p_timestamp:timestamp, p_int:int, p_retailprice:double, p_decimal:decimal(10,4)/DECIMAL_64, rowindex:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                notVectorizedReason: PTF operator: count only CURRENT ROW end frame is supported for RANGE
                vectorized: false
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), KEY.reducesinkkey1 (type: date), VALUE._col3 (type: double), VALUE._col5 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col5, _col7
                Statistics: Num rows: 40 Data size: 11100 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: date, _col5: double, _col7: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col2 ASC NULLS LAST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(1)~FOLLOWING(3)
                              isStar: true
                            window function definition
                              alias: count_window_1
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(3)~FOLLOWING(1)
                              isStar: true
                            window function definition
                              alias: count_window_2
                              arguments: _col7
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(1)~FOLLOWING(3)
                            window function definition
                              alias: count_window_3
                              arguments: _col7
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(3)~FOLLOWING(1)
                            window function definition
                              alias: count_window_4
                              arguments: _col2
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(3)~FOLLOWING(1)
                            window function definition
                              alias: sum_window_5
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: RANGE PRECEDING(1)~FOLLOWING(3)
                            window function definition
                              alias: sum_window_6
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: RANGE PRECEDING(3)~FOLLOWING(1)
                            window function definition
                              alias: min_window_7
                              arguments: _col5
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: RANGE PRECEDING(1)~FOLLOWING(3)
                            window function definition
                              alias: min_window_8
                              arguments: _col5
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: RANGE PRECEDING(3)~FOLLOWING(1)
                            window function definition
                              alias: max_window_9
                              arguments: _col5
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: RANGE PRECEDING(1)~FOLLOWING(3)
                            window function definition
                              alias: max_window_10
                              arguments: _col5
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: RANGE PRECEDING(3)~FOLLOWING(1)
                            window function definition
                              alias: avg_window_11
                              arguments: _col5
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: RANGE PRECEDING(1)~FOLLOWING(3)
                            window function definition
                              alias: avg_window_12
                              arguments: _col5
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: RANGE PRECEDING(3)~FOLLOWING(1)
                            window function definition
                              alias: rank_window_16
                              arguments: _col2
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: dense_rank_window_17
                              arguments: _col2
                              name: dense_rank
                              window function: GenericUDAFDenseRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 40 Data size: 11100 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: count_window_0 (type: bigint), count_window_1 (type: bigint), count_window_2 (type: bigint), count_window_3 (type: bigint), count_window_4 (type: bigint), sum_window_5 (type: double), sum_window_6 (type: double), min_window_7 (type: double), min_window_8 (type: double), max_window_9 (type: double), max_window_10 (type: double), avg_window_11 (type: double), avg_window_12 (type: double), rank_window_16 (type: int), dense_rank_window_17 (type: int), _col0 (type: string), _col1 (type: string), _col2 (type: date), _col5 (type: double), _col7 (type: int)
                    outputColumnNames: count_window_0, count_window_1, count_window_2, count_window_3, count_window_4, sum_window_5, sum_window_6, min_window_7, min_window_8, max_window_9, max_window_10, avg_window_11, avg_window_12, rank_window_16, dense_rank_window_17, _col0, _col1, _col2, _col5, _col7
                    Statistics: Num rows: 40 Data size: 11100 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      null sort order: a
                      sort order: +
                      Map-reduce partition columns: _col0 (type: string)
                      Statistics: Num rows: 40 Data size: 11100 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: count_window_0 (type: bigint), count_window_1 (type: bigint), count_window_2 (type: bigint), count_window_3 (type: bigint), count_window_4 (type: bigint), sum_window_5 (type: double), sum_window_6 (type: double), min_window_7 (type: double), min_window_8 (type: double), max_window_9 (type: double), max_window_10 (type: double), avg_window_11 (type: double), avg_window_12 (type: double), rank_window_16 (type: int), dense_rank_window_17 (type: int), _col1 (type: string), _col2 (type: date), _col5 (type: double), _col7 (type: int)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 20
                    dataColumns: KEY.reducesinkkey0:string, VALUE._col0:bigint, VALUE._col1:bigint, VALUE._col2:bigint, VALUE._col3:bigint, VALUE._col4:bigint, VALUE._col5:double, VALUE._col6:double, VALUE._col7:double, VALUE._col8:double, VALUE._col9:double, VALUE._col10:double, VALUE._col11:double, VALUE._col12:double, VALUE._col13:int, VALUE._col14:int, VALUE._col15:string, VALUE._col16:date, VALUE._col19:double, VALUE._col21:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, bigint, bigint, double]
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: bigint), VALUE._col1 (type: bigint), VALUE._col2 (type: bigint), VALUE._col3 (type: bigint), VALUE._col4 (type: bigint), VALUE._col5 (type: double), VALUE._col6 (type: double), VALUE._col7 (type: double), VALUE._col8 (type: double), VALUE._col9 (type: double), VALUE._col10 (type: double), VALUE._col11 (type: double), VALUE._col12 (type: double), VALUE._col13 (type: int), VALUE._col14 (type: int), KEY.reducesinkkey0 (type: string), VALUE._col15 (type: string), VALUE._col16 (type: date), VALUE._col19 (type: double), VALUE._col21 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col20, _col22
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 16, 17, 18, 19]
                Statistics: Num rows: 40 Data size: 15092 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: bigint, _col1: bigint, _col2: bigint, _col3: bigint, _col4: bigint, _col5: double, _col6: double, _col7: double, _col8: double, _col9: double, _col10: double, _col11: double, _col12: double, _col13: int, _col14: int, _col15: string, _col16: string, _col17: date, _col20: double, _col22: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col15 ASC NULLS FIRST
                        partition by: _col15
                        raw input shape:
                        window functions:
                            window function definition
                              alias: row_number_window_13
                              name: row_number
                              window function: GenericUDAFRowNumberEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: rank_window_14
                              arguments: _col15
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: dense_rank_window_15
                              arguments: _col15
                              name: dense_rank
                              window function: GenericUDAFDenseRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                            window function definition
                              alias: first_value_window_18
                              arguments: _col20
                              name: first_value
                              window function: GenericUDAFFirstValueEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: true
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorRowNumber, VectorPTFEvaluatorRank, VectorPTFEvaluatorDenseRank, VectorPTFEvaluatorDoubleFirstValue]
                      functionInputExpressions: [null, col 0:string, col 0:string, col 18:double]
                      functionNames: [row_number, rank, dense_rank, first_value]
                      keyInputColumns: [0]
                      native: true
                      nonKeyInputColumns: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
                      orderExpressions: [col 0:string]
                      outputColumns: [20, 21, 22, 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 16, 17, 18, 19]
                      outputTypes: [int, int, int, double, bigint, bigint, bigint, bigint, bigint, double, double, double, double, double, double, double, double, int, int, string, string, date, double, int]
                      partitionExpressions: [col 0:string]
                      streamingColumns: [20, 21, 22, 23]
                  Statistics: Num rows: 40 Data size: 15092 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: row_number_window_13 (type: int), rank_window_14 (type: int), dense_rank_window_15 (type: int), first_value_window_18 (type: double), _col0 (type: bigint), _col1 (type: bigint), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: bigint), _col5 (type: double), _col6 (type: double), _col7 (type: double), _col8 (type: double), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: double), _col13 (type: int), _col14 (type: int), _col15 (type: string), _col16 (type: string), _col17 (type: date), _col20 (type: double), _col22 (type: int)
                    outputColumnNames: row_number_window_13, rank_window_14, dense_rank_window_15, first_value_window_18, _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col20, _col22
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [20, 21, 22, 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 16, 17, 18, 19]
                    Statistics: Num rows: 40 Data size: 15092 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col15 (type: string)
                      null sort order: z
                      sort order: -
                      Map-reduce partition columns: _col15 (type: string)
                      Reduce Sink Vectorization:
                          className: VectorReduceSinkStringOperator
                          keyColumns: 0:string
                          native: true
                          nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          valueColumns: 20:int, 21:int, 22:int, 23:double, 1:bigint, 2:bigint, 3:bigint, 4:bigint, 5:bigint, 6:double, 7:double, 8:double, 9:double, 10:double, 11:double, 12:double, 13:double, 14:int, 15:int, 16:string, 17:date, 18:double, 19:int
                      Statistics: Num rows: 40 Data size: 15092 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: row_number_window_13 (type: int), rank_window_14 (type: int), dense_rank_window_15 (type: int), first_value_window_18 (type: double), _col0 (type: bigint), _col1 (type: bigint), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: bigint), _col5 (type: double), _col6 (type: double), _col7 (type: double), _col8 (type: double), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: double), _col13 (type: int), _col14 (type: int), _col16 (type: string), _col17 (type: date), _col20 (type: double), _col22 (type: int)
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: z
                reduceColumnSortOrder: -
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 24
                    dataColumns: KEY.reducesinkkey0:string, VALUE._col0:int, VALUE._col1:int, VALUE._col2:int, VALUE._col3:double, VALUE._col4:bigint, VALUE._col5:bigint, VALUE._col6:bigint, VALUE._col7:bigint, VALUE._col8:bigint, VALUE._col9:double, VALUE._col10:double, VALUE._col11:double, VALUE._col12:double, VALUE._col13:double, VALUE._col14:double, VALUE._col15:double, VALUE._col16:double, VALUE._col17:int, VALUE._col18:int, VALUE._col19:string, VALUE._col20:date, VALUE._col23:double, VALUE._col25:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [double]
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: int), VALUE._col1 (type: int), VALUE._col2 (type: int), VALUE._col3 (type: double), VALUE._col4 (type: bigint), VALUE._col5 (type: bigint), VALUE._col6 (type: bigint), VALUE._col7 (type: bigint), VALUE._col8 (type: bigint), VALUE._col9 (type: double), VALUE._col10 (type: double), VALUE._col11 (type: double), VALUE._col12 (type: double), VALUE._col13 (type: double), VALUE._col14 (type: double), VALUE._col15 (type: double), VALUE._col16 (type: double), VALUE._col17 (type: int), VALUE._col18 (type: int), KEY.reducesinkkey0 (type: string), VALUE._col19 (type: string), VALUE._col20 (type: date), VALUE._col23 (type: double), VALUE._col25 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col24, _col26
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 20, 21, 22, 23]
                Statistics: Num rows: 40 Data size: 14916 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: int, _col1: int, _col2: int, _col3: double, _col4: bigint, _col5: bigint, _col6: bigint, _col7: bigint, _col8: bigint, _col9: double, _col10: double, _col11: double, _col12: double, _col13: double, _col14: double, _col15: double, _col16: double, _col17: int, _col18: int, _col19: string, _col20: string, _col21: date, _col24: double, _col26: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col19 DESC NULLS LAST
                        partition by: _col19
                        raw input shape:
                        window functions:
                            window function definition
                              alias: first_value_window_19
                              arguments: _col24
                              name: first_value
                              window function: GenericUDAFFirstValueEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: true
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorDoubleFirstValue]
                      functionInputExpressions: [col 22:double]
                      functionNames: [first_value]
                      keyInputColumns: [0]
                      native: true
                      nonKeyInputColumns: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
                      orderExpressions: [col 0:string]
                      outputColumns: [24, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 20, 21, 22, 23]
                      outputTypes: [double, int, int, int, double, bigint, bigint, bigint, bigint, bigint, double, double, double, double, double, double, double, double, int, int, string, string, date, double, int]
                      partitionExpressions: [col 0:string]
                      streamingColumns: [24]
                  Statistics: Num rows: 40 Data size: 14916 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col19 (type: string), _col20 (type: string), _col26 (type: int), _col21 (type: date), _col24 (type: double), _col4 (type: bigint), _col5 (type: bigint), _col6 (type: bigint), _col7 (type: bigint), _col8 (type: bigint), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: double), _col13 (type: double), _col14 (type: double), _col15 (type: double), _col16 (type: double), _col0 (type: int), _col1 (type: int), _col2 (type: int), _col17 (type: int), _col18 (type: int), _col3 (type: double), first_value_window_19 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 20, 23, 21, 22, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 18, 19, 4, 24]
                    Statistics: Num rows: 40 Data size: 13284 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 13284 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as cs1,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as cs2,
count(rowindex) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as c1,
count(rowindex) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as c2,
count(p_date) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as c_order,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as s1,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as s2,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as min1,
min(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as min2,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as max1,
max(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as max2,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 1 preceding and 3 following) as avg1,
avg(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and 1 following) as avg2,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
rank() over(partition by p_mfgr order by p_date) as r_date,
dense_rank() over(partition by p_mfgr order by p_date) as dr_date,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	rowindex	p_date	p_retailprice	cs1	cs2	c1	c2	c_order	s1	s2	min1	min2	max1	max2	avg1	avg2	rn	r	dr	r_date	dr_date	fv	lv
Manufacturer#3	almond antique forest lavender goldenrod	33	1970-01-03	1190.27	5	5	5	5	5	3817.51	4550.219999999999	99.68	99.68	1337.29	1922.98	954.3775	1137.5549999999998	1	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique olive coral navajo	28	1970-01-03	1337.29	5	5	5	5	5	3817.51	4550.219999999999	99.68	99.68	1337.29	1922.98	954.3775	1137.5549999999998	8	1	1	2	2	1190.27	1190.27
Manufacturer#3	almond antique misty red olive	31	1970-01-01	1922.98	5	1	5	1	1	4550.22	1922.98	99.68	1922.98	1922.98	1922.98	1137.555	1922.98	7	1	1	1	1	1190.27	1190.27
Manufacturer#3	almond antique chartreuse khaki white	24	1970-01-04	99.68	5	6	5	6	6	3817.51	5740.49	99.68	99.68	1337.29	1922.98	954.3775	1148.098	6	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	14	1970-01-04	NULL	5	6	5	6	6	3817.51	5740.49	99.68	99.68	1337.29	1922.98	954.3775	1148.098	5	1	1	4	3	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	10	1970-01-05	1190.27	3	5	3	5	5	1289.9500000000003	3817.5099999999998	99.68	99.68	1190.27	1337.29	644.9750000000001	954.3774999999999	4	1	1	6	4	1190.27	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	19	NULL	590.27	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	3	1	1	7	5	1190.27	1190.27
Manufacturer#3	almond antique metallic orange dim	38	NULL	55.39	2	2	2	2	0	645.66	645.66	55.39	55.39	590.27	590.27	322.83	322.83	2	1	1	7	5	1190.27	1190.27
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	1970-01-04	4.0	8	11	6	8	11	8976.97	12365.390000000001	4.0	2.0	1753.76	1753.76	1122.12125	1124.1263636363637	1	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	9	1970-01-04	1632.66	8	11	6	8	11	8976.97	12365.390000000001	4.0	2.0	1753.76	1753.76	1122.12125	1124.1263636363637	2	1	1	6	3	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	23	1970-01-03	1632.66	11	8	8	6	8	12365.39	9004.04	2.0	2.0	1753.76	1753.76	1124.1263636363635	1125.505	3	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	8	1970-01-03	1173.15	11	8	8	6	8	12365.39	9004.04	2.0	2.0	1753.76	1753.76	1124.1263636363635	1125.505	4	1	1	4	2	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	12	1970-01-02	1753.76	11	5	8	4	5	12365.39	6194.23	2.0	2.0	1753.76	1753.76	1124.1263636363635	1238.846	5	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine pink moccasin thistle	17	1970-01-02	1632.66	11	5	8	4	5	12365.39	6194.23	2.0	2.0	1753.76	1753.76	1124.1263636363635	1238.846	6	1	1	1	1	4.0	4.0
Manufacturer#1	almond aquamarine burnished black steel	NULL	1970-01-02	2.0	11	5	8	4	5	12365.39	6194.23	2.0	2.0	1753.76	1753.76	1124.1263636363635	1238.846	7	1	1	1	1	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	26	NULL	1753.76	1	1	1	1	0	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	1753.76	8	1	1	12	5	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	20	1970-01-05	1753.76	6	11	4	8	11	6171.159999999999	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666664	1124.1263636363637	9	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	1970-01-05	5.0	6	11	4	8	11	6171.159999999999	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666664	1124.1263636363637	10	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique salmon chartreuse burlywood	30	1970-01-05	1602.59	6	11	4	8	11	6171.159999999999	12365.390000000001	4.0	2.0	1753.76	1753.76	1028.5266666666664	1124.1263636363637	11	1	1	9	4	4.0	4.0
Manufacturer#1	almond antique burnished rose metallic	39	1970-01-04	1173.15	8	11	6	8	11	8976.97	12365.390000000001	4.0	2.0	1753.76	1753.76	1122.12125	1124.1263636363637	12	1	1	6	3	4.0	4.0
Manufacturer#5	almond antique medium spring khaki	29	1970-01-04	1611.66	2	5	2	4	5	3076.139999999999	5888.969999999999	1464.48	6.0	1611.66	1788.73	1538.0699999999995	1177.7939999999999	6	1	1	5	4	1789.69	1611.66
Manufacturer#5	almond antique blue firebrick mint	7	NULL	1789.69	1	1	1	1	0	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1789.69	1	1	1	6	5	1789.69	1611.66
Manufacturer#5	almond aquamarine dodger light gainsboro	36	1970-01-01	1018.1	5	3	4	2	3	5888.969999999999	2812.83	6.0	6.0	1788.73	1788.73	1177.7939999999999	937.61	2	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique medium spring khaki	NULL	1970-01-01	6.0	5	3	4	2	3	5888.969999999999	2812.83	6.0	6.0	1788.73	1788.73	1177.7939999999999	937.61	3	1	1	1	1	1789.69	1611.66
Manufacturer#5	almond antique sky peru orange	22	1970-01-02	1788.73	5	4	4	3	4	5888.969999999999	4277.3099999999995	6.0	6.0	1788.73	1788.73	1177.7939999999999	1069.3274999999999	4	1	1	3	2	1789.69	1611.66
Manufacturer#5	almond azure blanched chiffon midnight	18	1970-01-03	1464.48	3	5	3	4	5	4864.869999999999	5888.969999999999	1464.48	6.0	1788.73	1788.73	1621.623333333333	1177.7939999999999	5	1	1	4	3	1789.69	1611.66
Manufacturer#4	almond antique violet mint lemon	16	1970-01-01	1375.42	3	3	3	3	3	4510.6900000000005	4510.6900000000005	1290.35	1290.35	1844.92	1844.92	1503.5633333333335	1503.5633333333335	5	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond aquamarine yellow dodger mint	11	1970-01-01	1844.92	3	3	3	3	3	4510.6900000000005	4510.6900000000005	1290.35	1290.35	1844.92	1844.92	1503.5633333333335	1503.5633333333335	6	1	1	1	1	1290.35	1375.42
Manufacturer#4	almond azure aquamarine papaya violet	37	1970-01-02	1290.35	5	3	5	3	3	5716.950000000001	4510.6900000000005	1206.26	1290.35	1844.92	1844.92	1429.2375000000002	1503.5633333333335	1	1	1	3	2	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	40	1970-01-05	1206.26	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	2	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	35	1970-01-05	NULL	2	3	2	3	3	1206.26	2496.6099999999997	1206.26	1206.26	1206.26	1290.35	1206.26	1248.3049999999998	3	1	1	4	3	1290.35	1375.42
Manufacturer#4	almond antique gainsboro frosted violet	25	NULL	NULL	1	1	1	1	0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4	1	1	6	4	1290.35	1375.42
Manufacturer#2	almond antique violet chocolate turquoise	15	1970-01-05	1690.68	2	4	2	4	4	3722.6600000000017	7222.020000000001	1690.68	1690.68	2031.98	2031.98	1861.3300000000008	1805.5050000000003	3	1	1	5	5	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	1	NULL	900.66	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	2	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	13	NULL	1800.7	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	1	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine sandy cyan gainsboro	32	NULL	1000.6	3	3	3	3	0	3701.96	3701.96	900.66	900.66	1800.7	1800.7	1233.9866666666667	1233.9866666666667	8	1	1	6	6	1800.7	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	3	1970-01-03	1698.66	4	4	4	4	4	7222.020000000001	7332.040000000001	1690.68	1698.66	2031.98	2031.98	1805.5050000000003	1833.0100000000002	7	1	1	3	3	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	27	1970-01-02	1800.7	5	3	5	3	3	9022.720000000001	5300.06	1690.68	1698.66	2031.98	1800.7	1804.5440000000003	1766.6866666666667	6	1	1	2	2	1800.7	1690.68
Manufacturer#2	almond antique violet turquoise frosted	21	1970-01-01	1800.7	4	2	4	2	2	7332.040000000001	3601.4	1698.66	1800.7	2031.98	1800.7	1833.0100000000002	1800.7	5	1	1	1	1	1800.7	1690.68
Manufacturer#2	almond aquamarine midnight light salmon	34	1970-01-04	2031.98	3	5	3	5	5	5421.3200000000015	9022.720000000001	1690.68	1690.68	2031.98	2031.98	1807.1066666666673	1804.5440000000003	4	1	1	4	4	1800.7	1690.68
PREHOOK: query: select "************ STRING WINDOW RANGE TYPE ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ STRING WINDOW RANGE TYPE ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ STRING WINDOW RANGE TYPE ************
PREHOOK: query: select "************ STRING WINDOW RANGE TYPE (NON-VECTORIZED REFERENCE) ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ STRING WINDOW RANGE TYPE (NON-VECTORIZED REFERENCE) ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ STRING WINDOW RANGE TYPE (NON-VECTORIZED REFERENCE) ************
PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_name range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_name range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_name range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_name range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_retailprice	cs	s
Manufacturer#1	almond antique burnished rose metallic	1970-01-04 00:00:00	39	1970-01-04	1173.15	2	2346.3
Manufacturer#1	almond antique burnished rose metallic	1970-01-03 00:00:00	8	1970-01-03	1173.15	2	2346.3
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-02 00:00:00	12	1970-01-02	1753.76	4	5266.28
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	20	1970-01-05	1753.76	4	5266.28
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	NULL	1970-01-05	5.0	4	5266.28
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	26	NULL	1753.76	4	5266.28
Manufacturer#1	almond antique salmon chartreuse burlywood	1970-01-05 00:00:00	30	1970-01-05	1602.59	1	1602.59
Manufacturer#1	almond aquamarine burnished black steel	1970-01-02 00:00:00	NULL	1970-01-02	2.0	1	2.0
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-02 00:00:00	17	1970-01-02	1632.66	4	4901.9800000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	NULL	1970-01-04	4.0	4	4901.9800000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	9	1970-01-04	1632.66	4	4901.9800000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-03 00:00:00	23	1970-01-03	1632.66	4	4901.9800000000005
Manufacturer#2	almond antique violet chocolate turquoise	1970-01-05 00:00:00	15	1970-01-05	1690.68	1	1690.68
Manufacturer#2	almond antique violet turquoise frosted	NULL	13	NULL	1800.7	3	5402.1
Manufacturer#2	almond antique violet turquoise frosted	1970-01-01 00:00:00	21	1970-01-01	1800.7	3	5402.1
Manufacturer#2	almond antique violet turquoise frosted	1970-01-02 00:00:00	27	1970-01-02	1800.7	3	5402.1
Manufacturer#2	almond aquamarine midnight light salmon	1970-01-04 00:00:00	34	1970-01-04	2031.98	1	2031.98
Manufacturer#2	almond aquamarine rose maroon antique	NULL	1	NULL	900.66	2	2599.32
Manufacturer#2	almond aquamarine rose maroon antique	1970-01-03 00:00:00	3	1970-01-03	1698.66	2	2599.32
Manufacturer#2	almond aquamarine sandy cyan gainsboro	NULL	32	NULL	1000.6	1	1000.6
Manufacturer#3	almond antique chartreuse khaki white	1970-01-04 00:00:00	24	1970-01-04	99.68	1	99.68
Manufacturer#3	almond antique forest lavender goldenrod	NULL	19	NULL	590.27	4	2970.81
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-04 00:00:00	14	1970-01-04	NULL	4	2970.81
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-05 00:00:00	10	1970-01-05	1190.27	4	2970.81
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-03 00:00:00	33	1970-01-03	1190.27	4	2970.81
Manufacturer#3	almond antique metallic orange dim	NULL	38	NULL	55.39	1	55.39
Manufacturer#3	almond antique misty red olive	1970-01-01 00:00:00	31	1970-01-01	1922.98	1	1922.98
Manufacturer#3	almond antique olive coral navajo	1970-01-03 00:00:00	28	1970-01-03	1337.29	1	1337.29
Manufacturer#4	almond antique gainsboro frosted violet	NULL	25	NULL	NULL	1	NULL
Manufacturer#4	almond antique violet mint lemon	1970-01-01 00:00:00	16	1970-01-01	1375.42	1	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	35	1970-01-05	NULL	2	1206.26
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	40	1970-01-05	1206.26	2	1206.26
Manufacturer#4	almond aquamarine yellow dodger mint	1970-01-01 00:00:00	11	1970-01-01	1844.92	1	1844.92
Manufacturer#4	almond azure aquamarine papaya violet	1970-01-02 00:00:00	37	1970-01-02	1290.35	1	1290.35
Manufacturer#5	almond antique blue firebrick mint	NULL	7	NULL	1789.69	1	1789.69
Manufacturer#5	almond antique medium spring khaki	1970-01-01 00:00:00	NULL	1970-01-01	6.0	2	1617.66
Manufacturer#5	almond antique medium spring khaki	1970-01-04 00:00:00	29	1970-01-04	1611.66	2	1617.66
Manufacturer#5	almond antique sky peru orange	1970-01-02 00:00:00	22	1970-01-02	1788.73	1	1788.73
Manufacturer#5	almond aquamarine dodger light gainsboro	1970-01-01 00:00:00	36	1970-01-01	1018.1	1	1018.1
Manufacturer#5	almond azure blanched chiffon midnight	1970-01-03 00:00:00	18	1970-01-03	1464.48	1	1464.48
PREHOOK: query: select "************ STRING WINDOW RANGE TYPE (VECTORIZED) ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ STRING WINDOW RANGE TYPE (VECTORIZED) ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ STRING WINDOW RANGE TYPE (VECTORIZED) ************
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_name range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_name range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_name range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_name range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_date:date, 3:p_timestamp:timestamp, 4:p_int:int, 5:p_retailprice:double, 6:p_decimal:decimal(10,4)/DECIMAL_64, 7:rowindex:int, 8:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), p_name (type: string)
                    null sort order: az
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumns: 0:string, 1:string
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumns: 0:string
                        valueColumns: 2:date, 3:timestamp, 5:double, 7:int
                    Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_date (type: date), p_timestamp (type: timestamp), p_retailprice (type: double), rowindex (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 8
                    includeColumns: [0, 1, 2, 3, 5, 7]
                    dataColumns: p_mfgr:string, p_name:string, p_date:date, p_timestamp:timestamp, p_int:int, p_retailprice:double, p_decimal:decimal(10,4)/DECIMAL_64, rowindex:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: az
                reduceColumnSortOrder: ++
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 6
                    dataColumns: KEY.reducesinkkey0:string, KEY.reducesinkkey1:string, VALUE._col0:date, VALUE._col1:timestamp, VALUE._col3:double, VALUE._col5:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, double]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: date), VALUE._col1 (type: timestamp), VALUE._col3 (type: double), VALUE._col5 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col5, _col7
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5]
                Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: date, _col3: timestamp, _col5: double, _col7: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS LAST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(3)~CURRENT
                              isStar: true
                            window function definition
                              alias: sum_window_1
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: RANGE PRECEDING(3)~CURRENT
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: false
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorCountStar, VectorPTFEvaluatorDoubleSum]
                      functionInputExpressions: [null, col 4:double]
                      functionNames: [count, sum]
                      keyInputColumns: [0, 1]
                      native: true
                      nonKeyInputColumns: [2, 3, 4, 5]
                      orderExpressions: [col 1:string]
                      outputColumns: [6, 7, 0, 1, 2, 3, 4, 5]
                      outputTypes: [bigint, double, string, string, date, timestamp, double, int]
                      partitionExpressions: [col 0:string]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col3 (type: timestamp), _col7 (type: int), _col2 (type: date), _col5 (type: double), count_window_0 (type: bigint), sum_window_1 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 1, 3, 5, 2, 4, 6, 7]
                    Statistics: Num rows: 40 Data size: 12252 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 12252 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_name range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_name range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_name range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_name range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_retailprice	cs	s
Manufacturer#1	almond antique burnished rose metallic	1970-01-04 00:00:00	39	1970-01-04	1173.15	2	2346.3
Manufacturer#1	almond antique burnished rose metallic	1970-01-03 00:00:00	8	1970-01-03	1173.15	2	2346.3
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-02 00:00:00	12	1970-01-02	1753.76	4	5266.28
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	20	1970-01-05	1753.76	4	5266.28
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	NULL	1970-01-05	5.0	4	5266.28
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	26	NULL	1753.76	4	5266.28
Manufacturer#1	almond antique salmon chartreuse burlywood	1970-01-05 00:00:00	30	1970-01-05	1602.59	1	1602.59
Manufacturer#1	almond aquamarine burnished black steel	1970-01-02 00:00:00	NULL	1970-01-02	2.0	1	2.0
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-02 00:00:00	17	1970-01-02	1632.66	4	4901.9800000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	NULL	1970-01-04	4.0	4	4901.9800000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	9	1970-01-04	1632.66	4	4901.9800000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-03 00:00:00	23	1970-01-03	1632.66	4	4901.9800000000005
Manufacturer#2	almond antique violet chocolate turquoise	1970-01-05 00:00:00	15	1970-01-05	1690.68	1	1690.68
Manufacturer#2	almond antique violet turquoise frosted	NULL	13	NULL	1800.7	3	5402.1
Manufacturer#2	almond antique violet turquoise frosted	1970-01-01 00:00:00	21	1970-01-01	1800.7	3	5402.1
Manufacturer#2	almond antique violet turquoise frosted	1970-01-02 00:00:00	27	1970-01-02	1800.7	3	5402.1
Manufacturer#2	almond aquamarine midnight light salmon	1970-01-04 00:00:00	34	1970-01-04	2031.98	1	2031.98
Manufacturer#2	almond aquamarine rose maroon antique	NULL	1	NULL	900.66	2	2599.32
Manufacturer#2	almond aquamarine rose maroon antique	1970-01-03 00:00:00	3	1970-01-03	1698.66	2	2599.32
Manufacturer#2	almond aquamarine sandy cyan gainsboro	NULL	32	NULL	1000.6	1	1000.6
Manufacturer#3	almond antique chartreuse khaki white	1970-01-04 00:00:00	24	1970-01-04	99.68	1	99.68
Manufacturer#3	almond antique forest lavender goldenrod	NULL	19	NULL	590.27	4	2970.81
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-04 00:00:00	14	1970-01-04	NULL	4	2970.81
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-05 00:00:00	10	1970-01-05	1190.27	4	2970.81
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-03 00:00:00	33	1970-01-03	1190.27	4	2970.81
Manufacturer#3	almond antique metallic orange dim	NULL	38	NULL	55.39	1	55.39
Manufacturer#3	almond antique misty red olive	1970-01-01 00:00:00	31	1970-01-01	1922.98	1	1922.98
Manufacturer#3	almond antique olive coral navajo	1970-01-03 00:00:00	28	1970-01-03	1337.29	1	1337.29
Manufacturer#4	almond antique gainsboro frosted violet	NULL	25	NULL	NULL	1	NULL
Manufacturer#4	almond antique violet mint lemon	1970-01-01 00:00:00	16	1970-01-01	1375.42	1	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	35	1970-01-05	NULL	2	1206.26
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	40	1970-01-05	1206.26	2	1206.26
Manufacturer#4	almond aquamarine yellow dodger mint	1970-01-01 00:00:00	11	1970-01-01	1844.92	1	1844.92
Manufacturer#4	almond azure aquamarine papaya violet	1970-01-02 00:00:00	37	1970-01-02	1290.35	1	1290.35
Manufacturer#5	almond antique blue firebrick mint	NULL	7	NULL	1789.69	1	1789.69
Manufacturer#5	almond antique medium spring khaki	1970-01-01 00:00:00	NULL	1970-01-01	6.0	2	1617.66
Manufacturer#5	almond antique medium spring khaki	1970-01-04 00:00:00	29	1970-01-04	1611.66	2	1617.66
Manufacturer#5	almond antique sky peru orange	1970-01-02 00:00:00	22	1970-01-02	1788.73	1	1788.73
Manufacturer#5	almond aquamarine dodger light gainsboro	1970-01-01 00:00:00	36	1970-01-01	1018.1	1	1018.1
Manufacturer#5	almond azure blanched chiffon midnight	1970-01-03 00:00:00	18	1970-01-03	1464.48	1	1464.48
PREHOOK: query: select "************ STRING PARTITION ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ STRING PARTITION ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ STRING PARTITION ************
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_name) as cs,
sum(p_retailprice) over(partition by p_name) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_name) as cs,
sum(p_retailprice) over(partition by p_name) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_date:date, 3:p_timestamp:timestamp, 4:p_int:int, 5:p_retailprice:double, 6:p_decimal:decimal(10,4)/DECIMAL_64, 7:rowindex:int, 8:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_name (type: string)
                    null sort order: a
                    sort order: +
                    Map-reduce partition columns: p_name (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkStringOperator
                        keyColumns: 1:string
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        valueColumns: 0:string, 2:date, 3:timestamp, 5:double, 7:int
                    Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_mfgr (type: string), p_date (type: date), p_timestamp (type: timestamp), p_retailprice (type: double), rowindex (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 8
                    includeColumns: [0, 1, 2, 3, 5, 7]
                    dataColumns: p_mfgr:string, p_name:string, p_date:date, p_timestamp:timestamp, p_int:int, p_retailprice:double, p_decimal:decimal(10,4)/DECIMAL_64, rowindex:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 6
                    dataColumns: KEY.reducesinkkey0:string, VALUE._col0:string, VALUE._col1:date, VALUE._col2:timestamp, VALUE._col4:double, VALUE._col6:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, double]
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), KEY.reducesinkkey0 (type: string), VALUE._col1 (type: date), VALUE._col2 (type: timestamp), VALUE._col4 (type: double), VALUE._col6 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col5, _col7
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [1, 0, 2, 3, 4, 5]
                Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: date, _col3: timestamp, _col5: double, _col7: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS FIRST
                        partition by: _col1
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isStar: true
                            window function definition
                              alias: sum_window_1
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: false
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorCountStar, VectorPTFEvaluatorDoubleSum]
                      functionInputExpressions: [null, col 4:double]
                      functionNames: [count, sum]
                      keyInputColumns: [0]
                      native: true
                      nonKeyInputColumns: [1, 2, 3, 4, 5]
                      orderExpressions: [col 0:string]
                      outputColumns: [6, 7, 1, 0, 2, 3, 4, 5]
                      outputTypes: [bigint, double, string, string, date, timestamp, double, int]
                      partitionExpressions: [col 0:string]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col3 (type: timestamp), _col7 (type: int), _col2 (type: date), _col5 (type: double), count_window_0 (type: bigint), sum_window_1 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [1, 0, 3, 5, 2, 4, 6, 7]
                    Statistics: Num rows: 40 Data size: 12252 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 12252 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_name) as cs,
sum(p_retailprice) over(partition by p_name) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_name) as cs,
sum(p_retailprice) over(partition by p_name) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_retailprice	cs	s
Manufacturer#5	almond antique blue firebrick mint	NULL	7	NULL	1789.69	1	1789.69
Manufacturer#1	almond antique burnished rose metallic	1970-01-04 00:00:00	39	1970-01-04	1173.15	2	2346.3
Manufacturer#1	almond antique burnished rose metallic	1970-01-03 00:00:00	8	1970-01-03	1173.15	2	2346.3
Manufacturer#3	almond antique chartreuse khaki white	1970-01-04 00:00:00	24	1970-01-04	99.68	1	99.68
Manufacturer#4	almond antique gainsboro frosted violet	NULL	25	NULL	NULL	1	NULL
Manufacturer#5	almond antique medium spring khaki	1970-01-04 00:00:00	29	1970-01-04	1611.66	2	1617.66
Manufacturer#5	almond antique medium spring khaki	1970-01-01 00:00:00	NULL	1970-01-01	6.0	2	1617.66
Manufacturer#3	almond antique metallic orange dim	NULL	38	NULL	55.39	1	55.39
Manufacturer#1	almond antique salmon chartreuse burlywood	1970-01-05 00:00:00	30	1970-01-05	1602.59	1	1602.59
Manufacturer#5	almond antique sky peru orange	1970-01-02 00:00:00	22	1970-01-02	1788.73	1	1788.73
Manufacturer#4	almond antique violet mint lemon	1970-01-01 00:00:00	16	1970-01-01	1375.42	1	1375.42
Manufacturer#1	almond aquamarine burnished black steel	1970-01-02 00:00:00	NULL	1970-01-02	2.0	1	2.0
Manufacturer#5	almond aquamarine dodger light gainsboro	1970-01-01 00:00:00	36	1970-01-01	1018.1	1	1018.1
Manufacturer#2	almond aquamarine sandy cyan gainsboro	NULL	32	NULL	1000.6	1	1000.6
Manufacturer#4	almond azure aquamarine papaya violet	1970-01-02 00:00:00	37	1970-01-02	1290.35	1	1290.35
Manufacturer#5	almond azure blanched chiffon midnight	1970-01-03 00:00:00	18	1970-01-03	1464.48	1	1464.48
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	26	NULL	1753.76	4	5266.28
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	20	1970-01-05	1753.76	4	5266.28
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-02 00:00:00	12	1970-01-02	1753.76	4	5266.28
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	NULL	1970-01-05	5.0	4	5266.28
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-03 00:00:00	33	1970-01-03	1190.27	4	2970.81
Manufacturer#3	almond antique forest lavender goldenrod	NULL	19	NULL	590.27	4	2970.81
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-05 00:00:00	10	1970-01-05	1190.27	4	2970.81
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-04 00:00:00	14	1970-01-04	NULL	4	2970.81
Manufacturer#3	almond antique misty red olive	1970-01-01 00:00:00	31	1970-01-01	1922.98	1	1922.98
Manufacturer#3	almond antique olive coral navajo	1970-01-03 00:00:00	28	1970-01-03	1337.29	1	1337.29
Manufacturer#2	almond antique violet chocolate turquoise	1970-01-05 00:00:00	15	1970-01-05	1690.68	1	1690.68
Manufacturer#2	almond antique violet turquoise frosted	1970-01-02 00:00:00	27	1970-01-02	1800.7	3	5402.1
Manufacturer#2	almond antique violet turquoise frosted	NULL	13	NULL	1800.7	3	5402.1
Manufacturer#2	almond antique violet turquoise frosted	1970-01-01 00:00:00	21	1970-01-01	1800.7	3	5402.1
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	40	1970-01-05	1206.26	2	1206.26
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	35	1970-01-05	NULL	2	1206.26
Manufacturer#2	almond aquamarine midnight light salmon	1970-01-04 00:00:00	34	1970-01-04	2031.98	1	2031.98
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-02 00:00:00	17	1970-01-02	1632.66	4	4901.9800000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	9	1970-01-04	1632.66	4	4901.9800000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	NULL	1970-01-04	4.0	4	4901.9800000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-03 00:00:00	23	1970-01-03	1632.66	4	4901.9800000000005
Manufacturer#2	almond aquamarine rose maroon antique	NULL	1	NULL	900.66	2	2599.32
Manufacturer#2	almond aquamarine rose maroon antique	1970-01-03 00:00:00	3	1970-01-03	1698.66	2	2599.32
Manufacturer#4	almond aquamarine yellow dodger mint	1970-01-01 00:00:00	11	1970-01-01	1844.92	1	1844.92
PREHOOK: query: select "************ STRING PARTITION WITH CONSTANT PARTITION EXPRESSION ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ STRING PARTITION WITH CONSTANT PARTITION EXPRESSION ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ STRING PARTITION WITH CONSTANT PARTITION EXPRESSION ************
PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_name) as cs,
sum(p_retailprice) over(partition by p_name) as s
from vector_ptf_part_simple_orc
where p_name = 'almond antique chartreuse lavender yellow'
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_name) as cs,
sum(p_retailprice) over(partition by p_name) as s
from vector_ptf_part_simple_orc
where p_name = 'almond antique chartreuse lavender yellow'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_retailprice	cs	s
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	NULL	1970-01-05	5.0	4	5266.28
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-02 00:00:00	12	1970-01-02	1753.76	4	5266.28
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	20	1970-01-05	1753.76	4	5266.28
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	26	NULL	1753.76	4	5266.28
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_name) as cs,
sum(p_retailprice) over(partition by p_name) as s
from vector_ptf_part_simple_orc
where p_name = 'almond antique chartreuse lavender yellow'
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_name) as cs,
sum(p_retailprice) over(partition by p_name) as s
from vector_ptf_part_simple_orc
where p_name = 'almond antique chartreuse lavender yellow'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  filterExpr: (p_name = 'almond antique chartreuse lavender yellow') (type: boolean)
                  Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_date:date, 3:p_timestamp:timestamp, 4:p_int:int, 5:p_retailprice:double, 6:p_decimal:decimal(10,4)/DECIMAL_64, 7:rowindex:int, 8:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterStringGroupColEqualStringScalar(col 1:string, val almond antique chartreuse lavender yellow)
                    predicate: (p_name = 'almond antique chartreuse lavender yellow') (type: boolean)
                    Statistics: Num rows: 2 Data size: 656 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: 'almond antique chartreuse lavender yellow' (type: string)
                      null sort order: a
                      sort order: +
                      Map-reduce partition columns: 'almond antique chartreuse lavender yellow' (type: string)
                      Reduce Sink Vectorization:
                          className: VectorReduceSinkStringOperator
                          keyColumns: 9:string
                          keyExpressions: ConstantVectorExpression(val almond antique chartreuse lavender yellow) -> 9:string
                          native: true
                          nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          valueColumns: 0:string, 2:date, 3:timestamp, 5:double, 7:int
                      Statistics: Num rows: 2 Data size: 656 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: p_mfgr (type: string), p_date (type: date), p_timestamp (type: timestamp), p_retailprice (type: double), rowindex (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 8
                    includeColumns: [0, 1, 2, 3, 5, 7]
                    dataColumns: p_mfgr:string, p_name:string, p_date:date, p_timestamp:timestamp, p_int:int, p_retailprice:double, p_decimal:decimal(10,4)/DECIMAL_64, rowindex:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [string]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 6
                    dataColumns: KEY.reducesinkkey0:string, VALUE._col0:string, VALUE._col2:date, VALUE._col3:timestamp, VALUE._col5:double, VALUE._col7:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, double, string, string, string]
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), VALUE._col2 (type: date), VALUE._col3 (type: timestamp), VALUE._col5 (type: double), VALUE._col7 (type: int)
                outputColumnNames: _col0, _col2, _col3, _col5, _col7
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [1, 2, 3, 4, 5]
                Statistics: Num rows: 2 Data size: 412 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col2: date, _col3: timestamp, _col5: double, _col7: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: 'almond antique chartreuse lavender yellow' ASC NULLS FIRST
                        partition by: 'almond antique chartreuse lavender yellow'
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isStar: true
                            window function definition
                              alias: sum_window_1
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: false
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorCountStar, VectorPTFEvaluatorDoubleSum]
                      functionInputExpressions: [null, col 4:double]
                      functionNames: [count, sum]
                      keyInputColumns: []
                      native: true
                      nonKeyInputColumns: [1, 2, 3, 4, 5]
                      orderExpressions: [ConstantVectorExpression(val almond antique chartreuse lavender yellow) -> 9:string]
                      outputColumns: [6, 7, 1, 2, 3, 4, 5]
                      outputTypes: [bigint, double, string, date, timestamp, double, int]
                      partitionExpressions: [ConstantVectorExpression(val almond antique chartreuse lavender yellow) -> 8:string]
                      streamingColumns: []
                  Statistics: Num rows: 2 Data size: 412 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), 'almond antique chartreuse lavender yellow' (type: string), _col3 (type: timestamp), _col7 (type: int), _col2 (type: date), _col5 (type: double), count_window_0 (type: bigint), sum_window_1 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [1, 10, 3, 5, 2, 4, 6, 7]
                        selectExpressions: ConstantVectorExpression(val almond antique chartreuse lavender yellow) -> 10:string
                    Statistics: Num rows: 2 Data size: 694 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 2 Data size: 694 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select "************ TIMESTAMP WINDOW RANGE TYPE ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ TIMESTAMP WINDOW RANGE TYPE ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ TIMESTAMP WINDOW RANGE TYPE ************
PREHOOK: query: select "************ TIMESTAMP WINDOW RANGE TYPE (NON-VECTORIZED REFERENCE) ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ TIMESTAMP WINDOW RANGE TYPE (NON-VECTORIZED REFERENCE) ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ TIMESTAMP WINDOW RANGE TYPE (NON-VECTORIZED REFERENCE) ************
PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_timestamp range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_timestamp range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_timestamp range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_timestamp range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_retailprice	cs	s
Manufacturer#1	almond aquamarine burnished black steel	1970-01-02 00:00:00	NULL	1970-01-02	2.0	3	3388.42
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-02 00:00:00	17	1970-01-02	1632.66	3	3388.42
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-02 00:00:00	12	1970-01-02	1753.76	3	3388.42
Manufacturer#1	almond antique burnished rose metallic	1970-01-03 00:00:00	8	1970-01-03	1173.15	2	2805.8100000000004
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-03 00:00:00	23	1970-01-03	1632.66	2	2805.8100000000004
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	9	1970-01-04	1632.66	3	2809.8100000000004
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	NULL	1970-01-04	4.0	3	2809.8100000000004
Manufacturer#1	almond antique burnished rose metallic	1970-01-04 00:00:00	39	1970-01-04	1173.15	3	2809.8100000000004
Manufacturer#1	almond antique salmon chartreuse burlywood	1970-01-05 00:00:00	30	1970-01-05	1602.59	3	3361.35
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	NULL	1970-01-05	5.0	3	3361.35
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	20	1970-01-05	1753.76	3	3361.35
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	26	NULL	1753.76	1	1753.76
Manufacturer#2	almond antique violet turquoise frosted	1970-01-01 00:00:00	21	1970-01-01	1800.7	1	1800.7
Manufacturer#2	almond antique violet turquoise frosted	1970-01-02 00:00:00	27	1970-01-02	1800.7	1	1800.7
Manufacturer#2	almond aquamarine rose maroon antique	1970-01-03 00:00:00	3	1970-01-03	1698.66	1	1698.66
Manufacturer#2	almond aquamarine midnight light salmon	1970-01-04 00:00:00	34	1970-01-04	2031.98	1	2031.98
Manufacturer#2	almond antique violet chocolate turquoise	1970-01-05 00:00:00	15	1970-01-05	1690.68	1	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	NULL	1	NULL	900.66	3	3701.96
Manufacturer#2	almond antique violet turquoise frosted	NULL	13	NULL	1800.7	3	3701.96
Manufacturer#2	almond aquamarine sandy cyan gainsboro	NULL	32	NULL	1000.6	3	3701.96
Manufacturer#3	almond antique misty red olive	1970-01-01 00:00:00	31	1970-01-01	1922.98	1	1922.98
Manufacturer#3	almond antique olive coral navajo	1970-01-03 00:00:00	28	1970-01-03	1337.29	2	2527.56
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-03 00:00:00	33	1970-01-03	1190.27	2	2527.56
Manufacturer#3	almond antique chartreuse khaki white	1970-01-04 00:00:00	24	1970-01-04	99.68	2	99.68
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-04 00:00:00	14	1970-01-04	NULL	2	99.68
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-05 00:00:00	10	1970-01-05	1190.27	1	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	NULL	19	NULL	590.27	2	645.66
Manufacturer#3	almond antique metallic orange dim	NULL	38	NULL	55.39	2	645.66
Manufacturer#4	almond antique violet mint lemon	1970-01-01 00:00:00	16	1970-01-01	1375.42	2	3220.34
Manufacturer#4	almond aquamarine yellow dodger mint	1970-01-01 00:00:00	11	1970-01-01	1844.92	2	3220.34
Manufacturer#4	almond azure aquamarine papaya violet	1970-01-02 00:00:00	37	1970-01-02	1290.35	1	1290.35
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	40	1970-01-05	1206.26	2	1206.26
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	35	1970-01-05	NULL	2	1206.26
Manufacturer#4	almond antique gainsboro frosted violet	NULL	25	NULL	NULL	1	NULL
Manufacturer#5	almond aquamarine dodger light gainsboro	1970-01-01 00:00:00	36	1970-01-01	1018.1	2	1024.1
Manufacturer#5	almond antique medium spring khaki	1970-01-01 00:00:00	NULL	1970-01-01	6.0	2	1024.1
Manufacturer#5	almond antique sky peru orange	1970-01-02 00:00:00	22	1970-01-02	1788.73	1	1788.73
Manufacturer#5	almond azure blanched chiffon midnight	1970-01-03 00:00:00	18	1970-01-03	1464.48	1	1464.48
Manufacturer#5	almond antique medium spring khaki	1970-01-04 00:00:00	29	1970-01-04	1611.66	1	1611.66
Manufacturer#5	almond antique blue firebrick mint	NULL	7	NULL	1789.69	1	1789.69
PREHOOK: query: select "************ TIMESTAMP WINDOW RANGE TYPE (VECTORIZED) ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ TIMESTAMP WINDOW RANGE TYPE (VECTORIZED) ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ TIMESTAMP WINDOW RANGE TYPE (VECTORIZED) ************
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_timestamp range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_timestamp range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_timestamp range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_timestamp range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_date:date, 3:p_timestamp:timestamp, 4:p_int:int, 5:p_retailprice:double, 6:p_decimal:decimal(10,4)/DECIMAL_64, 7:rowindex:int, 8:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), p_timestamp (type: timestamp)
                    null sort order: az
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumns: 0:string, 3:timestamp
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumns: 0:string
                        valueColumns: 1:string, 2:date, 5:double, 7:int
                    Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_name (type: string), p_date (type: date), p_retailprice (type: double), rowindex (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 8
                    includeColumns: [0, 1, 2, 3, 5, 7]
                    dataColumns: p_mfgr:string, p_name:string, p_date:date, p_timestamp:timestamp, p_int:int, p_retailprice:double, p_decimal:decimal(10,4)/DECIMAL_64, rowindex:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: az
                reduceColumnSortOrder: ++
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 6
                    dataColumns: KEY.reducesinkkey0:string, KEY.reducesinkkey1:timestamp, VALUE._col0:string, VALUE._col1:date, VALUE._col3:double, VALUE._col5:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, double]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: date), KEY.reducesinkkey1 (type: timestamp), VALUE._col3 (type: double), VALUE._col5 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col5, _col7
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 2, 3, 1, 4, 5]
                Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: date, _col3: timestamp, _col5: double, _col7: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col3 ASC NULLS LAST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(3)~CURRENT
                              isStar: true
                            window function definition
                              alias: sum_window_1
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: RANGE PRECEDING(3)~CURRENT
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: false
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorCountStar, VectorPTFEvaluatorDoubleSum]
                      functionInputExpressions: [null, col 4:double]
                      functionNames: [count, sum]
                      keyInputColumns: [0, 1]
                      native: true
                      nonKeyInputColumns: [2, 3, 4, 5]
                      orderExpressions: [col 1:timestamp]
                      outputColumns: [6, 7, 0, 2, 3, 1, 4, 5]
                      outputTypes: [bigint, double, string, string, date, timestamp, double, int]
                      partitionExpressions: [col 0:string]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col3 (type: timestamp), _col7 (type: int), _col2 (type: date), _col5 (type: double), count_window_0 (type: bigint), sum_window_1 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 2, 1, 5, 3, 4, 6, 7]
                    Statistics: Num rows: 40 Data size: 12252 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 12252 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_timestamp range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_timestamp range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_timestamp range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_timestamp range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_retailprice	cs	s
Manufacturer#1	almond aquamarine burnished black steel	1970-01-02 00:00:00	NULL	1970-01-02	2.0	3	3388.42
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-02 00:00:00	17	1970-01-02	1632.66	3	3388.42
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-02 00:00:00	12	1970-01-02	1753.76	3	3388.42
Manufacturer#1	almond antique burnished rose metallic	1970-01-03 00:00:00	8	1970-01-03	1173.15	2	2805.8100000000004
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-03 00:00:00	23	1970-01-03	1632.66	2	2805.8100000000004
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	9	1970-01-04	1632.66	3	2809.8100000000004
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	NULL	1970-01-04	4.0	3	2809.8100000000004
Manufacturer#1	almond antique burnished rose metallic	1970-01-04 00:00:00	39	1970-01-04	1173.15	3	2809.8100000000004
Manufacturer#1	almond antique salmon chartreuse burlywood	1970-01-05 00:00:00	30	1970-01-05	1602.59	3	3361.35
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	NULL	1970-01-05	5.0	3	3361.35
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	20	1970-01-05	1753.76	3	3361.35
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	26	NULL	1753.76	1	1753.76
Manufacturer#2	almond antique violet turquoise frosted	1970-01-01 00:00:00	21	1970-01-01	1800.7	1	1800.7
Manufacturer#2	almond antique violet turquoise frosted	1970-01-02 00:00:00	27	1970-01-02	1800.7	1	1800.7
Manufacturer#2	almond aquamarine rose maroon antique	1970-01-03 00:00:00	3	1970-01-03	1698.66	1	1698.66
Manufacturer#2	almond aquamarine midnight light salmon	1970-01-04 00:00:00	34	1970-01-04	2031.98	1	2031.98
Manufacturer#2	almond antique violet chocolate turquoise	1970-01-05 00:00:00	15	1970-01-05	1690.68	1	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	NULL	1	NULL	900.66	3	3701.96
Manufacturer#2	almond antique violet turquoise frosted	NULL	13	NULL	1800.7	3	3701.96
Manufacturer#2	almond aquamarine sandy cyan gainsboro	NULL	32	NULL	1000.6	3	3701.96
Manufacturer#3	almond antique misty red olive	1970-01-01 00:00:00	31	1970-01-01	1922.98	1	1922.98
Manufacturer#3	almond antique olive coral navajo	1970-01-03 00:00:00	28	1970-01-03	1337.29	2	2527.56
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-03 00:00:00	33	1970-01-03	1190.27	2	2527.56
Manufacturer#3	almond antique chartreuse khaki white	1970-01-04 00:00:00	24	1970-01-04	99.68	2	99.68
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-04 00:00:00	14	1970-01-04	NULL	2	99.68
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-05 00:00:00	10	1970-01-05	1190.27	1	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	NULL	19	NULL	590.27	2	645.66
Manufacturer#3	almond antique metallic orange dim	NULL	38	NULL	55.39	2	645.66
Manufacturer#4	almond antique violet mint lemon	1970-01-01 00:00:00	16	1970-01-01	1375.42	2	3220.34
Manufacturer#4	almond aquamarine yellow dodger mint	1970-01-01 00:00:00	11	1970-01-01	1844.92	2	3220.34
Manufacturer#4	almond azure aquamarine papaya violet	1970-01-02 00:00:00	37	1970-01-02	1290.35	1	1290.35
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	40	1970-01-05	1206.26	2	1206.26
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	35	1970-01-05	NULL	2	1206.26
Manufacturer#4	almond antique gainsboro frosted violet	NULL	25	NULL	NULL	1	NULL
Manufacturer#5	almond aquamarine dodger light gainsboro	1970-01-01 00:00:00	36	1970-01-01	1018.1	2	1024.1
Manufacturer#5	almond antique medium spring khaki	1970-01-01 00:00:00	NULL	1970-01-01	6.0	2	1024.1
Manufacturer#5	almond antique sky peru orange	1970-01-02 00:00:00	22	1970-01-02	1788.73	1	1788.73
Manufacturer#5	almond azure blanched chiffon midnight	1970-01-03 00:00:00	18	1970-01-03	1464.48	1	1464.48
Manufacturer#5	almond antique medium spring khaki	1970-01-04 00:00:00	29	1970-01-04	1611.66	1	1611.66
Manufacturer#5	almond antique blue firebrick mint	NULL	7	NULL	1789.69	1	1789.69
PREHOOK: query: select "************ TIMESTAMP PARTITION ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ TIMESTAMP PARTITION ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ TIMESTAMP PARTITION ************
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_timestamp) as cs,
sum(p_retailprice) over(partition by p_timestamp) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_timestamp) as cs,
sum(p_retailprice) over(partition by p_timestamp) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_date:date, 3:p_timestamp:timestamp, 4:p_int:int, 5:p_retailprice:double, 6:p_decimal:decimal(10,4)/DECIMAL_64, 7:rowindex:int, 8:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_timestamp (type: timestamp)
                    null sort order: a
                    sort order: +
                    Map-reduce partition columns: p_timestamp (type: timestamp)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkMultiKeyOperator
                        keyColumns: 3:timestamp
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        valueColumns: 0:string, 1:string, 2:date, 5:double, 7:int
                    Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_mfgr (type: string), p_name (type: string), p_date (type: date), p_retailprice (type: double), rowindex (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 8
                    includeColumns: [0, 1, 2, 3, 5, 7]
                    dataColumns: p_mfgr:string, p_name:string, p_date:date, p_timestamp:timestamp, p_int:int, p_retailprice:double, p_decimal:decimal(10,4)/DECIMAL_64, rowindex:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 6
                    dataColumns: KEY.reducesinkkey0:timestamp, VALUE._col0:string, VALUE._col1:string, VALUE._col2:date, VALUE._col4:double, VALUE._col6:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, double]
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), VALUE._col1 (type: string), VALUE._col2 (type: date), KEY.reducesinkkey0 (type: timestamp), VALUE._col4 (type: double), VALUE._col6 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col5, _col7
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [1, 2, 3, 0, 4, 5]
                Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: date, _col3: timestamp, _col5: double, _col7: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col3 ASC NULLS FIRST
                        partition by: _col3
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isStar: true
                            window function definition
                              alias: sum_window_1
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: false
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorCountStar, VectorPTFEvaluatorDoubleSum]
                      functionInputExpressions: [null, col 4:double]
                      functionNames: [count, sum]
                      keyInputColumns: [0]
                      native: true
                      nonKeyInputColumns: [1, 2, 3, 4, 5]
                      orderExpressions: [col 0:timestamp]
                      outputColumns: [6, 7, 1, 2, 3, 0, 4, 5]
                      outputTypes: [bigint, double, string, string, date, timestamp, double, int]
                      partitionExpressions: [col 0:timestamp]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col3 (type: timestamp), _col7 (type: int), _col2 (type: date), _col5 (type: double), count_window_0 (type: bigint), sum_window_1 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [1, 2, 0, 5, 3, 4, 6, 7]
                    Statistics: Num rows: 40 Data size: 12252 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 12252 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_timestamp) as cs,
sum(p_retailprice) over(partition by p_timestamp) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_timestamp) as cs,
sum(p_retailprice) over(partition by p_timestamp) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_retailprice	cs	s
Manufacturer#2	almond antique violet turquoise frosted	1970-01-01 00:00:00	21	1970-01-01	1800.7	6	7968.120000000001
Manufacturer#5	almond antique medium spring khaki	1970-01-01 00:00:00	NULL	1970-01-01	6.0	6	7968.120000000001
Manufacturer#4	almond antique violet mint lemon	1970-01-01 00:00:00	16	1970-01-01	1375.42	6	7968.120000000001
Manufacturer#3	almond antique misty red olive	1970-01-01 00:00:00	31	1970-01-01	1922.98	6	7968.120000000001
Manufacturer#5	almond aquamarine dodger light gainsboro	1970-01-01 00:00:00	36	1970-01-01	1018.1	6	7968.120000000001
Manufacturer#4	almond aquamarine yellow dodger mint	1970-01-01 00:00:00	11	1970-01-01	1844.92	6	7968.120000000001
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-03 00:00:00	33	1970-01-03	1190.27	6	8496.51
Manufacturer#5	almond azure blanched chiffon midnight	1970-01-03 00:00:00	18	1970-01-03	1464.48	6	8496.51
Manufacturer#1	almond antique burnished rose metallic	1970-01-03 00:00:00	8	1970-01-03	1173.15	6	8496.51
Manufacturer#3	almond antique olive coral navajo	1970-01-03 00:00:00	28	1970-01-03	1337.29	6	8496.51
Manufacturer#2	almond aquamarine rose maroon antique	1970-01-03 00:00:00	3	1970-01-03	1698.66	6	8496.51
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-03 00:00:00	23	1970-01-03	1632.66	6	8496.51
Manufacturer#1	almond antique burnished rose metallic	1970-01-04 00:00:00	39	1970-01-04	1173.15	7	6553.13
Manufacturer#3	almond antique chartreuse khaki white	1970-01-04 00:00:00	24	1970-01-04	99.68	7	6553.13
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	9	1970-01-04	1632.66	7	6553.13
Manufacturer#2	almond aquamarine midnight light salmon	1970-01-04 00:00:00	34	1970-01-04	2031.98	7	6553.13
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-04 00:00:00	14	1970-01-04	NULL	7	6553.13
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	NULL	1970-01-04	4.0	7	6553.13
Manufacturer#5	almond antique medium spring khaki	1970-01-04 00:00:00	29	1970-01-04	1611.66	7	6553.13
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	40	1970-01-05	1206.26	7	7448.5599999999995
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	NULL	1970-01-05	5.0	7	7448.5599999999995
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-05 00:00:00	10	1970-01-05	1190.27	7	7448.5599999999995
Manufacturer#2	almond antique violet chocolate turquoise	1970-01-05 00:00:00	15	1970-01-05	1690.68	7	7448.5599999999995
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	20	1970-01-05	1753.76	7	7448.5599999999995
Manufacturer#1	almond antique salmon chartreuse burlywood	1970-01-05 00:00:00	30	1970-01-05	1602.59	7	7448.5599999999995
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	35	1970-01-05	NULL	7	7448.5599999999995
Manufacturer#2	almond aquamarine rose maroon antique	NULL	1	NULL	900.66	8	7891.07
Manufacturer#5	almond antique blue firebrick mint	NULL	7	NULL	1789.69	8	7891.07
Manufacturer#3	almond antique forest lavender goldenrod	NULL	19	NULL	590.27	8	7891.07
Manufacturer#3	almond antique metallic orange dim	NULL	38	NULL	55.39	8	7891.07
Manufacturer#4	almond antique gainsboro frosted violet	NULL	25	NULL	NULL	8	7891.07
Manufacturer#2	almond aquamarine sandy cyan gainsboro	NULL	32	NULL	1000.6	8	7891.07
Manufacturer#2	almond antique violet turquoise frosted	NULL	13	NULL	1800.7	8	7891.07
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	26	NULL	1753.76	8	7891.07
Manufacturer#2	almond antique violet turquoise frosted	1970-01-02 00:00:00	27	1970-01-02	1800.7	6	8268.2
Manufacturer#5	almond antique sky peru orange	1970-01-02 00:00:00	22	1970-01-02	1788.73	6	8268.2
Manufacturer#1	almond aquamarine burnished black steel	1970-01-02 00:00:00	NULL	1970-01-02	2.0	6	8268.2
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-02 00:00:00	17	1970-01-02	1632.66	6	8268.2
Manufacturer#4	almond azure aquamarine papaya violet	1970-01-02 00:00:00	37	1970-01-02	1290.35	6	8268.2
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-02 00:00:00	12	1970-01-02	1753.76	6	8268.2
PREHOOK: query: select "************ TIMESTAMP PARTITION WITH CONSTANT PARTITION EXPRESSION ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ TIMESTAMP PARTITION WITH CONSTANT PARTITION EXPRESSION ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ TIMESTAMP PARTITION WITH CONSTANT PARTITION EXPRESSION ************
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_timestamp) as cs,
sum(p_retailprice) over(partition by p_timestamp) as s
from vector_ptf_part_simple_orc
where p_timestamp = '1970-01-03 00:00:00.0'
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_timestamp) as cs,
sum(p_retailprice) over(partition by p_timestamp) as s
from vector_ptf_part_simple_orc
where p_timestamp = '1970-01-03 00:00:00.0'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  filterExpr: (p_timestamp = TIMESTAMP'1970-01-03 00:00:00') (type: boolean)
                  Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_date:date, 3:p_timestamp:timestamp, 4:p_int:int, 5:p_retailprice:double, 6:p_decimal:decimal(10,4)/DECIMAL_64, 7:rowindex:int, 8:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterTimestampColEqualTimestampScalar(col 3:timestamp, val 1970-01-03 00:00:00)
                    predicate: (p_timestamp = TIMESTAMP'1970-01-03 00:00:00') (type: boolean)
                    Statistics: Num rows: 20 Data size: 6260 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: TIMESTAMP'1970-01-03 00:00:00' (type: timestamp)
                      null sort order: a
                      sort order: +
                      Map-reduce partition columns: TIMESTAMP'1970-01-03 00:00:00' (type: timestamp)
                      Reduce Sink Vectorization:
                          className: VectorReduceSinkMultiKeyOperator
                          keyColumns: 9:timestamp
                          keyExpressions: ConstantVectorExpression(val 1970-01-03 00:00:00) -> 9:timestamp
                          native: true
                          nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          valueColumns: 0:string, 1:string, 2:date, 5:double, 7:int
                      Statistics: Num rows: 20 Data size: 6260 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: p_mfgr (type: string), p_name (type: string), p_date (type: date), p_retailprice (type: double), rowindex (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 8
                    includeColumns: [0, 1, 2, 3, 5, 7]
                    dataColumns: p_mfgr:string, p_name:string, p_date:date, p_timestamp:timestamp, p_int:int, p_retailprice:double, p_decimal:decimal(10,4)/DECIMAL_64, rowindex:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [timestamp]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 6
                    dataColumns: KEY.reducesinkkey0:timestamp, VALUE._col0:string, VALUE._col1:string, VALUE._col2:date, VALUE._col5:double, VALUE._col7:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, double, timestamp, timestamp, timestamp]
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), VALUE._col1 (type: string), VALUE._col2 (type: date), VALUE._col5 (type: double), VALUE._col7 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col5, _col7
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [1, 2, 3, 4, 5]
                Statistics: Num rows: 20 Data size: 5580 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: date, _col5: double, _col7: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: TIMESTAMP'1970-01-03 00:00:00' ASC NULLS FIRST
                        partition by: TIMESTAMP'1970-01-03 00:00:00'
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isStar: true
                            window function definition
                              alias: sum_window_1
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: false
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorCountStar, VectorPTFEvaluatorDoubleSum]
                      functionInputExpressions: [null, col 4:double]
                      functionNames: [count, sum]
                      keyInputColumns: []
                      native: true
                      nonKeyInputColumns: [1, 2, 3, 4, 5]
                      orderExpressions: [ConstantVectorExpression(val 1970-01-03 00:00:00) -> 9:timestamp]
                      outputColumns: [6, 7, 1, 2, 3, 4, 5]
                      outputTypes: [bigint, double, string, string, date, double, int]
                      partitionExpressions: [ConstantVectorExpression(val 1970-01-03 00:00:00) -> 8:timestamp]
                      streamingColumns: []
                  Statistics: Num rows: 20 Data size: 5580 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), TIMESTAMP'1970-01-03 00:00:00' (type: timestamp), _col7 (type: int), _col2 (type: date), _col5 (type: double), count_window_0 (type: bigint), sum_window_1 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [1, 2, 10, 5, 3, 4, 6, 7]
                        selectExpressions: ConstantVectorExpression(val 1970-01-03 00:00:00) -> 10:timestamp
                    Statistics: Num rows: 20 Data size: 6452 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 20 Data size: 6452 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_timestamp) as cs,
sum(p_retailprice) over(partition by p_timestamp) as s
from vector_ptf_part_simple_orc
where p_timestamp = '1970-01-03 00:00:00.0'
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_timestamp) as cs,
sum(p_retailprice) over(partition by p_timestamp) as s
from vector_ptf_part_simple_orc
where p_timestamp = '1970-01-03 00:00:00.0'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_retailprice	cs	s
Manufacturer#2	almond aquamarine rose maroon antique	1970-01-03 00:00:00	3	1970-01-03	1698.66	6	8496.51
Manufacturer#1	almond antique burnished rose metallic	1970-01-03 00:00:00	8	1970-01-03	1173.15	6	8496.51
Manufacturer#5	almond azure blanched chiffon midnight	1970-01-03 00:00:00	18	1970-01-03	1464.48	6	8496.51
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-03 00:00:00	23	1970-01-03	1632.66	6	8496.51
Manufacturer#3	almond antique olive coral navajo	1970-01-03 00:00:00	28	1970-01-03	1337.29	6	8496.51
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-03 00:00:00	33	1970-01-03	1190.27	6	8496.51
PREHOOK: query: select "************ DATE WINDOW RANGE TYPE ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ DATE WINDOW RANGE TYPE ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ DATE WINDOW RANGE TYPE ************
PREHOOK: query: select "************ DATE WINDOW RANGE TYPE (NON-VECTORIZED REFERENCE) ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ DATE WINDOW RANGE TYPE (NON-VECTORIZED REFERENCE) ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ DATE WINDOW RANGE TYPE (NON-VECTORIZED REFERENCE) ************
PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_retailprice	cs	s
Manufacturer#1	almond aquamarine burnished black steel	1970-01-02 00:00:00	NULL	1970-01-02	2.0	3	3388.42
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-02 00:00:00	17	1970-01-02	1632.66	3	3388.42
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-02 00:00:00	12	1970-01-02	1753.76	3	3388.42
Manufacturer#1	almond antique burnished rose metallic	1970-01-03 00:00:00	8	1970-01-03	1173.15	5	6194.2300000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-03 00:00:00	23	1970-01-03	1632.66	5	6194.2300000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	9	1970-01-04	1632.66	8	9004.04
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	NULL	1970-01-04	4.0	8	9004.04
Manufacturer#1	almond antique burnished rose metallic	1970-01-04 00:00:00	39	1970-01-04	1173.15	8	9004.04
Manufacturer#1	almond antique salmon chartreuse burlywood	1970-01-05 00:00:00	30	1970-01-05	1602.59	11	12365.390000000001
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	NULL	1970-01-05	5.0	11	12365.390000000001
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	20	1970-01-05	1753.76	11	12365.390000000001
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	26	NULL	1753.76	1	1753.76
Manufacturer#2	almond antique violet turquoise frosted	1970-01-01 00:00:00	21	1970-01-01	1800.7	1	1800.7
Manufacturer#2	almond antique violet turquoise frosted	1970-01-02 00:00:00	27	1970-01-02	1800.7	2	3601.4
Manufacturer#2	almond aquamarine rose maroon antique	1970-01-03 00:00:00	3	1970-01-03	1698.66	3	5300.06
Manufacturer#2	almond aquamarine midnight light salmon	1970-01-04 00:00:00	34	1970-01-04	2031.98	4	7332.040000000001
Manufacturer#2	almond antique violet chocolate turquoise	1970-01-05 00:00:00	15	1970-01-05	1690.68	4	7222.020000000001
Manufacturer#2	almond aquamarine rose maroon antique	NULL	1	NULL	900.66	3	3701.96
Manufacturer#2	almond antique violet turquoise frosted	NULL	13	NULL	1800.7	3	3701.96
Manufacturer#2	almond aquamarine sandy cyan gainsboro	NULL	32	NULL	1000.6	3	3701.96
Manufacturer#3	almond antique misty red olive	1970-01-01 00:00:00	31	1970-01-01	1922.98	1	1922.98
Manufacturer#3	almond antique olive coral navajo	1970-01-03 00:00:00	28	1970-01-03	1337.29	3	4450.54
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-03 00:00:00	33	1970-01-03	1190.27	3	4450.54
Manufacturer#3	almond antique chartreuse khaki white	1970-01-04 00:00:00	24	1970-01-04	99.68	5	4550.22
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-04 00:00:00	14	1970-01-04	NULL	5	4550.22
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-05 00:00:00	10	1970-01-05	1190.27	5	3817.51
Manufacturer#3	almond antique forest lavender goldenrod	NULL	19	NULL	590.27	2	645.66
Manufacturer#3	almond antique metallic orange dim	NULL	38	NULL	55.39	2	645.66
Manufacturer#4	almond antique violet mint lemon	1970-01-01 00:00:00	16	1970-01-01	1375.42	2	3220.34
Manufacturer#4	almond aquamarine yellow dodger mint	1970-01-01 00:00:00	11	1970-01-01	1844.92	2	3220.34
Manufacturer#4	almond azure aquamarine papaya violet	1970-01-02 00:00:00	37	1970-01-02	1290.35	3	4510.6900000000005
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	40	1970-01-05	1206.26	3	2496.6099999999997
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	35	1970-01-05	NULL	3	2496.6099999999997
Manufacturer#4	almond antique gainsboro frosted violet	NULL	25	NULL	NULL	1	NULL
Manufacturer#5	almond aquamarine dodger light gainsboro	1970-01-01 00:00:00	36	1970-01-01	1018.1	2	1024.1
Manufacturer#5	almond antique medium spring khaki	1970-01-01 00:00:00	NULL	1970-01-01	6.0	2	1024.1
Manufacturer#5	almond antique sky peru orange	1970-01-02 00:00:00	22	1970-01-02	1788.73	3	2812.83
Manufacturer#5	almond azure blanched chiffon midnight	1970-01-03 00:00:00	18	1970-01-03	1464.48	4	4277.3099999999995
Manufacturer#5	almond antique medium spring khaki	1970-01-04 00:00:00	29	1970-01-04	1611.66	5	5888.969999999999
Manufacturer#5	almond antique blue firebrick mint	NULL	7	NULL	1789.69	1	1789.69
PREHOOK: query: select "************ DATE WINDOW RANGE TYPE (VECTORIZED) ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ DATE WINDOW RANGE TYPE (VECTORIZED) ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ DATE WINDOW RANGE TYPE (VECTORIZED) ************
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_date:date, 3:p_timestamp:timestamp, 4:p_int:int, 5:p_retailprice:double, 6:p_decimal:decimal(10,4)/DECIMAL_64, 7:rowindex:int, 8:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), p_date (type: date)
                    null sort order: az
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumns: 0:string, 2:date
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumns: 0:string
                        valueColumns: 1:string, 3:timestamp, 5:double, 7:int
                    Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_name (type: string), p_timestamp (type: timestamp), p_retailprice (type: double), rowindex (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 8
                    includeColumns: [0, 1, 2, 3, 5, 7]
                    dataColumns: p_mfgr:string, p_name:string, p_date:date, p_timestamp:timestamp, p_int:int, p_retailprice:double, p_decimal:decimal(10,4)/DECIMAL_64, rowindex:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: az
                reduceColumnSortOrder: ++
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 6
                    dataColumns: KEY.reducesinkkey0:string, KEY.reducesinkkey1:date, VALUE._col0:string, VALUE._col1:timestamp, VALUE._col3:double, VALUE._col5:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, double]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), KEY.reducesinkkey1 (type: date), VALUE._col1 (type: timestamp), VALUE._col3 (type: double), VALUE._col5 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col5, _col7
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 2, 1, 3, 4, 5]
                Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: date, _col3: timestamp, _col5: double, _col7: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col2 ASC NULLS LAST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(3)~CURRENT
                              isStar: true
                            window function definition
                              alias: sum_window_1
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: RANGE PRECEDING(3)~CURRENT
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: false
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorCountStar, VectorPTFEvaluatorDoubleSum]
                      functionInputExpressions: [null, col 4:double]
                      functionNames: [count, sum]
                      keyInputColumns: [0, 1]
                      native: true
                      nonKeyInputColumns: [2, 3, 4, 5]
                      orderExpressions: [col 1:date]
                      outputColumns: [6, 7, 0, 2, 1, 3, 4, 5]
                      outputTypes: [bigint, double, string, string, date, timestamp, double, int]
                      partitionExpressions: [col 0:string]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col3 (type: timestamp), _col7 (type: int), _col2 (type: date), _col5 (type: double), count_window_0 (type: bigint), sum_window_1 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 2, 3, 5, 1, 4, 6, 7]
                    Statistics: Num rows: 40 Data size: 12252 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 12252 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_date range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_retailprice	cs	s
Manufacturer#1	almond aquamarine burnished black steel	1970-01-02 00:00:00	NULL	1970-01-02	2.0	3	3388.42
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-02 00:00:00	17	1970-01-02	1632.66	3	3388.42
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-02 00:00:00	12	1970-01-02	1753.76	3	3388.42
Manufacturer#1	almond antique burnished rose metallic	1970-01-03 00:00:00	8	1970-01-03	1173.15	5	6194.2300000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-03 00:00:00	23	1970-01-03	1632.66	5	6194.2300000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	9	1970-01-04	1632.66	8	9004.04
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	NULL	1970-01-04	4.0	8	9004.04
Manufacturer#1	almond antique burnished rose metallic	1970-01-04 00:00:00	39	1970-01-04	1173.15	8	9004.04
Manufacturer#1	almond antique salmon chartreuse burlywood	1970-01-05 00:00:00	30	1970-01-05	1602.59	11	12365.390000000001
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	NULL	1970-01-05	5.0	11	12365.390000000001
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	20	1970-01-05	1753.76	11	12365.390000000001
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	26	NULL	1753.76	1	1753.76
Manufacturer#2	almond antique violet turquoise frosted	1970-01-01 00:00:00	21	1970-01-01	1800.7	1	1800.7
Manufacturer#2	almond antique violet turquoise frosted	1970-01-02 00:00:00	27	1970-01-02	1800.7	2	3601.4
Manufacturer#2	almond aquamarine rose maroon antique	1970-01-03 00:00:00	3	1970-01-03	1698.66	3	5300.06
Manufacturer#2	almond aquamarine midnight light salmon	1970-01-04 00:00:00	34	1970-01-04	2031.98	4	7332.040000000001
Manufacturer#2	almond antique violet chocolate turquoise	1970-01-05 00:00:00	15	1970-01-05	1690.68	4	7222.020000000001
Manufacturer#2	almond aquamarine rose maroon antique	NULL	1	NULL	900.66	3	3701.96
Manufacturer#2	almond antique violet turquoise frosted	NULL	13	NULL	1800.7	3	3701.96
Manufacturer#2	almond aquamarine sandy cyan gainsboro	NULL	32	NULL	1000.6	3	3701.96
Manufacturer#3	almond antique misty red olive	1970-01-01 00:00:00	31	1970-01-01	1922.98	1	1922.98
Manufacturer#3	almond antique olive coral navajo	1970-01-03 00:00:00	28	1970-01-03	1337.29	3	4450.54
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-03 00:00:00	33	1970-01-03	1190.27	3	4450.54
Manufacturer#3	almond antique chartreuse khaki white	1970-01-04 00:00:00	24	1970-01-04	99.68	5	4550.22
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-04 00:00:00	14	1970-01-04	NULL	5	4550.22
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-05 00:00:00	10	1970-01-05	1190.27	5	3817.51
Manufacturer#3	almond antique forest lavender goldenrod	NULL	19	NULL	590.27	2	645.66
Manufacturer#3	almond antique metallic orange dim	NULL	38	NULL	55.39	2	645.66
Manufacturer#4	almond antique violet mint lemon	1970-01-01 00:00:00	16	1970-01-01	1375.42	2	3220.34
Manufacturer#4	almond aquamarine yellow dodger mint	1970-01-01 00:00:00	11	1970-01-01	1844.92	2	3220.34
Manufacturer#4	almond azure aquamarine papaya violet	1970-01-02 00:00:00	37	1970-01-02	1290.35	3	4510.6900000000005
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	40	1970-01-05	1206.26	3	2496.6099999999997
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	35	1970-01-05	NULL	3	2496.6099999999997
Manufacturer#4	almond antique gainsboro frosted violet	NULL	25	NULL	NULL	1	NULL
Manufacturer#5	almond aquamarine dodger light gainsboro	1970-01-01 00:00:00	36	1970-01-01	1018.1	2	1024.1
Manufacturer#5	almond antique medium spring khaki	1970-01-01 00:00:00	NULL	1970-01-01	6.0	2	1024.1
Manufacturer#5	almond antique sky peru orange	1970-01-02 00:00:00	22	1970-01-02	1788.73	3	2812.83
Manufacturer#5	almond azure blanched chiffon midnight	1970-01-03 00:00:00	18	1970-01-03	1464.48	4	4277.3099999999995
Manufacturer#5	almond antique medium spring khaki	1970-01-04 00:00:00	29	1970-01-04	1611.66	5	5888.969999999999
Manufacturer#5	almond antique blue firebrick mint	NULL	7	NULL	1789.69	1	1789.69
PREHOOK: query: select "************ DATE PARTITION ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ DATE PARTITION ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ DATE PARTITION ************
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_date) as cs,
sum(p_retailprice) over(partition by p_date) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_date) as cs,
sum(p_retailprice) over(partition by p_date) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_date:date, 3:p_timestamp:timestamp, 4:p_int:int, 5:p_retailprice:double, 6:p_decimal:decimal(10,4)/DECIMAL_64, 7:rowindex:int, 8:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_date (type: date)
                    null sort order: a
                    sort order: +
                    Map-reduce partition columns: p_date (type: date)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkLongOperator
                        keyColumns: 2:date
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        valueColumns: 0:string, 1:string, 3:timestamp, 5:double, 7:int
                    Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_mfgr (type: string), p_name (type: string), p_timestamp (type: timestamp), p_retailprice (type: double), rowindex (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 8
                    includeColumns: [0, 1, 2, 3, 5, 7]
                    dataColumns: p_mfgr:string, p_name:string, p_date:date, p_timestamp:timestamp, p_int:int, p_retailprice:double, p_decimal:decimal(10,4)/DECIMAL_64, rowindex:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 6
                    dataColumns: KEY.reducesinkkey0:date, VALUE._col0:string, VALUE._col1:string, VALUE._col2:timestamp, VALUE._col4:double, VALUE._col6:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, double]
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), VALUE._col1 (type: string), KEY.reducesinkkey0 (type: date), VALUE._col2 (type: timestamp), VALUE._col4 (type: double), VALUE._col6 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col5, _col7
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [1, 2, 0, 3, 4, 5]
                Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: date, _col3: timestamp, _col5: double, _col7: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col2 ASC NULLS FIRST
                        partition by: _col2
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isStar: true
                            window function definition
                              alias: sum_window_1
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: false
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorCountStar, VectorPTFEvaluatorDoubleSum]
                      functionInputExpressions: [null, col 4:double]
                      functionNames: [count, sum]
                      keyInputColumns: [0]
                      native: true
                      nonKeyInputColumns: [1, 2, 3, 4, 5]
                      orderExpressions: [col 0:date]
                      outputColumns: [6, 7, 1, 2, 0, 3, 4, 5]
                      outputTypes: [bigint, double, string, string, date, timestamp, double, int]
                      partitionExpressions: [col 0:date]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col3 (type: timestamp), _col7 (type: int), _col2 (type: date), _col5 (type: double), count_window_0 (type: bigint), sum_window_1 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [1, 2, 3, 5, 0, 4, 6, 7]
                    Statistics: Num rows: 40 Data size: 12252 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 12252 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_date) as cs,
sum(p_retailprice) over(partition by p_date) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_date) as cs,
sum(p_retailprice) over(partition by p_date) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_retailprice	cs	s
Manufacturer#5	almond antique sky peru orange	1970-01-02 00:00:00	22	1970-01-02	1788.73	6	8268.2
Manufacturer#4	almond azure aquamarine papaya violet	1970-01-02 00:00:00	37	1970-01-02	1290.35	6	8268.2
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-02 00:00:00	17	1970-01-02	1632.66	6	8268.2
Manufacturer#1	almond aquamarine burnished black steel	1970-01-02 00:00:00	NULL	1970-01-02	2.0	6	8268.2
Manufacturer#2	almond antique violet turquoise frosted	1970-01-02 00:00:00	27	1970-01-02	1800.7	6	8268.2
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-02 00:00:00	12	1970-01-02	1753.76	6	8268.2
Manufacturer#5	almond antique blue firebrick mint	NULL	7	NULL	1789.69	8	7891.070000000001
Manufacturer#2	almond antique violet turquoise frosted	NULL	13	NULL	1800.7	8	7891.070000000001
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	26	NULL	1753.76	8	7891.070000000001
Manufacturer#4	almond antique gainsboro frosted violet	NULL	25	NULL	NULL	8	7891.070000000001
Manufacturer#3	almond antique metallic orange dim	NULL	38	NULL	55.39	8	7891.070000000001
Manufacturer#3	almond antique forest lavender goldenrod	NULL	19	NULL	590.27	8	7891.070000000001
Manufacturer#2	almond aquamarine sandy cyan gainsboro	NULL	32	NULL	1000.6	8	7891.070000000001
Manufacturer#2	almond aquamarine rose maroon antique	NULL	1	NULL	900.66	8	7891.070000000001
Manufacturer#2	almond antique violet turquoise frosted	1970-01-01 00:00:00	21	1970-01-01	1800.7	6	7968.12
Manufacturer#5	almond antique medium spring khaki	1970-01-01 00:00:00	NULL	1970-01-01	6.0	6	7968.12
Manufacturer#4	almond aquamarine yellow dodger mint	1970-01-01 00:00:00	11	1970-01-01	1844.92	6	7968.12
Manufacturer#4	almond antique violet mint lemon	1970-01-01 00:00:00	16	1970-01-01	1375.42	6	7968.12
Manufacturer#3	almond antique misty red olive	1970-01-01 00:00:00	31	1970-01-01	1922.98	6	7968.12
Manufacturer#5	almond aquamarine dodger light gainsboro	1970-01-01 00:00:00	36	1970-01-01	1018.1	6	7968.12
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-03 00:00:00	33	1970-01-03	1190.27	6	8496.51
Manufacturer#2	almond aquamarine rose maroon antique	1970-01-03 00:00:00	3	1970-01-03	1698.66	6	8496.51
Manufacturer#5	almond azure blanched chiffon midnight	1970-01-03 00:00:00	18	1970-01-03	1464.48	6	8496.51
Manufacturer#1	almond antique burnished rose metallic	1970-01-03 00:00:00	8	1970-01-03	1173.15	6	8496.51
Manufacturer#3	almond antique olive coral navajo	1970-01-03 00:00:00	28	1970-01-03	1337.29	6	8496.51
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-03 00:00:00	23	1970-01-03	1632.66	6	8496.51
Manufacturer#1	almond antique burnished rose metallic	1970-01-04 00:00:00	39	1970-01-04	1173.15	7	6553.130000000001
Manufacturer#3	almond antique chartreuse khaki white	1970-01-04 00:00:00	24	1970-01-04	99.68	7	6553.130000000001
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-04 00:00:00	14	1970-01-04	NULL	7	6553.130000000001
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	9	1970-01-04	1632.66	7	6553.130000000001
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	NULL	1970-01-04	4.0	7	6553.130000000001
Manufacturer#5	almond antique medium spring khaki	1970-01-04 00:00:00	29	1970-01-04	1611.66	7	6553.130000000001
Manufacturer#2	almond aquamarine midnight light salmon	1970-01-04 00:00:00	34	1970-01-04	2031.98	7	6553.130000000001
Manufacturer#2	almond antique violet chocolate turquoise	1970-01-05 00:00:00	15	1970-01-05	1690.68	7	7448.56
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-05 00:00:00	10	1970-01-05	1190.27	7	7448.56
Manufacturer#1	almond antique salmon chartreuse burlywood	1970-01-05 00:00:00	30	1970-01-05	1602.59	7	7448.56
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	NULL	1970-01-05	5.0	7	7448.56
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	35	1970-01-05	NULL	7	7448.56
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	40	1970-01-05	1206.26	7	7448.56
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	20	1970-01-05	1753.76	7	7448.56
PREHOOK: query: select "************ DATE PARTITION WITH CONSTANT PARTITION EXPRESSION ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ DATE PARTITION WITH CONSTANT PARTITION EXPRESSION ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ DATE PARTITION WITH CONSTANT PARTITION EXPRESSION ************
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_date) as cs,
sum(p_retailprice) over(partition by p_date) as s
from vector_ptf_part_simple_orc
where p_date = '1970-01-03'
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_date) as cs,
sum(p_retailprice) over(partition by p_date) as s
from vector_ptf_part_simple_orc
where p_date = '1970-01-03'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  filterExpr: (p_date = DATE'1970-01-03') (type: boolean)
                  Statistics: Num rows: 40 Data size: 12420 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_date:date, 3:p_timestamp:timestamp, 4:p_int:int, 5:p_retailprice:double, 6:p_decimal:decimal(10,4)/DECIMAL_64, 7:rowindex:int, 8:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterDateColEqualDateScalar(col 2:date, val 2)
                    predicate: (p_date = DATE'1970-01-03') (type: boolean)
                    Statistics: Num rows: 20 Data size: 6260 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: DATE'1970-01-03' (type: date)
                      null sort order: a
                      sort order: +
                      Map-reduce partition columns: DATE'1970-01-03' (type: date)
                      Reduce Sink Vectorization:
                          className: VectorReduceSinkLongOperator
                          keyColumns: 9:date
                          keyExpressions: ConstantVectorExpression(val 2) -> 9:date
                          native: true
                          nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          valueColumns: 0:string, 1:string, 3:timestamp, 5:double, 7:int
                      Statistics: Num rows: 20 Data size: 6260 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: p_mfgr (type: string), p_name (type: string), p_timestamp (type: timestamp), p_retailprice (type: double), rowindex (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 8
                    includeColumns: [0, 1, 2, 3, 5, 7]
                    dataColumns: p_mfgr:string, p_name:string, p_date:date, p_timestamp:timestamp, p_int:int, p_retailprice:double, p_decimal:decimal(10,4)/DECIMAL_64, rowindex:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 6
                    dataColumns: KEY.reducesinkkey0:date, VALUE._col0:string, VALUE._col1:string, VALUE._col3:timestamp, VALUE._col5:double, VALUE._col7:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, double, bigint, bigint, bigint]
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), VALUE._col1 (type: string), VALUE._col3 (type: timestamp), VALUE._col5 (type: double), VALUE._col7 (type: int)
                outputColumnNames: _col0, _col1, _col3, _col5, _col7
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [1, 2, 3, 4, 5]
                Statistics: Num rows: 20 Data size: 5308 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col3: timestamp, _col5: double, _col7: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: DATE'1970-01-03' ASC NULLS FIRST
                        partition by: DATE'1970-01-03'
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isStar: true
                            window function definition
                              alias: sum_window_1
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: false
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorCountStar, VectorPTFEvaluatorDoubleSum]
                      functionInputExpressions: [null, col 4:double]
                      functionNames: [count, sum]
                      keyInputColumns: []
                      native: true
                      nonKeyInputColumns: [1, 2, 3, 4, 5]
                      orderExpressions: [ConstantVectorExpression(val 2) -> 9:date]
                      outputColumns: [6, 7, 1, 2, 3, 4, 5]
                      outputTypes: [bigint, double, string, string, timestamp, double, int]
                      partitionExpressions: [ConstantVectorExpression(val 2) -> 8:date]
                      streamingColumns: []
                  Statistics: Num rows: 20 Data size: 5308 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col3 (type: timestamp), _col7 (type: int), DATE'1970-01-03' (type: date), _col5 (type: double), count_window_0 (type: bigint), sum_window_1 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [1, 2, 3, 5, 10, 4, 6, 7]
                        selectExpressions: ConstantVectorExpression(val 2) -> 10:date
                    Statistics: Num rows: 20 Data size: 6564 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 20 Data size: 6564 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_date) as cs,
sum(p_retailprice) over(partition by p_date) as s
from vector_ptf_part_simple_orc
where p_date = '1970-01-03'
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_date) as cs,
sum(p_retailprice) over(partition by p_date) as s
from vector_ptf_part_simple_orc
where p_date = '1970-01-03'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_retailprice	cs	s
Manufacturer#2	almond aquamarine rose maroon antique	1970-01-03 00:00:00	3	1970-01-03	1698.66	6	8496.51
Manufacturer#1	almond antique burnished rose metallic	1970-01-03 00:00:00	8	1970-01-03	1173.15	6	8496.51
Manufacturer#5	almond azure blanched chiffon midnight	1970-01-03 00:00:00	18	1970-01-03	1464.48	6	8496.51
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-03 00:00:00	23	1970-01-03	1632.66	6	8496.51
Manufacturer#3	almond antique olive coral navajo	1970-01-03 00:00:00	28	1970-01-03	1337.29	6	8496.51
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-03 00:00:00	33	1970-01-03	1190.27	6	8496.51
PREHOOK: query: select "************ INT WINDOW RANGE TYPE ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ INT WINDOW RANGE TYPE ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ INT WINDOW RANGE TYPE ************
PREHOOK: query: select "************ INT WINDOW RANGE TYPE (NON-VECTORIZED REFERENCE) ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ INT WINDOW RANGE TYPE (NON-VECTORIZED REFERENCE) ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ INT WINDOW RANGE TYPE (NON-VECTORIZED REFERENCE) ************
PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice, p_int,
count(*) over(partition by p_mfgr order by p_int range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_int range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice, p_int,
count(*) over(partition by p_mfgr order by p_int range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_int range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_retailprice	p_int	cs	s
Manufacturer#1	almond aquamarine burnished black steel	1970-01-02 00:00:00	NULL	1970-01-02	2.0	115200	3	3388.42
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-02 00:00:00	17	1970-01-02	1632.66	115200	3	3388.42
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-02 00:00:00	12	1970-01-02	1753.76	115200	3	3388.42
Manufacturer#1	almond antique burnished rose metallic	1970-01-03 00:00:00	8	1970-01-03	1173.15	201600	2	2805.8100000000004
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-03 00:00:00	23	1970-01-03	1632.66	201600	2	2805.8100000000004
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	9	1970-01-04	1632.66	288000	3	2809.8100000000004
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	NULL	1970-01-04	4.0	288000	3	2809.8100000000004
Manufacturer#1	almond antique burnished rose metallic	1970-01-04 00:00:00	39	1970-01-04	1173.15	288000	3	2809.8100000000004
Manufacturer#1	almond antique salmon chartreuse burlywood	1970-01-05 00:00:00	30	1970-01-05	1602.59	374400	3	3361.35
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	NULL	1970-01-05	5.0	374400	3	3361.35
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	20	1970-01-05	1753.76	374400	3	3361.35
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	26	NULL	1753.76	NULL	1	1753.76
Manufacturer#2	almond antique violet turquoise frosted	1970-01-01 00:00:00	21	1970-01-01	1800.7	28800	1	1800.7
Manufacturer#2	almond antique violet turquoise frosted	1970-01-02 00:00:00	27	1970-01-02	1800.7	115200	1	1800.7
Manufacturer#2	almond aquamarine rose maroon antique	1970-01-03 00:00:00	3	1970-01-03	1698.66	201600	1	1698.66
Manufacturer#2	almond aquamarine midnight light salmon	1970-01-04 00:00:00	34	1970-01-04	2031.98	288000	1	2031.98
Manufacturer#2	almond antique violet chocolate turquoise	1970-01-05 00:00:00	15	1970-01-05	1690.68	374400	1	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	NULL	1	NULL	900.66	NULL	3	3701.96
Manufacturer#2	almond antique violet turquoise frosted	NULL	13	NULL	1800.7	NULL	3	3701.96
Manufacturer#2	almond aquamarine sandy cyan gainsboro	NULL	32	NULL	1000.6	NULL	3	3701.96
Manufacturer#3	almond antique misty red olive	1970-01-01 00:00:00	31	1970-01-01	1922.98	28800	1	1922.98
Manufacturer#3	almond antique olive coral navajo	1970-01-03 00:00:00	28	1970-01-03	1337.29	201600	2	2527.56
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-03 00:00:00	33	1970-01-03	1190.27	201600	2	2527.56
Manufacturer#3	almond antique chartreuse khaki white	1970-01-04 00:00:00	24	1970-01-04	99.68	288000	2	99.68
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-04 00:00:00	14	1970-01-04	NULL	288000	2	99.68
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-05 00:00:00	10	1970-01-05	1190.27	374400	1	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	NULL	19	NULL	590.27	NULL	2	645.66
Manufacturer#3	almond antique metallic orange dim	NULL	38	NULL	55.39	NULL	2	645.66
Manufacturer#4	almond antique violet mint lemon	1970-01-01 00:00:00	16	1970-01-01	1375.42	28800	2	3220.34
Manufacturer#4	almond aquamarine yellow dodger mint	1970-01-01 00:00:00	11	1970-01-01	1844.92	28800	2	3220.34
Manufacturer#4	almond azure aquamarine papaya violet	1970-01-02 00:00:00	37	1970-01-02	1290.35	115200	1	1290.35
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	40	1970-01-05	1206.26	374400	2	1206.26
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	35	1970-01-05	NULL	374400	2	1206.26
Manufacturer#4	almond antique gainsboro frosted violet	NULL	25	NULL	NULL	NULL	1	NULL
Manufacturer#5	almond aquamarine dodger light gainsboro	1970-01-01 00:00:00	36	1970-01-01	1018.1	28800	2	1024.1
Manufacturer#5	almond antique medium spring khaki	1970-01-01 00:00:00	NULL	1970-01-01	6.0	28800	2	1024.1
Manufacturer#5	almond antique sky peru orange	1970-01-02 00:00:00	22	1970-01-02	1788.73	115200	1	1788.73
Manufacturer#5	almond azure blanched chiffon midnight	1970-01-03 00:00:00	18	1970-01-03	1464.48	201600	1	1464.48
Manufacturer#5	almond antique medium spring khaki	1970-01-04 00:00:00	29	1970-01-04	1611.66	288000	1	1611.66
Manufacturer#5	almond antique blue firebrick mint	NULL	7	NULL	1789.69	NULL	1	1789.69
PREHOOK: query: select "************ INT WINDOW RANGE TYPE (VECTORIZED) ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ INT WINDOW RANGE TYPE (VECTORIZED) ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ INT WINDOW RANGE TYPE (VECTORIZED) ************
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice, p_int,
count(*) over(partition by p_mfgr order by p_int range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_int range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice, p_int,
count(*) over(partition by p_mfgr order by p_int range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_int range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 12552 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_date:date, 3:p_timestamp:timestamp, 4:p_int:int, 5:p_retailprice:double, 6:p_decimal:decimal(10,4)/DECIMAL_64, 7:rowindex:int, 8:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), p_int (type: int)
                    null sort order: az
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumns: 0:string, 4:int
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumns: 0:string
                        valueColumns: 1:string, 2:date, 3:timestamp, 5:double, 7:int
                    Statistics: Num rows: 40 Data size: 12552 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_name (type: string), p_date (type: date), p_timestamp (type: timestamp), p_retailprice (type: double), rowindex (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 8
                    includeColumns: [0, 1, 2, 3, 4, 5, 7]
                    dataColumns: p_mfgr:string, p_name:string, p_date:date, p_timestamp:timestamp, p_int:int, p_retailprice:double, p_decimal:decimal(10,4)/DECIMAL_64, rowindex:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: az
                reduceColumnSortOrder: ++
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 7
                    dataColumns: KEY.reducesinkkey0:string, KEY.reducesinkkey1:int, VALUE._col0:string, VALUE._col1:date, VALUE._col2:timestamp, VALUE._col3:double, VALUE._col5:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, double]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: date), VALUE._col2 (type: timestamp), KEY.reducesinkkey1 (type: int), VALUE._col3 (type: double), VALUE._col5 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col7
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 2, 3, 4, 1, 5, 6]
                Statistics: Num rows: 40 Data size: 12552 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: date, _col3: timestamp, _col4: int, _col5: double, _col7: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col4 ASC NULLS LAST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(3)~CURRENT
                              isStar: true
                            window function definition
                              alias: sum_window_1
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: RANGE PRECEDING(3)~CURRENT
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: false
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorCountStar, VectorPTFEvaluatorDoubleSum]
                      functionInputExpressions: [null, col 5:double]
                      functionNames: [count, sum]
                      keyInputColumns: [0, 1]
                      native: true
                      nonKeyInputColumns: [2, 3, 4, 5, 6]
                      orderExpressions: [col 1:int]
                      outputColumns: [7, 8, 0, 2, 3, 4, 1, 5, 6]
                      outputTypes: [bigint, double, string, string, date, timestamp, int, double, int]
                      partitionExpressions: [col 0:string]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 12552 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col3 (type: timestamp), _col7 (type: int), _col2 (type: date), _col5 (type: double), _col4 (type: int), count_window_0 (type: bigint), sum_window_1 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 2, 4, 6, 3, 5, 1, 7, 8]
                    Statistics: Num rows: 40 Data size: 12352 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 12352 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice, p_int,
count(*) over(partition by p_mfgr order by p_int range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_int range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice, p_int,
count(*) over(partition by p_mfgr order by p_int range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_int range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_retailprice	p_int	cs	s
Manufacturer#1	almond aquamarine burnished black steel	1970-01-02 00:00:00	NULL	1970-01-02	2.0	115200	3	3388.42
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-02 00:00:00	17	1970-01-02	1632.66	115200	3	3388.42
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-02 00:00:00	12	1970-01-02	1753.76	115200	3	3388.42
Manufacturer#1	almond antique burnished rose metallic	1970-01-03 00:00:00	8	1970-01-03	1173.15	201600	2	2805.8100000000004
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-03 00:00:00	23	1970-01-03	1632.66	201600	2	2805.8100000000004
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	9	1970-01-04	1632.66	288000	3	2809.8100000000004
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	NULL	1970-01-04	4.0	288000	3	2809.8100000000004
Manufacturer#1	almond antique burnished rose metallic	1970-01-04 00:00:00	39	1970-01-04	1173.15	288000	3	2809.8100000000004
Manufacturer#1	almond antique salmon chartreuse burlywood	1970-01-05 00:00:00	30	1970-01-05	1602.59	374400	3	3361.35
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	NULL	1970-01-05	5.0	374400	3	3361.35
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	20	1970-01-05	1753.76	374400	3	3361.35
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	26	NULL	1753.76	NULL	1	1753.76
Manufacturer#2	almond antique violet turquoise frosted	1970-01-01 00:00:00	21	1970-01-01	1800.7	28800	1	1800.7
Manufacturer#2	almond antique violet turquoise frosted	1970-01-02 00:00:00	27	1970-01-02	1800.7	115200	1	1800.7
Manufacturer#2	almond aquamarine rose maroon antique	1970-01-03 00:00:00	3	1970-01-03	1698.66	201600	1	1698.66
Manufacturer#2	almond aquamarine midnight light salmon	1970-01-04 00:00:00	34	1970-01-04	2031.98	288000	1	2031.98
Manufacturer#2	almond antique violet chocolate turquoise	1970-01-05 00:00:00	15	1970-01-05	1690.68	374400	1	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	NULL	1	NULL	900.66	NULL	3	3701.96
Manufacturer#2	almond antique violet turquoise frosted	NULL	13	NULL	1800.7	NULL	3	3701.96
Manufacturer#2	almond aquamarine sandy cyan gainsboro	NULL	32	NULL	1000.6	NULL	3	3701.96
Manufacturer#3	almond antique misty red olive	1970-01-01 00:00:00	31	1970-01-01	1922.98	28800	1	1922.98
Manufacturer#3	almond antique olive coral navajo	1970-01-03 00:00:00	28	1970-01-03	1337.29	201600	2	2527.56
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-03 00:00:00	33	1970-01-03	1190.27	201600	2	2527.56
Manufacturer#3	almond antique chartreuse khaki white	1970-01-04 00:00:00	24	1970-01-04	99.68	288000	2	99.68
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-04 00:00:00	14	1970-01-04	NULL	288000	2	99.68
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-05 00:00:00	10	1970-01-05	1190.27	374400	1	1190.27
Manufacturer#3	almond antique forest lavender goldenrod	NULL	19	NULL	590.27	NULL	2	645.66
Manufacturer#3	almond antique metallic orange dim	NULL	38	NULL	55.39	NULL	2	645.66
Manufacturer#4	almond antique violet mint lemon	1970-01-01 00:00:00	16	1970-01-01	1375.42	28800	2	3220.34
Manufacturer#4	almond aquamarine yellow dodger mint	1970-01-01 00:00:00	11	1970-01-01	1844.92	28800	2	3220.34
Manufacturer#4	almond azure aquamarine papaya violet	1970-01-02 00:00:00	37	1970-01-02	1290.35	115200	1	1290.35
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	40	1970-01-05	1206.26	374400	2	1206.26
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	35	1970-01-05	NULL	374400	2	1206.26
Manufacturer#4	almond antique gainsboro frosted violet	NULL	25	NULL	NULL	NULL	1	NULL
Manufacturer#5	almond aquamarine dodger light gainsboro	1970-01-01 00:00:00	36	1970-01-01	1018.1	28800	2	1024.1
Manufacturer#5	almond antique medium spring khaki	1970-01-01 00:00:00	NULL	1970-01-01	6.0	28800	2	1024.1
Manufacturer#5	almond antique sky peru orange	1970-01-02 00:00:00	22	1970-01-02	1788.73	115200	1	1788.73
Manufacturer#5	almond azure blanched chiffon midnight	1970-01-03 00:00:00	18	1970-01-03	1464.48	201600	1	1464.48
Manufacturer#5	almond antique medium spring khaki	1970-01-04 00:00:00	29	1970-01-04	1611.66	288000	1	1611.66
Manufacturer#5	almond antique blue firebrick mint	NULL	7	NULL	1789.69	NULL	1	1789.69
PREHOOK: query: select "************ INT PARTITION ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ INT PARTITION ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ INT PARTITION ************
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice, p_int,
count(*) over(partition by p_int) as cs,
sum(p_retailprice) over(partition by p_int) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice, p_int,
count(*) over(partition by p_int) as cs,
sum(p_retailprice) over(partition by p_int) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 12552 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_date:date, 3:p_timestamp:timestamp, 4:p_int:int, 5:p_retailprice:double, 6:p_decimal:decimal(10,4)/DECIMAL_64, 7:rowindex:int, 8:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_int (type: int)
                    null sort order: a
                    sort order: +
                    Map-reduce partition columns: p_int (type: int)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkLongOperator
                        keyColumns: 4:int
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        valueColumns: 0:string, 1:string, 2:date, 3:timestamp, 5:double, 7:int
                    Statistics: Num rows: 40 Data size: 12552 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_mfgr (type: string), p_name (type: string), p_date (type: date), p_timestamp (type: timestamp), p_retailprice (type: double), rowindex (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 8
                    includeColumns: [0, 1, 2, 3, 4, 5, 7]
                    dataColumns: p_mfgr:string, p_name:string, p_date:date, p_timestamp:timestamp, p_int:int, p_retailprice:double, p_decimal:decimal(10,4)/DECIMAL_64, rowindex:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 7
                    dataColumns: KEY.reducesinkkey0:int, VALUE._col0:string, VALUE._col1:string, VALUE._col2:date, VALUE._col3:timestamp, VALUE._col4:double, VALUE._col6:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, double]
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), VALUE._col1 (type: string), VALUE._col2 (type: date), VALUE._col3 (type: timestamp), KEY.reducesinkkey0 (type: int), VALUE._col4 (type: double), VALUE._col6 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col7
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [1, 2, 3, 4, 0, 5, 6]
                Statistics: Num rows: 40 Data size: 12552 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: date, _col3: timestamp, _col4: int, _col5: double, _col7: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col4 ASC NULLS FIRST
                        partition by: _col4
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isStar: true
                            window function definition
                              alias: sum_window_1
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: false
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorCountStar, VectorPTFEvaluatorDoubleSum]
                      functionInputExpressions: [null, col 5:double]
                      functionNames: [count, sum]
                      keyInputColumns: [0]
                      native: true
                      nonKeyInputColumns: [1, 2, 3, 4, 5, 6]
                      orderExpressions: [col 0:int]
                      outputColumns: [7, 8, 1, 2, 3, 4, 0, 5, 6]
                      outputTypes: [bigint, double, string, string, date, timestamp, int, double, int]
                      partitionExpressions: [col 0:int]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 12552 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col3 (type: timestamp), _col7 (type: int), _col2 (type: date), _col5 (type: double), _col4 (type: int), count_window_0 (type: bigint), sum_window_1 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [1, 2, 4, 6, 3, 5, 0, 7, 8]
                    Statistics: Num rows: 40 Data size: 12352 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 12352 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice, p_int,
count(*) over(partition by p_int) as cs,
sum(p_retailprice) over(partition by p_int) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice, p_int,
count(*) over(partition by p_int) as cs,
sum(p_retailprice) over(partition by p_int) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_retailprice	p_int	cs	s
Manufacturer#5	almond antique sky peru orange	1970-01-02 00:00:00	22	1970-01-02	1788.73	115200	6	8268.2
Manufacturer#4	almond azure aquamarine papaya violet	1970-01-02 00:00:00	37	1970-01-02	1290.35	115200	6	8268.2
Manufacturer#2	almond antique violet turquoise frosted	1970-01-02 00:00:00	27	1970-01-02	1800.7	115200	6	8268.2
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-02 00:00:00	17	1970-01-02	1632.66	115200	6	8268.2
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-02 00:00:00	12	1970-01-02	1753.76	115200	6	8268.2
Manufacturer#1	almond aquamarine burnished black steel	1970-01-02 00:00:00	NULL	1970-01-02	2.0	115200	6	8268.2
Manufacturer#1	almond antique burnished rose metallic	1970-01-04 00:00:00	39	1970-01-04	1173.15	288000	7	6553.13
Manufacturer#3	almond antique chartreuse khaki white	1970-01-04 00:00:00	24	1970-01-04	99.68	288000	7	6553.13
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	9	1970-01-04	1632.66	288000	7	6553.13
Manufacturer#2	almond aquamarine midnight light salmon	1970-01-04 00:00:00	34	1970-01-04	2031.98	288000	7	6553.13
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-04 00:00:00	14	1970-01-04	NULL	288000	7	6553.13
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	NULL	1970-01-04	4.0	288000	7	6553.13
Manufacturer#5	almond antique medium spring khaki	1970-01-04 00:00:00	29	1970-01-04	1611.66	288000	7	6553.13
Manufacturer#3	almond antique forest lavender goldenrod	NULL	19	NULL	590.27	NULL	8	7891.07
Manufacturer#2	almond aquamarine sandy cyan gainsboro	NULL	32	NULL	1000.6	NULL	8	7891.07
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	26	NULL	1753.76	NULL	8	7891.07
Manufacturer#4	almond antique gainsboro frosted violet	NULL	25	NULL	NULL	NULL	8	7891.07
Manufacturer#2	almond aquamarine rose maroon antique	NULL	1	NULL	900.66	NULL	8	7891.07
Manufacturer#5	almond antique blue firebrick mint	NULL	7	NULL	1789.69	NULL	8	7891.07
Manufacturer#3	almond antique metallic orange dim	NULL	38	NULL	55.39	NULL	8	7891.07
Manufacturer#2	almond antique violet turquoise frosted	NULL	13	NULL	1800.7	NULL	8	7891.07
Manufacturer#2	almond antique violet turquoise frosted	1970-01-01 00:00:00	21	1970-01-01	1800.7	28800	6	7968.12
Manufacturer#5	almond antique medium spring khaki	1970-01-01 00:00:00	NULL	1970-01-01	6.0	28800	6	7968.12
Manufacturer#4	almond aquamarine yellow dodger mint	1970-01-01 00:00:00	11	1970-01-01	1844.92	28800	6	7968.12
Manufacturer#4	almond antique violet mint lemon	1970-01-01 00:00:00	16	1970-01-01	1375.42	28800	6	7968.12
Manufacturer#3	almond antique misty red olive	1970-01-01 00:00:00	31	1970-01-01	1922.98	28800	6	7968.12
Manufacturer#5	almond aquamarine dodger light gainsboro	1970-01-01 00:00:00	36	1970-01-01	1018.1	28800	6	7968.12
Manufacturer#3	almond antique olive coral navajo	1970-01-03 00:00:00	28	1970-01-03	1337.29	201600	6	8496.51
Manufacturer#2	almond aquamarine rose maroon antique	1970-01-03 00:00:00	3	1970-01-03	1698.66	201600	6	8496.51
Manufacturer#5	almond azure blanched chiffon midnight	1970-01-03 00:00:00	18	1970-01-03	1464.48	201600	6	8496.51
Manufacturer#1	almond antique burnished rose metallic	1970-01-03 00:00:00	8	1970-01-03	1173.15	201600	6	8496.51
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-03 00:00:00	33	1970-01-03	1190.27	201600	6	8496.51
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-03 00:00:00	23	1970-01-03	1632.66	201600	6	8496.51
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-05 00:00:00	10	1970-01-05	1190.27	374400	7	7448.56
Manufacturer#1	almond antique salmon chartreuse burlywood	1970-01-05 00:00:00	30	1970-01-05	1602.59	374400	7	7448.56
Manufacturer#2	almond antique violet chocolate turquoise	1970-01-05 00:00:00	15	1970-01-05	1690.68	374400	7	7448.56
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	35	1970-01-05	NULL	374400	7	7448.56
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	40	1970-01-05	1206.26	374400	7	7448.56
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	NULL	1970-01-05	5.0	374400	7	7448.56
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	20	1970-01-05	1753.76	374400	7	7448.56
PREHOOK: query: select "************ INT PARTITION WITH CONSTANT PARTITION EXPRESSION ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ INT PARTITION WITH CONSTANT PARTITION EXPRESSION ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ INT PARTITION WITH CONSTANT PARTITION EXPRESSION ************
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice, p_int,
count(*) over(partition by p_int) as cs,
sum(p_retailprice) over(partition by p_int) as s
from vector_ptf_part_simple_orc
where p_date = 115200
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice, p_int,
count(*) over(partition by p_int) as cs,
sum(p_retailprice) over(partition by p_int) as s
from vector_ptf_part_simple_orc
where p_date = 115200
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  filterExpr: (CAST( p_date AS STRING) = '115200') (type: boolean)
                  Statistics: Num rows: 40 Data size: 12552 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_date:date, 3:p_timestamp:timestamp, 4:p_int:int, 5:p_retailprice:double, 6:p_decimal:decimal(10,4)/DECIMAL_64, 7:rowindex:int, 8:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterStringGroupColEqualStringScalar(col 9:string, val 115200)(children: CastDateToString(col 2:date) -> 9:string)
                    predicate: (CAST( p_date AS STRING) = '115200') (type: boolean)
                    Statistics: Num rows: 20 Data size: 6328 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: p_int (type: int)
                      null sort order: a
                      sort order: +
                      Map-reduce partition columns: p_int (type: int)
                      Reduce Sink Vectorization:
                          className: VectorReduceSinkLongOperator
                          keyColumns: 4:int
                          native: true
                          nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          valueColumns: 0:string, 1:string, 2:date, 3:timestamp, 5:double, 7:int
                      Statistics: Num rows: 20 Data size: 6328 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: p_mfgr (type: string), p_name (type: string), p_date (type: date), p_timestamp (type: timestamp), p_retailprice (type: double), rowindex (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 8
                    includeColumns: [0, 1, 2, 3, 4, 5, 7]
                    dataColumns: p_mfgr:string, p_name:string, p_date:date, p_timestamp:timestamp, p_int:int, p_retailprice:double, p_decimal:decimal(10,4)/DECIMAL_64, rowindex:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [string]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 7
                    dataColumns: KEY.reducesinkkey0:int, VALUE._col0:string, VALUE._col1:string, VALUE._col2:date, VALUE._col3:timestamp, VALUE._col4:double, VALUE._col6:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, double]
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), VALUE._col1 (type: string), VALUE._col2 (type: date), VALUE._col3 (type: timestamp), KEY.reducesinkkey0 (type: int), VALUE._col4 (type: double), VALUE._col6 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col7
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [1, 2, 3, 4, 0, 5, 6]
                Statistics: Num rows: 20 Data size: 6328 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: date, _col3: timestamp, _col4: int, _col5: double, _col7: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col4 ASC NULLS FIRST
                        partition by: _col4
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isStar: true
                            window function definition
                              alias: sum_window_1
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: false
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorCountStar, VectorPTFEvaluatorDoubleSum]
                      functionInputExpressions: [null, col 5:double]
                      functionNames: [count, sum]
                      keyInputColumns: [0]
                      native: true
                      nonKeyInputColumns: [1, 2, 3, 4, 5, 6]
                      orderExpressions: [col 0:int]
                      outputColumns: [7, 8, 1, 2, 3, 4, 0, 5, 6]
                      outputTypes: [bigint, double, string, string, date, timestamp, int, double, int]
                      partitionExpressions: [col 0:int]
                      streamingColumns: []
                  Statistics: Num rows: 20 Data size: 6328 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col3 (type: timestamp), _col7 (type: int), _col2 (type: date), _col5 (type: double), _col4 (type: int), count_window_0 (type: bigint), sum_window_1 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [1, 2, 4, 6, 3, 5, 0, 7, 8]
                    Statistics: Num rows: 20 Data size: 6224 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 20 Data size: 6224 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_int) as cs,
sum(p_retailprice) over(partition by p_int) as s
from vector_ptf_part_simple_orc
where p_int = 115200
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_retailprice,
count(*) over(partition by p_int) as cs,
sum(p_retailprice) over(partition by p_int) as s
from vector_ptf_part_simple_orc
where p_int = 115200
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_retailprice	cs	s
Manufacturer#1	almond aquamarine burnished black steel	1970-01-02 00:00:00	NULL	1970-01-02	2.0	6	8268.2
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-02 00:00:00	12	1970-01-02	1753.76	6	8268.2
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-02 00:00:00	17	1970-01-02	1632.66	6	8268.2
Manufacturer#5	almond antique sky peru orange	1970-01-02 00:00:00	22	1970-01-02	1788.73	6	8268.2
Manufacturer#2	almond antique violet turquoise frosted	1970-01-02 00:00:00	27	1970-01-02	1800.7	6	8268.2
Manufacturer#4	almond azure aquamarine papaya violet	1970-01-02 00:00:00	37	1970-01-02	1290.35	6	8268.2
PREHOOK: query: select "************ DECIMAL WINDOW RANGE TYPE ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ DECIMAL WINDOW RANGE TYPE ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ DECIMAL WINDOW RANGE TYPE ************
PREHOOK: query: select "************ DECIMAL WINDOW RANGE TYPE (NON-VECTORIZED REFERENCE) ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ DECIMAL WINDOW RANGE TYPE (NON-VECTORIZED REFERENCE) ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ DECIMAL WINDOW RANGE TYPE (NON-VECTORIZED REFERENCE) ************
PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_decimal, p_retailprice,
count(*) over(partition by p_mfgr order by p_decimal range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_decimal range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_decimal, p_retailprice,
count(*) over(partition by p_mfgr order by p_decimal range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_decimal range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_decimal	p_retailprice	cs	s
Manufacturer#1	almond aquamarine burnished black steel	1970-01-02 00:00:00	NULL	1970-01-02	2.0000	2.0	1	2.0
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	NULL	1970-01-04	4.0000	4.0	2	6.0
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	NULL	1970-01-05	5.0000	5.0	3	11.0
Manufacturer#1	almond antique burnished rose metallic	1970-01-03 00:00:00	8	1970-01-03	1173.1500	1173.15	2	2346.3
Manufacturer#1	almond antique burnished rose metallic	1970-01-04 00:00:00	39	1970-01-04	1173.1500	1173.15	2	2346.3
Manufacturer#1	almond antique salmon chartreuse burlywood	1970-01-05 00:00:00	30	1970-01-05	1602.5900	1602.59	1	1602.59
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-02 00:00:00	17	1970-01-02	1632.6600	1632.66	3	4897.9800000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	9	1970-01-04	1632.6600	1632.66	3	4897.9800000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-03 00:00:00	23	1970-01-03	1632.6600	1632.66	3	4897.9800000000005
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	26	NULL	1753.7600	1753.76	3	5261.28
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-02 00:00:00	12	1970-01-02	1753.7600	1753.76	3	5261.28
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	20	1970-01-05	1753.7600	1753.76	3	5261.28
Manufacturer#2	almond aquamarine rose maroon antique	NULL	1	NULL	900.6600	900.66	1	900.66
Manufacturer#2	almond aquamarine sandy cyan gainsboro	NULL	32	NULL	1000.6000	1000.6	1	1000.6
Manufacturer#2	almond antique violet chocolate turquoise	1970-01-05 00:00:00	15	1970-01-05	1690.6800	1690.68	1	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	1970-01-03 00:00:00	3	1970-01-03	1698.6600	1698.66	1	1698.66
Manufacturer#2	almond antique violet turquoise frosted	1970-01-01 00:00:00	21	1970-01-01	1800.7000	1800.7	3	5402.1
Manufacturer#2	almond antique violet turquoise frosted	NULL	13	NULL	1800.7000	1800.7	3	5402.1
Manufacturer#2	almond antique violet turquoise frosted	1970-01-02 00:00:00	27	1970-01-02	1800.7000	1800.7	3	5402.1
Manufacturer#2	almond aquamarine midnight light salmon	1970-01-04 00:00:00	34	1970-01-04	2031.9800	2031.98	1	2031.98
Manufacturer#3	almond antique metallic orange dim	NULL	38	NULL	55.3900	55.39	1	55.39
Manufacturer#3	almond antique chartreuse khaki white	1970-01-04 00:00:00	24	1970-01-04	99.6800	99.68	1	99.68
Manufacturer#3	almond antique forest lavender goldenrod	NULL	19	NULL	590.2700	590.27	1	590.27
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-05 00:00:00	10	1970-01-05	1190.2700	1190.27	2	2380.54
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-03 00:00:00	33	1970-01-03	1190.2700	1190.27	2	2380.54
Manufacturer#3	almond antique olive coral navajo	1970-01-03 00:00:00	28	1970-01-03	1337.2900	1337.29	1	1337.29
Manufacturer#3	almond antique misty red olive	1970-01-01 00:00:00	31	1970-01-01	1922.9800	1922.98	1	1922.98
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-04 00:00:00	14	1970-01-04	NULL	NULL	1	NULL
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	40	1970-01-05	1206.2600	1206.26	1	1206.26
Manufacturer#4	almond azure aquamarine papaya violet	1970-01-02 00:00:00	37	1970-01-02	1290.3500	1290.35	1	1290.35
Manufacturer#4	almond antique violet mint lemon	1970-01-01 00:00:00	16	1970-01-01	1375.4200	1375.42	1	1375.42
Manufacturer#4	almond aquamarine yellow dodger mint	1970-01-01 00:00:00	11	1970-01-01	1844.9200	1844.92	1	1844.92
Manufacturer#4	almond antique gainsboro frosted violet	NULL	25	NULL	NULL	NULL	2	NULL
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	35	1970-01-05	NULL	NULL	2	NULL
Manufacturer#5	almond antique medium spring khaki	1970-01-01 00:00:00	NULL	1970-01-01	6.0000	6.0	1	6.0
Manufacturer#5	almond aquamarine dodger light gainsboro	1970-01-01 00:00:00	36	1970-01-01	1018.1000	1018.1	1	1018.1
Manufacturer#5	almond azure blanched chiffon midnight	1970-01-03 00:00:00	18	1970-01-03	1464.4800	1464.48	1	1464.48
Manufacturer#5	almond antique medium spring khaki	1970-01-04 00:00:00	29	1970-01-04	1611.6600	1611.66	1	1611.66
Manufacturer#5	almond antique sky peru orange	1970-01-02 00:00:00	22	1970-01-02	1788.7300	1788.73	1	1788.73
Manufacturer#5	almond antique blue firebrick mint	NULL	7	NULL	1789.6900	1789.69	2	3578.42
PREHOOK: query: select "************ DECIMAL WINDOW RANGE TYPE (VECTORIZED) ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ DECIMAL WINDOW RANGE TYPE (VECTORIZED) ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ DECIMAL WINDOW RANGE TYPE (VECTORIZED) ************
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_decimal, p_retailprice,
count(*) over(partition by p_mfgr order by p_decimal range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_decimal range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_decimal, p_retailprice,
count(*) over(partition by p_mfgr order by p_decimal range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_decimal range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 16676 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_date:date, 3:p_timestamp:timestamp, 4:p_int:int, 5:p_retailprice:double, 6:p_decimal:decimal(10,4)/DECIMAL_64, 7:rowindex:int, 8:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_mfgr (type: string), p_decimal (type: decimal(10,4))
                    null sort order: az
                    sort order: ++
                    Map-reduce partition columns: p_mfgr (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumns: 0:string, 6:decimal(10,4)
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumns: 0:string
                        valueColumns: 1:string, 2:date, 3:timestamp, 5:double, 7:int
                    Statistics: Num rows: 40 Data size: 16676 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_name (type: string), p_date (type: date), p_timestamp (type: timestamp), p_retailprice (type: double), rowindex (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 8
                    includeColumns: [0, 1, 2, 3, 5, 6, 7]
                    dataColumns: p_mfgr:string, p_name:string, p_date:date, p_timestamp:timestamp, p_int:int, p_retailprice:double, p_decimal:decimal(10,4)/DECIMAL_64, rowindex:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: az
                reduceColumnSortOrder: ++
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 7
                    dataColumns: KEY.reducesinkkey0:string, KEY.reducesinkkey1:decimal(10,4), VALUE._col0:string, VALUE._col1:date, VALUE._col2:timestamp, VALUE._col4:double, VALUE._col5:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, double]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: date), VALUE._col2 (type: timestamp), VALUE._col4 (type: double), KEY.reducesinkkey1 (type: decimal(10,4)), VALUE._col5 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col5, _col6, _col7
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 2, 3, 4, 5, 1, 6]
                Statistics: Num rows: 40 Data size: 16676 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: date, _col3: timestamp, _col5: double, _col6: decimal(10,4), _col7: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col6 ASC NULLS LAST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: RANGE PRECEDING(3)~CURRENT
                              isStar: true
                            window function definition
                              alias: sum_window_1
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: RANGE PRECEDING(3)~CURRENT
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: false
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorCountStar, VectorPTFEvaluatorDoubleSum]
                      functionInputExpressions: [null, col 5:double]
                      functionNames: [count, sum]
                      keyInputColumns: [0, 1]
                      native: true
                      nonKeyInputColumns: [2, 3, 4, 5, 6]
                      orderExpressions: [col 1:decimal(10,4)]
                      outputColumns: [7, 8, 0, 2, 3, 4, 5, 1, 6]
                      outputTypes: [bigint, double, string, string, date, timestamp, double, decimal(10,4), int]
                      partitionExpressions: [col 0:string]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 16676 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col3 (type: timestamp), _col7 (type: int), _col2 (type: date), _col6 (type: decimal(10,4)), _col5 (type: double), count_window_0 (type: bigint), sum_window_1 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 2, 4, 6, 3, 1, 5, 7, 8]
                    Statistics: Num rows: 40 Data size: 16172 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 16172 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_decimal, p_retailprice,
count(*) over(partition by p_mfgr order by p_decimal range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_decimal range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_decimal, p_retailprice,
count(*) over(partition by p_mfgr order by p_decimal range between 3 preceding and current row) as cs,
sum(p_retailprice) over(partition by p_mfgr order by p_decimal range between 3 preceding and current row) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_decimal	p_retailprice	cs	s
Manufacturer#1	almond aquamarine burnished black steel	1970-01-02 00:00:00	NULL	1970-01-02	2.0000	2.0	1	2.0
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	NULL	1970-01-04	4.0000	4.0	2	6.0
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	NULL	1970-01-05	5.0000	5.0	3	11.0
Manufacturer#1	almond antique burnished rose metallic	1970-01-03 00:00:00	8	1970-01-03	1173.1500	1173.15	2	2346.3
Manufacturer#1	almond antique burnished rose metallic	1970-01-04 00:00:00	39	1970-01-04	1173.1500	1173.15	2	2346.3
Manufacturer#1	almond antique salmon chartreuse burlywood	1970-01-05 00:00:00	30	1970-01-05	1602.5900	1602.59	1	1602.59
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-02 00:00:00	17	1970-01-02	1632.6600	1632.66	3	4897.9800000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	9	1970-01-04	1632.6600	1632.66	3	4897.9800000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-03 00:00:00	23	1970-01-03	1632.6600	1632.66	3	4897.9800000000005
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	26	NULL	1753.7600	1753.76	3	5261.28
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-02 00:00:00	12	1970-01-02	1753.7600	1753.76	3	5261.28
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	20	1970-01-05	1753.7600	1753.76	3	5261.28
Manufacturer#2	almond aquamarine rose maroon antique	NULL	1	NULL	900.6600	900.66	1	900.66
Manufacturer#2	almond aquamarine sandy cyan gainsboro	NULL	32	NULL	1000.6000	1000.6	1	1000.6
Manufacturer#2	almond antique violet chocolate turquoise	1970-01-05 00:00:00	15	1970-01-05	1690.6800	1690.68	1	1690.68
Manufacturer#2	almond aquamarine rose maroon antique	1970-01-03 00:00:00	3	1970-01-03	1698.6600	1698.66	1	1698.66
Manufacturer#2	almond antique violet turquoise frosted	1970-01-01 00:00:00	21	1970-01-01	1800.7000	1800.7	3	5402.1
Manufacturer#2	almond antique violet turquoise frosted	NULL	13	NULL	1800.7000	1800.7	3	5402.1
Manufacturer#2	almond antique violet turquoise frosted	1970-01-02 00:00:00	27	1970-01-02	1800.7000	1800.7	3	5402.1
Manufacturer#2	almond aquamarine midnight light salmon	1970-01-04 00:00:00	34	1970-01-04	2031.9800	2031.98	1	2031.98
Manufacturer#3	almond antique metallic orange dim	NULL	38	NULL	55.3900	55.39	1	55.39
Manufacturer#3	almond antique chartreuse khaki white	1970-01-04 00:00:00	24	1970-01-04	99.6800	99.68	1	99.68
Manufacturer#3	almond antique forest lavender goldenrod	NULL	19	NULL	590.2700	590.27	1	590.27
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-05 00:00:00	10	1970-01-05	1190.2700	1190.27	2	2380.54
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-03 00:00:00	33	1970-01-03	1190.2700	1190.27	2	2380.54
Manufacturer#3	almond antique olive coral navajo	1970-01-03 00:00:00	28	1970-01-03	1337.2900	1337.29	1	1337.29
Manufacturer#3	almond antique misty red olive	1970-01-01 00:00:00	31	1970-01-01	1922.9800	1922.98	1	1922.98
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-04 00:00:00	14	1970-01-04	NULL	NULL	1	NULL
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	40	1970-01-05	1206.2600	1206.26	1	1206.26
Manufacturer#4	almond azure aquamarine papaya violet	1970-01-02 00:00:00	37	1970-01-02	1290.3500	1290.35	1	1290.35
Manufacturer#4	almond antique violet mint lemon	1970-01-01 00:00:00	16	1970-01-01	1375.4200	1375.42	1	1375.42
Manufacturer#4	almond aquamarine yellow dodger mint	1970-01-01 00:00:00	11	1970-01-01	1844.9200	1844.92	1	1844.92
Manufacturer#4	almond antique gainsboro frosted violet	NULL	25	NULL	NULL	NULL	2	NULL
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	35	1970-01-05	NULL	NULL	2	NULL
Manufacturer#5	almond antique medium spring khaki	1970-01-01 00:00:00	NULL	1970-01-01	6.0000	6.0	1	6.0
Manufacturer#5	almond aquamarine dodger light gainsboro	1970-01-01 00:00:00	36	1970-01-01	1018.1000	1018.1	1	1018.1
Manufacturer#5	almond azure blanched chiffon midnight	1970-01-03 00:00:00	18	1970-01-03	1464.4800	1464.48	1	1464.48
Manufacturer#5	almond antique medium spring khaki	1970-01-04 00:00:00	29	1970-01-04	1611.6600	1611.66	1	1611.66
Manufacturer#5	almond antique sky peru orange	1970-01-02 00:00:00	22	1970-01-02	1788.7300	1788.73	1	1788.73
Manufacturer#5	almond antique blue firebrick mint	NULL	7	NULL	1789.6900	1789.69	2	3578.42
PREHOOK: query: select "************ DECIMAL PARTITION ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ DECIMAL PARTITION ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ DECIMAL PARTITION ************
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_decimal, p_retailprice,
count(*) over(partition by p_decimal) as cs,
sum(p_retailprice) over(partition by p_decimal) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_decimal, p_retailprice,
count(*) over(partition by p_decimal) as cs,
sum(p_retailprice) over(partition by p_decimal) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  Statistics: Num rows: 40 Data size: 16676 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_date:date, 3:p_timestamp:timestamp, 4:p_int:int, 5:p_retailprice:double, 6:p_decimal:decimal(10,4)/DECIMAL_64, 7:rowindex:int, 8:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: p_decimal (type: decimal(10,4))
                    null sort order: a
                    sort order: +
                    Map-reduce partition columns: p_decimal (type: decimal(10,4))
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkMultiKeyOperator
                        keyColumns: 6:decimal(10,4)
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        valueColumns: 0:string, 1:string, 2:date, 3:timestamp, 5:double, 7:int
                    Statistics: Num rows: 40 Data size: 16676 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_mfgr (type: string), p_name (type: string), p_date (type: date), p_timestamp (type: timestamp), p_retailprice (type: double), rowindex (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 8
                    includeColumns: [0, 1, 2, 3, 5, 6, 7]
                    dataColumns: p_mfgr:string, p_name:string, p_date:date, p_timestamp:timestamp, p_int:int, p_retailprice:double, p_decimal:decimal(10,4)/DECIMAL_64, rowindex:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 7
                    dataColumns: KEY.reducesinkkey0:decimal(10,4), VALUE._col0:string, VALUE._col1:string, VALUE._col2:date, VALUE._col3:timestamp, VALUE._col5:double, VALUE._col6:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, double]
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), VALUE._col1 (type: string), VALUE._col2 (type: date), VALUE._col3 (type: timestamp), VALUE._col5 (type: double), KEY.reducesinkkey0 (type: decimal(10,4)), VALUE._col6 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col5, _col6, _col7
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [1, 2, 3, 4, 5, 0, 6]
                Statistics: Num rows: 40 Data size: 16676 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: date, _col3: timestamp, _col5: double, _col6: decimal(10,4), _col7: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col6 ASC NULLS FIRST
                        partition by: _col6
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isStar: true
                            window function definition
                              alias: sum_window_1
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: false
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorCountStar, VectorPTFEvaluatorDoubleSum]
                      functionInputExpressions: [null, col 5:double]
                      functionNames: [count, sum]
                      keyInputColumns: [0]
                      native: true
                      nonKeyInputColumns: [1, 2, 3, 4, 5, 6]
                      orderExpressions: [col 0:decimal(10,4)]
                      outputColumns: [7, 8, 1, 2, 3, 4, 5, 0, 6]
                      outputTypes: [bigint, double, string, string, date, timestamp, double, decimal(10,4), int]
                      partitionExpressions: [col 0:decimal(10,4)]
                      streamingColumns: []
                  Statistics: Num rows: 40 Data size: 16676 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col3 (type: timestamp), _col7 (type: int), _col2 (type: date), _col6 (type: decimal(10,4)), _col5 (type: double), count_window_0 (type: bigint), sum_window_1 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [1, 2, 4, 6, 3, 0, 5, 7, 8]
                    Statistics: Num rows: 40 Data size: 16172 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 40 Data size: 16172 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_decimal, p_retailprice,
count(*) over(partition by p_decimal) as cs,
sum(p_retailprice) over(partition by p_decimal) as s
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_decimal, p_retailprice,
count(*) over(partition by p_decimal) as cs,
sum(p_retailprice) over(partition by p_decimal) as s
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_decimal	p_retailprice	cs	s
Manufacturer#1	almond aquamarine burnished black steel	1970-01-02 00:00:00	NULL	1970-01-02	2.0000	2.0	1	2.0
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	NULL	1970-01-05	5.0000	5.0	1	5.0
Manufacturer#3	almond antique forest lavender goldenrod	NULL	19	NULL	590.2700	590.27	1	590.27
Manufacturer#1	almond antique burnished rose metallic	1970-01-04 00:00:00	39	1970-01-04	1173.1500	1173.15	2	2346.3
Manufacturer#1	almond antique burnished rose metallic	1970-01-03 00:00:00	8	1970-01-03	1173.1500	1173.15	2	2346.3
Manufacturer#3	almond antique olive coral navajo	1970-01-03 00:00:00	28	1970-01-03	1337.2900	1337.29	1	1337.29
Manufacturer#2	almond antique violet chocolate turquoise	1970-01-05 00:00:00	15	1970-01-05	1690.6800	1690.68	1	1690.68
Manufacturer#5	almond antique blue firebrick mint	NULL	7	NULL	1789.6900	1789.69	1	1789.69
Manufacturer#2	almond antique violet turquoise frosted	NULL	13	NULL	1800.7000	1800.7	3	5402.1
Manufacturer#2	almond antique violet turquoise frosted	1970-01-02 00:00:00	27	1970-01-02	1800.7000	1800.7	3	5402.1
Manufacturer#2	almond antique violet turquoise frosted	1970-01-01 00:00:00	21	1970-01-01	1800.7000	1800.7	3	5402.1
Manufacturer#4	almond aquamarine yellow dodger mint	1970-01-01 00:00:00	11	1970-01-01	1844.9200	1844.92	1	1844.92
Manufacturer#3	almond antique misty red olive	1970-01-01 00:00:00	31	1970-01-01	1922.9800	1922.98	1	1922.98
Manufacturer#2	almond aquamarine midnight light salmon	1970-01-04 00:00:00	34	1970-01-04	2031.9800	2031.98	1	2031.98
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-04 00:00:00	14	1970-01-04	NULL	NULL	3	NULL
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	35	1970-01-05	NULL	NULL	3	NULL
Manufacturer#4	almond antique gainsboro frosted violet	NULL	25	NULL	NULL	NULL	3	NULL
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	NULL	1970-01-04	4.0000	4.0	1	4.0
Manufacturer#5	almond antique medium spring khaki	1970-01-01 00:00:00	NULL	1970-01-01	6.0000	6.0	1	6.0
Manufacturer#3	almond antique metallic orange dim	NULL	38	NULL	55.3900	55.39	1	55.39
Manufacturer#3	almond antique chartreuse khaki white	1970-01-04 00:00:00	24	1970-01-04	99.6800	99.68	1	99.68
Manufacturer#2	almond aquamarine rose maroon antique	NULL	1	NULL	900.6600	900.66	1	900.66
Manufacturer#2	almond aquamarine sandy cyan gainsboro	NULL	32	NULL	1000.6000	1000.6	1	1000.6
Manufacturer#5	almond aquamarine dodger light gainsboro	1970-01-01 00:00:00	36	1970-01-01	1018.1000	1018.1	1	1018.1
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-05 00:00:00	10	1970-01-05	1190.2700	1190.27	2	2380.54
Manufacturer#3	almond antique forest lavender goldenrod	1970-01-03 00:00:00	33	1970-01-03	1190.2700	1190.27	2	2380.54
Manufacturer#4	almond aquamarine floral ivory bisque	1970-01-05 00:00:00	40	1970-01-05	1206.2600	1206.26	1	1206.26
Manufacturer#4	almond azure aquamarine papaya violet	1970-01-02 00:00:00	37	1970-01-02	1290.3500	1290.35	1	1290.35
Manufacturer#4	almond antique violet mint lemon	1970-01-01 00:00:00	16	1970-01-01	1375.4200	1375.42	1	1375.42
Manufacturer#5	almond azure blanched chiffon midnight	1970-01-03 00:00:00	18	1970-01-03	1464.4800	1464.48	1	1464.48
Manufacturer#1	almond antique salmon chartreuse burlywood	1970-01-05 00:00:00	30	1970-01-05	1602.5900	1602.59	1	1602.59
Manufacturer#5	almond antique medium spring khaki	1970-01-04 00:00:00	29	1970-01-04	1611.6600	1611.66	1	1611.66
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-03 00:00:00	23	1970-01-03	1632.6600	1632.66	3	4897.9800000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-02 00:00:00	17	1970-01-02	1632.6600	1632.66	3	4897.9800000000005
Manufacturer#1	almond aquamarine pink moccasin thistle	1970-01-04 00:00:00	9	1970-01-04	1632.6600	1632.66	3	4897.9800000000005
Manufacturer#2	almond aquamarine rose maroon antique	1970-01-03 00:00:00	3	1970-01-03	1698.6600	1698.66	1	1698.66
Manufacturer#1	almond antique chartreuse lavender yellow	NULL	26	NULL	1753.7600	1753.76	3	5261.28
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-02 00:00:00	12	1970-01-02	1753.7600	1753.76	3	5261.28
Manufacturer#1	almond antique chartreuse lavender yellow	1970-01-05 00:00:00	20	1970-01-05	1753.7600	1753.76	3	5261.28
Manufacturer#5	almond antique sky peru orange	1970-01-02 00:00:00	22	1970-01-02	1788.7300	1788.73	1	1788.73
PREHOOK: query: select "************ DECIMAL PARTITION WITH CONSTANT PARTITION EXPRESSION ************"
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select "************ DECIMAL PARTITION WITH CONSTANT PARTITION EXPRESSION ************"
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
_c0
************ DECIMAL PARTITION WITH CONSTANT PARTITION EXPRESSION ************
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_decimal, p_retailprice,
count(*) over(partition by p_decimal) as cs,
sum(p_retailprice) over(partition by p_decimal) as s
from vector_ptf_part_simple_orc
where p_decimal = 1800.7000
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_decimal, p_retailprice,
count(*) over(partition by p_decimal) as cs,
sum(p_retailprice) over(partition by p_decimal) as s
from vector_ptf_part_simple_orc
where p_decimal = 1800.7000
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_ptf_part_simple_orc
                  filterExpr: (p_decimal = 1800.7) (type: boolean)
                  Statistics: Num rows: 40 Data size: 16676 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:p_mfgr:string, 1:p_name:string, 2:p_date:date, 3:p_timestamp:timestamp, 4:p_int:int, 5:p_retailprice:double, 6:p_decimal:decimal(10,4)/DECIMAL_64, 7:rowindex:int, 8:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterDecimal64ColEqualDecimal64Scalar(col 6:decimal(10,4)/DECIMAL_64, val 18007000)
                    predicate: (p_decimal = 1800.7) (type: boolean)
                    Statistics: Num rows: 1 Data size: 440 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: CAST( 1800.7 AS decimal(10,4)) (type: decimal(10,4))
                      null sort order: a
                      sort order: +
                      Map-reduce partition columns: CAST( 1800.7 AS decimal(10,4)) (type: decimal(10,4))
                      Reduce Sink Vectorization:
                          className: VectorReduceSinkMultiKeyOperator
                          keyColumns: 9:decimal(10,4)
                          keyExpressions: ConstantVectorExpression(val 1800.7) -> 9:decimal(10,4)
                          native: true
                          nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          valueColumns: 0:string, 1:string, 2:date, 3:timestamp, 5:double, 7:int
                      Statistics: Num rows: 1 Data size: 440 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: p_mfgr (type: string), p_name (type: string), p_date (type: date), p_timestamp (type: timestamp), p_retailprice (type: double), rowindex (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 8
                    includeColumns: [0, 1, 2, 3, 5, 6, 7]
                    dataColumns: p_mfgr:string, p_name:string, p_date:date, p_timestamp:timestamp, p_int:int, p_retailprice:double, p_decimal:decimal(10,4)/DECIMAL_64, rowindex:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [decimal(10,4)]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 7
                    dataColumns: KEY.reducesinkkey0:decimal(10,4), VALUE._col0:string, VALUE._col1:string, VALUE._col2:date, VALUE._col3:timestamp, VALUE._col5:double, VALUE._col7:int
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, double, decimal(10,4), decimal(10,4), decimal(10,4)]
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), VALUE._col1 (type: string), VALUE._col2 (type: date), VALUE._col3 (type: timestamp), VALUE._col5 (type: double), VALUE._col7 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col5, _col7
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [1, 2, 3, 4, 5, 6]
                Statistics: Num rows: 1 Data size: 328 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: date, _col3: timestamp, _col5: double, _col7: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: CAST( 1800.7 AS decimal(10,4)) ASC NULLS FIRST
                        partition by: CAST( 1800.7 AS decimal(10,4))
                        raw input shape:
                        window functions:
                            window function definition
                              alias: count_window_0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isStar: true
                            window function definition
                              alias: sum_window_1
                              arguments: _col5
                              name: sum
                              window function: GenericUDAFSumDouble
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                  PTF Vectorization:
                      allEvaluatorsAreStreaming: false
                      className: VectorPTFOperator
                      evaluatorClasses: [VectorPTFEvaluatorCountStar, VectorPTFEvaluatorDoubleSum]
                      functionInputExpressions: [null, col 5:double]
                      functionNames: [count, sum]
                      keyInputColumns: []
                      native: true
                      nonKeyInputColumns: [1, 2, 3, 4, 5, 6]
                      orderExpressions: [ConstantVectorExpression(val 1800.7) -> 10:decimal(10,4)]
                      outputColumns: [7, 8, 1, 2, 3, 4, 5, 6]
                      outputTypes: [bigint, double, string, string, date, timestamp, double, int]
                      partitionExpressions: [ConstantVectorExpression(val 1800.7) -> 9:decimal(10,4)]
                      streamingColumns: []
                  Statistics: Num rows: 1 Data size: 328 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col3 (type: timestamp), _col7 (type: int), _col2 (type: date), 1800.7 (type: decimal(10,4)), _col5 (type: double), count_window_0 (type: bigint), sum_window_1 (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [1, 2, 4, 6, 3, 11, 5, 7, 8]
                        selectExpressions: ConstantVectorExpression(val 1800.7) -> 11:decimal(10,4)
                    Statistics: Num rows: 1 Data size: 456 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 1 Data size: 456 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_decimal, p_retailprice,
count(*) over(partition by p_decimal) as cs,
sum(p_retailprice) over(partition by p_decimal) as s
from vector_ptf_part_simple_orc
where p_decimal = 1800.7000
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_timestamp, rowindex, p_date, p_decimal, p_retailprice,
count(*) over(partition by p_decimal) as cs,
sum(p_retailprice) over(partition by p_decimal) as s
from vector_ptf_part_simple_orc
where p_decimal = 1800.7000
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_timestamp	rowindex	p_date	p_decimal	p_retailprice	cs	s
Manufacturer#2	almond antique violet turquoise frosted	NULL	13	NULL	1800.7000	1800.7	3	5402.1
Manufacturer#2	almond antique violet turquoise frosted	1970-01-01 00:00:00	21	1970-01-01	1800.7000	1800.7	3	5402.1
Manufacturer#2	almond antique violet turquoise frosted	1970-01-02 00:00:00	27	1970-01-02	1800.7000	1800.7	3	5402.1
