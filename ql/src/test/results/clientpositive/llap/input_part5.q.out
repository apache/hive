PREHOOK: query: create table tmptable_n2(key string, value string, hr string, ds string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tmptable_n2
POSTHOOK: query: create table tmptable_n2(key string, value string, hr string, ds string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tmptable_n2
PREHOOK: query: EXPLAIN
insert overwrite table tmptable_n2
SELECT x.* FROM SRCPART x WHERE x.ds = '2008-04-08' and x.key < 100
PREHOOK: type: QUERY
PREHOOK: Input: default@srcpart
PREHOOK: Input: default@srcpart@ds=2008-04-08/hr=11
PREHOOK: Input: default@srcpart@ds=2008-04-08/hr=12
PREHOOK: Output: default@tmptable_n2
POSTHOOK: query: EXPLAIN
insert overwrite table tmptable_n2
SELECT x.* FROM SRCPART x WHERE x.ds = '2008-04-08' and x.key < 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@srcpart
POSTHOOK: Input: default@srcpart@ds=2008-04-08/hr=11
POSTHOOK: Input: default@srcpart@ds=2008-04-08/hr=12
POSTHOOK: Output: default@tmptable_n2
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: x
                  filterExpr: ((UDFToDouble(key) < 100.0D) and (ds = '2008-04-08')) (type: boolean)
                  Statistics: Num rows: 1000 Data size: 362000 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (UDFToDouble(key) < 100.0D) (type: boolean)
                    Statistics: Num rows: 333 Data size: 120546 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: string), value (type: string), '2008-04-08' (type: string), hr (type: string)
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 333 Data size: 151848 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 333 Data size: 151848 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.TextInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                            name: default.tmptable_n2
                      Select Operator
                        expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string), _col3 (type: string)
                        outputColumnNames: key, value, hr, ds
                        Statistics: Num rows: 333 Data size: 151848 Basic stats: COMPLETE Column stats: COMPLETE
                        Group By Operator
                          aggregations: max(length(key)), avg(COALESCE(length(key),0)), count(1), count(key), compute_bit_vector_hll(key), max(length(value)), avg(COALESCE(length(value),0)), count(value), compute_bit_vector_hll(value), max(length(hr)), avg(COALESCE(length(hr),0)), count(hr), compute_bit_vector_hll(hr), max(length(ds)), avg(COALESCE(length(ds),0)), count(ds), compute_bit_vector_hll(ds)
                          minReductionHashAggr: 0.99
                          mode: hash
                          outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16
                          Statistics: Num rows: 1 Data size: 936 Basic stats: COMPLETE Column stats: COMPLETE
                          Reduce Output Operator
                            null sort order: 
                            sort order: 
                            Statistics: Num rows: 1 Data size: 936 Basic stats: COMPLETE Column stats: COMPLETE
                            value expressions: _col0 (type: int), _col1 (type: struct<count:bigint,sum:double,input:int>), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: binary), _col5 (type: int), _col6 (type: struct<count:bigint,sum:double,input:int>), _col7 (type: bigint), _col8 (type: binary), _col9 (type: int), _col10 (type: struct<count:bigint,sum:double,input:int>), _col11 (type: bigint), _col12 (type: binary), _col13 (type: int), _col14 (type: struct<count:bigint,sum:double,input:int>), _col15 (type: bigint), _col16 (type: binary)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0), avg(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector_hll(VALUE._col4), max(VALUE._col5), avg(VALUE._col6), count(VALUE._col7), compute_bit_vector_hll(VALUE._col8), max(VALUE._col9), avg(VALUE._col10), count(VALUE._col11), compute_bit_vector_hll(VALUE._col12), max(VALUE._col13), avg(VALUE._col14), count(VALUE._col15), compute_bit_vector_hll(VALUE._col16)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16
                Statistics: Num rows: 1 Data size: 664 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: 'STRING' (type: string), UDFToLong(COALESCE(_col0,0)) (type: bigint), COALESCE(_col1,0) (type: double), (_col2 - _col3) (type: bigint), COALESCE(ndv_compute_bit_vector(_col4),0) (type: bigint), _col4 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col5,0)) (type: bigint), COALESCE(_col6,0) (type: double), (_col2 - _col7) (type: bigint), COALESCE(ndv_compute_bit_vector(_col8),0) (type: bigint), _col8 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col9,0)) (type: bigint), COALESCE(_col10,0) (type: double), (_col2 - _col11) (type: bigint), COALESCE(ndv_compute_bit_vector(_col12),0) (type: bigint), _col12 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col13,0)) (type: bigint), COALESCE(_col14,0) (type: double), (_col2 - _col15) (type: bigint), COALESCE(ndv_compute_bit_vector(_col16),0) (type: bigint), _col16 (type: binary)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23
                  Statistics: Num rows: 1 Data size: 1064 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 1064 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.tmptable_n2

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key, value, hr, ds
          Column Types: string, string, string, string
          Table: default.tmptable_n2

PREHOOK: query: insert overwrite table tmptable_n2
SELECT x.* FROM SRCPART x WHERE x.ds = '2008-04-08' and x.key < 100
PREHOOK: type: QUERY
PREHOOK: Input: default@srcpart
PREHOOK: Input: default@srcpart@ds=2008-04-08/hr=11
PREHOOK: Input: default@srcpart@ds=2008-04-08/hr=12
PREHOOK: Output: default@tmptable_n2
POSTHOOK: query: insert overwrite table tmptable_n2
SELECT x.* FROM SRCPART x WHERE x.ds = '2008-04-08' and x.key < 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@srcpart
POSTHOOK: Input: default@srcpart@ds=2008-04-08/hr=11
POSTHOOK: Input: default@srcpart@ds=2008-04-08/hr=12
POSTHOOK: Output: default@tmptable_n2
POSTHOOK: Lineage: tmptable_n2.ds SIMPLE [(srcpart)x.FieldSchema(name:hr, type:string, comment:null), ]
POSTHOOK: Lineage: tmptable_n2.hr SIMPLE []
POSTHOOK: Lineage: tmptable_n2.key SIMPLE [(srcpart)x.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: tmptable_n2.value SIMPLE [(srcpart)x.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: select * from tmptable_n2 x sort by x.key,x.value,x.ds,x.hr
PREHOOK: type: QUERY
PREHOOK: Input: default@tmptable_n2
#### A masked pattern was here ####
POSTHOOK: query: select * from tmptable_n2 x sort by x.key,x.value,x.ds,x.hr
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tmptable_n2
#### A masked pattern was here ####
0	val_0	2008-04-08	11
0	val_0	2008-04-08	11
0	val_0	2008-04-08	11
0	val_0	2008-04-08	12
0	val_0	2008-04-08	12
0	val_0	2008-04-08	12
10	val_10	2008-04-08	11
10	val_10	2008-04-08	12
11	val_11	2008-04-08	11
11	val_11	2008-04-08	12
12	val_12	2008-04-08	11
12	val_12	2008-04-08	11
12	val_12	2008-04-08	12
12	val_12	2008-04-08	12
15	val_15	2008-04-08	11
15	val_15	2008-04-08	11
15	val_15	2008-04-08	12
15	val_15	2008-04-08	12
17	val_17	2008-04-08	11
17	val_17	2008-04-08	12
18	val_18	2008-04-08	11
18	val_18	2008-04-08	11
18	val_18	2008-04-08	12
18	val_18	2008-04-08	12
19	val_19	2008-04-08	11
19	val_19	2008-04-08	12
2	val_2	2008-04-08	11
2	val_2	2008-04-08	12
20	val_20	2008-04-08	11
20	val_20	2008-04-08	12
24	val_24	2008-04-08	11
24	val_24	2008-04-08	11
24	val_24	2008-04-08	12
24	val_24	2008-04-08	12
26	val_26	2008-04-08	11
26	val_26	2008-04-08	11
26	val_26	2008-04-08	12
26	val_26	2008-04-08	12
27	val_27	2008-04-08	11
27	val_27	2008-04-08	12
28	val_28	2008-04-08	11
28	val_28	2008-04-08	12
30	val_30	2008-04-08	11
30	val_30	2008-04-08	12
33	val_33	2008-04-08	11
33	val_33	2008-04-08	12
34	val_34	2008-04-08	11
34	val_34	2008-04-08	12
35	val_35	2008-04-08	11
35	val_35	2008-04-08	11
35	val_35	2008-04-08	11
35	val_35	2008-04-08	12
35	val_35	2008-04-08	12
35	val_35	2008-04-08	12
37	val_37	2008-04-08	11
37	val_37	2008-04-08	11
37	val_37	2008-04-08	12
37	val_37	2008-04-08	12
4	val_4	2008-04-08	11
4	val_4	2008-04-08	12
41	val_41	2008-04-08	11
41	val_41	2008-04-08	12
42	val_42	2008-04-08	11
42	val_42	2008-04-08	11
42	val_42	2008-04-08	12
42	val_42	2008-04-08	12
43	val_43	2008-04-08	11
43	val_43	2008-04-08	12
44	val_44	2008-04-08	11
44	val_44	2008-04-08	12
47	val_47	2008-04-08	11
47	val_47	2008-04-08	12
5	val_5	2008-04-08	11
5	val_5	2008-04-08	11
5	val_5	2008-04-08	11
5	val_5	2008-04-08	12
5	val_5	2008-04-08	12
5	val_5	2008-04-08	12
51	val_51	2008-04-08	11
51	val_51	2008-04-08	11
51	val_51	2008-04-08	12
51	val_51	2008-04-08	12
53	val_53	2008-04-08	11
53	val_53	2008-04-08	12
54	val_54	2008-04-08	11
54	val_54	2008-04-08	12
57	val_57	2008-04-08	11
57	val_57	2008-04-08	12
58	val_58	2008-04-08	11
58	val_58	2008-04-08	11
58	val_58	2008-04-08	12
58	val_58	2008-04-08	12
64	val_64	2008-04-08	11
64	val_64	2008-04-08	12
65	val_65	2008-04-08	11
65	val_65	2008-04-08	12
66	val_66	2008-04-08	11
66	val_66	2008-04-08	12
67	val_67	2008-04-08	11
67	val_67	2008-04-08	11
67	val_67	2008-04-08	12
67	val_67	2008-04-08	12
69	val_69	2008-04-08	11
69	val_69	2008-04-08	12
70	val_70	2008-04-08	11
70	val_70	2008-04-08	11
70	val_70	2008-04-08	11
70	val_70	2008-04-08	12
70	val_70	2008-04-08	12
70	val_70	2008-04-08	12
72	val_72	2008-04-08	11
72	val_72	2008-04-08	11
72	val_72	2008-04-08	12
72	val_72	2008-04-08	12
74	val_74	2008-04-08	11
74	val_74	2008-04-08	12
76	val_76	2008-04-08	11
76	val_76	2008-04-08	11
76	val_76	2008-04-08	12
76	val_76	2008-04-08	12
77	val_77	2008-04-08	11
77	val_77	2008-04-08	12
78	val_78	2008-04-08	11
78	val_78	2008-04-08	12
8	val_8	2008-04-08	11
8	val_8	2008-04-08	12
80	val_80	2008-04-08	11
80	val_80	2008-04-08	12
82	val_82	2008-04-08	11
82	val_82	2008-04-08	12
83	val_83	2008-04-08	11
83	val_83	2008-04-08	11
83	val_83	2008-04-08	12
83	val_83	2008-04-08	12
84	val_84	2008-04-08	11
84	val_84	2008-04-08	11
84	val_84	2008-04-08	12
84	val_84	2008-04-08	12
85	val_85	2008-04-08	11
85	val_85	2008-04-08	12
86	val_86	2008-04-08	11
86	val_86	2008-04-08	12
87	val_87	2008-04-08	11
87	val_87	2008-04-08	12
9	val_9	2008-04-08	11
9	val_9	2008-04-08	12
90	val_90	2008-04-08	11
90	val_90	2008-04-08	11
90	val_90	2008-04-08	11
90	val_90	2008-04-08	12
90	val_90	2008-04-08	12
90	val_90	2008-04-08	12
92	val_92	2008-04-08	11
92	val_92	2008-04-08	12
95	val_95	2008-04-08	11
95	val_95	2008-04-08	11
95	val_95	2008-04-08	12
95	val_95	2008-04-08	12
96	val_96	2008-04-08	11
96	val_96	2008-04-08	12
97	val_97	2008-04-08	11
97	val_97	2008-04-08	11
97	val_97	2008-04-08	12
97	val_97	2008-04-08	12
98	val_98	2008-04-08	11
98	val_98	2008-04-08	11
98	val_98	2008-04-08	12
98	val_98	2008-04-08	12
