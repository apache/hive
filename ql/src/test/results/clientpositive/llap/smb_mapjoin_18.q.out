PREHOOK: query: CREATE TABLE test_table1 (key INT, value STRING) PARTITIONED BY (ds STRING)
CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_table1
POSTHOOK: query: CREATE TABLE test_table1 (key INT, value STRING) PARTITIONED BY (ds STRING)
CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_table1
PREHOOK: query: CREATE TABLE test_table2 (key INT, value STRING) PARTITIONED BY (ds STRING)
CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_table2
POSTHOOK: query: CREATE TABLE test_table2 (key INT, value STRING) PARTITIONED BY (ds STRING)
CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_table2
PREHOOK: query: FROM src
INSERT OVERWRITE TABLE test_table1 PARTITION (ds = '1') SELECT *
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@test_table1@ds=1
POSTHOOK: query: FROM src
INSERT OVERWRITE TABLE test_table1 PARTITION (ds = '1') SELECT *
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@test_table1@ds=1
POSTHOOK: Lineage: test_table1 PARTITION(ds=1).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: test_table1 PARTITION(ds=1).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '1')
SELECT a.key, a.value FROM test_table1 a WHERE a.ds = '1'
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '1')
SELECT a.key, a.value FROM test_table1 a WHERE a.ds = '1'
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 500 Data size: 47500 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 47500 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 500 Data size: 47500 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                          name: default.test_table2
            Execution mode: vectorized, llap
            LLAP IO: no inputs

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds 1
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.test_table2

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key, value
          Column Types: int, string
          Table: default.test_table2

PREHOOK: query: INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '1')
SELECT a.key, a.value FROM test_table1 a WHERE a.ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
PREHOOK: Input: default@test_table1@ds=1
PREHOOK: Output: default@test_table2@ds=1
POSTHOOK: query: INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '1')
SELECT a.key, a.value FROM test_table1 a WHERE a.ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
POSTHOOK: Input: default@test_table1@ds=1
POSTHOOK: Output: default@test_table2@ds=1
POSTHOOK: Lineage: test_table2 PARTITION(ds=1).key SIMPLE [(test_table1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: test_table2 PARTITION(ds=1).value SIMPLE [(test_table1)a.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: select count(*) from test_table1 where ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table1 where ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
#### A masked pattern was here ####
500
PREHOOK: query: select count(*) from test_table1 where ds = '1' and hash(key) % 2 = 0
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
PREHOOK: Input: default@test_table1@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table1 where ds = '1' and hash(key) % 2 = 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
POSTHOOK: Input: default@test_table1@ds=1
#### A masked pattern was here ####
247
PREHOOK: query: select count(*) from test_table1 where ds = '1' and hash(key) % 2 = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
PREHOOK: Input: default@test_table1@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table1 where ds = '1' and hash(key) % 2 = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
POSTHOOK: Input: default@test_table1@ds=1
#### A masked pattern was here ####
253
PREHOOK: query: select count(*) from test_table1 tablesample (bucket 1 out of 2) s where ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
PREHOOK: Input: default@test_table1@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table1 tablesample (bucket 1 out of 2) s where ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
POSTHOOK: Input: default@test_table1@ds=1
#### A masked pattern was here ####
247
PREHOOK: query: select count(*) from test_table1 tablesample (bucket 2 out of 2) s where ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
PREHOOK: Input: default@test_table1@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table1 tablesample (bucket 2 out of 2) s where ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
POSTHOOK: Input: default@test_table1@ds=1
#### A masked pattern was here ####
253
PREHOOK: query: select count(*) from test_table2 where ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 where ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
#### A masked pattern was here ####
500
PREHOOK: query: select count(*) from test_table2 where ds = '1' and hash(key) % 2 = 0
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
PREHOOK: Input: default@test_table2@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 where ds = '1' and hash(key) % 2 = 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
POSTHOOK: Input: default@test_table2@ds=1
#### A masked pattern was here ####
247
PREHOOK: query: select count(*) from test_table2 where ds = '1' and hash(key) % 2 = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
PREHOOK: Input: default@test_table2@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 where ds = '1' and hash(key) % 2 = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
POSTHOOK: Input: default@test_table2@ds=1
#### A masked pattern was here ####
253
PREHOOK: query: select count(*) from test_table2 tablesample (bucket 1 out of 2) s where ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
PREHOOK: Input: default@test_table2@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 tablesample (bucket 1 out of 2) s where ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
POSTHOOK: Input: default@test_table2@ds=1
#### A masked pattern was here ####
247
PREHOOK: query: select count(*) from test_table2 tablesample (bucket 2 out of 2) s where ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
PREHOOK: Input: default@test_table2@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 tablesample (bucket 2 out of 2) s where ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
POSTHOOK: Input: default@test_table2@ds=1
#### A masked pattern was here ####
253
PREHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '2')
SELECT a.key, a.value FROM test_table1 a WHERE a.ds = '1' and a.key = 238
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '2')
SELECT a.key, a.value FROM test_table1 a WHERE a.ds = '1' and a.key = 238
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 500 Data size: 47500 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (key = 238) (type: boolean)
                    Statistics: Num rows: 2 Data size: 190 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: 238 (type: int), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 2 Data size: 190 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 2 Data size: 190 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 2 Data size: 190 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 2 Data size: 190 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.test_table2
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: string), '2' (type: string)
                  outputColumnNames: key, value, ds
                  Statistics: Num rows: 2 Data size: 360 Basic stats: COMPLETE Column stats: COMPLETE
                  Group By Operator
                    aggregations: compute_stats(key, 'hll'), compute_stats(value, 'hll')
                    keys: ds (type: string)
                    mode: hash
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 949 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Map-reduce partition columns: _col0 (type: string)
                      Statistics: Num rows: 1 Data size: 949 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col2 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: compute_stats(VALUE._col0), compute_stats(VALUE._col1)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 1 Data size: 965 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col1 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), _col2 (type: struct<columntype:string,maxlength:bigint,avglength:double,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), _col0 (type: string)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 1 Data size: 965 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 965 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds 2
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.test_table2

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key, value
          Column Types: int, string
          Table: default.test_table2

PREHOOK: query: INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '2')
SELECT a.key, a.value FROM test_table1 a WHERE a.ds = '1' and a.key = 238
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
PREHOOK: Input: default@test_table1@ds=1
PREHOOK: Output: default@test_table2@ds=2
POSTHOOK: query: INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '2')
SELECT a.key, a.value FROM test_table1 a WHERE a.ds = '1' and a.key = 238
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
POSTHOOK: Input: default@test_table1@ds=1
POSTHOOK: Output: default@test_table2@ds=2
POSTHOOK: Lineage: test_table2 PARTITION(ds=2).key SIMPLE []
POSTHOOK: Lineage: test_table2 PARTITION(ds=2).value SIMPLE [(test_table1)a.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: select count(*) from test_table2 where ds = '2'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 where ds = '2'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
#### A masked pattern was here ####
2
PREHOOK: query: select count(*) from test_table2 where ds = '2' and hash(key) % 2 = 0
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
PREHOOK: Input: default@test_table2@ds=2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 where ds = '2' and hash(key) % 2 = 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
POSTHOOK: Input: default@test_table2@ds=2
#### A masked pattern was here ####
2
PREHOOK: query: select count(*) from test_table2 where ds = '2' and hash(key) % 2 = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
PREHOOK: Input: default@test_table2@ds=2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 where ds = '2' and hash(key) % 2 = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
POSTHOOK: Input: default@test_table2@ds=2
#### A masked pattern was here ####
0
PREHOOK: query: select count(*) from test_table2 tablesample (bucket 1 out of 2) s where ds = '2'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
PREHOOK: Input: default@test_table2@ds=2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 tablesample (bucket 1 out of 2) s where ds = '2'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
POSTHOOK: Input: default@test_table2@ds=2
#### A masked pattern was here ####
2
PREHOOK: query: select count(*) from test_table2 tablesample (bucket 2 out of 2) s where ds = '2'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
PREHOOK: Input: default@test_table2@ds=2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 tablesample (bucket 2 out of 2) s where ds = '2'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
POSTHOOK: Input: default@test_table2@ds=2
#### A masked pattern was here ####
0
PREHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '3')
SELECT a.key, a.value FROM test_table2 a WHERE a.ds = '2'
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '3')
SELECT a.key, a.value FROM test_table2 a WHERE a.ds = '2'
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 2 Data size: 190 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 2 Data size: 190 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 2 Data size: 190 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                          name: default.test_table2
            Execution mode: vectorized, llap
            LLAP IO: no inputs

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds 3
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.test_table2

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key, value
          Column Types: int, string
          Table: default.test_table2

PREHOOK: query: INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '2')
SELECT a.key, a.value FROM test_table2 a WHERE a.ds = '2'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
PREHOOK: Input: default@test_table2@ds=2
PREHOOK: Output: default@test_table2@ds=2
POSTHOOK: query: INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '2')
SELECT a.key, a.value FROM test_table2 a WHERE a.ds = '2'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
POSTHOOK: Input: default@test_table2@ds=2
POSTHOOK: Output: default@test_table2@ds=2
POSTHOOK: Lineage: test_table2 PARTITION(ds=2).key SIMPLE [(test_table2)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: test_table2 PARTITION(ds=2).value SIMPLE [(test_table2)a.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: select count(*) from test_table2 where ds = '3'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 where ds = '3'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
#### A masked pattern was here ####
0
PREHOOK: query: select count(*) from test_table2 where ds = '3' and hash(key) % 2 = 0
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 where ds = '3' and hash(key) % 2 = 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
#### A masked pattern was here ####
0
PREHOOK: query: select count(*) from test_table2 where ds = '3' and hash(key) % 2 = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 where ds = '3' and hash(key) % 2 = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
#### A masked pattern was here ####
0
PREHOOK: query: select count(*) from test_table2 tablesample (bucket 1 out of 2) s where ds = '3'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 tablesample (bucket 1 out of 2) s where ds = '3'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
#### A masked pattern was here ####
0
PREHOOK: query: select count(*) from test_table2 tablesample (bucket 2 out of 2) s where ds = '3'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 tablesample (bucket 2 out of 2) s where ds = '3'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
#### A masked pattern was here ####
0
