PREHOOK: query: CREATE TABLE dest1_n103(`location` INT, `type` STRING) PARTITIONED BY(`table` STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@dest1_n103
POSTHOOK: query: CREATE TABLE dest1_n103(`location` INT, `type` STRING) PARTITIONED BY(`table` STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@dest1_n103
PREHOOK: query: EXPLAIN
FROM src
INSERT OVERWRITE TABLE dest1_n103 PARTITION(`table`='2008-04-08') SELECT src.key as `partition`, src.value as `from` WHERE src.key >= 200 and src.key < 300
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n103@table=2008-04-08
POSTHOOK: query: EXPLAIN
FROM src
INSERT OVERWRITE TABLE dest1_n103 PARTITION(`table`='2008-04-08') SELECT src.key as `partition`, src.value as `from` WHERE src.key >= 200 and src.key < 300
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n103@table=2008-04-08
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  filterExpr: ((UDFToDouble(key) >= 200.0D) and (UDFToDouble(key) < 300.0D)) (type: boolean)
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((UDFToDouble(key) >= 200.0D) and (UDFToDouble(key) < 300.0D)) (type: boolean)
                    Statistics: Num rows: 55 Data size: 9790 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: UDFToInteger(key) (type: int), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 55 Data size: 5225 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 55 Data size: 5225 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.TextInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                            name: default.dest1_n103
                      Select Operator
                        expressions: _col0 (type: int), _col1 (type: string), '2008-04-08' (type: string)
                        outputColumnNames: location, type, table
                        Statistics: Num rows: 55 Data size: 10395 Basic stats: COMPLETE Column stats: COMPLETE
                        Group By Operator
                          aggregations: min(location), max(location), count(1), count(location), compute_bit_vector_hll(location), max(length(type)), avg(COALESCE(length(type),0)), count(type), compute_bit_vector_hll(type)
                          keys: table (type: string)
                          minReductionHashAggr: 0.9818182
                          mode: hash
                          outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                          Statistics: Num rows: 1 Data size: 494 Basic stats: COMPLETE Column stats: COMPLETE
                          Reduce Output Operator
                            key expressions: _col0 (type: string)
                            null sort order: z
                            sort order: +
                            Map-reduce partition columns: _col0 (type: string)
                            Statistics: Num rows: 1 Data size: 494 Basic stats: COMPLETE Column stats: COMPLETE
                            value expressions: _col1 (type: int), _col2 (type: int), _col3 (type: bigint), _col4 (type: bigint), _col5 (type: binary), _col6 (type: int), _col7 (type: struct<count:bigint,sum:double,input:int>), _col8 (type: bigint), _col9 (type: binary)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: min(VALUE._col0), max(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector_hll(VALUE._col4), max(VALUE._col5), avg(VALUE._col6), count(VALUE._col7), compute_bit_vector_hll(VALUE._col8)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                Statistics: Num rows: 1 Data size: 426 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: 'LONG' (type: string), UDFToLong(_col1) (type: bigint), UDFToLong(_col2) (type: bigint), (_col3 - _col4) (type: bigint), COALESCE(ndv_compute_bit_vector(_col5),0) (type: bigint), _col5 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col6,0)) (type: bigint), COALESCE(_col7,0) (type: double), (_col3 - _col8) (type: bigint), COALESCE(ndv_compute_bit_vector(_col9),0) (type: bigint), _col9 (type: binary), _col0 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                  Statistics: Num rows: 1 Data size: 624 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 624 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            table 2008-04-08
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.dest1_n103

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: location, type
          Column Types: int, string
          Table: default.dest1_n103

PREHOOK: query: EXPLAIN
SELECT `int`.`location`, `int`.`type`, `int`.`table` FROM dest1_n103 `int` WHERE `int`.`table` = '2008-04-08'
PREHOOK: type: QUERY
PREHOOK: Input: default@dest1_n103
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT `int`.`location`, `int`.`type`, `int`.`table` FROM dest1_n103 `int` WHERE `int`.`table` = '2008-04-08'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest1_n103
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: int
          filterExpr: (table = '2008-04-08') (type: boolean)
          Filter Operator
            predicate: (table = '2008-04-08') (type: boolean)
            Select Operator
              expressions: location (type: int), type (type: string), '2008-04-08' (type: string)
              outputColumnNames: _col0, _col1, _col2
              ListSink

PREHOOK: query: FROM src
INSERT OVERWRITE TABLE dest1_n103 PARTITION(`table`='2008-04-08') SELECT src.key as `partition`, src.value as `from` WHERE src.key >= 200 and src.key < 300
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n103@table=2008-04-08
POSTHOOK: query: FROM src
INSERT OVERWRITE TABLE dest1_n103 PARTITION(`table`='2008-04-08') SELECT src.key as `partition`, src.value as `from` WHERE src.key >= 200 and src.key < 300
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n103@table=2008-04-08
POSTHOOK: Lineage: dest1_n103 PARTITION(table=2008-04-08).location EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest1_n103 PARTITION(table=2008-04-08).type SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: SELECT `int`.`location`, `int`.`type`, `int`.`table` FROM dest1_n103 `int` WHERE `int`.`table` = '2008-04-08'
PREHOOK: type: QUERY
PREHOOK: Input: default@dest1_n103
PREHOOK: Input: default@dest1_n103@table=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: SELECT `int`.`location`, `int`.`type`, `int`.`table` FROM dest1_n103 `int` WHERE `int`.`table` = '2008-04-08'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest1_n103
POSTHOOK: Input: default@dest1_n103@table=2008-04-08
#### A masked pattern was here ####
238	val_238	2008-04-08
255	val_255	2008-04-08
278	val_278	2008-04-08
265	val_265	2008-04-08
273	val_273	2008-04-08
224	val_224	2008-04-08
213	val_213	2008-04-08
281	val_281	2008-04-08
277	val_277	2008-04-08
209	val_209	2008-04-08
252	val_252	2008-04-08
292	val_292	2008-04-08
219	val_219	2008-04-08
287	val_287	2008-04-08
237	val_237	2008-04-08
207	val_207	2008-04-08
208	val_208	2008-04-08
247	val_247	2008-04-08
266	val_266	2008-04-08
203	val_203	2008-04-08
205	val_205	2008-04-08
221	val_221	2008-04-08
280	val_280	2008-04-08
277	val_277	2008-04-08
208	val_208	2008-04-08
286	val_286	2008-04-08
239	val_239	2008-04-08
213	val_213	2008-04-08
216	val_216	2008-04-08
278	val_278	2008-04-08
289	val_289	2008-04-08
221	val_221	2008-04-08
275	val_275	2008-04-08
241	val_241	2008-04-08
284	val_284	2008-04-08
230	val_230	2008-04-08
260	val_260	2008-04-08
272	val_272	2008-04-08
217	val_217	2008-04-08
230	val_230	2008-04-08
208	val_208	2008-04-08
298	val_298	2008-04-08
230	val_230	2008-04-08
205	val_205	2008-04-08
288	val_288	2008-04-08
282	val_282	2008-04-08
282	val_282	2008-04-08
238	val_238	2008-04-08
277	val_277	2008-04-08
273	val_273	2008-04-08
224	val_224	2008-04-08
242	val_242	2008-04-08
272	val_272	2008-04-08
242	val_242	2008-04-08
226	val_226	2008-04-08
229	val_229	2008-04-08
233	val_233	2008-04-08
223	val_223	2008-04-08
218	val_218	2008-04-08
228	val_228	2008-04-08
209	val_209	2008-04-08
230	val_230	2008-04-08
296	val_296	2008-04-08
216	val_216	2008-04-08
274	val_274	2008-04-08
219	val_219	2008-04-08
239	val_239	2008-04-08
223	val_223	2008-04-08
256	val_256	2008-04-08
263	val_263	2008-04-08
288	val_288	2008-04-08
244	val_244	2008-04-08
202	val_202	2008-04-08
229	val_229	2008-04-08
280	val_280	2008-04-08
283	val_283	2008-04-08
235	val_235	2008-04-08
257	val_257	2008-04-08
258	val_258	2008-04-08
203	val_203	2008-04-08
262	val_262	2008-04-08
201	val_201	2008-04-08
217	val_217	2008-04-08
298	val_298	2008-04-08
291	val_291	2008-04-08
255	val_255	2008-04-08
200	val_200	2008-04-08
237	val_237	2008-04-08
248	val_248	2008-04-08
277	val_277	2008-04-08
230	val_230	2008-04-08
207	val_207	2008-04-08
249	val_249	2008-04-08
265	val_265	2008-04-08
214	val_214	2008-04-08
233	val_233	2008-04-08
256	val_256	2008-04-08
298	val_298	2008-04-08
285	val_285	2008-04-08
273	val_273	2008-04-08
281	val_281	2008-04-08
222	val_222	2008-04-08
200	val_200	2008-04-08
