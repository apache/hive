PREHOOK: query: with tempDataset as (
select 10 as account_id, cast(23.79 as double) interest_paid
union all select 10, 23.79
union all select 10, 23.79
union all select 11, 64.34
union all select 11, 64.34
union all select 11, 64.34
)
select account_id, STDDEV(interest_paid) as sdev, variance(interest_paid) as vari from tempDataset group by account_id
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: with tempDataset as (
select 10 as account_id, cast(23.79 as double) interest_paid
union all select 10, 23.79
union all select 10, 23.79
union all select 11, 64.34
union all select 11, 64.34
union all select 11, 64.34
)
select account_id, STDDEV(interest_paid) as sdev, variance(interest_paid) as vari from tempDataset group by account_id
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
10	0.0	0.0
11	0.0	0.0
PREHOOK: query: create table cbo_test (key string, v1 double, v2 float, v3 decimal(30,2), v4 bigint)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@cbo_test
POSTHOOK: query: create table cbo_test (key string, v1 double, v2 float, v3 decimal(30,2), v4 bigint)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@cbo_test
PREHOOK: query: insert into cbo_test values
  ("001400000000000000000006375905", 10230.72, 10230.72, 10230.69, 10230),
  ("001400000000000000000006375905", 10230.72, 10230.72, 10230.69, 10230),
  ("001400000000000000000006375905", 10230.72, 10230.72, 10230.69, 10230),
  ("001400000000000000000006375905", 10230.72, 10230.72, 10230.69, 10230),
  ("001400000000000000000006375905", 10230.72, 10230.72, 10230.69, 10230),
  ("001400000000000000000006375905", 10230.72, 10230.72, 10230.69, 10230)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@cbo_test
POSTHOOK: query: insert into cbo_test values
  ("001400000000000000000006375905", 10230.72, 10230.72, 10230.69, 10230),
  ("001400000000000000000006375905", 10230.72, 10230.72, 10230.69, 10230),
  ("001400000000000000000006375905", 10230.72, 10230.72, 10230.69, 10230),
  ("001400000000000000000006375905", 10230.72, 10230.72, 10230.69, 10230),
  ("001400000000000000000006375905", 10230.72, 10230.72, 10230.69, 10230),
  ("001400000000000000000006375905", 10230.72, 10230.72, 10230.69, 10230)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@cbo_test
POSTHOOK: Lineage: cbo_test.key SCRIPT []
POSTHOOK: Lineage: cbo_test.v1 SCRIPT []
POSTHOOK: Lineage: cbo_test.v2 SCRIPT []
POSTHOOK: Lineage: cbo_test.v3 SCRIPT []
POSTHOOK: Lineage: cbo_test.v4 SCRIPT []
PREHOOK: query: explain select stddev(v1), stddev(v2), stddev(v3), stddev(v4) from cbo_test
PREHOOK: type: QUERY
PREHOOK: Input: default@cbo_test
#### A masked pattern was here ####
POSTHOOK: query: explain select stddev(v1), stddev(v2), stddev(v3), stddev(v4) from cbo_test
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cbo_test
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: cbo_test
                  Statistics: Num rows: 6 Data size: 792 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: v1 (type: double), (v1 * v1) (type: double), UDFToDouble(v2) (type: double), (UDFToDouble(v2) * UDFToDouble(v2)) (type: double), UDFToDouble(v3) (type: double), (UDFToDouble(v3) * UDFToDouble(v3)) (type: double), UDFToDouble(v4) (type: double), (UDFToDouble(v4) * UDFToDouble(v4)) (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                    Statistics: Num rows: 6 Data size: 792 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: sum(_col1), sum(_col0), count(_col0), sum(_col3), sum(_col2), count(_col2), sum(_col5), sum(_col4), count(_col4), sum(_col7), sum(_col6), count(_col6)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11
                      Statistics: Num rows: 1 Data size: 228 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 228 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: double), _col1 (type: double), _col2 (type: bigint), _col3 (type: double), _col4 (type: double), _col5 (type: bigint), _col6 (type: double), _col7 (type: double), _col8 (type: bigint), _col9 (type: double), _col10 (type: double), _col11 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), sum(VALUE._col1), count(VALUE._col2), sum(VALUE._col3), sum(VALUE._col4), count(VALUE._col5), sum(VALUE._col6), sum(VALUE._col7), count(VALUE._col8), sum(VALUE._col9), sum(VALUE._col10), count(VALUE._col11)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11
                Statistics: Num rows: 1 Data size: 228 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: power((greatest(0,(_col0 - ((_col1 * _col1) / _col2))) / _col2), 0.5) (type: double), power(((_col3 - ((_col4 * _col4) / _col5)) / _col5), 0.5) (type: double), power((greatest(0,(_col6 - ((_col7 * _col7) / _col8))) / _col8), 0.5) (type: double), power(((_col9 - ((_col10 * _col10) / _col11)) / _col11), 0.5) (type: double)
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 1 Data size: 228 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 228 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select stddev(v1), stddev(v2), stddev(v3), stddev(v4) from cbo_test
PREHOOK: type: QUERY
PREHOOK: Input: default@cbo_test
#### A masked pattern was here ####
POSTHOOK: query: select stddev(v1), stddev(v2), stddev(v3), stddev(v4) from cbo_test
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cbo_test
#### A masked pattern was here ####
0.0	0.0	0.0	0.0
PREHOOK: query: explain select stddev(v1), stddev(v2), stddev(v3), stddev(v4) from cbo_test
PREHOOK: type: QUERY
PREHOOK: Input: default@cbo_test
#### A masked pattern was here ####
POSTHOOK: query: explain select stddev(v1), stddev(v2), stddev(v3), stddev(v4) from cbo_test
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cbo_test
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: cbo_test
                  Statistics: Num rows: 6 Data size: 792 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: v1 (type: double), v2 (type: float), v3 (type: decimal(30,2)), v4 (type: bigint)
                    outputColumnNames: v1, v2, v3, v4
                    Statistics: Num rows: 6 Data size: 792 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: stddev(v1), stddev(v2), stddev(v3), stddev(v4)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 1 Data size: 452 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 452 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: struct<count:bigint,sum:double,variance:double>), _col1 (type: struct<count:bigint,sum:double,variance:double>), _col2 (type: struct<count:bigint,sum:double,variance:double>), _col3 (type: struct<count:bigint,sum:double,variance:double>)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: stddev(VALUE._col0), stddev(VALUE._col1), stddev(VALUE._col2), stddev(VALUE._col3)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 1 Data size: 452 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 452 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select stddev(v1), stddev(v2), stddev(v3), stddev(v4) from cbo_test
PREHOOK: type: QUERY
PREHOOK: Input: default@cbo_test
#### A masked pattern was here ####
POSTHOOK: query: select stddev(v1), stddev(v2), stddev(v3), stddev(v4) from cbo_test
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cbo_test
#### A masked pattern was here ####
5.42317860890711E-13	0.0	5.42317860890711E-13	0.0
