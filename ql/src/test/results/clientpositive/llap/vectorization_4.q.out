PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT SUM(cint),
       (SUM(cint) * -563),
       (-3728 + SUM(cint)),
       STDDEV_POP(cdouble),
       (-(STDDEV_POP(cdouble))),
       AVG(cdouble),
       ((SUM(cint) * -563) % SUM(cint)),
       (((SUM(cint) * -563) % SUM(cint)) / AVG(cdouble)),
       VAR_POP(cdouble),
       (-((((SUM(cint) * -563) % SUM(cint)) / AVG(cdouble)))),
       ((-3728 + SUM(cint)) - (SUM(cint) * -563)),
       MIN(ctinyint),
       MIN(ctinyint),
       (MIN(ctinyint) * (-((((SUM(cint) * -563) % SUM(cint)) / AVG(cdouble)))))
FROM   alltypesorc
WHERE  (((csmallint >= cint)
         OR ((-89010 >= ctinyint)
             AND (cdouble > 79.553)))
        OR ((-563 != cbigint)
            AND ((ctinyint != cbigint)
                 OR (-3728 >= cdouble))))
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT SUM(cint),
       (SUM(cint) * -563),
       (-3728 + SUM(cint)),
       STDDEV_POP(cdouble),
       (-(STDDEV_POP(cdouble))),
       AVG(cdouble),
       ((SUM(cint) * -563) % SUM(cint)),
       (((SUM(cint) * -563) % SUM(cint)) / AVG(cdouble)),
       VAR_POP(cdouble),
       (-((((SUM(cint) * -563) % SUM(cint)) / AVG(cdouble)))),
       ((-3728 + SUM(cint)) - (SUM(cint) * -563)),
       MIN(ctinyint),
       MIN(ctinyint),
       (MIN(ctinyint) * (-((((SUM(cint) * -563) % SUM(cint)) / AVG(cdouble)))))
FROM   alltypesorc
WHERE  (((csmallint >= cint)
         OR ((-89010 >= ctinyint)
             AND (cdouble > 79.553)))
        OR ((-563 != cbigint)
            AND ((ctinyint != cbigint)
                 OR (-3728 >= cdouble))))
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  Statistics: Num rows: 12288 Data size: 256884 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      projectedOutputColumns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprOrExpr(children: FilterLongColGreaterEqualLongColumn(col 1, col 2)(children: col 1) -> boolean, FilterExprAndExpr(children: FilterLongScalarGreaterEqualLongColumn(val -89010, col 0)(children: col 0) -> boolean, FilterDoubleColGreaterDoubleScalar(col 5, val 79.553) -> boolean) -> boolean, FilterExprAndExpr(children: FilterLongScalarNotEqualLongColumn(val -563, col 3) -> boolean, FilterExprOrExpr(children: FilterLongColNotEqualLongColumn(col 0, col 3)(children: col 0) -> boolean, FilterDoubleScalarGreaterEqualDoubleColumn(val -3728.0, col 5) -> boolean) -> boolean) -> boolean) -> boolean
                    predicate: ((UDFToInteger(csmallint) >= cint) or ((-89010 >= UDFToInteger(ctinyint)) and (cdouble > 79.553)) or ((-563 <> cbigint) and ((UDFToLong(ctinyint) <> cbigint) or (-3728.0 >= cdouble)))) (type: boolean)
                    Statistics: Num rows: 12288 Data size: 256884 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: ctinyint (type: tinyint), cint (type: int), cdouble (type: double)
                      outputColumnNames: ctinyint, cint, cdouble
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumns: [0, 2, 5]
                      Statistics: Num rows: 12288 Data size: 256884 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: sum(cint), stddev_pop(cdouble), avg(cdouble), var_pop(cdouble), min(ctinyint)
                        Group By Vectorization:
                            aggregators: VectorUDAFSumLong(col 2) -> bigint, VectorUDAFStdPopDouble(col 5) -> struct<count:bigint,sum:double,variance:double>, VectorUDAFAvgDouble(col 5) -> struct<count:bigint,sum:double,input:double>, VectorUDAFVarPopDouble(col 5) -> struct<count:bigint,sum:double,variance:double>, VectorUDAFMinLong(col 0) -> tinyint
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            vectorOutput: true
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumns: [0, 1, 2, 3, 4]
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4
                        Statistics: Num rows: 1 Data size: 252 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          sort order: 
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkEmptyKeyOperator
                              keyColumns: []
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                              valueColumns: [0, 1, 2, 3, 4]
                          Statistics: Num rows: 1 Data size: 252 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: bigint), _col1 (type: struct<count:bigint,sum:double,variance:double>), _col2 (type: struct<count:bigint,sum:double,input:double>), _col3 (type: struct<count:bigint,sum:double,variance:double>), _col4 (type: tinyint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                groupByVectorOutput: true
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 12
                    includeColumns: [0, 1, 2, 3, 5]
                    dataColumns: ctinyint:tinyint, csmallint:smallint, cint:int, cbigint:bigint, cfloat:float, cdouble:double, cstring1:string, cstring2:string, ctimestamp1:timestamp, ctimestamp2:timestamp, cboolean1:boolean, cboolean2:boolean
                    partitionColumnCount: 0
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: 
                reduceColumnSortOrder: 
                groupByVectorOutput: true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 5
                    dataColumns: VALUE._col0:bigint, VALUE._col1:struct<count:bigint,sum:double,variance:double>, VALUE._col2:struct<count:bigint,sum:double,input:double>, VALUE._col3:struct<count:bigint,sum:double,variance:double>, VALUE._col4:tinyint
                    partitionColumnCount: 0
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), stddev_pop(VALUE._col1), avg(VALUE._col2), var_pop(VALUE._col3), min(VALUE._col4)
                Group By Vectorization:
                    aggregators: VectorUDAFSumLong(col 0) -> bigint, VectorUDAFStdPopFinal(col 1) -> double, VectorUDAFAvgFinal(col 2) -> double, VectorUDAFVarPopFinal(col 3) -> double, VectorUDAFMinLong(col 4) -> tinyint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    vectorOutput: true
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumns: [0, 1, 2, 3, 4]
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 1 Data size: 36 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: bigint), (_col0 * -563) (type: bigint), (-3728 + _col0) (type: bigint), _col1 (type: double), (- _col1) (type: double), _col2 (type: double), ((_col0 * -563) % _col0) (type: bigint), (UDFToDouble(((_col0 * -563) % _col0)) / _col2) (type: double), _col3 (type: double), (- (UDFToDouble(((_col0 * -563) % _col0)) / _col2)) (type: double), ((-3728 + _col0) - (_col0 * -563)) (type: bigint), _col4 (type: tinyint), _col4 (type: tinyint), (UDFToDouble(_col4) * (- (UDFToDouble(((_col0 * -563) % _col0)) / _col2))) (type: double)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumns: [0, 5, 6, 1, 7, 2, 9, 12, 3, 11, 14, 4, 4, 16]
                      selectExpressions: LongColMultiplyLongScalar(col 0, val -563) -> 5:long, LongScalarAddLongColumn(val -3728, col 0) -> 6:long, DoubleColUnaryMinus(col 1) -> 7:double, LongColModuloLongColumn(col 8, col 0)(children: LongColMultiplyLongScalar(col 0, val -563) -> 8:long) -> 9:long, DoubleColDivideDoubleColumn(col 11, col 2)(children: CastLongToDouble(col 10)(children: LongColModuloLongColumn(col 8, col 0)(children: LongColMultiplyLongScalar(col 0, val -563) -> 8:long) -> 10:long) -> 11:double) -> 12:double, DoubleColUnaryMinus(col 13)(children: DoubleColDivideDoubleColumn(col 11, col 2)(children: CastLongToDouble(col 10)(children: LongColModuloLongColumn(col 8, col 0)(children: LongColMultiplyLongScalar(col 0, val -563) -> 8:long) -> 10:long) -> 11:double) -> 13:double) -> 11:double, LongColSubtractLongColumn(col 8, col 10)(children: LongScalarAddLongColumn(val -3728, col 0) -> 8:long, LongColMultiplyLongScalar(col 0, val -563) -> 10:long) -> 14:long, DoubleColMultiplyDoubleColumn(col 13, col 15)(children: CastLongToDouble(col 4) -> 13:double, DoubleColUnaryMinus(col 16)(children: DoubleColDivideDoubleColumn(col 15, col 2)(children: CastLongToDouble(col 10)(children: LongColModuloLongColumn(col 8, col 0)(children: LongColMultiplyLongScalar(col 0, val -563) -> 8:long) -> 10:long) -> 15:double) -> 16:double) -> 15:double) -> 16:double
                  Statistics: Num rows: 1 Data size: 104 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 1 Data size: 104 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT SUM(cint),
       (SUM(cint) * -563),
       (-3728 + SUM(cint)),
       STDDEV_POP(cdouble),
       (-(STDDEV_POP(cdouble))),
       AVG(cdouble),
       ((SUM(cint) * -563) % SUM(cint)),
       (((SUM(cint) * -563) % SUM(cint)) / AVG(cdouble)),
       VAR_POP(cdouble),
       (-((((SUM(cint) * -563) % SUM(cint)) / AVG(cdouble)))),
       ((-3728 + SUM(cint)) - (SUM(cint) * -563)),
       MIN(ctinyint),
       MIN(ctinyint),
       (MIN(ctinyint) * (-((((SUM(cint) * -563) % SUM(cint)) / AVG(cdouble)))))
FROM   alltypesorc
WHERE  (((csmallint >= cint)
         OR ((-89010 >= ctinyint)
             AND (cdouble > 79.553)))
        OR ((-563 != cbigint)
            AND ((ctinyint != cbigint)
                 OR (-3728 >= cdouble))))
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: SELECT SUM(cint),
       (SUM(cint) * -563),
       (-3728 + SUM(cint)),
       STDDEV_POP(cdouble),
       (-(STDDEV_POP(cdouble))),
       AVG(cdouble),
       ((SUM(cint) * -563) % SUM(cint)),
       (((SUM(cint) * -563) % SUM(cint)) / AVG(cdouble)),
       VAR_POP(cdouble),
       (-((((SUM(cint) * -563) % SUM(cint)) / AVG(cdouble)))),
       ((-3728 + SUM(cint)) - (SUM(cint) * -563)),
       MIN(ctinyint),
       MIN(ctinyint),
       (MIN(ctinyint) * (-((((SUM(cint) * -563) % SUM(cint)) / AVG(cdouble)))))
FROM   alltypesorc
WHERE  (((csmallint >= cint)
         OR ((-89010 >= ctinyint)
             AND (cdouble > 79.553)))
        OR ((-563 != cbigint)
            AND ((ctinyint != cbigint)
                 OR (-3728 >= cdouble))))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
-493101012745	277615870175435	-493101016473	136727.7868296355	-136727.7868296355	2298.5515807767374	0	0.0	1.8694487691330246E10	-0.0	-278108971191908	-64	-64	0.0
