PREHOOK: query: drop table if exists admirals
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists admirals
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists ship_types
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists ship_types
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists ships
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists ships
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists torpedos
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists torpedos
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table ships (id integer,ship_type_id integer,crew_size integer)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@ships
POSTHOOK: query: create table ships (id integer,ship_type_id integer,crew_size integer)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@ships
PREHOOK: query: create table ship_types (id integer,type_name string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@ship_types
POSTHOOK: query: create table ship_types (id integer,type_name string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@ship_types
PREHOOK: query: insert into ship_types values
    (1,'galaxy class'),
    (2,'nebula class'),
    (3,'orion class'),
    (4,'first class'),
    (5,'last pass'),
    (6,'last pass'),
    (7,'akira class'),
    (8,'aeon type'),
    (9,'antares type'),
    (10,'apollo class')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@ship_types
POSTHOOK: query: insert into ship_types values
    (1,'galaxy class'),
    (2,'nebula class'),
    (3,'orion class'),
    (4,'first class'),
    (5,'last pass'),
    (6,'last pass'),
    (7,'akira class'),
    (8,'aeon type'),
    (9,'antares type'),
    (10,'apollo class')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@ship_types
POSTHOOK: Lineage: ship_types.id SCRIPT []
POSTHOOK: Lineage: ship_types.type_name SCRIPT []
PREHOOK: query: create table admirals as
    select id from ship_types
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@ship_types
PREHOOK: Output: database:default
PREHOOK: Output: default@admirals
POSTHOOK: query: create table admirals as
    select id from ship_types
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@ship_types
POSTHOOK: Output: database:default
POSTHOOK: Output: default@admirals
POSTHOOK: Lineage: admirals.id SIMPLE [(ship_types)ship_types.FieldSchema(name:id, type:int, comment:null), ]
PREHOOK: query: create table torpedos (id integer,ship_id integer,admiral_id integer)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@torpedos
POSTHOOK: query: create table torpedos (id integer,ship_id integer,admiral_id integer)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@torpedos
Warning: Shuffle Join MERGEJOIN[24][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: insert into ships
select row_number() over (),t.id,row_number() over (partition by t.id) from ship_types t join ship_types t2
PREHOOK: type: QUERY
PREHOOK: Input: default@ship_types
PREHOOK: Output: default@ships
POSTHOOK: query: insert into ships
select row_number() over (),t.id,row_number() over (partition by t.id) from ship_types t join ship_types t2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ship_types
POSTHOOK: Output: default@ships
POSTHOOK: Lineage: ships.crew_size SCRIPT [(ship_types)t.FieldSchema(name:id, type:int, comment:null), ]
POSTHOOK: Lineage: ships.id SCRIPT [(ship_types)t.FieldSchema(name:id, type:int, comment:null), ]
POSTHOOK: Lineage: ships.ship_type_id SIMPLE [(ship_types)t.FieldSchema(name:id, type:int, comment:null), ]
Warning: Shuffle Join MERGEJOIN[24][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: insert into torpedos
select row_number() over (),s.id,row_number() over (partition by s.id) from ships s join ship_types t2
PREHOOK: type: QUERY
PREHOOK: Input: default@ship_types
PREHOOK: Input: default@ships
PREHOOK: Output: default@torpedos
POSTHOOK: query: insert into torpedos
select row_number() over (),s.id,row_number() over (partition by s.id) from ships s join ship_types t2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ship_types
POSTHOOK: Input: default@ships
POSTHOOK: Output: default@torpedos
POSTHOOK: Lineage: torpedos.admiral_id SCRIPT [(ships)s.FieldSchema(name:id, type:int, comment:null), ]
POSTHOOK: Lineage: torpedos.id SCRIPT [(ships)s.FieldSchema(name:id, type:int, comment:null), ]
POSTHOOK: Lineage: torpedos.ship_id SIMPLE [(ships)s.FieldSchema(name:id, type:int, comment:null), ]
PREHOOK: query: select
    s.id
from
    ships s,
    ship_types st,
    torpedos t
where
    st.type_name='galaxy class' 
    and s.crew_size=2
    and ship_type_id=st.id
    and ship_id=s.id
PREHOOK: type: QUERY
PREHOOK: Input: default@ship_types
PREHOOK: Input: default@ships
PREHOOK: Input: default@torpedos
#### A masked pattern was here ####
POSTHOOK: query: select
    s.id
from
    ships s,
    ship_types st,
    torpedos t
where
    st.type_name='galaxy class' 
    and s.crew_size=2
    and ship_type_id=st.id
    and ship_id=s.id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ship_types
POSTHOOK: Input: default@ships
POSTHOOK: Input: default@torpedos
#### A masked pattern was here ####
PREHOOK: query: explain analyze
select
    s.id
from
    ships s,
    ship_types st,
    torpedos t
where
    st.type_name='galaxy class' 
    and s.crew_size=2
    and ship_type_id=st.id
    and ship_id=s.id
PREHOOK: type: QUERY
PREHOOK: Input: default@ship_types
PREHOOK: Input: default@ships
PREHOOK: Input: default@torpedos
#### A masked pattern was here ####
POSTHOOK: query: explain analyze
select
    s.id
from
    ships s,
    ship_types st,
    torpedos t
where
    st.type_name='galaxy class' 
    and s.crew_size=2
    and ship_type_id=st.id
    and ship_id=s.id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ship_types
POSTHOOK: Input: default@ships
POSTHOOK: Input: default@torpedos
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
Reducer 3 <- Map 5 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3 llap
      File Output Operator [FS_16]
        Merge Join Operator [MERGEJOIN_46] (rows=101/10 width=4)
          Conds:RS_12._col0=RS_55._col0(Inner),Output:["_col0"]
        <-Map 5 [SIMPLE_EDGE] vectorized, llap
          SHUFFLE [RS_55]
            PartitionCols:_col0
            Select Operator [SEL_54] (rows=1000/1000 width=4)
              Output:["_col0"]
              Filter Operator [FIL_53] (rows=1000/1000 width=4)
                predicate:ship_id is not null
                TableScan [TS_6] (rows=1000/1000 width=4)
                  default@torpedos,t,Tbl:COMPLETE,Col:COMPLETE,Output:["ship_id"]
        <-Reducer 2 [SIMPLE_EDGE] llap
          SHUFFLE [RS_12]
            PartitionCols:_col0
            Merge Join Operator [MERGEJOIN_45] (rows=2/1 width=4)
              Conds:RS_49._col1=RS_52._col0(Inner),Output:["_col0"]
            <-Map 1 [SIMPLE_EDGE] vectorized, llap
              SHUFFLE [RS_49]
                PartitionCols:_col1
                Select Operator [SEL_48] (rows=10/10 width=8)
                  Output:["_col0","_col1"]
                  Filter Operator [FIL_47] (rows=10/10 width=12)
                    predicate:((crew_size = 2) and ship_type_id is not null and id is not null)
                    TableScan [TS_0] (rows=100/100 width=12)
                      default@ships,s,Tbl:COMPLETE,Col:COMPLETE,Output:["id","ship_type_id","crew_size"]
            <-Map 4 [SIMPLE_EDGE] vectorized, llap
              SHUFFLE [RS_52]
                PartitionCols:_col0
                Select Operator [SEL_51] (rows=1/1 width=4)
                  Output:["_col0"]
                  Filter Operator [FIL_50] (rows=1/1 width=99)
                    predicate:((type_name = 'galaxy class') and id is not null)
                    TableScan [TS_3] (rows=10/10 width=99)
                      default@ship_types,st,Tbl:COMPLETE,Col:COMPLETE,Output:["id","type_name"]

PREHOOK: query: select
    s.id
from
    ships s,
    ship_types st
where
    st.type_name='galaxy class' 
    and s.crew_size=2
    and ship_type_id=st.id
PREHOOK: type: QUERY
PREHOOK: Input: default@ship_types
PREHOOK: Input: default@ships
#### A masked pattern was here ####
POSTHOOK: query: select
    s.id
from
    ships s,
    ship_types st
where
    st.type_name='galaxy class' 
    and s.crew_size=2
    and ship_type_id=st.id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ship_types
POSTHOOK: Input: default@ships
#### A masked pattern was here ####
PREHOOK: query: explain analyze
select
    s.id
from
    ships s,
    ship_types st
where
    st.type_name='galaxy class' 
    and s.crew_size=2
    and ship_type_id=st.id
PREHOOK: type: QUERY
PREHOOK: Input: default@ship_types
PREHOOK: Input: default@ships
#### A masked pattern was here ####
POSTHOOK: query: explain analyze
select
    s.id
from
    ships s,
    ship_types st
where
    st.type_name='galaxy class' 
    and s.crew_size=2
    and ship_type_id=st.id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ship_types
POSTHOOK: Input: default@ships
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 2 llap
      File Output Operator [FS_10]
        Merge Join Operator [MERGEJOIN_25] (rows=2/1 width=4)
          Conds:RS_28._col1=RS_31._col0(Inner),Output:["_col0"]
        <-Map 1 [SIMPLE_EDGE] vectorized, llap
          SHUFFLE [RS_28]
            PartitionCols:_col1
            Select Operator [SEL_27] (rows=10/10 width=8)
              Output:["_col0","_col1"]
              Filter Operator [FIL_26] (rows=10/10 width=12)
                predicate:((crew_size = 2) and ship_type_id is not null)
                TableScan [TS_0] (rows=100/100 width=12)
                  default@ships,s,Tbl:COMPLETE,Col:COMPLETE,Output:["id","ship_type_id","crew_size"]
        <-Map 3 [SIMPLE_EDGE] vectorized, llap
          SHUFFLE [RS_31]
            PartitionCols:_col0
            Select Operator [SEL_30] (rows=1/1 width=4)
              Output:["_col0"]
              Filter Operator [FIL_29] (rows=1/1 width=99)
                predicate:((type_name = 'galaxy class') and id is not null)
                TableScan [TS_3] (rows=10/10 width=99)
                  default@ship_types,st,Tbl:COMPLETE,Col:COMPLETE,Output:["id","type_name"]

