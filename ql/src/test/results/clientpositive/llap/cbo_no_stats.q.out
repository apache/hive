PREHOOK: query: create table foo (x int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@foo
POSTHOOK: query: create table foo (x int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@foo
PREHOOK: query: insert into foo values(1),(2),(3),(4),(5)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@foo
POSTHOOK: query: insert into foo values(1),(2),(3),(4),(5)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@foo
POSTHOOK: Lineage: foo.x SCRIPT []
PREHOOK: query: create table foo2 (y int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@foo2
POSTHOOK: query: create table foo2 (y int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@foo2
PREHOOK: query: insert into foo2 values(1), (2)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@foo2
POSTHOOK: query: insert into foo2 values(1), (2)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@foo2
POSTHOOK: Lineage: foo2.y SCRIPT []
PREHOOK: query: create table foo3 (z int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@foo3
POSTHOOK: query: create table foo3 (z int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@foo3
PREHOOK: query: insert into foo3 values(10), (11), (13), (14)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@foo3
POSTHOOK: query: insert into foo3 values(10), (11), (13), (14)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@foo3
POSTHOOK: Lineage: foo3.z SCRIPT []
PREHOOK: query: explain
select count(case when (x=1 or false) then 1 else 0 end )
from foo
join foo2
  on foo.x = foo2.y
join foo3
  on foo.x = foo3.z
where x > 0
PREHOOK: type: QUERY
PREHOOK: Input: default@foo
PREHOOK: Input: default@foo2
PREHOOK: Input: default@foo3
#### A masked pattern was here ####
POSTHOOK: query: explain
select count(case when (x=1 or false) then 1 else 0 end )
from foo
join foo2
  on foo.x = foo2.y
join foo3
  on foo.x = foo3.z
where x > 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@foo
POSTHOOK: Input: default@foo2
POSTHOOK: Input: default@foo3
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
        Reducer 3 <- Map 6 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: foo
                  filterExpr: (x > 0) (type: boolean)
                  Statistics: Num rows: 5 Data size: 20 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (x > 0) (type: boolean)
                    Statistics: Num rows: 5 Data size: 20 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: x (type: int), CASE WHEN ((x = 1)) THEN (1) ELSE (0) END (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 5 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: a
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 5 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: foo3
                  filterExpr: (z > 0) (type: boolean)
                  Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (z > 0) (type: boolean)
                    Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: z (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: a
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: foo2
                  filterExpr: (y > 0) (type: boolean)
                  Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (y > 0) (type: boolean)
                    Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: y (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: a
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 4 Data size: 32 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  null sort order: a
                  sort order: +
                  Map-reduce partition columns: _col0 (type: int)
                  Statistics: Num rows: 4 Data size: 32 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col1 (type: int)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col1
                Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: count(_col1)
                  minReductionHashAggr: 0.5
                  mode: hash
                  outputColumnNames: _col0
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    null sort order: 
                    sort order: 
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col0 (type: bigint)
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: explain
select count(case when (x=1 or false) then 1 else 0 end )
from foo
join foo2
  on foo.x = foo2.y
join foo3
  on foo.x = foo3.z
where x > 0
PREHOOK: type: QUERY
PREHOOK: Input: default@foo
PREHOOK: Input: default@foo2
PREHOOK: Input: default@foo3
#### A masked pattern was here ####
POSTHOOK: query: explain
select count(case when (x=1 or false) then 1 else 0 end )
from foo
join foo2
  on foo.x = foo2.y
join foo3
  on foo.x = foo3.z
where x > 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@foo
POSTHOOK: Input: default@foo2
POSTHOOK: Input: default@foo3
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
        Reducer 3 <- Map 6 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: foo
                  filterExpr: (x > 0) (type: boolean)
                  Statistics: Num rows: 5 Data size: 5 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (x > 0) (type: boolean)
                    Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: x (type: int), CASE WHEN ((x = 1)) THEN (1) ELSE (0) END (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: a
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col1 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: foo2
                  filterExpr: (y > 0) (type: boolean)
                  Statistics: Num rows: 2 Data size: 2 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (y > 0) (type: boolean)
                    Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: y (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: a
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: foo3
                  filterExpr: (z > 0) (type: boolean)
                  Statistics: Num rows: 4 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (z > 0) (type: boolean)
                    Statistics: Num rows: 1 Data size: 2 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: z (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 2 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: a
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 2 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  null sort order: a
                  sort order: +
                  Map-reduce partition columns: _col0 (type: int)
                  Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: int)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col1
                Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: count(_col1)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    null sort order: 
                    sort order: 
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: bigint)
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: explain
select count(case when (x=1 or false) then 1 else 0 end )
from foo
join foo2
  on foo.x = foo2.y
join foo3
  on foo.x = foo3.z
where x > 0
PREHOOK: type: QUERY
PREHOOK: Input: default@foo
PREHOOK: Input: default@foo2
PREHOOK: Input: default@foo3
#### A masked pattern was here ####
POSTHOOK: query: explain
select count(case when (x=1 or false) then 1 else 0 end )
from foo
join foo2
  on foo.x = foo2.y
join foo3
  on foo.x = foo3.z
where x > 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@foo
POSTHOOK: Input: default@foo2
POSTHOOK: Input: default@foo3
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
        Reducer 3 <- Map 6 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: foo
                  filterExpr: (x > 0) (type: boolean)
                  Statistics: Num rows: 5 Data size: 5 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (x > 0) (type: boolean)
                    Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: x (type: int)
                      null sort order: a
                      sort order: +
                      Map-reduce partition columns: x (type: int)
                      Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: foo2
                  filterExpr: (y > 0) (type: boolean)
                  Statistics: Num rows: 2 Data size: 2 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (y > 0) (type: boolean)
                    Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: y (type: int)
                      null sort order: a
                      sort order: +
                      Map-reduce partition columns: y (type: int)
                      Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: foo3
                  filterExpr: (z > 0) (type: boolean)
                  Statistics: Num rows: 4 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (z > 0) (type: boolean)
                    Statistics: Num rows: 1 Data size: 2 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: z (type: int)
                      null sort order: a
                      sort order: +
                      Map-reduce partition columns: z (type: int)
                      Statistics: Num rows: 1 Data size: 2 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 x (type: int)
                  1 y (type: int)
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  null sort order: a
                  sort order: +
                  Map-reduce partition columns: _col0 (type: int)
                  Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 z (type: int)
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: count(CASE WHEN (((_col0 = 1) or false)) THEN (1) ELSE (0) END)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    null sort order: 
                    sort order: 
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: bigint)
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: drop table foo
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@foo
PREHOOK: Output: default@foo
POSTHOOK: query: drop table foo
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@foo
POSTHOOK: Output: default@foo
PREHOOK: query: drop table foo2
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@foo2
PREHOOK: Output: default@foo2
POSTHOOK: query: drop table foo2
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@foo2
POSTHOOK: Output: default@foo2
PREHOOK: query: drop table foo3
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@foo3
PREHOOK: Output: default@foo3
POSTHOOK: query: drop table foo3
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@foo3
POSTHOOK: Output: default@foo3
