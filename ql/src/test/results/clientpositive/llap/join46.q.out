PREHOOK: query: CREATE TABLE test1_n2 (key INT, value INT, col_1 STRING)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test1_n2
POSTHOOK: query: CREATE TABLE test1_n2 (key INT, value INT, col_1 STRING)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test1_n2
PREHOOK: query: INSERT INTO test1_n2 VALUES (NULL, NULL, 'None'), (98, NULL, 'None'),
    (99, 0, 'Alice'), (99, 2, 'Mat'), (100, 1, 'Bob'), (101, 2, 'Car')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test1_n2
POSTHOOK: query: INSERT INTO test1_n2 VALUES (NULL, NULL, 'None'), (98, NULL, 'None'),
    (99, 0, 'Alice'), (99, 2, 'Mat'), (100, 1, 'Bob'), (101, 2, 'Car')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test1_n2
POSTHOOK: Lineage: test1_n2.col_1 SCRIPT []
POSTHOOK: Lineage: test1_n2.key SCRIPT []
POSTHOOK: Lineage: test1_n2.value SCRIPT []
PREHOOK: query: CREATE TABLE test2_n0 (key INT, value INT, col_2 STRING)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test2_n0
POSTHOOK: query: CREATE TABLE test2_n0 (key INT, value INT, col_2 STRING)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test2_n0
PREHOOK: query: INSERT INTO test2_n0 VALUES (102, 2, 'Del'), (103, 2, 'Ema'),
    (104, 3, 'Fli'), (105, NULL, 'None')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2_n0
POSTHOOK: query: INSERT INTO test2_n0 VALUES (102, 2, 'Del'), (103, 2, 'Ema'),
    (104, 3, 'Fli'), (105, NULL, 'None')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2_n0
POSTHOOK: Lineage: test2_n0.col_2 SCRIPT []
POSTHOOK: Lineage: test2_n0.key SCRIPT []
POSTHOOK: Lineage: test2_n0.value SCRIPT []
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  filterExpr: value is not null (type: boolean)
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_2 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 9 Data size: 1521 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 9 Data size: 1521 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
99	0	Alice	NULL	NULL	NULL
100	1	Bob	NULL	NULL	NULL
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  AND test1_n2.key between 100 and 102
  AND test2_n0.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  AND test1_n2.key between 100 and 102
  AND test2_n0.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string), key BETWEEN 100 AND 102 (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 6 Data size: 596 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 6 Data size: 596 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string), _col3 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  filterExpr: (value is not null and key BETWEEN 100 AND 102) (type: boolean)
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (value is not null and key BETWEEN 100 AND 102) (type: boolean)
                    Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_2 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                filter predicates:
                  0 {VALUE._col2}
                  1 
                keys:
                  0 _col1 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col4, _col5, _col6
                Statistics: Num rows: 8 Data size: 1049 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col4 (type: int), _col5 (type: int), _col6 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 8 Data size: 1049 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 8 Data size: 1049 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  AND test1_n2.key between 100 and 102
  AND test2_n0.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  AND test1_n2.key between 100 and 102
  AND test2_n0.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
99	0	Alice	NULL	NULL	NULL
100	1	Bob	NULL	NULL	NULL
99	2	Mat	NULL	NULL	NULL
101	2	Car	102	2	Del
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
Warning: Shuffle Join MERGEJOIN[11][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.key between 100 and 102
  AND test2_n0.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.key between 100 and 102
  AND test2_n0.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string), key BETWEEN 100 AND 102 (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 6 Data size: 596 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 596 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col3 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  filterExpr: key BETWEEN 100 AND 102 (type: boolean)
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: key BETWEEN 100 AND 102 (type: boolean)
                    Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_2 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                filter predicates:
                  0 {VALUE._col3}
                  1 
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col4, _col5, _col6
                Statistics: Num rows: 6 Data size: 1142 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col4 (type: int), _col5 (type: int), _col6 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 6 Data size: 1142 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 6 Data size: 1142 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[11][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.key between 100 and 102
  AND test2_n0.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.key between 100 and 102
  AND test2_n0.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	NULL	NULL	NULL
100	1	Bob	102	2	Del
101	2	Car	102	2	Del
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value AND true)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value AND true)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  filterExpr: value is not null (type: boolean)
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 4 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_1 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 4 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 4 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Right Outer Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 7 Data size: 1237 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 7 Data size: 1237 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value AND true)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value AND true)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
NULL	NULL	NULL	104	3	Fli
NULL	NULL	NULL	105	NULL	None
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string), key BETWEEN 100 AND 102 (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 6 Data size: 596 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 596 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col3 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                filter predicates:
                  0 {VALUE._col3}
                  1 
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col4, _col5, _col6
                Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col4 (type: int), _col5 (type: int), _col6 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	NULL	NULL	NULL
100	1	Bob	102	2	Del
100	1	Bob	103	2	Ema
100	1	Bob	104	3	Fli
100	1	Bob	105	NULL	None
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	104	3	Fli
101	2	Car	105	NULL	None
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102
  OR test2_n0.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102
  OR test2_n0.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string), key BETWEEN 100 AND 102 (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 6 Data size: 596 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 596 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col3 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                residual filter predicates: {((_col1 = _col5) or _col3 or _col4 BETWEEN 100 AND 102)}
                Statistics: Num rows: 24 Data size: 4676 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col4 (type: int), _col5 (type: int), _col6 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102
  OR test2_n0.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102
  OR test2_n0.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
NULL	NULL	None	102	2	Del
98	NULL	None	102	2	Del
99	0	Alice	102	2	Del
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
100	1	Bob	102	2	Del
100	1	Bob	103	2	Ema
100	1	Bob	104	3	Fli
100	1	Bob	105	NULL	None
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	104	3	Fli
101	2	Car	105	NULL	None
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string), key BETWEEN 100 AND 102 (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 6 Data size: 596 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 596 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col3 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                residual filter predicates: {((_col1 = _col5) or _col3)}
                Statistics: Num rows: 24 Data size: 4676 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col4 (type: int), _col5 (type: int), _col6 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
100	1	Bob	102	2	Del
100	1	Bob	103	2	Ema
100	1	Bob	104	3	Fli
100	1	Bob	105	NULL	None
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	104	3	Fli
101	2	Car	105	NULL	None
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test2_n0.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test2_n0.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                residual filter predicates: {((_col1 = _col4) or _col3 BETWEEN 100 AND 102)}
                Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test2_n0.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test2_n0.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
NULL	NULL	None	102	2	Del
98	NULL	None	102	2	Del
99	0	Alice	102	2	Del
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
100	1	Bob	102	2	Del
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  AND (test1_n2.key between 100 and 102
    OR test2_n0.key between 100 and 102))
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  AND (test1_n2.key between 100 and 102
    OR test2_n0.key between 100 and 102))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string), key BETWEEN 100 AND 102 (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 6 Data size: 596 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 6 Data size: 596 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string), _col3 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  filterExpr: value is not null (type: boolean)
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_2 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                residual filter predicates: {(_col3 or _col4 BETWEEN 100 AND 102)}
                Statistics: Num rows: 9 Data size: 1557 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col4 (type: int), _col5 (type: int), _col6 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 9 Data size: 1521 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 9 Data size: 1521 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  AND (test1_n2.key between 100 and 102
    OR test2_n0.key between 100 and 102))
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  AND (test1_n2.key between 100 and 102
    OR test2_n0.key between 100 and 102))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
99	0	Alice	NULL	NULL	NULL
100	1	Bob	NULL	NULL	NULL
99	2	Mat	102	2	Del
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT col_1, col_2
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
      OR test1_n2.key=test2_n0.key)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT col_1, col_2
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
      OR test1_n2.key=test2_n0.key)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                residual filter predicates: {((_col1 = _col4) or (_col0 = _col3))}
                Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col2 (type: string), _col5 (type: string)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 24 Data size: 4200 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 24 Data size: 4200 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT col_1, col_2
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
      OR test1_n2.key=test2_n0.key)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT col_1, col_2
FROM test1_n2 LEFT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
      OR test1_n2.key=test2_n0.key)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
None	NULL
None	NULL
Alice	NULL
Mat	Del
Mat	Ema
Bob	NULL
Car	Del
Car	Ema
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102
  OR test2_n0.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102
  OR test2_n0.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string), key BETWEEN 100 AND 102 (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 4 Data size: 396 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 4 Data size: 396 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col3 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Right Outer Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                residual filter predicates: {((_col1 = _col4) or _col0 BETWEEN 100 AND 102 or _col6)}
                Statistics: Num rows: 24 Data size: 4676 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col3 (type: int), _col4 (type: int), _col5 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102
  OR test2_n0.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102
  OR test2_n0.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
NULL	NULL	None	102	2	Del
98	NULL	None	102	2	Del
99	0	Alice	102	2	Del
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
100	1	Bob	102	2	Del
100	1	Bob	103	2	Ema
100	1	Bob	104	3	Fli
100	1	Bob	105	NULL	None
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	104	3	Fli
101	2	Car	105	NULL	None
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Right Outer Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                residual filter predicates: {((_col1 = _col4) or _col0 BETWEEN 100 AND 102)}
                Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
100	1	Bob	102	2	Del
100	1	Bob	103	2	Ema
100	1	Bob	104	3	Fli
100	1	Bob	105	NULL	None
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	104	3	Fli
101	2	Car	105	NULL	None
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test2_n0.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test2_n0.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string), key BETWEEN 100 AND 102 (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 4 Data size: 396 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 4 Data size: 396 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col3 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Right Outer Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                residual filter predicates: {((_col1 = _col4) or _col6)}
                Statistics: Num rows: 24 Data size: 4676 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col3 (type: int), _col4 (type: int), _col5 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test2_n0.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test2_n0.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
NULL	NULL	None	102	2	Del
98	NULL	None	102	2	Del
99	0	Alice	102	2	Del
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
100	1	Bob	102	2	Del
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
NULL	NULL	NULL	104	3	Fli
NULL	NULL	NULL	105	NULL	None
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  AND (test1_n2.key between 100 and 102
    OR test2_n0.key between 100 and 102))
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  AND (test1_n2.key between 100 and 102
    OR test2_n0.key between 100 and 102))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  filterExpr: value is not null (type: boolean)
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 4 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_1 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 4 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 4 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string), key BETWEEN 100 AND 102 (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 4 Data size: 396 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 4 Data size: 396 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string), _col3 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Right Outer Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                residual filter predicates: {(_col0 BETWEEN 100 AND 102 or _col6)}
                Statistics: Num rows: 7 Data size: 1265 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col3 (type: int), _col4 (type: int), _col5 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 7 Data size: 1237 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 7 Data size: 1237 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  AND (test1_n2.key between 100 and 102
    OR test2_n0.key between 100 and 102))
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n2 RIGHT OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  AND (test1_n2.key between 100 and 102
    OR test2_n0.key between 100 and 102))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
99	2	Mat	102	2	Del
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
NULL	NULL	NULL	104	3	Fli
NULL	NULL	NULL	105	NULL	None
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 FULL OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102
  OR test2_n0.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 FULL OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102
  OR test2_n0.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Full Outer Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                residual filter predicates: {((_col1 = _col4) or _col0 BETWEEN 100 AND 102 or _col3 BETWEEN 100 AND 102)}
                Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n2 FULL OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102
  OR test2_n0.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n2 FULL OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102
  OR test2_n0.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
NULL	NULL	None	102	2	Del
98	NULL	None	102	2	Del
99	0	Alice	102	2	Del
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
100	1	Bob	102	2	Del
100	1	Bob	103	2	Ema
100	1	Bob	104	3	Fli
100	1	Bob	105	NULL	None
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	104	3	Fli
101	2	Car	105	NULL	None
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 FULL OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 FULL OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Full Outer Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                residual filter predicates: {((_col1 = _col4) or _col0 BETWEEN 100 AND 102)}
                Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n2 FULL OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n2 FULL OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test1_n2.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
100	1	Bob	102	2	Del
100	1	Bob	103	2	Ema
100	1	Bob	104	3	Fli
100	1	Bob	105	NULL	None
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	104	3	Fli
101	2	Car	105	NULL	None
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 FULL OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test2_n0.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 FULL OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test2_n0.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Full Outer Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                residual filter predicates: {((_col1 = _col4) or _col3 BETWEEN 100 AND 102)}
                Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n2 FULL OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test2_n0.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n2 FULL OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  OR test2_n0.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
NULL	NULL	None	102	2	Del
98	NULL	None	102	2	Del
99	0	Alice	102	2	Del
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
100	1	Bob	102	2	Del
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
NULL	NULL	NULL	104	3	Fli
NULL	NULL	NULL	105	NULL	None
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 FULL OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  AND (test1_n2.key between 100 and 102
    OR test2_n0.key between 100 and 102))
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n2 FULL OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  AND (test1_n2.key between 100 and 102
    OR test2_n0.key between 100 and 102))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Full Outer Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                residual filter predicates: {(_col0 BETWEEN 100 AND 102 or _col3 BETWEEN 100 AND 102)}
                Statistics: Num rows: 13 Data size: 1711 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 13 Data size: 1711 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test1_n2 FULL OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  AND (test1_n2.key between 100 and 102
    OR test2_n0.key between 100 and 102))
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n2 FULL OUTER JOIN test2_n0
ON (test1_n2.value=test2_n0.value
  AND (test1_n2.key between 100 and 102
    OR test2_n0.key between 100 and 102))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
99	0	Alice	NULL	NULL	NULL
100	1	Bob	NULL	NULL	NULL
99	2	Mat	102	2	Del
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
NULL	NULL	NULL	104	3	Fli
NULL	NULL	NULL	105	NULL	None
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
Warning: Shuffle Join MERGEJOIN[38][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 3' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM (
  SELECT test1_n2.key AS key1, test1_n2.value AS value1, test1_n2.col_1 AS col_1,
         test2_n0.key AS key2, test2_n0.value AS value2, test2_n0.col_2 AS col_2
  FROM test1_n2 RIGHT OUTER JOIN test2_n0
  ON (test1_n2.value=test2_n0.value
    AND (test1_n2.key between 100 and 102
      OR test2_n0.key between 100 and 102))
  ) sq1
FULL OUTER JOIN (
  SELECT test1_n2.key AS key3, test1_n2.value AS value3, test1_n2.col_1 AS col_3,
         test2_n0.key AS key4, test2_n0.value AS value4, test2_n0.col_2 AS col_4
  FROM test1_n2 LEFT OUTER JOIN test2_n0
  ON (test1_n2.value=test2_n0.value
    AND (test1_n2.key between 100 and 102
      OR test2_n0.key between 100 and 102))
  ) sq2
ON (sq1.value1 is null or sq2.value4 is null and sq2.value3 != sq1.value2)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM (
  SELECT test1_n2.key AS key1, test1_n2.value AS value1, test1_n2.col_1 AS col_1,
         test2_n0.key AS key2, test2_n0.value AS value2, test2_n0.col_2 AS col_2
  FROM test1_n2 RIGHT OUTER JOIN test2_n0
  ON (test1_n2.value=test2_n0.value
    AND (test1_n2.key between 100 and 102
      OR test2_n0.key between 100 and 102))
  ) sq1
FULL OUTER JOIN (
  SELECT test1_n2.key AS key3, test1_n2.value AS value3, test1_n2.col_1 AS col_3,
         test2_n0.key AS key4, test2_n0.value AS value4, test2_n0.col_2 AS col_4
  FROM test1_n2 LEFT OUTER JOIN test2_n0
  ON (test1_n2.value=test2_n0.value
    AND (test1_n2.key between 100 and 102
      OR test2_n0.key between 100 and 102))
  ) sq2
ON (sq1.value1 is null or sq2.value4 is null and sq2.value3 != sq1.value2)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (CUSTOM_SIMPLE_EDGE), Reducer 4 (CUSTOM_SIMPLE_EDGE)
        Reducer 4 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n2
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string), key BETWEEN 100 AND 102 (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 6 Data size: 596 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 6 Data size: 596 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string), _col3 (type: boolean)
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 4 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_1 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 4 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 4 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: test2_n0
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string), key BETWEEN 100 AND 102 (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 4 Data size: 396 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 4 Data size: 396 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string), _col3 (type: boolean)
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_2 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                residual filter predicates: {(_col3 or _col4 BETWEEN 100 AND 102)}
                Statistics: Num rows: 9 Data size: 1557 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 9 Data size: 1557 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col4 (type: int), _col5 (type: int), _col6 (type: string)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Full Outer Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                residual filter predicates: {(_col8 is null or (_col5 is null and (_col1 <> _col11)))}
                Statistics: Num rows: 63 Data size: 23768 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col7 (type: int), _col8 (type: int), _col9 (type: string), _col10 (type: int), _col11 (type: int), _col12 (type: string), _col0 (type: int), _col1 (type: int), _col2 (type: string), _col4 (type: int), _col5 (type: int), _col6 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11
                  Statistics: Num rows: 63 Data size: 23768 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 63 Data size: 23768 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Right Outer Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                residual filter predicates: {(_col0 BETWEEN 100 AND 102 or _col6)}
                Statistics: Num rows: 7 Data size: 1265 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col3 (type: int), _col4 (type: int), _col5 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 7 Data size: 1265 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    null sort order: 
                    sort order: 
                    Statistics: Num rows: 7 Data size: 1265 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col3 (type: int), _col4 (type: int), _col5 (type: string)

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[38][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 3' is a cross product
PREHOOK: query: SELECT *
FROM (
  SELECT test1_n2.key AS key1, test1_n2.value AS value1, test1_n2.col_1 AS col_1,
         test2_n0.key AS key2, test2_n0.value AS value2, test2_n0.col_2 AS col_2
  FROM test1_n2 RIGHT OUTER JOIN test2_n0
  ON (test1_n2.value=test2_n0.value
    AND (test1_n2.key between 100 and 102
      OR test2_n0.key between 100 and 102))
  ) sq1
FULL OUTER JOIN (
  SELECT test1_n2.key AS key3, test1_n2.value AS value3, test1_n2.col_1 AS col_3,
         test2_n0.key AS key4, test2_n0.value AS value4, test2_n0.col_2 AS col_4
  FROM test1_n2 LEFT OUTER JOIN test2_n0
  ON (test1_n2.value=test2_n0.value
    AND (test1_n2.key between 100 and 102
      OR test2_n0.key between 100 and 102))
  ) sq2
ON (sq1.value1 is null or sq2.value4 is null and sq2.value3 != sq1.value2)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n2
PREHOOK: Input: default@test2_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM (
  SELECT test1_n2.key AS key1, test1_n2.value AS value1, test1_n2.col_1 AS col_1,
         test2_n0.key AS key2, test2_n0.value AS value2, test2_n0.col_2 AS col_2
  FROM test1_n2 RIGHT OUTER JOIN test2_n0
  ON (test1_n2.value=test2_n0.value
    AND (test1_n2.key between 100 and 102
      OR test2_n0.key between 100 and 102))
  ) sq1
FULL OUTER JOIN (
  SELECT test1_n2.key AS key3, test1_n2.value AS value3, test1_n2.col_1 AS col_3,
         test2_n0.key AS key4, test2_n0.value AS value4, test2_n0.col_2 AS col_4
  FROM test1_n2 LEFT OUTER JOIN test2_n0
  ON (test1_n2.value=test2_n0.value
    AND (test1_n2.key between 100 and 102
      OR test2_n0.key between 100 and 102))
  ) sq2
ON (sq1.value1 is null or sq2.value4 is null and sq2.value3 != sq1.value2)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n2
POSTHOOK: Input: default@test2_n0
#### A masked pattern was here ####
99	2	Mat	102	2	Del	99	0	Alice	NULL	NULL	NULL
101	2	Car	102	2	Del	99	0	Alice	NULL	NULL	NULL
101	2	Car	103	2	Ema	99	0	Alice	NULL	NULL	NULL
NULL	NULL	NULL	104	3	Fli	99	0	Alice	NULL	NULL	NULL
NULL	NULL	NULL	105	NULL	None	99	0	Alice	NULL	NULL	NULL
99	2	Mat	102	2	Del	100	1	Bob	NULL	NULL	NULL
101	2	Car	102	2	Del	100	1	Bob	NULL	NULL	NULL
101	2	Car	103	2	Ema	100	1	Bob	NULL	NULL	NULL
NULL	NULL	NULL	104	3	Fli	100	1	Bob	NULL	NULL	NULL
NULL	NULL	NULL	105	NULL	None	100	1	Bob	NULL	NULL	NULL
NULL	NULL	NULL	104	3	Fli	99	2	Mat	102	2	Del
NULL	NULL	NULL	105	NULL	None	99	2	Mat	102	2	Del
NULL	NULL	NULL	104	3	Fli	101	2	Car	102	2	Del
NULL	NULL	NULL	105	NULL	None	101	2	Car	102	2	Del
NULL	NULL	NULL	104	3	Fli	101	2	Car	103	2	Ema
NULL	NULL	NULL	105	NULL	None	101	2	Car	103	2	Ema
NULL	NULL	NULL	104	3	Fli	NULL	NULL	None	NULL	NULL	NULL
NULL	NULL	NULL	105	NULL	None	NULL	NULL	None	NULL	NULL	NULL
NULL	NULL	NULL	104	3	Fli	98	NULL	None	NULL	NULL	NULL
NULL	NULL	NULL	105	NULL	None	98	NULL	None	NULL	NULL	NULL
PREHOOK: query: CREATE TABLE table1 (a INT, b INT)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@table1
POSTHOOK: query: CREATE TABLE table1 (a INT, b INT)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@table1
PREHOOK: query: INSERT INTO table1 VALUES (1, 2), (1, 2), (1, 2), (1, 2)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@table1
POSTHOOK: query: INSERT INTO table1 VALUES (1, 2), (1, 2), (1, 2), (1, 2)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@table1
POSTHOOK: Lineage: table1.a SCRIPT []
POSTHOOK: Lineage: table1.b SCRIPT []
PREHOOK: query: EXPLAIN CBO
SELECT sub1.r FROM
    (
        SELECT
            RANK() OVER (ORDER BY t1.b desc) as r
        FROM table1 t1
                 JOIN table1 t2 ON t1.a = t2.b
    ) sub1
        LEFT OUTER JOIN table1 t3
                        ON sub1.r = t3.a
PREHOOK: type: QUERY
PREHOOK: Input: default@table1
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN CBO
SELECT sub1.r FROM
    (
        SELECT
            RANK() OVER (ORDER BY t1.b desc) as r
        FROM table1 t1
                 JOIN table1 t2 ON t1.a = t2.b
    ) sub1
        LEFT OUTER JOIN table1 t3
                        ON sub1.r = t3.a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@table1
#### A masked pattern was here ####
CBO PLAN:
HiveProject(r=[$0])
  HiveJoin(condition=[=($0, $1)], joinType=[left], algorithm=[none], cost=[not available])
    HiveProject(_o__col11=[RANK() OVER (PARTITION BY 0 ORDER BY $1 DESC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
      HiveJoin(condition=[=($0, $2)], joinType=[inner], algorithm=[none], cost=[not available])
        HiveProject(a=[$0], b=[$1])
          HiveFilter(condition=[IS NOT NULL($0)])
            HiveTableScan(table=[[default, table1]], table:alias=[t1])
        HiveProject(b=[$1])
          HiveFilter(condition=[IS NOT NULL($1)])
            HiveTableScan(table=[[default, table1]], table:alias=[t2])
    HiveProject(a=[$0])
      HiveFilter(condition=[IS NOT NULL($0)])
        HiveTableScan(table=[[default, table1]], table:alias=[t3])

PREHOOK: query: DROP TABLE table1
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@table1
PREHOOK: Output: default@table1
POSTHOOK: query: DROP TABLE table1
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@table1
POSTHOOK: Output: default@table1
