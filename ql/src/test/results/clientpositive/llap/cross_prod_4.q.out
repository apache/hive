PREHOOK: query: create table X_n1 as
select distinct * from src order by key limit 10
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@src
PREHOOK: Output: database:default
PREHOOK: Output: default@X_n1
POSTHOOK: query: create table X_n1 as
select distinct * from src order by key limit 10
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@src
POSTHOOK: Output: database:default
POSTHOOK: Output: default@X_n1
POSTHOOK: Lineage: x_n1.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: x_n1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: explain select * from X_n1 as A, X_n1 as B
PREHOOK: type: QUERY
POSTHOOK: query: explain select * from X_n1 as A, X_n1 as B
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 10 Data size: 3680 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 3680 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 10 Data size: 3680 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 10 Data size: 3680 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 3680 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 10 Data size: 3680 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 100 Data size: 73700 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 100 Data size: 73700 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[11][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: select * from X_n1 as A, X_n1 as B order by A.key, B.key
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n1
#### A masked pattern was here ####
POSTHOOK: query: select * from X_n1 as A, X_n1 as B order by A.key, B.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n1
#### A masked pattern was here ####
0	val_0	0	val_0
0	val_0	10	val_10
0	val_0	100	val_100
0	val_0	103	val_103
0	val_0	104	val_104
0	val_0	105	val_105
0	val_0	11	val_11
0	val_0	111	val_111
0	val_0	113	val_113
0	val_0	114	val_114
10	val_10	0	val_0
10	val_10	10	val_10
10	val_10	100	val_100
10	val_10	103	val_103
10	val_10	104	val_104
10	val_10	105	val_105
10	val_10	11	val_11
10	val_10	111	val_111
10	val_10	113	val_113
10	val_10	114	val_114
100	val_100	0	val_0
100	val_100	10	val_10
100	val_100	100	val_100
100	val_100	103	val_103
100	val_100	104	val_104
100	val_100	105	val_105
100	val_100	11	val_11
100	val_100	111	val_111
100	val_100	113	val_113
100	val_100	114	val_114
103	val_103	0	val_0
103	val_103	10	val_10
103	val_103	100	val_100
103	val_103	103	val_103
103	val_103	104	val_104
103	val_103	105	val_105
103	val_103	11	val_11
103	val_103	111	val_111
103	val_103	113	val_113
103	val_103	114	val_114
104	val_104	0	val_0
104	val_104	10	val_10
104	val_104	100	val_100
104	val_104	103	val_103
104	val_104	104	val_104
104	val_104	105	val_105
104	val_104	11	val_11
104	val_104	111	val_111
104	val_104	113	val_113
104	val_104	114	val_114
105	val_105	0	val_0
105	val_105	10	val_10
105	val_105	100	val_100
105	val_105	103	val_103
105	val_105	104	val_104
105	val_105	105	val_105
105	val_105	11	val_11
105	val_105	111	val_111
105	val_105	113	val_113
105	val_105	114	val_114
11	val_11	0	val_0
11	val_11	10	val_10
11	val_11	100	val_100
11	val_11	103	val_103
11	val_11	104	val_104
11	val_11	105	val_105
11	val_11	11	val_11
11	val_11	111	val_111
11	val_11	113	val_113
11	val_11	114	val_114
111	val_111	0	val_0
111	val_111	10	val_10
111	val_111	100	val_100
111	val_111	103	val_103
111	val_111	104	val_104
111	val_111	105	val_105
111	val_111	11	val_11
111	val_111	111	val_111
111	val_111	113	val_113
111	val_111	114	val_114
113	val_113	0	val_0
113	val_113	10	val_10
113	val_113	100	val_100
113	val_113	103	val_103
113	val_113	104	val_104
113	val_113	105	val_105
113	val_113	11	val_11
113	val_113	111	val_111
113	val_113	113	val_113
113	val_113	114	val_114
114	val_114	0	val_0
114	val_114	10	val_10
114	val_114	100	val_100
114	val_114	103	val_103
114	val_114	104	val_104
114	val_114	105	val_105
114	val_114	11	val_11
114	val_114	111	val_111
114	val_114	113	val_113
114	val_114	114	val_114
