PREHOOK: query: create database `db~!@#$%^&*(),<>`
PREHOOK: type: CREATEDATABASE
PREHOOK: Output: database:db~!@#$%^&*(),<>
POSTHOOK: query: create database `db~!@#$%^&*(),<>`
POSTHOOK: type: CREATEDATABASE
POSTHOOK: Output: database:db~!@#$%^&*(),<>
PREHOOK: query: use `db~!@#$%^&*(),<>`
PREHOOK: type: SWITCHDATABASE
PREHOOK: Input: database:db~!@#$%^&*(),<>
POSTHOOK: query: use `db~!@#$%^&*(),<>`
POSTHOOK: type: SWITCHDATABASE
POSTHOOK: Input: database:db~!@#$%^&*(),<>
PREHOOK: query: create table `c/b/o_t1`(key string, value string, c_int int, c_float float, c_boolean boolean)  partitioned by (dt string) row format delimited fields terminated by ',' STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:db~!@#$%^&*(),<>
PREHOOK: Output: db~!@#$%^&*(),<>@c/b/o_t1
POSTHOOK: query: create table `c/b/o_t1`(key string, value string, c_int int, c_float float, c_boolean boolean)  partitioned by (dt string) row format delimited fields terminated by ',' STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:db~!@#$%^&*(),<>
POSTHOOK: Output: db~!@#$%^&*(),<>@c/b/o_t1
PREHOOK: query: create table `//cbo_t2`(key string, value string, c_int int, c_float float, c_boolean boolean)  partitioned by (dt string) row format delimited fields terminated by ',' STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:db~!@#$%^&*(),<>
PREHOOK: Output: db~!@#$%^&*(),<>@//cbo_t2
POSTHOOK: query: create table `//cbo_t2`(key string, value string, c_int int, c_float float, c_boolean boolean)  partitioned by (dt string) row format delimited fields terminated by ',' STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:db~!@#$%^&*(),<>
POSTHOOK: Output: db~!@#$%^&*(),<>@//cbo_t2
PREHOOK: query: create table `cbo_/t3////`(key string, value string, c_int int, c_float float, c_boolean boolean)  row format delimited fields terminated by ',' STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:db~!@#$%^&*(),<>
PREHOOK: Output: db~!@#$%^&*(),<>@cbo_/t3////
POSTHOOK: query: create table `cbo_/t3////`(key string, value string, c_int int, c_float float, c_boolean boolean)  row format delimited fields terminated by ',' STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:db~!@#$%^&*(),<>
POSTHOOK: Output: db~!@#$%^&*(),<>@cbo_/t3////
PREHOOK: query: load data local inpath '../../data/files/cbo_t1.txt' into table `c/b/o_t1` partition (dt='2014')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: db~!@#$%^&*(),<>@c/b/o_t1
POSTHOOK: query: load data local inpath '../../data/files/cbo_t1.txt' into table `c/b/o_t1` partition (dt='2014')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: db~!@#$%^&*(),<>@c/b/o_t1
POSTHOOK: Output: db~!@#$%^&*(),<>@c/b/o_t1@dt=2014
PREHOOK: query: load data local inpath '../../data/files/cbo_t2.txt' into table `//cbo_t2` partition (dt='2014')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: db~!@#$%^&*(),<>@//cbo_t2
POSTHOOK: query: load data local inpath '../../data/files/cbo_t2.txt' into table `//cbo_t2` partition (dt='2014')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: db~!@#$%^&*(),<>@//cbo_t2
POSTHOOK: Output: db~!@#$%^&*(),<>@//cbo_t2@dt=2014
PREHOOK: query: load data local inpath '../../data/files/cbo_t3.txt' into table `cbo_/t3////`
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: db~!@#$%^&*(),<>@cbo_/t3////
POSTHOOK: query: load data local inpath '../../data/files/cbo_t3.txt' into table `cbo_/t3////`
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: db~!@#$%^&*(),<>@cbo_/t3////
PREHOOK: query: CREATE TABLE `p/a/r/t`(
    p_partkey INT,
    p_name STRING,
    p_mfgr STRING,
    p_brand STRING,
    p_type STRING,
    p_size INT,
    p_container STRING,
    p_retailprice DOUBLE,
    p_comment STRING
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:db~!@#$%^&*(),<>
PREHOOK: Output: db~!@#$%^&*(),<>@p/a/r/t
POSTHOOK: query: CREATE TABLE `p/a/r/t`(
    p_partkey INT,
    p_name STRING,
    p_mfgr STRING,
    p_brand STRING,
    p_type STRING,
    p_size INT,
    p_container STRING,
    p_retailprice DOUBLE,
    p_comment STRING
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:db~!@#$%^&*(),<>
POSTHOOK: Output: db~!@#$%^&*(),<>@p/a/r/t
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/tpch/tiny/part.tbl.bz2' overwrite into table `p/a/r/t`
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: db~!@#$%^&*(),<>@p/a/r/t
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/tpch/tiny/part.tbl.bz2' overwrite into table `p/a/r/t`
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: db~!@#$%^&*(),<>@p/a/r/t
PREHOOK: query: CREATE TABLE `line/item` (L_ORDERKEY      INT,
                                L_PARTKEY       INT,
                                L_SUPPKEY       INT,
                                L_LINENUMBER    INT,
                                L_QUANTITY      DOUBLE,
                                L_EXTENDEDPRICE DOUBLE,
                                L_DISCOUNT      DOUBLE,
                                L_TAX           DOUBLE,
                                L_RETURNFLAG    STRING,
                                L_LINESTATUS    STRING,
                                l_shipdate      STRING,
                                L_COMMITDATE    STRING,
                                L_RECEIPTDATE   STRING,
                                L_SHIPINSTRUCT  STRING,
                                L_SHIPMODE      STRING,
                                L_COMMENT       STRING)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '|'
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:db~!@#$%^&*(),<>
PREHOOK: Output: db~!@#$%^&*(),<>@line/item
POSTHOOK: query: CREATE TABLE `line/item` (L_ORDERKEY      INT,
                                L_PARTKEY       INT,
                                L_SUPPKEY       INT,
                                L_LINENUMBER    INT,
                                L_QUANTITY      DOUBLE,
                                L_EXTENDEDPRICE DOUBLE,
                                L_DISCOUNT      DOUBLE,
                                L_TAX           DOUBLE,
                                L_RETURNFLAG    STRING,
                                L_LINESTATUS    STRING,
                                l_shipdate      STRING,
                                L_COMMITDATE    STRING,
                                L_RECEIPTDATE   STRING,
                                L_SHIPINSTRUCT  STRING,
                                L_SHIPMODE      STRING,
                                L_COMMENT       STRING)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '|'
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:db~!@#$%^&*(),<>
POSTHOOK: Output: db~!@#$%^&*(),<>@line/item
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/tpch/tiny/lineitem.tbl.bz2' OVERWRITE INTO TABLE `line/item`
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: db~!@#$%^&*(),<>@line/item
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/tpch/tiny/lineitem.tbl.bz2' OVERWRITE INTO TABLE `line/item`
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: db~!@#$%^&*(),<>@line/item
PREHOOK: query: create table `src/_/cbo` as select * from default.src
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@src
PREHOOK: Output: database:db~!@#$%^&*(),<>
PREHOOK: Output: db~!@#$%^&*(),<>@src/_/cbo
POSTHOOK: query: create table `src/_/cbo` as select * from default.src
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@src
POSTHOOK: Output: database:db~!@#$%^&*(),<>
POSTHOOK: Output: db~!@#$%^&*(),<>@src/_/cbo
POSTHOOK: Lineage: src/_/cbo.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: src/_/cbo.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: analyze table `c/b/o_t1` compute statistics for columns key, value, c_int, c_float, c_boolean
PREHOOK: type: ANALYZE_TABLE
PREHOOK: Input: db~!@#$%^&*(),<>@c/b/o_t1
PREHOOK: Input: db~!@#$%^&*(),<>@c/b/o_t1@dt=2014
PREHOOK: Output: db~!@#$%^&*(),<>@c/b/o_t1
PREHOOK: Output: db~!@#$%^&*(),<>@c/b/o_t1@dt=2014
#### A masked pattern was here ####
POSTHOOK: query: analyze table `c/b/o_t1` compute statistics for columns key, value, c_int, c_float, c_boolean
POSTHOOK: type: ANALYZE_TABLE
POSTHOOK: Input: db~!@#$%^&*(),<>@c/b/o_t1
POSTHOOK: Input: db~!@#$%^&*(),<>@c/b/o_t1@dt=2014
POSTHOOK: Output: db~!@#$%^&*(),<>@c/b/o_t1
POSTHOOK: Output: db~!@#$%^&*(),<>@c/b/o_t1@dt=2014
#### A masked pattern was here ####
PREHOOK: query: analyze table `//cbo_t2` compute statistics for columns key, value, c_int, c_float, c_boolean
PREHOOK: type: ANALYZE_TABLE
PREHOOK: Input: db~!@#$%^&*(),<>@//cbo_t2
PREHOOK: Input: db~!@#$%^&*(),<>@//cbo_t2@dt=2014
PREHOOK: Output: db~!@#$%^&*(),<>@//cbo_t2
PREHOOK: Output: db~!@#$%^&*(),<>@//cbo_t2@dt=2014
#### A masked pattern was here ####
POSTHOOK: query: analyze table `//cbo_t2` compute statistics for columns key, value, c_int, c_float, c_boolean
POSTHOOK: type: ANALYZE_TABLE
POSTHOOK: Input: db~!@#$%^&*(),<>@//cbo_t2
POSTHOOK: Input: db~!@#$%^&*(),<>@//cbo_t2@dt=2014
POSTHOOK: Output: db~!@#$%^&*(),<>@//cbo_t2
POSTHOOK: Output: db~!@#$%^&*(),<>@//cbo_t2@dt=2014
#### A masked pattern was here ####
PREHOOK: query: analyze table `cbo_/t3////` compute statistics for columns key, value, c_int, c_float, c_boolean
PREHOOK: type: ANALYZE_TABLE
PREHOOK: Input: db~!@#$%^&*(),<>@cbo_/t3////
PREHOOK: Output: db~!@#$%^&*(),<>@cbo_/t3////
#### A masked pattern was here ####
POSTHOOK: query: analyze table `cbo_/t3////` compute statistics for columns key, value, c_int, c_float, c_boolean
POSTHOOK: type: ANALYZE_TABLE
POSTHOOK: Input: db~!@#$%^&*(),<>@cbo_/t3////
POSTHOOK: Output: db~!@#$%^&*(),<>@cbo_/t3////
#### A masked pattern was here ####
PREHOOK: query: analyze table `src/_/cbo` compute statistics for columns
PREHOOK: type: ANALYZE_TABLE
PREHOOK: Input: db~!@#$%^&*(),<>@src/_/cbo
PREHOOK: Output: db~!@#$%^&*(),<>@src/_/cbo
#### A masked pattern was here ####
POSTHOOK: query: analyze table `src/_/cbo` compute statistics for columns
POSTHOOK: type: ANALYZE_TABLE
POSTHOOK: Input: db~!@#$%^&*(),<>@src/_/cbo
POSTHOOK: Output: db~!@#$%^&*(),<>@src/_/cbo
#### A masked pattern was here ####
PREHOOK: query: analyze table `p/a/r/t` compute statistics for columns
PREHOOK: type: ANALYZE_TABLE
PREHOOK: Input: db~!@#$%^&*(),<>@p/a/r/t
PREHOOK: Output: db~!@#$%^&*(),<>@p/a/r/t
#### A masked pattern was here ####
POSTHOOK: query: analyze table `p/a/r/t` compute statistics for columns
POSTHOOK: type: ANALYZE_TABLE
POSTHOOK: Input: db~!@#$%^&*(),<>@p/a/r/t
POSTHOOK: Output: db~!@#$%^&*(),<>@p/a/r/t
#### A masked pattern was here ####
PREHOOK: query: analyze table `line/item` compute statistics for columns
PREHOOK: type: ANALYZE_TABLE
PREHOOK: Input: db~!@#$%^&*(),<>@line/item
PREHOOK: Output: db~!@#$%^&*(),<>@line/item
#### A masked pattern was here ####
POSTHOOK: query: analyze table `line/item` compute statistics for columns
POSTHOOK: type: ANALYZE_TABLE
POSTHOOK: Input: db~!@#$%^&*(),<>@line/item
POSTHOOK: Output: db~!@#$%^&*(),<>@line/item
#### A masked pattern was here ####
PREHOOK: query: explain select p_mfgr, p_name, p_size

from `p/a/r/t` b where b.p_size not in

  (select min(p_size)

  from (select p_mfgr, p_size from `p/a/r/t`) a

  where p_size < 10 and b.p_mfgr = a.p_mfgr

  
) order by  p_name
PREHOOK: type: QUERY
PREHOOK: Input: db~!@#$%^&*(),<>@p/a/r/t
#### A masked pattern was here ####
POSTHOOK: query: explain select p_mfgr, p_name, p_size

from `p/a/r/t` b where b.p_size not in

  (select min(p_size)

  from (select p_mfgr, p_size from `p/a/r/t`) a

  where p_size < 10 and b.p_mfgr = a.p_mfgr

  
) order by  p_name
POSTHOOK: type: QUERY
POSTHOOK: Input: db~!@#$%^&*(),<>@p/a/r/t
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Reducer 7 (CUSTOM_SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
        Reducer 5 <- Map 1 (SIMPLE_EDGE)
        Reducer 6 <- Map 1 (SIMPLE_EDGE)
        Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 26 Data size: 5798 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    null sort order: 
                    sort order: 
                    Statistics: Num rows: 26 Data size: 5798 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: p_name (type: string), p_mfgr (type: string), p_size (type: int)
                  Filter Operator
                    predicate: (p_size < 10) (type: boolean)
                    Statistics: Num rows: 5 Data size: 510 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: p_mfgr (type: string), p_size (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 5 Data size: 510 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: min(_col1)
                        keys: _col0 (type: string)
                        minReductionHashAggr: 0.6
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 2 Data size: 204 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: string)
                          null sort order: z
                          sort order: +
                          Map-reduce partition columns: _col0 (type: string)
                          Statistics: Num rows: 2 Data size: 204 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col1 (type: int)
                  Filter Operator
                    predicate: ((p_size < 10) and (p_size < 10)) (type: boolean)
                    Statistics: Num rows: 5 Data size: 510 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: p_mfgr (type: string), p_size (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 5 Data size: 510 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: min(_col1)
                        keys: _col0 (type: string)
                        minReductionHashAggr: 0.6
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 2 Data size: 204 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: string)
                          null sort order: z
                          sort order: +
                          Map-reduce partition columns: _col0 (type: string)
                          Statistics: Num rows: 2 Data size: 204 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col1 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col1, _col2, _col5
                Statistics: Num rows: 26 Data size: 5798 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col5 (type: int), _col2 (type: string)
                  null sort order: zz
                  sort order: ++
                  Map-reduce partition columns: _col5 (type: int), _col2 (type: string)
                  Statistics: Num rows: 26 Data size: 5798 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col1 (type: string)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                keys:
                  0 _col5 (type: int), _col2 (type: string)
                  1 _col0 (type: int), _col1 (type: string)
                outputColumnNames: _col1, _col2, _col5, _col12
                Statistics: Num rows: 28 Data size: 6256 Basic stats: COMPLETE Column stats: COMPLETE
                Filter Operator
                  predicate: _col12 is null (type: boolean)
                  Statistics: Num rows: 26 Data size: 5810 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col2 (type: string), _col1 (type: string), _col5 (type: int)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 26 Data size: 5798 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: string)
                      null sort order: z
                      sort order: +
                      Statistics: Num rows: 26 Data size: 5798 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col2 (type: int)
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), KEY.reducesinkkey0 (type: string), VALUE._col1 (type: int)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 26 Data size: 5798 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 26 Data size: 5798 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 5 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: min(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 2 Data size: 204 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col1 (type: int), _col0 (type: string)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 2 Data size: 204 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: int), _col1 (type: string)
                    null sort order: zz
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: int), _col1 (type: string)
                    Statistics: Num rows: 2 Data size: 204 Basic stats: COMPLETE Column stats: COMPLETE
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: min(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 2 Data size: 204 Basic stats: COMPLETE Column stats: COMPLETE
                Filter Operator
                  predicate: (_col1 is null or _col0 is null) (type: boolean)
                  Statistics: Num rows: 1 Data size: 102 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    Statistics: Num rows: 1 Data size: 102 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      minReductionHashAggr: 0.0
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: bigint)
        Reducer 7 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                Filter Operator
                  predicate: (_col0 = 0L) (type: boolean)
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: 0L (type: bigint)
                      minReductionHashAggr: 0.0
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

