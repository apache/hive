PREHOOK: query: DROP TABLE IF EXISTS src_lv_cart
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: DROP TABLE IF EXISTS src_lv_cart
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: CREATE TABLE src_lv_cart (val_array array<string>)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@src_lv_cart
POSTHOOK: query: CREATE TABLE src_lv_cart (val_array array<string>)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@src_lv_cart
PREHOOK: query: INSERT INTO src_lv_cart VALUES (array('a', 'b'))
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@src_lv_cart
POSTHOOK: query: INSERT INTO src_lv_cart VALUES (array('a', 'b'))
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@src_lv_cart
POSTHOOK: Lineage: src_lv_cart.val_array SCRIPT []
PREHOOK: query: SELECT first_val, second_val
FROM src_lv_cart
LATERAL VIEW explode(val_array) lv1 AS first_val
LATERAL VIEW explode(val_array) lv2 AS second_val
WHERE first_val != second_val
ORDER BY first_val, second_val
PREHOOK: type: QUERY
PREHOOK: Input: default@src_lv_cart
#### A masked pattern was here ####
POSTHOOK: query: SELECT first_val, second_val
FROM src_lv_cart
LATERAL VIEW explode(val_array) lv1 AS first_val
LATERAL VIEW explode(val_array) lv2 AS second_val
WHERE first_val != second_val
ORDER BY first_val, second_val
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src_lv_cart
#### A masked pattern was here ####
a	b
b	a
PREHOOK: query: SELECT first_val, second_val
FROM (SELECT array('a', 'b') AS val_array) src
LATERAL VIEW explode(val_array) lv1 AS first_val
LATERAL VIEW explode(val_array) lv2 AS second_val
WHERE first_val != second_val
ORDER BY first_val, second_val
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT first_val, second_val
FROM (SELECT array('a', 'b') AS val_array) src
LATERAL VIEW explode(val_array) lv1 AS first_val
LATERAL VIEW explode(val_array) lv2 AS second_val
WHERE first_val != second_val
ORDER BY first_val, second_val
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
a	b
b	a
PREHOOK: query: SELECT lv1.val1, lv2.val2, lv3.val3
FROM (SELECT array('x', 'y') AS arr) src
LATERAL VIEW explode(arr) lv1 AS val1
LATERAL VIEW explode(arr) lv2 AS val2
LATERAL VIEW explode(arr) lv3 AS val3
WHERE lv1.val1 != lv2.val2 AND lv2.val2 != lv3.val3
ORDER BY lv1.val1, lv2.val2, lv3.val3
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT lv1.val1, lv2.val2, lv3.val3
FROM (SELECT array('x', 'y') AS arr) src
LATERAL VIEW explode(arr) lv1 AS val1
LATERAL VIEW explode(arr) lv2 AS val2
LATERAL VIEW explode(arr) lv3 AS val3
WHERE lv1.val1 != lv2.val2 AND lv2.val2 != lv3.val3
ORDER BY lv1.val1, lv2.val2, lv3.val3
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
x	y	x
y	x	y
PREHOOK: query: SELECT first_val, second_val
FROM (SELECT array('p', 'q', 'r') AS val_array) src
LATERAL VIEW explode(val_array) lv1 AS first_val
LATERAL VIEW explode(val_array) lv2 AS second_val
WHERE first_val = 'p' OR second_val = 'r'
ORDER BY first_val, second_val
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT first_val, second_val
FROM (SELECT array('p', 'q', 'r') AS val_array) src
LATERAL VIEW explode(val_array) lv1 AS first_val
LATERAL VIEW explode(val_array) lv2 AS second_val
WHERE first_val = 'p' OR second_val = 'r'
ORDER BY first_val, second_val
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
p	p
p	q
p	r
q	r
r	r
PREHOOK: query: SELECT first_val, second_val
FROM (SELECT array('m', 'n') AS val_array) src
LATERAL VIEW explode(val_array) lv1 AS first_val
LATERAL VIEW explode(val_array) lv2 AS second_val
WHERE first_val != second_val
ORDER BY first_val, second_val
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT first_val, second_val
FROM (SELECT array('m', 'n') AS val_array) src
LATERAL VIEW explode(val_array) lv1 AS first_val
LATERAL VIEW explode(val_array) lv2 AS second_val
WHERE first_val != second_val
ORDER BY first_val, second_val
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
m	n
n	m
PREHOOK: query: SELECT first_val, second_val
FROM (SELECT array('s', 't') AS val_array) src
LATERAL VIEW explode(val_array) lv1 AS first_val
LATERAL VIEW explode(val_array) lv2 AS second_val
WHERE first_val != second_val
ORDER BY first_val, second_val
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT first_val, second_val
FROM (SELECT array('s', 't') AS val_array) src
LATERAL VIEW explode(val_array) lv1 AS first_val
LATERAL VIEW explode(val_array) lv2 AS second_val
WHERE first_val != second_val
ORDER BY first_val, second_val
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
s	t
t	s
PREHOOK: query: SELECT first_val, second_val
FROM (SELECT array('u', 'v') AS val_array) src
LATERAL VIEW explode(val_array) lv1 AS first_val
LATERAL VIEW explode(val_array) lv2 AS second_val
WHERE first_val != second_val
ORDER BY first_val, second_val
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT first_val, second_val
FROM (SELECT array('u', 'v') AS val_array) src
LATERAL VIEW explode(val_array) lv1 AS first_val
LATERAL VIEW explode(val_array) lv2 AS second_val
WHERE first_val != second_val
ORDER BY first_val, second_val
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
u	v
v	u
PREHOOK: query: SELECT outer_val, inner_val1, inner_val2
FROM (
  SELECT array('alpha', 'beta') AS outer_array, array('1', '2') AS inner_array
) src
LATERAL VIEW explode(outer_array) lv_outer AS outer_val
LATERAL VIEW explode(inner_array) lv_inner1 AS inner_val1
LATERAL VIEW explode(inner_array) lv_inner2 AS inner_val2
WHERE outer_val != 'alpha' OR (inner_val1 != inner_val2)
ORDER BY outer_val, inner_val1, inner_val2
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT outer_val, inner_val1, inner_val2
FROM (
  SELECT array('alpha', 'beta') AS outer_array, array('1', '2') AS inner_array
) src
LATERAL VIEW explode(outer_array) lv_outer AS outer_val
LATERAL VIEW explode(inner_array) lv_inner1 AS inner_val1
LATERAL VIEW explode(inner_array) lv_inner2 AS inner_val2
WHERE outer_val != 'alpha' OR (inner_val1 != inner_val2)
ORDER BY outer_val, inner_val1, inner_val2
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
alpha	1	2
alpha	2	1
beta	1	1
beta	1	2
beta	2	1
beta	2	2
PREHOOK: query: EXPLAIN CBO SELECT first_val, second_val
FROM (SELECT array('a', 'b') AS val_array) src
LATERAL VIEW explode(val_array) lv1 AS first_val
LATERAL VIEW explode(val_array) lv2 AS second_val
WHERE first_val != second_val
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN CBO SELECT first_val, second_val
FROM (SELECT array('a', 'b') AS val_array) src
LATERAL VIEW explode(val_array) lv1 AS first_val
LATERAL VIEW explode(val_array) lv2 AS second_val
WHERE first_val != second_val
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
CBO PLAN:
HiveProject(first_val=[$1], second_val=[$2])
  HiveFilter(condition=[<>($1, $2)])
    HiveTableFunctionScan(invocation=[LATERAL(explode($0), $0, $1)], rowType=[RecordType(VARCHAR(2147483647) ARRAY val_array, VARCHAR(2147483647) lv1.first_val, VARCHAR(2147483647) lv2.second_val)])
      HiveProject(val_array=[$0], lv1.first_val=[$1])
        HiveTableFunctionScan(invocation=[LATERAL(explode($0), $0)], rowType=[RecordType(VARCHAR(2147483647) ARRAY val_array, VARCHAR(2147483647) lv1.first_val)])
          HiveProject(val_array=[ARRAY(_UTF-16LE'a':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'b':VARCHAR(2147483647) CHARACTER SET "UTF-16LE")])
            HiveTableScan(table=[[_dummy_database, _dummy_table]], table:alias=[_dummy_table])

PREHOOK: query: SELECT val1, val2
FROM (SELECT array('test', null, 'data') AS arr_with_nulls) src
LATERAL VIEW explode(arr_with_nulls) lv1 AS val1
LATERAL VIEW explode(arr_with_nulls) lv2 AS val2
WHERE val1 IS NOT NULL AND val2 IS NOT NULL AND val1 != val2
ORDER BY val1, val2
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT val1, val2
FROM (SELECT array('test', null, 'data') AS arr_with_nulls) src
LATERAL VIEW explode(arr_with_nulls) lv1 AS val1
LATERAL VIEW explode(arr_with_nulls) lv2 AS val2
WHERE val1 IS NOT NULL AND val2 IS NOT NULL AND val1 != val2
ORDER BY val1, val2
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
data	test
test	data
PREHOOK: query: SELECT num1, num2
FROM (SELECT array(1, 2, 3) AS num_array) src
LATERAL VIEW explode(num_array) lv1 AS num1
LATERAL VIEW explode(num_array) lv2 AS num2
WHERE num1 < num2
ORDER BY num1, num2
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT num1, num2
FROM (SELECT array(1, 2, 3) AS num_array) src
LATERAL VIEW explode(num_array) lv1 AS num1
LATERAL VIEW explode(num_array) lv2 AS num2
WHERE num1 < num2
ORDER BY num1, num2
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
1	2
1	3
2	3
PREHOOK: query: SELECT dec1, dec2
FROM (SELECT array(1.5, 2.7, 3.9) AS dec_array) src
LATERAL VIEW explode(dec_array) lv1 AS dec1
LATERAL VIEW explode(dec_array) lv2 AS dec2
WHERE dec1 != dec2
ORDER BY dec1, dec2
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT dec1, dec2
FROM (SELECT array(1.5, 2.7, 3.9) AS dec_array) src
LATERAL VIEW explode(dec_array) lv1 AS dec1
LATERAL VIEW explode(dec_array) lv2 AS dec2
WHERE dec1 != dec2
ORDER BY dec1, dec2
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
1.5	2.7
1.5	3.9
2.7	1.5
2.7	3.9
3.9	1.5
3.9	2.7
PREHOOK: query: SELECT bool1, bool2
FROM (SELECT array(true, false) AS bool_array) src
LATERAL VIEW explode(bool_array) lv1 AS bool1
LATERAL VIEW explode(bool_array) lv2 AS bool2
WHERE bool1 != bool2
ORDER BY bool1, bool2
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT bool1, bool2
FROM (SELECT array(true, false) AS bool_array) src
LATERAL VIEW explode(bool_array) lv1 AS bool1
LATERAL VIEW explode(bool_array) lv2 AS bool2
WHERE bool1 != bool2
ORDER BY bool1, bool2
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
false	true
true	false
PREHOOK: query: SELECT pos1, val1, pos2, val2
FROM (SELECT array('x', 'y', 'z') AS test_array) src
LATERAL VIEW posexplode(test_array) lv1 AS pos1, val1
LATERAL VIEW posexplode(test_array) lv2 AS pos2, val2
WHERE pos1 != pos2 AND val1 != val2
ORDER BY pos1, pos2
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT pos1, val1, pos2, val2
FROM (SELECT array('x', 'y', 'z') AS test_array) src
LATERAL VIEW posexplode(test_array) lv1 AS pos1, val1
LATERAL VIEW posexplode(test_array) lv2 AS pos2, val2
WHERE pos1 != pos2 AND val1 != val2
ORDER BY pos1, pos2
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
0	x	1	y
0	x	2	z
1	y	0	x
1	y	2	z
2	z	0	x
2	z	1	y
PREHOOK: query: SELECT id1, name1, id2, name2
FROM (SELECT array(struct(1, 'Alice'), struct(2, 'Bob'), struct(3, 'Charlie')) AS struct_array) src
LATERAL VIEW inline(struct_array) lv1 AS id1, name1
LATERAL VIEW inline(struct_array) lv2 AS id2, name2
WHERE id1 != id2
ORDER BY id1, id2
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT id1, name1, id2, name2
FROM (SELECT array(struct(1, 'Alice'), struct(2, 'Bob'), struct(3, 'Charlie')) AS struct_array) src
LATERAL VIEW inline(struct_array) lv1 AS id1, name1
LATERAL VIEW inline(struct_array) lv2 AS id2, name2
WHERE id1 != id2
ORDER BY id1, id2
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
1	Alice	2	Bob
1	Alice	3	Charlie
2	Bob	1	Alice
2	Bob	3	Charlie
3	Charlie	1	Alice
3	Charlie	2	Bob
PREHOOK: query: SELECT val1, val2
FROM (SELECT array('a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'a10') AS large_array) src
LATERAL VIEW explode(large_array) lv1 AS val1
LATERAL VIEW explode(large_array) lv2 AS val2
WHERE val1 < val2 AND (val1 LIKE '%1' OR val1 LIKE '%5')
ORDER BY val1, val2 LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT val1, val2
FROM (SELECT array('a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'a10') AS large_array) src
LATERAL VIEW explode(large_array) lv1 AS val1
LATERAL VIEW explode(large_array) lv2 AS val2
WHERE val1 < val2 AND (val1 LIKE '%1' OR val1 LIKE '%5')
ORDER BY val1, val2 LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
a1	a10
a1	a2
a1	a3
a1	a4
a1	a5
a1	a6
a1	a7
a1	a8
a1	a9
a5	a6
PREHOOK: query: SELECT key1, value1, key2, value2
FROM (SELECT array(map('k1', 'v1', 'k2', 'v2'), map('k3', 'v3', 'k4', 'v4')) AS map_array) src
LATERAL VIEW explode(map_array) lv1 AS map1
LATERAL VIEW explode(map1) lv_map1 AS key1, value1
LATERAL VIEW explode(map_array) lv2 AS map2
LATERAL VIEW explode(map2) lv_map2 AS key2, value2
WHERE key1 != key2
ORDER BY key1, key2 LIMIT 8
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT key1, value1, key2, value2
FROM (SELECT array(map('k1', 'v1', 'k2', 'v2'), map('k3', 'v3', 'k4', 'v4')) AS map_array) src
LATERAL VIEW explode(map_array) lv1 AS map1
LATERAL VIEW explode(map1) lv_map1 AS key1, value1
LATERAL VIEW explode(map_array) lv2 AS map2
LATERAL VIEW explode(map2) lv_map2 AS key2, value2
WHERE key1 != key2
ORDER BY key1, key2 LIMIT 8
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
k1	v1	k2	v2
k1	v1	k3	v3
k1	v1	k4	v4
k2	v2	k1	v1
k2	v2	k3	v3
k2	v2	k4	v4
k3	v3	k1	v1
k3	v3	k2	v2
PREHOOK: query: SELECT val, COUNT(*) AS cnt
FROM (SELECT array('group1', 'group2', 'group1', 'group3') AS grp_array) src
LATERAL VIEW explode(grp_array) lv AS val
GROUP BY val
ORDER BY val
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT val, COUNT(*) AS cnt
FROM (SELECT array('group1', 'group2', 'group1', 'group3') AS grp_array) src
LATERAL VIEW explode(grp_array) lv AS val
GROUP BY val
ORDER BY val
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
group1	2
group2	1
group3	1
PREHOOK: query: SELECT val, ROW_NUMBER() OVER (ORDER BY val) AS rn
FROM (SELECT array('w1', 'w2', 'w3', 'w1') AS win_array) src
LATERAL VIEW explode(win_array) lv AS val
ORDER BY rn
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT val, ROW_NUMBER() OVER (ORDER BY val) AS rn
FROM (SELECT array('w1', 'w2', 'w3', 'w1') AS win_array) src
LATERAL VIEW explode(win_array) lv AS val
ORDER BY rn
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
w1	1
w1	2
w2	3
w3	4
PREHOOK: query: SELECT outer_result
FROM (
  SELECT CONCAT(inner_val, '_processed') AS outer_result
  FROM (SELECT array('sub1', 'sub2') AS sub_array) inner_t
  LATERAL VIEW explode(sub_array) inner_lv AS inner_val
) src
ORDER BY outer_result
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT outer_result
FROM (
  SELECT CONCAT(inner_val, '_processed') AS outer_result
  FROM (SELECT array('sub1', 'sub2') AS sub_array) inner_t
  LATERAL VIEW explode(sub_array) inner_lv AS inner_val
) src
ORDER BY outer_result
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
sub1_processed
sub2_processed
PREHOOK: query: CREATE TEMPORARY TABLE tmp_join (id int, data string, join_array array<string>)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tmp_join
POSTHOOK: query: CREATE TEMPORARY TABLE tmp_join (id int, data string, join_array array<string>)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tmp_join
PREHOOK: query: INSERT INTO tmp_join VALUES (1, 'data1', array('join_a', 'join_b')), (2, 'data2', array('join_c', 'join_d'))
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tmp_join
POSTHOOK: query: INSERT INTO tmp_join VALUES (1, 'data1', array('join_a', 'join_b')), (2, 'data2', array('join_c', 'join_d'))
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tmp_join
POSTHOOK: Lineage: tmp_join.data SCRIPT []
POSTHOOK: Lineage: tmp_join.id SCRIPT []
POSTHOOK: Lineage: tmp_join.join_array SCRIPT []
PREHOOK: query: SELECT t.id, t.data, lv.exploded_val
FROM tmp_join t
LATERAL VIEW explode(t.join_array) lv AS exploded_val
WHERE t.id = 1
ORDER BY t.id, lv.exploded_val
PREHOOK: type: QUERY
PREHOOK: Input: default@tmp_join
#### A masked pattern was here ####
POSTHOOK: query: SELECT t.id, t.data, lv.exploded_val
FROM tmp_join t
LATERAL VIEW explode(t.join_array) lv AS exploded_val
WHERE t.id = 1
ORDER BY t.id, lv.exploded_val
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tmp_join
#### A masked pattern was here ####
1	data1	join_a
1	data1	join_b
PREHOOK: query: EXPLAIN CBO SELECT lv1.val1, lv2.val2, lv3.val3
FROM (SELECT array('x', 'y') AS arr) src
LATERAL VIEW explode(arr) lv1 AS val1
LATERAL VIEW explode(arr) lv2 AS val2
LATERAL VIEW explode(arr) lv3 AS val3
WHERE lv1.val1 != lv2.val2 AND lv2.val2 != lv3.val3
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN CBO SELECT lv1.val1, lv2.val2, lv3.val3
FROM (SELECT array('x', 'y') AS arr) src
LATERAL VIEW explode(arr) lv1 AS val1
LATERAL VIEW explode(arr) lv2 AS val2
LATERAL VIEW explode(arr) lv3 AS val3
WHERE lv1.val1 != lv2.val2 AND lv2.val2 != lv3.val3
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
CBO PLAN:
HiveProject(val1=[$1], val2=[$2], val3=[$3])
  HiveFilter(condition=[<>($2, $3)])
    HiveTableFunctionScan(invocation=[LATERAL(explode($0), $0, $1, $2)], rowType=[RecordType(VARCHAR(2147483647) ARRAY arr, VARCHAR(2147483647) lv1.val1, VARCHAR(2147483647) lv2.val2, VARCHAR(2147483647) lv3.val3)])
      HiveProject(arr=[$0], lv1.val1=[$1], lv2.val2=[$2])
        HiveFilter(condition=[<>($1, $2)])
          HiveTableFunctionScan(invocation=[LATERAL(explode($0), $0, $1)], rowType=[RecordType(VARCHAR(2147483647) ARRAY arr, VARCHAR(2147483647) lv1.val1, VARCHAR(2147483647) lv2.val2)])
            HiveProject(arr=[$0], lv1.val1=[$1])
              HiveTableFunctionScan(invocation=[LATERAL(explode($0), $0)], rowType=[RecordType(VARCHAR(2147483647) ARRAY arr, VARCHAR(2147483647) lv1.val1)])
                HiveProject(arr=[ARRAY(_UTF-16LE'x':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'y':VARCHAR(2147483647) CHARACTER SET "UTF-16LE")])
                  HiveTableScan(table=[[_dummy_database, _dummy_table]], table:alias=[_dummy_table])

PREHOOK: query: DROP TABLE src_lv_cart
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@src_lv_cart
PREHOOK: Output: database:default
PREHOOK: Output: default@src_lv_cart
POSTHOOK: query: DROP TABLE src_lv_cart
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@src_lv_cart
POSTHOOK: Output: database:default
POSTHOOK: Output: default@src_lv_cart
PREHOOK: query: DROP TABLE tmp_join
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@tmp_join
PREHOOK: Output: database:default
PREHOOK: Output: default@tmp_join
POSTHOOK: query: DROP TABLE tmp_join
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@tmp_join
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tmp_join
