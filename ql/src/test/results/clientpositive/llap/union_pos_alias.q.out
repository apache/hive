PREHOOK: query: explain 
select 'tst1' as key, count(1) as value from src s1
UNION ALL
select key, value from (select 'tst2' as key, count(1) as value from src s2 UNION ALL select 'tst3' as key, count(1) as value from src s3) s4
order by 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: explain 
select 'tst1' as key, count(1) as value from src s1
UNION ALL
select key, value from (select 'tst2' as key, count(1) as value from src s2 UNION ALL select 'tst3' as key, count(1) as value from src s3) s4
order by 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Union 3 (CONTAINS)
        Reducer 4 <- Union 3 (SIMPLE_EDGE)
        Reducer 6 <- Map 5 (CUSTOM_SIMPLE_EDGE), Union 3 (CONTAINS)
        Reducer 8 <- Map 7 (CUSTOM_SIMPLE_EDGE), Union 3 (CONTAINS)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: s1
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: s2
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: s3
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: 'tst1' (type: string), _col0 (type: bigint)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string)
                    null sort order: z
                    sort order: +
                    Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col1 (type: bigint)
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: bigint)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: 'tst2' (type: string), _col0 (type: bigint)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string)
                    null sort order: z
                    sort order: +
                    Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col1 (type: bigint)
        Reducer 8 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: 'tst3' (type: string), _col0 (type: bigint)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string)
                    null sort order: z
                    sort order: +
                    Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col1 (type: bigint)
        Union 3 
            Vertex: Union 3

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select 'tst1' as key, count(1) as value from src s1
UNION ALL
select key, value from (select 'tst2' as key, count(1) as value from src s2 UNION ALL select 'tst3' as key, count(1) as value from src s3) s4
order by 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select 'tst1' as key, count(1) as value from src s1
UNION ALL
select key, value from (select 'tst2' as key, count(1) as value from src s2 UNION ALL select 'tst3' as key, count(1) as value from src s3) s4
order by 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
tst1	500
tst2	500
tst3	500
PREHOOK: query: drop table src_10
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table src_10
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table src_10 as select * from src order by key, value limit 10
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@src
PREHOOK: Output: database:default
PREHOOK: Output: default@src_10
POSTHOOK: query: create table src_10 as select * from src order by key, value limit 10
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@src
POSTHOOK: Output: database:default
POSTHOOK: Output: default@src_10
POSTHOOK: Lineage: src_10.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: src_10.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: explain 
select key as value, value as key from src_10
UNION ALL
select 'test', value from src_10 s3
order by 2, 1 desc
PREHOOK: type: QUERY
PREHOOK: Input: default@src_10
#### A masked pattern was here ####
POSTHOOK: query: explain 
select key as value, value as key from src_10
UNION ALL
select 'test', value from src_10 s3
order by 2, 1 desc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src_10
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Union 2 (CONTAINS)
        Map 4 <- Union 2 (CONTAINS)
        Reducer 3 <- Union 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src_10
                  Statistics: Num rows: 10 Data size: 1760 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 1760 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: string), _col0 (type: string)
                      null sort order: za
                      sort order: +-
                      Statistics: Num rows: 20 Data size: 3540 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: s3
                  Statistics: Num rows: 10 Data size: 900 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: 'test' (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: string), _col0 (type: string)
                      null sort order: za
                      sort order: +-
                      Statistics: Num rows: 20 Data size: 3540 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey1 (type: string), KEY.reducesinkkey0 (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 20 Data size: 3560 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 20 Data size: 3560 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Union 2 
            Vertex: Union 2

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key as value, value as key from src_10
UNION ALL
select 'test', value from src_10 s3
order by 2, 1 desc
PREHOOK: type: QUERY
PREHOOK: Input: default@src_10
#### A masked pattern was here ####
POSTHOOK: query: select key as value, value as key from src_10
UNION ALL
select 'test', value from src_10 s3
order by 2, 1 desc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src_10
#### A masked pattern was here ####
0	val_0
0	val_0
0	val_0
10	val_10
100	val_100
100	val_100
103	val_103
103	val_103
104	val_104
104	val_104
test	val_0
test	val_0
test	val_0
test	val_10
test	val_100
test	val_100
test	val_103
test	val_103
test	val_104
test	val_104
PREHOOK: query: drop table src_10
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@src_10
PREHOOK: Output: default@src_10
POSTHOOK: query: drop table src_10
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@src_10
POSTHOOK: Output: default@src_10
PREHOOK: query: drop view v_n8
PREHOOK: type: DROPVIEW
POSTHOOK: query: drop view v_n8
POSTHOOK: type: DROPVIEW
PREHOOK: query: create view v_n8 as select key as k from src intersect all select key as k1 from src
PREHOOK: type: CREATEVIEW
PREHOOK: Input: default@src
PREHOOK: Output: database:default
PREHOOK: Output: default@v_n8
POSTHOOK: query: create view v_n8 as select key as k from src intersect all select key as k1 from src
POSTHOOK: type: CREATEVIEW
POSTHOOK: Input: default@src
POSTHOOK: Output: database:default
POSTHOOK: Output: default@v_n8
POSTHOOK: Lineage: v_n8.k SCRIPT [(src)src.null, (src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: desc formatted v_n8
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@v_n8
POSTHOOK: query: desc formatted v_n8
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@v_n8
# col_name            	data_type           	comment             
k                   	string              	                    
	 	 
# Detailed Table Information	 	 
Database:           	default             	 
#### A masked pattern was here ####
Retention:          	0                   	 
Table Type:         	VIRTUAL_VIEW        	 
Table Parameters:	 	 
	bucketing_version   	2                   
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	null                	 
InputFormat:        	org.apache.hadoop.mapred.TextInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	-1                  	 
Bucket Columns:     	[]                  	 
Sort Columns:       	[]                  	 
	 	 
# View Information	 	 
Original Query:     	select key as k from src intersect all select key as k1 from src	 
Expanded Query:     	select `src`.`key` as `k` from `default`.`src` intersect all select `src`.`key` as `k1` from `default`.`src`	 
PREHOOK: query: create table masking_test_n9 as select cast(key as int) as key, value from src
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@src
PREHOOK: Output: database:default
PREHOOK: Output: default@masking_test_n9
POSTHOOK: query: create table masking_test_n9 as select cast(key as int) as key, value from src
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@src
POSTHOOK: Output: database:default
POSTHOOK: Output: default@masking_test_n9
POSTHOOK: Lineage: masking_test_n9.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: masking_test_n9.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: explain
select * from masking_test_n9  union all select * from masking_test_n9
PREHOOK: type: QUERY
PREHOOK: Input: default@masking_test_n9
#### A masked pattern was here ####
POSTHOOK: query: explain
select * from masking_test_n9  union all select * from masking_test_n9
POSTHOOK: type: QUERY
POSTHOOK: Input: default@masking_test_n9
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Union 2 (CONTAINS)
        Map 3 <- Union 2 (CONTAINS)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: masking_test_n9
                  Statistics: Num rows: 500 Data size: 47500 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 47500 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 1000 Data size: 95000 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: masking_test_n9
                  Statistics: Num rows: 500 Data size: 47500 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 47500 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 1000 Data size: 95000 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Union 2 
            Vertex: Union 2

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from masking_test_n9  union all select * from masking_test_n9
PREHOOK: type: QUERY
PREHOOK: Input: default@masking_test_n9
#### A masked pattern was here ####
POSTHOOK: query: select * from masking_test_n9  union all select * from masking_test_n9
POSTHOOK: type: QUERY
POSTHOOK: Input: default@masking_test_n9
#### A masked pattern was here ####
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
10	val_10
10	val_10
100	val_100
100	val_100
100	val_100
100	val_100
103	val_103
103	val_103
103	val_103
103	val_103
104	val_104
104	val_104
104	val_104
104	val_104
105	val_105
105	val_105
11	val_11
11	val_11
111	val_111
111	val_111
113	val_113
113	val_113
113	val_113
113	val_113
114	val_114
114	val_114
116	val_116
116	val_116
118	val_118
118	val_118
118	val_118
118	val_118
119	val_119
119	val_119
119	val_119
119	val_119
119	val_119
119	val_119
12	val_12
12	val_12
12	val_12
12	val_12
120	val_120
120	val_120
120	val_120
120	val_120
125	val_125
125	val_125
125	val_125
125	val_125
126	val_126
126	val_126
128	val_128
128	val_128
128	val_128
128	val_128
128	val_128
128	val_128
129	val_129
129	val_129
129	val_129
129	val_129
131	val_131
131	val_131
133	val_133
133	val_133
134	val_134
134	val_134
134	val_134
134	val_134
136	val_136
136	val_136
137	val_137
137	val_137
137	val_137
137	val_137
138	val_138
138	val_138
138	val_138
138	val_138
138	val_138
138	val_138
138	val_138
138	val_138
143	val_143
143	val_143
145	val_145
145	val_145
146	val_146
146	val_146
146	val_146
146	val_146
149	val_149
149	val_149
149	val_149
149	val_149
15	val_15
15	val_15
15	val_15
15	val_15
150	val_150
150	val_150
152	val_152
152	val_152
152	val_152
152	val_152
153	val_153
153	val_153
155	val_155
155	val_155
156	val_156
156	val_156
157	val_157
157	val_157
158	val_158
158	val_158
160	val_160
160	val_160
162	val_162
162	val_162
163	val_163
163	val_163
164	val_164
164	val_164
164	val_164
164	val_164
165	val_165
165	val_165
165	val_165
165	val_165
166	val_166
166	val_166
167	val_167
167	val_167
167	val_167
167	val_167
167	val_167
167	val_167
168	val_168
168	val_168
169	val_169
169	val_169
169	val_169
169	val_169
169	val_169
169	val_169
169	val_169
169	val_169
17	val_17
17	val_17
170	val_170
170	val_170
172	val_172
172	val_172
172	val_172
172	val_172
174	val_174
174	val_174
174	val_174
174	val_174
175	val_175
175	val_175
175	val_175
175	val_175
176	val_176
176	val_176
176	val_176
176	val_176
177	val_177
177	val_177
178	val_178
178	val_178
179	val_179
179	val_179
179	val_179
179	val_179
18	val_18
18	val_18
18	val_18
18	val_18
180	val_180
180	val_180
181	val_181
181	val_181
183	val_183
183	val_183
186	val_186
186	val_186
187	val_187
187	val_187
187	val_187
187	val_187
187	val_187
187	val_187
189	val_189
189	val_189
19	val_19
19	val_19
190	val_190
190	val_190
191	val_191
191	val_191
191	val_191
191	val_191
192	val_192
192	val_192
193	val_193
193	val_193
193	val_193
193	val_193
193	val_193
193	val_193
194	val_194
194	val_194
195	val_195
195	val_195
195	val_195
195	val_195
196	val_196
196	val_196
197	val_197
197	val_197
197	val_197
197	val_197
199	val_199
199	val_199
199	val_199
199	val_199
199	val_199
199	val_199
2	val_2
2	val_2
20	val_20
20	val_20
200	val_200
200	val_200
200	val_200
200	val_200
201	val_201
201	val_201
202	val_202
202	val_202
203	val_203
203	val_203
203	val_203
203	val_203
205	val_205
205	val_205
205	val_205
205	val_205
207	val_207
207	val_207
207	val_207
207	val_207
208	val_208
208	val_208
208	val_208
208	val_208
208	val_208
208	val_208
209	val_209
209	val_209
209	val_209
209	val_209
213	val_213
213	val_213
213	val_213
213	val_213
214	val_214
214	val_214
216	val_216
216	val_216
216	val_216
216	val_216
217	val_217
217	val_217
217	val_217
217	val_217
218	val_218
218	val_218
219	val_219
219	val_219
219	val_219
219	val_219
221	val_221
221	val_221
221	val_221
221	val_221
222	val_222
222	val_222
223	val_223
223	val_223
223	val_223
223	val_223
224	val_224
224	val_224
224	val_224
224	val_224
226	val_226
226	val_226
228	val_228
228	val_228
229	val_229
229	val_229
229	val_229
229	val_229
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
233	val_233
233	val_233
233	val_233
233	val_233
235	val_235
235	val_235
237	val_237
237	val_237
237	val_237
237	val_237
238	val_238
238	val_238
238	val_238
238	val_238
239	val_239
239	val_239
239	val_239
239	val_239
24	val_24
24	val_24
24	val_24
24	val_24
241	val_241
241	val_241
242	val_242
242	val_242
242	val_242
242	val_242
244	val_244
244	val_244
247	val_247
247	val_247
248	val_248
248	val_248
249	val_249
249	val_249
252	val_252
252	val_252
255	val_255
255	val_255
255	val_255
255	val_255
256	val_256
256	val_256
256	val_256
256	val_256
257	val_257
257	val_257
258	val_258
258	val_258
26	val_26
26	val_26
26	val_26
26	val_26
260	val_260
260	val_260
262	val_262
262	val_262
263	val_263
263	val_263
265	val_265
265	val_265
265	val_265
265	val_265
266	val_266
266	val_266
27	val_27
27	val_27
272	val_272
272	val_272
272	val_272
272	val_272
273	val_273
273	val_273
273	val_273
273	val_273
273	val_273
273	val_273
274	val_274
274	val_274
275	val_275
275	val_275
277	val_277
277	val_277
277	val_277
277	val_277
277	val_277
277	val_277
277	val_277
277	val_277
278	val_278
278	val_278
278	val_278
278	val_278
28	val_28
28	val_28
280	val_280
280	val_280
280	val_280
280	val_280
281	val_281
281	val_281
281	val_281
281	val_281
282	val_282
282	val_282
282	val_282
282	val_282
283	val_283
283	val_283
284	val_284
284	val_284
285	val_285
285	val_285
286	val_286
286	val_286
287	val_287
287	val_287
288	val_288
288	val_288
288	val_288
288	val_288
289	val_289
289	val_289
291	val_291
291	val_291
292	val_292
292	val_292
296	val_296
296	val_296
298	val_298
298	val_298
298	val_298
298	val_298
298	val_298
298	val_298
30	val_30
30	val_30
302	val_302
302	val_302
305	val_305
305	val_305
306	val_306
306	val_306
307	val_307
307	val_307
307	val_307
307	val_307
308	val_308
308	val_308
309	val_309
309	val_309
309	val_309
309	val_309
310	val_310
310	val_310
311	val_311
311	val_311
311	val_311
311	val_311
311	val_311
311	val_311
315	val_315
315	val_315
316	val_316
316	val_316
316	val_316
316	val_316
316	val_316
316	val_316
317	val_317
317	val_317
317	val_317
317	val_317
318	val_318
318	val_318
318	val_318
318	val_318
318	val_318
318	val_318
321	val_321
321	val_321
321	val_321
321	val_321
322	val_322
322	val_322
322	val_322
322	val_322
323	val_323
323	val_323
325	val_325
325	val_325
325	val_325
325	val_325
327	val_327
327	val_327
327	val_327
327	val_327
327	val_327
327	val_327
33	val_33
33	val_33
331	val_331
331	val_331
331	val_331
331	val_331
332	val_332
332	val_332
333	val_333
333	val_333
333	val_333
333	val_333
335	val_335
335	val_335
336	val_336
336	val_336
338	val_338
338	val_338
339	val_339
339	val_339
34	val_34
34	val_34
341	val_341
341	val_341
342	val_342
342	val_342
342	val_342
342	val_342
344	val_344
344	val_344
344	val_344
344	val_344
345	val_345
345	val_345
348	val_348
348	val_348
348	val_348
348	val_348
348	val_348
348	val_348
348	val_348
348	val_348
348	val_348
348	val_348
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
351	val_351
351	val_351
353	val_353
353	val_353
353	val_353
353	val_353
356	val_356
356	val_356
360	val_360
360	val_360
362	val_362
362	val_362
364	val_364
364	val_364
365	val_365
365	val_365
366	val_366
366	val_366
367	val_367
367	val_367
367	val_367
367	val_367
368	val_368
368	val_368
369	val_369
369	val_369
369	val_369
369	val_369
369	val_369
369	val_369
37	val_37
37	val_37
37	val_37
37	val_37
373	val_373
373	val_373
374	val_374
374	val_374
375	val_375
375	val_375
377	val_377
377	val_377
378	val_378
378	val_378
379	val_379
379	val_379
382	val_382
382	val_382
382	val_382
382	val_382
384	val_384
384	val_384
384	val_384
384	val_384
384	val_384
384	val_384
386	val_386
386	val_386
389	val_389
389	val_389
392	val_392
392	val_392
393	val_393
393	val_393
394	val_394
394	val_394
395	val_395
395	val_395
395	val_395
395	val_395
396	val_396
396	val_396
396	val_396
396	val_396
396	val_396
396	val_396
397	val_397
397	val_397
397	val_397
397	val_397
399	val_399
399	val_399
399	val_399
399	val_399
4	val_4
4	val_4
400	val_400
400	val_400
401	val_401
401	val_401
401	val_401
401	val_401
401	val_401
401	val_401
401	val_401
401	val_401
401	val_401
401	val_401
402	val_402
402	val_402
403	val_403
403	val_403
403	val_403
403	val_403
403	val_403
403	val_403
404	val_404
404	val_404
404	val_404
404	val_404
406	val_406
406	val_406
406	val_406
406	val_406
406	val_406
406	val_406
406	val_406
406	val_406
407	val_407
407	val_407
409	val_409
409	val_409
409	val_409
409	val_409
409	val_409
409	val_409
41	val_41
41	val_41
411	val_411
411	val_411
413	val_413
413	val_413
413	val_413
413	val_413
414	val_414
414	val_414
414	val_414
414	val_414
417	val_417
417	val_417
417	val_417
417	val_417
417	val_417
417	val_417
418	val_418
418	val_418
419	val_419
419	val_419
42	val_42
42	val_42
42	val_42
42	val_42
421	val_421
421	val_421
424	val_424
424	val_424
424	val_424
424	val_424
427	val_427
427	val_427
429	val_429
429	val_429
429	val_429
429	val_429
43	val_43
43	val_43
430	val_430
430	val_430
430	val_430
430	val_430
430	val_430
430	val_430
431	val_431
431	val_431
431	val_431
431	val_431
431	val_431
431	val_431
432	val_432
432	val_432
435	val_435
435	val_435
436	val_436
436	val_436
437	val_437
437	val_437
438	val_438
438	val_438
438	val_438
438	val_438
438	val_438
438	val_438
439	val_439
439	val_439
439	val_439
439	val_439
44	val_44
44	val_44
443	val_443
443	val_443
444	val_444
444	val_444
446	val_446
446	val_446
448	val_448
448	val_448
449	val_449
449	val_449
452	val_452
452	val_452
453	val_453
453	val_453
454	val_454
454	val_454
454	val_454
454	val_454
454	val_454
454	val_454
455	val_455
455	val_455
457	val_457
457	val_457
458	val_458
458	val_458
458	val_458
458	val_458
459	val_459
459	val_459
459	val_459
459	val_459
460	val_460
460	val_460
462	val_462
462	val_462
462	val_462
462	val_462
463	val_463
463	val_463
463	val_463
463	val_463
466	val_466
466	val_466
466	val_466
466	val_466
466	val_466
466	val_466
467	val_467
467	val_467
468	val_468
468	val_468
468	val_468
468	val_468
468	val_468
468	val_468
468	val_468
468	val_468
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
47	val_47
47	val_47
470	val_470
470	val_470
472	val_472
472	val_472
475	val_475
475	val_475
477	val_477
477	val_477
478	val_478
478	val_478
478	val_478
478	val_478
479	val_479
479	val_479
480	val_480
480	val_480
480	val_480
480	val_480
480	val_480
480	val_480
481	val_481
481	val_481
482	val_482
482	val_482
483	val_483
483	val_483
484	val_484
484	val_484
485	val_485
485	val_485
487	val_487
487	val_487
489	val_489
489	val_489
489	val_489
489	val_489
489	val_489
489	val_489
489	val_489
489	val_489
490	val_490
490	val_490
491	val_491
491	val_491
492	val_492
492	val_492
492	val_492
492	val_492
493	val_493
493	val_493
494	val_494
494	val_494
495	val_495
495	val_495
496	val_496
496	val_496
497	val_497
497	val_497
498	val_498
498	val_498
498	val_498
498	val_498
498	val_498
498	val_498
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
51	val_51
51	val_51
51	val_51
51	val_51
53	val_53
53	val_53
54	val_54
54	val_54
57	val_57
57	val_57
58	val_58
58	val_58
58	val_58
58	val_58
64	val_64
64	val_64
65	val_65
65	val_65
66	val_66
66	val_66
67	val_67
67	val_67
67	val_67
67	val_67
69	val_69
69	val_69
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
72	val_72
72	val_72
72	val_72
72	val_72
74	val_74
74	val_74
76	val_76
76	val_76
76	val_76
76	val_76
77	val_77
77	val_77
78	val_78
78	val_78
8	val_8
8	val_8
80	val_80
80	val_80
82	val_82
82	val_82
83	val_83
83	val_83
83	val_83
83	val_83
84	val_84
84	val_84
84	val_84
84	val_84
85	val_85
85	val_85
86	val_86
86	val_86
87	val_87
87	val_87
9	val_9
9	val_9
90	val_90
90	val_90
90	val_90
90	val_90
90	val_90
90	val_90
92	val_92
92	val_92
95	val_95
95	val_95
95	val_95
95	val_95
96	val_96
96	val_96
97	val_97
97	val_97
97	val_97
97	val_97
98	val_98
98	val_98
98	val_98
98	val_98
PREHOOK: query: explain
select key as k1, value as v1 from masking_test_n9 where key > 0 intersect all select key as k2, value as v2 from masking_test_n9 where key > 0
PREHOOK: type: QUERY
PREHOOK: Input: default@masking_test_n9
#### A masked pattern was here ####
POSTHOOK: query: explain
select key as k1, value as v1 from masking_test_n9 where key > 0 intersect all select key as k2, value as v2 from masking_test_n9 where key > 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@masking_test_n9
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Union 3 (CONTAINS)
        Reducer 4 <- Union 3 (SIMPLE_EDGE)
        Reducer 6 <- Map 5 (SIMPLE_EDGE), Union 3 (CONTAINS)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: masking_test_n9
                  filterExpr: (key > 0) (type: boolean)
                  Statistics: Num rows: 500 Data size: 47500 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (key > 0) (type: boolean)
                    Statistics: Num rows: 500 Data size: 47500 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: int), value (type: string)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 307 Data size: 31621 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: string)
                        null sort order: zz
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: int), _col1 (type: string)
                        Statistics: Num rows: 307 Data size: 31621 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: masking_test_n9
                  filterExpr: (key > 0) (type: boolean)
                  Statistics: Num rows: 500 Data size: 47500 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (key > 0) (type: boolean)
                    Statistics: Num rows: 500 Data size: 47500 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: int), value (type: string)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 307 Data size: 31621 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: string)
                        null sort order: zz
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: int), _col1 (type: string)
                        Statistics: Num rows: 307 Data size: 31621 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: int), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 307 Data size: 31621 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: min(_col2), count(_col2)
                  keys: _col0 (type: int), _col1 (type: string)
                  minReductionHashAggr: 0.4
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 307 Data size: 34077 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: int), _col1 (type: string)
                    null sort order: zz
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: int), _col1 (type: string)
                    Statistics: Num rows: 307 Data size: 34077 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: bigint), _col3 (type: bigint)
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: min(VALUE._col0), count(VALUE._col1)
                keys: KEY._col0 (type: int), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 307 Data size: 34077 Basic stats: COMPLETE Column stats: COMPLETE
                Filter Operator
                  predicate: (_col3 = 2L) (type: boolean)
                  Statistics: Num rows: 1 Data size: 111 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col2 (type: bigint), _col0 (type: int), _col1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 103 Basic stats: COMPLETE Column stats: COMPLETE
                    UDTF Operator
                      Statistics: Num rows: 1 Data size: 103 Basic stats: COMPLETE Column stats: COMPLETE
                      function name: UDTFReplicateRows
                      Select Operator
                        expressions: col1 (type: int), col2 (type: string)
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                        File Output Operator
                          compressed: false
                          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                          table:
                              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: int), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 307 Data size: 31621 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: min(_col2), count(_col2)
                  keys: _col0 (type: int), _col1 (type: string)
                  minReductionHashAggr: 0.4
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 307 Data size: 34077 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: int), _col1 (type: string)
                    null sort order: zz
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: int), _col1 (type: string)
                    Statistics: Num rows: 307 Data size: 34077 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: bigint), _col3 (type: bigint)
        Union 3 
            Vertex: Union 3

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key as k1, value as v1 from masking_test_n9 where key > 0 intersect all select key as k2, value as v2 from masking_test_n9 where key > 0
PREHOOK: type: QUERY
PREHOOK: Input: default@masking_test_n9
#### A masked pattern was here ####
POSTHOOK: query: select key as k1, value as v1 from masking_test_n9 where key > 0 intersect all select key as k2, value as v2 from masking_test_n9 where key > 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@masking_test_n9
#### A masked pattern was here ####
10	val_10
100	val_100
100	val_100
103	val_103
103	val_103
104	val_104
104	val_104
105	val_105
11	val_11
111	val_111
113	val_113
113	val_113
114	val_114
116	val_116
118	val_118
118	val_118
119	val_119
119	val_119
119	val_119
12	val_12
12	val_12
120	val_120
120	val_120
125	val_125
125	val_125
126	val_126
128	val_128
128	val_128
128	val_128
129	val_129
129	val_129
131	val_131
133	val_133
134	val_134
134	val_134
136	val_136
137	val_137
137	val_137
138	val_138
138	val_138
138	val_138
138	val_138
143	val_143
145	val_145
146	val_146
146	val_146
149	val_149
149	val_149
15	val_15
15	val_15
150	val_150
152	val_152
152	val_152
153	val_153
155	val_155
156	val_156
157	val_157
158	val_158
160	val_160
162	val_162
163	val_163
164	val_164
164	val_164
165	val_165
165	val_165
166	val_166
167	val_167
167	val_167
167	val_167
168	val_168
169	val_169
169	val_169
169	val_169
169	val_169
17	val_17
170	val_170
172	val_172
172	val_172
174	val_174
174	val_174
175	val_175
175	val_175
176	val_176
176	val_176
177	val_177
178	val_178
179	val_179
179	val_179
18	val_18
18	val_18
180	val_180
181	val_181
183	val_183
186	val_186
187	val_187
187	val_187
187	val_187
189	val_189
19	val_19
190	val_190
191	val_191
191	val_191
192	val_192
193	val_193
193	val_193
193	val_193
194	val_194
195	val_195
195	val_195
196	val_196
197	val_197
197	val_197
199	val_199
199	val_199
199	val_199
2	val_2
20	val_20
200	val_200
200	val_200
201	val_201
202	val_202
203	val_203
203	val_203
205	val_205
205	val_205
207	val_207
207	val_207
208	val_208
208	val_208
208	val_208
209	val_209
209	val_209
213	val_213
213	val_213
214	val_214
216	val_216
216	val_216
217	val_217
217	val_217
218	val_218
219	val_219
219	val_219
221	val_221
221	val_221
222	val_222
223	val_223
223	val_223
224	val_224
224	val_224
226	val_226
228	val_228
229	val_229
229	val_229
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
233	val_233
233	val_233
235	val_235
237	val_237
237	val_237
238	val_238
238	val_238
239	val_239
239	val_239
24	val_24
24	val_24
241	val_241
242	val_242
242	val_242
244	val_244
247	val_247
248	val_248
249	val_249
252	val_252
255	val_255
255	val_255
256	val_256
256	val_256
257	val_257
258	val_258
26	val_26
26	val_26
260	val_260
262	val_262
263	val_263
265	val_265
265	val_265
266	val_266
27	val_27
272	val_272
272	val_272
273	val_273
273	val_273
273	val_273
274	val_274
275	val_275
277	val_277
277	val_277
277	val_277
277	val_277
278	val_278
278	val_278
28	val_28
280	val_280
280	val_280
281	val_281
281	val_281
282	val_282
282	val_282
283	val_283
284	val_284
285	val_285
286	val_286
287	val_287
288	val_288
288	val_288
289	val_289
291	val_291
292	val_292
296	val_296
298	val_298
298	val_298
298	val_298
30	val_30
302	val_302
305	val_305
306	val_306
307	val_307
307	val_307
308	val_308
309	val_309
309	val_309
310	val_310
311	val_311
311	val_311
311	val_311
315	val_315
316	val_316
316	val_316
316	val_316
317	val_317
317	val_317
318	val_318
318	val_318
318	val_318
321	val_321
321	val_321
322	val_322
322	val_322
323	val_323
325	val_325
325	val_325
327	val_327
327	val_327
327	val_327
33	val_33
331	val_331
331	val_331
332	val_332
333	val_333
333	val_333
335	val_335
336	val_336
338	val_338
339	val_339
34	val_34
341	val_341
342	val_342
342	val_342
344	val_344
344	val_344
345	val_345
348	val_348
348	val_348
348	val_348
348	val_348
348	val_348
35	val_35
35	val_35
35	val_35
351	val_351
353	val_353
353	val_353
356	val_356
360	val_360
362	val_362
364	val_364
365	val_365
366	val_366
367	val_367
367	val_367
368	val_368
369	val_369
369	val_369
369	val_369
37	val_37
37	val_37
373	val_373
374	val_374
375	val_375
377	val_377
378	val_378
379	val_379
382	val_382
382	val_382
384	val_384
384	val_384
384	val_384
386	val_386
389	val_389
392	val_392
393	val_393
394	val_394
395	val_395
395	val_395
396	val_396
396	val_396
396	val_396
397	val_397
397	val_397
399	val_399
399	val_399
4	val_4
400	val_400
401	val_401
401	val_401
401	val_401
401	val_401
401	val_401
402	val_402
403	val_403
403	val_403
403	val_403
404	val_404
404	val_404
406	val_406
406	val_406
406	val_406
406	val_406
407	val_407
409	val_409
409	val_409
409	val_409
41	val_41
411	val_411
413	val_413
413	val_413
414	val_414
414	val_414
417	val_417
417	val_417
417	val_417
418	val_418
419	val_419
42	val_42
42	val_42
421	val_421
424	val_424
424	val_424
427	val_427
429	val_429
429	val_429
43	val_43
430	val_430
430	val_430
430	val_430
431	val_431
431	val_431
431	val_431
432	val_432
435	val_435
436	val_436
437	val_437
438	val_438
438	val_438
438	val_438
439	val_439
439	val_439
44	val_44
443	val_443
444	val_444
446	val_446
448	val_448
449	val_449
452	val_452
453	val_453
454	val_454
454	val_454
454	val_454
455	val_455
457	val_457
458	val_458
458	val_458
459	val_459
459	val_459
460	val_460
462	val_462
462	val_462
463	val_463
463	val_463
466	val_466
466	val_466
466	val_466
467	val_467
468	val_468
468	val_468
468	val_468
468	val_468
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
47	val_47
470	val_470
472	val_472
475	val_475
477	val_477
478	val_478
478	val_478
479	val_479
480	val_480
480	val_480
480	val_480
481	val_481
482	val_482
483	val_483
484	val_484
485	val_485
487	val_487
489	val_489
489	val_489
489	val_489
489	val_489
490	val_490
491	val_491
492	val_492
492	val_492
493	val_493
494	val_494
495	val_495
496	val_496
497	val_497
498	val_498
498	val_498
498	val_498
5	val_5
5	val_5
5	val_5
51	val_51
51	val_51
53	val_53
54	val_54
57	val_57
58	val_58
58	val_58
64	val_64
65	val_65
66	val_66
67	val_67
67	val_67
69	val_69
70	val_70
70	val_70
70	val_70
72	val_72
72	val_72
74	val_74
76	val_76
76	val_76
77	val_77
78	val_78
8	val_8
80	val_80
82	val_82
83	val_83
83	val_83
84	val_84
84	val_84
85	val_85
86	val_86
87	val_87
9	val_9
90	val_90
90	val_90
90	val_90
92	val_92
95	val_95
95	val_95
96	val_96
97	val_97
97	val_97
98	val_98
98	val_98
