PREHOOK: query: show partitions srcpart
PREHOOK: type: SHOWPARTITIONS
PREHOOK: Input: default@srcpart
POSTHOOK: query: show partitions srcpart
POSTHOOK: type: SHOWPARTITIONS
POSTHOOK: Input: default@srcpart
ds=2008-04-08/hr=11
ds=2008-04-08/hr=12
ds=2008-04-09/hr=11
ds=2008-04-09/hr=12
PREHOOK: query: create table if not exists nzhang_part13 like srcpart
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@nzhang_part13
POSTHOOK: query: create table if not exists nzhang_part13 like srcpart
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@nzhang_part13
PREHOOK: query: describe extended nzhang_part13
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@nzhang_part13
POSTHOOK: query: describe extended nzhang_part13
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@nzhang_part13
key                 	string              	default             
value               	string              	default             
ds                  	string              	                    
hr                  	string              	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
ds                  	string              	                    
hr                  	string              	                    
	 	 
#### A masked pattern was here ####
PREHOOK: query: explain
insert overwrite table nzhang_part13 partition (ds="2010-03-03", hr) 
select * from (
   select key, value, '22'
   from src
   where key < 20
   union all 
   select key, value, '33'
   from src 
   where key > 20 and key < 40) s
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@nzhang_part13@ds=2010-03-03
POSTHOOK: query: explain
insert overwrite table nzhang_part13 partition (ds="2010-03-03", hr) 
select * from (
   select key, value, '22'
   from src
   where key < 20
   union all 
   select key, value, '33'
   from src 
   where key > 20 and key < 40) s
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Union 2 (CONTAINS)
        Map 4 <- Union 2 (CONTAINS)
        Reducer 3 <- Union 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  filterExpr: (UDFToDouble(key) < 20.0D) (type: boolean)
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (UDFToDouble(key) < 20.0D) (type: boolean)
                    Statistics: Num rows: 166 Data size: 29548 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: string), value (type: string), '22' (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 166 Data size: 43824 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 221 Data size: 58344 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.TextInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                            name: default.nzhang_part13
                      Select Operator
                        expressions: _col0 (type: string), _col1 (type: string), '2010-03-03' (type: string), _col2 (type: string)
                        outputColumnNames: key, value, ds, hr
                        Statistics: Num rows: 221 Data size: 79118 Basic stats: COMPLETE Column stats: COMPLETE
                        Group By Operator
                          aggregations: max(length(key)), avg(COALESCE(length(key),0)), count(1), count(key), compute_bit_vector_hll(key), max(length(value)), avg(COALESCE(length(value),0)), count(value), compute_bit_vector_hll(value)
                          keys: ds (type: string), hr (type: string)
                          minReductionHashAggr: 0.99
                          mode: hash
                          outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10
                          Statistics: Num rows: 1 Data size: 652 Basic stats: COMPLETE Column stats: COMPLETE
                          Reduce Output Operator
                            key expressions: _col0 (type: string), _col1 (type: string)
                            null sort order: zz
                            sort order: ++
                            Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                            Statistics: Num rows: 1 Data size: 652 Basic stats: COMPLETE Column stats: COMPLETE
                            value expressions: _col2 (type: int), _col3 (type: struct<count:bigint,sum:double,input:int>), _col4 (type: bigint), _col5 (type: bigint), _col6 (type: binary), _col7 (type: int), _col8 (type: struct<count:bigint,sum:double,input:int>), _col9 (type: bigint), _col10 (type: binary)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: src
                  filterExpr: ((UDFToDouble(key) > 20.0D) and (UDFToDouble(key) < 40.0D)) (type: boolean)
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((UDFToDouble(key) > 20.0D) and (UDFToDouble(key) < 40.0D)) (type: boolean)
                    Statistics: Num rows: 55 Data size: 9790 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: string), value (type: string), '33' (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 55 Data size: 14520 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 221 Data size: 58344 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.TextInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                            name: default.nzhang_part13
                      Select Operator
                        expressions: _col0 (type: string), _col1 (type: string), '2010-03-03' (type: string), _col2 (type: string)
                        outputColumnNames: key, value, ds, hr
                        Statistics: Num rows: 221 Data size: 79118 Basic stats: COMPLETE Column stats: COMPLETE
                        Group By Operator
                          aggregations: max(length(key)), avg(COALESCE(length(key),0)), count(1), count(key), compute_bit_vector_hll(key), max(length(value)), avg(COALESCE(length(value),0)), count(value), compute_bit_vector_hll(value)
                          keys: ds (type: string), hr (type: string)
                          minReductionHashAggr: 0.99
                          mode: hash
                          outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10
                          Statistics: Num rows: 1 Data size: 652 Basic stats: COMPLETE Column stats: COMPLETE
                          Reduce Output Operator
                            key expressions: _col0 (type: string), _col1 (type: string)
                            null sort order: zz
                            sort order: ++
                            Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                            Statistics: Num rows: 1 Data size: 652 Basic stats: COMPLETE Column stats: COMPLETE
                            value expressions: _col2 (type: int), _col3 (type: struct<count:bigint,sum:double,input:int>), _col4 (type: bigint), _col5 (type: bigint), _col6 (type: binary), _col7 (type: int), _col8 (type: struct<count:bigint,sum:double,input:int>), _col9 (type: bigint), _col10 (type: binary)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0), avg(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector_hll(VALUE._col4), max(VALUE._col5), avg(VALUE._col6), count(VALUE._col7), compute_bit_vector_hll(VALUE._col8)
                keys: KEY._col0 (type: string), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10
                Statistics: Num rows: 1 Data size: 516 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: 'STRING' (type: string), UDFToLong(COALESCE(_col2,0)) (type: bigint), COALESCE(_col3,0) (type: double), (_col4 - _col5) (type: bigint), COALESCE(ndv_compute_bit_vector(_col6),0) (type: bigint), _col6 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col7,0)) (type: bigint), COALESCE(_col8,0) (type: double), (_col4 - _col9) (type: bigint), COALESCE(ndv_compute_bit_vector(_col10),0) (type: bigint), _col10 (type: binary), _col0 (type: string), _col1 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                  Statistics: Num rows: 1 Data size: 712 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 712 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Union 2 
            Vertex: Union 2

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds 2010-03-03
            hr 
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.nzhang_part13

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key, value
          Column Types: string, string
          Table: default.nzhang_part13

PREHOOK: query: insert overwrite table nzhang_part13 partition (ds="2010-03-03", hr) 
select * from (
   select key, value, '22'
   from src
   where key < 20
   union all 
   select key, value, '33'
   from src 
   where key > 20 and key < 40) s
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@nzhang_part13@ds=2010-03-03
POSTHOOK: query: insert overwrite table nzhang_part13 partition (ds="2010-03-03", hr) 
select * from (
   select key, value, '22'
   from src
   where key < 20
   union all 
   select key, value, '33'
   from src 
   where key > 20 and key < 40) s
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@nzhang_part13@ds=2010-03-03/hr=22
POSTHOOK: Output: default@nzhang_part13@ds=2010-03-03/hr=33
POSTHOOK: Lineage: nzhang_part13 PARTITION(ds=2010-03-03,hr=22).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: nzhang_part13 PARTITION(ds=2010-03-03,hr=22).value EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: nzhang_part13 PARTITION(ds=2010-03-03,hr=33).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: nzhang_part13 PARTITION(ds=2010-03-03,hr=33).value EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: show partitions nzhang_part13
PREHOOK: type: SHOWPARTITIONS
PREHOOK: Input: default@nzhang_part13
POSTHOOK: query: show partitions nzhang_part13
POSTHOOK: type: SHOWPARTITIONS
POSTHOOK: Input: default@nzhang_part13
ds=2010-03-03/hr=22
ds=2010-03-03/hr=33
PREHOOK: query: select * from nzhang_part13 where ds is not null and hr is not null
PREHOOK: type: QUERY
PREHOOK: Input: default@nzhang_part13
PREHOOK: Input: default@nzhang_part13@ds=2010-03-03/hr=22
PREHOOK: Input: default@nzhang_part13@ds=2010-03-03/hr=33
#### A masked pattern was here ####
POSTHOOK: query: select * from nzhang_part13 where ds is not null and hr is not null
POSTHOOK: type: QUERY
POSTHOOK: Input: default@nzhang_part13
POSTHOOK: Input: default@nzhang_part13@ds=2010-03-03/hr=22
POSTHOOK: Input: default@nzhang_part13@ds=2010-03-03/hr=33
#### A masked pattern was here ####
15	val_15	2010-03-03	22
17	val_17	2010-03-03	22
0	val_0	2010-03-03	22
4	val_4	2010-03-03	22
12	val_12	2010-03-03	22
8	val_8	2010-03-03	22
0	val_0	2010-03-03	22
0	val_0	2010-03-03	22
15	val_15	2010-03-03	22
19	val_19	2010-03-03	22
10	val_10	2010-03-03	22
5	val_5	2010-03-03	22
11	val_11	2010-03-03	22
5	val_5	2010-03-03	22
2	val_2	2010-03-03	22
12	val_12	2010-03-03	22
5	val_5	2010-03-03	22
18	val_18	2010-03-03	22
9	val_9	2010-03-03	22
18	val_18	2010-03-03	22
27	val_27	2010-03-03	33
37	val_37	2010-03-03	33
35	val_35	2010-03-03	33
24	val_24	2010-03-03	33
26	val_26	2010-03-03	33
35	val_35	2010-03-03	33
34	val_34	2010-03-03	33
30	val_30	2010-03-03	33
33	val_33	2010-03-03	33
35	val_35	2010-03-03	33
24	val_24	2010-03-03	33
26	val_26	2010-03-03	33
28	val_28	2010-03-03	33
37	val_37	2010-03-03	33
