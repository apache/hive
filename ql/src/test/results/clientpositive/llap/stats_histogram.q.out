PREHOOK: query: CREATE TABLE test_stats (a string, b int, c double, d float, e decimal(5,2), f timestamp, g date)
STORED AS ORC
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_stats
POSTHOOK: query: CREATE TABLE test_stats (a string, b int, c double, d float, e decimal(5,2), f timestamp, g date)
STORED AS ORC
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_stats
PREHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("a", 2, 1.1, 12.2, 1.3, "2020-11-2 00:00:00", "2020-11-2")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_stats
POSTHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("a", 2, 1.1, 12.2, 1.3, "2020-11-2 00:00:00", "2020-11-2")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_stats
POSTHOOK: Lineage: test_stats.a SCRIPT []
POSTHOOK: Lineage: test_stats.b SCRIPT []
POSTHOOK: Lineage: test_stats.c SCRIPT []
POSTHOOK: Lineage: test_stats.d SCRIPT []
POSTHOOK: Lineage: test_stats.e SCRIPT []
POSTHOOK: Lineage: test_stats.f SCRIPT []
POSTHOOK: Lineage: test_stats.g SCRIPT []
PREHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("b", 2, 2.1, NULL, 6.3, "2020-11-2 00:00:00", "2020-11-2")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_stats
POSTHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("b", 2, 2.1, NULL, 6.3, "2020-11-2 00:00:00", "2020-11-2")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_stats
POSTHOOK: Lineage: test_stats.a SCRIPT []
POSTHOOK: Lineage: test_stats.b SCRIPT []
POSTHOOK: Lineage: test_stats.c SCRIPT []
POSTHOOK: Lineage: test_stats.d EXPRESSION []
POSTHOOK: Lineage: test_stats.e SCRIPT []
POSTHOOK: Lineage: test_stats.f SCRIPT []
POSTHOOK: Lineage: test_stats.g SCRIPT []
PREHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("c", 2, 2.1, NULL, -8.3, "2020-11-2 00:00:00", "2020-11-02")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_stats
POSTHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("c", 2, 2.1, NULL, -8.3, "2020-11-2 00:00:00", "2020-11-02")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_stats
POSTHOOK: Lineage: test_stats.a SCRIPT []
POSTHOOK: Lineage: test_stats.b SCRIPT []
POSTHOOK: Lineage: test_stats.c SCRIPT []
POSTHOOK: Lineage: test_stats.d EXPRESSION []
POSTHOOK: Lineage: test_stats.e SCRIPT []
POSTHOOK: Lineage: test_stats.f SCRIPT []
POSTHOOK: Lineage: test_stats.g SCRIPT []
PREHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("d", 2, 3.1, 13.2, 10.2, "2020-11-2 00:00:00", "2020-11-2")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_stats
POSTHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("d", 2, 3.1, 13.2, 10.2, "2020-11-2 00:00:00", "2020-11-2")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_stats
POSTHOOK: Lineage: test_stats.a SCRIPT []
POSTHOOK: Lineage: test_stats.b SCRIPT []
POSTHOOK: Lineage: test_stats.c SCRIPT []
POSTHOOK: Lineage: test_stats.d SCRIPT []
POSTHOOK: Lineage: test_stats.e SCRIPT []
POSTHOOK: Lineage: test_stats.f SCRIPT []
POSTHOOK: Lineage: test_stats.g SCRIPT []
PREHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("e", 2, 3.1, 14.2, 10.2, "2020-11-02 00:00:00", "2020-11-2")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_stats
POSTHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("e", 2, 3.1, 14.2, 10.2, "2020-11-02 00:00:00", "2020-11-2")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_stats
POSTHOOK: Lineage: test_stats.a SCRIPT []
POSTHOOK: Lineage: test_stats.b SCRIPT []
POSTHOOK: Lineage: test_stats.c SCRIPT []
POSTHOOK: Lineage: test_stats.d SCRIPT []
POSTHOOK: Lineage: test_stats.e SCRIPT []
POSTHOOK: Lineage: test_stats.f SCRIPT []
POSTHOOK: Lineage: test_stats.g SCRIPT []
PREHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("f", 2, 4.1, NULL, 12.2, "2020-11-2 00:00:00", "2020-11-2")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_stats
POSTHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("f", 2, 4.1, NULL, 12.2, "2020-11-2 00:00:00", "2020-11-2")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_stats
POSTHOOK: Lineage: test_stats.a SCRIPT []
POSTHOOK: Lineage: test_stats.b SCRIPT []
POSTHOOK: Lineage: test_stats.c SCRIPT []
POSTHOOK: Lineage: test_stats.d EXPRESSION []
POSTHOOK: Lineage: test_stats.e SCRIPT []
POSTHOOK: Lineage: test_stats.f SCRIPT []
POSTHOOK: Lineage: test_stats.g SCRIPT []
PREHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("g", 2, 5.1, 15.2, -10.2, "2020-11-2 00:00:00", "2020-11-2")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_stats
POSTHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("g", 2, 5.1, 15.2, -10.2, "2020-11-2 00:00:00", "2020-11-2")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_stats
POSTHOOK: Lineage: test_stats.a SCRIPT []
POSTHOOK: Lineage: test_stats.b SCRIPT []
POSTHOOK: Lineage: test_stats.c SCRIPT []
POSTHOOK: Lineage: test_stats.d SCRIPT []
POSTHOOK: Lineage: test_stats.e SCRIPT []
POSTHOOK: Lineage: test_stats.f SCRIPT []
POSTHOOK: Lineage: test_stats.g SCRIPT []
PREHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("h", 2, 6.1, 16.2, 12.2, "2020-11-2 00:00:00", "2020-11-2")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_stats
POSTHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("h", 2, 6.1, 16.2, 12.2, "2020-11-2 00:00:00", "2020-11-2")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_stats
POSTHOOK: Lineage: test_stats.a SCRIPT []
POSTHOOK: Lineage: test_stats.b SCRIPT []
POSTHOOK: Lineage: test_stats.c SCRIPT []
POSTHOOK: Lineage: test_stats.d SCRIPT []
POSTHOOK: Lineage: test_stats.e SCRIPT []
POSTHOOK: Lineage: test_stats.f SCRIPT []
POSTHOOK: Lineage: test_stats.g SCRIPT []
PREHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("i", 3, 6.1, 17.2, 7.2, "2020-11-03 00:00:00", "2020-11-3")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_stats
POSTHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("i", 3, 6.1, 17.2, 7.2, "2020-11-03 00:00:00", "2020-11-3")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_stats
POSTHOOK: Lineage: test_stats.a SCRIPT []
POSTHOOK: Lineage: test_stats.b SCRIPT []
POSTHOOK: Lineage: test_stats.c SCRIPT []
POSTHOOK: Lineage: test_stats.d SCRIPT []
POSTHOOK: Lineage: test_stats.e SCRIPT []
POSTHOOK: Lineage: test_stats.f SCRIPT []
POSTHOOK: Lineage: test_stats.g SCRIPT []
PREHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("j", 4, NULL, 20.2, 1.2, "2020-11-4 00:00:00", "2020-11-4")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_stats
POSTHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("j", 4, NULL, 20.2, 1.2, "2020-11-4 00:00:00", "2020-11-4")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_stats
POSTHOOK: Lineage: test_stats.a SCRIPT []
POSTHOOK: Lineage: test_stats.b SCRIPT []
POSTHOOK: Lineage: test_stats.c EXPRESSION []
POSTHOOK: Lineage: test_stats.d SCRIPT []
POSTHOOK: Lineage: test_stats.e SCRIPT []
POSTHOOK: Lineage: test_stats.f SCRIPT []
POSTHOOK: Lineage: test_stats.g SCRIPT []
PREHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("k", 5, NULL, 50.2, -123.2, "2020-11-5 00:00:00", "2020-11-05")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_stats
POSTHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("k", 5, NULL, 50.2, -123.2, "2020-11-5 00:00:00", "2020-11-05")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_stats
POSTHOOK: Lineage: test_stats.a SCRIPT []
POSTHOOK: Lineage: test_stats.b SCRIPT []
POSTHOOK: Lineage: test_stats.c EXPRESSION []
POSTHOOK: Lineage: test_stats.d SCRIPT []
POSTHOOK: Lineage: test_stats.e SCRIPT []
POSTHOOK: Lineage: test_stats.f SCRIPT []
POSTHOOK: Lineage: test_stats.g SCRIPT []
PREHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("l", 6, NULL, 55.2, 1.2, "2020-11-6 00:00:00", "2020-11-6")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_stats
POSTHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("l", 6, NULL, 55.2, 1.2, "2020-11-6 00:00:00", "2020-11-6")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_stats
POSTHOOK: Lineage: test_stats.a SCRIPT []
POSTHOOK: Lineage: test_stats.b SCRIPT []
POSTHOOK: Lineage: test_stats.c EXPRESSION []
POSTHOOK: Lineage: test_stats.d SCRIPT []
POSTHOOK: Lineage: test_stats.e SCRIPT []
POSTHOOK: Lineage: test_stats.f SCRIPT []
POSTHOOK: Lineage: test_stats.g SCRIPT []
PREHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("m", 7, 9.1, 57.2, 1001.2, "2020-11-7 00:00:00", "2020-11-7")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_stats
POSTHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("m", 7, 9.1, 57.2, 1001.2, "2020-11-7 00:00:00", "2020-11-7")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_stats
POSTHOOK: Lineage: test_stats.a SCRIPT []
POSTHOOK: Lineage: test_stats.b SCRIPT []
POSTHOOK: Lineage: test_stats.c SCRIPT []
POSTHOOK: Lineage: test_stats.d SCRIPT []
POSTHOOK: Lineage: test_stats.e SCRIPT []
POSTHOOK: Lineage: test_stats.f SCRIPT []
POSTHOOK: Lineage: test_stats.g SCRIPT []
PREHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("n", NULL, 100.1, 1000.2, 0.2, NULL, NULL)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_stats
POSTHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("n", NULL, 100.1, 1000.2, 0.2, NULL, NULL)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_stats
POSTHOOK: Lineage: test_stats.a SCRIPT []
POSTHOOK: Lineage: test_stats.b EXPRESSION []
POSTHOOK: Lineage: test_stats.c SCRIPT []
POSTHOOK: Lineage: test_stats.d SCRIPT []
POSTHOOK: Lineage: test_stats.e SCRIPT []
POSTHOOK: Lineage: test_stats.f EXPRESSION []
POSTHOOK: Lineage: test_stats.g EXPRESSION []
PREHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("o", NULL, 101.1, 2000.2, -1.2, NULL, NULL)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_stats
POSTHOOK: query: INSERT INTO test_stats (a, b, c, d, e, f, g) VALUES ("o", NULL, 101.1, 2000.2, -1.2, NULL, NULL)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_stats
POSTHOOK: Lineage: test_stats.a SCRIPT []
POSTHOOK: Lineage: test_stats.b EXPRESSION []
POSTHOOK: Lineage: test_stats.c SCRIPT []
POSTHOOK: Lineage: test_stats.d SCRIPT []
POSTHOOK: Lineage: test_stats.e SCRIPT []
POSTHOOK: Lineage: test_stats.f EXPRESSION []
POSTHOOK: Lineage: test_stats.g EXPRESSION []
PREHOOK: query: DESCRIBE FORMATTED test_stats
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@test_stats
POSTHOOK: query: DESCRIBE FORMATTED test_stats
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@test_stats
# col_name            	data_type           	comment             
a                   	string              	                    
b                   	int                 	                    
c                   	double              	                    
d                   	float               	                    
e                   	decimal(5,2)        	                    
f                   	timestamp           	                    
g                   	date                	                    
	 	 
# Detailed Table Information	 	 
Database:           	default             	 
#### A masked pattern was here ####
Retention:          	0                   	 
#### A masked pattern was here ####
Table Type:         	MANAGED_TABLE       	 
Table Parameters:	 	 
	COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"a\":\"true\",\"b\":\"true\",\"c\":\"true\",\"d\":\"true\",\"e\":\"true\",\"f\":\"true\",\"g\":\"true\"}}
	bucketing_version   	2                   
	numFiles            	15                  
	numRows             	15                  
	rawDataSize         	4287                
	totalSize           	11142               
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.ql.io.orc.OrcSerde	 
InputFormat:        	org.apache.hadoop.hive.ql.io.orc.OrcInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	-1                  	 
Bucket Columns:     	[]                  	 
Sort Columns:       	[]                  	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: DESCRIBE FORMATTED test_stats a
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@test_stats
POSTHOOK: query: DESCRIBE FORMATTED test_stats a
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@test_stats
col_name            	a                   
data_type           	string              
min                 	                    
max                 	                    
num_nulls           	0                   
distinct_count      	15                  
avg_col_len         	1.0                 
max_col_len         	1                   
num_trues           	                    
num_falses          	                    
bit_vector          	HL                  
histogram           	                    
comment             	from deserializer   
COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"a\":\"true\",\"b\":\"true\",\"c\":\"true\",\"d\":\"true\",\"e\":\"true\",\"f\":\"true\",\"g\":\"true\"}}
PREHOOK: query: DESCRIBE FORMATTED test_stats b
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@test_stats
POSTHOOK: query: DESCRIBE FORMATTED test_stats b
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@test_stats
col_name            	b                   
data_type           	int                 
min                 	2                   
max                 	7                   
num_nulls           	2                   
distinct_count      	6                   
avg_col_len         	                    
max_col_len         	                    
num_trues           	                    
num_falses          	                    
bit_vector          	HL                  
histogram           	Q1: 2, Q2: 2, Q3: 4 
comment             	from deserializer   
COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"a\":\"true\",\"b\":\"true\",\"c\":\"true\",\"d\":\"true\",\"e\":\"true\",\"f\":\"true\",\"g\":\"true\"}}
PREHOOK: query: DESCRIBE FORMATTED test_stats c
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@test_stats
POSTHOOK: query: DESCRIBE FORMATTED test_stats c
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@test_stats
col_name            	c                   
data_type           	double              
min                 	1.1                 
max                 	101.1               
num_nulls           	3                   
distinct_count      	9                   
avg_col_len         	                    
max_col_len         	                    
num_trues           	                    
num_falses          	                    
bit_vector          	HL                  
histogram           	Q1: 3.1, Q2: 5.1, Q3: 9.1
comment             	from deserializer   
COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"a\":\"true\",\"b\":\"true\",\"c\":\"true\",\"d\":\"true\",\"e\":\"true\",\"f\":\"true\",\"g\":\"true\"}}
PREHOOK: query: DESCRIBE FORMATTED test_stats d
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@test_stats
POSTHOOK: query: DESCRIBE FORMATTED test_stats d
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@test_stats
col_name            	d                   
data_type           	float               
min                 	12.199999809265137  
max                 	2000.199951171875   
num_nulls           	3                   
distinct_count      	12                  
avg_col_len         	                    
max_col_len         	                    
num_trues           	                    
num_falses          	                    
bit_vector          	HL                  
histogram           	Q1: 15.2, Q2: 20.2, Q3: 57.2
comment             	from deserializer   
COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"a\":\"true\",\"b\":\"true\",\"c\":\"true\",\"d\":\"true\",\"e\":\"true\",\"f\":\"true\",\"g\":\"true\"}}
PREHOOK: query: DESCRIBE FORMATTED test_stats e
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@test_stats
POSTHOOK: query: DESCRIBE FORMATTED test_stats e
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@test_stats
col_name            	e                   
data_type           	decimal(5,2)        
min                 	-10.2               
max                 	12.2                
num_nulls           	1                   
distinct_count      	11                  
avg_col_len         	                    
max_col_len         	                    
num_trues           	                    
num_falses          	                    
bit_vector          	HL                  
histogram           	Q1: -1.2, Q2: 1.3, Q3: 10.2
comment             	from deserializer   
COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"a\":\"true\",\"b\":\"true\",\"c\":\"true\",\"d\":\"true\",\"e\":\"true\",\"f\":\"true\",\"g\":\"true\"}}
PREHOOK: query: DESCRIBE FORMATTED test_stats f
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@test_stats
POSTHOOK: query: DESCRIBE FORMATTED test_stats f
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@test_stats
col_name            	f                   
data_type           	timestamp           
min                 	2020-11-02 00:00:00 
max                 	2020-11-07 00:00:00 
num_nulls           	2                   
distinct_count      	6                   
avg_col_len         	                    
max_col_len         	                    
num_trues           	                    
num_falses          	                    
bit_vector          	HL                  
histogram           	Q1: 2020-11-02 00:00:00, Q2: 2020-11-02 00:00:00, Q3: 2020-11-04 00:00:00
comment             	from deserializer   
COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"a\":\"true\",\"b\":\"true\",\"c\":\"true\",\"d\":\"true\",\"e\":\"true\",\"f\":\"true\",\"g\":\"true\"}}
PREHOOK: query: DESCRIBE FORMATTED test_stats g
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@test_stats
POSTHOOK: query: DESCRIBE FORMATTED test_stats g
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@test_stats
col_name            	g                   
data_type           	date                
min                 	2020-11-02          
max                 	2020-11-07          
num_nulls           	2                   
distinct_count      	6                   
avg_col_len         	                    
max_col_len         	                    
num_trues           	                    
num_falses          	                    
bit_vector          	HL                  
histogram           	Q1: 2020-11-02, Q2: 2020-11-02, Q3: 2020-11-04
comment             	from deserializer   
COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"a\":\"true\",\"b\":\"true\",\"c\":\"true\",\"d\":\"true\",\"e\":\"true\",\"f\":\"true\",\"g\":\"true\"}}
PREHOOK: query: EXPLAIN SELECT COUNT(*)
FROM test_stats t1 JOIN test_stats t2 ON (t1.a = t2.a)
WHERE t1.b BETWEEN 3 AND 5 AND t2.c > 6.0
PREHOOK: type: QUERY
PREHOOK: Input: default@test_stats
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN SELECT COUNT(*)
FROM test_stats t1 JOIN test_stats t2 ON (t1.a = t2.a)
WHERE t1.b BETWEEN 3 AND 5 AND t2.c > 6.0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_stats
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1
                  filterExpr: (b BETWEEN 3 AND 5 and a is not null) (type: boolean)
                  Statistics: Num rows: 15 Data size: 1331 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (b BETWEEN 3 AND 5 and a is not null) (type: boolean)
                    Statistics: Num rows: 3 Data size: 267 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: a (type: string)
                      outputColumnNames: _col0
                      Statistics: Num rows: 3 Data size: 255 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 3 Data size: 255 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: t2
                  filterExpr: ((c > 6.0D) and a is not null) (type: boolean)
                  Statistics: Num rows: 15 Data size: 1379 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((c > 6.0D) and a is not null) (type: boolean)
                    Statistics: Num rows: 5 Data size: 465 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: a (type: string)
                      outputColumnNames: _col0
                      Statistics: Num rows: 5 Data size: 425 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 5 Data size: 425 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: string)
                  1 _col0 (type: string)
                Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: count()
                  minReductionHashAggr: 0.6666666
                  mode: hash
                  outputColumnNames: _col0
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    null sort order: 
                    sort order: 
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col0 (type: bigint)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT COUNT(*)
FROM test_stats t1 JOIN test_stats t2 ON (t1.a = t2.a)
WHERE t1.b BETWEEN 3 AND 5 AND t2.c > 6.0
PREHOOK: type: QUERY
PREHOOK: Input: default@test_stats
#### A masked pattern was here ####
POSTHOOK: query: SELECT COUNT(*)
FROM test_stats t1 JOIN test_stats t2 ON (t1.a = t2.a)
WHERE t1.b BETWEEN 3 AND 5 AND t2.c > 6.0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_stats
#### A masked pattern was here ####
1
PREHOOK: query: EXPLAIN SELECT COUNT(*) FROM test_stats WHERE b < 3
PREHOOK: type: QUERY
PREHOOK: Input: default@test_stats
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN SELECT COUNT(*) FROM test_stats WHERE b < 3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_stats
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test_stats
                  filterExpr: (b < 3) (type: boolean)
                  Statistics: Num rows: 15 Data size: 56 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (b < 3) (type: boolean)
                    Statistics: Num rows: 8 Data size: 32 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      Statistics: Num rows: 8 Data size: 32 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: count()
                        minReductionHashAggr: 0.875
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          null sort order: 
                          sort order: 
                          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT COUNT(*) FROM test_stats WHERE b < 3
PREHOOK: type: QUERY
PREHOOK: Input: default@test_stats
#### A masked pattern was here ####
POSTHOOK: query: SELECT COUNT(*) FROM test_stats WHERE b < 3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_stats
#### A masked pattern was here ####
8
PREHOOK: query: EXPLAIN SELECT COUNT(*) FROM test_stats WHERE b >= 7
PREHOOK: type: QUERY
PREHOOK: Input: default@test_stats
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN SELECT COUNT(*) FROM test_stats WHERE b >= 7
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_stats
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test_stats
                  filterExpr: (b >= 7) (type: boolean)
                  Statistics: Num rows: 15 Data size: 56 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (b >= 7) (type: boolean)
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: count()
                        minReductionHashAggr: 0.4
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          null sort order: 
                          sort order: 
                          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT COUNT(*) FROM test_stats WHERE b >= 7
PREHOOK: type: QUERY
PREHOOK: Input: default@test_stats
#### A masked pattern was here ####
POSTHOOK: query: SELECT COUNT(*) FROM test_stats WHERE b >= 7
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_stats
#### A masked pattern was here ####
1
PREHOOK: query: EXPLAIN SELECT COUNT(*) FROM test_stats WHERE d NOT BETWEEN 3 AND 7 AND e > 0
PREHOOK: type: QUERY
PREHOOK: Input: default@test_stats
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN SELECT COUNT(*) FROM test_stats WHERE d NOT BETWEEN 3 AND 7 AND e > 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_stats
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test_stats
                  filterExpr: ((e > 0) and d NOT BETWEEN 3.0 AND 7.0) (type: boolean)
                  Statistics: Num rows: 15 Data size: 1732 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((e > 0) and d NOT BETWEEN 3.0 AND 7.0) (type: boolean)
                    Statistics: Num rows: 12 Data size: 1388 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      Statistics: Num rows: 12 Data size: 1388 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: count()
                        minReductionHashAggr: 0.9166667
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          null sort order: 
                          sort order: 
                          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT COUNT(*) FROM test_stats WHERE d NOT BETWEEN 3 AND 7 AND e > 0
PREHOOK: type: QUERY
PREHOOK: Input: default@test_stats
#### A masked pattern was here ####
POSTHOOK: query: SELECT COUNT(*) FROM test_stats WHERE d NOT BETWEEN 3 AND 7 AND e > 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_stats
#### A masked pattern was here ####
8
PREHOOK: query: EXPLAIN SELECT COUNT(*) FROM test_stats WHERE f >= "2020-11-7" AND g >= "2020-11-7"
PREHOOK: type: QUERY
PREHOOK: Input: default@test_stats
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN SELECT COUNT(*) FROM test_stats WHERE f >= "2020-11-7" AND g >= "2020-11-7"
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_stats
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test_stats
                  filterExpr: ((g >= DATE'2020-11-07') and (f >= TIMESTAMP'2020-11-07 00:00:00')) (type: boolean)
                  Statistics: Num rows: 15 Data size: 1344 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((g >= DATE'2020-11-07') and (f >= TIMESTAMP'2020-11-07 00:00:00')) (type: boolean)
                    Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: count()
                        minReductionHashAggr: 0.4
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          null sort order: 
                          sort order: 
                          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT COUNT(*) FROM test_stats WHERE f >= "2020-11-7" AND g >= "2020-11-7"
PREHOOK: type: QUERY
PREHOOK: Input: default@test_stats
#### A masked pattern was here ####
POSTHOOK: query: SELECT COUNT(*) FROM test_stats WHERE f >= "2020-11-7" AND g >= "2020-11-7"
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_stats
#### A masked pattern was here ####
1
PREHOOK: query: EXPLAIN SELECT COUNT(*) FROM test_stats WHERE f BETWEEN "2020-11-01" AND "2020-11-06" AND g >= "2020-11-01"
PREHOOK: type: QUERY
PREHOOK: Input: default@test_stats
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN SELECT COUNT(*) FROM test_stats WHERE f BETWEEN "2020-11-01" AND "2020-11-06" AND g >= "2020-11-01"
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_stats
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test_stats
                  filterExpr: ((g >= DATE'2020-11-01') and f BETWEEN TIMESTAMP'2020-11-01 00:00:00' AND TIMESTAMP'2020-11-06 00:00:00') (type: boolean)
                  Statistics: Num rows: 15 Data size: 1344 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((g >= DATE'2020-11-01') and f BETWEEN TIMESTAMP'2020-11-01 00:00:00' AND TIMESTAMP'2020-11-06 00:00:00') (type: boolean)
                    Statistics: Num rows: 11 Data size: 1056 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      Statistics: Num rows: 11 Data size: 1056 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: count()
                        minReductionHashAggr: 0.9090909
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          null sort order: 
                          sort order: 
                          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT COUNT(*) FROM test_stats WHERE f BETWEEN "2020-11-01" AND "2020-11-06" AND g >= "2020-11-01"
PREHOOK: type: QUERY
PREHOOK: Input: default@test_stats
#### A masked pattern was here ####
POSTHOOK: query: SELECT COUNT(*) FROM test_stats WHERE f BETWEEN "2020-11-01" AND "2020-11-06" AND g >= "2020-11-01"
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_stats
#### A masked pattern was here ####
12
PREHOOK: query: DROP TABLE test_stats
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@test_stats
PREHOOK: Output: database:default
PREHOOK: Output: default@test_stats
POSTHOOK: query: DROP TABLE test_stats
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@test_stats
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_stats
