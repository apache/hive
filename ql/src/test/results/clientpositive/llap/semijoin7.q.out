PREHOOK: query: create table tx1 (a integer,b integer)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tx1
POSTHOOK: query: create table tx1 (a integer,b integer)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tx1
PREHOOK: query: insert into tx1	values (1, 105), (2, 203), (3, 300), (4, 400), (null, 400), (null, null)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tx1
POSTHOOK: query: insert into tx1	values (1, 105), (2, 203), (3, 300), (4, 400), (null, 400), (null, null)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tx1
POSTHOOK: Lineage: tx1.a SCRIPT []
POSTHOOK: Lineage: tx1.b SCRIPT []
PREHOOK: query: create table tx2 (a int, b int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tx2
POSTHOOK: query: create table tx2 (a int, b int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tx2
PREHOOK: query: insert into tx2 values (1, 105), (1, 1900), (2, 1995), (2, 1996), (4, 400), (4, null)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tx2
POSTHOOK: query: insert into tx2 values (1, 105), (1, 1900), (2, 1995), (2, 1996), (4, 400), (4, null)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tx2
POSTHOOK: Lineage: tx2.a SCRIPT []
POSTHOOK: Lineage: tx2.b SCRIPT []
PREHOOK: query: explain
select * from tx1 u left semi join tx2 v on u.a=v.a
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
PREHOOK: Input: default@tx2
#### A masked pattern was here ####
POSTHOOK: query: explain
select * from tx1 u left semi join tx2 v on u.a=v.a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
POSTHOOK: Input: default@tx2
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: u
                  filterExpr: a is not null (type: boolean)
                  Statistics: Num rows: 6 Data size: 44 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: a is not null (type: boolean)
                    Statistics: Num rows: 4 Data size: 32 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: a (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: a (type: int)
                      Statistics: Num rows: 4 Data size: 32 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: b (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: v
                  filterExpr: a is not null (type: boolean)
                  Statistics: Num rows: 6 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: a is not null (type: boolean)
                    Statistics: Num rows: 6 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: a (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 6 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        keys: _col0 (type: int)
                        minReductionHashAggr: 0.5
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 3 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: int)
                          null sort order: z
                          sort order: +
                          Map-reduce partition columns: _col0 (type: int)
                          Statistics: Num rows: 3 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 a (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from tx1 u left semi join tx2 v on u.a=v.a
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
PREHOOK: Input: default@tx2
#### A masked pattern was here ####
POSTHOOK: query: select * from tx1 u left semi join tx2 v on u.a=v.a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
POSTHOOK: Input: default@tx2
#### A masked pattern was here ####
1	105
2	203
4	400
PREHOOK: query: explain
select * from tx1 u left semi join tx2 v on u.b <=> v.b
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
PREHOOK: Input: default@tx2
#### A masked pattern was here ####
POSTHOOK: query: explain
select * from tx1 u left semi join tx2 v on u.b <=> v.b
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
POSTHOOK: Input: default@tx2
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: u
                  Statistics: Num rows: 6 Data size: 44 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: b (type: int)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: b (type: int)
                    Statistics: Num rows: 6 Data size: 44 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: a (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: v
                  Statistics: Num rows: 6 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: b (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 6 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: _col0 (type: int)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 5 Data size: 20 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 5 Data size: 20 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 b (type: int)
                  1 _col0 (type: int)
                nullSafes: [true]
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 6 Data size: 44 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 6 Data size: 44 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from tx1 u left semi join tx2 v on u.b <=> v.b
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
PREHOOK: Input: default@tx2
#### A masked pattern was here ####
POSTHOOK: query: select * from tx1 u left semi join tx2 v on u.b <=> v.b
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
POSTHOOK: Input: default@tx2
#### A masked pattern was here ####
1	105
4	400
NULL	400
NULL	NULL
Warning: Shuffle Join MERGEJOIN[10][tables = [u, v]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: explain
select * from tx1 u left semi join tx2 v on u.b <> v.b
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
PREHOOK: Input: default@tx2
#### A masked pattern was here ####
POSTHOOK: query: explain
select * from tx1 u left semi join tx2 v on u.b <> v.b
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
POSTHOOK: Input: default@tx2
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: u
                  Statistics: Num rows: 6 Data size: 44 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    null sort order: 
                    sort order: 
                    Statistics: Num rows: 6 Data size: 44 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: a (type: int), b (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: v
                  Statistics: Num rows: 6 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: b (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 6 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: _col0 (type: int)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 5 Data size: 20 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 5 Data size: 20 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col5
                residual filter predicates: {(_col1 <> _col5)}
                Statistics: Num rows: 30 Data size: 356 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 30 Data size: 356 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 30 Data size: 356 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[10][tables = [u, v]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: select * from tx1 u left semi join tx2 v on u.b <> v.b
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
PREHOOK: Input: default@tx2
#### A masked pattern was here ####
POSTHOOK: query: select * from tx1 u left semi join tx2 v on u.b <> v.b
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
POSTHOOK: Input: default@tx2
#### A masked pattern was here ####
1	105
2	203
3	300
4	400
NULL	400
PREHOOK: query: explain
select * from tx1 u left semi join tx2 v on u.a=v.a and u.b <> v.b
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
PREHOOK: Input: default@tx2
#### A masked pattern was here ####
POSTHOOK: query: explain
select * from tx1 u left semi join tx2 v on u.a=v.a and u.b <> v.b
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
POSTHOOK: Input: default@tx2
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: u
                  filterExpr: a is not null (type: boolean)
                  Statistics: Num rows: 6 Data size: 44 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: a is not null (type: boolean)
                    Statistics: Num rows: 4 Data size: 32 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: a (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: a (type: int)
                      Statistics: Num rows: 4 Data size: 32 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: b (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: v
                  filterExpr: a is not null (type: boolean)
                  Statistics: Num rows: 6 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: a is not null (type: boolean)
                    Statistics: Num rows: 6 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: a (type: int), b (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 6 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        keys: _col0 (type: int), _col1 (type: int)
                        minReductionHashAggr: 0.4
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 5 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: int)
                          null sort order: z
                          sort order: +
                          Map-reduce partition columns: _col0 (type: int)
                          Statistics: Num rows: 5 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col1 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 a (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col1, _col6
                residual filter predicates: {(_col1 <> _col6)}
                Statistics: Num rows: 4 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 4 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 4 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from tx1 u left semi join tx2 v on u.a=v.a and u.b <> v.b
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
PREHOOK: Input: default@tx2
#### A masked pattern was here ####
POSTHOOK: query: select * from tx1 u left semi join tx2 v on u.a=v.a and u.b <> v.b
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
POSTHOOK: Input: default@tx2
#### A masked pattern was here ####
1	105
2	203
Warning: Shuffle Join MERGEJOIN[10][tables = [u, v]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: explain
select * from tx1 u left semi join tx2 v on u.a=v.a or u.b <> v.b
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
PREHOOK: Input: default@tx2
#### A masked pattern was here ####
POSTHOOK: query: explain
select * from tx1 u left semi join tx2 v on u.a=v.a or u.b <> v.b
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
POSTHOOK: Input: default@tx2
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: u
                  Statistics: Num rows: 6 Data size: 44 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    null sort order: 
                    sort order: 
                    Statistics: Num rows: 6 Data size: 44 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: a (type: int), b (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: v
                  Statistics: Num rows: 6 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: a (type: int), b (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 6 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: _col0 (type: int), _col1 (type: int)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 5 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 5 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col1 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col5, _col6
                residual filter predicates: {((_col0 = _col5) or (_col1 <> _col6))}
                Statistics: Num rows: 30 Data size: 476 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 30 Data size: 476 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 30 Data size: 476 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[10][tables = [u, v]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: select * from tx1 u left semi join tx2 v on u.a=v.a or u.b <> v.b
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
PREHOOK: Input: default@tx2
#### A masked pattern was here ####
POSTHOOK: query: select * from tx1 u left semi join tx2 v on u.a=v.a or u.b <> v.b
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
POSTHOOK: Input: default@tx2
#### A masked pattern was here ####
1	105
2	203
3	300
4	400
NULL	400
PREHOOK: query: explain
select * from tx1 u left semi join tx1 v on u.a=v.a
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
#### A masked pattern was here ####
POSTHOOK: query: explain
select * from tx1 u left semi join tx1 v on u.a=v.a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: u
                  filterExpr: a is not null (type: boolean)
                  Statistics: Num rows: 6 Data size: 44 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: a is not null (type: boolean)
                    Statistics: Num rows: 4 Data size: 32 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: a (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: a (type: int)
                      Statistics: Num rows: 4 Data size: 32 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: b (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: v
                  filterExpr: a is not null (type: boolean)
                  Statistics: Num rows: 6 Data size: 20 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: a is not null (type: boolean)
                    Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: a (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        keys: _col0 (type: int)
                        minReductionHashAggr: 0.4
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: int)
                          null sort order: z
                          sort order: +
                          Map-reduce partition columns: _col0 (type: int)
                          Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 a (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 4 Data size: 32 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 4 Data size: 32 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from tx1 u left semi join tx1 v on u.a=v.a
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
#### A masked pattern was here ####
POSTHOOK: query: select * from tx1 u left semi join tx1 v on u.a=v.a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
#### A masked pattern was here ####
1	105
2	203
3	300
4	400
PREHOOK: query: explain
select * from tx1 u left semi join tx2 v
on (u.a + v.b > 400)
  and ((case when u.a > 3 then true when v.b > 1900 then true else false end)
      or (coalesce(u.a) + coalesce(v.b) > 1900))
  and u.a = v.a
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
PREHOOK: Input: default@tx2
#### A masked pattern was here ####
POSTHOOK: query: explain
select * from tx1 u left semi join tx2 v
on (u.a + v.b > 400)
  and ((case when u.a > 3 then true when v.b > 1900 then true else false end)
      or (coalesce(u.a) + coalesce(v.b) > 1900))
  and u.a = v.a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
POSTHOOK: Input: default@tx2
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: u
                  filterExpr: a is not null (type: boolean)
                  Statistics: Num rows: 6 Data size: 44 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: a is not null (type: boolean)
                    Statistics: Num rows: 4 Data size: 32 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: a (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: a (type: int)
                      Statistics: Num rows: 4 Data size: 32 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: b (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: v
                  filterExpr: a is not null (type: boolean)
                  Statistics: Num rows: 6 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: a is not null (type: boolean)
                    Statistics: Num rows: 6 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: b (type: int), a (type: int)
                      outputColumnNames: _col2, _col3
                      Statistics: Num rows: 6 Data size: 96 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        keys: _col2 (type: int), _col2 (type: int), _col2 (type: int), _col3 (type: int)
                        minReductionHashAggr: 0.4
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3
                        Statistics: Num rows: 5 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col3 (type: int)
                          null sort order: z
                          sort order: +
                          Map-reduce partition columns: _col3 (type: int)
                          Statistics: Num rows: 5 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 a (type: int)
                  1 _col3 (type: int)
                outputColumnNames: _col0, _col1, _col5
                residual filter predicates: {((_col0 + _col5) > 400)} {(CASE WHEN ((_col0 > 3)) THEN (true) WHEN ((_col5 > 1900)) THEN (true) ELSE (false) END or ((COALESCE(_col0) + COALESCE(_col5)) > 1900))}
                Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from tx1 u left semi join tx2 v
on (u.a + v.b > 400)
  and ((case when u.a > 3 then true when v.b > 1900 then true else false end)
      or (coalesce(u.a) + coalesce(v.b) > 1900))
  and u.a = v.a
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
PREHOOK: Input: default@tx2
#### A masked pattern was here ####
POSTHOOK: query: select * from tx1 u left semi join tx2 v
on (u.a + v.b > 400)
  and ((case when u.a > 3 then true when v.b > 1900 then true else false end)
      or (coalesce(u.a) + coalesce(v.b) > 1900))
  and u.a = v.a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
POSTHOOK: Input: default@tx2
#### A masked pattern was here ####
1	105
2	203
4	400
