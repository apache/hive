PREHOOK: query: create table varchar_table(vs varchar(50))
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@varchar_table
POSTHOOK: query: create table varchar_table(vs varchar(50))
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@varchar_table
PREHOOK: query: insert into table varchar_table
    values ("blue"), ("a long sentence"), ("more sunshine and rain"), ("exactly 10"), ("longer 10 "), ("tells the truth")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@varchar_table
POSTHOOK: query: insert into table varchar_table
    values ("blue"), ("a long sentence"), ("more sunshine and rain"), ("exactly 10"), ("longer 10 "), ("tells the truth")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@varchar_table
POSTHOOK: Lineage: varchar_table.vs SCRIPT []
_col0
PREHOOK: query: alter table varchar_table change column vs vs varchar(10)
PREHOOK: type: ALTERTABLE_RENAMECOL
PREHOOK: Input: default@varchar_table
PREHOOK: Output: default@varchar_table
POSTHOOK: query: alter table varchar_table change column vs vs varchar(10)
POSTHOOK: type: ALTERTABLE_RENAMECOL
POSTHOOK: Input: default@varchar_table
POSTHOOK: Output: default@varchar_table
PREHOOK: query: explain vectorization detail
create table varchar_ctas_1 as select length(vs),reverse(vs) from varchar_table
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@varchar_table
PREHOOK: Output: database:default
PREHOOK: Output: default@varchar_ctas_1
POSTHOOK: query: explain vectorization detail
create table varchar_ctas_1 as select length(vs),reverse(vs) from varchar_table
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@varchar_table
POSTHOOK: Output: database:default
POSTHOOK: Output: default@varchar_ctas_1
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-4 depends on stages: Stage-0, Stage-2
  Stage-3 depends on stages: Stage-4
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: varchar_table
                  Statistics: Num rows: 6 Data size: 564 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:vs:varchar(10), 1:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Select Operator
                    expressions: length(vs) (type: int), reverse(vs) (type: string)
                    outputColumnNames: _col0, _col1
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [2, 3]
                        selectExpressions: StringLength(col 0:varchar(10)) -> 2:int, VectorUDFAdaptor(reverse(vs)) -> 3:string
                    Statistics: Num rows: 6 Data size: 564 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 6 Data size: 564 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                          name: default.varchar_ctas_1
                    Select Operator
                      expressions: _col0 (type: int), _col1 (type: string)
                      outputColumnNames: col1, col2
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [2, 3]
                      Statistics: Num rows: 6 Data size: 564 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        aggregations: min(col1), max(col1), count(1), count(col1), compute_bit_vector_hll(col1), max(length(col2)), avg(COALESCE(length(col2),0)), count(col2), compute_bit_vector_hll(col2)
                        Group By Vectorization:
                            aggregators: VectorUDAFMinLong(col 2:int) -> int, VectorUDAFMaxLong(col 2:int) -> int, VectorUDAFCount(ConstantVectorExpression(val 1) -> 4:int) -> bigint, VectorUDAFCount(col 2:int) -> bigint, VectorUDAFComputeBitVectorLong(col 2:int) -> binary, VectorUDAFMaxLong(StringLength(col 3:string) -> 5:int) -> int, VectorUDAFAvgLong(VectorCoalesce(columns [6, 7])(children: StringLength(col 3:string) -> 6:int, ConstantVectorExpression(val 0) -> 7:int) -> 8:int) -> struct<count:bigint,sum:double,input:int>, VectorUDAFCount(col 3:string) -> bigint, VectorUDAFComputeBitVectorString(col 3:string) -> binary
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8]
                        minReductionHashAggr: 0.99
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                        Statistics: Num rows: 1 Data size: 494 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          null sort order: 
                          sort order: 
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkEmptyKeyOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                              valueColumns: 0:int, 1:int, 2:bigint, 3:bigint, 4:binary, 5:int, 6:struct<count:bigint,sum:double,input:int>, 7:bigint, 8:binary
                          Statistics: Num rows: 1 Data size: 494 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: binary), _col5 (type: int), _col6 (type: struct<count:bigint,sum:double,input:int>), _col7 (type: bigint), _col8 (type: binary)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vector.serde.deserialize IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.mapred.TextInputFormat
                allNative: false
                usesVectorUDFAdaptor: true
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 1
                    includeColumns: [0]
                    dataColumns: vs:varchar(10)
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, string, bigint, bigint, bigint, bigint, bigint]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: 
                reduceColumnSortOrder: 
                allNative: false
                usesVectorUDFAdaptor: true
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 9
                    dataColumns: VALUE._col0:int, VALUE._col1:int, VALUE._col2:bigint, VALUE._col3:bigint, VALUE._col4:binary, VALUE._col5:int, VALUE._col6:struct<count:bigint,sum:double,input:int>, VALUE._col7:bigint, VALUE._col8:binary
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
            Reduce Operator Tree:
              Group By Operator
                aggregations: min(VALUE._col0), max(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector_hll(VALUE._col4), max(VALUE._col5), avg(VALUE._col6), count(VALUE._col7), compute_bit_vector_hll(VALUE._col8)
                Group By Vectorization:
                    aggregators: VectorUDAFMinLong(col 0:int) -> int, VectorUDAFMaxLong(col 1:int) -> int, VectorUDAFCountMerge(col 2:bigint) -> bigint, VectorUDAFCountMerge(col 3:bigint) -> bigint, VectorUDAFComputeBitVectorFinal(col 4:binary) -> binary, VectorUDAFMaxLong(col 5:int) -> int, VectorUDAFAvgFinal(col 6:struct<count:bigint,sum:double,input:int>) -> double, VectorUDAFCountMerge(col 7:bigint) -> bigint, VectorUDAFComputeBitVectorFinal(col 8:binary) -> binary
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8]
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                Statistics: Num rows: 1 Data size: 494 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: 'LONG' (type: string), UDFToLong(_col0) (type: bigint), UDFToLong(_col1) (type: bigint), (_col2 - _col3) (type: bigint), COALESCE(ndv_compute_bit_vector(_col4),0) (type: bigint), _col4 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col5,0)) (type: bigint), COALESCE(_col6,0) (type: double), (_col2 - _col7) (type: bigint), COALESCE(ndv_compute_bit_vector(_col8),0) (type: bigint), _col8 (type: binary)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [9, 0, 1, 10, 13, 4, 14, 16, 18, 19, 22, 8]
                      selectExpressions: ConstantVectorExpression(val LONG) -> 9:string, LongColSubtractLongColumn(col 2:bigint, col 3:bigint) -> 10:bigint, VectorCoalesce(columns [11, 12])(children: VectorUDFAdaptor(ndv_compute_bit_vector(_col4)) -> 11:bigint, ConstantVectorExpression(val 0) -> 12:bigint) -> 13:bigint, ConstantVectorExpression(val STRING) -> 14:string, VectorCoalesce(columns [5, 15])(children: col 5:int, ConstantVectorExpression(val 0) -> 15:int) -> 16:int, VectorCoalesce(columns [6, 17])(children: col 6:double, ConstantVectorExpression(val 0.0) -> 17:double) -> 18:double, LongColSubtractLongColumn(col 2:bigint, col 7:bigint) -> 19:bigint, VectorCoalesce(columns [20, 21])(children: VectorUDFAdaptor(ndv_compute_bit_vector(_col8)) -> 20:bigint, ConstantVectorExpression(val 0) -> 21:bigint) -> 22:bigint
                  Statistics: Num rows: 1 Data size: 494 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 1 Data size: 494 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-4
    Create Table
      columns: _c0 int, _c1 string
      name: default.varchar_ctas_1
      input format: org.apache.hadoop.mapred.TextInputFormat
      output format: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
      serde name: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: _c0, _c1
          Column Types: int, string
          Table: default.varchar_ctas_1

  Stage: Stage-0
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####

PREHOOK: query: create table varchar_ctas_1 as select length(vs),reverse(vs) from varchar_table
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@varchar_table
PREHOOK: Output: database:default
PREHOOK: Output: default@varchar_ctas_1
POSTHOOK: query: create table varchar_ctas_1 as select length(vs),reverse(vs) from varchar_table
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@varchar_table
POSTHOOK: Output: database:default
POSTHOOK: Output: default@varchar_ctas_1
POSTHOOK: Lineage: varchar_ctas_1._c0 EXPRESSION [(varchar_table)varchar_table.FieldSchema(name:vs, type:varchar(10), comment:null), ]
POSTHOOK: Lineage: varchar_ctas_1._c1 EXPRESSION [(varchar_table)varchar_table.FieldSchema(name:vs, type:varchar(10), comment:null), ]
_c0	_c1
PREHOOK: query: select * from varchar_ctas_1 order by 2
PREHOOK: type: QUERY
PREHOOK: Input: default@varchar_ctas_1
#### A masked pattern was here ####
POSTHOOK: query: select * from varchar_ctas_1 order by 2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@varchar_ctas_1
#### A masked pattern was here ####
varchar_ctas_1._c0	varchar_ctas_1._c1
10	 01 regnol
10	 eht sllet
10	01 yltcaxe
4	eulb
10	hsnus erom
10	nes gnol a
PREHOOK: query: create table char_table(vs char(50))
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@char_table
POSTHOOK: query: create table char_table(vs char(50))
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@char_table
PREHOOK: query: insert into table char_table
    values ("  yellow"), ("some words and spaces  "), ("less sunshine and rain"), ("exactly 10"), ("sunlight moon"), ("begs the truth")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@char_table
POSTHOOK: query: insert into table char_table
    values ("  yellow"), ("some words and spaces  "), ("less sunshine and rain"), ("exactly 10"), ("sunlight moon"), ("begs the truth")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@char_table
POSTHOOK: Lineage: char_table.vs SCRIPT []
_col0
PREHOOK: query: alter table char_table change column vs vs char(10)
PREHOOK: type: ALTERTABLE_RENAMECOL
PREHOOK: Input: default@char_table
PREHOOK: Output: default@char_table
POSTHOOK: query: alter table char_table change column vs vs char(10)
POSTHOOK: type: ALTERTABLE_RENAMECOL
POSTHOOK: Input: default@char_table
POSTHOOK: Output: default@char_table
PREHOOK: query: explain vectorization detail
create table char_ctas_1 as select length(vs),reverse(vs) from char_table
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@char_table
PREHOOK: Output: database:default
PREHOOK: Output: default@char_ctas_1
POSTHOOK: query: explain vectorization detail
create table char_ctas_1 as select length(vs),reverse(vs) from char_table
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@char_table
POSTHOOK: Output: database:default
POSTHOOK: Output: default@char_ctas_1
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-4 depends on stages: Stage-0, Stage-2
  Stage-3 depends on stages: Stage-4
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: char_table
                  Statistics: Num rows: 6 Data size: 564 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:vs:char(10), 1:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Select Operator
                    expressions: length(vs) (type: int), reverse(vs) (type: string)
                    outputColumnNames: _col0, _col1
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [2, 3]
                        selectExpressions: StringLength(col 0:char(10)) -> 2:int, VectorUDFAdaptor(reverse(vs)) -> 3:string
                    Statistics: Num rows: 6 Data size: 564 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      File Sink Vectorization:
                          className: VectorFileSinkOperator
                          native: false
                      Statistics: Num rows: 6 Data size: 564 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                          name: default.char_ctas_1
                    Select Operator
                      expressions: _col0 (type: int), _col1 (type: string)
                      outputColumnNames: col1, col2
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [2, 3]
                      Statistics: Num rows: 6 Data size: 564 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        aggregations: min(col1), max(col1), count(1), count(col1), compute_bit_vector_hll(col1), max(length(col2)), avg(COALESCE(length(col2),0)), count(col2), compute_bit_vector_hll(col2)
                        Group By Vectorization:
                            aggregators: VectorUDAFMinLong(col 2:int) -> int, VectorUDAFMaxLong(col 2:int) -> int, VectorUDAFCount(ConstantVectorExpression(val 1) -> 4:int) -> bigint, VectorUDAFCount(col 2:int) -> bigint, VectorUDAFComputeBitVectorLong(col 2:int) -> binary, VectorUDAFMaxLong(StringLength(col 3:string) -> 5:int) -> int, VectorUDAFAvgLong(VectorCoalesce(columns [6, 7])(children: StringLength(col 3:string) -> 6:int, ConstantVectorExpression(val 0) -> 7:int) -> 8:int) -> struct<count:bigint,sum:double,input:int>, VectorUDAFCount(col 3:string) -> bigint, VectorUDAFComputeBitVectorString(col 3:string) -> binary
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8]
                        minReductionHashAggr: 0.99
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                        Statistics: Num rows: 1 Data size: 494 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          null sort order: 
                          sort order: 
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkEmptyKeyOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                              valueColumns: 0:int, 1:int, 2:bigint, 3:bigint, 4:binary, 5:int, 6:struct<count:bigint,sum:double,input:int>, 7:bigint, 8:binary
                          Statistics: Num rows: 1 Data size: 494 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: binary), _col5 (type: int), _col6 (type: struct<count:bigint,sum:double,input:int>), _col7 (type: bigint), _col8 (type: binary)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vector.serde.deserialize IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.mapred.TextInputFormat
                allNative: false
                usesVectorUDFAdaptor: true
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 1
                    includeColumns: [0]
                    dataColumns: vs:char(10)
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, string, bigint, bigint, bigint, bigint, bigint]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                reduceColumnNullOrder: 
                reduceColumnSortOrder: 
                allNative: false
                usesVectorUDFAdaptor: true
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 9
                    dataColumns: VALUE._col0:int, VALUE._col1:int, VALUE._col2:bigint, VALUE._col3:bigint, VALUE._col4:binary, VALUE._col5:int, VALUE._col6:struct<count:bigint,sum:double,input:int>, VALUE._col7:bigint, VALUE._col8:binary
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
            Reduce Operator Tree:
              Group By Operator
                aggregations: min(VALUE._col0), max(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector_hll(VALUE._col4), max(VALUE._col5), avg(VALUE._col6), count(VALUE._col7), compute_bit_vector_hll(VALUE._col8)
                Group By Vectorization:
                    aggregators: VectorUDAFMinLong(col 0:int) -> int, VectorUDAFMaxLong(col 1:int) -> int, VectorUDAFCountMerge(col 2:bigint) -> bigint, VectorUDAFCountMerge(col 3:bigint) -> bigint, VectorUDAFComputeBitVectorFinal(col 4:binary) -> binary, VectorUDAFMaxLong(col 5:int) -> int, VectorUDAFAvgFinal(col 6:struct<count:bigint,sum:double,input:int>) -> double, VectorUDAFCountMerge(col 7:bigint) -> bigint, VectorUDAFComputeBitVectorFinal(col 8:binary) -> binary
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8]
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                Statistics: Num rows: 1 Data size: 494 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: 'LONG' (type: string), UDFToLong(_col0) (type: bigint), UDFToLong(_col1) (type: bigint), (_col2 - _col3) (type: bigint), COALESCE(ndv_compute_bit_vector(_col4),0) (type: bigint), _col4 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col5,0)) (type: bigint), COALESCE(_col6,0) (type: double), (_col2 - _col7) (type: bigint), COALESCE(ndv_compute_bit_vector(_col8),0) (type: bigint), _col8 (type: binary)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [9, 0, 1, 10, 13, 4, 14, 16, 18, 19, 22, 8]
                      selectExpressions: ConstantVectorExpression(val LONG) -> 9:string, LongColSubtractLongColumn(col 2:bigint, col 3:bigint) -> 10:bigint, VectorCoalesce(columns [11, 12])(children: VectorUDFAdaptor(ndv_compute_bit_vector(_col4)) -> 11:bigint, ConstantVectorExpression(val 0) -> 12:bigint) -> 13:bigint, ConstantVectorExpression(val STRING) -> 14:string, VectorCoalesce(columns [5, 15])(children: col 5:int, ConstantVectorExpression(val 0) -> 15:int) -> 16:int, VectorCoalesce(columns [6, 17])(children: col 6:double, ConstantVectorExpression(val 0.0) -> 17:double) -> 18:double, LongColSubtractLongColumn(col 2:bigint, col 7:bigint) -> 19:bigint, VectorCoalesce(columns [20, 21])(children: VectorUDFAdaptor(ndv_compute_bit_vector(_col8)) -> 20:bigint, ConstantVectorExpression(val 0) -> 21:bigint) -> 22:bigint
                  Statistics: Num rows: 1 Data size: 494 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 1 Data size: 494 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-4
    Create Table
      columns: _c0 int, _c1 string
      name: default.char_ctas_1
      input format: org.apache.hadoop.mapred.TextInputFormat
      output format: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
      serde name: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: _c0, _c1
          Column Types: int, string
          Table: default.char_ctas_1

  Stage: Stage-0
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####

PREHOOK: query: create table char_ctas_1 as select length(vs),reverse(vs) from char_table
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@char_table
PREHOOK: Output: database:default
PREHOOK: Output: default@char_ctas_1
POSTHOOK: query: create table char_ctas_1 as select length(vs),reverse(vs) from char_table
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@char_table
POSTHOOK: Output: database:default
POSTHOOK: Output: default@char_ctas_1
POSTHOOK: Lineage: char_ctas_1._c0 EXPRESSION [(char_table)char_table.FieldSchema(name:vs, type:char(10), comment:null), ]
POSTHOOK: Lineage: char_ctas_1._c1 EXPRESSION [(char_table)char_table.FieldSchema(name:vs, type:char(10), comment:null), ]
_c0	_c1
PREHOOK: query: select * from char_ctas_1 order by 2
PREHOOK: type: QUERY
PREHOOK: Input: default@char_ctas_1
#### A masked pattern was here ####
POSTHOOK: query: select * from char_ctas_1 order by 2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@char_ctas_1
#### A masked pattern was here ####
char_ctas_1._c0	char_ctas_1._c1
10	01 yltcaxe
10	hsnus ssel
10	m thgilnus
10	sdrow emos
10	t eht sgeb
8	wolley  
