PREHOOK: query: create table X_n0 as
select distinct * from src order by key limit 10
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@src
PREHOOK: Output: database:default
PREHOOK: Output: default@X_n0
POSTHOOK: query: create table X_n0 as
select distinct * from src order by key limit 10
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@src
POSTHOOK: Output: database:default
POSTHOOK: Output: default@X_n0
POSTHOOK: Lineage: x_n0.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: x_n0.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
Warning: Shuffle Join MERGEJOIN[11][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: explain select * from X_n0 as A, X_n0 as B order by A.key, B.key
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: explain select * from X_n0 as A, X_n0 as B order by A.key, B.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 4 (XPROD_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 100 Data size: 35600 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col0 (type: string), _col2 (type: string)
                  null sort order: zz
                  sort order: ++
                  Statistics: Num rows: 100 Data size: 35600 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col1 (type: string), _col3 (type: string)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col1 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 100 Data size: 35600 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 100 Data size: 35600 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[11][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: select * from X_n0 as A, X_n0 as B order by A.key, B.key
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: select * from X_n0 as A, X_n0 as B order by A.key, B.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
0	val_0	0	val_0
0	val_0	10	val_10
0	val_0	100	val_100
0	val_0	103	val_103
0	val_0	104	val_104
0	val_0	105	val_105
0	val_0	11	val_11
0	val_0	111	val_111
0	val_0	113	val_113
0	val_0	114	val_114
10	val_10	0	val_0
10	val_10	10	val_10
10	val_10	100	val_100
10	val_10	103	val_103
10	val_10	104	val_104
10	val_10	105	val_105
10	val_10	11	val_11
10	val_10	111	val_111
10	val_10	113	val_113
10	val_10	114	val_114
100	val_100	0	val_0
100	val_100	10	val_10
100	val_100	100	val_100
100	val_100	103	val_103
100	val_100	104	val_104
100	val_100	105	val_105
100	val_100	11	val_11
100	val_100	111	val_111
100	val_100	113	val_113
100	val_100	114	val_114
103	val_103	0	val_0
103	val_103	10	val_10
103	val_103	100	val_100
103	val_103	103	val_103
103	val_103	104	val_104
103	val_103	105	val_105
103	val_103	11	val_11
103	val_103	111	val_111
103	val_103	113	val_113
103	val_103	114	val_114
104	val_104	0	val_0
104	val_104	10	val_10
104	val_104	100	val_100
104	val_104	103	val_103
104	val_104	104	val_104
104	val_104	105	val_105
104	val_104	11	val_11
104	val_104	111	val_111
104	val_104	113	val_113
104	val_104	114	val_114
105	val_105	0	val_0
105	val_105	10	val_10
105	val_105	100	val_100
105	val_105	103	val_103
105	val_105	104	val_104
105	val_105	105	val_105
105	val_105	11	val_11
105	val_105	111	val_111
105	val_105	113	val_113
105	val_105	114	val_114
11	val_11	0	val_0
11	val_11	10	val_10
11	val_11	100	val_100
11	val_11	103	val_103
11	val_11	104	val_104
11	val_11	105	val_105
11	val_11	11	val_11
11	val_11	111	val_111
11	val_11	113	val_113
11	val_11	114	val_114
111	val_111	0	val_0
111	val_111	10	val_10
111	val_111	100	val_100
111	val_111	103	val_103
111	val_111	104	val_104
111	val_111	105	val_105
111	val_111	11	val_11
111	val_111	111	val_111
111	val_111	113	val_113
111	val_111	114	val_114
113	val_113	0	val_0
113	val_113	10	val_10
113	val_113	100	val_100
113	val_113	103	val_103
113	val_113	104	val_104
113	val_113	105	val_105
113	val_113	11	val_11
113	val_113	111	val_111
113	val_113	113	val_113
113	val_113	114	val_114
114	val_114	0	val_0
114	val_114	10	val_10
114	val_114	100	val_100
114	val_114	103	val_103
114	val_114	104	val_104
114	val_114	105	val_105
114	val_114	11	val_11
114	val_114	111	val_111
114	val_114	113	val_113
114	val_114	114	val_114
Warning: Shuffle Join MERGEJOIN[15][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: explain select * from X_n0 as A join X_n0 as B on A.key<B.key
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: explain select * from X_n0 as A join X_n0 as B on A.key<B.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  filterExpr: key is not null (type: boolean)
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: key is not null (type: boolean)
                    Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: string), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: b
                  filterExpr: key is not null (type: boolean)
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: key is not null (type: boolean)
                    Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: string), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3
                residual filter predicates: {(_col0 < _col2)}
                Statistics: Num rows: 33 Data size: 11748 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 33 Data size: 11748 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: select * from X_n0 as A join X_n0 as B on A.key<B.key order by A.key, B.key
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: select * from X_n0 as A join X_n0 as B on A.key<B.key order by A.key, B.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
0	val_0	10	val_10
0	val_0	100	val_100
0	val_0	103	val_103
0	val_0	104	val_104
0	val_0	105	val_105
0	val_0	11	val_11
0	val_0	111	val_111
0	val_0	113	val_113
0	val_0	114	val_114
10	val_10	100	val_100
10	val_10	103	val_103
10	val_10	104	val_104
10	val_10	105	val_105
10	val_10	11	val_11
10	val_10	111	val_111
10	val_10	113	val_113
10	val_10	114	val_114
100	val_100	103	val_103
100	val_100	104	val_104
100	val_100	105	val_105
100	val_100	11	val_11
100	val_100	111	val_111
100	val_100	113	val_113
100	val_100	114	val_114
103	val_103	104	val_104
103	val_103	105	val_105
103	val_103	11	val_11
103	val_103	111	val_111
103	val_103	113	val_113
103	val_103	114	val_114
104	val_104	105	val_105
104	val_104	11	val_11
104	val_104	111	val_111
104	val_104	113	val_113
104	val_104	114	val_114
105	val_105	11	val_11
105	val_105	111	val_111
105	val_105	113	val_113
105	val_105	114	val_114
11	val_11	111	val_111
11	val_11	113	val_113
11	val_11	114	val_114
111	val_111	113	val_113
111	val_111	114	val_114
113	val_113	114	val_114
Warning: Shuffle Join MERGEJOIN[11][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: explain select * from X_n0 as A join X_n0 as B on A.key between "103" and "105"
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: explain select * from X_n0 as A join X_n0 as B on A.key between "103" and "105"
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  filterExpr: key BETWEEN '103' AND '105' (type: boolean)
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: key BETWEEN '103' AND '105' (type: boolean)
                    Statistics: Num rows: 1 Data size: 178 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: string), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 1 Data size: 178 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 178 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 10 Data size: 3560 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 10 Data size: 3560 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[13][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: select * from X_n0 as A join X_n0 as B on A.key between "103" and "105" order by A.key, B.key
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: select * from X_n0 as A join X_n0 as B on A.key between "103" and "105" order by A.key, B.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
103	val_103	0	val_0
103	val_103	10	val_10
103	val_103	100	val_100
103	val_103	103	val_103
103	val_103	104	val_104
103	val_103	105	val_105
103	val_103	11	val_11
103	val_103	111	val_111
103	val_103	113	val_113
103	val_103	114	val_114
104	val_104	0	val_0
104	val_104	10	val_10
104	val_104	100	val_100
104	val_104	103	val_103
104	val_104	104	val_104
104	val_104	105	val_105
104	val_104	11	val_11
104	val_104	111	val_111
104	val_104	113	val_113
104	val_104	114	val_114
105	val_105	0	val_0
105	val_105	10	val_10
105	val_105	100	val_100
105	val_105	103	val_103
105	val_105	104	val_104
105	val_105	105	val_105
105	val_105	11	val_11
105	val_105	111	val_111
105	val_105	113	val_113
105	val_105	114	val_114
Warning: Shuffle Join MERGEJOIN[14][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
Warning: Shuffle Join MERGEJOIN[15][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 3' is a cross product
PREHOOK: query: explain select * from X_n0 as A, X_n0 as B, X_n0 as C
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: explain select * from X_n0 as A, X_n0 as B, X_n0 as C
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 4 (XPROD_EDGE)
        Reducer 3 <- Map 1 (XPROD_EDGE), Reducer 2 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: string)
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: c
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 100 Data size: 35600 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 100 Data size: 35600 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string), _col3 (type: string)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 1000 Data size: 534000 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), _col4 (type: string), _col5 (type: string), _col2 (type: string), _col3 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 1000 Data size: 534000 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1000 Data size: 534000 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[16][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 3' is a cross product
PREHOOK: query: select * from X_n0 as A, X_n0 as B, X_n0 as C order by A.key, B.key, C.key
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: select * from X_n0 as A, X_n0 as B, X_n0 as C order by A.key, B.key, C.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
0	val_0	0	val_0	0	val_0
0	val_0	0	val_0	10	val_10
0	val_0	0	val_0	100	val_100
0	val_0	0	val_0	103	val_103
0	val_0	0	val_0	104	val_104
0	val_0	0	val_0	105	val_105
0	val_0	0	val_0	11	val_11
0	val_0	0	val_0	111	val_111
0	val_0	0	val_0	113	val_113
0	val_0	0	val_0	114	val_114
0	val_0	10	val_10	0	val_0
0	val_0	10	val_10	10	val_10
0	val_0	10	val_10	100	val_100
0	val_0	10	val_10	103	val_103
0	val_0	10	val_10	104	val_104
0	val_0	10	val_10	105	val_105
0	val_0	10	val_10	11	val_11
0	val_0	10	val_10	111	val_111
0	val_0	10	val_10	113	val_113
0	val_0	10	val_10	114	val_114
0	val_0	100	val_100	0	val_0
0	val_0	100	val_100	10	val_10
0	val_0	100	val_100	100	val_100
0	val_0	100	val_100	103	val_103
0	val_0	100	val_100	104	val_104
0	val_0	100	val_100	105	val_105
0	val_0	100	val_100	11	val_11
0	val_0	100	val_100	111	val_111
0	val_0	100	val_100	113	val_113
0	val_0	100	val_100	114	val_114
0	val_0	103	val_103	0	val_0
0	val_0	103	val_103	10	val_10
0	val_0	103	val_103	100	val_100
0	val_0	103	val_103	103	val_103
0	val_0	103	val_103	104	val_104
0	val_0	103	val_103	105	val_105
0	val_0	103	val_103	11	val_11
0	val_0	103	val_103	111	val_111
0	val_0	103	val_103	113	val_113
0	val_0	103	val_103	114	val_114
0	val_0	104	val_104	0	val_0
0	val_0	104	val_104	10	val_10
0	val_0	104	val_104	100	val_100
0	val_0	104	val_104	103	val_103
0	val_0	104	val_104	104	val_104
0	val_0	104	val_104	105	val_105
0	val_0	104	val_104	11	val_11
0	val_0	104	val_104	111	val_111
0	val_0	104	val_104	113	val_113
0	val_0	104	val_104	114	val_114
0	val_0	105	val_105	0	val_0
0	val_0	105	val_105	10	val_10
0	val_0	105	val_105	100	val_100
0	val_0	105	val_105	103	val_103
0	val_0	105	val_105	104	val_104
0	val_0	105	val_105	105	val_105
0	val_0	105	val_105	11	val_11
0	val_0	105	val_105	111	val_111
0	val_0	105	val_105	113	val_113
0	val_0	105	val_105	114	val_114
0	val_0	11	val_11	0	val_0
0	val_0	11	val_11	10	val_10
0	val_0	11	val_11	100	val_100
0	val_0	11	val_11	103	val_103
0	val_0	11	val_11	104	val_104
0	val_0	11	val_11	105	val_105
0	val_0	11	val_11	11	val_11
0	val_0	11	val_11	111	val_111
0	val_0	11	val_11	113	val_113
0	val_0	11	val_11	114	val_114
0	val_0	111	val_111	0	val_0
0	val_0	111	val_111	10	val_10
0	val_0	111	val_111	100	val_100
0	val_0	111	val_111	103	val_103
0	val_0	111	val_111	104	val_104
0	val_0	111	val_111	105	val_105
0	val_0	111	val_111	11	val_11
0	val_0	111	val_111	111	val_111
0	val_0	111	val_111	113	val_113
0	val_0	111	val_111	114	val_114
0	val_0	113	val_113	0	val_0
0	val_0	113	val_113	10	val_10
0	val_0	113	val_113	100	val_100
0	val_0	113	val_113	103	val_103
0	val_0	113	val_113	104	val_104
0	val_0	113	val_113	105	val_105
0	val_0	113	val_113	11	val_11
0	val_0	113	val_113	111	val_111
0	val_0	113	val_113	113	val_113
0	val_0	113	val_113	114	val_114
0	val_0	114	val_114	0	val_0
0	val_0	114	val_114	10	val_10
0	val_0	114	val_114	100	val_100
0	val_0	114	val_114	103	val_103
0	val_0	114	val_114	104	val_104
0	val_0	114	val_114	105	val_105
0	val_0	114	val_114	11	val_11
0	val_0	114	val_114	111	val_111
0	val_0	114	val_114	113	val_113
0	val_0	114	val_114	114	val_114
10	val_10	0	val_0	0	val_0
10	val_10	0	val_0	10	val_10
10	val_10	0	val_0	100	val_100
10	val_10	0	val_0	103	val_103
10	val_10	0	val_0	104	val_104
10	val_10	0	val_0	105	val_105
10	val_10	0	val_0	11	val_11
10	val_10	0	val_0	111	val_111
10	val_10	0	val_0	113	val_113
10	val_10	0	val_0	114	val_114
10	val_10	10	val_10	0	val_0
10	val_10	10	val_10	10	val_10
10	val_10	10	val_10	100	val_100
10	val_10	10	val_10	103	val_103
10	val_10	10	val_10	104	val_104
10	val_10	10	val_10	105	val_105
10	val_10	10	val_10	11	val_11
10	val_10	10	val_10	111	val_111
10	val_10	10	val_10	113	val_113
10	val_10	10	val_10	114	val_114
10	val_10	100	val_100	0	val_0
10	val_10	100	val_100	10	val_10
10	val_10	100	val_100	100	val_100
10	val_10	100	val_100	103	val_103
10	val_10	100	val_100	104	val_104
10	val_10	100	val_100	105	val_105
10	val_10	100	val_100	11	val_11
10	val_10	100	val_100	111	val_111
10	val_10	100	val_100	113	val_113
10	val_10	100	val_100	114	val_114
10	val_10	103	val_103	0	val_0
10	val_10	103	val_103	10	val_10
10	val_10	103	val_103	100	val_100
10	val_10	103	val_103	103	val_103
10	val_10	103	val_103	104	val_104
10	val_10	103	val_103	105	val_105
10	val_10	103	val_103	11	val_11
10	val_10	103	val_103	111	val_111
10	val_10	103	val_103	113	val_113
10	val_10	103	val_103	114	val_114
10	val_10	104	val_104	0	val_0
10	val_10	104	val_104	10	val_10
10	val_10	104	val_104	100	val_100
10	val_10	104	val_104	103	val_103
10	val_10	104	val_104	104	val_104
10	val_10	104	val_104	105	val_105
10	val_10	104	val_104	11	val_11
10	val_10	104	val_104	111	val_111
10	val_10	104	val_104	113	val_113
10	val_10	104	val_104	114	val_114
10	val_10	105	val_105	0	val_0
10	val_10	105	val_105	10	val_10
10	val_10	105	val_105	100	val_100
10	val_10	105	val_105	103	val_103
10	val_10	105	val_105	104	val_104
10	val_10	105	val_105	105	val_105
10	val_10	105	val_105	11	val_11
10	val_10	105	val_105	111	val_111
10	val_10	105	val_105	113	val_113
10	val_10	105	val_105	114	val_114
10	val_10	11	val_11	0	val_0
10	val_10	11	val_11	10	val_10
10	val_10	11	val_11	100	val_100
10	val_10	11	val_11	103	val_103
10	val_10	11	val_11	104	val_104
10	val_10	11	val_11	105	val_105
10	val_10	11	val_11	11	val_11
10	val_10	11	val_11	111	val_111
10	val_10	11	val_11	113	val_113
10	val_10	11	val_11	114	val_114
10	val_10	111	val_111	0	val_0
10	val_10	111	val_111	10	val_10
10	val_10	111	val_111	100	val_100
10	val_10	111	val_111	103	val_103
10	val_10	111	val_111	104	val_104
10	val_10	111	val_111	105	val_105
10	val_10	111	val_111	11	val_11
10	val_10	111	val_111	111	val_111
10	val_10	111	val_111	113	val_113
10	val_10	111	val_111	114	val_114
10	val_10	113	val_113	0	val_0
10	val_10	113	val_113	10	val_10
10	val_10	113	val_113	100	val_100
10	val_10	113	val_113	103	val_103
10	val_10	113	val_113	104	val_104
10	val_10	113	val_113	105	val_105
10	val_10	113	val_113	11	val_11
10	val_10	113	val_113	111	val_111
10	val_10	113	val_113	113	val_113
10	val_10	113	val_113	114	val_114
10	val_10	114	val_114	0	val_0
10	val_10	114	val_114	10	val_10
10	val_10	114	val_114	100	val_100
10	val_10	114	val_114	103	val_103
10	val_10	114	val_114	104	val_104
10	val_10	114	val_114	105	val_105
10	val_10	114	val_114	11	val_11
10	val_10	114	val_114	111	val_111
10	val_10	114	val_114	113	val_113
10	val_10	114	val_114	114	val_114
100	val_100	0	val_0	0	val_0
100	val_100	0	val_0	10	val_10
100	val_100	0	val_0	100	val_100
100	val_100	0	val_0	103	val_103
100	val_100	0	val_0	104	val_104
100	val_100	0	val_0	105	val_105
100	val_100	0	val_0	11	val_11
100	val_100	0	val_0	111	val_111
100	val_100	0	val_0	113	val_113
100	val_100	0	val_0	114	val_114
100	val_100	10	val_10	0	val_0
100	val_100	10	val_10	10	val_10
100	val_100	10	val_10	100	val_100
100	val_100	10	val_10	103	val_103
100	val_100	10	val_10	104	val_104
100	val_100	10	val_10	105	val_105
100	val_100	10	val_10	11	val_11
100	val_100	10	val_10	111	val_111
100	val_100	10	val_10	113	val_113
100	val_100	10	val_10	114	val_114
100	val_100	100	val_100	0	val_0
100	val_100	100	val_100	10	val_10
100	val_100	100	val_100	100	val_100
100	val_100	100	val_100	103	val_103
100	val_100	100	val_100	104	val_104
100	val_100	100	val_100	105	val_105
100	val_100	100	val_100	11	val_11
100	val_100	100	val_100	111	val_111
100	val_100	100	val_100	113	val_113
100	val_100	100	val_100	114	val_114
100	val_100	103	val_103	0	val_0
100	val_100	103	val_103	10	val_10
100	val_100	103	val_103	100	val_100
100	val_100	103	val_103	103	val_103
100	val_100	103	val_103	104	val_104
100	val_100	103	val_103	105	val_105
100	val_100	103	val_103	11	val_11
100	val_100	103	val_103	111	val_111
100	val_100	103	val_103	113	val_113
100	val_100	103	val_103	114	val_114
100	val_100	104	val_104	0	val_0
100	val_100	104	val_104	10	val_10
100	val_100	104	val_104	100	val_100
100	val_100	104	val_104	103	val_103
100	val_100	104	val_104	104	val_104
100	val_100	104	val_104	105	val_105
100	val_100	104	val_104	11	val_11
100	val_100	104	val_104	111	val_111
100	val_100	104	val_104	113	val_113
100	val_100	104	val_104	114	val_114
100	val_100	105	val_105	0	val_0
100	val_100	105	val_105	10	val_10
100	val_100	105	val_105	100	val_100
100	val_100	105	val_105	103	val_103
100	val_100	105	val_105	104	val_104
100	val_100	105	val_105	105	val_105
100	val_100	105	val_105	11	val_11
100	val_100	105	val_105	111	val_111
100	val_100	105	val_105	113	val_113
100	val_100	105	val_105	114	val_114
100	val_100	11	val_11	0	val_0
100	val_100	11	val_11	10	val_10
100	val_100	11	val_11	100	val_100
100	val_100	11	val_11	103	val_103
100	val_100	11	val_11	104	val_104
100	val_100	11	val_11	105	val_105
100	val_100	11	val_11	11	val_11
100	val_100	11	val_11	111	val_111
100	val_100	11	val_11	113	val_113
100	val_100	11	val_11	114	val_114
100	val_100	111	val_111	0	val_0
100	val_100	111	val_111	10	val_10
100	val_100	111	val_111	100	val_100
100	val_100	111	val_111	103	val_103
100	val_100	111	val_111	104	val_104
100	val_100	111	val_111	105	val_105
100	val_100	111	val_111	11	val_11
100	val_100	111	val_111	111	val_111
100	val_100	111	val_111	113	val_113
100	val_100	111	val_111	114	val_114
100	val_100	113	val_113	0	val_0
100	val_100	113	val_113	10	val_10
100	val_100	113	val_113	100	val_100
100	val_100	113	val_113	103	val_103
100	val_100	113	val_113	104	val_104
100	val_100	113	val_113	105	val_105
100	val_100	113	val_113	11	val_11
100	val_100	113	val_113	111	val_111
100	val_100	113	val_113	113	val_113
100	val_100	113	val_113	114	val_114
100	val_100	114	val_114	0	val_0
100	val_100	114	val_114	10	val_10
100	val_100	114	val_114	100	val_100
100	val_100	114	val_114	103	val_103
100	val_100	114	val_114	104	val_104
100	val_100	114	val_114	105	val_105
100	val_100	114	val_114	11	val_11
100	val_100	114	val_114	111	val_111
100	val_100	114	val_114	113	val_113
100	val_100	114	val_114	114	val_114
103	val_103	0	val_0	0	val_0
103	val_103	0	val_0	10	val_10
103	val_103	0	val_0	100	val_100
103	val_103	0	val_0	103	val_103
103	val_103	0	val_0	104	val_104
103	val_103	0	val_0	105	val_105
103	val_103	0	val_0	11	val_11
103	val_103	0	val_0	111	val_111
103	val_103	0	val_0	113	val_113
103	val_103	0	val_0	114	val_114
103	val_103	10	val_10	0	val_0
103	val_103	10	val_10	10	val_10
103	val_103	10	val_10	100	val_100
103	val_103	10	val_10	103	val_103
103	val_103	10	val_10	104	val_104
103	val_103	10	val_10	105	val_105
103	val_103	10	val_10	11	val_11
103	val_103	10	val_10	111	val_111
103	val_103	10	val_10	113	val_113
103	val_103	10	val_10	114	val_114
103	val_103	100	val_100	0	val_0
103	val_103	100	val_100	10	val_10
103	val_103	100	val_100	100	val_100
103	val_103	100	val_100	103	val_103
103	val_103	100	val_100	104	val_104
103	val_103	100	val_100	105	val_105
103	val_103	100	val_100	11	val_11
103	val_103	100	val_100	111	val_111
103	val_103	100	val_100	113	val_113
103	val_103	100	val_100	114	val_114
103	val_103	103	val_103	0	val_0
103	val_103	103	val_103	10	val_10
103	val_103	103	val_103	100	val_100
103	val_103	103	val_103	103	val_103
103	val_103	103	val_103	104	val_104
103	val_103	103	val_103	105	val_105
103	val_103	103	val_103	11	val_11
103	val_103	103	val_103	111	val_111
103	val_103	103	val_103	113	val_113
103	val_103	103	val_103	114	val_114
103	val_103	104	val_104	0	val_0
103	val_103	104	val_104	10	val_10
103	val_103	104	val_104	100	val_100
103	val_103	104	val_104	103	val_103
103	val_103	104	val_104	104	val_104
103	val_103	104	val_104	105	val_105
103	val_103	104	val_104	11	val_11
103	val_103	104	val_104	111	val_111
103	val_103	104	val_104	113	val_113
103	val_103	104	val_104	114	val_114
103	val_103	105	val_105	0	val_0
103	val_103	105	val_105	10	val_10
103	val_103	105	val_105	100	val_100
103	val_103	105	val_105	103	val_103
103	val_103	105	val_105	104	val_104
103	val_103	105	val_105	105	val_105
103	val_103	105	val_105	11	val_11
103	val_103	105	val_105	111	val_111
103	val_103	105	val_105	113	val_113
103	val_103	105	val_105	114	val_114
103	val_103	11	val_11	0	val_0
103	val_103	11	val_11	10	val_10
103	val_103	11	val_11	100	val_100
103	val_103	11	val_11	103	val_103
103	val_103	11	val_11	104	val_104
103	val_103	11	val_11	105	val_105
103	val_103	11	val_11	11	val_11
103	val_103	11	val_11	111	val_111
103	val_103	11	val_11	113	val_113
103	val_103	11	val_11	114	val_114
103	val_103	111	val_111	0	val_0
103	val_103	111	val_111	10	val_10
103	val_103	111	val_111	100	val_100
103	val_103	111	val_111	103	val_103
103	val_103	111	val_111	104	val_104
103	val_103	111	val_111	105	val_105
103	val_103	111	val_111	11	val_11
103	val_103	111	val_111	111	val_111
103	val_103	111	val_111	113	val_113
103	val_103	111	val_111	114	val_114
103	val_103	113	val_113	0	val_0
103	val_103	113	val_113	10	val_10
103	val_103	113	val_113	100	val_100
103	val_103	113	val_113	103	val_103
103	val_103	113	val_113	104	val_104
103	val_103	113	val_113	105	val_105
103	val_103	113	val_113	11	val_11
103	val_103	113	val_113	111	val_111
103	val_103	113	val_113	113	val_113
103	val_103	113	val_113	114	val_114
103	val_103	114	val_114	0	val_0
103	val_103	114	val_114	10	val_10
103	val_103	114	val_114	100	val_100
103	val_103	114	val_114	103	val_103
103	val_103	114	val_114	104	val_104
103	val_103	114	val_114	105	val_105
103	val_103	114	val_114	11	val_11
103	val_103	114	val_114	111	val_111
103	val_103	114	val_114	113	val_113
103	val_103	114	val_114	114	val_114
104	val_104	0	val_0	0	val_0
104	val_104	0	val_0	10	val_10
104	val_104	0	val_0	100	val_100
104	val_104	0	val_0	103	val_103
104	val_104	0	val_0	104	val_104
104	val_104	0	val_0	105	val_105
104	val_104	0	val_0	11	val_11
104	val_104	0	val_0	111	val_111
104	val_104	0	val_0	113	val_113
104	val_104	0	val_0	114	val_114
104	val_104	10	val_10	0	val_0
104	val_104	10	val_10	10	val_10
104	val_104	10	val_10	100	val_100
104	val_104	10	val_10	103	val_103
104	val_104	10	val_10	104	val_104
104	val_104	10	val_10	105	val_105
104	val_104	10	val_10	11	val_11
104	val_104	10	val_10	111	val_111
104	val_104	10	val_10	113	val_113
104	val_104	10	val_10	114	val_114
104	val_104	100	val_100	0	val_0
104	val_104	100	val_100	10	val_10
104	val_104	100	val_100	100	val_100
104	val_104	100	val_100	103	val_103
104	val_104	100	val_100	104	val_104
104	val_104	100	val_100	105	val_105
104	val_104	100	val_100	11	val_11
104	val_104	100	val_100	111	val_111
104	val_104	100	val_100	113	val_113
104	val_104	100	val_100	114	val_114
104	val_104	103	val_103	0	val_0
104	val_104	103	val_103	10	val_10
104	val_104	103	val_103	100	val_100
104	val_104	103	val_103	103	val_103
104	val_104	103	val_103	104	val_104
104	val_104	103	val_103	105	val_105
104	val_104	103	val_103	11	val_11
104	val_104	103	val_103	111	val_111
104	val_104	103	val_103	113	val_113
104	val_104	103	val_103	114	val_114
104	val_104	104	val_104	0	val_0
104	val_104	104	val_104	10	val_10
104	val_104	104	val_104	100	val_100
104	val_104	104	val_104	103	val_103
104	val_104	104	val_104	104	val_104
104	val_104	104	val_104	105	val_105
104	val_104	104	val_104	11	val_11
104	val_104	104	val_104	111	val_111
104	val_104	104	val_104	113	val_113
104	val_104	104	val_104	114	val_114
104	val_104	105	val_105	0	val_0
104	val_104	105	val_105	10	val_10
104	val_104	105	val_105	100	val_100
104	val_104	105	val_105	103	val_103
104	val_104	105	val_105	104	val_104
104	val_104	105	val_105	105	val_105
104	val_104	105	val_105	11	val_11
104	val_104	105	val_105	111	val_111
104	val_104	105	val_105	113	val_113
104	val_104	105	val_105	114	val_114
104	val_104	11	val_11	0	val_0
104	val_104	11	val_11	10	val_10
104	val_104	11	val_11	100	val_100
104	val_104	11	val_11	103	val_103
104	val_104	11	val_11	104	val_104
104	val_104	11	val_11	105	val_105
104	val_104	11	val_11	11	val_11
104	val_104	11	val_11	111	val_111
104	val_104	11	val_11	113	val_113
104	val_104	11	val_11	114	val_114
104	val_104	111	val_111	0	val_0
104	val_104	111	val_111	10	val_10
104	val_104	111	val_111	100	val_100
104	val_104	111	val_111	103	val_103
104	val_104	111	val_111	104	val_104
104	val_104	111	val_111	105	val_105
104	val_104	111	val_111	11	val_11
104	val_104	111	val_111	111	val_111
104	val_104	111	val_111	113	val_113
104	val_104	111	val_111	114	val_114
104	val_104	113	val_113	0	val_0
104	val_104	113	val_113	10	val_10
104	val_104	113	val_113	100	val_100
104	val_104	113	val_113	103	val_103
104	val_104	113	val_113	104	val_104
104	val_104	113	val_113	105	val_105
104	val_104	113	val_113	11	val_11
104	val_104	113	val_113	111	val_111
104	val_104	113	val_113	113	val_113
104	val_104	113	val_113	114	val_114
104	val_104	114	val_114	0	val_0
104	val_104	114	val_114	10	val_10
104	val_104	114	val_114	100	val_100
104	val_104	114	val_114	103	val_103
104	val_104	114	val_114	104	val_104
104	val_104	114	val_114	105	val_105
104	val_104	114	val_114	11	val_11
104	val_104	114	val_114	111	val_111
104	val_104	114	val_114	113	val_113
104	val_104	114	val_114	114	val_114
105	val_105	0	val_0	0	val_0
105	val_105	0	val_0	10	val_10
105	val_105	0	val_0	100	val_100
105	val_105	0	val_0	103	val_103
105	val_105	0	val_0	104	val_104
105	val_105	0	val_0	105	val_105
105	val_105	0	val_0	11	val_11
105	val_105	0	val_0	111	val_111
105	val_105	0	val_0	113	val_113
105	val_105	0	val_0	114	val_114
105	val_105	10	val_10	0	val_0
105	val_105	10	val_10	10	val_10
105	val_105	10	val_10	100	val_100
105	val_105	10	val_10	103	val_103
105	val_105	10	val_10	104	val_104
105	val_105	10	val_10	105	val_105
105	val_105	10	val_10	11	val_11
105	val_105	10	val_10	111	val_111
105	val_105	10	val_10	113	val_113
105	val_105	10	val_10	114	val_114
105	val_105	100	val_100	0	val_0
105	val_105	100	val_100	10	val_10
105	val_105	100	val_100	100	val_100
105	val_105	100	val_100	103	val_103
105	val_105	100	val_100	104	val_104
105	val_105	100	val_100	105	val_105
105	val_105	100	val_100	11	val_11
105	val_105	100	val_100	111	val_111
105	val_105	100	val_100	113	val_113
105	val_105	100	val_100	114	val_114
105	val_105	103	val_103	0	val_0
105	val_105	103	val_103	10	val_10
105	val_105	103	val_103	100	val_100
105	val_105	103	val_103	103	val_103
105	val_105	103	val_103	104	val_104
105	val_105	103	val_103	105	val_105
105	val_105	103	val_103	11	val_11
105	val_105	103	val_103	111	val_111
105	val_105	103	val_103	113	val_113
105	val_105	103	val_103	114	val_114
105	val_105	104	val_104	0	val_0
105	val_105	104	val_104	10	val_10
105	val_105	104	val_104	100	val_100
105	val_105	104	val_104	103	val_103
105	val_105	104	val_104	104	val_104
105	val_105	104	val_104	105	val_105
105	val_105	104	val_104	11	val_11
105	val_105	104	val_104	111	val_111
105	val_105	104	val_104	113	val_113
105	val_105	104	val_104	114	val_114
105	val_105	105	val_105	0	val_0
105	val_105	105	val_105	10	val_10
105	val_105	105	val_105	100	val_100
105	val_105	105	val_105	103	val_103
105	val_105	105	val_105	104	val_104
105	val_105	105	val_105	105	val_105
105	val_105	105	val_105	11	val_11
105	val_105	105	val_105	111	val_111
105	val_105	105	val_105	113	val_113
105	val_105	105	val_105	114	val_114
105	val_105	11	val_11	0	val_0
105	val_105	11	val_11	10	val_10
105	val_105	11	val_11	100	val_100
105	val_105	11	val_11	103	val_103
105	val_105	11	val_11	104	val_104
105	val_105	11	val_11	105	val_105
105	val_105	11	val_11	11	val_11
105	val_105	11	val_11	111	val_111
105	val_105	11	val_11	113	val_113
105	val_105	11	val_11	114	val_114
105	val_105	111	val_111	0	val_0
105	val_105	111	val_111	10	val_10
105	val_105	111	val_111	100	val_100
105	val_105	111	val_111	103	val_103
105	val_105	111	val_111	104	val_104
105	val_105	111	val_111	105	val_105
105	val_105	111	val_111	11	val_11
105	val_105	111	val_111	111	val_111
105	val_105	111	val_111	113	val_113
105	val_105	111	val_111	114	val_114
105	val_105	113	val_113	0	val_0
105	val_105	113	val_113	10	val_10
105	val_105	113	val_113	100	val_100
105	val_105	113	val_113	103	val_103
105	val_105	113	val_113	104	val_104
105	val_105	113	val_113	105	val_105
105	val_105	113	val_113	11	val_11
105	val_105	113	val_113	111	val_111
105	val_105	113	val_113	113	val_113
105	val_105	113	val_113	114	val_114
105	val_105	114	val_114	0	val_0
105	val_105	114	val_114	10	val_10
105	val_105	114	val_114	100	val_100
105	val_105	114	val_114	103	val_103
105	val_105	114	val_114	104	val_104
105	val_105	114	val_114	105	val_105
105	val_105	114	val_114	11	val_11
105	val_105	114	val_114	111	val_111
105	val_105	114	val_114	113	val_113
105	val_105	114	val_114	114	val_114
11	val_11	0	val_0	0	val_0
11	val_11	0	val_0	10	val_10
11	val_11	0	val_0	100	val_100
11	val_11	0	val_0	103	val_103
11	val_11	0	val_0	104	val_104
11	val_11	0	val_0	105	val_105
11	val_11	0	val_0	11	val_11
11	val_11	0	val_0	111	val_111
11	val_11	0	val_0	113	val_113
11	val_11	0	val_0	114	val_114
11	val_11	10	val_10	0	val_0
11	val_11	10	val_10	10	val_10
11	val_11	10	val_10	100	val_100
11	val_11	10	val_10	103	val_103
11	val_11	10	val_10	104	val_104
11	val_11	10	val_10	105	val_105
11	val_11	10	val_10	11	val_11
11	val_11	10	val_10	111	val_111
11	val_11	10	val_10	113	val_113
11	val_11	10	val_10	114	val_114
11	val_11	100	val_100	0	val_0
11	val_11	100	val_100	10	val_10
11	val_11	100	val_100	100	val_100
11	val_11	100	val_100	103	val_103
11	val_11	100	val_100	104	val_104
11	val_11	100	val_100	105	val_105
11	val_11	100	val_100	11	val_11
11	val_11	100	val_100	111	val_111
11	val_11	100	val_100	113	val_113
11	val_11	100	val_100	114	val_114
11	val_11	103	val_103	0	val_0
11	val_11	103	val_103	10	val_10
11	val_11	103	val_103	100	val_100
11	val_11	103	val_103	103	val_103
11	val_11	103	val_103	104	val_104
11	val_11	103	val_103	105	val_105
11	val_11	103	val_103	11	val_11
11	val_11	103	val_103	111	val_111
11	val_11	103	val_103	113	val_113
11	val_11	103	val_103	114	val_114
11	val_11	104	val_104	0	val_0
11	val_11	104	val_104	10	val_10
11	val_11	104	val_104	100	val_100
11	val_11	104	val_104	103	val_103
11	val_11	104	val_104	104	val_104
11	val_11	104	val_104	105	val_105
11	val_11	104	val_104	11	val_11
11	val_11	104	val_104	111	val_111
11	val_11	104	val_104	113	val_113
11	val_11	104	val_104	114	val_114
11	val_11	105	val_105	0	val_0
11	val_11	105	val_105	10	val_10
11	val_11	105	val_105	100	val_100
11	val_11	105	val_105	103	val_103
11	val_11	105	val_105	104	val_104
11	val_11	105	val_105	105	val_105
11	val_11	105	val_105	11	val_11
11	val_11	105	val_105	111	val_111
11	val_11	105	val_105	113	val_113
11	val_11	105	val_105	114	val_114
11	val_11	11	val_11	0	val_0
11	val_11	11	val_11	10	val_10
11	val_11	11	val_11	100	val_100
11	val_11	11	val_11	103	val_103
11	val_11	11	val_11	104	val_104
11	val_11	11	val_11	105	val_105
11	val_11	11	val_11	11	val_11
11	val_11	11	val_11	111	val_111
11	val_11	11	val_11	113	val_113
11	val_11	11	val_11	114	val_114
11	val_11	111	val_111	0	val_0
11	val_11	111	val_111	10	val_10
11	val_11	111	val_111	100	val_100
11	val_11	111	val_111	103	val_103
11	val_11	111	val_111	104	val_104
11	val_11	111	val_111	105	val_105
11	val_11	111	val_111	11	val_11
11	val_11	111	val_111	111	val_111
11	val_11	111	val_111	113	val_113
11	val_11	111	val_111	114	val_114
11	val_11	113	val_113	0	val_0
11	val_11	113	val_113	10	val_10
11	val_11	113	val_113	100	val_100
11	val_11	113	val_113	103	val_103
11	val_11	113	val_113	104	val_104
11	val_11	113	val_113	105	val_105
11	val_11	113	val_113	11	val_11
11	val_11	113	val_113	111	val_111
11	val_11	113	val_113	113	val_113
11	val_11	113	val_113	114	val_114
11	val_11	114	val_114	0	val_0
11	val_11	114	val_114	10	val_10
11	val_11	114	val_114	100	val_100
11	val_11	114	val_114	103	val_103
11	val_11	114	val_114	104	val_104
11	val_11	114	val_114	105	val_105
11	val_11	114	val_114	11	val_11
11	val_11	114	val_114	111	val_111
11	val_11	114	val_114	113	val_113
11	val_11	114	val_114	114	val_114
111	val_111	0	val_0	0	val_0
111	val_111	0	val_0	10	val_10
111	val_111	0	val_0	100	val_100
111	val_111	0	val_0	103	val_103
111	val_111	0	val_0	104	val_104
111	val_111	0	val_0	105	val_105
111	val_111	0	val_0	11	val_11
111	val_111	0	val_0	111	val_111
111	val_111	0	val_0	113	val_113
111	val_111	0	val_0	114	val_114
111	val_111	10	val_10	0	val_0
111	val_111	10	val_10	10	val_10
111	val_111	10	val_10	100	val_100
111	val_111	10	val_10	103	val_103
111	val_111	10	val_10	104	val_104
111	val_111	10	val_10	105	val_105
111	val_111	10	val_10	11	val_11
111	val_111	10	val_10	111	val_111
111	val_111	10	val_10	113	val_113
111	val_111	10	val_10	114	val_114
111	val_111	100	val_100	0	val_0
111	val_111	100	val_100	10	val_10
111	val_111	100	val_100	100	val_100
111	val_111	100	val_100	103	val_103
111	val_111	100	val_100	104	val_104
111	val_111	100	val_100	105	val_105
111	val_111	100	val_100	11	val_11
111	val_111	100	val_100	111	val_111
111	val_111	100	val_100	113	val_113
111	val_111	100	val_100	114	val_114
111	val_111	103	val_103	0	val_0
111	val_111	103	val_103	10	val_10
111	val_111	103	val_103	100	val_100
111	val_111	103	val_103	103	val_103
111	val_111	103	val_103	104	val_104
111	val_111	103	val_103	105	val_105
111	val_111	103	val_103	11	val_11
111	val_111	103	val_103	111	val_111
111	val_111	103	val_103	113	val_113
111	val_111	103	val_103	114	val_114
111	val_111	104	val_104	0	val_0
111	val_111	104	val_104	10	val_10
111	val_111	104	val_104	100	val_100
111	val_111	104	val_104	103	val_103
111	val_111	104	val_104	104	val_104
111	val_111	104	val_104	105	val_105
111	val_111	104	val_104	11	val_11
111	val_111	104	val_104	111	val_111
111	val_111	104	val_104	113	val_113
111	val_111	104	val_104	114	val_114
111	val_111	105	val_105	0	val_0
111	val_111	105	val_105	10	val_10
111	val_111	105	val_105	100	val_100
111	val_111	105	val_105	103	val_103
111	val_111	105	val_105	104	val_104
111	val_111	105	val_105	105	val_105
111	val_111	105	val_105	11	val_11
111	val_111	105	val_105	111	val_111
111	val_111	105	val_105	113	val_113
111	val_111	105	val_105	114	val_114
111	val_111	11	val_11	0	val_0
111	val_111	11	val_11	10	val_10
111	val_111	11	val_11	100	val_100
111	val_111	11	val_11	103	val_103
111	val_111	11	val_11	104	val_104
111	val_111	11	val_11	105	val_105
111	val_111	11	val_11	11	val_11
111	val_111	11	val_11	111	val_111
111	val_111	11	val_11	113	val_113
111	val_111	11	val_11	114	val_114
111	val_111	111	val_111	0	val_0
111	val_111	111	val_111	10	val_10
111	val_111	111	val_111	100	val_100
111	val_111	111	val_111	103	val_103
111	val_111	111	val_111	104	val_104
111	val_111	111	val_111	105	val_105
111	val_111	111	val_111	11	val_11
111	val_111	111	val_111	111	val_111
111	val_111	111	val_111	113	val_113
111	val_111	111	val_111	114	val_114
111	val_111	113	val_113	0	val_0
111	val_111	113	val_113	10	val_10
111	val_111	113	val_113	100	val_100
111	val_111	113	val_113	103	val_103
111	val_111	113	val_113	104	val_104
111	val_111	113	val_113	105	val_105
111	val_111	113	val_113	11	val_11
111	val_111	113	val_113	111	val_111
111	val_111	113	val_113	113	val_113
111	val_111	113	val_113	114	val_114
111	val_111	114	val_114	0	val_0
111	val_111	114	val_114	10	val_10
111	val_111	114	val_114	100	val_100
111	val_111	114	val_114	103	val_103
111	val_111	114	val_114	104	val_104
111	val_111	114	val_114	105	val_105
111	val_111	114	val_114	11	val_11
111	val_111	114	val_114	111	val_111
111	val_111	114	val_114	113	val_113
111	val_111	114	val_114	114	val_114
113	val_113	0	val_0	0	val_0
113	val_113	0	val_0	10	val_10
113	val_113	0	val_0	100	val_100
113	val_113	0	val_0	103	val_103
113	val_113	0	val_0	104	val_104
113	val_113	0	val_0	105	val_105
113	val_113	0	val_0	11	val_11
113	val_113	0	val_0	111	val_111
113	val_113	0	val_0	113	val_113
113	val_113	0	val_0	114	val_114
113	val_113	10	val_10	0	val_0
113	val_113	10	val_10	10	val_10
113	val_113	10	val_10	100	val_100
113	val_113	10	val_10	103	val_103
113	val_113	10	val_10	104	val_104
113	val_113	10	val_10	105	val_105
113	val_113	10	val_10	11	val_11
113	val_113	10	val_10	111	val_111
113	val_113	10	val_10	113	val_113
113	val_113	10	val_10	114	val_114
113	val_113	100	val_100	0	val_0
113	val_113	100	val_100	10	val_10
113	val_113	100	val_100	100	val_100
113	val_113	100	val_100	103	val_103
113	val_113	100	val_100	104	val_104
113	val_113	100	val_100	105	val_105
113	val_113	100	val_100	11	val_11
113	val_113	100	val_100	111	val_111
113	val_113	100	val_100	113	val_113
113	val_113	100	val_100	114	val_114
113	val_113	103	val_103	0	val_0
113	val_113	103	val_103	10	val_10
113	val_113	103	val_103	100	val_100
113	val_113	103	val_103	103	val_103
113	val_113	103	val_103	104	val_104
113	val_113	103	val_103	105	val_105
113	val_113	103	val_103	11	val_11
113	val_113	103	val_103	111	val_111
113	val_113	103	val_103	113	val_113
113	val_113	103	val_103	114	val_114
113	val_113	104	val_104	0	val_0
113	val_113	104	val_104	10	val_10
113	val_113	104	val_104	100	val_100
113	val_113	104	val_104	103	val_103
113	val_113	104	val_104	104	val_104
113	val_113	104	val_104	105	val_105
113	val_113	104	val_104	11	val_11
113	val_113	104	val_104	111	val_111
113	val_113	104	val_104	113	val_113
113	val_113	104	val_104	114	val_114
113	val_113	105	val_105	0	val_0
113	val_113	105	val_105	10	val_10
113	val_113	105	val_105	100	val_100
113	val_113	105	val_105	103	val_103
113	val_113	105	val_105	104	val_104
113	val_113	105	val_105	105	val_105
113	val_113	105	val_105	11	val_11
113	val_113	105	val_105	111	val_111
113	val_113	105	val_105	113	val_113
113	val_113	105	val_105	114	val_114
113	val_113	11	val_11	0	val_0
113	val_113	11	val_11	10	val_10
113	val_113	11	val_11	100	val_100
113	val_113	11	val_11	103	val_103
113	val_113	11	val_11	104	val_104
113	val_113	11	val_11	105	val_105
113	val_113	11	val_11	11	val_11
113	val_113	11	val_11	111	val_111
113	val_113	11	val_11	113	val_113
113	val_113	11	val_11	114	val_114
113	val_113	111	val_111	0	val_0
113	val_113	111	val_111	10	val_10
113	val_113	111	val_111	100	val_100
113	val_113	111	val_111	103	val_103
113	val_113	111	val_111	104	val_104
113	val_113	111	val_111	105	val_105
113	val_113	111	val_111	11	val_11
113	val_113	111	val_111	111	val_111
113	val_113	111	val_111	113	val_113
113	val_113	111	val_111	114	val_114
113	val_113	113	val_113	0	val_0
113	val_113	113	val_113	10	val_10
113	val_113	113	val_113	100	val_100
113	val_113	113	val_113	103	val_103
113	val_113	113	val_113	104	val_104
113	val_113	113	val_113	105	val_105
113	val_113	113	val_113	11	val_11
113	val_113	113	val_113	111	val_111
113	val_113	113	val_113	113	val_113
113	val_113	113	val_113	114	val_114
113	val_113	114	val_114	0	val_0
113	val_113	114	val_114	10	val_10
113	val_113	114	val_114	100	val_100
113	val_113	114	val_114	103	val_103
113	val_113	114	val_114	104	val_104
113	val_113	114	val_114	105	val_105
113	val_113	114	val_114	11	val_11
113	val_113	114	val_114	111	val_111
113	val_113	114	val_114	113	val_113
113	val_113	114	val_114	114	val_114
114	val_114	0	val_0	0	val_0
114	val_114	0	val_0	10	val_10
114	val_114	0	val_0	100	val_100
114	val_114	0	val_0	103	val_103
114	val_114	0	val_0	104	val_104
114	val_114	0	val_0	105	val_105
114	val_114	0	val_0	11	val_11
114	val_114	0	val_0	111	val_111
114	val_114	0	val_0	113	val_113
114	val_114	0	val_0	114	val_114
114	val_114	10	val_10	0	val_0
114	val_114	10	val_10	10	val_10
114	val_114	10	val_10	100	val_100
114	val_114	10	val_10	103	val_103
114	val_114	10	val_10	104	val_104
114	val_114	10	val_10	105	val_105
114	val_114	10	val_10	11	val_11
114	val_114	10	val_10	111	val_111
114	val_114	10	val_10	113	val_113
114	val_114	10	val_10	114	val_114
114	val_114	100	val_100	0	val_0
114	val_114	100	val_100	10	val_10
114	val_114	100	val_100	100	val_100
114	val_114	100	val_100	103	val_103
114	val_114	100	val_100	104	val_104
114	val_114	100	val_100	105	val_105
114	val_114	100	val_100	11	val_11
114	val_114	100	val_100	111	val_111
114	val_114	100	val_100	113	val_113
114	val_114	100	val_100	114	val_114
114	val_114	103	val_103	0	val_0
114	val_114	103	val_103	10	val_10
114	val_114	103	val_103	100	val_100
114	val_114	103	val_103	103	val_103
114	val_114	103	val_103	104	val_104
114	val_114	103	val_103	105	val_105
114	val_114	103	val_103	11	val_11
114	val_114	103	val_103	111	val_111
114	val_114	103	val_103	113	val_113
114	val_114	103	val_103	114	val_114
114	val_114	104	val_104	0	val_0
114	val_114	104	val_104	10	val_10
114	val_114	104	val_104	100	val_100
114	val_114	104	val_104	103	val_103
114	val_114	104	val_104	104	val_104
114	val_114	104	val_104	105	val_105
114	val_114	104	val_104	11	val_11
114	val_114	104	val_104	111	val_111
114	val_114	104	val_104	113	val_113
114	val_114	104	val_104	114	val_114
114	val_114	105	val_105	0	val_0
114	val_114	105	val_105	10	val_10
114	val_114	105	val_105	100	val_100
114	val_114	105	val_105	103	val_103
114	val_114	105	val_105	104	val_104
114	val_114	105	val_105	105	val_105
114	val_114	105	val_105	11	val_11
114	val_114	105	val_105	111	val_111
114	val_114	105	val_105	113	val_113
114	val_114	105	val_105	114	val_114
114	val_114	11	val_11	0	val_0
114	val_114	11	val_11	10	val_10
114	val_114	11	val_11	100	val_100
114	val_114	11	val_11	103	val_103
114	val_114	11	val_11	104	val_104
114	val_114	11	val_11	105	val_105
114	val_114	11	val_11	11	val_11
114	val_114	11	val_11	111	val_111
114	val_114	11	val_11	113	val_113
114	val_114	11	val_11	114	val_114
114	val_114	111	val_111	0	val_0
114	val_114	111	val_111	10	val_10
114	val_114	111	val_111	100	val_100
114	val_114	111	val_111	103	val_103
114	val_114	111	val_111	104	val_104
114	val_114	111	val_111	105	val_105
114	val_114	111	val_111	11	val_11
114	val_114	111	val_111	111	val_111
114	val_114	111	val_111	113	val_113
114	val_114	111	val_111	114	val_114
114	val_114	113	val_113	0	val_0
114	val_114	113	val_113	10	val_10
114	val_114	113	val_113	100	val_100
114	val_114	113	val_113	103	val_103
114	val_114	113	val_113	104	val_104
114	val_114	113	val_113	105	val_105
114	val_114	113	val_113	11	val_11
114	val_114	113	val_113	111	val_111
114	val_114	113	val_113	113	val_113
114	val_114	113	val_113	114	val_114
114	val_114	114	val_114	0	val_0
114	val_114	114	val_114	10	val_10
114	val_114	114	val_114	100	val_100
114	val_114	114	val_114	103	val_103
114	val_114	114	val_114	104	val_104
114	val_114	114	val_114	105	val_105
114	val_114	114	val_114	11	val_11
114	val_114	114	val_114	111	val_111
114	val_114	114	val_114	113	val_113
114	val_114	114	val_114	114	val_114
Warning: Shuffle Join MERGEJOIN[11][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: explain select * from X_n0 as A join X_n0 as B on A.key in ("103", "104", "105")
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: explain select * from X_n0 as A join X_n0 as B on A.key in ("103", "104", "105")
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  filterExpr: (key) IN ('103', '104', '105') (type: boolean)
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (key) IN ('103', '104', '105') (type: boolean)
                    Statistics: Num rows: 3 Data size: 534 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: string), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 3 Data size: 534 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 3 Data size: 534 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 30 Data size: 10680 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 30 Data size: 10680 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[13][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: select * from X_n0 as A join X_n0 as B on A.key in ("103", "104", "105") order by A.key, B.key
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: select * from X_n0 as A join X_n0 as B on A.key in ("103", "104", "105") order by A.key, B.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
103	val_103	0	val_0
103	val_103	10	val_10
103	val_103	100	val_100
103	val_103	103	val_103
103	val_103	104	val_104
103	val_103	105	val_105
103	val_103	11	val_11
103	val_103	111	val_111
103	val_103	113	val_113
103	val_103	114	val_114
104	val_104	0	val_0
104	val_104	10	val_10
104	val_104	100	val_100
104	val_104	103	val_103
104	val_104	104	val_104
104	val_104	105	val_105
104	val_104	11	val_11
104	val_104	111	val_111
104	val_104	113	val_113
104	val_104	114	val_114
105	val_105	0	val_0
105	val_105	10	val_10
105	val_105	100	val_100
105	val_105	103	val_103
105	val_105	104	val_104
105	val_105	105	val_105
105	val_105	11	val_11
105	val_105	111	val_111
105	val_105	113	val_113
105	val_105	114	val_114
Warning: Shuffle Join MERGEJOIN[13][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: explain select A.key, count(*)  from X_n0 as A, X_n0 as B group by A.key
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: explain select A.key, count(*)  from X_n0 as A, X_n0 as B group by A.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 4 (XPROD_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 10 Data size: 870 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string)
                    outputColumnNames: _col0
                    Statistics: Num rows: 10 Data size: 870 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 10 Data size: 870 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 10 Data size: 102 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    Statistics: Num rows: 10 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 10 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0
                Statistics: Num rows: 100 Data size: 8700 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: count()
                  keys: _col0 (type: string)
                  minReductionHashAggr: 0.9
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 10 Data size: 950 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: string)
                    Statistics: Num rows: 10 Data size: 950 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col1 (type: bigint)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 10 Data size: 950 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 10 Data size: 950 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[15][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: select A.key, count(*)  from X_n0 as A, X_n0 as B group by A.key order by A.key
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: select A.key, count(*)  from X_n0 as A, X_n0 as B group by A.key order by A.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
0	10
10	10
100	10
103	10
104	10
105	10
11	10
111	10
113	10
114	10
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: explain select * from X_n0 as A left outer join X_n0 as B on (A.key = B.key or A.value between "val_103" and "val_105")
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: explain select * from X_n0 as A left outer join X_n0 as B on (A.key = B.key or A.value between "val_103" and "val_105")
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string), value BETWEEN 'val_103' AND 'val_105' (type: boolean)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 10 Data size: 1820 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 10 Data size: 1820 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: string), _col2 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Outer Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                residual filter predicates: {((_col0 = _col3) or _col2)}
                Statistics: Num rows: 100 Data size: 36000 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), _col3 (type: string), _col4 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 100 Data size: 35600 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 100 Data size: 35600 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: explain select * from X_n0 as A right outer join X_n0 as B on (A.key = B.key or A.value between "val_103" and "val_105")
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: explain select * from X_n0 as A right outer join X_n0 as B on (A.key = B.key or A.value between "val_103" and "val_105")
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Right Outer Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3
                residual filter predicates: {((_col0 = _col2) or _col1 BETWEEN 'val_103' AND 'val_105')}
                Statistics: Num rows: 100 Data size: 35600 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 100 Data size: 35600 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: explain select * from X_n0 as A full outer join X_n0 as B on (A.key = B.key or A.value between "val_103" and "val_105")
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: explain select * from X_n0 as A full outer join X_n0 as B on (A.key = B.key or A.value between "val_103" and "val_105")
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Full Outer Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3
                residual filter predicates: {((_col0 = _col2) or _col1 BETWEEN 'val_103' AND 'val_105')}
                Statistics: Num rows: 100 Data size: 35600 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 100 Data size: 35600 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 3' is a cross product
PREHOOK: query: explain select * from (select X_n0.key, count(*) from X_n0 group by X_n0.key) as A, (select X_n0.key, count(*) from X_n0 group by X_n0.key) as B
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: explain select * from (select X_n0.key, count(*) from X_n0 group by X_n0.key) as A, (select X_n0.key, count(*) from X_n0 group by X_n0.key) as B
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (XPROD_EDGE), Reducer 4 (XPROD_EDGE)
        Reducer 4 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: x_n0
                  Statistics: Num rows: 10 Data size: 870 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string)
                    outputColumnNames: key
                    Statistics: Num rows: 10 Data size: 870 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 10 Data size: 950 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 10 Data size: 950 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: bigint)
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 10 Data size: 950 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 10 Data size: 950 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 10 Data size: 950 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col0 (type: string), _col1 (type: bigint)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 100 Data size: 19000 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 100 Data size: 19000 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 10 Data size: 950 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 10 Data size: 950 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col0 (type: string), _col1 (type: bigint)

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[19][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 3' is a cross product
PREHOOK: query: select * from (select X_n0.key, count(*) from X_n0 group by X_n0.key) as A, (select X_n0.key, count(*) from X_n0 group by X_n0.key) as B order by A.key, B.key
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: select * from (select X_n0.key, count(*) from X_n0 group by X_n0.key) as A, (select X_n0.key, count(*) from X_n0 group by X_n0.key) as B order by A.key, B.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
0	1	0	1
0	1	10	1
0	1	100	1
0	1	103	1
0	1	104	1
0	1	105	1
0	1	11	1
0	1	111	1
0	1	113	1
0	1	114	1
10	1	0	1
10	1	10	1
10	1	100	1
10	1	103	1
10	1	104	1
10	1	105	1
10	1	11	1
10	1	111	1
10	1	113	1
10	1	114	1
100	1	0	1
100	1	10	1
100	1	100	1
100	1	103	1
100	1	104	1
100	1	105	1
100	1	11	1
100	1	111	1
100	1	113	1
100	1	114	1
103	1	0	1
103	1	10	1
103	1	100	1
103	1	103	1
103	1	104	1
103	1	105	1
103	1	11	1
103	1	111	1
103	1	113	1
103	1	114	1
104	1	0	1
104	1	10	1
104	1	100	1
104	1	103	1
104	1	104	1
104	1	105	1
104	1	11	1
104	1	111	1
104	1	113	1
104	1	114	1
105	1	0	1
105	1	10	1
105	1	100	1
105	1	103	1
105	1	104	1
105	1	105	1
105	1	11	1
105	1	111	1
105	1	113	1
105	1	114	1
11	1	0	1
11	1	10	1
11	1	100	1
11	1	103	1
11	1	104	1
11	1	105	1
11	1	11	1
11	1	111	1
11	1	113	1
11	1	114	1
111	1	0	1
111	1	10	1
111	1	100	1
111	1	103	1
111	1	104	1
111	1	105	1
111	1	11	1
111	1	111	1
111	1	113	1
111	1	114	1
113	1	0	1
113	1	10	1
113	1	100	1
113	1	103	1
113	1	104	1
113	1	105	1
113	1	11	1
113	1	111	1
113	1	113	1
113	1	114	1
114	1	0	1
114	1	10	1
114	1	100	1
114	1	103	1
114	1	104	1
114	1	105	1
114	1	11	1
114	1	111	1
114	1	113	1
114	1	114	1
Warning: Shuffle Join MERGEJOIN[13][tables = [$hdt$_1]] in Stage 'Reducer 3' is a cross product
PREHOOK: query: explain select * from (select * from X_n0 union all select * from X_n0 as y) a join X_n0
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: explain select * from (select * from X_n0 union all select * from X_n0 as y) a join X_n0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Union 2 (CONTAINS)
        Map 4 <- Union 2 (CONTAINS)
        Reducer 3 <- Map 5 (XPROD_EDGE), Union 2 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: x_n0
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 20 Data size: 3560 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: y
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 20 Data size: 3560 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: x_n0
                  Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 10 Data size: 1780 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 200 Data size: 71200 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 200 Data size: 71200 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Union 2 
            Vertex: Union 2

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[15][tables = [$hdt$_1]] in Stage 'Reducer 3' is a cross product
PREHOOK: query: select * from (select * from X_n0 union all select * from X_n0 as y) a join X_n0 order by a.key, X_n0.key
PREHOOK: type: QUERY
PREHOOK: Input: default@x_n0
#### A masked pattern was here ####
POSTHOOK: query: select * from (select * from X_n0 union all select * from X_n0 as y) a join X_n0 order by a.key, X_n0.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_n0
#### A masked pattern was here ####
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	10	val_10
0	val_0	10	val_10
0	val_0	100	val_100
0	val_0	100	val_100
0	val_0	103	val_103
0	val_0	103	val_103
0	val_0	104	val_104
0	val_0	104	val_104
0	val_0	105	val_105
0	val_0	105	val_105
0	val_0	11	val_11
0	val_0	11	val_11
0	val_0	111	val_111
0	val_0	111	val_111
0	val_0	113	val_113
0	val_0	113	val_113
0	val_0	114	val_114
0	val_0	114	val_114
10	val_10	0	val_0
10	val_10	0	val_0
10	val_10	10	val_10
10	val_10	10	val_10
10	val_10	100	val_100
10	val_10	100	val_100
10	val_10	103	val_103
10	val_10	103	val_103
10	val_10	104	val_104
10	val_10	104	val_104
10	val_10	105	val_105
10	val_10	105	val_105
10	val_10	11	val_11
10	val_10	11	val_11
10	val_10	111	val_111
10	val_10	111	val_111
10	val_10	113	val_113
10	val_10	113	val_113
10	val_10	114	val_114
10	val_10	114	val_114
100	val_100	0	val_0
100	val_100	0	val_0
100	val_100	10	val_10
100	val_100	10	val_10
100	val_100	100	val_100
100	val_100	100	val_100
100	val_100	103	val_103
100	val_100	103	val_103
100	val_100	104	val_104
100	val_100	104	val_104
100	val_100	105	val_105
100	val_100	105	val_105
100	val_100	11	val_11
100	val_100	11	val_11
100	val_100	111	val_111
100	val_100	111	val_111
100	val_100	113	val_113
100	val_100	113	val_113
100	val_100	114	val_114
100	val_100	114	val_114
103	val_103	0	val_0
103	val_103	0	val_0
103	val_103	10	val_10
103	val_103	10	val_10
103	val_103	100	val_100
103	val_103	100	val_100
103	val_103	103	val_103
103	val_103	103	val_103
103	val_103	104	val_104
103	val_103	104	val_104
103	val_103	105	val_105
103	val_103	105	val_105
103	val_103	11	val_11
103	val_103	11	val_11
103	val_103	111	val_111
103	val_103	111	val_111
103	val_103	113	val_113
103	val_103	113	val_113
103	val_103	114	val_114
103	val_103	114	val_114
104	val_104	0	val_0
104	val_104	0	val_0
104	val_104	10	val_10
104	val_104	10	val_10
104	val_104	100	val_100
104	val_104	100	val_100
104	val_104	103	val_103
104	val_104	103	val_103
104	val_104	104	val_104
104	val_104	104	val_104
104	val_104	105	val_105
104	val_104	105	val_105
104	val_104	11	val_11
104	val_104	11	val_11
104	val_104	111	val_111
104	val_104	111	val_111
104	val_104	113	val_113
104	val_104	113	val_113
104	val_104	114	val_114
104	val_104	114	val_114
105	val_105	0	val_0
105	val_105	0	val_0
105	val_105	10	val_10
105	val_105	10	val_10
105	val_105	100	val_100
105	val_105	100	val_100
105	val_105	103	val_103
105	val_105	103	val_103
105	val_105	104	val_104
105	val_105	104	val_104
105	val_105	105	val_105
105	val_105	105	val_105
105	val_105	11	val_11
105	val_105	11	val_11
105	val_105	111	val_111
105	val_105	111	val_111
105	val_105	113	val_113
105	val_105	113	val_113
105	val_105	114	val_114
105	val_105	114	val_114
11	val_11	0	val_0
11	val_11	0	val_0
11	val_11	10	val_10
11	val_11	10	val_10
11	val_11	100	val_100
11	val_11	100	val_100
11	val_11	103	val_103
11	val_11	103	val_103
11	val_11	104	val_104
11	val_11	104	val_104
11	val_11	105	val_105
11	val_11	105	val_105
11	val_11	11	val_11
11	val_11	11	val_11
11	val_11	111	val_111
11	val_11	111	val_111
11	val_11	113	val_113
11	val_11	113	val_113
11	val_11	114	val_114
11	val_11	114	val_114
111	val_111	0	val_0
111	val_111	0	val_0
111	val_111	10	val_10
111	val_111	10	val_10
111	val_111	100	val_100
111	val_111	100	val_100
111	val_111	103	val_103
111	val_111	103	val_103
111	val_111	104	val_104
111	val_111	104	val_104
111	val_111	105	val_105
111	val_111	105	val_105
111	val_111	11	val_11
111	val_111	11	val_11
111	val_111	111	val_111
111	val_111	111	val_111
111	val_111	113	val_113
111	val_111	113	val_113
111	val_111	114	val_114
111	val_111	114	val_114
113	val_113	0	val_0
113	val_113	0	val_0
113	val_113	10	val_10
113	val_113	10	val_10
113	val_113	100	val_100
113	val_113	100	val_100
113	val_113	103	val_103
113	val_113	103	val_103
113	val_113	104	val_104
113	val_113	104	val_104
113	val_113	105	val_105
113	val_113	105	val_105
113	val_113	11	val_11
113	val_113	11	val_11
113	val_113	111	val_111
113	val_113	111	val_111
113	val_113	113	val_113
113	val_113	113	val_113
113	val_113	114	val_114
113	val_113	114	val_114
114	val_114	0	val_0
114	val_114	0	val_0
114	val_114	10	val_10
114	val_114	10	val_10
114	val_114	100	val_100
114	val_114	100	val_100
114	val_114	103	val_103
114	val_114	103	val_103
114	val_114	104	val_104
114	val_114	104	val_104
114	val_114	105	val_105
114	val_114	105	val_105
114	val_114	11	val_11
114	val_114	11	val_11
114	val_114	111	val_111
114	val_114	111	val_111
114	val_114	113	val_113
114	val_114	113	val_113
114	val_114	114	val_114
114	val_114	114	val_114
