PREHOOK: query: explain vectorization expression
select
   cdouble
  ,Round(cdouble, 2)
  ,Floor(cdouble)
  ,Ceil(cdouble)
  ,Rand()
  ,Rand(98007)
  ,Exp(ln(cdouble))
  ,Ln(cdouble)  
  ,Ln(cfloat)
  ,Log10(cdouble)

  ,Log2(cdouble)

  ,Log2(cdouble - 15601.0)
  ,Log2(cfloat)
  ,Log2(cbigint)
  ,Log2(cint)
  ,Log2(csmallint)
  ,Log2(ctinyint)
  ,Log(2.0, cdouble)
  ,Pow(log2(cdouble), 2.0)  
  ,Power(log2(cdouble), 2.0)
  ,Sqrt(cdouble)
  ,Sqrt(cbigint)
  ,Bin(cbigint)
  ,Hex(cdouble)
  ,Conv(cbigint, 10, 16)
  ,Abs(cdouble)
  ,Abs(ctinyint)
  ,Pmod(cint, 3)
  ,Sin(cdouble)
  ,Asin(cdouble)
  ,Cos(cdouble)
  ,ACos(cdouble)
  ,Atan(cdouble)
  ,Degrees(cdouble)
  ,Radians(cdouble)
  ,Positive(cdouble)
  ,Positive(cbigint)
  ,Negative(cdouble)
  ,Sign(cdouble)
  ,Sign(cbigint)

  ,cos(-sin(log(cdouble)) + 3.14159)
from alltypesorc

where cbigint % 500 = 0

and sin(cfloat) >= -1.0
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression
select
   cdouble
  ,Round(cdouble, 2)
  ,Floor(cdouble)
  ,Ceil(cdouble)
  ,Rand()
  ,Rand(98007)
  ,Exp(ln(cdouble))
  ,Ln(cdouble)  
  ,Ln(cfloat)
  ,Log10(cdouble)

  ,Log2(cdouble)

  ,Log2(cdouble - 15601.0)
  ,Log2(cfloat)
  ,Log2(cbigint)
  ,Log2(cint)
  ,Log2(csmallint)
  ,Log2(ctinyint)
  ,Log(2.0, cdouble)
  ,Pow(log2(cdouble), 2.0)  
  ,Power(log2(cdouble), 2.0)
  ,Sqrt(cdouble)
  ,Sqrt(cbigint)
  ,Bin(cbigint)
  ,Hex(cdouble)
  ,Conv(cbigint, 10, 16)
  ,Abs(cdouble)
  ,Abs(ctinyint)
  ,Pmod(cint, 3)
  ,Sin(cdouble)
  ,Asin(cdouble)
  ,Cos(cdouble)
  ,ACos(cdouble)
  ,Atan(cdouble)
  ,Degrees(cdouble)
  ,Radians(cdouble)
  ,Positive(cdouble)
  ,Positive(cbigint)
  ,Negative(cdouble)
  ,Sign(cdouble)
  ,Sign(cbigint)

  ,cos(-sin(log(cdouble)) + 3.14159)
from alltypesorc

where cbigint % 500 = 0

and sin(cfloat) >= -1.0
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  Statistics: Num rows: 12288 Data size: 293580 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprAndExpr(children: FilterLongColEqualLongScalar(col 13:bigint, val 0)(children: LongColModuloLongScalar(col 3:bigint, val 500) -> 13:bigint), FilterDoubleColGreaterEqualDoubleScalar(col 14:double, val -1.0)(children: FuncSinDoubleToDouble(col 4:float) -> 14:double))
                    predicate: (((cbigint % 500) = 0) and (sin(cfloat) >= -1.0D)) (type: boolean)
                    Statistics: Num rows: 2048 Data size: 48960 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: cdouble (type: double), round(cdouble, 2) (type: double), floor(cdouble) (type: bigint), ceil(cdouble) (type: bigint), rand() (type: double), rand(98007) (type: double), exp(ln(cdouble)) (type: double), ln(cdouble) (type: double), ln(cfloat) (type: double), log10(cdouble) (type: double), log2(cdouble) (type: double), log2((cdouble - 15601.0D)) (type: double), log2(cfloat) (type: double), log2(cbigint) (type: double), log2(cint) (type: double), log2(csmallint) (type: double), log2(ctinyint) (type: double), log(2, cdouble) (type: double), power(log2(cdouble), 2) (type: double), power(log2(cdouble), 2) (type: double), sqrt(cdouble) (type: double), sqrt(cbigint) (type: double), bin(cbigint) (type: string), hex(cdouble) (type: string), conv(cbigint, 10, 16) (type: string), abs(cdouble) (type: double), abs(ctinyint) (type: int), (cint pmod 3) (type: int), sin(cdouble) (type: double), asin(cdouble) (type: double), cos(cdouble) (type: double), acos(cdouble) (type: double), atan(cdouble) (type: double), degrees(cdouble) (type: double), radians(cdouble) (type: double), cdouble (type: double), cbigint (type: bigint), (- cdouble) (type: double), sign(cdouble) (type: double), sign(cbigint) (type: double), cos(((- sin(log(cdouble))) + 3.14159D)) (type: double)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30, _col31, _col32, _col33, _col34, _col35, _col36, _col37, _col38, _col39, _col40
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [5, 14, 13, 15, 16, 17, 19, 18, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 31, 32, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 5, 3, 47, 48, 49, 50]
                          selectExpressions: RoundWithNumDigitsDoubleToDouble(col 5, decimalPlaces 2) -> 14:double, FuncFloorDoubleToLong(col 5:double) -> 13:bigint, FuncCeilDoubleToLong(col 5:double) -> 15:bigint, FuncRandNoSeed -> 16:double, FuncRand -> 17:double, FuncExpDoubleToDouble(col 18:double)(children: FuncLnDoubleToDouble(col 5:double) -> 18:double) -> 19:double, FuncLnDoubleToDouble(col 5:double) -> 18:double, FuncLnDoubleToDouble(col 4:float) -> 20:double, FuncLog10DoubleToDouble(col 5:double) -> 21:double, FuncLog2DoubleToDouble(col 5:double) -> 22:double, FuncLog2DoubleToDouble(col 23:double)(children: DoubleColSubtractDoubleScalar(col 5:double, val 15601.0) -> 23:double) -> 24:double, FuncLog2DoubleToDouble(col 4:float) -> 23:double, FuncLog2LongToDouble(col 3:bigint) -> 25:double, FuncLog2LongToDouble(col 2:int) -> 26:double, FuncLog2LongToDouble(col 1:smallint) -> 27:double, FuncLog2LongToDouble(col 0:tinyint) -> 28:double, FuncLogWithBaseDoubleToDouble(col 5:double) -> 29:double, FuncPowerDoubleToDouble(col 30:double)(children: FuncLog2DoubleToDouble(col 5:double) -> 30:double) -> 31:double, FuncPowerDoubleToDouble(col 30:double)(children: FuncLog2DoubleToDouble(col 5:double) -> 30:double) -> 32:double, FuncSqrtDoubleToDouble(col 5:double) -> 30:double, FuncSqrtLongToDouble(col 3:bigint) -> 33:double, FuncBin(col 3:bigint) -> 34:string, VectorUDFAdaptor(hex(cdouble)) -> 35:string, VectorUDFAdaptor(conv(cbigint, 10, 16)) -> 36:string, FuncAbsDoubleToDouble(col 5:double) -> 37:double, FuncAbsLongToLong(col 0:tinyint) -> 38:int, PosModLongToLong(col 2, divisor 3) -> 39:int, FuncSinDoubleToDouble(col 5:double) -> 40:double, FuncASinDoubleToDouble(col 5:double) -> 41:double, FuncCosDoubleToDouble(col 5:double) -> 42:double, FuncACosDoubleToDouble(col 5:double) -> 43:double, FuncATanDoubleToDouble(col 5:double) -> 44:double, FuncDegreesDoubleToDouble(col 5:double) -> 45:double, FuncRadiansDoubleToDouble(col 5:double) -> 46:double, DoubleColUnaryMinus(col 5:double) -> 47:double, FuncSignDoubleToDouble(col 5:double) -> 48:double, FuncSignLongToDouble(col 3:bigint) -> 49:double, FuncCosDoubleToDouble(col 51:double)(children: DoubleColAddDoubleScalar(col 50:double, val 3.14159)(children: DoubleColUnaryMinus(col 51:double)(children: FuncSinDoubleToDouble(col 50:double)(children: FuncLnDoubleToDouble(col 5:double) -> 50:double) -> 51:double) -> 50:double) -> 51:double) -> 50:double
                      Statistics: Num rows: 2048 Data size: 1724272 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        File Sink Vectorization:
                            className: VectorFileSinkOperator
                            native: false
                        Statistics: Num rows: 2048 Data size: 1724272 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: true
                vectorized: true

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select
   cdouble
  ,Round(cdouble, 2)
  ,Floor(cdouble)
  ,Ceil(cdouble)


  ,Rand(98007)
  ,Exp(ln(cdouble))
  ,Ln(cdouble)  
  ,Ln(cfloat)
  ,Log10(cdouble)

  ,Log2(cdouble)

  ,Log2(cdouble - 15601.0)
  ,Log2(cfloat)
  ,Log2(cbigint)
  ,Log2(cint)
  ,Log2(csmallint)
  ,Log2(ctinyint)
  ,Log(2.0, cdouble)
  ,Pow(log2(cdouble), 2.0)  
  ,Power(log2(cdouble), 2.0)
  ,Sqrt(cdouble)
  ,Sqrt(cbigint)
  ,Bin(cbigint)
  ,Hex(cdouble)
  ,Conv(cbigint, 10, 16)
  ,Abs(cdouble)
  ,Abs(ctinyint)
  ,Pmod(cint, 3)
  ,Sin(cdouble)
  ,Asin(cdouble)
  ,Cos(cdouble)
  ,ACos(cdouble)
  ,Atan(cdouble)
  ,Degrees(cdouble)
  ,Radians(cdouble)
  ,Positive(cdouble)
  ,Positive(cbigint)
  ,Negative(cdouble)
  ,Sign(cdouble)
  ,Sign(cbigint)

  ,cos(-sin(log(cdouble)) + 3.14159)
from alltypesorc

where cbigint % 500 = 0

and sin(cfloat) >= -1.0
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: select
   cdouble
  ,Round(cdouble, 2)
  ,Floor(cdouble)
  ,Ceil(cdouble)


  ,Rand(98007)
  ,Exp(ln(cdouble))
  ,Ln(cdouble)  
  ,Ln(cfloat)
  ,Log10(cdouble)

  ,Log2(cdouble)

  ,Log2(cdouble - 15601.0)
  ,Log2(cfloat)
  ,Log2(cbigint)
  ,Log2(cint)
  ,Log2(csmallint)
  ,Log2(ctinyint)
  ,Log(2.0, cdouble)
  ,Pow(log2(cdouble), 2.0)  
  ,Power(log2(cdouble), 2.0)
  ,Sqrt(cdouble)
  ,Sqrt(cbigint)
  ,Bin(cbigint)
  ,Hex(cdouble)
  ,Conv(cbigint, 10, 16)
  ,Abs(cdouble)
  ,Abs(ctinyint)
  ,Pmod(cint, 3)
  ,Sin(cdouble)
  ,Asin(cdouble)
  ,Cos(cdouble)
  ,ACos(cdouble)
  ,Atan(cdouble)
  ,Degrees(cdouble)
  ,Radians(cdouble)
  ,Positive(cdouble)
  ,Positive(cbigint)
  ,Negative(cdouble)
  ,Sign(cdouble)
  ,Sign(cbigint)

  ,cos(-sin(log(cdouble)) + 3.14159)
from alltypesorc

where cbigint % 500 = 0

and sin(cfloat) >= -1.0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
-200.0	-200.0	-200	-200	0.8199077823142826	NULL	NULL	NULL	NULL	NULL	NULL	NULL	30.57531565116074	NULL	NULL	NULL	NULL	NULL	NULL	NULL	39998.48747140321	1011111010111000011011101011000	2D3230302E30	5F5C3758	200.0	36	NULL	0.8732972972139946	NULL	0.4871876750070059	NULL	-1.5657963684609384	-11459.155902616465	-3.490658503988659	-200.0	1599879000	200.0	-1.0	1.0	NULL
15601.0	15601.0	15601	15601	0.38656833237681376	15601.00000000001	9.65509029374725	NULL	4.193152436852078	13.929350886124324	NULL	NULL	NULL	NULL	13.929350886124324	NULL	13.929350886124324	194.02681610877246	194.02681610877246	124.90396310766124	NULL	1111111111111111111111111111111110010001001101101010100000011000	31353630312E30	FFFFFFFF9136A818	15601.0	38	NULL	-0.14856570831397706	NULL	0.9889025383288114	NULL	1.5707322283397571	893871.4561835973	272.2888166036353	15601.0	-1858689000	-15601.0	1.0	-1.0	-0.9740573096878733
15601.0	15601.0	15601	15601	0.41161398527282966	15601.00000000001	9.65509029374725	NULL	4.193152436852078	13.929350886124324	NULL	NULL	29.18993673432575	NULL	13.929350886124324	NULL	13.929350886124324	194.02681610877246	194.02681610877246	124.90396310766124	24747.04022706554	100100100000001011101000000000	31353630312E30	2480BA00	15601.0	5	NULL	-0.14856570831397706	NULL	0.9889025383288114	NULL	1.5707322283397571	893871.4561835973	272.2888166036353	15601.0	612416000	-15601.0	1.0	1.0	-0.9740573096878733
15601.0	15601.0	15601	15601	0.37807863784568585	15601.00000000001	9.65509029374725	3.871201010907891	4.193152436852078	13.929350886124324	NULL	5.584962500721157	NULL	NULL	13.929350886124324	5.584962500721157	13.929350886124324	194.02681610877246	194.02681610877246	124.90396310766124	NULL	1111111111111111111111111111111111010000100101111100000100011000	31353630312E30	FFFFFFFFD097C118	15601.0	48	NULL	-0.14856570831397706	NULL	0.9889025383288114	NULL	1.5707322283397571	893871.4561835973	272.2888166036353	15601.0	-795361000	-15601.0	1.0	-1.0	-0.9740573096878733
NULL	NULL	NULL	NULL	0.3336458983920575	NULL	NULL	2.0794415416798357	NULL	NULL	NULL	3.0	29.693388204506274	29.58473549442715	NULL	3.0	NULL	NULL	NULL	NULL	29464.580431426475	110011101111110001011111011100	NULL	33BF17DC	NULL	8	1	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	868161500	NULL	NULL	1.0	NULL
NULL	NULL	NULL	NULL	0.8681331660942196	NULL	NULL	2.0794415416798357	NULL	NULL	NULL	3.0	NULL	29.730832334348488	NULL	3.0	NULL	NULL	NULL	NULL	NULL	1111111111111111111111111111111110010000111111111000101010111000	NULL	FFFFFFFF90FF8AB8	NULL	8	0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	-1862301000	NULL	NULL	-1.0	NULL
-7196.0	-7196.0	-7196	-7196	0.03951015606275099	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	1111111111111111111111111111111110100000010101110101001001110000	2D373139362E30	FFFFFFFFA0575270	7196.0	59	NULL	-0.9834787875028149	NULL	-0.18102340879563897	NULL	-1.5706573607035177	-412300.4293761404	-125.59389297351194	-7196.0	-1604890000	7196.0	-1.0	-1.0	NULL
-7196.0	-7196.0	-7196	-7196	0.9209252022050654	NULL	NULL	NULL	NULL	NULL	NULL	NULL	30.52255693577237	NULL	NULL	NULL	NULL	NULL	NULL	NULL	39273.76987252433	1011011111011111001100101001000	2D373139362E30	5BEF9948	7196.0	21	NULL	-0.9834787875028149	NULL	-0.18102340879563897	NULL	-1.5706573607035177	-412300.4293761404	-125.59389297351194	-7196.0	1542429000	7196.0	-1.0	1.0	NULL
-7196.0	-7196.0	-7196	-7196	0.4533660450429132	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	1111111111111111111111111111111110100011011110110101000010110100	2D373139362E30	FFFFFFFFA37B50B4	7196.0	14	NULL	-0.9834787875028149	NULL	-0.18102340879563897	NULL	-1.5706573607035177	-412300.4293761404	-125.59389297351194	-7196.0	-1552199500	7196.0	-1.0	-1.0	NULL
-7196.0	-7196.0	-7196	-7196	0.14567136069921982	NULL	NULL	4.07753744390572	NULL	NULL	NULL	5.882643049361842	NULL	NULL	NULL	5.882643049361842	NULL	NULL	NULL	NULL	NULL	1111111111111111111111111111111110111100001011110011111001111100	2D373139362E30	FFFFFFFFBC2F3E7C	7196.0	59	NULL	-0.9834787875028149	NULL	-0.18102340879563897	NULL	-1.5706573607035177	-412300.4293761404	-125.59389297351194	-7196.0	-1137754500	7196.0	-1.0	-1.0	NULL
-7196.0	-7196.0	-7196	-7196	0.5264452612398715	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	1111111111111111111111111111111110010001101110110101111010110100	2D373139362E30	FFFFFFFF91BB5EB4	7196.0	8	NULL	-0.9834787875028149	NULL	-0.18102340879563897	NULL	-1.5706573607035177	-412300.4293761404	-125.59389297351194	-7196.0	-1849991500	7196.0	-1.0	-1.0	NULL
-7196.0	-7196.0	-7196	-7196	0.17837094616515647	NULL	NULL	1.6094379124341003	NULL	NULL	NULL	2.321928094887362	NULL	NULL	NULL	2.321928094887362	NULL	NULL	NULL	NULL	NULL	1111111111111111111111111111111111000011011101110000111100110100	2D373139362E30	FFFFFFFFC3770F34	7196.0	5	NULL	-0.9834787875028149	NULL	-0.18102340879563897	NULL	-1.5706573607035177	-412300.4293761404	-125.59389297351194	-7196.0	-1015607500	7196.0	-1.0	-1.0	NULL
-7196.0	-7196.0	-7196	-7196	0.5456857574763374	NULL	NULL	NULL	NULL	NULL	NULL	NULL	29.62699001935971	NULL	NULL	NULL	NULL	NULL	NULL	NULL	28794.287627930647	110001011010110011101011011000	2D373139362E30	316B3AD8	7196.0	24	NULL	-0.9834787875028149	NULL	-0.18102340879563897	NULL	-1.5706573607035177	-412300.4293761404	-125.59389297351194	-7196.0	829111000	7196.0	-1.0	1.0	NULL
NULL	NULL	NULL	NULL	0.282703740641956	NULL	NULL	2.3978952727983707	NULL	NULL	NULL	3.4594316186372978	30.19990821555368	NULL	NULL	3.4594316186372978	NULL	NULL	NULL	NULL	35118.75567271711	1001001100000110001001110011000	NULL	49831398	NULL	11	1	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	1233327000	NULL	NULL	1.0	NULL
