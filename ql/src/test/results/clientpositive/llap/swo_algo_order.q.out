PREHOOK: query: drop table if exists x1_store_sales
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists x1_store_sales
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists x1_date_dim
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists x1_date_dim
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table x1_store_sales 
(
	ss_sold_date_sk int,
	ss_item_sk	int
)
stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@x1_store_sales
POSTHOOK: query: create table x1_store_sales 
(
	ss_sold_date_sk int,
	ss_item_sk	int
)
stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@x1_store_sales
PREHOOK: query: create table x1_date_dim
(
	d_date_sk	int,
	d_month_seq	int,
	d_year		int,
	d_moy		int
)
stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@x1_date_dim
POSTHOOK: query: create table x1_date_dim
(
	d_date_sk	int,
	d_month_seq	int,
	d_year		int,
	d_moy		int
)
stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@x1_date_dim
PREHOOK: query: insert into x1_date_dim values	(1,1,2000,1),
				(2,2,2001,2),
				(3,2,2001,3),
				(4,2,2001,4),
				(5,2,2001,5),
				(6,2,2001,6),
				(7,2,2001,7),
				(8,2,2001,8)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@x1_date_dim
POSTHOOK: query: insert into x1_date_dim values	(1,1,2000,1),
				(2,2,2001,2),
				(3,2,2001,3),
				(4,2,2001,4),
				(5,2,2001,5),
				(6,2,2001,6),
				(7,2,2001,7),
				(8,2,2001,8)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@x1_date_dim
POSTHOOK: Lineage: x1_date_dim.d_date_sk SCRIPT []
POSTHOOK: Lineage: x1_date_dim.d_month_seq SCRIPT []
POSTHOOK: Lineage: x1_date_dim.d_moy SCRIPT []
POSTHOOK: Lineage: x1_date_dim.d_year SCRIPT []
PREHOOK: query: insert into x1_store_sales values (1,1),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10),(11,11)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@x1_store_sales
POSTHOOK: query: insert into x1_store_sales values (1,1),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10),(11,11)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@x1_store_sales
POSTHOOK: Lineage: x1_store_sales.ss_item_sk SCRIPT []
POSTHOOK: Lineage: x1_store_sales.ss_sold_date_sk SCRIPT []
PREHOOK: query: alter table x1_store_sales update statistics set(
'numRows'='123456',
'rawDataSize'='1234567')
PREHOOK: type: ALTERTABLE_UPDATETABLESTATS
PREHOOK: Input: default@x1_store_sales
PREHOOK: Output: default@x1_store_sales
POSTHOOK: query: alter table x1_store_sales update statistics set(
'numRows'='123456',
'rawDataSize'='1234567')
POSTHOOK: type: ALTERTABLE_UPDATETABLESTATS
POSTHOOK: Input: default@x1_store_sales
POSTHOOK: Output: default@x1_store_sales
PREHOOK: query: alter table x1_date_dim update statistics set(
'numRows'='28',
'rawDataSize'='81449')
PREHOOK: type: ALTERTABLE_UPDATETABLESTATS
PREHOOK: Input: default@x1_date_dim
PREHOOK: Output: default@x1_date_dim
POSTHOOK: query: alter table x1_date_dim update statistics set(
'numRows'='28',
'rawDataSize'='81449')
POSTHOOK: type: ALTERTABLE_UPDATETABLESTATS
POSTHOOK: Input: default@x1_date_dim
POSTHOOK: Output: default@x1_date_dim
Warning: Shuffle Join MERGEJOIN[62][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: explain 
select   sum(s.ss_item_sk) as a
 from
     x1_store_sales s
     ,x1_date_dim d
     ,x1_date_dim d2
 where
        1=1
        and s.ss_sold_date_sk=d.d_date_sk
	and d2.d_date_sk=s.ss_sold_date_sk+d.d_date_sk
union all
select   sum(s.ss_item_sk) over (partition by d_date_sk) as b
 from
     x1_store_sales s
     ,x1_date_dim d
 where
        1=1
        and s.ss_sold_date_sk=d.d_date_sk+1
	and d.d_moy=4
PREHOOK: type: QUERY
PREHOOK: Input: default@x1_date_dim
PREHOOK: Input: default@x1_store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain 
select   sum(s.ss_item_sk) as a
 from
     x1_store_sales s
     ,x1_date_dim d
     ,x1_date_dim d2
 where
        1=1
        and s.ss_sold_date_sk=d.d_date_sk
	and d2.d_date_sk=s.ss_sold_date_sk+d.d_date_sk
union all
select   sum(s.ss_item_sk) over (partition by d_date_sk) as b
 from
     x1_store_sales s
     ,x1_date_dim d
 where
        1=1
        and s.ss_sold_date_sk=d.d_date_sk+1
	and d.d_moy=4
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x1_date_dim
POSTHOOK: Input: default@x1_store_sales
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 4 <- Reducer 2 (BROADCAST_EDGE)
Map 7 <- Map 1 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
Reducer 5 <- Map 4 (CUSTOM_SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 8 <- Map 7 (SIMPLE_EDGE), Union 6 (CONTAINS)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Union 6
      <-Reducer 5 [CONTAINS] vectorized, llap
        File Output Operator [FS_87]
          Group By Operator [GBY_86] (rows=1 width=8)
            Output:["_col0"],aggregations:["sum(VALUE._col0)"]
          <-Map 4 [CUSTOM_SIMPLE_EDGE] llap
            PARTITION_ONLY_SHUFFLE [RS_17]
              Group By Operator [GBY_16] (rows=1 width=8)
                Output:["_col0"],aggregations:["sum(_col3)"]
                Select Operator [SEL_15] (rows=4839475 width=16)
                  Output:["_col3"]
                  Map Join Operator [MAPJOIN_63] (rows=4839475 width=16)
                    Conds:RS_12._col1=SEL_8._col0(Inner),Output:["_col0","_col1","_col2","_col3"],residual filter predicates:{(_col0 = (_col2 + _col1))}
                  <-Reducer 2 [BROADCAST_EDGE] llap
                    BROADCAST [RS_12]
                      PartitionCols:_col1
                      Merge Join Operator [MERGEJOIN_62] (rows=784 width=8)
                        Conds:(Inner),Output:["_col0","_col1"]
                      <-Map 1 [XPROD_EDGE] vectorized, llap
                        XPROD_EDGE [RS_79]
                          Select Operator [SEL_77] (rows=28 width=4)
                            Output:["_col0"]
                            Filter Operator [FIL_75] (rows=28 width=4)
                              predicate:d_date_sk is not null
                              TableScan [TS_0] (rows=28 width=4)
                                default@x1_date_dim,d2,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_moy"]
                      <-Map 3 [XPROD_EDGE] vectorized, llap
                        XPROD_EDGE [RS_83]
                          Select Operator [SEL_82] (rows=28 width=4)
                            Output:["_col0"]
                            Filter Operator [FIL_81] (rows=28 width=4)
                              predicate:d_date_sk is not null
                              TableScan [TS_3] (rows=28 width=4)
                                default@x1_date_dim,d,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk"]
                  <-Select Operator [SEL_8] (rows=123456 width=8)
                      Output:["_col0","_col1"]
                      Filter Operator [FIL_44] (rows=123456 width=8)
                        predicate:ss_sold_date_sk is not null
                        TableScan [TS_6] (rows=123456 width=8)
                          default@x1_store_sales,s,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
      <-Reducer 8 [CONTAINS] vectorized, llap
        File Output Operator [FS_95]
          Select Operator [SEL_94] (rows=49382 width=8)
            Output:["_col0"]
            PTF Operator [PTF_93] (rows=49382 width=8)
              Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col2 ASC NULLS FIRST","partition by:":"_col2"}]
              Select Operator [SEL_92] (rows=49382 width=8)
                Output:["_col1","_col2"]
              <-Map 7 [SIMPLE_EDGE] vectorized, llap
                SHUFFLE [RS_91]
                  PartitionCols:_col2
                  Map Join Operator [MAPJOIN_90] (rows=49382 width=8)
                    Conds:SEL_89._col0=RS_80._col1(Inner),Output:["_col1","_col2"]
                  <-Map 1 [BROADCAST_EDGE] vectorized, llap
                    XPROD_EDGE [RS_80]
                      PartitionCols:_col1
                      Select Operator [SEL_78] (rows=4 width=8)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_76] (rows=4 width=8)
                          predicate:((d_moy = 4) and d_date_sk is not null)
                           Please refer to the previous TableScan [TS_0]
                  <-Select Operator [SEL_89] (rows=123456 width=8)
                      Output:["_col0","_col1"]
                      Filter Operator [FIL_88] (rows=123456 width=8)
                        predicate:ss_sold_date_sk is not null
                        TableScan [TS_20] (rows=123456 width=8)
                          default@x1_store_sales,s,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]

