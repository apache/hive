PREHOOK: query: CREATE TABLE test (a string, b string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test
POSTHOOK: query: CREATE TABLE test (a string, b string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test
PREHOOK: query: INSERT INTO test VALUES ("a", '1')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test
POSTHOOK: query: INSERT INTO test VALUES ("a", '1')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test
POSTHOOK: Lineage: test.a SCRIPT []
POSTHOOK: Lineage: test.b SCRIPT []
PREHOOK: query: INSERT INTO test VALUES ("b", '2')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test
POSTHOOK: query: INSERT INTO test VALUES ("b", '2')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test
POSTHOOK: Lineage: test.a SCRIPT []
POSTHOOK: Lineage: test.b SCRIPT []
PREHOOK: query: INSERT INTO test VALUES ("b", '2')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test
POSTHOOK: query: INSERT INTO test VALUES ("b", '2')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test
POSTHOOK: Lineage: test.a SCRIPT []
POSTHOOK: Lineage: test.b SCRIPT []
PREHOOK: query: INSERT INTO test VALUES ("b", '2')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test
POSTHOOK: query: INSERT INTO test VALUES ("b", '2')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test
POSTHOOK: Lineage: test.a SCRIPT []
POSTHOOK: Lineage: test.b SCRIPT []
PREHOOK: query: INSERT INTO test VALUES ("c", '2')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test
POSTHOOK: query: INSERT INTO test VALUES ("c", '2')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test
POSTHOOK: Lineage: test.a SCRIPT []
POSTHOOK: Lineage: test.b SCRIPT []
PREHOOK: query: INSERT INTO test VALUES ("c", '2')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test
POSTHOOK: query: INSERT INTO test VALUES ("c", '2')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test
POSTHOOK: Lineage: test.a SCRIPT []
POSTHOOK: Lineage: test.b SCRIPT []
PREHOOK: query: INSERT INTO test VALUES ("c", '2')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test
POSTHOOK: query: INSERT INTO test VALUES ("c", '2')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test
POSTHOOK: Lineage: test.a SCRIPT []
POSTHOOK: Lineage: test.b SCRIPT []
PREHOOK: query: INSERT INTO test VALUES ("c", '2')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test
POSTHOOK: query: INSERT INTO test VALUES ("c", '2')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test
POSTHOOK: Lineage: test.a SCRIPT []
POSTHOOK: Lineage: test.b SCRIPT []
PREHOOK: query: INSERT INTO test VALUES ("c", '2')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test
POSTHOOK: query: INSERT INTO test VALUES ("c", '2')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test
POSTHOOK: Lineage: test.a SCRIPT []
POSTHOOK: Lineage: test.b SCRIPT []
PREHOOK: query: INSERT INTO test VALUES ("d", '4')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test
POSTHOOK: query: INSERT INTO test VALUES ("d", '4')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test
POSTHOOK: Lineage: test.a SCRIPT []
POSTHOOK: Lineage: test.b SCRIPT []
PREHOOK: query: INSERT INTO test VALUES ("d", '5')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test
POSTHOOK: query: INSERT INTO test VALUES ("d", '5')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test
POSTHOOK: Lineage: test.a SCRIPT []
POSTHOOK: Lineage: test.b SCRIPT []
PREHOOK: query: INSERT INTO test VALUES ("d", '6')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test
POSTHOOK: query: INSERT INTO test VALUES ("d", '6')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test
POSTHOOK: Lineage: test.a SCRIPT []
POSTHOOK: Lineage: test.b SCRIPT []
PREHOOK: query: INSERT INTO test VALUES ("e", '7')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test
POSTHOOK: query: INSERT INTO test VALUES ("e", '7')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test
POSTHOOK: Lineage: test.a SCRIPT []
POSTHOOK: Lineage: test.b SCRIPT []
PREHOOK: query: INSERT INTO test VALUES ("e", '3')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test
POSTHOOK: query: INSERT INTO test VALUES ("e", '3')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test
POSTHOOK: Lineage: test.a SCRIPT []
POSTHOOK: Lineage: test.b SCRIPT []
PREHOOK: query: INSERT INTO test VALUES ("e", '3')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test
POSTHOOK: query: INSERT INTO test VALUES ("e", '3')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test
POSTHOOK: Lineage: test.a SCRIPT []
POSTHOOK: Lineage: test.b SCRIPT []
PREHOOK: query: INSERT INTO test VALUES ("e", '3')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test
POSTHOOK: query: INSERT INTO test VALUES ("e", '3')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test
POSTHOOK: Lineage: test.a SCRIPT []
POSTHOOK: Lineage: test.b SCRIPT []
PREHOOK: query: INSERT INTO test VALUES ("abcdefghijklmnopqrstuvwxyz_12345", '1')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test
POSTHOOK: query: INSERT INTO test VALUES ("abcdefghijklmnopqrstuvwxyz_12345", '1')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test
POSTHOOK: Lineage: test.a SCRIPT []
POSTHOOK: Lineage: test.b SCRIPT []
PREHOOK: query: ANALYZE TABLE test COMPUTE STATISTICS FOR COLUMNS
PREHOOK: type: ANALYZE_TABLE
PREHOOK: Input: default@test
PREHOOK: Output: default@test
#### A masked pattern was here ####
POSTHOOK: query: ANALYZE TABLE test COMPUTE STATISTICS FOR COLUMNS
POSTHOOK: type: ANALYZE_TABLE
POSTHOOK: Input: default@test
POSTHOOK: Output: default@test
#### A masked pattern was here ####
PREHOOK: query: ANALYZE TABLE test COMPUTE STATISTICS
PREHOOK: type: QUERY
PREHOOK: Input: default@test
PREHOOK: Output: default@test
POSTHOOK: query: ANALYZE TABLE test COMPUTE STATISTICS
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test
POSTHOOK: Output: default@test
PREHOOK: query: DESCRIBE EXTENDED test
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@test
POSTHOOK: query: DESCRIBE EXTENDED test
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@test
a                   	string              	                    
b                   	string              	                    
	 	 
#### A masked pattern was here ####
PREHOOK: query: DESCRIBE FORMATTED test a
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@test
POSTHOOK: query: DESCRIBE FORMATTED test a
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@test
col_name            	a                   
data_type           	string              
min                 	                    
max                 	                    
num_nulls           	0                   
distinct_count      	6                   
avg_col_len         	2.823529411764706   
max_col_len         	32                  
num_trues           	                    
num_falses          	                    
bit_vector          	HL                  
freq_items          	FrequentItemsSketch<T>:
                    	  Stream Length    : 17
                    	  Max Error Offset : 0
                    	  Num Active Items : 6
                    	  Current Map Cap  : 6
                    	                  Item          Est
                    	                       c            5
                    	                       e            4
                    	                       d            3
                    	                       b            3
                    	                       a            1
                    	  abcdefghijklmno..12345            1
comment             	from deserializer   
COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"a\":\"true\",\"b\":\"true\"}}
PREHOOK: query: SELECT * from test where '2' = b and a = 'c'
PREHOOK: type: QUERY
PREHOOK: Input: default@test
#### A masked pattern was here ####
POSTHOOK: query: SELECT * from test where '2' = b and a = 'c'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test
#### A masked pattern was here ####
c	2
c	2
c	2
c	2
c	2
PREHOOK: query: -- cost = 0.14, 0.16 Vs w/sketches 0.47 / 0.29

EXPLAIN CBO COST SELECT * from test where '2' = b and a = 'c'
PREHOOK: type: QUERY
PREHOOK: Input: default@test
#### A masked pattern was here ####
POSTHOOK: query: -- cost = 0.14, 0.16 Vs w/sketches 0.47 / 0.29

EXPLAIN CBO COST SELECT * from test where '2' = b and a = 'c'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test
#### A masked pattern was here ####
CBO PLAN:
HiveProject($f0=[CAST(_UTF-16LE'c':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"):VARCHAR(2147483647) CHARACTER SET "UTF-16LE"], $f1=[CAST(_UTF-16LE'2':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"):VARCHAR(2147483647) CHARACTER SET "UTF-16LE"]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###
  HiveFilter(condition=[AND(=($0, _UTF-16LE'c'), =($1, _UTF-16LE'2'))]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###
    HiveTableScan(table=[[default, test]], table:alias=[test]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###

PREHOOK: query: EXPLAIN CBO JOINCOST SELECT * from test where '2' = b and a = 'c'
PREHOOK: type: QUERY
PREHOOK: Input: default@test
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN CBO JOINCOST SELECT * from test where '2' = b and a = 'c'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test
#### A masked pattern was here ####
CBO PLAN:
HiveProject($f0=[CAST(_UTF-16LE'c':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"):VARCHAR(2147483647) CHARACTER SET "UTF-16LE"], $f1=[CAST(_UTF-16LE'2':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"):VARCHAR(2147483647) CHARACTER SET "UTF-16LE"]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###
  HiveFilter(condition=[AND(=($0, _UTF-16LE'c'), =($1, _UTF-16LE'2'))]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###
    HiveTableScan(table=[[default, test]], table:alias=[test]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###

PREHOOK: query: SELECT * from test where b = '2' and ('b' = a or a = 'c')
PREHOOK: type: QUERY
PREHOOK: Input: default@test
#### A masked pattern was here ####
POSTHOOK: query: SELECT * from test where b = '2' and ('b' = a or a = 'c')
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test
#### A masked pattern was here ####
b	2
b	2
b	2
c	2
c	2
c	2
c	2
c	2
PREHOOK: query: EXPLAIN CBO COST SELECT * from test where b = '2' and ('b' = a or a = 'c')
PREHOOK: type: QUERY
PREHOOK: Input: default@test
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN CBO COST SELECT * from test where b = '2' and ('b' = a or a = 'c')
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test
#### A masked pattern was here ####
CBO PLAN:
HiveProject(a=[$0], b=[CAST(_UTF-16LE'2':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"):VARCHAR(2147483647) CHARACTER SET "UTF-16LE"]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###
  HiveFilter(condition=[AND(=($1, _UTF-16LE'2'), IN($0, _UTF-16LE'b':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'c':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"))]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###
    HiveTableScan(table=[[default, test]], table:alias=[test]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###

PREHOOK: query: EXPLAIN CBO JOINCOST SELECT * from test where b = '2' and ('b' = a or a = 'c')
PREHOOK: type: QUERY
PREHOOK: Input: default@test
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN CBO JOINCOST SELECT * from test where b = '2' and ('b' = a or a = 'c')
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test
#### A masked pattern was here ####
CBO PLAN:
HiveProject(a=[$0], b=[CAST(_UTF-16LE'2':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"):VARCHAR(2147483647) CHARACTER SET "UTF-16LE"]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###
  HiveFilter(condition=[AND(=($1, _UTF-16LE'2'), IN($0, _UTF-16LE'b':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'c':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"))]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###
    HiveTableScan(table=[[default, test]], table:alias=[test]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###

PREHOOK: query: SELECT * from test where b = '2' and a in ('a', 'b', 'c')
PREHOOK: type: QUERY
PREHOOK: Input: default@test
#### A masked pattern was here ####
POSTHOOK: query: SELECT * from test where b = '2' and a in ('a', 'b', 'c')
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test
#### A masked pattern was here ####
b	2
b	2
b	2
c	2
c	2
c	2
c	2
c	2
PREHOOK: query: EXPLAIN CBO COST SELECT * from test where b = '2' and a in ('a', 'b', 'c')
PREHOOK: type: QUERY
PREHOOK: Input: default@test
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN CBO COST SELECT * from test where b = '2' and a in ('a', 'b', 'c')
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test
#### A masked pattern was here ####
CBO PLAN:
HiveProject(a=[$0], b=[CAST(_UTF-16LE'2':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"):VARCHAR(2147483647) CHARACTER SET "UTF-16LE"]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###
  HiveFilter(condition=[AND(=($1, _UTF-16LE'2'), IN($0, _UTF-16LE'a':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'b':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'c':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"))]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###
    HiveTableScan(table=[[default, test]], table:alias=[test]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###

PREHOOK: query: EXPLAIN CBO JOINCOST SELECT * from test where b = '2' and a in ('a', 'b', 'c')
PREHOOK: type: QUERY
PREHOOK: Input: default@test
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN CBO JOINCOST SELECT * from test where b = '2' and a in ('a', 'b', 'c')
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test
#### A masked pattern was here ####
CBO PLAN:
HiveProject(a=[$0], b=[CAST(_UTF-16LE'2':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"):VARCHAR(2147483647) CHARACTER SET "UTF-16LE"]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###
  HiveFilter(condition=[AND(=($1, _UTF-16LE'2'), IN($0, _UTF-16LE'a':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'b':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'c':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"))]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###
    HiveTableScan(table=[[default, test]], table:alias=[test]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###

PREHOOK: query: CREATE TABLE test2 (b string, c string) partitioned by (a string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test2
POSTHOOK: query: CREATE TABLE test2 (b string, c string) partitioned by (a string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test2
PREHOOK: query: INSERT INTO test2 VALUES ('1',"A", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('1',"A", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=a
POSTHOOK: Lineage: test2 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('2',"B", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('2',"B", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=a
POSTHOOK: Lineage: test2 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('3',"C", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('3',"C", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=a
POSTHOOK: Lineage: test2 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('1',"B", "b" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('1',"B", "b" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=b
POSTHOOK: Lineage: test2 PARTITION(a=b).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=b).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('2',"B", "b" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('2',"B", "b" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=b
POSTHOOK: Lineage: test2 PARTITION(a=b).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=b).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('2',"B", "b" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('2',"B", "b" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=b
POSTHOOK: Lineage: test2 PARTITION(a=b).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=b).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('2',"B", "b" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('2',"B", "b" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=b
POSTHOOK: Lineage: test2 PARTITION(a=b).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=b).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('2',"I", "b" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('2',"I", "b" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=b
POSTHOOK: Lineage: test2 PARTITION(a=b).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=b).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('2',"I", "b" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('2',"I", "b" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=b
POSTHOOK: Lineage: test2 PARTITION(a=b).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=b).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('2',"I", "b" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('2',"I", "b" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=b
POSTHOOK: Lineage: test2 PARTITION(a=b).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=b).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('2',"I", "b" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('2',"I", "b" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=b
POSTHOOK: Lineage: test2 PARTITION(a=b).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=b).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('3',"I", "b" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('3',"I", "b" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=b
POSTHOOK: Lineage: test2 PARTITION(a=b).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=b).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('4',"I", "b" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('4',"I", "b" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=b
POSTHOOK: Lineage: test2 PARTITION(a=b).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=b).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('5',"I", "b" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('5',"I", "b" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=b
POSTHOOK: Lineage: test2 PARTITION(a=b).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=b).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('6',"I", "b" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('6',"I", "b" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=b
POSTHOOK: Lineage: test2 PARTITION(a=b).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=b).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('7',"I", "b" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('7',"I", "b" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=b
POSTHOOK: Lineage: test2 PARTITION(a=b).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=b).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('8',"I", "c" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('8',"I", "c" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=c
POSTHOOK: Lineage: test2 PARTITION(a=c).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=c).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('8',"I", "c" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('8',"I", "c" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=c
POSTHOOK: Lineage: test2 PARTITION(a=c).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=c).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('8',"J", "c" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('8',"J", "c" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=c
POSTHOOK: Lineage: test2 PARTITION(a=c).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=c).c SCRIPT []
PREHOOK: query: INSERT INTO test2 VALUES ('8',"K", "c" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES ('8',"K", "c" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=c
POSTHOOK: Lineage: test2 PARTITION(a=c).b SCRIPT []
POSTHOOK: Lineage: test2 PARTITION(a=c).c SCRIPT []
PREHOOK: query: ANALYZE TABLE test2 COMPUTE STATISTICS FOR COLUMNS
PREHOOK: type: ANALYZE_TABLE
PREHOOK: Input: default@test2
PREHOOK: Input: default@test2@a=a
PREHOOK: Input: default@test2@a=b
PREHOOK: Input: default@test2@a=c
PREHOOK: Output: default@test2
PREHOOK: Output: default@test2@a=a
PREHOOK: Output: default@test2@a=b
PREHOOK: Output: default@test2@a=c
#### A masked pattern was here ####
POSTHOOK: query: ANALYZE TABLE test2 COMPUTE STATISTICS FOR COLUMNS
POSTHOOK: type: ANALYZE_TABLE
POSTHOOK: Input: default@test2
POSTHOOK: Input: default@test2@a=a
POSTHOOK: Input: default@test2@a=b
POSTHOOK: Input: default@test2@a=c
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=a
POSTHOOK: Output: default@test2@a=b
POSTHOOK: Output: default@test2@a=c
#### A masked pattern was here ####
PREHOOK: query: ANALYZE TABLE test2 COMPUTE STATISTICS
PREHOOK: type: QUERY
PREHOOK: Input: default@test2
PREHOOK: Input: default@test2@a=a
PREHOOK: Input: default@test2@a=b
PREHOOK: Input: default@test2@a=c
PREHOOK: Output: default@test2
PREHOOK: Output: default@test2@a=a
PREHOOK: Output: default@test2@a=b
PREHOOK: Output: default@test2@a=c
POSTHOOK: query: ANALYZE TABLE test2 COMPUTE STATISTICS
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test2
POSTHOOK: Input: default@test2@a=a
POSTHOOK: Input: default@test2@a=b
POSTHOOK: Input: default@test2@a=c
POSTHOOK: Output: default@test2
POSTHOOK: Output: default@test2@a=a
POSTHOOK: Output: default@test2@a=b
POSTHOOK: Output: default@test2@a=c
PREHOOK: query: DESCRIBE EXTENDED test2
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@test2
POSTHOOK: query: DESCRIBE EXTENDED test2
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@test2
b                   	string              	                    
c                   	string              	                    
a                   	string              	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
a                   	string              	                    
	 	 
#### A masked pattern was here ####
PREHOOK: query: DESCRIBE FORMATTED test2 partition(a='a') c
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@test2
POSTHOOK: query: DESCRIBE FORMATTED test2 partition(a='a') c
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@test2
col_name            	c                   
data_type           	string              
min                 	                    
max                 	                    
num_nulls           	0                   
distinct_count      	3                   
avg_col_len         	1.0                 
max_col_len         	1                   
num_trues           	                    
num_falses          	                    
bit_vector          	HL                  
freq_items          	FrequentItemsSketch<T>:
                    	  Stream Length    : 3
                    	  Max Error Offset : 0
                    	  Num Active Items : 3
                    	  Current Map Cap  : 6
                    	                  Item          Est
                    	                       C            1
                    	                       A            1
                    	                       B            1
comment             	from deserializer   
PREHOOK: query: DESCRIBE FORMATTED test2 partition(a='c') c
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@test2
POSTHOOK: query: DESCRIBE FORMATTED test2 partition(a='c') c
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@test2
col_name            	c                   
data_type           	string              
min                 	                    
max                 	                    
num_nulls           	0                   
distinct_count      	3                   
avg_col_len         	1.0                 
max_col_len         	1                   
num_trues           	                    
num_falses          	                    
bit_vector          	HL                  
freq_items          	FrequentItemsSketch<T>:
                    	  Stream Length    : 4
                    	  Max Error Offset : 0
                    	  Num Active Items : 3
                    	  Current Map Cap  : 6
                    	                  Item          Est
                    	                       I            2
                    	                       K            1
                    	                       J            1
comment             	from deserializer   
PREHOOK: query: DESCRIBE FORMATTED test2 c
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@test2
POSTHOOK: query: DESCRIBE FORMATTED test2 c
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@test2
col_name            	c                   
data_type           	string              
min                 	                    
max                 	                    
num_nulls           	0                   
distinct_count      	6                   
avg_col_len         	1.0                 
max_col_len         	1                   
num_trues           	                    
num_falses          	                    
bit_vector          	HL                  
freq_items          	FrequentItemsSketch<T>:
                    	  Stream Length    : 20
                    	  Max Error Offset : 0
                    	  Num Active Items : 6
                    	  Current Map Cap  : 6
                    	                  Item          Est
                    	                       I           11
                    	                       B            5
                    	                       J            1
                    	                       K            1
                    	                       C            1
                    	                       A            1
comment             	from deserializer   
COLUMN_STATS_ACCURATE	{\"COLUMN_STATS\":{\"c\":\"true\"}}
PREHOOK: query: SELECT * from test2 where b = '2' and c = 'B'
PREHOOK: type: QUERY
PREHOOK: Input: default@test2
PREHOOK: Input: default@test2@a=a
PREHOOK: Input: default@test2@a=b
PREHOOK: Input: default@test2@a=c
#### A masked pattern was here ####
POSTHOOK: query: SELECT * from test2 where b = '2' and c = 'B'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test2
POSTHOOK: Input: default@test2@a=a
POSTHOOK: Input: default@test2@a=b
POSTHOOK: Input: default@test2@a=c
#### A masked pattern was here ####
2	B	a
2	B	b
2	B	b
2	B	b
PREHOOK: query: -- .1 / .142 w/sketches .36 / .22

EXPLAIN CBO COST SELECT * from test2 where b = '2' and c = 'B'
PREHOOK: type: QUERY
PREHOOK: Input: default@test2
PREHOOK: Input: default@test2@a=a
PREHOOK: Input: default@test2@a=b
PREHOOK: Input: default@test2@a=c
#### A masked pattern was here ####
POSTHOOK: query: -- .1 / .142 w/sketches .36 / .22

EXPLAIN CBO COST SELECT * from test2 where b = '2' and c = 'B'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test2
POSTHOOK: Input: default@test2@a=a
POSTHOOK: Input: default@test2@a=b
POSTHOOK: Input: default@test2@a=c
#### A masked pattern was here ####
CBO PLAN:
HiveProject(b=[CAST(_UTF-16LE'2':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"):VARCHAR(2147483647) CHARACTER SET "UTF-16LE"], c=[CAST(_UTF-16LE'B':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"):VARCHAR(2147483647) CHARACTER SET "UTF-16LE"], a=[$2]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###
  HiveFilter(condition=[AND(=($1, _UTF-16LE'B'), =($0, _UTF-16LE'2'))]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###
    HiveTableScan(table=[[default, test2]], table:alias=[test2]): rowcount = ###Masked###, cumulative cost = ###Masked###, id = ###Masked###

PREHOOK: query: CREATE TABLE test3 (b string, c string) partitioned by (a string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test3
POSTHOOK: query: CREATE TABLE test3 (b string, c string) partitioned by (a string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test3
PREHOOK: query: INSERT INTO test3 VALUES ('1',"A", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('1',"A", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('2',"B", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('2',"B", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"C", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"C", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"D", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"D", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"E", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"E", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"F", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"F", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"G", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"G", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"H", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"H", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"I", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"I", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"J", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"J", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"K", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"K", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"L", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"L", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"M", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"M", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"N", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"N", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"O", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"O", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"P", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"P", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"Q", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"Q", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"R", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"R", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"abcdefghijklmnopqrstuvwxyz_12345", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"abcdefghijklmnopqrstuvwxyz_12345", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"abcdefghijklmnopqrstuvwxyz_12345", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"abcdefghijklmnopqrstuvwxyz_12345", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"abcdefghijklmnopqrstuvwxyz_12345", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"abcdefghijklmnopqrstuvwxyz_12345", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"abcdefghijklmnopqrstuvwxyz_12345", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"abcdefghijklmnopqrstuvwxyz_12345", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"abcdefghijklmnopqrstuvwxyz_12345", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"abcdefghijklmnopqrstuvwxyz_12345", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: INSERT INTO test3 VALUES ('3',"abcdefghijklmnopqrstuvwxyz_12345", "a" )
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test3
POSTHOOK: query: INSERT INTO test3 VALUES ('3',"abcdefghijklmnopqrstuvwxyz_12345", "a" )
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
POSTHOOK: Lineage: test3 PARTITION(a=a).b SCRIPT []
POSTHOOK: Lineage: test3 PARTITION(a=a).c SCRIPT []
PREHOOK: query: ANALYZE TABLE test3 COMPUTE STATISTICS FOR COLUMNS
PREHOOK: type: ANALYZE_TABLE
PREHOOK: Input: default@test3
PREHOOK: Input: default@test3@a=a
PREHOOK: Output: default@test3
PREHOOK: Output: default@test3@a=a
#### A masked pattern was here ####
POSTHOOK: query: ANALYZE TABLE test3 COMPUTE STATISTICS FOR COLUMNS
POSTHOOK: type: ANALYZE_TABLE
POSTHOOK: Input: default@test3
POSTHOOK: Input: default@test3@a=a
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
#### A masked pattern was here ####
PREHOOK: query: ANALYZE TABLE test3 COMPUTE STATISTICS
PREHOOK: type: QUERY
PREHOOK: Input: default@test3
PREHOOK: Input: default@test3@a=a
PREHOOK: Output: default@test3
PREHOOK: Output: default@test3@a=a
POSTHOOK: query: ANALYZE TABLE test3 COMPUTE STATISTICS
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test3
POSTHOOK: Input: default@test3@a=a
POSTHOOK: Output: default@test3
POSTHOOK: Output: default@test3@a=a
PREHOOK: query: DESCRIBE EXTENDED test3
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@test3
POSTHOOK: query: DESCRIBE EXTENDED test3
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@test3
b                   	string              	                    
c                   	string              	                    
a                   	string              	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
a                   	string              	                    
	 	 
#### A masked pattern was here ####
PREHOOK: query: DESCRIBE FORMATTED test3 partition(a='a') c
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@test3
POSTHOOK: query: DESCRIBE FORMATTED test3 partition(a='a') c
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@test3
col_name            	c                   
data_type           	string              
min                 	                    
max                 	                    
num_nulls           	0                   
distinct_count      	19                  
avg_col_len         	8.75                
max_col_len         	32                  
num_trues           	                    
num_falses          	                    
bit_vector          	HL                  
freq_items          	FrequentItemsSketch<T>:
                    	  Stream Length    : 24
                    	  Max Error Offset : 0
                    	  Num Active Items : 19
                    	  Current Map Cap  : 24
                    	                  Item          Est
                    	  abcdefghijklmno..12345            6
                    	                       N            1
                    	                       G            1
                    	                       I            1
                    	                       F            1
                    	                     ...
                    	                       O            1
                    	                       B            1
                    	                       C            1
                    	                       L            1
                    	                       K            1
comment             	from deserializer   
PREHOOK: query: DESCRIBE FORMATTED test3 c
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@test3
POSTHOOK: query: DESCRIBE FORMATTED test3 c
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@test3
col_name            	c                   
data_type           	string              
min                 	                    
max                 	                    
num_nulls           	0                   
distinct_count      	19                  
avg_col_len         	8.75                
max_col_len         	32                  
num_trues           	                    
num_falses          	                    
bit_vector          	HL                  
freq_items          	FrequentItemsSketch<T>:
                    	  Stream Length    : 24
                    	  Max Error Offset : 0
                    	  Num Active Items : 19
                    	  Current Map Cap  : 24
                    	                  Item          Est
                    	  abcdefghijklmno..12345            6
                    	                       J            1
                    	                       G            1
                    	                       E            1
                    	                       F            1
                    	                     ...
                    	                       M            1
                    	                       Q            1
                    	                       L            1
                    	                       C            1
                    	                       K            1
comment             	from deserializer   
COLUMN_STATS_ACCURATE	{\"COLUMN_STATS\":{\"c\":\"true\"}}
