PREHOOK: query: CREATE TABLE T1_n91(key STRING, val STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@T1_n91
POSTHOOK: query: CREATE TABLE T1_n91(key STRING, val STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@T1_n91
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/T1.txt' INTO TABLE T1_n91
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@t1_n91
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/T1.txt' INTO TABLE T1_n91
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@t1_n91
PREHOOK: query: EXPLAIN
SELECT key, val, count(1) FROM T1_n91 GROUP BY key, val with rollup
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n91
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT key, val, count(1) FROM T1_n91 GROUP BY key, val with rollup
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n91
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1_n91
                  Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), val (type: string)
                    outputColumnNames: key, val
                    Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), val (type: string), 0L (type: bigint)
                      grouping sets: 0, 1, 3
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                        null sort order: zzz
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                        Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: bigint)
            Execution mode: llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col3
                Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), _col3 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT key, val, count(1) FROM T1_n91 GROUP BY key, val with rollup
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n91
#### A masked pattern was here ####
POSTHOOK: query: SELECT key, val, count(1) FROM T1_n91 GROUP BY key, val with rollup
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n91
#### A masked pattern was here ####
1	11	1
1	NULL	1
2	12	1
2	NULL	1
3	13	1
3	NULL	1
7	17	1
7	NULL	1
8	18	1
8	28	1
8	NULL	2
NULL	NULL	6
PREHOOK: query: EXPLAIN
SELECT key, count(distinct val) FROM T1_n91 GROUP BY key with rollup
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n91
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT key, count(distinct val) FROM T1_n91 GROUP BY key with rollup
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n91
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1_n91
                  Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), val (type: string)
                    outputColumnNames: key, val
                    Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(DISTINCT val)
                      keys: key (type: string), 0L (type: bigint), val (type: string)
                      grouping sets: 0, 1
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string)
                        null sort order: zzz
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: bigint)
                        Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
            Execution mode: llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(DISTINCT KEY._col2:0._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: bigint)
                mode: mergepartial
                outputColumnNames: _col0, _col2
                Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Select Operator
                  expressions: _col0 (type: string), _col2 (type: bigint)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT key, count(distinct val) FROM T1_n91 GROUP BY key with rollup
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n91
#### A masked pattern was here ####
POSTHOOK: query: SELECT key, count(distinct val) FROM T1_n91 GROUP BY key with rollup
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n91
#### A masked pattern was here ####
1	1
2	1
3	1
7	1
8	2
NULL	6
PREHOOK: query: EXPLAIN
SELECT key, val, count(1) FROM T1_n91 GROUP BY key, val with rollup
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n91
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT key, val, count(1) FROM T1_n91 GROUP BY key, val with rollup
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n91
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1_n91
                  Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), val (type: string)
                    outputColumnNames: key, val
                    Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), val (type: string), 0L (type: bigint)
                      grouping sets: 0, 1, 3
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                        null sort order: zzz
                        sort order: +++
                        Map-reduce partition columns: rand() (type: double)
                        Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: bigint)
            Execution mode: llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: partials
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                  null sort order: zzz
                  sort order: +++
                  Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                  Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col3 (type: bigint)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: final
                outputColumnNames: _col0, _col1, _col3
                Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), _col3 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT key, val, count(1) FROM T1_n91 GROUP BY key, val with rollup
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n91
#### A masked pattern was here ####
POSTHOOK: query: SELECT key, val, count(1) FROM T1_n91 GROUP BY key, val with rollup
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n91
#### A masked pattern was here ####
1	11	1
1	NULL	1
2	12	1
2	NULL	1
3	13	1
3	NULL	1
7	17	1
7	NULL	1
8	18	1
8	28	1
8	NULL	2
NULL	NULL	6
PREHOOK: query: EXPLAIN
SELECT key, count(distinct val) FROM T1_n91 GROUP BY key with rollup
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n91
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT key, count(distinct val) FROM T1_n91 GROUP BY key with rollup
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n91
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1_n91
                  Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), val (type: string)
                    outputColumnNames: key, val
                    Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(DISTINCT val)
                      keys: key (type: string), 0L (type: bigint), val (type: string)
                      grouping sets: 0, 1
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string)
                        null sort order: zzz
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
            Execution mode: llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(DISTINCT KEY._col2:0._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: bigint)
                mode: partials
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string), _col1 (type: bigint)
                  null sort order: zz
                  sort order: ++
                  Map-reduce partition columns: _col0 (type: string)
                  Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col2 (type: bigint)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: bigint)
                mode: final
                outputColumnNames: _col0, _col2
                Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Select Operator
                  expressions: _col0 (type: string), _col2 (type: bigint)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT key, count(distinct val) FROM T1_n91 GROUP BY key with rollup
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n91
#### A masked pattern was here ####
POSTHOOK: query: SELECT key, count(distinct val) FROM T1_n91 GROUP BY key with rollup
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n91
#### A masked pattern was here ####
1	1
2	1
3	1
7	1
8	2
NULL	6
PREHOOK: query: CREATE TABLE T2_n56(key1 STRING, key2 STRING, val INT) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@T2_n56
POSTHOOK: query: CREATE TABLE T2_n56(key1 STRING, key2 STRING, val INT) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@T2_n56
PREHOOK: query: CREATE TABLE T3_n20(key1 STRING, key2 STRING, val INT) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@T3_n20
POSTHOOK: query: CREATE TABLE T3_n20(key1 STRING, key2 STRING, val INT) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@T3_n20
PREHOOK: query: EXPLAIN
FROM T1_n91
INSERT OVERWRITE TABLE T2_n56 SELECT key, val, count(1) group by key, val with rollup
INSERT OVERWRITE TABLE T3_n20 SELECT key, val, sum(1) group by rollup(key, val)
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n91
PREHOOK: Output: default@t2_n56
PREHOOK: Output: default@t3_n20
POSTHOOK: query: EXPLAIN
FROM T1_n91
INSERT OVERWRITE TABLE T2_n56 SELECT key, val, count(1) group by key, val with rollup
INSERT OVERWRITE TABLE T3_n20 SELECT key, val, sum(1) group by rollup(key, val)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n91
POSTHOOK: Output: default@t2_n56
POSTHOOK: Output: default@t3_n20
STAGE DEPENDENCIES:
  Stage-2 is a root stage
  Stage-3 depends on stages: Stage-2
  Stage-0 depends on stages: Stage-3
  Stage-4 depends on stages: Stage-0
  Stage-1 depends on stages: Stage-3
  Stage-5 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-2
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
        Reducer 5 <- Map 1 (SIMPLE_EDGE)
        Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
        Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1_n91
                  Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), val (type: string)
                    outputColumnNames: key, val
                    Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(1)
                      keys: key (type: string), val (type: string), 0L (type: bigint)
                      grouping sets: 0, 1, 3
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                        null sort order: zzz
                        sort order: +++
                        Map-reduce partition columns: rand() (type: double)
                        Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: bigint)
                  Select Operator
                    expressions: key (type: string), val (type: string)
                    outputColumnNames: key, val
                    Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: sum(1)
                      keys: key (type: string), val (type: string), 0L (type: bigint)
                      grouping sets: 0, 1, 3
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                        null sort order: zzz
                        sort order: +++
                        Map-reduce partition columns: rand() (type: double)
                        Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: bigint)
            Execution mode: llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: partials
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                  null sort order: zzz
                  sort order: +++
                  Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                  Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col3 (type: bigint)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: final
                outputColumnNames: _col0, _col1, _col3
                Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), UDFToInteger(_col3) (type: int)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        name: default.t2_n56
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: int)
                    outputColumnNames: key1, key2, val
                    Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: max(length(key1)), avg(COALESCE(length(key1),0)), count(1), count(key1), compute_bit_vector_hll(key1), max(length(key2)), avg(COALESCE(length(key2),0)), count(key2), compute_bit_vector_hll(key2), min(val), max(val), count(val), compute_bit_vector_hll(val)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                      Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: int), _col1 (type: struct<count:bigint,sum:double,input:int>), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: binary), _col5 (type: int), _col6 (type: struct<count:bigint,sum:double,input:int>), _col7 (type: bigint), _col8 (type: binary), _col9 (type: int), _col10 (type: int), _col11 (type: bigint), _col12 (type: binary)
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0), avg(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector_hll(VALUE._col4), max(VALUE._col5), avg(VALUE._col6), count(VALUE._col7), compute_bit_vector_hll(VALUE._col8), min(VALUE._col9), max(VALUE._col10), count(VALUE._col11), compute_bit_vector_hll(VALUE._col12)
                mode: final
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: 'STRING' (type: string), UDFToLong(COALESCE(_col0,0)) (type: bigint), COALESCE(_col1,0) (type: double), (_col2 - _col3) (type: bigint), COALESCE(ndv_compute_bit_vector(_col4),0) (type: bigint), _col4 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col5,0)) (type: bigint), COALESCE(_col6,0) (type: double), (_col2 - _col7) (type: bigint), COALESCE(ndv_compute_bit_vector(_col8),0) (type: bigint), _col8 (type: binary), 'LONG' (type: string), UDFToLong(_col9) (type: bigint), UDFToLong(_col10) (type: bigint), (_col2 - _col11) (type: bigint), COALESCE(ndv_compute_bit_vector(_col12),0) (type: bigint), _col12 (type: binary)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17
                  Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 5 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: partials
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                  null sort order: zzz
                  sort order: +++
                  Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                  Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col3 (type: bigint)
        Reducer 6 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: final
                outputColumnNames: _col0, _col1, _col3
                Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), UDFToInteger(_col3) (type: int)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        name: default.t3_n20
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: int)
                    outputColumnNames: key1, key2, val
                    Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: max(length(key1)), avg(COALESCE(length(key1),0)), count(1), count(key1), compute_bit_vector_hll(key1), max(length(key2)), avg(COALESCE(length(key2),0)), count(key2), compute_bit_vector_hll(key2), min(val), max(val), count(val), compute_bit_vector_hll(val)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                      Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: int), _col1 (type: struct<count:bigint,sum:double,input:int>), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: binary), _col5 (type: int), _col6 (type: struct<count:bigint,sum:double,input:int>), _col7 (type: bigint), _col8 (type: binary), _col9 (type: int), _col10 (type: int), _col11 (type: bigint), _col12 (type: binary)
        Reducer 7 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0), avg(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector_hll(VALUE._col4), max(VALUE._col5), avg(VALUE._col6), count(VALUE._col7), compute_bit_vector_hll(VALUE._col8), min(VALUE._col9), max(VALUE._col10), count(VALUE._col11), compute_bit_vector_hll(VALUE._col12)
                mode: final
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: 'STRING' (type: string), UDFToLong(COALESCE(_col0,0)) (type: bigint), COALESCE(_col1,0) (type: double), (_col2 - _col3) (type: bigint), COALESCE(ndv_compute_bit_vector(_col4),0) (type: bigint), _col4 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col5,0)) (type: bigint), COALESCE(_col6,0) (type: double), (_col2 - _col7) (type: bigint), COALESCE(ndv_compute_bit_vector(_col8),0) (type: bigint), _col8 (type: binary), 'LONG' (type: string), UDFToLong(_col9) (type: bigint), UDFToLong(_col10) (type: bigint), (_col2 - _col11) (type: bigint), COALESCE(ndv_compute_bit_vector(_col12),0) (type: bigint), _col12 (type: binary)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17
                  Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 1000 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-3
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.t2_n56

  Stage: Stage-4
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key1, key2, val
          Column Types: string, string, int
          Table: default.t2_n56

  Stage: Stage-1
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.t3_n20

  Stage: Stage-5
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key1, key2, val
          Column Types: string, string, int
          Table: default.t3_n20

PREHOOK: query: FROM T1_n91
INSERT OVERWRITE TABLE T2_n56 SELECT key, val, count(1) group by key, val with rollup
INSERT OVERWRITE TABLE T3_n20 SELECT key, val, sum(1) group by key, val with rollup
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n91
PREHOOK: Output: default@t2_n56
PREHOOK: Output: default@t3_n20
POSTHOOK: query: FROM T1_n91
INSERT OVERWRITE TABLE T2_n56 SELECT key, val, count(1) group by key, val with rollup
INSERT OVERWRITE TABLE T3_n20 SELECT key, val, sum(1) group by key, val with rollup
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n91
POSTHOOK: Output: default@t2_n56
POSTHOOK: Output: default@t3_n20
POSTHOOK: Lineage: t2_n56.key1 SIMPLE [(t1_n91)t1_n91.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: t2_n56.key2 SIMPLE [(t1_n91)t1_n91.FieldSchema(name:val, type:string, comment:null), ]
POSTHOOK: Lineage: t2_n56.val EXPRESSION [(t1_n91)t1_n91.null, ]
POSTHOOK: Lineage: t3_n20.key1 SIMPLE [(t1_n91)t1_n91.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: t3_n20.key2 SIMPLE [(t1_n91)t1_n91.FieldSchema(name:val, type:string, comment:null), ]
POSTHOOK: Lineage: t3_n20.val EXPRESSION [(t1_n91)t1_n91.null, ]
