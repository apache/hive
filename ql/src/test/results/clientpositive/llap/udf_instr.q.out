PREHOOK: query: DESCRIBE FUNCTION instr
PREHOOK: type: DESCFUNCTION
POSTHOOK: query: DESCRIBE FUNCTION instr
POSTHOOK: type: DESCFUNCTION
instr(str, substr[, pos[, occurrence]]) - Returns the index of the given occurrence of substr in str after position pos
PREHOOK: query: DESCRIBE FUNCTION EXTENDED instr
PREHOOK: type: DESCFUNCTION
POSTHOOK: query: DESCRIBE FUNCTION EXTENDED instr
POSTHOOK: type: DESCFUNCTION
instr(str, substr[, pos[, occurrence]]) - Returns the index of the given occurrence of substr in str after position pos
pos is a 1-based index. If pos < 0, the starting position is
determined by counting backwards from the end of str and then Hive
searches backward from the resulting position.
occurrence is also a 1-based index. The value must be positive.
If occurrence is greater than the number of matching occurrences,
the function returns 0.
If either of the optional arguments, pos or occurrence, is NULL,
the function also returns NULL.
Example:
  > SELECT instr('Facebook', 'boo') FROM src LIMIT 1;
  5
  > SELECT instr('CORPORATE FLOOR','OR', 3, 2) FROM src LIMIT 1;
  14
  > SELECT instr('CORPORATE FLOOR','OR', -3, 2) FROM src LIMIT 1;
  2
Function class:org.apache.hadoop.hive.ql.udf.generic.GenericUDFInstr
Function type:BUILTIN
PREHOOK: query: EXPLAIN
SELECT instr('abcd', 'abc'),
       instr('abcabc', 'ccc'),
       instr(123, '23'),
       instr(123, 23),
       instr(TRUE, 1),
       instr(FALSE, 1),
       instr('12345', CAST('2' AS TINYINT)),
       instr(CAST('12345' AS SMALLINT), '34'),
       instr(CAST('123456789012' AS BIGINT), '456'),
       instr(CAST(1.25 AS FLOAT), '.25'),
       instr(CAST(16.0 AS DOUBLE), '.0'),
       instr(null, 'abc'),
       instr('abcd', null),
       instr('abcdabcd', 'abc', 1),
       instr('abcdabcd', 'abc', 2),
       instr('abcdabcd', 'abc', 5),
       instr('abcdabcd', 'abc', 6),
       instr('abcdabcd', 'abc', -1),
       instr('abcdabcd', 'abc', -4),
       instr('abcdabcd', 'abc', -5),
       instr('abcdabcd', 'abc', 1, 1),
       instr('abcdabcd', 'abc', 1, 2),
       instr('abcdabcd', 'abc', 1, 3),
       instr('abcdabcd', 'abc', 2, 1),
       instr('abcdabcd', 'abc', 2, 2),
       instr('abcdabcd', 'abc', 5, 2),
       instr('abcdabcd', 'abc', -1, 2),
       instr('abcdabcd', 'abc', -4, 2),
       instr('abcdabcd', 'abc', -5, 2),
       instr('abcdabcd', 'abc', 1, null),
       instr('abcdabcd', 'abc', null, 1),
       instr('aaa', 'a', 3, 1),
       instr('aaa', 'a', 3, 2)
FROM src tablesample (1 rows)
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT instr('abcd', 'abc'),
       instr('abcabc', 'ccc'),
       instr(123, '23'),
       instr(123, 23),
       instr(TRUE, 1),
       instr(FALSE, 1),
       instr('12345', CAST('2' AS TINYINT)),
       instr(CAST('12345' AS SMALLINT), '34'),
       instr(CAST('123456789012' AS BIGINT), '456'),
       instr(CAST(1.25 AS FLOAT), '.25'),
       instr(CAST(16.0 AS DOUBLE), '.0'),
       instr(null, 'abc'),
       instr('abcd', null),
       instr('abcdabcd', 'abc', 1),
       instr('abcdabcd', 'abc', 2),
       instr('abcdabcd', 'abc', 5),
       instr('abcdabcd', 'abc', 6),
       instr('abcdabcd', 'abc', -1),
       instr('abcdabcd', 'abc', -4),
       instr('abcdabcd', 'abc', -5),
       instr('abcdabcd', 'abc', 1, 1),
       instr('abcdabcd', 'abc', 1, 2),
       instr('abcdabcd', 'abc', 1, 3),
       instr('abcdabcd', 'abc', 2, 1),
       instr('abcdabcd', 'abc', 2, 2),
       instr('abcdabcd', 'abc', 5, 2),
       instr('abcdabcd', 'abc', -1, 2),
       instr('abcdabcd', 'abc', -4, 2),
       instr('abcdabcd', 'abc', -5, 2),
       instr('abcdabcd', 'abc', 1, null),
       instr('abcdabcd', 'abc', null, 1),
       instr('aaa', 'a', 3, 1),
       instr('aaa', 'a', 3, 2)
FROM src tablesample (1 rows)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: src
          Row Limit Per Split: 1
          Select Operator
            expressions: 1 (type: int), 0 (type: int), 2 (type: int), 2 (type: int), 0 (type: int), 0 (type: int), 2 (type: int), 3 (type: int), 4 (type: int), 2 (type: int), 3 (type: int), null (type: int), null (type: int), 1 (type: int), 5 (type: int), 5 (type: int), 0 (type: int), 5 (type: int), 5 (type: int), 1 (type: int), 1 (type: int), 5 (type: int), 0 (type: int), 5 (type: int), 0 (type: int), 0 (type: int), 1 (type: int), 1 (type: int), 0 (type: int), null (type: int), null (type: int), 3 (type: int), 0 (type: int)
            outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30, _col31, _col32
            ListSink

PREHOOK: query: SELECT instr('abcd', 'abc'),
       instr('abcabc', 'ccc'),
       instr(123, '23'),
       instr(123, 23),
       instr(TRUE, 1),
       instr(FALSE, 1),
       instr('12345', CAST('2' AS TINYINT)),
       instr(CAST('12345' AS SMALLINT), '34'),
       instr(CAST('123456789012' AS BIGINT), '456'),
       instr(CAST(1.25 AS FLOAT), '.25'),
       instr(CAST(16.0 AS DOUBLE), '.0'),
       instr(null, 'abc'),
       instr('abcd', null),
       instr('abcdabcd', 'abc', 1),
       instr('abcdabcd', 'abc', 2),
       instr('abcdabcd', 'abc', 5),
       instr('abcdabcd', 'abc', 6),
       instr('abcdabcd', 'abc', -1),
       instr('abcdabcd', 'abc', -4),
       instr('abcdabcd', 'abc', -5),
       instr('abcdabcd', 'abc', 1, 1),
       instr('abcdabcd', 'abc', 1, 2),
       instr('abcdabcd', 'abc', 1, 3),
       instr('abcdabcd', 'abc', 2, 1),
       instr('abcdabcd', 'abc', 2, 2),
       instr('abcdabcd', 'abc', 5, 2),
       instr('abcdabcd', 'abc', -1, 2),
       instr('abcdabcd', 'abc', -4, 2),
       instr('abcdabcd', 'abc', -5, 2),
       instr('abcdabcd', 'abc', 1, null),
       instr('abcdabcd', 'abc', null, 1),
       instr('aaa', 'a', 3, 1),
       instr('aaa', 'a', 3, 2)
FROM src tablesample (1 rows)
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: SELECT instr('abcd', 'abc'),
       instr('abcabc', 'ccc'),
       instr(123, '23'),
       instr(123, 23),
       instr(TRUE, 1),
       instr(FALSE, 1),
       instr('12345', CAST('2' AS TINYINT)),
       instr(CAST('12345' AS SMALLINT), '34'),
       instr(CAST('123456789012' AS BIGINT), '456'),
       instr(CAST(1.25 AS FLOAT), '.25'),
       instr(CAST(16.0 AS DOUBLE), '.0'),
       instr(null, 'abc'),
       instr('abcd', null),
       instr('abcdabcd', 'abc', 1),
       instr('abcdabcd', 'abc', 2),
       instr('abcdabcd', 'abc', 5),
       instr('abcdabcd', 'abc', 6),
       instr('abcdabcd', 'abc', -1),
       instr('abcdabcd', 'abc', -4),
       instr('abcdabcd', 'abc', -5),
       instr('abcdabcd', 'abc', 1, 1),
       instr('abcdabcd', 'abc', 1, 2),
       instr('abcdabcd', 'abc', 1, 3),
       instr('abcdabcd', 'abc', 2, 1),
       instr('abcdabcd', 'abc', 2, 2),
       instr('abcdabcd', 'abc', 5, 2),
       instr('abcdabcd', 'abc', -1, 2),
       instr('abcdabcd', 'abc', -4, 2),
       instr('abcdabcd', 'abc', -5, 2),
       instr('abcdabcd', 'abc', 1, null),
       instr('abcdabcd', 'abc', null, 1),
       instr('aaa', 'a', 3, 1),
       instr('aaa', 'a', 3, 2)
FROM src tablesample (1 rows)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
1	0	2	2	0	0	2	3	4	2	3	NULL	NULL	1	5	5	0	5	5	1	1	5	0	5	0	0	1	1	0	NULL	NULL	3	0
