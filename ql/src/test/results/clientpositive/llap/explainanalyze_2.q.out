PREHOOK: query: SELECT x.key, z.value, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
union
SELECT x.key, z.value, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT x.key, z.value, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
union
SELECT x.key, z.value, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
PREHOOK: query: explain analyze
SELECT x.key, z.value, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
union
SELECT x.key, z.value, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: explain analyze
SELECT x.key, z.value, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
union
SELECT x.key, z.value, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Union 2 (CONTAINS)
Map 13 <- Union 14 (CONTAINS)
Map 16 <- Union 14 (CONTAINS)
Map 7 <- Union 2 (CONTAINS)
Reducer 10 <- Map 12 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 15 <- Union 14 (SIMPLE_EDGE)
Reducer 3 <- Union 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 9 <- Map 12 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 llap
      File Output Operator [FS_58]
        Group By Operator [GBY_56] (rows=132/15 width=268)
          Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
        <-Union 5 [SIMPLE_EDGE]
          <-Reducer 11 [CONTAINS] llap
            Reduce Output Operator [RS_142]
              PartitionCols:_col0, _col1, _col2
              Select Operator [SEL_140] (rows=66/61 width=268)
                Output:["_col0","_col1","_col2"]
                Merge Join Operator [MERGEJOIN_139] (rows=66/61 width=268)
                  Conds:RS_48._col0=RS_49._col3(Inner),Output:["_col0","_col2","_col3"]
                <-Reducer 10 [SIMPLE_EDGE] llap
                  SHUFFLE [RS_49]
                    PartitionCols:_col3
                    Merge Join Operator [MERGEJOIN_122] (rows=39/37 width=266)
                      Conds:RS_44._col0=RS_45._col0(Inner),Output:["_col1","_col2","_col3"]
                    <-Map 12 [SIMPLE_EDGE] llap
                      SHUFFLE [RS_45]
                        PartitionCols:_col0
                        Select Operator [SEL_17] (rows=25/25 width=175)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_74] (rows=25/25 width=175)
                            predicate:(key is not null and value is not null)
                            TableScan [TS_15] (rows=25/25 width=175)
                              default@src1,x,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                    <-Map 8 [SIMPLE_EDGE] llap
                      SHUFFLE [RS_44]
                        PartitionCols:_col0
                        Select Operator [SEL_14] (rows=500/500 width=178)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_73] (rows=500/500 width=178)
                            predicate:key is not null
                            TableScan [TS_12] (rows=500/500 width=178)
                              default@src,y,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                <-Reducer 15 [SIMPLE_EDGE] llap
                  SHUFFLE [RS_48]
                    PartitionCols:_col0
                    Select Operator [SEL_37] (rows=525/319 width=91)
                      Output:["_col0"]
                      Group By Operator [GBY_36] (rows=525/319 width=178)
                        Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                      <-Union 14 [SIMPLE_EDGE]
                        <-Map 13 [CONTAINS] llap
                          Reduce Output Operator [RS_147]
                            PartitionCols:_col1, _col0
                            Select Operator [SEL_145] (rows=25/25 width=175)
                              Output:["_col0","_col1"]
                              Filter Operator [FIL_144] (rows=25/25 width=175)
                                predicate:value is not null
                                TableScan [TS_143] (rows=25/25 width=175)
                                  Output:["key","value"]
                        <-Map 16 [CONTAINS] llap
                          Reduce Output Operator [RS_152]
                            PartitionCols:_col1, _col0
                            Select Operator [SEL_150] (rows=500/500 width=178)
                              Output:["_col0","_col1"]
                              Filter Operator [FIL_149] (rows=500/500 width=178)
                                predicate:value is not null
                                TableScan [TS_148] (rows=500/500 width=178)
                                  Output:["key","value"]
          <-Reducer 4 [CONTAINS] llap
            Reduce Output Operator [RS_133]
              PartitionCols:_col0, _col1, _col2
              Select Operator [SEL_131] (rows=66/61 width=268)
                Output:["_col0","_col1","_col2"]
                Merge Join Operator [MERGEJOIN_130] (rows=66/61 width=268)
                  Conds:RS_22._col0=RS_23._col3(Inner),Output:["_col0","_col2","_col3"]
                <-Reducer 3 [SIMPLE_EDGE] llap
                  SHUFFLE [RS_22]
                    PartitionCols:_col0
                    Select Operator [SEL_11] (rows=525/319 width=91)
                      Output:["_col0"]
                      Group By Operator [GBY_10] (rows=525/319 width=178)
                        Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                      <-Union 2 [SIMPLE_EDGE]
                        <-Map 1 [CONTAINS] llap
                          Reduce Output Operator [RS_129]
                            PartitionCols:_col1, _col0
                            Select Operator [SEL_127] (rows=25/25 width=175)
                              Output:["_col0","_col1"]
                              Filter Operator [FIL_126] (rows=25/25 width=175)
                                predicate:value is not null
                                TableScan [TS_125] (rows=25/25 width=175)
                                  Output:["key","value"]
                        <-Map 7 [CONTAINS] llap
                          Reduce Output Operator [RS_138]
                            PartitionCols:_col1, _col0
                            Select Operator [SEL_136] (rows=500/500 width=178)
                              Output:["_col0","_col1"]
                              Filter Operator [FIL_135] (rows=500/500 width=178)
                                predicate:value is not null
                                TableScan [TS_134] (rows=500/500 width=178)
                                  Output:["key","value"]
                <-Reducer 9 [SIMPLE_EDGE] llap
                  SHUFFLE [RS_23]
                    PartitionCols:_col3
                    Merge Join Operator [MERGEJOIN_121] (rows=39/37 width=266)
                      Conds:RS_18._col0=RS_19._col0(Inner),Output:["_col1","_col2","_col3"]
                    <-Map 12 [SIMPLE_EDGE] llap
                      SHUFFLE [RS_19]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_17]
                    <-Map 8 [SIMPLE_EDGE] llap
                      SHUFFLE [RS_18]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_14]

PREHOOK: query: SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
union
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src)z ON (x.value = z.value)
union
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src union select key, value from src)z ON (x.value = z.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
union
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src)z ON (x.value = z.value)
union
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src union select key, value from src)z ON (x.value = z.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
PREHOOK: query: explain analyze
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
union
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src)z ON (x.value = z.value)
union
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src union select key, value from src)z ON (x.value = z.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: explain analyze
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
union
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src)z ON (x.value = z.value)
union
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src union select key, value from src)z ON (x.value = z.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Union 2 (CONTAINS)
Map 16 <- Union 17 (CONTAINS)
Map 21 <- Union 17 (CONTAINS)
Map 22 <- Union 19 (CONTAINS)
Map 23 <- Union 24 (CONTAINS)
Map 30 <- Union 24 (CONTAINS)
Map 31 <- Union 26 (CONTAINS)
Map 32 <- Union 28 (CONTAINS)
Map 9 <- Union 2 (CONTAINS)
Reducer 11 <- Map 10 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 13 <- Map 10 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 18 <- Union 17 (SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 20 <- Union 19 (SIMPLE_EDGE)
Reducer 25 <- Union 24 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 27 <- Union 26 (SIMPLE_EDGE), Union 28 (CONTAINS)
Reducer 29 <- Union 28 (SIMPLE_EDGE)
Reducer 3 <- Union 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 11 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 8 <- Union 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8 llap
      File Output Operator [FS_117]
        Group By Operator [GBY_115] (rows=384/15 width=177)
          Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
        <-Union 7 [SIMPLE_EDGE]
          <-Reducer 12 [CONTAINS] llap
            Reduce Output Operator [RS_246]
              PartitionCols:_col0, _col1
              Select Operator [SEL_244] (rows=193/61 width=177)
                Output:["_col0","_col1"]
                Merge Join Operator [MERGEJOIN_243] (rows=193/61 width=177)
                  Conds:RS_107._col0=RS_108._col3(Inner),Output:["_col2","_col3"]
                <-Reducer 11 [SIMPLE_EDGE] llap
                  SHUFFLE [RS_108]
                    PartitionCols:_col3
                    Merge Join Operator [MERGEJOIN_220] (rows=39/37 width=266)
                      Conds:RS_18._col0=RS_19._col0(Inner),Output:["_col1","_col2","_col3"]
                    <-Map 10 [SIMPLE_EDGE] llap
                      SHUFFLE [RS_18]
                        PartitionCols:_col0
                        Select Operator [SEL_14] (rows=500/500 width=178)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_141] (rows=500/500 width=178)
                            predicate:key is not null
                            TableScan [TS_12] (rows=500/500 width=178)
                              default@src,y,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                    <-Map 15 [SIMPLE_EDGE] llap
                      SHUFFLE [RS_19]
                        PartitionCols:_col0
                        Select Operator [SEL_17] (rows=25/25 width=175)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_142] (rows=25/25 width=175)
                            predicate:(key is not null and value is not null)
                            TableScan [TS_15] (rows=25/25 width=175)
                              default@src1,x,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                <-Reducer 29 [SIMPLE_EDGE] llap
                  SHUFFLE [RS_107]
                    PartitionCols:_col0
                    Select Operator [SEL_96] (rows=1525/319 width=91)
                      Output:["_col0"]
                      Group By Operator [GBY_95] (rows=1525/319 width=178)
                        Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                      <-Union 28 [SIMPLE_EDGE]
                        <-Map 32 [CONTAINS] llap
                          Reduce Output Operator [RS_297]
                            PartitionCols:_col1, _col0
                            Select Operator [SEL_295] (rows=500/500 width=178)
                              Output:["_col0","_col1"]
                              Filter Operator [FIL_294] (rows=500/500 width=178)
                                predicate:value is not null
                                TableScan [TS_293] (rows=500/500 width=178)
                                  Output:["key","value"]
                        <-Reducer 27 [CONTAINS] llap
                          Reduce Output Operator [RS_282]
                            PartitionCols:_col1, _col0
                            Select Operator [SEL_280] (rows=1025/319 width=178)
                              Output:["_col0","_col1"]
                              Group By Operator [GBY_279] (rows=1025/319 width=178)
                                Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                              <-Union 26 [SIMPLE_EDGE]
                                <-Map 31 [CONTAINS] llap
                                  Reduce Output Operator [RS_292]
                                    PartitionCols:_col1, _col0
                                    Select Operator [SEL_290] (rows=500/500 width=178)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_289] (rows=500/500 width=178)
                                        predicate:value is not null
                                        TableScan [TS_288] (rows=500/500 width=178)
                                          Output:["key","value"]
                                <-Reducer 25 [CONTAINS] llap
                                  Reduce Output Operator [RS_278]
                                    PartitionCols:_col1, _col0
                                    Select Operator [SEL_276] (rows=525/319 width=178)
                                      Output:["_col0","_col1"]
                                      Group By Operator [GBY_275] (rows=525/319 width=178)
                                        Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                      <-Union 24 [SIMPLE_EDGE]
                                        <-Map 23 [CONTAINS] llap
                                          Reduce Output Operator [RS_274]
                                            PartitionCols:_col1, _col0
                                            Select Operator [SEL_272] (rows=25/25 width=175)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_271] (rows=25/25 width=175)
                                                predicate:value is not null
                                                TableScan [TS_270] (rows=25/25 width=175)
                                                  Output:["key","value"]
                                        <-Map 30 [CONTAINS] llap
                                          Reduce Output Operator [RS_287]
                                            PartitionCols:_col1, _col0
                                            Select Operator [SEL_285] (rows=500/500 width=178)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_284] (rows=500/500 width=178)
                                                predicate:value is not null
                                                TableScan [TS_283] (rows=500/500 width=178)
                                                  Output:["key","value"]
          <-Reducer 6 [CONTAINS] llap
            Reduce Output Operator [RS_237]
              PartitionCols:_col0, _col1
              Group By Operator [GBY_235] (rows=196/15 width=177)
                Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
              <-Union 5 [SIMPLE_EDGE]
                <-Reducer 14 [CONTAINS] llap
                  Reduce Output Operator [RS_250]
                    PartitionCols:_col0, _col1
                    Select Operator [SEL_248] (rows=130/61 width=177)
                      Output:["_col0","_col1"]
                      Merge Join Operator [MERGEJOIN_247] (rows=130/61 width=177)
                        Conds:RS_57._col0=RS_58._col3(Inner),Output:["_col2","_col3"]
                      <-Reducer 13 [SIMPLE_EDGE] llap
                        SHUFFLE [RS_58]
                          PartitionCols:_col3
                          Merge Join Operator [MERGEJOIN_221] (rows=39/37 width=266)
                            Conds:RS_53._col0=RS_54._col0(Inner),Output:["_col1","_col2","_col3"]
                          <-Map 10 [SIMPLE_EDGE] llap
                            SHUFFLE [RS_53]
                              PartitionCols:_col0
                               Please refer to the previous Select Operator [SEL_14]
                          <-Map 15 [SIMPLE_EDGE] llap
                            SHUFFLE [RS_54]
                              PartitionCols:_col0
                               Please refer to the previous Select Operator [SEL_17]
                      <-Reducer 20 [SIMPLE_EDGE] llap
                        SHUFFLE [RS_57]
                          PartitionCols:_col0
                          Select Operator [SEL_46] (rows=1025/319 width=91)
                            Output:["_col0"]
                            Group By Operator [GBY_45] (rows=1025/319 width=178)
                              Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                            <-Union 19 [SIMPLE_EDGE]
                              <-Map 22 [CONTAINS] llap
                                Reduce Output Operator [RS_269]
                                  PartitionCols:_col1, _col0
                                  Select Operator [SEL_267] (rows=500/500 width=178)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_266] (rows=500/500 width=178)
                                      predicate:value is not null
                                      TableScan [TS_265] (rows=500/500 width=178)
                                        Output:["key","value"]
                              <-Reducer 18 [CONTAINS] llap
                                Reduce Output Operator [RS_259]
                                  PartitionCols:_col1, _col0
                                  Select Operator [SEL_257] (rows=525/319 width=178)
                                    Output:["_col0","_col1"]
                                    Group By Operator [GBY_256] (rows=525/319 width=178)
                                      Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                    <-Union 17 [SIMPLE_EDGE]
                                      <-Map 16 [CONTAINS] llap
                                        Reduce Output Operator [RS_255]
                                          PartitionCols:_col1, _col0
                                          Select Operator [SEL_253] (rows=25/25 width=175)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_252] (rows=25/25 width=175)
                                              predicate:value is not null
                                              TableScan [TS_251] (rows=25/25 width=175)
                                                Output:["key","value"]
                                      <-Map 21 [CONTAINS] llap
                                        Reduce Output Operator [RS_264]
                                          PartitionCols:_col1, _col0
                                          Select Operator [SEL_262] (rows=500/500 width=178)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_261] (rows=500/500 width=178)
                                              predicate:value is not null
                                              TableScan [TS_260] (rows=500/500 width=178)
                                                Output:["key","value"]
                <-Reducer 4 [CONTAINS] llap
                  Reduce Output Operator [RS_234]
                    PartitionCols:_col0, _col1
                    Select Operator [SEL_232] (rows=66/61 width=177)
                      Output:["_col0","_col1"]
                      Merge Join Operator [MERGEJOIN_231] (rows=66/61 width=177)
                        Conds:RS_22._col0=RS_23._col3(Inner),Output:["_col2","_col3"]
                      <-Reducer 11 [SIMPLE_EDGE] llap
                        SHUFFLE [RS_23]
                          PartitionCols:_col3
                           Please refer to the previous Merge Join Operator [MERGEJOIN_220]
                      <-Reducer 3 [SIMPLE_EDGE] llap
                        SHUFFLE [RS_22]
                          PartitionCols:_col0
                          Select Operator [SEL_11] (rows=525/319 width=91)
                            Output:["_col0"]
                            Group By Operator [GBY_10] (rows=525/319 width=178)
                              Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                            <-Union 2 [SIMPLE_EDGE]
                              <-Map 1 [CONTAINS] llap
                                Reduce Output Operator [RS_230]
                                  PartitionCols:_col1, _col0
                                  Select Operator [SEL_228] (rows=25/25 width=175)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_227] (rows=25/25 width=175)
                                      predicate:value is not null
                                      TableScan [TS_226] (rows=25/25 width=175)
                                        Output:["key","value"]
                              <-Map 9 [CONTAINS] llap
                                Reduce Output Operator [RS_242]
                                  PartitionCols:_col1, _col0
                                  Select Operator [SEL_240] (rows=500/500 width=178)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_239] (rows=500/500 width=178)
                                      predicate:value is not null
                                      TableScan [TS_238] (rows=500/500 width=178)
                                        Output:["key","value"]

PREHOOK: query: CREATE TABLE srcbucket_mapjoin_n11(key int, value string) partitioned by (ds string) CLUSTERED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@srcbucket_mapjoin_n11
POSTHOOK: query: CREATE TABLE srcbucket_mapjoin_n11(key int, value string) partitioned by (ds string) CLUSTERED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@srcbucket_mapjoin_n11
PREHOOK: query: CREATE TABLE tab_part_n7 (key int, value string) PARTITIONED BY(ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 4 BUCKETS STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tab_part_n7
POSTHOOK: query: CREATE TABLE tab_part_n7 (key int, value string) PARTITIONED BY(ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 4 BUCKETS STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tab_part_n7
PREHOOK: query: CREATE TABLE srcbucket_mapjoin_part_n11 (key int, value string) partitioned by (ds string) CLUSTERED BY (key) INTO 4 BUCKETS STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@srcbucket_mapjoin_part_n11
POSTHOOK: query: CREATE TABLE srcbucket_mapjoin_part_n11 (key int, value string) partitioned by (ds string) CLUSTERED BY (key) INTO 4 BUCKETS STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@srcbucket_mapjoin_part_n11
PREHOOK: query: load data local inpath '../../data/files/bmj/000000_0' INTO TABLE srcbucket_mapjoin_n11 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_n11
POSTHOOK: query: load data local inpath '../../data/files/bmj/000000_0' INTO TABLE srcbucket_mapjoin_n11 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_n11
POSTHOOK: Output: default@srcbucket_mapjoin_n11@ds=2008-04-08
PREHOOK: query: load data local inpath '../../data/files/bmj1/000001_0' INTO TABLE srcbucket_mapjoin_n11 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_n11@ds=2008-04-08
POSTHOOK: query: load data local inpath '../../data/files/bmj1/000001_0' INTO TABLE srcbucket_mapjoin_n11 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_n11@ds=2008-04-08
PREHOOK: query: load data local inpath '../../data/files/bmj/000000_0' INTO TABLE srcbucket_mapjoin_part_n11 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_part_n11
POSTHOOK: query: load data local inpath '../../data/files/bmj/000000_0' INTO TABLE srcbucket_mapjoin_part_n11 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_part_n11
POSTHOOK: Output: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
PREHOOK: query: load data local inpath '../../data/files/bmj/000001_0' INTO TABLE srcbucket_mapjoin_part_n11 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
POSTHOOK: query: load data local inpath '../../data/files/bmj/000001_0' INTO TABLE srcbucket_mapjoin_part_n11 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
PREHOOK: query: load data local inpath '../../data/files/bmj/000002_0' INTO TABLE srcbucket_mapjoin_part_n11 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
POSTHOOK: query: load data local inpath '../../data/files/bmj/000002_0' INTO TABLE srcbucket_mapjoin_part_n11 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
PREHOOK: query: load data local inpath '../../data/files/bmj/000003_0' INTO TABLE srcbucket_mapjoin_part_n11 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
POSTHOOK: query: load data local inpath '../../data/files/bmj/000003_0' INTO TABLE srcbucket_mapjoin_part_n11 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
PREHOOK: query: insert overwrite table tab_part_n7 partition (ds='2008-04-08')
select key,value from srcbucket_mapjoin_part_n11
PREHOOK: type: QUERY
PREHOOK: Input: default@srcbucket_mapjoin_part_n11
PREHOOK: Input: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
PREHOOK: Output: default@tab_part_n7@ds=2008-04-08
POSTHOOK: query: insert overwrite table tab_part_n7 partition (ds='2008-04-08')
select key,value from srcbucket_mapjoin_part_n11
POSTHOOK: type: QUERY
POSTHOOK: Input: default@srcbucket_mapjoin_part_n11
POSTHOOK: Input: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
POSTHOOK: Output: default@tab_part_n7@ds=2008-04-08
POSTHOOK: Lineage: tab_part_n7 PARTITION(ds=2008-04-08).key SIMPLE [(srcbucket_mapjoin_part_n11)srcbucket_mapjoin_part_n11.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: tab_part_n7 PARTITION(ds=2008-04-08).value SIMPLE [(srcbucket_mapjoin_part_n11)srcbucket_mapjoin_part_n11.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: CREATE TABLE tab_n6(key int, value string) PARTITIONED BY(ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tab_n6
POSTHOOK: query: CREATE TABLE tab_n6(key int, value string) PARTITIONED BY(ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tab_n6
PREHOOK: query: insert overwrite table tab_n6 partition (ds='2008-04-08')
select key,value from srcbucket_mapjoin_n11
PREHOOK: type: QUERY
PREHOOK: Input: default@srcbucket_mapjoin_n11
PREHOOK: Input: default@srcbucket_mapjoin_n11@ds=2008-04-08
PREHOOK: Output: default@tab_n6@ds=2008-04-08
POSTHOOK: query: insert overwrite table tab_n6 partition (ds='2008-04-08')
select key,value from srcbucket_mapjoin_n11
POSTHOOK: type: QUERY
POSTHOOK: Input: default@srcbucket_mapjoin_n11
POSTHOOK: Input: default@srcbucket_mapjoin_n11@ds=2008-04-08
POSTHOOK: Output: default@tab_n6@ds=2008-04-08
POSTHOOK: Lineage: tab_n6 PARTITION(ds=2008-04-08).key SIMPLE [(srcbucket_mapjoin_n11)srcbucket_mapjoin_n11.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: tab_n6 PARTITION(ds=2008-04-08).value SIMPLE [(srcbucket_mapjoin_n11)srcbucket_mapjoin_n11.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: CREATE TABLE tab2_n3(key int, value string) PARTITIONED BY(ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tab2_n3
POSTHOOK: query: CREATE TABLE tab2_n3(key int, value string) PARTITIONED BY(ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tab2_n3
PREHOOK: query: insert overwrite table tab2_n3 partition (ds='2008-04-08')
select key,value from srcbucket_mapjoin_n11
PREHOOK: type: QUERY
PREHOOK: Input: default@srcbucket_mapjoin_n11
PREHOOK: Input: default@srcbucket_mapjoin_n11@ds=2008-04-08
PREHOOK: Output: default@tab2_n3@ds=2008-04-08
POSTHOOK: query: insert overwrite table tab2_n3 partition (ds='2008-04-08')
select key,value from srcbucket_mapjoin_n11
POSTHOOK: type: QUERY
POSTHOOK: Input: default@srcbucket_mapjoin_n11
POSTHOOK: Input: default@srcbucket_mapjoin_n11@ds=2008-04-08
POSTHOOK: Output: default@tab2_n3@ds=2008-04-08
POSTHOOK: Lineage: tab2_n3 PARTITION(ds=2008-04-08).key SIMPLE [(srcbucket_mapjoin_n11)srcbucket_mapjoin_n11.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: tab2_n3 PARTITION(ds=2008-04-08).value SIMPLE [(srcbucket_mapjoin_n11)srcbucket_mapjoin_n11.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
PREHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
Plan optimized by CBO.

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 1 llap
      File Output Operator [FS_10]
        Merge Join Operator [MERGEJOIN_25] (rows=401/480 width=95)
          Conds:SEL_2._col0=SEL_5._col0(Inner),Output:["_col0","_col1"]
        <-Select Operator [SEL_5] (rows=242/242 width=4)
            Output:["_col0"]
            Filter Operator [FIL_14] (rows=242/242 width=4)
              predicate:key is not null
              TableScan [TS_3] (rows=242/242 width=4)
                default@tab_n6,s3,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
        <-Select Operator [SEL_2] (rows=242/242 width=95)
            Output:["_col0","_col1"]
            Filter Operator [FIL_13] (rows=242/242 width=95)
              predicate:key is not null
              TableScan [TS_0] (rows=242/242 width=95)
                default@tab_n6,s1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]

PREHOOK: query: select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key join tab_n6 s2 on s1.value=s2.value
PREHOOK: type: QUERY
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key join tab_n6 s2 on s1.value=s2.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
PREHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key join tab_n6 s2 on s1.value=s2.value
PREHOOK: type: QUERY
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key join tab_n6 s2 on s1.value=s2.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
Reducer 3 <- Map 5 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3 llap
      File Output Operator [FS_16]
        Merge Join Operator [MERGEJOIN_46] (rows=633/1166 width=95)
          Conds:RS_12._col0=RS_13._col0(Inner),Output:["_col0","_col1"]
        <-Map 5 [SIMPLE_EDGE] llap
          SHUFFLE [RS_13]
            PartitionCols:_col0
            Select Operator [SEL_8] (rows=242/242 width=4)
              Output:["_col0"]
              Filter Operator [FIL_24] (rows=242/242 width=4)
                predicate:key is not null
                TableScan [TS_6] (rows=242/242 width=4)
                  default@tab_n6,s3,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
        <-Reducer 2 [SIMPLE_EDGE] llap
          SHUFFLE [RS_12]
            PartitionCols:_col0
            Merge Join Operator [MERGEJOIN_45] (rows=382/480 width=95)
              Conds:RS_9._col1=RS_10._col0(Inner),Output:["_col0","_col1"]
            <-Map 1 [SIMPLE_EDGE] llap
              SHUFFLE [RS_9]
                PartitionCols:_col1
                Select Operator [SEL_2] (rows=242/242 width=95)
                  Output:["_col0","_col1"]
                  Filter Operator [FIL_22] (rows=242/242 width=95)
                    predicate:(key is not null and value is not null)
                    TableScan [TS_0] (rows=242/242 width=95)
                      default@tab_n6,s1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
            <-Map 4 [SIMPLE_EDGE] llap
              SHUFFLE [RS_10]
                PartitionCols:_col0
                Select Operator [SEL_5] (rows=242/242 width=91)
                  Output:["_col0"]
                  Filter Operator [FIL_23] (rows=242/242 width=91)
                    predicate:value is not null
                    TableScan [TS_3] (rows=242/242 width=91)
                      default@tab_n6,s2,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]

PREHOOK: query: select s1.key as key, s1.value as value from tab_n6 s1 join tab2_n3 s3 on s1.key=s3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@tab2_n3
PREHOOK: Input: default@tab2_n3@ds=2008-04-08
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: select s1.key as key, s1.value as value from tab_n6 s1 join tab2_n3 s3 on s1.key=s3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab2_n3
POSTHOOK: Input: default@tab2_n3@ds=2008-04-08
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
PREHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab_n6 s1 join tab2_n3 s3 on s1.key=s3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@tab2_n3
PREHOOK: Input: default@tab2_n3@ds=2008-04-08
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab_n6 s1 join tab2_n3 s3 on s1.key=s3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab2_n3
POSTHOOK: Input: default@tab2_n3@ds=2008-04-08
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
Plan optimized by CBO.

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 1 llap
      File Output Operator [FS_10]
        Merge Join Operator [MERGEJOIN_25] (rows=401/480 width=95)
          Conds:SEL_2._col0=SEL_5._col0(Inner),Output:["_col0","_col1"]
        <-Select Operator [SEL_5] (rows=242/242 width=4)
            Output:["_col0"]
            Filter Operator [FIL_14] (rows=242/242 width=4)
              predicate:key is not null
              TableScan [TS_3] (rows=242/242 width=4)
                default@tab2_n3,s3,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
        <-Select Operator [SEL_2] (rows=242/242 width=95)
            Output:["_col0","_col1"]
            Filter Operator [FIL_13] (rows=242/242 width=95)
              predicate:key is not null
              TableScan [TS_0] (rows=242/242 width=95)
                default@tab_n6,s1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]

PREHOOK: query: select s1.key as key, s1.value as value from tab_n6 s1 join tab2_n3 s3 on s1.key=s3.key join tab2_n3 s2 on s1.value=s2.value
PREHOOK: type: QUERY
PREHOOK: Input: default@tab2_n3
PREHOOK: Input: default@tab2_n3@ds=2008-04-08
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: select s1.key as key, s1.value as value from tab_n6 s1 join tab2_n3 s3 on s1.key=s3.key join tab2_n3 s2 on s1.value=s2.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab2_n3
POSTHOOK: Input: default@tab2_n3@ds=2008-04-08
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
PREHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab_n6 s1 join tab2_n3 s3 on s1.key=s3.key join tab2_n3 s2 on s1.value=s2.value
PREHOOK: type: QUERY
PREHOOK: Input: default@tab2_n3
PREHOOK: Input: default@tab2_n3@ds=2008-04-08
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab_n6 s1 join tab2_n3 s3 on s1.key=s3.key join tab2_n3 s2 on s1.value=s2.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab2_n3
POSTHOOK: Input: default@tab2_n3@ds=2008-04-08
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
Reducer 3 <- Map 5 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3 llap
      File Output Operator [FS_16]
        Merge Join Operator [MERGEJOIN_46] (rows=633/1166 width=95)
          Conds:RS_12._col0=RS_13._col0(Inner),Output:["_col0","_col1"]
        <-Map 5 [SIMPLE_EDGE] llap
          SHUFFLE [RS_13]
            PartitionCols:_col0
            Select Operator [SEL_8] (rows=242/242 width=4)
              Output:["_col0"]
              Filter Operator [FIL_24] (rows=242/242 width=4)
                predicate:key is not null
                TableScan [TS_6] (rows=242/242 width=4)
                  default@tab2_n3,s3,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
        <-Reducer 2 [SIMPLE_EDGE] llap
          SHUFFLE [RS_12]
            PartitionCols:_col0
            Merge Join Operator [MERGEJOIN_45] (rows=382/480 width=95)
              Conds:RS_9._col1=RS_10._col0(Inner),Output:["_col0","_col1"]
            <-Map 1 [SIMPLE_EDGE] llap
              SHUFFLE [RS_9]
                PartitionCols:_col1
                Select Operator [SEL_2] (rows=242/242 width=95)
                  Output:["_col0","_col1"]
                  Filter Operator [FIL_22] (rows=242/242 width=95)
                    predicate:(key is not null and value is not null)
                    TableScan [TS_0] (rows=242/242 width=95)
                      default@tab_n6,s1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
            <-Map 4 [SIMPLE_EDGE] llap
              SHUFFLE [RS_10]
                PartitionCols:_col0
                Select Operator [SEL_5] (rows=242/242 width=91)
                  Output:["_col0"]
                  Filter Operator [FIL_23] (rows=242/242 width=91)
                    predicate:value is not null
                    TableScan [TS_3] (rows=242/242 width=91)
                      default@tab2_n3,s2,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]

PREHOOK: query: select count(*) from (select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key
UNION  ALL
select s2.key as key, s2.value as value from tab_n6 s2
) a_n14 join tab_part_n7 b_n10 on (a_n14.key = b_n10.key)
PREHOOK: type: QUERY
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
PREHOOK: Input: default@tab_part_n7
PREHOOK: Input: default@tab_part_n7@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from (select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key
UNION  ALL
select s2.key as key, s2.value as value from tab_n6 s2
) a_n14 join tab_part_n7 b_n10 on (a_n14.key = b_n10.key)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
POSTHOOK: Input: default@tab_part_n7
POSTHOOK: Input: default@tab_part_n7@ds=2008-04-08
#### A masked pattern was here ####
PREHOOK: query: explain analyze
select count(*) from (select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key
UNION  ALL
select s2.key as key, s2.value as value from tab_n6 s2
) a_n14 join tab_part_n7 b_n10 on (a_n14.key = b_n10.key)
PREHOOK: type: QUERY
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
PREHOOK: Input: default@tab_part_n7
PREHOOK: Input: default@tab_part_n7@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: explain analyze
select count(*) from (select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key
UNION  ALL
select s2.key as key, s2.value as value from tab_n6 s2
) a_n14 join tab_part_n7 b_n10 on (a_n14.key = b_n10.key)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
POSTHOOK: Input: default@tab_part_n7
POSTHOOK: Input: default@tab_part_n7@ds=2008-04-08
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Union 2 (CONTAINS)
Map 6 <- Union 2 (CONTAINS)
Reducer 3 <- Map 7 (SIMPLE_EDGE), Union 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 4 llap
      File Output Operator [FS_25]
        Group By Operator [GBY_23] (rows=1/1 width=8)
          Output:["_col0"],aggregations:["count()"]
        <-Reducer 3 [CUSTOM_SIMPLE_EDGE] llap
          PARTITION_ONLY_SHUFFLE [RS_22]
            Merge Join Operator [MERGEJOIN_60] (rows=1061/1646 width=8)
              Conds:Union 2._col0=RS_19._col0(Inner)
            <-Map 7 [SIMPLE_EDGE] llap
              SHUFFLE [RS_19]
                PartitionCols:_col0
                Select Operator [SEL_17] (rows=500/500 width=4)
                  Output:["_col0"]
                  Filter Operator [FIL_35] (rows=500/500 width=4)
                    predicate:key is not null
                    TableScan [TS_15] (rows=500/500 width=4)
                      default@tab_part_n7,b_n10,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
            <-Union 2 [SIMPLE_EDGE]
              <-Map 1 [CONTAINS] llap
                Reduce Output Operator [RS_70]
                  PartitionCols:_col0
                  Merge Join Operator [MERGEJOIN_67] (rows=401/480 width=4)
                    Conds:SEL_65._col0=SEL_5._col0(Inner),Output:["_col0"]
                  <-Select Operator [SEL_5] (rows=242/242 width=4)
                      Output:["_col0"]
                      Filter Operator [FIL_33] (rows=242/242 width=4)
                        predicate:key is not null
                        TableScan [TS_3] (rows=242/242 width=4)
                          default@tab_n6,s3,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
                  <-Select Operator [SEL_65] (rows=242/242 width=4)
                      Output:["_col0"]
                      Filter Operator [FIL_63] (rows=242/242 width=4)
                        predicate:key is not null
                        TableScan [TS_61] (rows=242/242 width=4)
                          Output:["key"]
              <-Map 6 [CONTAINS] llap
                Reduce Output Operator [RS_75]
                  PartitionCols:_col0
                  Select Operator [SEL_73] (rows=242/242 width=4)
                    Output:["_col0"]
                    Filter Operator [FIL_72] (rows=242/242 width=4)
                      predicate:key is not null
                      TableScan [TS_71] (rows=242/242 width=4)
                        Output:["key"]

PREHOOK: query: select count(*) from (select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key join tab_n6 s2 on s1.value=s2.value
UNION  ALL
select s2.key as key, s2.value as value from tab_n6 s2
) a_n14 join tab_part_n7 b_n10 on (a_n14.key = b_n10.key)
PREHOOK: type: QUERY
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
PREHOOK: Input: default@tab_part_n7
PREHOOK: Input: default@tab_part_n7@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from (select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key join tab_n6 s2 on s1.value=s2.value
UNION  ALL
select s2.key as key, s2.value as value from tab_n6 s2
) a_n14 join tab_part_n7 b_n10 on (a_n14.key = b_n10.key)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
POSTHOOK: Input: default@tab_part_n7
POSTHOOK: Input: default@tab_part_n7@ds=2008-04-08
#### A masked pattern was here ####
PREHOOK: query: explain analyze
select count(*) from (select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key join tab_n6 s2 on s1.value=s2.value
UNION  ALL
select s2.key as key, s2.value as value from tab_n6 s2
) a_n14 join tab_part_n7 b_n10 on (a_n14.key = b_n10.key)
PREHOOK: type: QUERY
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
PREHOOK: Input: default@tab_part_n7
PREHOOK: Input: default@tab_part_n7@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: explain analyze
select count(*) from (select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key join tab_n6 s2 on s1.value=s2.value
UNION  ALL
select s2.key as key, s2.value as value from tab_n6 s2
) a_n14 join tab_part_n7 b_n10 on (a_n14.key = b_n10.key)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
POSTHOOK: Input: default@tab_part_n7
POSTHOOK: Input: default@tab_part_n7@ds=2008-04-08
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 9 <- Union 4 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 3 <- Map 8 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 5 <- Map 10 (SIMPLE_EDGE), Union 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 llap
      File Output Operator [FS_31]
        Group By Operator [GBY_29] (rows=1/1 width=8)
          Output:["_col0"],aggregations:["count()"]
        <-Reducer 5 [CUSTOM_SIMPLE_EDGE] llap
          PARTITION_ONLY_SHUFFLE [RS_28]
            Merge Join Operator [MERGEJOIN_81] (rows=1443/3768 width=8)
              Conds:Union 4._col0=RS_25._col0(Inner)
            <-Map 10 [SIMPLE_EDGE] llap
              SHUFFLE [RS_25]
                PartitionCols:_col0
                Select Operator [SEL_23] (rows=500/500 width=4)
                  Output:["_col0"]
                  Filter Operator [FIL_46] (rows=500/500 width=4)
                    predicate:key is not null
                    TableScan [TS_21] (rows=500/500 width=4)
                      default@tab_part_n7,b_n10,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
            <-Union 4 [SIMPLE_EDGE]
              <-Map 9 [CONTAINS] llap
                Reduce Output Operator [RS_89]
                  PartitionCols:_col0
                  Select Operator [SEL_87] (rows=242/242 width=4)
                    Output:["_col0"]
                    Filter Operator [FIL_86] (rows=242/242 width=4)
                      predicate:key is not null
                      TableScan [TS_85] (rows=242/242 width=4)
                        Output:["key"]
              <-Reducer 3 [CONTAINS] llap
                Reduce Output Operator [RS_84]
                  PartitionCols:_col0
                  Merge Join Operator [MERGEJOIN_82] (rows=633/1166 width=4)
                    Conds:RS_12._col0=RS_13._col0(Inner),Output:["_col0"]
                  <-Map 8 [SIMPLE_EDGE] llap
                    SHUFFLE [RS_13]
                      PartitionCols:_col0
                      Select Operator [SEL_8] (rows=242/242 width=4)
                        Output:["_col0"]
                        Filter Operator [FIL_44] (rows=242/242 width=4)
                          predicate:key is not null
                          TableScan [TS_6] (rows=242/242 width=4)
                            default@tab_n6,s3,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
                  <-Reducer 2 [SIMPLE_EDGE] llap
                    SHUFFLE [RS_12]
                      PartitionCols:_col0
                      Merge Join Operator [MERGEJOIN_79] (rows=382/480 width=4)
                        Conds:RS_9._col1=RS_10._col0(Inner),Output:["_col0"]
                      <-Map 1 [SIMPLE_EDGE] llap
                        SHUFFLE [RS_9]
                          PartitionCols:_col1
                          Select Operator [SEL_2] (rows=242/242 width=95)
                            Output:["_col0","_col1"]
                            Filter Operator [FIL_42] (rows=242/242 width=95)
                              predicate:(key is not null and value is not null)
                              TableScan [TS_0] (rows=242/242 width=95)
                                default@tab_n6,s1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                      <-Map 7 [SIMPLE_EDGE] llap
                        SHUFFLE [RS_10]
                          PartitionCols:_col0
                          Select Operator [SEL_5] (rows=242/242 width=91)
                            Output:["_col0"]
                            Filter Operator [FIL_43] (rows=242/242 width=91)
                              predicate:value is not null
                              TableScan [TS_3] (rows=242/242 width=91)
                                default@tab_n6,s2,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]

PREHOOK: query: CREATE TABLE a_n14(key STRING, value STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@a_n14
POSTHOOK: query: CREATE TABLE a_n14(key STRING, value STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@a_n14
PREHOOK: query: CREATE TABLE b_n10(key STRING, value STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@b_n10
POSTHOOK: query: CREATE TABLE b_n10(key STRING, value STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@b_n10
PREHOOK: query: CREATE TABLE c_n3(key STRING, value STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@c_n3
POSTHOOK: query: CREATE TABLE c_n3(key STRING, value STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@c_n3
PREHOOK: query: from
(
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union all select * from src)z ON (x.value = z.value)
union all
SELECT x.key, y.value
FROM src x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union all select key, value from src union all select key, value from src)z ON (x.value = z.value)
union all
SELECT x.key, y.value
FROM src1 x JOIN src1 y ON (x.key = y.key) 
JOIN (select key, value from src1 union all select key, value from src union all select key, value from src union all select key, value from src)z ON (x.value = z.value)
) tmp
INSERT OVERWRITE TABLE a_n14 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE b_n10 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE c_n3 SELECT tmp.key, tmp.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
PREHOOK: Output: default@a_n14
PREHOOK: Output: default@b_n10
PREHOOK: Output: default@c_n3
POSTHOOK: query: from
(
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union all select * from src)z ON (x.value = z.value)
union all
SELECT x.key, y.value
FROM src x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union all select key, value from src union all select key, value from src)z ON (x.value = z.value)
union all
SELECT x.key, y.value
FROM src1 x JOIN src1 y ON (x.key = y.key) 
JOIN (select key, value from src1 union all select key, value from src union all select key, value from src union all select key, value from src)z ON (x.value = z.value)
) tmp
INSERT OVERWRITE TABLE a_n14 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE b_n10 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE c_n3 SELECT tmp.key, tmp.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
POSTHOOK: Output: default@a_n14
POSTHOOK: Output: default@b_n10
POSTHOOK: Output: default@c_n3
PREHOOK: query: explain analyze
from
(
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union all select * from src)z ON (x.value = z.value)
union all
SELECT x.key, y.value
FROM src x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union all select key, value from src union all select key, value from src)z ON (x.value = z.value)
union all
SELECT x.key, y.value
FROM src1 x JOIN src1 y ON (x.key = y.key) 
JOIN (select key, value from src1 union all select key, value from src union all select key, value from src union all select key, value from src)z ON (x.value = z.value)
) tmp
INSERT OVERWRITE TABLE a_n14 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE b_n10 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE c_n3 SELECT tmp.key, tmp.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
PREHOOK: Output: default@a_n14
PREHOOK: Output: default@b_n10
PREHOOK: Output: default@c_n3
POSTHOOK: query: explain analyze
from
(
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union all select * from src)z ON (x.value = z.value)
union all
SELECT x.key, y.value
FROM src x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union all select key, value from src union all select key, value from src)z ON (x.value = z.value)
union all
SELECT x.key, y.value
FROM src1 x JOIN src1 y ON (x.key = y.key) 
JOIN (select key, value from src1 union all select key, value from src union all select key, value from src union all select key, value from src)z ON (x.value = z.value)
) tmp
INSERT OVERWRITE TABLE a_n14 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE b_n10 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE c_n3 SELECT tmp.key, tmp.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
POSTHOOK: Output: default@a_n14
POSTHOOK: Output: default@b_n10
POSTHOOK: Output: default@c_n3
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Union 2 (CONTAINS)
Map 16 <- Union 17 (CONTAINS)
Map 18 <- Union 17 (CONTAINS)
Map 19 <- Union 17 (CONTAINS)
Map 21 <- Union 22 (CONTAINS)
Map 23 <- Union 22 (CONTAINS)
Map 24 <- Union 22 (CONTAINS)
Map 25 <- Union 22 (CONTAINS)
Map 8 <- Union 2 (CONTAINS)
Reducer 10 <- Map 13 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 11 <- Map 20 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Union 17 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 26 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE), Union 22 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 3 <- Reducer 10 (SIMPLE_EDGE), Union 2 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 5 <- Union 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Union 4 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Union 4 (CUSTOM_SIMPLE_EDGE)

Stage-5
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.a_n14"}
        Stage-4
          Dependency Collection{}
            Stage-3
              Reducer 5 llap
              File Output Operator [FS_84]
                Group By Operator [GBY_82] (rows=1/1 width=880)
                  Output:["_col0","_col1"],aggregations:["compute_stats(VALUE._col0, 'hll')","compute_stats(VALUE._col2, 'hll')"]
                <-Union 4 [CUSTOM_SIMPLE_EDGE]
                  <-Reducer 12 [CONTAINS] llap
                    File Output Operator [FS_234]
                      table:{"name:":"default.a_n14"}
                      Select Operator [SEL_232] (rows=2640/5421 width=178)
                        Output:["_col0","_col1"]
                        Merge Join Operator [MERGEJOIN_231] (rows=2640/5421 width=178)
                          Conds:Union 17._col0=RS_44._col1(Inner),Output:["_col1","_col4"]
                        <-Reducer 11 [SIMPLE_EDGE] llap
                          SHUFFLE [RS_44]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_204] (rows=791/1028 width=269)
                              Conds:RS_39._col0=RS_40._col0(Inner),Output:["_col0","_col1","_col3"]
                            <-Map 9 [SIMPLE_EDGE] llap
                              SHUFFLE [RS_39]
                                PartitionCols:_col0
                                Select Operator [SEL_35] (rows=500/500 width=178)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_129] (rows=500/500 width=178)
                                    predicate:(key is not null and value is not null)
                                    TableScan [TS_8] (rows=500/500 width=178)
                                      default@src,y,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                            <-Map 20 [SIMPLE_EDGE] llap
                              SHUFFLE [RS_40]
                                PartitionCols:_col0
                                Select Operator [SEL_38] (rows=500/500 width=178)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_130] (rows=500/500 width=178)
                                    predicate:key is not null
                                    TableScan [TS_36] (rows=500/500 width=178)
                                      default@src,y,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                        <-Union 17 [SIMPLE_EDGE]
                          <-Map 16 [CONTAINS] llap
                            Reduce Output Operator [RS_259]
                              PartitionCols:_col0
                              Select Operator [SEL_257] (rows=25/25 width=89)
                                Output:["_col0"]
                                Filter Operator [FIL_256] (rows=25/25 width=89)
                                  predicate:value is not null
                                  TableScan [TS_255] (rows=25/25 width=89)
                                    Output:["value"]
                          <-Map 18 [CONTAINS] llap
                            Reduce Output Operator [RS_264]
                              PartitionCols:_col0
                              Select Operator [SEL_262] (rows=500/500 width=91)
                                Output:["_col0"]
                                Filter Operator [FIL_261] (rows=500/500 width=91)
                                  predicate:value is not null
                                  TableScan [TS_260] (rows=500/500 width=91)
                                    Output:["value"]
                          <-Map 19 [CONTAINS] llap
                            Reduce Output Operator [RS_269]
                              PartitionCols:_col0
                              Select Operator [SEL_267] (rows=500/500 width=91)
                                Output:["_col0"]
                                Filter Operator [FIL_266] (rows=500/500 width=91)
                                  predicate:value is not null
                                  TableScan [TS_265] (rows=500/500 width=91)
                                    Output:["value"]
                    Reduce Output Operator [RS_240]
                      Select Operator [SEL_235] (rows=2899/5421 width=178)
                        Output:["key","value"]
                         Please refer to the previous Select Operator [SEL_232]
                    File Output Operator [FS_236]
                      table:{"name:":"default.b_n10"}
                       Please refer to the previous Select Operator [SEL_232]
                    Reduce Output Operator [RS_241]
                      Select Operator [SEL_237] (rows=2899/5421 width=178)
                        Output:["key","value"]
                         Please refer to the previous Select Operator [SEL_232]
                    File Output Operator [FS_238]
                      table:{"name:":"default.c_n3"}
                       Please refer to the previous Select Operator [SEL_232]
                    Reduce Output Operator [RS_242]
                      Select Operator [SEL_239] (rows=2899/5421 width=178)
                        Output:["key","value"]
                         Please refer to the previous Select Operator [SEL_232]
                  <-Reducer 15 [CONTAINS] llap
                    File Output Operator [FS_246]
                      table:{"name:":"default.a_n14"}
                      Select Operator [SEL_244] (rows=193/820 width=175)
                        Output:["_col0","_col1"]
                        Merge Join Operator [MERGEJOIN_243] (rows=193/820 width=175)
                          Conds:Union 22._col0=RS_73._col1(Inner),Output:["_col1","_col4"]
                        <-Reducer 14 [SIMPLE_EDGE] llap
                          SHUFFLE [RS_73]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_205] (rows=39/115 width=264)
                              Conds:RS_68._col0=RS_69._col0(Inner),Output:["_col0","_col1","_col3"]
                            <-Map 13 [SIMPLE_EDGE] llap
                              SHUFFLE [RS_68]
                                PartitionCols:_col0
                                Select Operator [SEL_13] (rows=25/25 width=175)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_125] (rows=25/25 width=175)
                                    predicate:(key is not null and value is not null)
                                    TableScan [TS_11] (rows=25/25 width=175)
                                      default@src1,x,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                            <-Map 26 [SIMPLE_EDGE] llap
                              SHUFFLE [RS_69]
                                PartitionCols:_col0
                                Select Operator [SEL_67] (rows=25/25 width=175)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_136] (rows=25/25 width=175)
                                    predicate:key is not null
                                    TableScan [TS_65] (rows=25/25 width=175)
                                      default@src1,y,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                        <-Union 22 [SIMPLE_EDGE]
                          <-Map 21 [CONTAINS] llap
                            Reduce Output Operator [RS_274]
                              PartitionCols:_col0
                              Select Operator [SEL_272] (rows=25/25 width=89)
                                Output:["_col0"]
                                Filter Operator [FIL_271] (rows=25/25 width=89)
                                  predicate:value is not null
                                  TableScan [TS_270] (rows=25/25 width=89)
                                    Output:["value"]
                          <-Map 23 [CONTAINS] llap
                            Reduce Output Operator [RS_279]
                              PartitionCols:_col0
                              Select Operator [SEL_277] (rows=500/500 width=91)
                                Output:["_col0"]
                                Filter Operator [FIL_276] (rows=500/500 width=91)
                                  predicate:value is not null
                                  TableScan [TS_275] (rows=500/500 width=91)
                                    Output:["value"]
                          <-Map 24 [CONTAINS] llap
                            Reduce Output Operator [RS_284]
                              PartitionCols:_col0
                              Select Operator [SEL_282] (rows=500/500 width=91)
                                Output:["_col0"]
                                Filter Operator [FIL_281] (rows=500/500 width=91)
                                  predicate:value is not null
                                  TableScan [TS_280] (rows=500/500 width=91)
                                    Output:["value"]
                          <-Map 25 [CONTAINS] llap
                            Reduce Output Operator [RS_289]
                              PartitionCols:_col0
                              Select Operator [SEL_287] (rows=500/500 width=91)
                                Output:["_col0"]
                                Filter Operator [FIL_286] (rows=500/500 width=91)
                                  predicate:value is not null
                                  TableScan [TS_285] (rows=500/500 width=91)
                                    Output:["value"]
                    Reduce Output Operator [RS_252]
                      Select Operator [SEL_247] (rows=2899/820 width=178)
                        Output:["key","value"]
                         Please refer to the previous Select Operator [SEL_244]
                    File Output Operator [FS_248]
                      table:{"name:":"default.b_n10"}
                       Please refer to the previous Select Operator [SEL_244]
                    Reduce Output Operator [RS_253]
                      Select Operator [SEL_249] (rows=2899/820 width=178)
                        Output:["key","value"]
                         Please refer to the previous Select Operator [SEL_244]
                    File Output Operator [FS_250]
                      table:{"name:":"default.c_n3"}
                       Please refer to the previous Select Operator [SEL_244]
                    Reduce Output Operator [RS_254]
                      Select Operator [SEL_251] (rows=2899/820 width=178)
                        Output:["key","value"]
                         Please refer to the previous Select Operator [SEL_244]
                  <-Reducer 3 [CONTAINS] llap
                    File Output Operator [FS_217]
                      table:{"name:":"default.a_n14"}
                      Select Operator [SEL_215] (rows=66/170 width=177)
                        Output:["_col0","_col1"]
                        Merge Join Operator [MERGEJOIN_214] (rows=66/170 width=177)
                          Conds:Union 2._col0=RS_19._col3(Inner),Output:["_col2","_col3"]
                        <-Reducer 10 [SIMPLE_EDGE] llap
                          SHUFFLE [RS_19]
                            PartitionCols:_col3
                            Merge Join Operator [MERGEJOIN_203] (rows=39/37 width=266)
                              Conds:RS_14._col0=RS_15._col0(Inner),Output:["_col1","_col2","_col3"]
                            <-Map 13 [SIMPLE_EDGE] llap
                              SHUFFLE [RS_15]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_13]
                            <-Map 9 [SIMPLE_EDGE] llap
                              SHUFFLE [RS_14]
                                PartitionCols:_col0
                                Select Operator [SEL_10] (rows=500/500 width=178)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_124] (rows=500/500 width=178)
                                    predicate:key is not null
                                     Please refer to the previous TableScan [TS_8]
                        <-Union 2 [SIMPLE_EDGE]
                          <-Map 1 [CONTAINS] llap
                            Reduce Output Operator [RS_213]
                              PartitionCols:_col0
                              Select Operator [SEL_211] (rows=25/25 width=89)
                                Output:["_col0"]
                                Filter Operator [FIL_210] (rows=25/25 width=89)
                                  predicate:value is not null
                                  TableScan [TS_209] (rows=25/25 width=89)
                                    Output:["value"]
                          <-Map 8 [CONTAINS] llap
                            Reduce Output Operator [RS_230]
                              PartitionCols:_col0
                              Select Operator [SEL_228] (rows=500/500 width=91)
                                Output:["_col0"]
                                Filter Operator [FIL_227] (rows=500/500 width=91)
                                  predicate:value is not null
                                  TableScan [TS_226] (rows=500/500 width=91)
                                    Output:["value"]
                    Reduce Output Operator [RS_223]
                      Select Operator [SEL_218] (rows=2899/170 width=178)
                        Output:["key","value"]
                         Please refer to the previous Select Operator [SEL_215]
                    File Output Operator [FS_219]
                      table:{"name:":"default.b_n10"}
                       Please refer to the previous Select Operator [SEL_215]
                    Reduce Output Operator [RS_224]
                      Select Operator [SEL_220] (rows=2899/170 width=178)
                        Output:["key","value"]
                         Please refer to the previous Select Operator [SEL_215]
                    File Output Operator [FS_221]
                      table:{"name:":"default.c_n3"}
                       Please refer to the previous Select Operator [SEL_215]
                    Reduce Output Operator [RS_225]
                      Select Operator [SEL_222] (rows=2899/170 width=178)
                        Output:["key","value"]
                         Please refer to the previous Select Operator [SEL_215]
              Reducer 6 llap
              File Output Operator [FS_92]
                Group By Operator [GBY_90] (rows=1/1 width=880)
                  Output:["_col0","_col1"],aggregations:["compute_stats(VALUE._col0, 'hll')","compute_stats(VALUE._col2, 'hll')"]
                <- Please refer to the previous Union 4 [CUSTOM_SIMPLE_EDGE]
              Reducer 7 llap
              File Output Operator [FS_100]
                Group By Operator [GBY_98] (rows=1/1 width=880)
                  Output:["_col0","_col1"],aggregations:["compute_stats(VALUE._col0, 'hll')","compute_stats(VALUE._col2, 'hll')"]
                <- Please refer to the previous Union 4 [CUSTOM_SIMPLE_EDGE]
Stage-6
  Stats Work{}
    Stage-1
      Move Operator
        table:{"name:":"default.b_n10"}
         Please refer to the previous Stage-4
Stage-7
  Stats Work{}
    Stage-2
      Move Operator
        table:{"name:":"default.c_n3"}
         Please refer to the previous Stage-4

PREHOOK: query: FROM
( 
SELECT x.key as key, y.value as value from src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value) 
union
SELECT x.key as key, y.value as value from src x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src)z ON (x.value = z.value)
union
SELECT x.key as key, y.value as value from src1 x JOIN src1 y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src union select key, value from src)z ON (x.value = z.value)
) tmp
INSERT OVERWRITE TABLE a_n14 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE b_n10 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE c_n3 SELECT tmp.key, tmp.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
PREHOOK: Output: default@a_n14
PREHOOK: Output: default@b_n10
PREHOOK: Output: default@c_n3
POSTHOOK: query: FROM
( 
SELECT x.key as key, y.value as value from src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value) 
union
SELECT x.key as key, y.value as value from src x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src)z ON (x.value = z.value)
union
SELECT x.key as key, y.value as value from src1 x JOIN src1 y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src union select key, value from src)z ON (x.value = z.value)
) tmp
INSERT OVERWRITE TABLE a_n14 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE b_n10 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE c_n3 SELECT tmp.key, tmp.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
POSTHOOK: Output: default@a_n14
POSTHOOK: Output: default@b_n10
POSTHOOK: Output: default@c_n3
PREHOOK: query: explain analyze
FROM
( 
SELECT x.key as key, y.value as value from src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value) 
union
SELECT x.key as key, y.value as value from src x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src)z ON (x.value = z.value)
union
SELECT x.key as key, y.value as value from src1 x JOIN src1 y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src union select key, value from src)z ON (x.value = z.value)
) tmp
INSERT OVERWRITE TABLE a_n14 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE b_n10 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE c_n3 SELECT tmp.key, tmp.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
PREHOOK: Output: default@a_n14
PREHOOK: Output: default@b_n10
PREHOOK: Output: default@c_n3
POSTHOOK: query: explain analyze
FROM
( 
SELECT x.key as key, y.value as value from src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value) 
union
SELECT x.key as key, y.value as value from src x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src)z ON (x.value = z.value)
union
SELECT x.key as key, y.value as value from src1 x JOIN src1 y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src union select key, value from src)z ON (x.value = z.value)
) tmp
INSERT OVERWRITE TABLE a_n14 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE b_n10 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE c_n3 SELECT tmp.key, tmp.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
POSTHOOK: Output: default@a_n14
POSTHOOK: Output: default@b_n10
POSTHOOK: Output: default@c_n3
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Union 2 (CONTAINS)
Map 12 <- Union 2 (CONTAINS)
Map 20 <- Union 21 (CONTAINS)
Map 25 <- Union 21 (CONTAINS)
Map 26 <- Union 23 (CONTAINS)
Map 28 <- Union 29 (CONTAINS)
Map 35 <- Union 29 (CONTAINS)
Map 36 <- Union 31 (CONTAINS)
Map 37 <- Union 33 (CONTAINS)
Reducer 10 <- Reducer 8 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Reducer 8 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 15 <- Map 13 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 38 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE), Reducer 34 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 22 <- Union 21 (SIMPLE_EDGE), Union 23 (CONTAINS)
Reducer 24 <- Union 23 (SIMPLE_EDGE)
Reducer 3 <- Union 2 (SIMPLE_EDGE)
Reducer 30 <- Union 29 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 32 <- Union 31 (SIMPLE_EDGE), Union 33 (CONTAINS)
Reducer 34 <- Union 33 (SIMPLE_EDGE)
Reducer 4 <- Reducer 14 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (CUSTOM_SIMPLE_EDGE)

Stage-5
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.a_n14"}
        Stage-4
          Dependency Collection{}
            Stage-3
              Reducer 10 llap
              File Output Operator [FS_132]
                Group By Operator [GBY_130] (rows=1/1 width=880)
                  Output:["_col0","_col1"],aggregations:["compute_stats(VALUE._col0, 'hll')","compute_stats(VALUE._col2, 'hll')"]
                <-Reducer 8 [CUSTOM_SIMPLE_EDGE] llap
                  PARTITION_ONLY_SHUFFLE [RS_129]
                    Select Operator [SEL_128] (rows=2899/319 width=178)
                      Output:["key","value"]
                      Group By Operator [GBY_115] (rows=2899/319 width=178)
                        Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                      <-Union 7 [SIMPLE_EDGE]
                        <-Reducer 19 [CONTAINS] llap
                          Reduce Output Operator [RS_273]
                            PartitionCols:_col0, _col1
                            Select Operator [SEL_271] (rows=193/304 width=175)
                              Output:["_col0","_col1"]
                              Merge Join Operator [MERGEJOIN_270] (rows=193/304 width=175)
                                Conds:RS_107._col0=RS_108._col1(Inner),Output:["_col1","_col4"]
                              <-Reducer 18 [SIMPLE_EDGE] llap
                                SHUFFLE [RS_108]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_245] (rows=39/115 width=264)
                                    Conds:RS_103._col0=RS_104._col0(Inner),Output:["_col0","_col1","_col3"]
                                  <-Map 17 [SIMPLE_EDGE] llap
                                    SHUFFLE [RS_103]
                                      PartitionCols:_col0
                                      Select Operator [SEL_17] (rows=25/25 width=175)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_165] (rows=25/25 width=175)
                                          predicate:(key is not null and value is not null)
                                          TableScan [TS_15] (rows=25/25 width=175)
                                            default@src1,x,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                  <-Map 38 [SIMPLE_EDGE] llap
                                    SHUFFLE [RS_104]
                                      PartitionCols:_col0
                                      Select Operator [SEL_102] (rows=25/25 width=175)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_176] (rows=25/25 width=175)
                                          predicate:key is not null
                                          TableScan [TS_100] (rows=25/25 width=175)
                                            default@src1,y,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                              <-Reducer 34 [SIMPLE_EDGE] llap
                                SHUFFLE [RS_107]
                                  PartitionCols:_col0
                                  Select Operator [SEL_96] (rows=1525/319 width=91)
                                    Output:["_col0"]
                                    Group By Operator [GBY_95] (rows=1525/319 width=178)
                                      Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                    <-Union 33 [SIMPLE_EDGE]
                                      <-Map 37 [CONTAINS] llap
                                        Reduce Output Operator [RS_320]
                                          PartitionCols:_col1, _col0
                                          Select Operator [SEL_318] (rows=500/500 width=178)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_317] (rows=500/500 width=178)
                                              predicate:value is not null
                                              TableScan [TS_316] (rows=500/500 width=178)
                                                Output:["key","value"]
                                      <-Reducer 32 [CONTAINS] llap
                                        Reduce Output Operator [RS_305]
                                          PartitionCols:_col1, _col0
                                          Select Operator [SEL_303] (rows=1025/319 width=178)
                                            Output:["_col0","_col1"]
                                            Group By Operator [GBY_302] (rows=1025/319 width=178)
                                              Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                            <-Union 31 [SIMPLE_EDGE]
                                              <-Map 36 [CONTAINS] llap
                                                Reduce Output Operator [RS_315]
                                                  PartitionCols:_col1, _col0
                                                  Select Operator [SEL_313] (rows=500/500 width=178)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_312] (rows=500/500 width=178)
                                                      predicate:value is not null
                                                      TableScan [TS_311] (rows=500/500 width=178)
                                                        Output:["key","value"]
                                              <-Reducer 30 [CONTAINS] llap
                                                Reduce Output Operator [RS_301]
                                                  PartitionCols:_col1, _col0
                                                  Select Operator [SEL_299] (rows=525/319 width=178)
                                                    Output:["_col0","_col1"]
                                                    Group By Operator [GBY_298] (rows=525/319 width=178)
                                                      Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                                    <-Union 29 [SIMPLE_EDGE]
                                                      <-Map 28 [CONTAINS] llap
                                                        Reduce Output Operator [RS_297]
                                                          PartitionCols:_col1, _col0
                                                          Select Operator [SEL_295] (rows=25/25 width=175)
                                                            Output:["_col0","_col1"]
                                                            Filter Operator [FIL_294] (rows=25/25 width=175)
                                                              predicate:value is not null
                                                              TableScan [TS_293] (rows=25/25 width=175)
                                                                Output:["key","value"]
                                                      <-Map 35 [CONTAINS] llap
                                                        Reduce Output Operator [RS_310]
                                                          PartitionCols:_col1, _col0
                                                          Select Operator [SEL_308] (rows=500/500 width=178)
                                                            Output:["_col0","_col1"]
                                                            Filter Operator [FIL_307] (rows=500/500 width=178)
                                                              predicate:value is not null
                                                              TableScan [TS_306] (rows=500/500 width=178)
                                                                Output:["key","value"]
                        <-Reducer 6 [CONTAINS] llap
                          Reduce Output Operator [RS_260]
                            PartitionCols:_col0, _col1
                            Group By Operator [GBY_258] (rows=2706/309 width=178)
                              Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                            <-Union 5 [SIMPLE_EDGE]
                              <-Reducer 16 [CONTAINS] llap
                                Reduce Output Operator [RS_269]
                                  PartitionCols:_col0, _col1
                                  Select Operator [SEL_267] (rows=2640/1056 width=178)
                                    Output:["_col0","_col1"]
                                    Merge Join Operator [MERGEJOIN_266] (rows=2640/1056 width=178)
                                      Conds:RS_57._col0=RS_58._col1(Inner),Output:["_col1","_col4"]
                                    <-Reducer 15 [SIMPLE_EDGE] llap
                                      SHUFFLE [RS_58]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_244] (rows=791/1028 width=269)
                                          Conds:RS_53._col0=RS_54._col0(Inner),Output:["_col0","_col1","_col3"]
                                        <-Map 13 [SIMPLE_EDGE] llap
                                          SHUFFLE [RS_53]
                                            PartitionCols:_col0
                                            Select Operator [SEL_49] (rows=500/500 width=178)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_169] (rows=500/500 width=178)
                                                predicate:(key is not null and value is not null)
                                                TableScan [TS_12] (rows=500/500 width=178)
                                                  default@src,y,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                        <-Map 27 [SIMPLE_EDGE] llap
                                          SHUFFLE [RS_54]
                                            PartitionCols:_col0
                                            Select Operator [SEL_52] (rows=500/500 width=178)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_170] (rows=500/500 width=178)
                                                predicate:key is not null
                                                TableScan [TS_50] (rows=500/500 width=178)
                                                  default@src,y,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                    <-Reducer 24 [SIMPLE_EDGE] llap
                                      SHUFFLE [RS_57]
                                        PartitionCols:_col0
                                        Select Operator [SEL_46] (rows=1025/319 width=91)
                                          Output:["_col0"]
                                          Group By Operator [GBY_45] (rows=1025/319 width=178)
                                            Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                          <-Union 23 [SIMPLE_EDGE]
                                            <-Map 26 [CONTAINS] llap
                                              Reduce Output Operator [RS_292]
                                                PartitionCols:_col1, _col0
                                                Select Operator [SEL_290] (rows=500/500 width=178)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_289] (rows=500/500 width=178)
                                                    predicate:value is not null
                                                    TableScan [TS_288] (rows=500/500 width=178)
                                                      Output:["key","value"]
                                            <-Reducer 22 [CONTAINS] llap
                                              Reduce Output Operator [RS_282]
                                                PartitionCols:_col1, _col0
                                                Select Operator [SEL_280] (rows=525/319 width=178)
                                                  Output:["_col0","_col1"]
                                                  Group By Operator [GBY_279] (rows=525/319 width=178)
                                                    Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                                  <-Union 21 [SIMPLE_EDGE]
                                                    <-Map 20 [CONTAINS] llap
                                                      Reduce Output Operator [RS_278]
                                                        PartitionCols:_col1, _col0
                                                        Select Operator [SEL_276] (rows=25/25 width=175)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_275] (rows=25/25 width=175)
                                                            predicate:value is not null
                                                            TableScan [TS_274] (rows=25/25 width=175)
                                                              Output:["key","value"]
                                                    <-Map 25 [CONTAINS] llap
                                                      Reduce Output Operator [RS_287]
                                                        PartitionCols:_col1, _col0
                                                        Select Operator [SEL_285] (rows=500/500 width=178)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_284] (rows=500/500 width=178)
                                                            predicate:value is not null
                                                            TableScan [TS_283] (rows=500/500 width=178)
                                                              Output:["key","value"]
                              <-Reducer 4 [CONTAINS] llap
                                Reduce Output Operator [RS_257]
                                  PartitionCols:_col0, _col1
                                  Select Operator [SEL_255] (rows=66/61 width=177)
                                    Output:["_col0","_col1"]
                                    Merge Join Operator [MERGEJOIN_254] (rows=66/61 width=177)
                                      Conds:RS_22._col0=RS_23._col3(Inner),Output:["_col2","_col3"]
                                    <-Reducer 14 [SIMPLE_EDGE] llap
                                      SHUFFLE [RS_23]
                                        PartitionCols:_col3
                                        Merge Join Operator [MERGEJOIN_243] (rows=39/37 width=266)
                                          Conds:RS_18._col0=RS_19._col0(Inner),Output:["_col1","_col2","_col3"]
                                        <-Map 13 [SIMPLE_EDGE] llap
                                          SHUFFLE [RS_18]
                                            PartitionCols:_col0
                                            Select Operator [SEL_14] (rows=500/500 width=178)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_164] (rows=500/500 width=178)
                                                predicate:key is not null
                                                 Please refer to the previous TableScan [TS_12]
                                        <-Map 17 [SIMPLE_EDGE] llap
                                          SHUFFLE [RS_19]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_17]
                                    <-Reducer 3 [SIMPLE_EDGE] llap
                                      SHUFFLE [RS_22]
                                        PartitionCols:_col0
                                        Select Operator [SEL_11] (rows=525/319 width=91)
                                          Output:["_col0"]
                                          Group By Operator [GBY_10] (rows=525/319 width=178)
                                            Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                          <-Union 2 [SIMPLE_EDGE]
                                            <-Map 1 [CONTAINS] llap
                                              Reduce Output Operator [RS_253]
                                                PartitionCols:_col1, _col0
                                                Select Operator [SEL_251] (rows=25/25 width=175)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_250] (rows=25/25 width=175)
                                                    predicate:value is not null
                                                    TableScan [TS_249] (rows=25/25 width=175)
                                                      Output:["key","value"]
                                            <-Map 12 [CONTAINS] llap
                                              Reduce Output Operator [RS_265]
                                                PartitionCols:_col1, _col0
                                                Select Operator [SEL_263] (rows=500/500 width=178)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_262] (rows=500/500 width=178)
                                                    predicate:value is not null
                                                    TableScan [TS_261] (rows=500/500 width=178)
                                                      Output:["key","value"]
              Reducer 11 llap
              File Output Operator [FS_140]
                Group By Operator [GBY_138] (rows=1/1 width=880)
                  Output:["_col0","_col1"],aggregations:["compute_stats(VALUE._col0, 'hll')","compute_stats(VALUE._col2, 'hll')"]
                <-Reducer 8 [CUSTOM_SIMPLE_EDGE] llap
                  PARTITION_ONLY_SHUFFLE [RS_137]
                    Select Operator [SEL_136] (rows=2899/319 width=178)
                      Output:["key","value"]
                       Please refer to the previous Group By Operator [GBY_115]
              Reducer 9 llap
              File Output Operator [FS_124]
                Group By Operator [GBY_122] (rows=1/1 width=880)
                  Output:["_col0","_col1"],aggregations:["compute_stats(VALUE._col0, 'hll')","compute_stats(VALUE._col2, 'hll')"]
                <-Reducer 8 [CUSTOM_SIMPLE_EDGE] llap
                  PARTITION_ONLY_SHUFFLE [RS_121]
                    Select Operator [SEL_120] (rows=2899/319 width=178)
                      Output:["key","value"]
                       Please refer to the previous Group By Operator [GBY_115]
Stage-6
  Stats Work{}
    Stage-1
      Move Operator
        table:{"name:":"default.b_n10"}
         Please refer to the previous Stage-4
Stage-7
  Stats Work{}
    Stage-2
      Move Operator
        table:{"name:":"default.c_n3"}
         Please refer to the previous Stage-4

PREHOOK: query: CREATE TABLE DEST1_n105(key STRING, value STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@DEST1_n105
POSTHOOK: query: CREATE TABLE DEST1_n105(key STRING, value STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@DEST1_n105
PREHOOK: query: CREATE TABLE DEST2_n29(key STRING, val1 STRING, val2 STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@DEST2_n29
POSTHOOK: query: CREATE TABLE DEST2_n29(key STRING, val1 STRING, val2 STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@DEST2_n29
PREHOOK: query: FROM (select 'tst1' as key, cast(count(1) as string) as value from src s1
                         UNION DISTINCT  
      select s2.key as key, s2.value as value from src s2) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key, unionsrc_n3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n105
PREHOOK: Output: default@dest2_n29
POSTHOOK: query: FROM (select 'tst1' as key, cast(count(1) as string) as value from src s1
                         UNION DISTINCT  
      select s2.key as key, s2.value as value from src s2) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key, unionsrc_n3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n105
POSTHOOK: Output: default@dest2_n29
PREHOOK: query: explain analyze 
FROM (select 'tst1' as key, cast(count(1) as string) as value from src s1
                         UNION DISTINCT  
      select s2.key as key, s2.value as value from src s2) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key, unionsrc_n3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n105
PREHOOK: Output: default@dest2_n29
POSTHOOK: query: explain analyze 
FROM (select 'tst1' as key, cast(count(1) as string) as value from src s1
                         UNION DISTINCT  
      select s2.key as key, s2.value as value from src s2) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key, unionsrc_n3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n105
POSTHOOK: Output: default@dest2_n29
Plan optimized by CBO.

Vertex dependency in root stage
Map 8 <- Union 3 (CONTAINS)
Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 4 <- Union 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)

Stage-4
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.dest1_n105"}
        Stage-3
          Dependency Collection{}
            Stage-2
              Reducer 6 llap
              File Output Operator [FS_24]
                Group By Operator [GBY_22] (rows=1/1 width=880)
                  Output:["_col0","_col1"],aggregations:["compute_stats(VALUE._col0, 'hll')","compute_stats(VALUE._col2, 'hll')"]
                <-Reducer 5 [CUSTOM_SIMPLE_EDGE] llap
                  File Output Operator [FS_18]
                    table:{"name:":"default.dest1_n105"}
                    Select Operator [SEL_16] (rows=316/310 width=272)
                      Output:["_col0","_col1"]
                      Group By Operator [GBY_15] (rows=316/310 width=96)
                        Output:["_col0","_col1"],aggregations:["count(DISTINCT KEY._col1:0._col0)"],keys:KEY._col0
                      <-Reducer 4 [SIMPLE_EDGE] llap
                        PARTITION_ONLY_SHUFFLE [RS_14]
                          PartitionCols:_col0
                          Group By Operator [GBY_11] (rows=501/310 width=272)
                            Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                          <-Union 3 [SIMPLE_EDGE]
                            <-Map 8 [CONTAINS] llap
                              Reduce Output Operator [RS_44]
                                PartitionCols:_col0, _col1
                                Select Operator [SEL_42] (rows=500/500 width=178)
                                  Output:["_col0","_col1"]
                                  TableScan [TS_41] (rows=500/500 width=178)
                                    Output:["key","value"]
                            <-Reducer 2 [CONTAINS] llap
                              Reduce Output Operator [RS_40]
                                PartitionCols:_col0, _col1
                                Select Operator [SEL_38] (rows=1/1 width=272)
                                  Output:["_col0","_col1"]
                                  Group By Operator [GBY_37] (rows=1/1 width=8)
                                    Output:["_col0"],aggregations:["count()"]
                                  <-Map 1 [CUSTOM_SIMPLE_EDGE] llap
                                    PARTITION_ONLY_SHUFFLE [RS_2]
                                      Select Operator [SEL_1] (rows=500/500 width=10)
                                        TableScan [TS_0] (rows=500/500 width=10)
                                          default@src,s1,Tbl:COMPLETE,Col:COMPLETE
                  PARTITION_ONLY_SHUFFLE [RS_21]
                    Select Operator [SEL_20] (rows=316/310 width=272)
                      Output:["key","value"]
                       Please refer to the previous Select Operator [SEL_16]
              Reducer 7 llap
              File Output Operator [FS_36]
                Group By Operator [GBY_34] (rows=1/1 width=1320)
                  Output:["_col0","_col1","_col2"],aggregations:["compute_stats(VALUE._col0, 'hll')","compute_stats(VALUE._col2, 'hll')","compute_stats(VALUE._col3, 'hll')"]
                <-Reducer 4 [CUSTOM_SIMPLE_EDGE] llap
                  PARTITION_ONLY_SHUFFLE [RS_33]
                    Select Operator [SEL_32] (rows=501/310 width=456)
                      Output:["key","val1","val2"]
                      Select Operator [SEL_28] (rows=501/310 width=456)
                        Output:["_col0","_col1","_col2"]
                        Group By Operator [GBY_27] (rows=501/310 width=280)
                          Output:["_col0","_col1","_col2"],aggregations:["count(DISTINCT substr(_col1, 5))"],keys:_col0, _col1
                           Please refer to the previous Group By Operator [GBY_11]
Stage-5
  Stats Work{}
    Stage-1
      Move Operator
        table:{"name:":"default.dest2_n29"}
         Please refer to the previous Stage-3

PREHOOK: query: FROM UNIQUEJOIN PRESERVE src a_n14 (a_n14.key), PRESERVE src1 b_n10 (b_n10.key), PRESERVE srcpart c_n3 (c_n3.key) SELECT a_n14.key, b_n10.key, c_n3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
PREHOOK: Input: default@srcpart
PREHOOK: Input: default@srcpart@ds=2008-04-08/hr=11
PREHOOK: Input: default@srcpart@ds=2008-04-08/hr=12
PREHOOK: Input: default@srcpart@ds=2008-04-09/hr=11
PREHOOK: Input: default@srcpart@ds=2008-04-09/hr=12
#### A masked pattern was here ####
POSTHOOK: query: FROM UNIQUEJOIN PRESERVE src a_n14 (a_n14.key), PRESERVE src1 b_n10 (b_n10.key), PRESERVE srcpart c_n3 (c_n3.key) SELECT a_n14.key, b_n10.key, c_n3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
POSTHOOK: Input: default@srcpart
POSTHOOK: Input: default@srcpart@ds=2008-04-08/hr=11
POSTHOOK: Input: default@srcpart@ds=2008-04-08/hr=12
POSTHOOK: Input: default@srcpart@ds=2008-04-09/hr=11
POSTHOOK: Input: default@srcpart@ds=2008-04-09/hr=12
#### A masked pattern was here ####
PREHOOK: query: explain analyze FROM UNIQUEJOIN PRESERVE src a_n14 (a_n14.key), PRESERVE src1 b_n10 (b_n10.key), PRESERVE srcpart c_n3 (c_n3.key) SELECT a_n14.key, b_n10.key, c_n3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
PREHOOK: Input: default@srcpart
PREHOOK: Input: default@srcpart@ds=2008-04-08/hr=11
PREHOOK: Input: default@srcpart@ds=2008-04-08/hr=12
PREHOOK: Input: default@srcpart@ds=2008-04-09/hr=11
PREHOOK: Input: default@srcpart@ds=2008-04-09/hr=12
#### A masked pattern was here ####
POSTHOOK: query: explain analyze FROM UNIQUEJOIN PRESERVE src a_n14 (a_n14.key), PRESERVE src1 b_n10 (b_n10.key), PRESERVE srcpart c_n3 (c_n3.key) SELECT a_n14.key, b_n10.key, c_n3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
POSTHOOK: Input: default@srcpart
POSTHOOK: Input: default@srcpart@ds=2008-04-08/hr=11
POSTHOOK: Input: default@srcpart@ds=2008-04-08/hr=12
POSTHOOK: Input: default@srcpart@ds=2008-04-09/hr=11
POSTHOOK: Input: default@srcpart@ds=2008-04-09/hr=12
#### A masked pattern was here ####
Plan not optimized by CBO due to missing feature [Unique_join].

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 2 llap
      File Output Operator [FS_8]
        Select Operator [SEL_7] (rows=250/4122 width=260)
          Output:["_col0","_col1","_col2"]
          Merge Join Operator [MERGEJOIN_9] (rows=250/4122 width=260)
            Conds:RS_3.key=RS_3.key(Unique),RS_3.key=RS_3.key(Unique),RS_3.key=RS_3.key(Unique),Output:["_col0","_col5","_col10"]
          <-Map 1 [SIMPLE_EDGE] llap
            SHUFFLE [RS_3]
              PartitionCols:key
              TableScan [TS_0] (rows=500/500 width=87)
                default@src,a_n14,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
          <-Map 3 [SIMPLE_EDGE] llap
            SHUFFLE [RS_4]
              PartitionCols:key
              TableScan [TS_1] (rows=25/25 width=86)
                default@src1,b_n10,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
          <-Map 4 [SIMPLE_EDGE] llap
            SHUFFLE [RS_5]
              PartitionCols:key
              TableScan [TS_2] (rows=2000/2000 width=87)
                default@srcpart,c_n3,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]

PREHOOK: query: FROM (
      select key, value from (
      select 'tst1' as key, cast(count(1) as string) as value, 'tst1' as value2 from src s1
                         UNION all 
      select s2.key as key, s2.value as value, 'tst1' as value2 from src s2) unionsub_n10
                         UNION all
      select key, value from src s0
                             ) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) 
GROUP BY unionsrc_n3.key, unionsrc_n3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n105
PREHOOK: Output: default@dest2_n29
POSTHOOK: query: FROM (
      select key, value from (
      select 'tst1' as key, cast(count(1) as string) as value, 'tst1' as value2 from src s1
                         UNION all 
      select s2.key as key, s2.value as value, 'tst1' as value2 from src s2) unionsub_n10
                         UNION all
      select key, value from src s0
                             ) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) 
GROUP BY unionsrc_n3.key, unionsrc_n3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n105
POSTHOOK: Output: default@dest2_n29
PREHOOK: query: explain analyze
FROM (
      select key, value from (
      select 'tst1' as key, cast(count(1) as string) as value, 'tst1' as value2 from src s1
                         UNION all 
      select s2.key as key, s2.value as value, 'tst1' as value2 from src s2) unionsub_n10
                         UNION all
      select key, value from src s0
                             ) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) 
GROUP BY unionsrc_n3.key, unionsrc_n3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n105
PREHOOK: Output: default@dest2_n29
POSTHOOK: query: explain analyze
FROM (
      select key, value from (
      select 'tst1' as key, cast(count(1) as string) as value, 'tst1' as value2 from src s1
                         UNION all 
      select s2.key as key, s2.value as value, 'tst1' as value2 from src s2) unionsub_n10
                         UNION all
      select key, value from src s0
                             ) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) 
GROUP BY unionsrc_n3.key, unionsrc_n3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n105
POSTHOOK: Output: default@dest2_n29
Plan optimized by CBO.

Vertex dependency in root stage
Map 8 <- Union 3 (CONTAINS)
Map 9 <- Union 3 (CONTAINS)
Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 4 <- Union 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Union 3 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)

Stage-4
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.dest1_n105"}
        Stage-3
          Dependency Collection{}
            Stage-2
              Reducer 5 llap
              File Output Operator [FS_22]
                Group By Operator [GBY_20] (rows=1/1 width=880)
                  Output:["_col0","_col1"],aggregations:["compute_stats(VALUE._col0, 'hll')","compute_stats(VALUE._col2, 'hll')"]
                <-Reducer 4 [CUSTOM_SIMPLE_EDGE] llap
                  File Output Operator [FS_16]
                    table:{"name:":"default.dest1_n105"}
                    Select Operator [SEL_14] (rows=316/310 width=272)
                      Output:["_col0","_col1"]
                      Group By Operator [GBY_13] (rows=316/310 width=96)
                        Output:["_col0","_col1"],aggregations:["count(DISTINCT KEY._col1:0._col0)"],keys:KEY._col0
                      <-Union 3 [SIMPLE_EDGE]
                        <-Map 8 [CONTAINS] llap
                          Reduce Output Operator [RS_43]
                            PartitionCols:_col0
                            Select Operator [SEL_41] (rows=500/500 width=178)
                              Output:["_col0","_col1"]
                              TableScan [TS_40] (rows=500/500 width=178)
                                Output:["key","value"]
                          Reduce Output Operator [RS_44]
                            PartitionCols:_col0, _col1
                             Please refer to the previous Select Operator [SEL_41]
                        <-Map 9 [CONTAINS] llap
                          Reduce Output Operator [RS_48]
                            PartitionCols:_col0
                            Select Operator [SEL_46] (rows=500/500 width=178)
                              Output:["_col0","_col1"]
                              TableScan [TS_45] (rows=500/500 width=178)
                                Output:["key","value"]
                          Reduce Output Operator [RS_49]
                            PartitionCols:_col0, _col1
                             Please refer to the previous Select Operator [SEL_46]
                        <-Reducer 2 [CONTAINS] llap
                          Reduce Output Operator [RS_38]
                            PartitionCols:_col0
                            Select Operator [SEL_36] (rows=1/1 width=272)
                              Output:["_col0","_col1"]
                              Group By Operator [GBY_35] (rows=1/1 width=8)
                                Output:["_col0"],aggregations:["count()"]
                              <-Map 1 [CUSTOM_SIMPLE_EDGE] llap
                                PARTITION_ONLY_SHUFFLE [RS_2]
                                  Select Operator [SEL_1] (rows=500/500 width=10)
                                    TableScan [TS_0] (rows=500/500 width=10)
                                      default@src,s1,Tbl:COMPLETE,Col:COMPLETE
                          Reduce Output Operator [RS_39]
                            PartitionCols:_col0, _col1
                             Please refer to the previous Select Operator [SEL_36]
                  PARTITION_ONLY_SHUFFLE [RS_19]
                    Select Operator [SEL_18] (rows=316/310 width=272)
                      Output:["key","value"]
                       Please refer to the previous Select Operator [SEL_14]
              Reducer 7 llap
              File Output Operator [FS_34]
                Group By Operator [GBY_32] (rows=1/1 width=1320)
                  Output:["_col0","_col1","_col2"],aggregations:["compute_stats(VALUE._col0, 'hll')","compute_stats(VALUE._col2, 'hll')","compute_stats(VALUE._col3, 'hll')"]
                <-Reducer 6 [CUSTOM_SIMPLE_EDGE] llap
                  File Output Operator [FS_28]
                    table:{"name:":"default.dest2_n29"}
                    Select Operator [SEL_26] (rows=1001/310 width=456)
                      Output:["_col0","_col1","_col2"]
                      Group By Operator [GBY_25] (rows=1001/310 width=280)
                        Output:["_col0","_col1","_col2"],aggregations:["count(DISTINCT KEY._col2:0._col0)"],keys:KEY._col0, KEY._col1
                      <- Please refer to the previous Union 3 [SIMPLE_EDGE]
                  PARTITION_ONLY_SHUFFLE [RS_31]
                    Select Operator [SEL_30] (rows=1001/310 width=456)
                      Output:["key","val1","val2"]
                       Please refer to the previous Select Operator [SEL_26]
Stage-5
  Stats Work{}
    Stage-1
      Move Operator
        table:{"name:":"default.dest2_n29"}
         Please refer to the previous Stage-3

PREHOOK: query: FROM (
      select 'tst1' as key, cast(count(1) as string) as value, 'tst1' as value2 from src s1
                         UNION all 
      select s2.key as key, s2.value as value, 'tst1' as value2 from src s2
                             ) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) 
GROUP BY unionsrc_n3.key, unionsrc_n3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n105
PREHOOK: Output: default@dest2_n29
POSTHOOK: query: FROM (
      select 'tst1' as key, cast(count(1) as string) as value, 'tst1' as value2 from src s1
                         UNION all 
      select s2.key as key, s2.value as value, 'tst1' as value2 from src s2
                             ) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) 
GROUP BY unionsrc_n3.key, unionsrc_n3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n105
POSTHOOK: Output: default@dest2_n29
PREHOOK: query: explain analyze
FROM (
      select 'tst1' as key, cast(count(1) as string) as value, 'tst1' as value2 from src s1
                         UNION all 
      select s2.key as key, s2.value as value, 'tst1' as value2 from src s2
                             ) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) 
GROUP BY unionsrc_n3.key, unionsrc_n3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n105
PREHOOK: Output: default@dest2_n29
POSTHOOK: query: explain analyze
FROM (
      select 'tst1' as key, cast(count(1) as string) as value, 'tst1' as value2 from src s1
                         UNION all 
      select s2.key as key, s2.value as value, 'tst1' as value2 from src s2
                             ) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) 
GROUP BY unionsrc_n3.key, unionsrc_n3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n105
POSTHOOK: Output: default@dest2_n29
Plan optimized by CBO.

Vertex dependency in root stage
Map 8 <- Union 3 (CONTAINS)
Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 4 <- Union 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Union 3 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)

Stage-4
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.dest1_n105"}
        Stage-3
          Dependency Collection{}
            Stage-2
              Reducer 5 llap
              File Output Operator [FS_20]
                Group By Operator [GBY_18] (rows=1/1 width=880)
                  Output:["_col0","_col1"],aggregations:["compute_stats(VALUE._col0, 'hll')","compute_stats(VALUE._col2, 'hll')"]
                <-Reducer 4 [CUSTOM_SIMPLE_EDGE] llap
                  File Output Operator [FS_14]
                    table:{"name:":"default.dest1_n105"}
                    Select Operator [SEL_12] (rows=316/310 width=272)
                      Output:["_col0","_col1"]
                      Group By Operator [GBY_11] (rows=316/310 width=96)
                        Output:["_col0","_col1"],aggregations:["count(DISTINCT KEY._col1:0._col0)"],keys:KEY._col0
                      <-Union 3 [SIMPLE_EDGE]
                        <-Map 8 [CONTAINS] llap
                          Reduce Output Operator [RS_41]
                            PartitionCols:_col0
                            Select Operator [SEL_39] (rows=500/500 width=178)
                              Output:["_col0","_col1"]
                              TableScan [TS_38] (rows=500/500 width=178)
                                Output:["key","value"]
                          Reduce Output Operator [RS_42]
                            PartitionCols:_col0, _col1
                             Please refer to the previous Select Operator [SEL_39]
                        <-Reducer 2 [CONTAINS] llap
                          Reduce Output Operator [RS_36]
                            PartitionCols:_col0
                            Select Operator [SEL_34] (rows=1/1 width=272)
                              Output:["_col0","_col1"]
                              Group By Operator [GBY_33] (rows=1/1 width=8)
                                Output:["_col0"],aggregations:["count()"]
                              <-Map 1 [CUSTOM_SIMPLE_EDGE] llap
                                PARTITION_ONLY_SHUFFLE [RS_2]
                                  Select Operator [SEL_1] (rows=500/500 width=10)
                                    TableScan [TS_0] (rows=500/500 width=10)
                                      default@src,s1,Tbl:COMPLETE,Col:COMPLETE
                          Reduce Output Operator [RS_37]
                            PartitionCols:_col0, _col1
                             Please refer to the previous Select Operator [SEL_34]
                  PARTITION_ONLY_SHUFFLE [RS_17]
                    Select Operator [SEL_16] (rows=316/310 width=272)
                      Output:["key","value"]
                       Please refer to the previous Select Operator [SEL_12]
              Reducer 7 llap
              File Output Operator [FS_32]
                Group By Operator [GBY_30] (rows=1/1 width=1320)
                  Output:["_col0","_col1","_col2"],aggregations:["compute_stats(VALUE._col0, 'hll')","compute_stats(VALUE._col2, 'hll')","compute_stats(VALUE._col3, 'hll')"]
                <-Reducer 6 [CUSTOM_SIMPLE_EDGE] llap
                  File Output Operator [FS_26]
                    table:{"name:":"default.dest2_n29"}
                    Select Operator [SEL_24] (rows=501/310 width=456)
                      Output:["_col0","_col1","_col2"]
                      Group By Operator [GBY_23] (rows=501/310 width=280)
                        Output:["_col0","_col1","_col2"],aggregations:["count(DISTINCT KEY._col2:0._col0)"],keys:KEY._col0, KEY._col1
                      <- Please refer to the previous Union 3 [SIMPLE_EDGE]
                  PARTITION_ONLY_SHUFFLE [RS_29]
                    Select Operator [SEL_28] (rows=501/310 width=456)
                      Output:["key","val1","val2"]
                       Please refer to the previous Select Operator [SEL_24]
Stage-5
  Stats Work{}
    Stage-1
      Move Operator
        table:{"name:":"default.dest2_n29"}
         Please refer to the previous Stage-3

