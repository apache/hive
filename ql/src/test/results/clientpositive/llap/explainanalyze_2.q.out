PREHOOK: query: SELECT x.key, z.value, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
union
SELECT x.key, z.value, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT x.key, z.value, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
union
SELECT x.key, z.value, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
PREHOOK: query: explain analyze
SELECT x.key, z.value, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
union
SELECT x.key, z.value, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: explain analyze
SELECT x.key, z.value, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
union
SELECT x.key, z.value, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 11 <- Union 9 (CONTAINS)
Map 13 <- Union 14 (CONTAINS)
Map 16 <- Union 14 (CONTAINS)
Map 8 <- Union 9 (CONTAINS)
Reducer 10 <- Union 9 (SIMPLE_EDGE)
Reducer 15 <- Union 14 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 12 (SIMPLE_EDGE)
Reducer 3 <- Reducer 10 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 5 <- Union 4 (SIMPLE_EDGE)
Reducer 6 <- Map 1 (SIMPLE_EDGE), Map 12 (SIMPLE_EDGE)
Reducer 7 <- Reducer 15 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE), Union 4 (CONTAINS)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5 llap
      File Output Operator [FS_56]
        Group By Operator [GBY_54] (rows=132/15 width=268)
          Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
        <-Union 4 [SIMPLE_EDGE]
          <-Reducer 3 [CONTAINS] llap
            Reduce Output Operator [RS_126]
              PartitionCols:_col0, _col1, _col2
              Select Operator [SEL_124] (rows=66/61 width=268)
                Output:["_col0","_col1","_col2"]
                Merge Join Operator [MERGEJOIN_123] (rows=66/61 width=268)
                  Conds:RS_21._col3=RS_22._col0(Inner),Output:["_col1","_col2","_col4"]
                <-Reducer 10 [SIMPLE_EDGE] llap
                  SHUFFLE [RS_22]
                    PartitionCols:_col0
                    Select Operator [SEL_17] (rows=525/319 width=91)
                      Output:["_col0"]
                      Group By Operator [GBY_16] (rows=525/319 width=178)
                        Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                      <-Union 9 [SIMPLE_EDGE]
                        <-Map 11 [CONTAINS] llap
                          Reduce Output Operator [RS_140]
                            PartitionCols:_col1, _col0
                            Select Operator [SEL_138] (rows=500/500 width=178)
                              Output:["_col0","_col1"]
                              Filter Operator [FIL_137] (rows=500/500 width=178)
                                predicate:value is not null
                                TableScan [TS_136] (rows=500/500 width=178)
                                  default@src,src,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                        <-Map 8 [CONTAINS] llap
                          Reduce Output Operator [RS_135]
                            PartitionCols:_col1, _col0
                            Select Operator [SEL_133] (rows=25/25 width=175)
                              Output:["_col0","_col1"]
                              Filter Operator [FIL_132] (rows=25/25 width=175)
                                predicate:value is not null
                                TableScan [TS_131] (rows=25/25 width=175)
                                  default@src1,src1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                <-Reducer 2 [SIMPLE_EDGE] llap
                  SHUFFLE [RS_21]
                    PartitionCols:_col3
                    Merge Join Operator [MERGEJOIN_119] (rows=39/37 width=266)
                      Conds:RS_18._col0=RS_19._col0(Inner),Output:["_col1","_col2","_col3"]
                    <-Map 1 [SIMPLE_EDGE] llap
                      SHUFFLE [RS_18]
                        PartitionCols:_col0
                        Select Operator [SEL_2] (rows=500/500 width=178)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_69] (rows=500/500 width=178)
                            predicate:key is not null
                            TableScan [TS_0] (rows=500/500 width=178)
                              default@src,y,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                    <-Map 12 [SIMPLE_EDGE] llap
                      SHUFFLE [RS_19]
                        PartitionCols:_col0
                        Select Operator [SEL_30] (rows=25/25 width=175)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_74] (rows=25/25 width=175)
                            predicate:(key is not null and value is not null)
                            TableScan [TS_28] (rows=25/25 width=175)
                              default@src1,x,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
          <-Reducer 7 [CONTAINS] llap
            Reduce Output Operator [RS_130]
              PartitionCols:_col0, _col1, _col2
              Select Operator [SEL_128] (rows=66/61 width=268)
                Output:["_col0","_col1","_col2"]
                Merge Join Operator [MERGEJOIN_127] (rows=66/61 width=268)
                  Conds:RS_46._col3=RS_47._col0(Inner),Output:["_col1","_col2","_col4"]
                <-Reducer 15 [SIMPLE_EDGE] llap
                  SHUFFLE [RS_47]
                    PartitionCols:_col0
                    Select Operator [SEL_42] (rows=525/319 width=91)
                      Output:["_col0"]
                      Group By Operator [GBY_41] (rows=525/319 width=178)
                        Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                      <-Union 14 [SIMPLE_EDGE]
                        <-Map 13 [CONTAINS] llap
                          Reduce Output Operator [RS_145]
                            PartitionCols:_col1, _col0
                            Select Operator [SEL_143] (rows=25/25 width=175)
                              Output:["_col0","_col1"]
                              Filter Operator [FIL_142] (rows=25/25 width=175)
                                predicate:value is not null
                                TableScan [TS_141] (rows=25/25 width=175)
                                  default@src1,src1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                        <-Map 16 [CONTAINS] llap
                          Reduce Output Operator [RS_150]
                            PartitionCols:_col1, _col0
                            Select Operator [SEL_148] (rows=500/500 width=178)
                              Output:["_col0","_col1"]
                              Filter Operator [FIL_147] (rows=500/500 width=178)
                                predicate:value is not null
                                TableScan [TS_146] (rows=500/500 width=178)
                                  default@src,src,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                <-Reducer 6 [SIMPLE_EDGE] llap
                  SHUFFLE [RS_46]
                    PartitionCols:_col3
                    Merge Join Operator [MERGEJOIN_120] (rows=39/37 width=266)
                      Conds:RS_43._col0=RS_44._col0(Inner),Output:["_col1","_col2","_col3"]
                    <-Map 1 [SIMPLE_EDGE] llap
                      SHUFFLE [RS_43]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_2]
                    <-Map 12 [SIMPLE_EDGE] llap
                      SHUFFLE [RS_44]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_30]

PREHOOK: query: SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
union
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src)z ON (x.value = z.value)
union
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src union select key, value from src)z ON (x.value = z.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@cte_suggestion_0
PREHOOK: Input: default@cte_suggestion_1
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
PREHOOK: Output: database:default
PREHOOK: Output: default@cte_suggestion_0
PREHOOK: Output: default@cte_suggestion_1
#### A masked pattern was here ####
POSTHOOK: query: SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
union
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src)z ON (x.value = z.value)
union
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src union select key, value from src)z ON (x.value = z.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cte_suggestion_0
POSTHOOK: Input: default@cte_suggestion_1
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
POSTHOOK: Output: database:default
POSTHOOK: Output: default@cte_suggestion_0
POSTHOOK: Output: default@cte_suggestion_1
#### A masked pattern was here ####
PREHOOK: query: explain analyze
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
union
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src)z ON (x.value = z.value)
union
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src union select key, value from src)z ON (x.value = z.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@cte_suggestion_0
PREHOOK: Input: default@cte_suggestion_1
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: explain analyze
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value)
union
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src)z ON (x.value = z.value)
union
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src union select key, value from src)z ON (x.value = z.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cte_suggestion_0
POSTHOOK: Input: default@cte_suggestion_1
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in Stage-7
Map 13 <- Union 6 (CONTAINS)
Map 15 <- Union 16 (CONTAINS)
Map 21 <- Union 16 (CONTAINS)
Map 22 <- Union 18 (CONTAINS)
Map 23 <- Union 24 (CONTAINS)
Map 31 <- Union 24 (CONTAINS)
Map 32 <- Union 26 (CONTAINS)
Map 33 <- Union 28 (CONTAINS)
Map 5 <- Union 6 (CONTAINS)
Reducer 10 <- Union 11 (CONTAINS), Union 9 (SIMPLE_EDGE)
Reducer 12 <- Union 11 (SIMPLE_EDGE)
Reducer 17 <- Union 16 (SIMPLE_EDGE), Union 18 (CONTAINS)
Reducer 19 <- Union 18 (SIMPLE_EDGE)
Reducer 20 <- Map 34 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE), Union 9 (CONTAINS)
Reducer 25 <- Union 24 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 27 <- Union 26 (SIMPLE_EDGE), Union 28 (CONTAINS)
Reducer 29 <- Union 28 (SIMPLE_EDGE)
Reducer 30 <- Map 34 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 7 <- Union 6 (SIMPLE_EDGE)
Reducer 8 <- Map 14 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE), Union 9 (CONTAINS)

Vertex dependency in root stage
Reducer 3 <- Map 2 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)

Stage-6
  Fetch Operator
    limit:-1
    Stage-7
      Reducer 12 llap
      File Output Operator [FS_118]
        Group By Operator [GBY_116] (rows=384/0 width=177)
          Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
        <-Union 11 [SIMPLE_EDGE]
          <-Reducer 10 [CONTAINS] llap
            Reduce Output Operator [RS_193]
              PartitionCols:_col0, _col1
              Group By Operator [GBY_191] (rows=196/0 width=177)
                Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
              <-Union 9 [SIMPLE_EDGE]
                <-Reducer 20 [CONTAINS] llap
                  Reduce Output Operator [RS_210]
                    PartitionCols:_col0, _col1
                    Select Operator [SEL_208] (rows=130/0 width=177)
                      Output:["_col0","_col1"]
                      Merge Join Operator [MERGEJOIN_207] (rows=130/0 width=177)
                        Conds:RS_69._col0=RS_70._col3(Inner),Output:["_col2","_col3"]
                      <-Map 34 [SIMPLE_EDGE] llap
                        SHUFFLE [RS_70]
                          PartitionCols:_col3
                          Select Operator [SEL_107] (rows=39/0 width=266)
                            Output:["_col1","_col2","_col3"]
                            TableScan [TS_106] (rows=39/0 width=353)
                              default@cte_suggestion_1,cte_suggestion_1,Tbl:COMPLETE,Col:COMPLETE,Output:["value","key0","value0"]
                      <-Reducer 19 [SIMPLE_EDGE] llap
                        SHUFFLE [RS_69]
                          PartitionCols:_col0
                          Select Operator [SEL_66] (rows=1025/22 width=91)
                            Output:["_col0"]
                            Group By Operator [GBY_65] (rows=1025/22 width=178)
                              Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                            <-Union 18 [SIMPLE_EDGE]
                              <-Map 22 [CONTAINS] llap
                                Reduce Output Operator [RS_218]
                                  PartitionCols:_col1, _col0
                                  Select Operator [SEL_216] (rows=500/0 width=178)
                                    Output:["_col0","_col1"]
                                    TableScan [TS_215] (rows=500/0 width=178)
                                      default@cte_suggestion_0,cte_suggestion_0,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                              <-Reducer 17 [CONTAINS] llap
                                Reduce Output Operator [RS_206]
                                  PartitionCols:_col1, _col0
                                  Select Operator [SEL_204] (rows=525/22 width=178)
                                    Output:["_col0","_col1"]
                                    Group By Operator [GBY_203] (rows=525/22 width=178)
                                      Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                    <-Union 16 [SIMPLE_EDGE]
                                      <-Map 15 [CONTAINS] llap
                                        Reduce Output Operator [RS_202]
                                          PartitionCols:_col1, _col0
                                          Select Operator [SEL_200] (rows=25/25 width=175)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_199] (rows=25/25 width=175)
                                              predicate:value is not null
                                              TableScan [TS_198] (rows=25/25 width=175)
                                                default@src1,src1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                      <-Map 21 [CONTAINS] llap
                                        Reduce Output Operator [RS_214]
                                          PartitionCols:_col1, _col0
                                          Select Operator [SEL_212] (rows=500/0 width=178)
                                            Output:["_col0","_col1"]
                                            TableScan [TS_211] (rows=500/0 width=178)
                                              default@cte_suggestion_0,cte_suggestion_0,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                <-Reducer 8 [CONTAINS] llap
                  Reduce Output Operator [RS_190]
                    PartitionCols:_col0, _col1
                    Select Operator [SEL_188] (rows=66/0 width=177)
                      Output:["_col0","_col1"]
                      Merge Join Operator [MERGEJOIN_187] (rows=66/0 width=177)
                        Conds:RS_44._col0=RS_45._col3(Inner),Output:["_col2","_col3"]
                      <-Map 14 [SIMPLE_EDGE] llap
                        SHUFFLE [RS_45]
                          PartitionCols:_col3
                          Select Operator [SEL_43] (rows=39/0 width=266)
                            Output:["_col1","_col2","_col3"]
                            TableScan [TS_42] (rows=39/0 width=353)
                              default@cte_suggestion_1,cte_suggestion_1,Tbl:COMPLETE,Col:COMPLETE,Output:["value","key0","value0"]
                      <-Reducer 7 [SIMPLE_EDGE] llap
                        SHUFFLE [RS_44]
                          PartitionCols:_col0
                          Select Operator [SEL_41] (rows=525/22 width=91)
                            Output:["_col0"]
                            Group By Operator [GBY_40] (rows=525/22 width=178)
                              Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                            <-Union 6 [SIMPLE_EDGE]
                              <-Map 13 [CONTAINS] llap
                                Reduce Output Operator [RS_197]
                                  PartitionCols:_col1, _col0
                                  Select Operator [SEL_195] (rows=500/0 width=178)
                                    Output:["_col0","_col1"]
                                    TableScan [TS_194] (rows=500/0 width=178)
                                      default@cte_suggestion_0,cte_suggestion_0,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                              <-Map 5 [CONTAINS] llap
                                Reduce Output Operator [RS_186]
                                  PartitionCols:_col1, _col0
                                  Select Operator [SEL_184] (rows=25/25 width=175)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_183] (rows=25/25 width=175)
                                      predicate:value is not null
                                      TableScan [TS_182] (rows=25/25 width=175)
                                        default@src1,src1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
          <-Reducer 30 [CONTAINS] llap
            Reduce Output Operator [RS_235]
              PartitionCols:_col0, _col1
              Select Operator [SEL_233] (rows=193/0 width=177)
                Output:["_col0","_col1"]
                Merge Join Operator [MERGEJOIN_232] (rows=193/0 width=177)
                  Conds:RS_108._col0=RS_109._col3(Inner),Output:["_col2","_col3"]
                <-Map 34 [SIMPLE_EDGE] llap
                  SHUFFLE [RS_109]
                    PartitionCols:_col3
                     Please refer to the previous Select Operator [SEL_107]
                <-Reducer 29 [SIMPLE_EDGE] llap
                  SHUFFLE [RS_108]
                    PartitionCols:_col0
                    Select Operator [SEL_105] (rows=1525/22 width=91)
                      Output:["_col0"]
                      Group By Operator [GBY_104] (rows=1525/22 width=178)
                        Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                      <-Union 28 [SIMPLE_EDGE]
                        <-Map 33 [CONTAINS] llap
                          Reduce Output Operator [RS_247]
                            PartitionCols:_col1, _col0
                            Select Operator [SEL_245] (rows=500/0 width=178)
                              Output:["_col0","_col1"]
                              TableScan [TS_244] (rows=500/0 width=178)
                                default@cte_suggestion_0,cte_suggestion_0,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                        <-Reducer 27 [CONTAINS] llap
                          Reduce Output Operator [RS_231]
                            PartitionCols:_col1, _col0
                            Select Operator [SEL_229] (rows=1025/22 width=178)
                              Output:["_col0","_col1"]
                              Group By Operator [GBY_228] (rows=1025/22 width=178)
                                Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                              <-Union 26 [SIMPLE_EDGE]
                                <-Map 32 [CONTAINS] llap
                                  Reduce Output Operator [RS_243]
                                    PartitionCols:_col1, _col0
                                    Select Operator [SEL_241] (rows=500/0 width=178)
                                      Output:["_col0","_col1"]
                                      TableScan [TS_240] (rows=500/0 width=178)
                                        default@cte_suggestion_0,cte_suggestion_0,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                <-Reducer 25 [CONTAINS] llap
                                  Reduce Output Operator [RS_227]
                                    PartitionCols:_col1, _col0
                                    Select Operator [SEL_225] (rows=525/22 width=178)
                                      Output:["_col0","_col1"]
                                      Group By Operator [GBY_224] (rows=525/22 width=178)
                                        Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                      <-Union 24 [SIMPLE_EDGE]
                                        <-Map 23 [CONTAINS] llap
                                          Reduce Output Operator [RS_223]
                                            PartitionCols:_col1, _col0
                                            Select Operator [SEL_221] (rows=25/25 width=175)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_220] (rows=25/25 width=175)
                                                predicate:value is not null
                                                TableScan [TS_219] (rows=25/25 width=175)
                                                  default@src1,src1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                        <-Map 31 [CONTAINS] llap
                                          Reduce Output Operator [RS_239]
                                            PartitionCols:_col1, _col0
                                            Select Operator [SEL_237] (rows=500/0 width=178)
                                              Output:["_col0","_col1"]
                                              TableScan [TS_236] (rows=500/0 width=178)
                                                default@cte_suggestion_0,cte_suggestion_0,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
        Stage-2
          Dependency Collection{}
            Stage-1
              Map 1 llap
              File Output Operator [FS_3]
                table:{"name:":"default.cte_suggestion_0"}
                Select Operator [SEL_2] (rows=500/500 width=178)
                  Output:["_col0","_col1"]
                  Filter Operator [FIL_4] (rows=500/500 width=178)
                    predicate:value is not null
                    TableScan [TS_0] (rows=500/500 width=178)
                      default@src,src,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
        Stage-0
          Move Operator
             Please refer to the previous Stage-1
        Stage-5
          Dependency Collection{}
            Stage-4
              Reducer 3 llap
              File Output Operator [FS_15]
                table:{"name:":"default.cte_suggestion_1"}
                Merge Join Operator [MERGEJOIN_30] (rows=39/37 width=353)
                  Conds:RS_11._col0=RS_12._col0(Inner),Output:["_col0","_col1","_col2","_col3"]
                <-Map 2 [SIMPLE_EDGE] llap
                  SHUFFLE [RS_11]
                    PartitionCols:_col0
                    Select Operator [SEL_7] (rows=500/500 width=178)
                      Output:["_col0","_col1"]
                      Filter Operator [FIL_18] (rows=500/500 width=178)
                        predicate:key is not null
                        TableScan [TS_5] (rows=500/500 width=178)
                          default@src,y,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                <-Map 4 [SIMPLE_EDGE] llap
                  SHUFFLE [RS_12]
                    PartitionCols:_col0
                    Select Operator [SEL_10] (rows=25/25 width=175)
                      Output:["_col0","_col1"]
                      Filter Operator [FIL_19] (rows=25/25 width=175)
                        predicate:(key is not null and value is not null)
                        TableScan [TS_8] (rows=25/25 width=175)
                          default@src1,x,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
        Stage-3
          Move Operator
             Please refer to the previous Stage-4

PREHOOK: query: CREATE TABLE srcbucket_mapjoin_n11(key int, value string) partitioned by (ds string) CLUSTERED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@srcbucket_mapjoin_n11
POSTHOOK: query: CREATE TABLE srcbucket_mapjoin_n11(key int, value string) partitioned by (ds string) CLUSTERED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@srcbucket_mapjoin_n11
PREHOOK: query: CREATE TABLE tab_part_n7 (key int, value string) PARTITIONED BY(ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 4 BUCKETS STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tab_part_n7
POSTHOOK: query: CREATE TABLE tab_part_n7 (key int, value string) PARTITIONED BY(ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 4 BUCKETS STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tab_part_n7
PREHOOK: query: CREATE TABLE srcbucket_mapjoin_part_n11 (key int, value string) partitioned by (ds string) CLUSTERED BY (key) INTO 4 BUCKETS STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@srcbucket_mapjoin_part_n11
POSTHOOK: query: CREATE TABLE srcbucket_mapjoin_part_n11 (key int, value string) partitioned by (ds string) CLUSTERED BY (key) INTO 4 BUCKETS STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@srcbucket_mapjoin_part_n11
PREHOOK: query: load data local inpath '../../data/files/bmj/000000_0' INTO TABLE srcbucket_mapjoin_n11 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_n11
POSTHOOK: query: load data local inpath '../../data/files/bmj/000000_0' INTO TABLE srcbucket_mapjoin_n11 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_n11
POSTHOOK: Output: default@srcbucket_mapjoin_n11@ds=2008-04-08
PREHOOK: query: load data local inpath '../../data/files/bmj1/000001_0' INTO TABLE srcbucket_mapjoin_n11 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_n11@ds=2008-04-08
POSTHOOK: query: load data local inpath '../../data/files/bmj1/000001_0' INTO TABLE srcbucket_mapjoin_n11 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_n11@ds=2008-04-08
PREHOOK: query: load data local inpath '../../data/files/bmj/000000_0' INTO TABLE srcbucket_mapjoin_part_n11 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_part_n11
POSTHOOK: query: load data local inpath '../../data/files/bmj/000000_0' INTO TABLE srcbucket_mapjoin_part_n11 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_part_n11
POSTHOOK: Output: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
PREHOOK: query: load data local inpath '../../data/files/bmj/000001_0' INTO TABLE srcbucket_mapjoin_part_n11 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
POSTHOOK: query: load data local inpath '../../data/files/bmj/000001_0' INTO TABLE srcbucket_mapjoin_part_n11 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
PREHOOK: query: load data local inpath '../../data/files/bmj/000002_0' INTO TABLE srcbucket_mapjoin_part_n11 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
POSTHOOK: query: load data local inpath '../../data/files/bmj/000002_0' INTO TABLE srcbucket_mapjoin_part_n11 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
PREHOOK: query: load data local inpath '../../data/files/bmj/000003_0' INTO TABLE srcbucket_mapjoin_part_n11 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
POSTHOOK: query: load data local inpath '../../data/files/bmj/000003_0' INTO TABLE srcbucket_mapjoin_part_n11 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
PREHOOK: query: insert overwrite table tab_part_n7 partition (ds='2008-04-08')
select key,value from srcbucket_mapjoin_part_n11
PREHOOK: type: QUERY
PREHOOK: Input: default@srcbucket_mapjoin_part_n11
PREHOOK: Input: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
PREHOOK: Output: default@tab_part_n7@ds=2008-04-08
POSTHOOK: query: insert overwrite table tab_part_n7 partition (ds='2008-04-08')
select key,value from srcbucket_mapjoin_part_n11
POSTHOOK: type: QUERY
POSTHOOK: Input: default@srcbucket_mapjoin_part_n11
POSTHOOK: Input: default@srcbucket_mapjoin_part_n11@ds=2008-04-08
POSTHOOK: Output: default@tab_part_n7@ds=2008-04-08
POSTHOOK: Lineage: tab_part_n7 PARTITION(ds=2008-04-08).key SIMPLE [(srcbucket_mapjoin_part_n11)srcbucket_mapjoin_part_n11.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: tab_part_n7 PARTITION(ds=2008-04-08).value SIMPLE [(srcbucket_mapjoin_part_n11)srcbucket_mapjoin_part_n11.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: CREATE TABLE tab_n6(key int, value string) PARTITIONED BY(ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tab_n6
POSTHOOK: query: CREATE TABLE tab_n6(key int, value string) PARTITIONED BY(ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tab_n6
PREHOOK: query: insert overwrite table tab_n6 partition (ds='2008-04-08')
select key,value from srcbucket_mapjoin_n11
PREHOOK: type: QUERY
PREHOOK: Input: default@srcbucket_mapjoin_n11
PREHOOK: Input: default@srcbucket_mapjoin_n11@ds=2008-04-08
PREHOOK: Output: default@tab_n6@ds=2008-04-08
POSTHOOK: query: insert overwrite table tab_n6 partition (ds='2008-04-08')
select key,value from srcbucket_mapjoin_n11
POSTHOOK: type: QUERY
POSTHOOK: Input: default@srcbucket_mapjoin_n11
POSTHOOK: Input: default@srcbucket_mapjoin_n11@ds=2008-04-08
POSTHOOK: Output: default@tab_n6@ds=2008-04-08
POSTHOOK: Lineage: tab_n6 PARTITION(ds=2008-04-08).key SIMPLE [(srcbucket_mapjoin_n11)srcbucket_mapjoin_n11.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: tab_n6 PARTITION(ds=2008-04-08).value SIMPLE [(srcbucket_mapjoin_n11)srcbucket_mapjoin_n11.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: CREATE TABLE tab2_n3(key int, value string) PARTITIONED BY(ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tab2_n3
POSTHOOK: query: CREATE TABLE tab2_n3(key int, value string) PARTITIONED BY(ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tab2_n3
PREHOOK: query: insert overwrite table tab2_n3 partition (ds='2008-04-08')
select key,value from srcbucket_mapjoin_n11
PREHOOK: type: QUERY
PREHOOK: Input: default@srcbucket_mapjoin_n11
PREHOOK: Input: default@srcbucket_mapjoin_n11@ds=2008-04-08
PREHOOK: Output: default@tab2_n3@ds=2008-04-08
POSTHOOK: query: insert overwrite table tab2_n3 partition (ds='2008-04-08')
select key,value from srcbucket_mapjoin_n11
POSTHOOK: type: QUERY
POSTHOOK: Input: default@srcbucket_mapjoin_n11
POSTHOOK: Input: default@srcbucket_mapjoin_n11@ds=2008-04-08
POSTHOOK: Output: default@tab2_n3@ds=2008-04-08
POSTHOOK: Lineage: tab2_n3 PARTITION(ds=2008-04-08).key SIMPLE [(srcbucket_mapjoin_n11)srcbucket_mapjoin_n11.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: tab2_n3 PARTITION(ds=2008-04-08).value SIMPLE [(srcbucket_mapjoin_n11)srcbucket_mapjoin_n11.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
PREHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
Plan optimized by CBO.

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 1 llap
      File Output Operator [FS_10]
        Merge Join Operator [MERGEJOIN_25] (rows=382/480 width=95)
          Conds:SEL_2._col0=DUMMY_STORE_26._col0(Inner),Output:["_col0","_col1"]
        <-Dummy Store [DUMMY_STORE_26]
            Select Operator [SEL_5] (rows=242/242 width=4)
              Output:["_col0"]
              Filter Operator [FIL_14] (rows=242/242 width=4)
                predicate:key is not null
                TableScan [TS_3] (rows=242/242 width=4)
                  default@tab_n6,s3,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
        <-Select Operator [SEL_2] (rows=242/242 width=95)
            Output:["_col0","_col1"]
            Filter Operator [FIL_13] (rows=242/242 width=95)
              predicate:key is not null
              TableScan [TS_0] (rows=242/242 width=95)
                default@tab_n6,s1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]

PREHOOK: query: select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key join tab_n6 s2 on s1.value=s2.value
PREHOOK: type: QUERY
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key join tab_n6 s2 on s1.value=s2.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
PREHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key join tab_n6 s2 on s1.value=s2.value
PREHOOK: type: QUERY
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key join tab_n6 s2 on s1.value=s2.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 2 llap
      File Output Operator [FS_16]
        Merge Join Operator [MERGEJOIN_47] (rows=604/1166 width=95)
          Conds:RS_12._col1=RS_13._col0(Inner),Output:["_col0","_col1"]
        <-Map 1 [SIMPLE_EDGE] llap
          SHUFFLE [RS_12]
            PartitionCols:_col1
            Merge Join Operator [MERGEJOIN_45] (rows=382/480 width=95)
              Conds:SEL_2._col0=DUMMY_STORE_46._col0(Inner),Output:["_col0","_col1"]
            <-Dummy Store [DUMMY_STORE_46]
                Select Operator [SEL_5] (rows=242/242 width=4)
                  Output:["_col0"]
                  Filter Operator [FIL_23] (rows=242/242 width=4)
                    predicate:key is not null
                    TableScan [TS_3] (rows=242/242 width=4)
                      default@tab_n6,s3,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
            <-Select Operator [SEL_2] (rows=242/242 width=95)
                Output:["_col0","_col1"]
                Filter Operator [FIL_22] (rows=242/242 width=95)
                  predicate:(key is not null and value is not null)
                  TableScan [TS_0] (rows=242/242 width=95)
                    default@tab_n6,s1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
        <-Map 4 [SIMPLE_EDGE] llap
          SHUFFLE [RS_13]
            PartitionCols:_col0
            Select Operator [SEL_8] (rows=242/242 width=91)
              Output:["_col0"]
              Filter Operator [FIL_24] (rows=242/242 width=91)
                predicate:value is not null
                TableScan [TS_6] (rows=242/242 width=91)
                  default@tab_n6,s2,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]

PREHOOK: query: select s1.key as key, s1.value as value from tab_n6 s1 join tab2_n3 s3 on s1.key=s3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@tab2_n3
PREHOOK: Input: default@tab2_n3@ds=2008-04-08
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: select s1.key as key, s1.value as value from tab_n6 s1 join tab2_n3 s3 on s1.key=s3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab2_n3
POSTHOOK: Input: default@tab2_n3@ds=2008-04-08
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
PREHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab_n6 s1 join tab2_n3 s3 on s1.key=s3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@tab2_n3
PREHOOK: Input: default@tab2_n3@ds=2008-04-08
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab_n6 s1 join tab2_n3 s3 on s1.key=s3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab2_n3
POSTHOOK: Input: default@tab2_n3@ds=2008-04-08
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
Plan optimized by CBO.

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 1 llap
      File Output Operator [FS_10]
        Merge Join Operator [MERGEJOIN_25] (rows=382/480 width=95)
          Conds:SEL_2._col0=DUMMY_STORE_26._col0(Inner),Output:["_col0","_col1"]
        <-Dummy Store [DUMMY_STORE_26]
            Select Operator [SEL_5] (rows=242/242 width=4)
              Output:["_col0"]
              Filter Operator [FIL_14] (rows=242/242 width=4)
                predicate:key is not null
                TableScan [TS_3] (rows=242/242 width=4)
                  default@tab2_n3,s3,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
        <-Select Operator [SEL_2] (rows=242/242 width=95)
            Output:["_col0","_col1"]
            Filter Operator [FIL_13] (rows=242/242 width=95)
              predicate:key is not null
              TableScan [TS_0] (rows=242/242 width=95)
                default@tab_n6,s1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]

PREHOOK: query: select s1.key as key, s1.value as value from tab_n6 s1 join tab2_n3 s3 on s1.key=s3.key join tab2_n3 s2 on s1.value=s2.value
PREHOOK: type: QUERY
PREHOOK: Input: default@tab2_n3
PREHOOK: Input: default@tab2_n3@ds=2008-04-08
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: select s1.key as key, s1.value as value from tab_n6 s1 join tab2_n3 s3 on s1.key=s3.key join tab2_n3 s2 on s1.value=s2.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab2_n3
POSTHOOK: Input: default@tab2_n3@ds=2008-04-08
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
PREHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab_n6 s1 join tab2_n3 s3 on s1.key=s3.key join tab2_n3 s2 on s1.value=s2.value
PREHOOK: type: QUERY
PREHOOK: Input: default@tab2_n3
PREHOOK: Input: default@tab2_n3@ds=2008-04-08
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab_n6 s1 join tab2_n3 s3 on s1.key=s3.key join tab2_n3 s2 on s1.value=s2.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab2_n3
POSTHOOK: Input: default@tab2_n3@ds=2008-04-08
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 2 llap
      File Output Operator [FS_16]
        Merge Join Operator [MERGEJOIN_47] (rows=604/1166 width=95)
          Conds:RS_12._col1=RS_13._col0(Inner),Output:["_col0","_col1"]
        <-Map 1 [SIMPLE_EDGE] llap
          SHUFFLE [RS_12]
            PartitionCols:_col1
            Merge Join Operator [MERGEJOIN_45] (rows=382/480 width=95)
              Conds:SEL_2._col0=DUMMY_STORE_46._col0(Inner),Output:["_col0","_col1"]
            <-Dummy Store [DUMMY_STORE_46]
                Select Operator [SEL_5] (rows=242/242 width=4)
                  Output:["_col0"]
                  Filter Operator [FIL_23] (rows=242/242 width=4)
                    predicate:key is not null
                    TableScan [TS_3] (rows=242/242 width=4)
                      default@tab2_n3,s3,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
            <-Select Operator [SEL_2] (rows=242/242 width=95)
                Output:["_col0","_col1"]
                Filter Operator [FIL_22] (rows=242/242 width=95)
                  predicate:(key is not null and value is not null)
                  TableScan [TS_0] (rows=242/242 width=95)
                    default@tab_n6,s1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
        <-Map 4 [SIMPLE_EDGE] llap
          SHUFFLE [RS_13]
            PartitionCols:_col0
            Select Operator [SEL_8] (rows=242/242 width=91)
              Output:["_col0"]
              Filter Operator [FIL_24] (rows=242/242 width=91)
                predicate:value is not null
                TableScan [TS_6] (rows=242/242 width=91)
                  default@tab2_n3,s2,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]

PREHOOK: query: select count(*) from (select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key
UNION  ALL
select s2.key as key, s2.value as value from tab_n6 s2
) a_n14 join tab_part_n7 b_n10 on (a_n14.key = b_n10.key)
PREHOOK: type: QUERY
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
PREHOOK: Input: default@tab_part_n7
PREHOOK: Input: default@tab_part_n7@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from (select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key
UNION  ALL
select s2.key as key, s2.value as value from tab_n6 s2
) a_n14 join tab_part_n7 b_n10 on (a_n14.key = b_n10.key)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
POSTHOOK: Input: default@tab_part_n7
POSTHOOK: Input: default@tab_part_n7@ds=2008-04-08
#### A masked pattern was here ####
PREHOOK: query: explain analyze
select count(*) from (select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key
UNION  ALL
select s2.key as key, s2.value as value from tab_n6 s2
) a_n14 join tab_part_n7 b_n10 on (a_n14.key = b_n10.key)
PREHOOK: type: QUERY
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
PREHOOK: Input: default@tab_part_n7
PREHOOK: Input: default@tab_part_n7@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: explain analyze
select count(*) from (select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key
UNION  ALL
select s2.key as key, s2.value as value from tab_n6 s2
) a_n14 join tab_part_n7 b_n10 on (a_n14.key = b_n10.key)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
POSTHOOK: Input: default@tab_part_n7
POSTHOOK: Input: default@tab_part_n7@ds=2008-04-08
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Union 2 (CONTAINS)
Map 6 <- Union 2 (CONTAINS)
Reducer 3 <- Map 7 (SIMPLE_EDGE), Union 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 4 llap
      File Output Operator [FS_25]
        Group By Operator [GBY_23] (rows=1/1 width=8)
          Output:["_col0"],aggregations:["count()"]
        <-Reducer 3 [CUSTOM_SIMPLE_EDGE] llap
          PARTITION_ONLY_SHUFFLE [RS_22]
            Merge Join Operator [MERGEJOIN_60] (rows=1029/1646 width=8)
              Conds:Union 2._col0=RS_19._col0(Inner)
            <-Map 7 [SIMPLE_EDGE] llap
              SHUFFLE [RS_19]
                PartitionCols:_col0
                Select Operator [SEL_17] (rows=500/500 width=4)
                  Output:["_col0"]
                  Filter Operator [FIL_35] (rows=500/500 width=4)
                    predicate:key is not null
                    TableScan [TS_15] (rows=500/500 width=4)
                      default@tab_part_n7,b_n10,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
            <-Union 2 [SIMPLE_EDGE]
              <-Map 1 [CONTAINS] llap
                Reduce Output Operator [RS_70]
                  PartitionCols:_col0
                  Merge Join Operator [MERGEJOIN_67] (rows=382/480 width=4)
                    Conds:SEL_65._col0=DUMMY_STORE_59._col0(Inner),Output:["_col0"]
                  <-Dummy Store [DUMMY_STORE_59]
                      Select Operator [SEL_5] (rows=242/242 width=4)
                        Output:["_col0"]
                        Filter Operator [FIL_33] (rows=242/242 width=4)
                          predicate:key is not null
                          TableScan [TS_3] (rows=242/242 width=4)
                            default@tab_n6,s3,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
                  <-Select Operator [SEL_65] (rows=242/242 width=4)
                      Output:["_col0"]
                      Filter Operator [FIL_63] (rows=242/242 width=4)
                        predicate:key is not null
                        TableScan [TS_61] (rows=242/242 width=4)
                          default@tab_n6,s1,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
              <-Map 6 [CONTAINS] llap
                Reduce Output Operator [RS_75]
                  PartitionCols:_col0
                  Select Operator [SEL_73] (rows=242/242 width=4)
                    Output:["_col0"]
                    Filter Operator [FIL_72] (rows=242/242 width=4)
                      predicate:key is not null
                      TableScan [TS_71] (rows=242/242 width=4)
                        default@tab_n6,s2,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]

PREHOOK: query: select count(*) from (select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key join tab_n6 s2 on s1.value=s2.value
UNION  ALL
select s2.key as key, s2.value as value from tab_n6 s2
) a_n14 join tab_part_n7 b_n10 on (a_n14.key = b_n10.key)
PREHOOK: type: QUERY
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
PREHOOK: Input: default@tab_part_n7
PREHOOK: Input: default@tab_part_n7@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from (select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key join tab_n6 s2 on s1.value=s2.value
UNION  ALL
select s2.key as key, s2.value as value from tab_n6 s2
) a_n14 join tab_part_n7 b_n10 on (a_n14.key = b_n10.key)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
POSTHOOK: Input: default@tab_part_n7
POSTHOOK: Input: default@tab_part_n7@ds=2008-04-08
#### A masked pattern was here ####
PREHOOK: query: explain analyze
select count(*) from (select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key join tab_n6 s2 on s1.value=s2.value
UNION  ALL
select s2.key as key, s2.value as value from tab_n6 s2
) a_n14 join tab_part_n7 b_n10 on (a_n14.key = b_n10.key)
PREHOOK: type: QUERY
PREHOOK: Input: default@tab_n6
PREHOOK: Input: default@tab_n6@ds=2008-04-08
PREHOOK: Input: default@tab_part_n7
PREHOOK: Input: default@tab_part_n7@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: explain analyze
select count(*) from (select s1.key as key, s1.value as value from tab_n6 s1 join tab_n6 s3 on s1.key=s3.key join tab_n6 s2 on s1.value=s2.value
UNION  ALL
select s2.key as key, s2.value as value from tab_n6 s2
) a_n14 join tab_part_n7 b_n10 on (a_n14.key = b_n10.key)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab_n6
POSTHOOK: Input: default@tab_n6@ds=2008-04-08
POSTHOOK: Input: default@tab_part_n7
POSTHOOK: Input: default@tab_part_n7@ds=2008-04-08
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 8 <- Union 3 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 4 <- Map 9 (SIMPLE_EDGE), Union 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5 llap
      File Output Operator [FS_31]
        Group By Operator [GBY_29] (rows=1/1 width=8)
          Output:["_col0"],aggregations:["count()"]
        <-Reducer 4 [CUSTOM_SIMPLE_EDGE] llap
          PARTITION_ONLY_SHUFFLE [RS_28]
            Merge Join Operator [MERGEJOIN_82] (rows=1396/3768 width=8)
              Conds:Union 3._col0=RS_25._col0(Inner)
            <-Map 9 [SIMPLE_EDGE] llap
              SHUFFLE [RS_25]
                PartitionCols:_col0
                Select Operator [SEL_23] (rows=500/500 width=4)
                  Output:["_col0"]
                  Filter Operator [FIL_46] (rows=500/500 width=4)
                    predicate:key is not null
                    TableScan [TS_21] (rows=500/500 width=4)
                      default@tab_part_n7,b_n10,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
            <-Union 3 [SIMPLE_EDGE]
              <-Map 8 [CONTAINS] llap
                Reduce Output Operator [RS_90]
                  PartitionCols:_col0
                  Select Operator [SEL_88] (rows=242/242 width=4)
                    Output:["_col0"]
                    Filter Operator [FIL_87] (rows=242/242 width=4)
                      predicate:key is not null
                      TableScan [TS_86] (rows=242/242 width=4)
                        default@tab_n6,s2,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
              <-Reducer 2 [CONTAINS] llap
                Reduce Output Operator [RS_85]
                  PartitionCols:_col0
                  Merge Join Operator [MERGEJOIN_83] (rows=604/1166 width=4)
                    Conds:RS_12._col1=RS_13._col0(Inner),Output:["_col0"]
                  <-Map 1 [SIMPLE_EDGE] llap
                    SHUFFLE [RS_12]
                      PartitionCols:_col1
                      Merge Join Operator [MERGEJOIN_79] (rows=382/480 width=95)
                        Conds:SEL_2._col0=DUMMY_STORE_80._col0(Inner),Output:["_col0","_col1"]
                      <-Dummy Store [DUMMY_STORE_80]
                          Select Operator [SEL_5] (rows=242/242 width=4)
                            Output:["_col0"]
                            Filter Operator [FIL_43] (rows=242/242 width=4)
                              predicate:key is not null
                              TableScan [TS_3] (rows=242/242 width=4)
                                default@tab_n6,s3,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
                      <-Select Operator [SEL_2] (rows=242/242 width=95)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_42] (rows=242/242 width=95)
                            predicate:(key is not null and value is not null)
                            TableScan [TS_0] (rows=242/242 width=95)
                              default@tab_n6,s1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                  <-Map 7 [SIMPLE_EDGE] llap
                    SHUFFLE [RS_13]
                      PartitionCols:_col0
                      Select Operator [SEL_8] (rows=242/242 width=91)
                        Output:["_col0"]
                        Filter Operator [FIL_44] (rows=242/242 width=91)
                          predicate:value is not null
                          TableScan [TS_6] (rows=242/242 width=91)
                            default@tab_n6,s2,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]

PREHOOK: query: CREATE TABLE a_n14(key STRING, value STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@a_n14
POSTHOOK: query: CREATE TABLE a_n14(key STRING, value STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@a_n14
PREHOOK: query: CREATE TABLE b_n10(key STRING, value STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@b_n10
POSTHOOK: query: CREATE TABLE b_n10(key STRING, value STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@b_n10
PREHOOK: query: CREATE TABLE c_n3(key STRING, value STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@c_n3
POSTHOOK: query: CREATE TABLE c_n3(key STRING, value STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@c_n3
PREHOOK: query: from
(
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union all select * from src)z ON (x.value = z.value)
union all
SELECT x.key, y.value
FROM src x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union all select key, value from src union all select key, value from src)z ON (x.value = z.value)
union all
SELECT x.key, y.value
FROM src1 x JOIN src1 y ON (x.key = y.key) 
JOIN (select key, value from src1 union all select key, value from src union all select key, value from src union all select key, value from src)z ON (x.value = z.value)
) tmp
INSERT OVERWRITE TABLE a_n14 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE b_n10 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE c_n3 SELECT tmp.key, tmp.value
PREHOOK: type: QUERY
PREHOOK: Input: default@cte_suggestion_0
PREHOOK: Input: default@cte_suggestion_1
PREHOOK: Input: default@cte_suggestion_2
PREHOOK: Input: default@cte_suggestion_3
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
PREHOOK: Output: database:default
PREHOOK: Output: default@a_n14
PREHOOK: Output: default@b_n10
PREHOOK: Output: default@c_n3
PREHOOK: Output: default@cte_suggestion_0
PREHOOK: Output: default@cte_suggestion_1
PREHOOK: Output: default@cte_suggestion_2
PREHOOK: Output: default@cte_suggestion_3
#### A masked pattern was here ####
POSTHOOK: query: from
(
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union all select * from src)z ON (x.value = z.value)
union all
SELECT x.key, y.value
FROM src x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union all select key, value from src union all select key, value from src)z ON (x.value = z.value)
union all
SELECT x.key, y.value
FROM src1 x JOIN src1 y ON (x.key = y.key) 
JOIN (select key, value from src1 union all select key, value from src union all select key, value from src union all select key, value from src)z ON (x.value = z.value)
) tmp
INSERT OVERWRITE TABLE a_n14 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE b_n10 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE c_n3 SELECT tmp.key, tmp.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cte_suggestion_0
POSTHOOK: Input: default@cte_suggestion_1
POSTHOOK: Input: default@cte_suggestion_2
POSTHOOK: Input: default@cte_suggestion_3
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
POSTHOOK: Output: database:default
POSTHOOK: Output: default@a_n14
POSTHOOK: Output: default@b_n10
POSTHOOK: Output: default@c_n3
POSTHOOK: Output: default@cte_suggestion_0
POSTHOOK: Output: default@cte_suggestion_1
POSTHOOK: Output: default@cte_suggestion_2
POSTHOOK: Output: default@cte_suggestion_3
#### A masked pattern was here ####
PREHOOK: query: explain analyze
from
(
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union all select * from src)z ON (x.value = z.value)
union all
SELECT x.key, y.value
FROM src x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union all select key, value from src union all select key, value from src)z ON (x.value = z.value)
union all
SELECT x.key, y.value
FROM src1 x JOIN src1 y ON (x.key = y.key) 
JOIN (select key, value from src1 union all select key, value from src union all select key, value from src union all select key, value from src)z ON (x.value = z.value)
) tmp
INSERT OVERWRITE TABLE a_n14 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE b_n10 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE c_n3 SELECT tmp.key, tmp.value
PREHOOK: type: QUERY
PREHOOK: Input: default@cte_suggestion_0
PREHOOK: Input: default@cte_suggestion_1
PREHOOK: Input: default@cte_suggestion_2
PREHOOK: Input: default@cte_suggestion_3
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
PREHOOK: Output: default@a_n14
PREHOOK: Output: default@b_n10
PREHOOK: Output: default@c_n3
POSTHOOK: query: explain analyze
from
(
SELECT x.key, y.value
FROM src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union all select * from src)z ON (x.value = z.value)
union all
SELECT x.key, y.value
FROM src x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union all select key, value from src union all select key, value from src)z ON (x.value = z.value)
union all
SELECT x.key, y.value
FROM src1 x JOIN src1 y ON (x.key = y.key) 
JOIN (select key, value from src1 union all select key, value from src union all select key, value from src union all select key, value from src)z ON (x.value = z.value)
) tmp
INSERT OVERWRITE TABLE a_n14 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE b_n10 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE c_n3 SELECT tmp.key, tmp.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cte_suggestion_0
POSTHOOK: Input: default@cte_suggestion_1
POSTHOOK: Input: default@cte_suggestion_2
POSTHOOK: Input: default@cte_suggestion_3
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
POSTHOOK: Output: default@a_n14
POSTHOOK: Output: default@b_n10
POSTHOOK: Output: default@c_n3
Plan optimized by CBO.

Vertex dependency in Stage-15
Map 12 <- Union 6 (CONTAINS)
Map 19 <- Union 20 (CONTAINS)
Map 21 <- Union 20 (CONTAINS)
Map 22 <- Union 20 (CONTAINS)
Map 27 <- Union 28 (CONTAINS)
Map 29 <- Union 28 (CONTAINS)
Map 30 <- Union 28 (CONTAINS)
Map 31 <- Union 28 (CONTAINS)
Map 5 <- Union 6 (CONTAINS)
Reducer 10 <- Union 8 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Union 8 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 17 <- Map 16 (SIMPLE_EDGE), Map 23 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE), Union 20 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 25 <- Map 24 (SIMPLE_EDGE), Map 32 (SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (SIMPLE_EDGE), Union 28 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 7 <- Reducer 14 (SIMPLE_EDGE), Union 6 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 9 <- Union 8 (CUSTOM_SIMPLE_EDGE)

Stage-17
  Stats Work{}
    Stage-12
      Move Operator
        table:{"name:":"default.a_n14"}
        Stage-16
          Dependency Collection{}
            Stage-15
              Reducer 10 llap
              File Output Operator [FS_92]
                Select Operator [SEL_91] (rows=1/1 width=532)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                  Group By Operator [GBY_90] (rows=1/1 width=336)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(1)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col3)","max(VALUE._col4)","avg(VALUE._col5)","count(VALUE._col6)","compute_bit_vector_hll(VALUE._col6)"]
                  <-Union 8 [CUSTOM_SIMPLE_EDGE]
                    <-Reducer 18 [CONTAINS] llap
                      File Output Operator [FS_232]
                        table:{"name:":"default.a_n14"}
                        Select Operator [SEL_230] (rows=2640/0 width=178)
                          Output:["_col0","_col1"]
                          Merge Join Operator [MERGEJOIN_229] (rows=2640/0 width=178)
                            Conds:RS_50._col1=Union 20._col0(Inner),Output:["_col0","_col3"]
                          <-Reducer 17 [SIMPLE_EDGE] llap
                            SHUFFLE [RS_50]
                              PartitionCols:_col1
                              Merge Join Operator [MERGEJOIN_204] (rows=791/0 width=269)
                                Conds:RS_47._col0=RS_48.key(Inner),Output:["_col0","_col1","_col3"]
                              <-Map 16 [SIMPLE_EDGE] llap
                                SHUFFLE [RS_47]
                                  PartitionCols:_col0
                                  Select Operator [SEL_37] (rows=500/0 width=178)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_126] (rows=500/0 width=178)
                                      predicate:value is not null
                                      TableScan [TS_35] (rows=500/0 width=178)
                                        default@cte_suggestion_0,cte_suggestion_0,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                              <-Map 23 [SIMPLE_EDGE] llap
                                SHUFFLE [RS_48]
                                  PartitionCols:key
                                  TableScan [TS_46] (rows=500/0 width=178)
                                    default@cte_suggestion_0,cte_suggestion_0,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                          <-Union 20 [SIMPLE_EDGE]
                            <-Map 19 [CONTAINS] llap
                              Reduce Output Operator [RS_244]
                                PartitionCols:_col0
                                Select Operator [SEL_242] (rows=25/0 width=89)
                                  Output:["_col0"]
                                  TableScan [TS_241] (rows=25/0 width=89)
                                    default@cte_suggestion_3,cte_suggestion_3,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]
                            <-Map 21 [CONTAINS] llap
                              Reduce Output Operator [RS_248]
                                PartitionCols:_col0
                                Select Operator [SEL_246] (rows=500/0 width=91)
                                  Output:["_col0"]
                                  TableScan [TS_245] (rows=500/0 width=91)
                                    default@cte_suggestion_1,cte_suggestion_1,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]
                            <-Map 22 [CONTAINS] llap
                              Reduce Output Operator [RS_252]
                                PartitionCols:_col0
                                Select Operator [SEL_250] (rows=500/0 width=91)
                                  Output:["_col0"]
                                  TableScan [TS_249] (rows=500/0 width=91)
                                    default@cte_suggestion_1,cte_suggestion_1,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]
                      Reduce Output Operator [RS_238]
                        Select Operator [SEL_233] (rows=2899/0 width=178)
                          Output:["key","value"]
                           Please refer to the previous Select Operator [SEL_230]
                      File Output Operator [FS_234]
                        table:{"name:":"default.b_n10"}
                         Please refer to the previous Select Operator [SEL_230]
                      Reduce Output Operator [RS_239]
                        Select Operator [SEL_235] (rows=2899/0 width=178)
                          Output:["key","value"]
                           Please refer to the previous Select Operator [SEL_230]
                      File Output Operator [FS_236]
                        table:{"name:":"default.c_n3"}
                         Please refer to the previous Select Operator [SEL_230]
                      Reduce Output Operator [RS_240]
                        Select Operator [SEL_237] (rows=2899/0 width=178)
                          Output:["key","value"]
                           Please refer to the previous Select Operator [SEL_230]
                    <-Reducer 26 [CONTAINS] llap
                      File Output Operator [FS_256]
                        table:{"name:":"default.a_n14"}
                        Select Operator [SEL_254] (rows=193/0 width=175)
                          Output:["_col0","_col1"]
                          Merge Join Operator [MERGEJOIN_253] (rows=193/0 width=175)
                            Conds:RS_72._col1=Union 28._col0(Inner),Output:["_col0","_col7"]
                          <-Reducer 25 [SIMPLE_EDGE] llap
                            SHUFFLE [RS_72]
                              PartitionCols:_col1
                              Merge Join Operator [MERGEJOIN_205] (rows=39/0 width=264)
                                Conds:RS_69.key=RS_70._col0(Inner),Output:["_col0","_col1","_col7"]
                              <-Map 24 [SIMPLE_EDGE] llap
                                SHUFFLE [RS_70]
                                  PartitionCols:_col0
                                  Select Operator [SEL_57] (rows=25/25 width=175)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_131] (rows=25/25 width=175)
                                      predicate:key is not null
                                      TableScan [TS_55] (rows=25/25 width=175)
                                        default@src1,y,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                              <-Map 32 [SIMPLE_EDGE] llap
                                SHUFFLE [RS_69]
                                  PartitionCols:key
                                  TableScan [TS_68] (rows=25/0 width=175)
                                    default@cte_suggestion_2,cte_suggestion_2,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                          <-Union 28 [SIMPLE_EDGE]
                            <-Map 27 [CONTAINS] llap
                              Reduce Output Operator [RS_268]
                                PartitionCols:_col0
                                Select Operator [SEL_266] (rows=25/0 width=89)
                                  Output:["_col0"]
                                  TableScan [TS_265] (rows=25/0 width=89)
                                    default@cte_suggestion_3,cte_suggestion_3,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]
                            <-Map 29 [CONTAINS] llap
                              Reduce Output Operator [RS_272]
                                PartitionCols:_col0
                                Select Operator [SEL_270] (rows=500/0 width=91)
                                  Output:["_col0"]
                                  TableScan [TS_269] (rows=500/0 width=91)
                                    default@cte_suggestion_1,cte_suggestion_1,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]
                            <-Map 30 [CONTAINS] llap
                              Reduce Output Operator [RS_276]
                                PartitionCols:_col0
                                Select Operator [SEL_274] (rows=500/0 width=91)
                                  Output:["_col0"]
                                  TableScan [TS_273] (rows=500/0 width=91)
                                    default@cte_suggestion_1,cte_suggestion_1,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]
                            <-Map 31 [CONTAINS] llap
                              Reduce Output Operator [RS_280]
                                PartitionCols:_col0
                                Select Operator [SEL_278] (rows=500/0 width=91)
                                  Output:["_col0"]
                                  TableScan [TS_277] (rows=500/0 width=91)
                                    default@cte_suggestion_1,cte_suggestion_1,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]
                      Reduce Output Operator [RS_262]
                        Select Operator [SEL_257] (rows=2899/0 width=178)
                          Output:["key","value"]
                           Please refer to the previous Select Operator [SEL_254]
                      File Output Operator [FS_258]
                        table:{"name:":"default.b_n10"}
                         Please refer to the previous Select Operator [SEL_254]
                      Reduce Output Operator [RS_263]
                        Select Operator [SEL_259] (rows=2899/0 width=178)
                          Output:["key","value"]
                           Please refer to the previous Select Operator [SEL_254]
                      File Output Operator [FS_260]
                        table:{"name:":"default.c_n3"}
                         Please refer to the previous Select Operator [SEL_254]
                      Reduce Output Operator [RS_264]
                        Select Operator [SEL_261] (rows=2899/0 width=178)
                          Output:["key","value"]
                           Please refer to the previous Select Operator [SEL_254]
                    <-Reducer 7 [CONTAINS] llap
                      File Output Operator [FS_216]
                        table:{"name:":"default.a_n14"}
                        Select Operator [SEL_214] (rows=66/0 width=177)
                          Output:["_col0","_col1"]
                          Merge Join Operator [MERGEJOIN_213] (rows=66/0 width=177)
                            Conds:RS_31._col7=Union 6._col0(Inner),Output:["_col1","_col6"]
                          <-Reducer 14 [SIMPLE_EDGE] llap
                            SHUFFLE [RS_31]
                              PartitionCols:_col7
                              Merge Join Operator [MERGEJOIN_203] (rows=39/0 width=266)
                                Conds:RS_28.key=RS_29.key(Inner),Output:["_col1","_col6","_col7"]
                              <-Map 13 [SIMPLE_EDGE] llap
                                SHUFFLE [RS_28]
                                  PartitionCols:key
                                  TableScan [TS_26] (rows=500/0 width=178)
                                    default@cte_suggestion_0,cte_suggestion_0,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                              <-Map 15 [SIMPLE_EDGE] llap
                                SHUFFLE [RS_29]
                                  PartitionCols:key
                                  TableScan [TS_27] (rows=25/0 width=175)
                                    default@cte_suggestion_2,cte_suggestion_2,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                          <-Union 6 [SIMPLE_EDGE]
                            <-Map 12 [CONTAINS] llap
                              Reduce Output Operator [RS_228]
                                PartitionCols:_col0
                                Select Operator [SEL_226] (rows=500/0 width=91)
                                  Output:["_col0"]
                                  TableScan [TS_225] (rows=500/0 width=91)
                                    default@cte_suggestion_1,cte_suggestion_1,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]
                            <-Map 5 [CONTAINS] llap
                              Reduce Output Operator [RS_212]
                                PartitionCols:_col0
                                Select Operator [SEL_210] (rows=25/0 width=89)
                                  Output:["_col0"]
                                  TableScan [TS_209] (rows=25/0 width=89)
                                    default@cte_suggestion_3,cte_suggestion_3,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]
                      Reduce Output Operator [RS_222]
                        Select Operator [SEL_217] (rows=2899/0 width=178)
                          Output:["key","value"]
                           Please refer to the previous Select Operator [SEL_214]
                      File Output Operator [FS_218]
                        table:{"name:":"default.b_n10"}
                         Please refer to the previous Select Operator [SEL_214]
                      Reduce Output Operator [RS_223]
                        Select Operator [SEL_219] (rows=2899/0 width=178)
                          Output:["key","value"]
                           Please refer to the previous Select Operator [SEL_214]
                      File Output Operator [FS_220]
                        table:{"name:":"default.c_n3"}
                         Please refer to the previous Select Operator [SEL_214]
                      Reduce Output Operator [RS_224]
                        Select Operator [SEL_221] (rows=2899/0 width=178)
                          Output:["key","value"]
                           Please refer to the previous Select Operator [SEL_214]
              Reducer 11 llap
              File Output Operator [FS_100]
                Select Operator [SEL_99] (rows=1/1 width=532)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                  Group By Operator [GBY_98] (rows=1/1 width=336)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(1)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col3)","max(VALUE._col4)","avg(VALUE._col5)","count(VALUE._col6)","compute_bit_vector_hll(VALUE._col6)"]
                  <- Please refer to the previous Union 8 [CUSTOM_SIMPLE_EDGE]
              Reducer 9 llap
              File Output Operator [FS_84]
                Select Operator [SEL_83] (rows=1/1 width=532)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                  Group By Operator [GBY_82] (rows=1/1 width=336)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(1)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col3)","max(VALUE._col4)","avg(VALUE._col5)","count(VALUE._col6)","compute_bit_vector_hll(VALUE._col6)"]
                  <- Please refer to the previous Union 8 [CUSTOM_SIMPLE_EDGE]
                Stage-2
                  Dependency Collection{}
                    Stage-1
                      Map 1 llap
                      File Output Operator [FS_3]
                        table:{"name:":"default.cte_suggestion_0"}
                        Select Operator [SEL_2] (rows=500/500 width=178)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_4] (rows=500/500 width=178)
                            predicate:key is not null
                            TableScan [TS_0] (rows=500/500 width=178)
                              default@src,y,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                Stage-0
                  Move Operator
                     Please refer to the previous Stage-1
                Stage-5
                  Dependency Collection{}
                    Stage-4
                      Map 2 llap
                      File Output Operator [FS_8]
                        table:{"name:":"default.cte_suggestion_2"}
                        Select Operator [SEL_7] (rows=25/25 width=175)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_9] (rows=25/25 width=175)
                            predicate:(key is not null and value is not null)
                            TableScan [TS_5] (rows=25/25 width=175)
                              default@src1,x,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                Stage-3
                  Move Operator
                     Please refer to the previous Stage-4
                Stage-8
                  Dependency Collection{}
                    Stage-7
                      Map 3 llap
                      File Output Operator [FS_13]
                        table:{"name:":"default.cte_suggestion_3"}
                        Select Operator [SEL_12] (rows=25/25 width=89)
                          Output:["_col0"]
                          Filter Operator [FIL_14] (rows=25/25 width=89)
                            predicate:value is not null
                            TableScan [TS_10] (rows=25/25 width=89)
                              default@src1,src1,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]
                Stage-6
                  Move Operator
                     Please refer to the previous Stage-7
                Stage-11
                  Dependency Collection{}
                    Stage-10
                      Map 4 llap
                      File Output Operator [FS_18]
                        table:{"name:":"default.cte_suggestion_1"}
                        Select Operator [SEL_17] (rows=500/500 width=91)
                          Output:["_col0"]
                          Filter Operator [FIL_19] (rows=500/500 width=91)
                            predicate:value is not null
                            TableScan [TS_15] (rows=500/500 width=91)
                              default@src,src,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]
                Stage-9
                  Move Operator
                     Please refer to the previous Stage-10
Stage-18
  Stats Work{}
    Stage-13
      Move Operator
        table:{"name:":"default.b_n10"}
         Please refer to the previous Stage-16
Stage-19
  Stats Work{}
    Stage-14
      Move Operator
        table:{"name:":"default.c_n3"}
         Please refer to the previous Stage-16

PREHOOK: query: FROM
( 
SELECT x.key as key, y.value as value from src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value) 
union
SELECT x.key as key, y.value as value from src x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src)z ON (x.value = z.value)
union
SELECT x.key as key, y.value as value from src1 x JOIN src1 y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src union select key, value from src)z ON (x.value = z.value)
) tmp
INSERT OVERWRITE TABLE a_n14 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE b_n10 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE c_n3 SELECT tmp.key, tmp.value
PREHOOK: type: QUERY
PREHOOK: Input: default@cte_suggestion_0
PREHOOK: Input: default@cte_suggestion_1
PREHOOK: Input: default@cte_suggestion_2
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
PREHOOK: Output: database:default
PREHOOK: Output: default@a_n14
PREHOOK: Output: default@b_n10
PREHOOK: Output: default@c_n3
PREHOOK: Output: default@cte_suggestion_0
PREHOOK: Output: default@cte_suggestion_1
PREHOOK: Output: default@cte_suggestion_2
#### A masked pattern was here ####
POSTHOOK: query: FROM
( 
SELECT x.key as key, y.value as value from src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value) 
union
SELECT x.key as key, y.value as value from src x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src)z ON (x.value = z.value)
union
SELECT x.key as key, y.value as value from src1 x JOIN src1 y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src union select key, value from src)z ON (x.value = z.value)
) tmp
INSERT OVERWRITE TABLE a_n14 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE b_n10 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE c_n3 SELECT tmp.key, tmp.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cte_suggestion_0
POSTHOOK: Input: default@cte_suggestion_1
POSTHOOK: Input: default@cte_suggestion_2
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
POSTHOOK: Output: database:default
POSTHOOK: Output: default@a_n14
POSTHOOK: Output: default@b_n10
POSTHOOK: Output: default@c_n3
POSTHOOK: Output: default@cte_suggestion_0
POSTHOOK: Output: default@cte_suggestion_1
POSTHOOK: Output: default@cte_suggestion_2
#### A masked pattern was here ####
PREHOOK: query: explain analyze
FROM
( 
SELECT x.key as key, y.value as value from src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value) 
union
SELECT x.key as key, y.value as value from src x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src)z ON (x.value = z.value)
union
SELECT x.key as key, y.value as value from src1 x JOIN src1 y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src union select key, value from src)z ON (x.value = z.value)
) tmp
INSERT OVERWRITE TABLE a_n14 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE b_n10 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE c_n3 SELECT tmp.key, tmp.value
PREHOOK: type: QUERY
PREHOOK: Input: default@cte_suggestion_0
PREHOOK: Input: default@cte_suggestion_1
PREHOOK: Input: default@cte_suggestion_2
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
PREHOOK: Output: default@a_n14
PREHOOK: Output: default@b_n10
PREHOOK: Output: default@c_n3
POSTHOOK: query: explain analyze
FROM
( 
SELECT x.key as key, y.value as value from src1 x JOIN src y ON (x.key = y.key) 
JOIN (select * from src1 union select * from src)z ON (x.value = z.value) 
union
SELECT x.key as key, y.value as value from src x JOIN src y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src)z ON (x.value = z.value)
union
SELECT x.key as key, y.value as value from src1 x JOIN src1 y ON (x.key = y.key) 
JOIN (select key, value from src1 union select key, value from src union select key, value from src union select key, value from src)z ON (x.value = z.value)
) tmp
INSERT OVERWRITE TABLE a_n14 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE b_n10 SELECT tmp.key, tmp.value
INSERT OVERWRITE TABLE c_n3 SELECT tmp.key, tmp.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cte_suggestion_0
POSTHOOK: Input: default@cte_suggestion_1
POSTHOOK: Input: default@cte_suggestion_2
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
POSTHOOK: Output: default@a_n14
POSTHOOK: Output: default@b_n10
POSTHOOK: Output: default@c_n3
Plan optimized by CBO.

Vertex dependency in Stage-12
Map 15 <- Union 5 (CONTAINS)
Map 22 <- Union 23 (CONTAINS)
Map 27 <- Union 23 (CONTAINS)
Map 28 <- Union 25 (CONTAINS)
Map 33 <- Union 34 (CONTAINS)
Map 4 <- Union 5 (CONTAINS)
Map 40 <- Union 34 (CONTAINS)
Map 41 <- Union 36 (CONTAINS)
Map 42 <- Union 38 (CONTAINS)
Reducer 11 <- Union 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 16 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 24 <- Union 23 (SIMPLE_EDGE), Union 25 (CONTAINS)
Reducer 26 <- Union 25 (SIMPLE_EDGE)
Reducer 31 <- Map 30 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE)
Reducer 32 <- Reducer 31 (SIMPLE_EDGE), Reducer 39 (SIMPLE_EDGE), Union 10 (CONTAINS)
Reducer 35 <- Union 34 (SIMPLE_EDGE), Union 36 (CONTAINS)
Reducer 37 <- Union 36 (SIMPLE_EDGE), Union 38 (CONTAINS)
Reducer 39 <- Union 38 (SIMPLE_EDGE)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 17 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 9 <- Union 10 (CONTAINS), Union 8 (SIMPLE_EDGE)

Stage-14
  Stats Work{}
    Stage-9
      Move Operator
        table:{"name:":"default.a_n14"}
        Stage-13
          Dependency Collection{}
            Stage-12
              Reducer 12 llap
              File Output Operator [FS_122]
                Select Operator [SEL_121] (rows=1/1 width=532)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                  Group By Operator [GBY_120] (rows=1/1 width=336)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(1)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col3)","max(VALUE._col4)","avg(VALUE._col5)","count(VALUE._col6)","compute_bit_vector_hll(VALUE._col6)"]
                  <-Reducer 11 [CUSTOM_SIMPLE_EDGE] llap
                    PARTITION_ONLY_SHUFFLE [RS_119]
                      Select Operator [SEL_118] (rows=2899/0 width=178)
                        Output:["key","value"]
                        Group By Operator [GBY_113] (rows=2899/0 width=178)
                          Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                        <-Union 10 [SIMPLE_EDGE]
                          <-Reducer 32 [CONTAINS] llap
                            Reduce Output Operator [RS_287]
                              PartitionCols:_col0, _col1
                              Select Operator [SEL_285] (rows=193/0 width=175)
                                Output:["_col0","_col1"]
                                Merge Join Operator [MERGEJOIN_284] (rows=193/0 width=175)
                                  Conds:RS_105._col1=RS_106._col0(Inner),Output:["_col0","_col7"]
                                <-Reducer 31 [SIMPLE_EDGE] llap
                                  SHUFFLE [RS_105]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_243] (rows=39/0 width=264)
                                      Conds:RS_102.key=RS_103._col0(Inner),Output:["_col0","_col1","_col7"]
                                    <-Map 30 [SIMPLE_EDGE] llap
                                      SHUFFLE [RS_103]
                                        PartitionCols:_col0
                                        Select Operator [SEL_73] (rows=25/25 width=175)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_169] (rows=25/25 width=175)
                                            predicate:key is not null
                                            TableScan [TS_71] (rows=25/25 width=175)
                                              default@src1,y,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                    <-Map 43 [SIMPLE_EDGE] llap
                                      SHUFFLE [RS_102]
                                        PartitionCols:key
                                        TableScan [TS_101] (rows=25/0 width=175)
                                          default@cte_suggestion_2,cte_suggestion_2,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                <-Reducer 39 [SIMPLE_EDGE] llap
                                  SHUFFLE [RS_106]
                                    PartitionCols:_col0
                                    Select Operator [SEL_100] (rows=1525/22 width=91)
                                      Output:["_col0"]
                                      Group By Operator [GBY_99] (rows=1525/22 width=178)
                                        Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                      <-Union 38 [SIMPLE_EDGE]
                                        <-Map 42 [CONTAINS] llap
                                          Reduce Output Operator [RS_312]
                                            PartitionCols:_col1, _col0
                                            Select Operator [SEL_310] (rows=500/0 width=178)
                                              Output:["_col0","_col1"]
                                              TableScan [TS_309] (rows=500/0 width=178)
                                                default@cte_suggestion_1,cte_suggestion_1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                        <-Reducer 37 [CONTAINS] llap
                                          Reduce Output Operator [RS_300]
                                            PartitionCols:_col1, _col0
                                            Select Operator [SEL_298] (rows=1025/22 width=178)
                                              Output:["_col0","_col1"]
                                              Group By Operator [GBY_297] (rows=1025/22 width=178)
                                                Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                              <-Union 36 [SIMPLE_EDGE]
                                                <-Map 41 [CONTAINS] llap
                                                  Reduce Output Operator [RS_308]
                                                    PartitionCols:_col1, _col0
                                                    Select Operator [SEL_306] (rows=500/0 width=178)
                                                      Output:["_col0","_col1"]
                                                      TableScan [TS_305] (rows=500/0 width=178)
                                                        default@cte_suggestion_1,cte_suggestion_1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                                <-Reducer 35 [CONTAINS] llap
                                                  Reduce Output Operator [RS_296]
                                                    PartitionCols:_col1, _col0
                                                    Select Operator [SEL_294] (rows=525/22 width=178)
                                                      Output:["_col0","_col1"]
                                                      Group By Operator [GBY_293] (rows=525/22 width=178)
                                                        Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                                      <-Union 34 [SIMPLE_EDGE]
                                                        <-Map 33 [CONTAINS] llap
                                                          Reduce Output Operator [RS_292]
                                                            PartitionCols:_col1, _col0
                                                            Select Operator [SEL_290] (rows=25/25 width=175)
                                                              Output:["_col0","_col1"]
                                                              Filter Operator [FIL_289] (rows=25/25 width=175)
                                                                predicate:value is not null
                                                                TableScan [TS_288] (rows=25/25 width=175)
                                                                  default@src1,src1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                                        <-Map 40 [CONTAINS] llap
                                                          Reduce Output Operator [RS_304]
                                                            PartitionCols:_col1, _col0
                                                            Select Operator [SEL_302] (rows=500/0 width=178)
                                                              Output:["_col0","_col1"]
                                                              TableScan [TS_301] (rows=500/0 width=178)
                                                                default@cte_suggestion_1,cte_suggestion_1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                          <-Reducer 9 [CONTAINS] llap
                            Reduce Output Operator [RS_258]
                              PartitionCols:_col0, _col1
                              Group By Operator [GBY_256] (rows=2706/0 width=178)
                                Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                              <-Union 8 [SIMPLE_EDGE]
                                <-Reducer 21 [CONTAINS] llap
                                  Reduce Output Operator [RS_266]
                                    PartitionCols:_col0, _col1
                                    Select Operator [SEL_264] (rows=2640/0 width=178)
                                      Output:["_col0","_col1"]
                                      Merge Join Operator [MERGEJOIN_263] (rows=2640/0 width=178)
                                        Conds:RS_61._col1=RS_62._col0(Inner),Output:["_col0","_col3"]
                                      <-Reducer 20 [SIMPLE_EDGE] llap
                                        SHUFFLE [RS_61]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_242] (rows=791/0 width=269)
                                            Conds:RS_58._col0=RS_59.key(Inner),Output:["_col0","_col1","_col3"]
                                          <-Map 19 [SIMPLE_EDGE] llap
                                            SHUFFLE [RS_58]
                                              PartitionCols:_col0
                                              Select Operator [SEL_37] (rows=500/0 width=178)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_164] (rows=500/0 width=178)
                                                  predicate:value is not null
                                                  TableScan [TS_35] (rows=500/0 width=178)
                                                    default@cte_suggestion_0,cte_suggestion_0,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                          <-Map 29 [SIMPLE_EDGE] llap
                                            SHUFFLE [RS_59]
                                              PartitionCols:key
                                              TableScan [TS_57] (rows=500/0 width=178)
                                                default@cte_suggestion_0,cte_suggestion_0,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                      <-Reducer 26 [SIMPLE_EDGE] llap
                                        SHUFFLE [RS_62]
                                          PartitionCols:_col0
                                          Select Operator [SEL_56] (rows=1025/22 width=91)
                                            Output:["_col0"]
                                            Group By Operator [GBY_55] (rows=1025/22 width=178)
                                              Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                            <-Union 25 [SIMPLE_EDGE]
                                              <-Map 28 [CONTAINS] llap
                                                Reduce Output Operator [RS_283]
                                                  PartitionCols:_col1, _col0
                                                  Select Operator [SEL_281] (rows=500/0 width=178)
                                                    Output:["_col0","_col1"]
                                                    TableScan [TS_280] (rows=500/0 width=178)
                                                      default@cte_suggestion_1,cte_suggestion_1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                              <-Reducer 24 [CONTAINS] llap
                                                Reduce Output Operator [RS_275]
                                                  PartitionCols:_col1, _col0
                                                  Select Operator [SEL_273] (rows=525/22 width=178)
                                                    Output:["_col0","_col1"]
                                                    Group By Operator [GBY_272] (rows=525/22 width=178)
                                                      Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                                    <-Union 23 [SIMPLE_EDGE]
                                                      <-Map 22 [CONTAINS] llap
                                                        Reduce Output Operator [RS_271]
                                                          PartitionCols:_col1, _col0
                                                          Select Operator [SEL_269] (rows=25/25 width=175)
                                                            Output:["_col0","_col1"]
                                                            Filter Operator [FIL_268] (rows=25/25 width=175)
                                                              predicate:value is not null
                                                              TableScan [TS_267] (rows=25/25 width=175)
                                                                default@src1,src1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                                      <-Map 27 [CONTAINS] llap
                                                        Reduce Output Operator [RS_279]
                                                          PartitionCols:_col1, _col0
                                                          Select Operator [SEL_277] (rows=500/0 width=178)
                                                            Output:["_col0","_col1"]
                                                            TableScan [TS_276] (rows=500/0 width=178)
                                                              default@cte_suggestion_1,cte_suggestion_1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                <-Reducer 7 [CONTAINS] llap
                                  Reduce Output Operator [RS_255]
                                    PartitionCols:_col0, _col1
                                    Select Operator [SEL_253] (rows=66/0 width=177)
                                      Output:["_col0","_col1"]
                                      Merge Join Operator [MERGEJOIN_252] (rows=66/0 width=177)
                                        Conds:RS_31._col7=RS_32._col0(Inner),Output:["_col1","_col6"]
                                      <-Reducer 17 [SIMPLE_EDGE] llap
                                        SHUFFLE [RS_31]
                                          PartitionCols:_col7
                                          Merge Join Operator [MERGEJOIN_241] (rows=39/0 width=266)
                                            Conds:RS_28.key=RS_29.key(Inner),Output:["_col1","_col6","_col7"]
                                          <-Map 16 [SIMPLE_EDGE] llap
                                            SHUFFLE [RS_28]
                                              PartitionCols:key
                                              TableScan [TS_26] (rows=500/0 width=178)
                                                default@cte_suggestion_0,cte_suggestion_0,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                          <-Map 18 [SIMPLE_EDGE] llap
                                            SHUFFLE [RS_29]
                                              PartitionCols:key
                                              TableScan [TS_27] (rows=25/0 width=175)
                                                default@cte_suggestion_2,cte_suggestion_2,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                      <-Reducer 6 [SIMPLE_EDGE] llap
                                        SHUFFLE [RS_32]
                                          PartitionCols:_col0
                                          Select Operator [SEL_25] (rows=525/22 width=91)
                                            Output:["_col0"]
                                            Group By Operator [GBY_24] (rows=525/22 width=178)
                                              Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                            <-Union 5 [SIMPLE_EDGE]
                                              <-Map 15 [CONTAINS] llap
                                                Reduce Output Operator [RS_262]
                                                  PartitionCols:_col1, _col0
                                                  Select Operator [SEL_260] (rows=500/0 width=178)
                                                    Output:["_col0","_col1"]
                                                    TableScan [TS_259] (rows=500/0 width=178)
                                                      default@cte_suggestion_1,cte_suggestion_1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                                              <-Map 4 [CONTAINS] llap
                                                Reduce Output Operator [RS_251]
                                                  PartitionCols:_col1, _col0
                                                  Select Operator [SEL_249] (rows=25/25 width=175)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_248] (rows=25/25 width=175)
                                                      predicate:value is not null
                                                      TableScan [TS_247] (rows=25/25 width=175)
                                                        default@src1,src1,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
              Reducer 13 llap
              File Output Operator [FS_130]
                Select Operator [SEL_129] (rows=1/1 width=532)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                  Group By Operator [GBY_128] (rows=1/1 width=336)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(1)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col3)","max(VALUE._col4)","avg(VALUE._col5)","count(VALUE._col6)","compute_bit_vector_hll(VALUE._col6)"]
                  <-Reducer 11 [CUSTOM_SIMPLE_EDGE] llap
                    PARTITION_ONLY_SHUFFLE [RS_127]
                      Select Operator [SEL_126] (rows=2899/0 width=178)
                        Output:["key","value"]
                         Please refer to the previous Group By Operator [GBY_113]
              Reducer 14 llap
              File Output Operator [FS_138]
                Select Operator [SEL_137] (rows=1/1 width=532)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                  Group By Operator [GBY_136] (rows=1/1 width=336)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(1)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col3)","max(VALUE._col4)","avg(VALUE._col5)","count(VALUE._col6)","compute_bit_vector_hll(VALUE._col6)"]
                  <-Reducer 11 [CUSTOM_SIMPLE_EDGE] llap
                    PARTITION_ONLY_SHUFFLE [RS_135]
                      Select Operator [SEL_134] (rows=2899/0 width=178)
                        Output:["key","value"]
                         Please refer to the previous Group By Operator [GBY_113]
                Stage-2
                  Dependency Collection{}
                    Stage-1
                      Map 1 llap
                      File Output Operator [FS_3]
                        table:{"name:":"default.cte_suggestion_0"}
                        Select Operator [SEL_2] (rows=500/500 width=178)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_4] (rows=500/500 width=178)
                            predicate:key is not null
                            TableScan [TS_0] (rows=500/500 width=178)
                              default@src,y,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                Stage-0
                  Move Operator
                     Please refer to the previous Stage-1
                Stage-5
                  Dependency Collection{}
                    Stage-4
                      Map 2 llap
                      File Output Operator [FS_8]
                        table:{"name:":"default.cte_suggestion_2"}
                        Select Operator [SEL_7] (rows=25/25 width=175)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_9] (rows=25/25 width=175)
                            predicate:(key is not null and value is not null)
                            TableScan [TS_5] (rows=25/25 width=175)
                              default@src1,x,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                Stage-3
                  Move Operator
                     Please refer to the previous Stage-4
                Stage-8
                  Dependency Collection{}
                    Stage-7
                      Map 3 llap
                      File Output Operator [FS_13]
                        table:{"name:":"default.cte_suggestion_1"}
                        Select Operator [SEL_12] (rows=500/500 width=178)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_14] (rows=500/500 width=178)
                            predicate:value is not null
                            TableScan [TS_10] (rows=500/500 width=178)
                              default@src,src,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                Stage-6
                  Move Operator
                     Please refer to the previous Stage-7
Stage-15
  Stats Work{}
    Stage-10
      Move Operator
        table:{"name:":"default.b_n10"}
         Please refer to the previous Stage-13
Stage-16
  Stats Work{}
    Stage-11
      Move Operator
        table:{"name:":"default.c_n3"}
         Please refer to the previous Stage-13

PREHOOK: query: CREATE TABLE DEST1_n105(key STRING, value STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@DEST1_n105
POSTHOOK: query: CREATE TABLE DEST1_n105(key STRING, value STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@DEST1_n105
PREHOOK: query: CREATE TABLE DEST2_n29(key STRING, val1 STRING, val2 STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@DEST2_n29
POSTHOOK: query: CREATE TABLE DEST2_n29(key STRING, val1 STRING, val2 STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@DEST2_n29
PREHOOK: query: FROM (select 'tst1' as key, cast(count(1) as string) as value from src s1
                         UNION DISTINCT  
      select s2.key as key, s2.value as value from src s2) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key, unionsrc_n3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n105
PREHOOK: Output: default@dest2_n29
POSTHOOK: query: FROM (select 'tst1' as key, cast(count(1) as string) as value from src s1
                         UNION DISTINCT  
      select s2.key as key, s2.value as value from src s2) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key, unionsrc_n3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n105
POSTHOOK: Output: default@dest2_n29
PREHOOK: query: explain analyze 
FROM (select 'tst1' as key, cast(count(1) as string) as value from src s1
                         UNION DISTINCT  
      select s2.key as key, s2.value as value from src s2) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key, unionsrc_n3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n105
PREHOOK: Output: default@dest2_n29
POSTHOOK: query: explain analyze 
FROM (select 'tst1' as key, cast(count(1) as string) as value from src s1
                         UNION DISTINCT  
      select s2.key as key, s2.value as value from src s2) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key, unionsrc_n3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n105
POSTHOOK: Output: default@dest2_n29
Plan optimized by CBO.

Vertex dependency in root stage
Map 8 <- Union 3 (CONTAINS)
Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 4 <- Union 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)

Stage-4
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.dest1_n105"}
        Stage-3
          Dependency Collection{}
            Stage-2
              Reducer 6 llap
              File Output Operator [FS_24]
                Select Operator [SEL_23] (rows=1/1 width=532)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                  Group By Operator [GBY_22] (rows=1/1 width=336)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(1)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col3)","max(VALUE._col4)","avg(VALUE._col5)","count(VALUE._col6)","compute_bit_vector_hll(VALUE._col6)"]
                  <-Reducer 5 [CUSTOM_SIMPLE_EDGE] llap
                    File Output Operator [FS_18]
                      table:{"name:":"default.dest1_n105"}
                      Select Operator [SEL_16] (rows=316/310 width=272)
                        Output:["_col0","_col1"]
                        Group By Operator [GBY_15] (rows=316/310 width=96)
                          Output:["_col0","_col1"],aggregations:["count(DISTINCT KEY._col1:0._col0)"],keys:KEY._col0
                        <-Reducer 4 [SIMPLE_EDGE] llap
                          PARTITION_ONLY_SHUFFLE [RS_14]
                            PartitionCols:_col0
                            Group By Operator [GBY_11] (rows=501/310 width=272)
                              Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                            <-Union 3 [SIMPLE_EDGE]
                              <-Map 8 [CONTAINS] llap
                                Reduce Output Operator [RS_44]
                                  PartitionCols:_col0, _col1
                                  Select Operator [SEL_42] (rows=500/500 width=178)
                                    Output:["_col0","_col1"]
                                    TableScan [TS_41] (rows=500/500 width=178)
                                      default@src,s2,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                              <-Reducer 2 [CONTAINS] llap
                                Reduce Output Operator [RS_40]
                                  PartitionCols:_col0, _col1
                                  Select Operator [SEL_38] (rows=1/1 width=272)
                                    Output:["_col0","_col1"]
                                    Group By Operator [GBY_37] (rows=1/1 width=8)
                                      Output:["_col0"],aggregations:["count()"]
                                    <-Map 1 [CUSTOM_SIMPLE_EDGE] llap
                                      PARTITION_ONLY_SHUFFLE [RS_2]
                                        Select Operator [SEL_1] (rows=500/500 width=10)
                                          TableScan [TS_0] (rows=500/500 width=10)
                                            default@src,s1,Tbl:COMPLETE,Col:COMPLETE
                    PARTITION_ONLY_SHUFFLE [RS_21]
                      Select Operator [SEL_20] (rows=316/310 width=272)
                        Output:["key","value"]
                         Please refer to the previous Select Operator [SEL_16]
              Reducer 7 llap
              File Output Operator [FS_36]
                Select Operator [SEL_35] (rows=1/1 width=798)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                  Group By Operator [GBY_34] (rows=1/1 width=500)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(1)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col3)","max(VALUE._col4)","avg(VALUE._col5)","count(VALUE._col6)","compute_bit_vector_hll(VALUE._col6)","max(VALUE._col7)","avg(VALUE._col8)","count(VALUE._col9)","compute_bit_vector_hll(VALUE._col9)"]
                  <-Reducer 4 [CUSTOM_SIMPLE_EDGE] llap
                    PARTITION_ONLY_SHUFFLE [RS_33]
                      Select Operator [SEL_32] (rows=501/310 width=456)
                        Output:["key","val1","val2"]
                        Select Operator [SEL_28] (rows=501/310 width=456)
                          Output:["_col0","_col1","_col2"]
                          Group By Operator [GBY_27] (rows=501/310 width=280)
                            Output:["_col0","_col1","_col2"],aggregations:["count(DISTINCT substr(_col1, 5))"],keys:_col0, _col1
                             Please refer to the previous Group By Operator [GBY_11]
Stage-5
  Stats Work{}
    Stage-1
      Move Operator
        table:{"name:":"default.dest2_n29"}
         Please refer to the previous Stage-3

PREHOOK: query: FROM UNIQUEJOIN PRESERVE src a_n14 (a_n14.key), PRESERVE src1 b_n10 (b_n10.key), PRESERVE srcpart c_n3 (c_n3.key) SELECT a_n14.key, b_n10.key, c_n3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
PREHOOK: Input: default@srcpart
PREHOOK: Input: default@srcpart@ds=2008-04-08/hr=11
PREHOOK: Input: default@srcpart@ds=2008-04-08/hr=12
PREHOOK: Input: default@srcpart@ds=2008-04-09/hr=11
PREHOOK: Input: default@srcpart@ds=2008-04-09/hr=12
#### A masked pattern was here ####
POSTHOOK: query: FROM UNIQUEJOIN PRESERVE src a_n14 (a_n14.key), PRESERVE src1 b_n10 (b_n10.key), PRESERVE srcpart c_n3 (c_n3.key) SELECT a_n14.key, b_n10.key, c_n3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
POSTHOOK: Input: default@srcpart
POSTHOOK: Input: default@srcpart@ds=2008-04-08/hr=11
POSTHOOK: Input: default@srcpart@ds=2008-04-08/hr=12
POSTHOOK: Input: default@srcpart@ds=2008-04-09/hr=11
POSTHOOK: Input: default@srcpart@ds=2008-04-09/hr=12
#### A masked pattern was here ####
PREHOOK: query: explain analyze FROM UNIQUEJOIN PRESERVE src a_n14 (a_n14.key), PRESERVE src1 b_n10 (b_n10.key), PRESERVE srcpart c_n3 (c_n3.key) SELECT a_n14.key, b_n10.key, c_n3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
PREHOOK: Input: default@srcpart
PREHOOK: Input: default@srcpart@ds=2008-04-08/hr=11
PREHOOK: Input: default@srcpart@ds=2008-04-08/hr=12
PREHOOK: Input: default@srcpart@ds=2008-04-09/hr=11
PREHOOK: Input: default@srcpart@ds=2008-04-09/hr=12
#### A masked pattern was here ####
POSTHOOK: query: explain analyze FROM UNIQUEJOIN PRESERVE src a_n14 (a_n14.key), PRESERVE src1 b_n10 (b_n10.key), PRESERVE srcpart c_n3 (c_n3.key) SELECT a_n14.key, b_n10.key, c_n3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
POSTHOOK: Input: default@srcpart
POSTHOOK: Input: default@srcpart@ds=2008-04-08/hr=11
POSTHOOK: Input: default@srcpart@ds=2008-04-08/hr=12
POSTHOOK: Input: default@srcpart@ds=2008-04-09/hr=11
POSTHOOK: Input: default@srcpart@ds=2008-04-09/hr=12
#### A masked pattern was here ####
Plan not optimized by CBO due to missing feature [Unique_join].

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 2 llap
      File Output Operator [FS_8]
        Select Operator [SEL_7] (rows=250/4122 width=260)
          Output:["_col0","_col1","_col2"]
          Merge Join Operator [MERGEJOIN_9] (rows=250/4122 width=260)
            Conds:RS_3.key=RS_3.key(Unique),RS_3.key=RS_3.key(Unique),RS_3.key=RS_3.key(Unique),Output:["_col0","_col6","_col12"]
          <-Map 1 [SIMPLE_EDGE] llap
            SHUFFLE [RS_3]
              PartitionCols:key
              TableScan [TS_0] (rows=500/500 width=87)
                default@src,a_n14,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
          <-Map 3 [SIMPLE_EDGE] llap
            SHUFFLE [RS_4]
              PartitionCols:key
              TableScan [TS_1] (rows=25/25 width=86)
                default@src1,b_n10,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
          <-Map 4 [SIMPLE_EDGE] llap
            SHUFFLE [RS_5]
              PartitionCols:key
              TableScan [TS_2] (rows=2000/2000 width=87)
                default@srcpart,c_n3,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]

PREHOOK: query: FROM (
      select key, value from (
      select 'tst1' as key, cast(count(1) as string) as value, 'tst1' as value2 from src s1
                         UNION all 
      select s2.key as key, s2.value as value, 'tst1' as value2 from src s2) unionsub_n10
                         UNION all
      select key, value from src s0
                             ) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) 
GROUP BY unionsrc_n3.key, unionsrc_n3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n105
PREHOOK: Output: default@dest2_n29
POSTHOOK: query: FROM (
      select key, value from (
      select 'tst1' as key, cast(count(1) as string) as value, 'tst1' as value2 from src s1
                         UNION all 
      select s2.key as key, s2.value as value, 'tst1' as value2 from src s2) unionsub_n10
                         UNION all
      select key, value from src s0
                             ) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) 
GROUP BY unionsrc_n3.key, unionsrc_n3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n105
POSTHOOK: Output: default@dest2_n29
PREHOOK: query: explain analyze
FROM (
      select key, value from (
      select 'tst1' as key, cast(count(1) as string) as value, 'tst1' as value2 from src s1
                         UNION all 
      select s2.key as key, s2.value as value, 'tst1' as value2 from src s2) unionsub_n10
                         UNION all
      select key, value from src s0
                             ) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) 
GROUP BY unionsrc_n3.key, unionsrc_n3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n105
PREHOOK: Output: default@dest2_n29
POSTHOOK: query: explain analyze
FROM (
      select key, value from (
      select 'tst1' as key, cast(count(1) as string) as value, 'tst1' as value2 from src s1
                         UNION all 
      select s2.key as key, s2.value as value, 'tst1' as value2 from src s2) unionsub_n10
                         UNION all
      select key, value from src s0
                             ) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) 
GROUP BY unionsrc_n3.key, unionsrc_n3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n105
POSTHOOK: Output: default@dest2_n29
Plan optimized by CBO.

Vertex dependency in root stage
Map 8 <- Union 3 (CONTAINS)
Map 9 <- Union 3 (CONTAINS)
Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 4 <- Union 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Union 3 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)

Stage-4
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.dest1_n105"}
        Stage-3
          Dependency Collection{}
            Stage-2
              Reducer 5 llap
              File Output Operator [FS_22]
                Select Operator [SEL_21] (rows=1/1 width=532)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                  Group By Operator [GBY_20] (rows=1/1 width=336)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(1)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col3)","max(VALUE._col4)","avg(VALUE._col5)","count(VALUE._col6)","compute_bit_vector_hll(VALUE._col6)"]
                  <-Reducer 4 [CUSTOM_SIMPLE_EDGE] llap
                    File Output Operator [FS_16]
                      table:{"name:":"default.dest1_n105"}
                      Select Operator [SEL_14] (rows=316/310 width=272)
                        Output:["_col0","_col1"]
                        Group By Operator [GBY_13] (rows=316/310 width=96)
                          Output:["_col0","_col1"],aggregations:["count(DISTINCT KEY._col1:0._col0)"],keys:KEY._col0
                        <-Union 3 [SIMPLE_EDGE]
                          <-Map 8 [CONTAINS] llap
                            Reduce Output Operator [RS_43]
                              PartitionCols:_col0
                              Select Operator [SEL_41] (rows=500/500 width=178)
                                Output:["_col0","_col1"]
                                TableScan [TS_40] (rows=500/500 width=178)
                                  default@src,s2,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                            Reduce Output Operator [RS_44]
                              PartitionCols:_col0, _col1
                               Please refer to the previous Select Operator [SEL_41]
                          <-Map 9 [CONTAINS] llap
                            Reduce Output Operator [RS_48]
                              PartitionCols:_col0
                              Select Operator [SEL_46] (rows=500/500 width=178)
                                Output:["_col0","_col1"]
                                TableScan [TS_45] (rows=500/500 width=178)
                                  default@src,s0,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                            Reduce Output Operator [RS_49]
                              PartitionCols:_col0, _col1
                               Please refer to the previous Select Operator [SEL_46]
                          <-Reducer 2 [CONTAINS] llap
                            Reduce Output Operator [RS_38]
                              PartitionCols:_col0
                              Select Operator [SEL_36] (rows=1/1 width=272)
                                Output:["_col0","_col1"]
                                Group By Operator [GBY_35] (rows=1/1 width=8)
                                  Output:["_col0"],aggregations:["count()"]
                                <-Map 1 [CUSTOM_SIMPLE_EDGE] llap
                                  PARTITION_ONLY_SHUFFLE [RS_2]
                                    Select Operator [SEL_1] (rows=500/500 width=10)
                                      TableScan [TS_0] (rows=500/500 width=10)
                                        default@src,s1,Tbl:COMPLETE,Col:COMPLETE
                            Reduce Output Operator [RS_39]
                              PartitionCols:_col0, _col1
                               Please refer to the previous Select Operator [SEL_36]
                    PARTITION_ONLY_SHUFFLE [RS_19]
                      Select Operator [SEL_18] (rows=316/310 width=272)
                        Output:["key","value"]
                         Please refer to the previous Select Operator [SEL_14]
              Reducer 7 llap
              File Output Operator [FS_34]
                Select Operator [SEL_33] (rows=1/1 width=798)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                  Group By Operator [GBY_32] (rows=1/1 width=500)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(1)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col3)","max(VALUE._col4)","avg(VALUE._col5)","count(VALUE._col6)","compute_bit_vector_hll(VALUE._col6)","max(VALUE._col7)","avg(VALUE._col8)","count(VALUE._col9)","compute_bit_vector_hll(VALUE._col9)"]
                  <-Reducer 6 [CUSTOM_SIMPLE_EDGE] llap
                    File Output Operator [FS_28]
                      table:{"name:":"default.dest2_n29"}
                      Select Operator [SEL_26] (rows=1001/310 width=456)
                        Output:["_col0","_col1","_col2"]
                        Group By Operator [GBY_25] (rows=1001/310 width=280)
                          Output:["_col0","_col1","_col2"],aggregations:["count(DISTINCT KEY._col2:0._col0)"],keys:KEY._col0, KEY._col1
                        <- Please refer to the previous Union 3 [SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_31]
                      Select Operator [SEL_30] (rows=1001/310 width=456)
                        Output:["key","val1","val2"]
                         Please refer to the previous Select Operator [SEL_26]
Stage-5
  Stats Work{}
    Stage-1
      Move Operator
        table:{"name:":"default.dest2_n29"}
         Please refer to the previous Stage-3

PREHOOK: query: FROM (
      select 'tst1' as key, cast(count(1) as string) as value, 'tst1' as value2 from src s1
                         UNION all 
      select s2.key as key, s2.value as value, 'tst1' as value2 from src s2
                             ) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) 
GROUP BY unionsrc_n3.key, unionsrc_n3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n105
PREHOOK: Output: default@dest2_n29
POSTHOOK: query: FROM (
      select 'tst1' as key, cast(count(1) as string) as value, 'tst1' as value2 from src s1
                         UNION all 
      select s2.key as key, s2.value as value, 'tst1' as value2 from src s2
                             ) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) 
GROUP BY unionsrc_n3.key, unionsrc_n3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n105
POSTHOOK: Output: default@dest2_n29
PREHOOK: query: explain analyze
FROM (
      select 'tst1' as key, cast(count(1) as string) as value, 'tst1' as value2 from src s1
                         UNION all 
      select s2.key as key, s2.value as value, 'tst1' as value2 from src s2
                             ) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) 
GROUP BY unionsrc_n3.key, unionsrc_n3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n105
PREHOOK: Output: default@dest2_n29
POSTHOOK: query: explain analyze
FROM (
      select 'tst1' as key, cast(count(1) as string) as value, 'tst1' as value2 from src s1
                         UNION all 
      select s2.key as key, s2.value as value, 'tst1' as value2 from src s2
                             ) unionsrc_n3
INSERT OVERWRITE TABLE DEST1_n105 SELECT unionsrc_n3.key, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) GROUP BY unionsrc_n3.key
INSERT OVERWRITE TABLE DEST2_n29 SELECT unionsrc_n3.key, unionsrc_n3.value, COUNT(DISTINCT SUBSTR(unionsrc_n3.value,5)) 
GROUP BY unionsrc_n3.key, unionsrc_n3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n105
POSTHOOK: Output: default@dest2_n29
Plan optimized by CBO.

Vertex dependency in root stage
Map 8 <- Union 3 (CONTAINS)
Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 4 <- Union 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Union 3 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)

Stage-4
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.dest1_n105"}
        Stage-3
          Dependency Collection{}
            Stage-2
              Reducer 5 llap
              File Output Operator [FS_20]
                Select Operator [SEL_19] (rows=1/1 width=532)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                  Group By Operator [GBY_18] (rows=1/1 width=336)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(1)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col3)","max(VALUE._col4)","avg(VALUE._col5)","count(VALUE._col6)","compute_bit_vector_hll(VALUE._col6)"]
                  <-Reducer 4 [CUSTOM_SIMPLE_EDGE] llap
                    File Output Operator [FS_14]
                      table:{"name:":"default.dest1_n105"}
                      Select Operator [SEL_12] (rows=316/310 width=272)
                        Output:["_col0","_col1"]
                        Group By Operator [GBY_11] (rows=316/310 width=96)
                          Output:["_col0","_col1"],aggregations:["count(DISTINCT KEY._col1:0._col0)"],keys:KEY._col0
                        <-Union 3 [SIMPLE_EDGE]
                          <-Map 8 [CONTAINS] llap
                            Reduce Output Operator [RS_41]
                              PartitionCols:_col0
                              Select Operator [SEL_39] (rows=500/500 width=178)
                                Output:["_col0","_col1"]
                                TableScan [TS_38] (rows=500/500 width=178)
                                  default@src,s2,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                            Reduce Output Operator [RS_42]
                              PartitionCols:_col0, _col1
                               Please refer to the previous Select Operator [SEL_39]
                          <-Reducer 2 [CONTAINS] llap
                            Reduce Output Operator [RS_36]
                              PartitionCols:_col0
                              Select Operator [SEL_34] (rows=1/1 width=272)
                                Output:["_col0","_col1"]
                                Group By Operator [GBY_33] (rows=1/1 width=8)
                                  Output:["_col0"],aggregations:["count()"]
                                <-Map 1 [CUSTOM_SIMPLE_EDGE] llap
                                  PARTITION_ONLY_SHUFFLE [RS_2]
                                    Select Operator [SEL_1] (rows=500/500 width=10)
                                      TableScan [TS_0] (rows=500/500 width=10)
                                        default@src,s1,Tbl:COMPLETE,Col:COMPLETE
                            Reduce Output Operator [RS_37]
                              PartitionCols:_col0, _col1
                               Please refer to the previous Select Operator [SEL_34]
                    PARTITION_ONLY_SHUFFLE [RS_17]
                      Select Operator [SEL_16] (rows=316/310 width=272)
                        Output:["key","value"]
                         Please refer to the previous Select Operator [SEL_12]
              Reducer 7 llap
              File Output Operator [FS_32]
                Select Operator [SEL_31] (rows=1/1 width=798)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                  Group By Operator [GBY_30] (rows=1/1 width=500)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(1)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col3)","max(VALUE._col4)","avg(VALUE._col5)","count(VALUE._col6)","compute_bit_vector_hll(VALUE._col6)","max(VALUE._col7)","avg(VALUE._col8)","count(VALUE._col9)","compute_bit_vector_hll(VALUE._col9)"]
                  <-Reducer 6 [CUSTOM_SIMPLE_EDGE] llap
                    File Output Operator [FS_26]
                      table:{"name:":"default.dest2_n29"}
                      Select Operator [SEL_24] (rows=501/310 width=456)
                        Output:["_col0","_col1","_col2"]
                        Group By Operator [GBY_23] (rows=501/310 width=280)
                          Output:["_col0","_col1","_col2"],aggregations:["count(DISTINCT KEY._col2:0._col0)"],keys:KEY._col0, KEY._col1
                        <- Please refer to the previous Union 3 [SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_29]
                      Select Operator [SEL_28] (rows=501/310 width=456)
                        Output:["key","val1","val2"]
                         Please refer to the previous Select Operator [SEL_24]
Stage-5
  Stats Work{}
    Stage-1
      Move Operator
        table:{"name:":"default.dest2_n29"}
         Please refer to the previous Stage-3

