PREHOOK: query: CREATE TABLE emps
(
    empid  INTEGER,
    deptno INTEGER,
    name   VARCHAR(10),
    salary DECIMAL(8, 2)
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@emps
POSTHOOK: query: CREATE TABLE emps
(
    empid  INTEGER,
    deptno INTEGER,
    name   VARCHAR(10),
    salary DECIMAL(8, 2)
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@emps
PREHOOK: query: INSERT INTO emps VALUES (0, 0, 'Rob', 150000.50), (1, 0, 'Alice', 160000.30), (2, 0, 'Mark', 100000.20), 
                        (3, 1, 'Greg', 50000.20), (4, 1, 'Josh', 150000.50), (5, 1, 'Hector', 50000.20)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@emps
POSTHOOK: query: INSERT INTO emps VALUES (0, 0, 'Rob', 150000.50), (1, 0, 'Alice', 160000.30), (2, 0, 'Mark', 100000.20), 
                        (3, 1, 'Greg', 50000.20), (4, 1, 'Josh', 150000.50), (5, 1, 'Hector', 50000.20)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@emps
POSTHOOK: Lineage: emps.deptno SCRIPT []
POSTHOOK: Lineage: emps.empid SCRIPT []
POSTHOOK: Lineage: emps.name SCRIPT []
POSTHOOK: Lineage: emps.salary SCRIPT []
PREHOOK: query: CREATE TABLE depts
(
    deptno INTEGER,
    name   VARCHAR(20)
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@depts
POSTHOOK: query: CREATE TABLE depts
(
    deptno INTEGER,
    name   VARCHAR(20)
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@depts
PREHOOK: query: INSERT INTO depts VALUES (0, 'Engineering'), (1, 'Support'), (2, 'Sales')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@depts
POSTHOOK: query: INSERT INTO depts VALUES (0, 'Engineering'), (1, 'Support'), (2, 'Sales')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@depts
POSTHOOK: Lineage: depts.deptno SCRIPT []
POSTHOOK: Lineage: depts.name SCRIPT []
PREHOOK: query: SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
PREHOOK: type: QUERY
PREHOOK: Input: default@depts
PREHOOK: Input: default@emps
#### A masked pattern was here ####
POSTHOOK: query: SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
POSTHOOK: type: QUERY
POSTHOOK: Input: default@depts
POSTHOOK: Input: default@emps
#### A masked pattern was here ####
Josh	Rob
PREHOOK: query: EXPLAIN CBO SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
PREHOOK: type: QUERY
PREHOOK: Input: default@cte_suggestion_0
PREHOOK: Input: default@depts
PREHOOK: Input: default@emps
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN CBO SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cte_suggestion_0
POSTHOOK: Input: default@depts
POSTHOOK: Input: default@emps
#### A masked pattern was here ####
CBO PLAN:
HiveProject(name=[$0], name1=[$2])
  HiveJoin(condition=[=($1, $3)], joinType=[inner], algorithm=[none], cost=[not available])
    HiveProject(name=[$2], salary=[$3])
      HiveFilter(condition=[AND(=($9, _UTF-16LE'Support'), IS NOT NULL($3))])
        HiveTableScan(table=[[cte, cte_suggestion_0]], table:alias=[cte_suggestion_0])
    HiveProject(name=[$2], salary=[$3])
      HiveFilter(condition=[AND(IS NOT NULL($3), =($9, _UTF-16LE'Engineering'))])
        HiveTableSpool(readType=[LAZY], writeType=[LAZY], table=[[cte, cte_suggestion_0]])
          HiveProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], BLOCK__OFFSET__INSIDE__FILE=[$4], INPUT__FILE__NAME=[$5], ROW__ID=[$6], ROW__IS__DELETED=[$7], deptno0=[$8], name0=[$9], BLOCK__OFFSET__INSIDE__FILE0=[$10], INPUT__FILE__NAME0=[$11], ROW__ID0=[$12], ROW__IS__DELETED0=[$13])
            HiveJoin(condition=[=($1, $8)], joinType=[inner], algorithm=[none], cost=[not available])
              HiveProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], BLOCK__OFFSET__INSIDE__FILE=[$4], INPUT__FILE__NAME=[$5], ROW__ID=[$6], ROW__IS__DELETED=[$7])
                HiveFilter(condition=[IS NOT NULL($1)])
                  HiveTableScan(table=[[default, emps]], table:alias=[e])
              HiveProject(deptno=[$0], name=[$1], BLOCK__OFFSET__INSIDE__FILE=[$2], INPUT__FILE__NAME=[$3], ROW__ID=[$4], ROW__IS__DELETED=[$5])
                HiveFilter(condition=[IS NOT NULL($0)])
                  HiveTableScan(table=[[default, depts]], table:alias=[d])

PREHOOK: query: EXPLAIN SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
PREHOOK: type: QUERY
PREHOOK: Input: default@cte_suggestion_0
PREHOOK: Input: default@depts
PREHOOK: Input: default@emps
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cte_suggestion_0
POSTHOOK: Input: default@depts
POSTHOOK: Input: default@emps
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-4 depends on stages: Stage-2, Stage-0
  Stage-0 depends on stages: Stage-1
  Stage-3 depends on stages: Stage-4

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: e
                  filterExpr: deptno is not null (type: boolean)
                  Statistics: Num rows: 6 Data size: 1248 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: deptno is not null (type: boolean)
                    Statistics: Num rows: 6 Data size: 1248 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: empid (type: int), deptno (type: int), name (type: varchar(10)), salary (type: decimal(8,2)), BLOCK__OFFSET__INSIDE__FILE (type: bigint), INPUT__FILE__NAME (type: string), ROW__ID (type: struct<writeid:bigint,bucketid:int,rowid:bigint>), ROW__IS__DELETED (type: boolean)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                      Statistics: Num rows: 6 Data size: 2880 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 6 Data size: 2880 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col2 (type: varchar(10)), _col3 (type: decimal(8,2)), _col4 (type: bigint), _col5 (type: string), _col6 (type: struct<writeid:bigint,bucketid:int,rowid:bigint>), _col7 (type: boolean)
            Execution mode: llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: d
                  filterExpr: deptno is not null (type: boolean)
                  Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: deptno is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: deptno (type: int), name (type: varchar(20)), BLOCK__OFFSET__INSIDE__FILE (type: bigint), INPUT__FILE__NAME (type: string), ROW__ID (type: struct<writeid:bigint,bucketid:int,rowid:bigint>), ROW__IS__DELETED (type: boolean)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: varchar(20)), _col2 (type: bigint), _col3 (type: string), _col4 (type: struct<writeid:bigint,bucketid:int,rowid:bigint>), _col5 (type: boolean)
            Execution mode: llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                Statistics: Num rows: 6 Data size: 5088 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 6 Data size: 5088 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.cte_suggestion_0

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-4
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 5 <- Map 4 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: cte_suggestion_0
                  filterExpr: ((name0 = 'Support') and salary is not null) (type: boolean)
                  Statistics: Num rows: 6 Data size: 5088 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((name0 = 'Support') and salary is not null) (type: boolean)
                    Statistics: Num rows: 2 Data size: 1696 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: name (type: varchar(10)), salary (type: decimal(8,2))
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 2 Data size: 400 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: decimal(8,2))
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: decimal(8,2))
                        Statistics: Num rows: 2 Data size: 400 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: varchar(10))
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: cte_suggestion_0
                  filterExpr: (salary is not null and (name0 = 'Engineering')) (type: boolean)
                  Statistics: Num rows: 6 Data size: 5088 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (salary is not null and (name0 = 'Engineering')) (type: boolean)
                    Statistics: Num rows: 2 Data size: 1696 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: name (type: varchar(10)), salary (type: decimal(8,2))
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 2 Data size: 400 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: decimal(8,2))
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: decimal(8,2))
                        Statistics: Num rows: 2 Data size: 400 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: varchar(10))
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 5 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col1 (type: decimal(8,2))
                  1 _col1 (type: decimal(8,2))
                outputColumnNames: _col0, _col2
                Statistics: Num rows: 2 Data size: 352 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: varchar(10)), _col2 (type: varchar(10))
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 2 Data size: 352 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 352 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####

  Stage: Stage-3
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
PREHOOK: type: QUERY
PREHOOK: Input: default@cte_suggestion_0
PREHOOK: Input: default@depts
PREHOOK: Input: default@emps
PREHOOK: Output: database:default
PREHOOK: Output: default@cte_suggestion_0
#### A masked pattern was here ####
POSTHOOK: query: SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cte_suggestion_0
POSTHOOK: Input: default@depts
POSTHOOK: Input: default@emps
POSTHOOK: Output: database:default
POSTHOOK: Output: default@cte_suggestion_0
#### A masked pattern was here ####
Josh	Rob
PREHOOK: query: EXPLAIN CBO SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
PREHOOK: type: QUERY
PREHOOK: Input: default@cte_suggestion_0
PREHOOK: Input: default@depts
PREHOOK: Input: default@emps
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN CBO SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cte_suggestion_0
POSTHOOK: Input: default@depts
POSTHOOK: Input: default@emps
#### A masked pattern was here ####
CBO PLAN:
HiveProject(name=[$0], name1=[$2])
  HiveJoin(condition=[=($1, $3)], joinType=[inner], algorithm=[none], cost=[not available])
    HiveProject(name=[$2], salary=[$3])
      HiveFilter(condition=[AND(=($9, _UTF-16LE'Support'), IS NOT NULL($3))])
        HiveTableScan(table=[[cte, cte_suggestion_0]], table:alias=[cte_suggestion_0])
    HiveProject(name=[$2], salary=[$3])
      HiveFilter(condition=[AND(IS NOT NULL($3), =($9, _UTF-16LE'Engineering'))])
        HiveTableSpool(readType=[LAZY], writeType=[LAZY], table=[[cte, cte_suggestion_0]])
          HiveProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], BLOCK__OFFSET__INSIDE__FILE=[$4], INPUT__FILE__NAME=[$5], ROW__ID=[$6], ROW__IS__DELETED=[$7], deptno0=[$8], name0=[$9], BLOCK__OFFSET__INSIDE__FILE0=[$10], INPUT__FILE__NAME0=[$11], ROW__ID0=[$12], ROW__IS__DELETED0=[$13])
            HiveJoin(condition=[=($1, $8)], joinType=[inner], algorithm=[none], cost=[not available])
              HiveProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], BLOCK__OFFSET__INSIDE__FILE=[$4], INPUT__FILE__NAME=[$5], ROW__ID=[$6], ROW__IS__DELETED=[$7])
                HiveFilter(condition=[IS NOT NULL($1)])
                  HiveTableScan(table=[[default, emps]], table:alias=[e])
              HiveProject(deptno=[$0], name=[$1], BLOCK__OFFSET__INSIDE__FILE=[$2], INPUT__FILE__NAME=[$3], ROW__ID=[$4], ROW__IS__DELETED=[$5])
                HiveFilter(condition=[IS NOT NULL($0)])
                  HiveTableScan(table=[[default, depts]], table:alias=[d])

PREHOOK: query: EXPLAIN SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
PREHOOK: type: QUERY
PREHOOK: Input: default@cte_suggestion_0
PREHOOK: Input: default@depts
PREHOOK: Input: default@emps
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cte_suggestion_0
POSTHOOK: Input: default@depts
POSTHOOK: Input: default@emps
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-4 depends on stages: Stage-2, Stage-0
  Stage-0 depends on stages: Stage-1
  Stage-3 depends on stages: Stage-4

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: e
                  filterExpr: deptno is not null (type: boolean)
                  Statistics: Num rows: 6 Data size: 1248 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: deptno is not null (type: boolean)
                    Statistics: Num rows: 6 Data size: 1248 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: empid (type: int), deptno (type: int), name (type: varchar(10)), salary (type: decimal(8,2)), BLOCK__OFFSET__INSIDE__FILE (type: bigint), INPUT__FILE__NAME (type: string), ROW__ID (type: struct<writeid:bigint,bucketid:int,rowid:bigint>), ROW__IS__DELETED (type: boolean)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                      Statistics: Num rows: 6 Data size: 2880 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 6 Data size: 2880 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col2 (type: varchar(10)), _col3 (type: decimal(8,2)), _col4 (type: bigint), _col5 (type: string), _col6 (type: struct<writeid:bigint,bucketid:int,rowid:bigint>), _col7 (type: boolean)
            Execution mode: llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: d
                  filterExpr: deptno is not null (type: boolean)
                  Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: deptno is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: deptno (type: int), name (type: varchar(20)), BLOCK__OFFSET__INSIDE__FILE (type: bigint), INPUT__FILE__NAME (type: string), ROW__ID (type: struct<writeid:bigint,bucketid:int,rowid:bigint>), ROW__IS__DELETED (type: boolean)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 3 Data size: 1104 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: varchar(20)), _col2 (type: bigint), _col3 (type: string), _col4 (type: struct<writeid:bigint,bucketid:int,rowid:bigint>), _col5 (type: boolean)
            Execution mode: llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                Statistics: Num rows: 6 Data size: 5088 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 6 Data size: 5088 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.cte_suggestion_0

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-4
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 5 <- Map 4 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: cte_suggestion_0
                  filterExpr: ((name0 = 'Support') and salary is not null) (type: boolean)
                  Statistics: Num rows: 6 Data size: 5088 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((name0 = 'Support') and salary is not null) (type: boolean)
                    Statistics: Num rows: 2 Data size: 1696 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: name (type: varchar(10)), salary (type: decimal(8,2))
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 2 Data size: 400 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: decimal(8,2))
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: decimal(8,2))
                        Statistics: Num rows: 2 Data size: 400 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: varchar(10))
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: cte_suggestion_0
                  filterExpr: (salary is not null and (name0 = 'Engineering')) (type: boolean)
                  Statistics: Num rows: 6 Data size: 5088 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (salary is not null and (name0 = 'Engineering')) (type: boolean)
                    Statistics: Num rows: 2 Data size: 1696 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: name (type: varchar(10)), salary (type: decimal(8,2))
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 2 Data size: 400 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: decimal(8,2))
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: decimal(8,2))
                        Statistics: Num rows: 2 Data size: 400 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: varchar(10))
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 5 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col1 (type: decimal(8,2))
                  1 _col1 (type: decimal(8,2))
                outputColumnNames: _col0, _col2
                Statistics: Num rows: 2 Data size: 352 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: varchar(10)), _col2 (type: varchar(10))
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 2 Data size: 352 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 352 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####

  Stage: Stage-3
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
PREHOOK: type: QUERY
PREHOOK: Input: default@cte_suggestion_0
PREHOOK: Input: default@depts
PREHOOK: Input: default@emps
PREHOOK: Output: database:default
PREHOOK: Output: default@cte_suggestion_0
#### A masked pattern was here ####
POSTHOOK: query: SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cte_suggestion_0
POSTHOOK: Input: default@depts
POSTHOOK: Input: default@emps
POSTHOOK: Output: database:default
POSTHOOK: Output: default@cte_suggestion_0
#### A masked pattern was here ####
Josh	Rob
PREHOOK: query: EXPLAIN CBO SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
PREHOOK: type: QUERY
PREHOOK: Input: default@depts
PREHOOK: Input: default@emps
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN CBO SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
POSTHOOK: type: QUERY
POSTHOOK: Input: default@depts
POSTHOOK: Input: default@emps
#### A masked pattern was here ####
CBO PLAN:
HiveProject(name=[$1], name1=[$5])
  HiveJoin(condition=[=($2, $6)], joinType=[inner], algorithm=[none], cost=[not available])
    HiveJoin(condition=[=($0, $3)], joinType=[inner], algorithm=[none], cost=[not available])
      HiveProject(deptno=[$1], name=[$2], salary=[$3])
        HiveFilter(condition=[AND(IS NOT NULL($1), IS NOT NULL($3))])
          HiveTableScan(table=[[default, emps]], table:alias=[e])
      HiveProject(deptno=[$0])
        HiveFilter(condition=[AND(=($1, _UTF-16LE'Support'), IS NOT NULL($0))])
          HiveTableScan(table=[[default, depts]], table:alias=[d])
    HiveProject(deptno=[$0], name=[$1], salary=[$2], deptno0=[$3])
      HiveJoin(condition=[=($0, $3)], joinType=[inner], algorithm=[none], cost=[not available])
        HiveProject(deptno=[$1], name=[$2], salary=[$3])
          HiveFilter(condition=[AND(IS NOT NULL($1), IS NOT NULL($3))])
            HiveTableScan(table=[[default, emps]], table:alias=[e])
        HiveProject(deptno=[$0])
          HiveFilter(condition=[AND(=($1, _UTF-16LE'Engineering'), IS NOT NULL($0))])
            HiveTableScan(table=[[default, depts]], table:alias=[d])

PREHOOK: query: EXPLAIN SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
PREHOOK: type: QUERY
PREHOOK: Input: default@depts
PREHOOK: Input: default@emps
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
POSTHOOK: type: QUERY
POSTHOOK: Input: default@depts
POSTHOOK: Input: default@emps
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
        Reducer 4 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: e
                  filterExpr: (deptno is not null and salary is not null) (type: boolean)
                  Statistics: Num rows: 6 Data size: 1224 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (deptno is not null and salary is not null) (type: boolean)
                    Statistics: Num rows: 6 Data size: 1224 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: deptno (type: int), name (type: varchar(10)), salary (type: decimal(8,2))
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 6 Data size: 1224 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 6 Data size: 1224 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: varchar(10)), _col2 (type: decimal(8,2))
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 6 Data size: 1224 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: varchar(10)), _col2 (type: decimal(8,2))
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: d
                  filterExpr: (((name = 'Support') and deptno is not null) or ((name = 'Engineering') and deptno is not null)) (type: boolean)
                  Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((name = 'Support') and deptno is not null) (type: boolean)
                    Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: deptno (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((name = 'Engineering') and deptno is not null) (type: boolean)
                    Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: deptno (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col1, _col2
                Statistics: Num rows: 5 Data size: 1000 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col2 (type: decimal(8,2))
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col2 (type: decimal(8,2))
                  Statistics: Num rows: 5 Data size: 1000 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col1 (type: varchar(10))
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col2 (type: decimal(8,2))
                  1 _col2 (type: decimal(8,2))
                outputColumnNames: _col1, _col5
                Statistics: Num rows: 6 Data size: 1056 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col1 (type: varchar(10)), _col5 (type: varchar(10))
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 6 Data size: 1056 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 6 Data size: 1056 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col1, _col2
                Statistics: Num rows: 5 Data size: 1000 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col2 (type: decimal(8,2))
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col2 (type: decimal(8,2))
                  Statistics: Num rows: 5 Data size: 1000 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col1 (type: varchar(10))

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
PREHOOK: type: QUERY
PREHOOK: Input: default@depts
PREHOOK: Input: default@emps
#### A masked pattern was here ####
POSTHOOK: query: SELECT sup.name, eng.name
FROM (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Engineering') eng,
     (SELECT e.name, e.salary
      FROM emps e
      INNER JOIN depts d ON e.deptno = d.deptno
      WHERE d.name = 'Support') sup
WHERE sup.salary = eng.salary
POSTHOOK: type: QUERY
POSTHOOK: Input: default@depts
POSTHOOK: Input: default@emps
#### A masked pattern was here ####
Josh	Rob
