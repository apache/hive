PREHOOK: query: drop table char_2
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table char_2
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table char_2 (
  key char(10),
  value char(20)
) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@char_2
POSTHOOK: query: create table char_2 (
  key char(10),
  value char(20)
) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@char_2
PREHOOK: query: insert overwrite table char_2 select * from src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@char_2
POSTHOOK: query: insert overwrite table char_2 select * from src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@char_2
POSTHOOK: Lineage: char_2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: char_2.value EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: select value, sum(cast(key as int)), count(*) numrows
from src
group by value
order by value asc
limit 5
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select value, sum(cast(key as int)), count(*) numrows
from src
group by value
order by value asc
limit 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
val_0	0	3
val_10	10	1
val_100	200	2
val_103	206	2
val_104	208	2
PREHOOK: query: explain vectorization expression select value, sum(cast(key as int)), count(*) numrows
from char_2
group by value
order by value asc
limit 5
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression select value, sum(cast(key as int)), count(*) numrows
from char_2
group by value
order by value asc
limit 5
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: char_2
                  Statistics: Num rows: 500 Data size: 99000 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                      projectedOutputColumns: [0, 1]
                  Select Operator
                    expressions: value (type: char(20)), UDFToInteger(key) (type: int)
                    outputColumnNames: _col0, _col1
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumns: [1, 2]
                        selectExpressions: CastStringToLong(col 0) -> 2:int
                    Statistics: Num rows: 500 Data size: 99000 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: sum(_col1), count()
                      Group By Vectorization:
                          aggregators: VectorUDAFSumLong(col 2) -> bigint, VectorUDAFCountStar(*) -> bigint
                          className: VectorGroupByOperator
                          groupByMode: HASH
                          vectorOutput: true
                          keyExpressions: col 1
                          native: false
                          vectorProcessingMode: HASH
                          projectedOutputColumns: [0, 1]
                      keys: _col0 (type: char(20))
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 500 Data size: 99000 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: char(20))
                        sort order: +
                        Map-reduce partition columns: _col0 (type: char(20))
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkStringOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 500 Data size: 99000 Basic stats: COMPLETE Column stats: NONE
                        TopN Hash Memory Usage: 0.1
                        value expressions: _col1 (type: bigint), _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                groupByVectorOutput: true
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                groupByVectorOutput: true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1)
                Group By Vectorization:
                    aggregators: VectorUDAFSumLong(col 1) -> bigint, VectorUDAFCountMerge(col 2) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    vectorOutput: true
                    keyExpressions: col 0
                    native: false
                    vectorProcessingMode: MERGE_PARTIAL
                    projectedOutputColumns: [0, 1]
                keys: KEY._col0 (type: char(20))
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 250 Data size: 49500 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: char(20))
                  sort order: +
                  Reduce Sink Vectorization:
                      className: VectorReduceSinkObjectHashOperator
                      native: true
                      nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                  Statistics: Num rows: 250 Data size: 49500 Basic stats: COMPLETE Column stats: NONE
                  TopN Hash Memory Usage: 0.1
                  value expressions: _col1 (type: bigint), _col2 (type: bigint)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                groupByVectorOutput: true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: char(20)), VALUE._col0 (type: bigint), VALUE._col1 (type: bigint)
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumns: [0, 1, 2]
                Statistics: Num rows: 250 Data size: 49500 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 5
                  Limit Vectorization:
                      className: VectorLimitOperator
                      native: true
                  Statistics: Num rows: 5 Data size: 990 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 5 Data size: 990 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 5
      Processor Tree:
        ListSink

PREHOOK: query: select value, sum(cast(key as int)), count(*) numrows
from char_2
group by value
order by value asc
limit 5
PREHOOK: type: QUERY
PREHOOK: Input: default@char_2
#### A masked pattern was here ####
POSTHOOK: query: select value, sum(cast(key as int)), count(*) numrows
from char_2
group by value
order by value asc
limit 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@char_2
#### A masked pattern was here ####
val_0               	0	3
val_10              	10	1
val_100             	200	2
val_103             	206	2
val_104             	208	2
PREHOOK: query: select value, sum(cast(key as int)), count(*) numrows
from src
group by value
order by value desc
limit 5
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select value, sum(cast(key as int)), count(*) numrows
from src
group by value
order by value desc
limit 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
val_98	196	2
val_97	194	2
val_96	96	1
val_95	190	2
val_92	92	1
PREHOOK: query: explain vectorization expression select value, sum(cast(key as int)), count(*) numrows
from char_2
group by value
order by value desc
limit 5
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression select value, sum(cast(key as int)), count(*) numrows
from char_2
group by value
order by value desc
limit 5
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: char_2
                  Statistics: Num rows: 500 Data size: 99000 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                      projectedOutputColumns: [0, 1]
                  Select Operator
                    expressions: value (type: char(20)), UDFToInteger(key) (type: int)
                    outputColumnNames: _col0, _col1
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumns: [1, 2]
                        selectExpressions: CastStringToLong(col 0) -> 2:int
                    Statistics: Num rows: 500 Data size: 99000 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: sum(_col1), count()
                      Group By Vectorization:
                          aggregators: VectorUDAFSumLong(col 2) -> bigint, VectorUDAFCountStar(*) -> bigint
                          className: VectorGroupByOperator
                          groupByMode: HASH
                          vectorOutput: true
                          keyExpressions: col 1
                          native: false
                          vectorProcessingMode: HASH
                          projectedOutputColumns: [0, 1]
                      keys: _col0 (type: char(20))
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 500 Data size: 99000 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: char(20))
                        sort order: -
                        Map-reduce partition columns: _col0 (type: char(20))
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkStringOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 500 Data size: 99000 Basic stats: COMPLETE Column stats: NONE
                        TopN Hash Memory Usage: 0.1
                        value expressions: _col1 (type: bigint), _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                groupByVectorOutput: true
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                groupByVectorOutput: true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1)
                Group By Vectorization:
                    aggregators: VectorUDAFSumLong(col 1) -> bigint, VectorUDAFCountMerge(col 2) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    vectorOutput: true
                    keyExpressions: col 0
                    native: false
                    vectorProcessingMode: MERGE_PARTIAL
                    projectedOutputColumns: [0, 1]
                keys: KEY._col0 (type: char(20))
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 250 Data size: 49500 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: char(20))
                  sort order: -
                  Reduce Sink Vectorization:
                      className: VectorReduceSinkObjectHashOperator
                      native: true
                      nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                  Statistics: Num rows: 250 Data size: 49500 Basic stats: COMPLETE Column stats: NONE
                  TopN Hash Memory Usage: 0.1
                  value expressions: _col1 (type: bigint), _col2 (type: bigint)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                groupByVectorOutput: true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: char(20)), VALUE._col0 (type: bigint), VALUE._col1 (type: bigint)
                outputColumnNames: _col0, _col1, _col2
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumns: [0, 1, 2]
                Statistics: Num rows: 250 Data size: 49500 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 5
                  Limit Vectorization:
                      className: VectorLimitOperator
                      native: true
                  Statistics: Num rows: 5 Data size: 990 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 5 Data size: 990 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 5
      Processor Tree:
        ListSink

PREHOOK: query: select value, sum(cast(key as int)), count(*) numrows
from char_2
group by value
order by value desc
limit 5
PREHOOK: type: QUERY
PREHOOK: Input: default@char_2
#### A masked pattern was here ####
POSTHOOK: query: select value, sum(cast(key as int)), count(*) numrows
from char_2
group by value
order by value desc
limit 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@char_2
#### A masked pattern was here ####
val_98              	196	2
val_97              	194	2
val_96              	96	1
val_95              	190	2
val_92              	92	1
PREHOOK: query: drop table char_2
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@char_2
PREHOOK: Output: default@char_2
POSTHOOK: query: drop table char_2
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@char_2
POSTHOOK: Output: default@char_2
