PREHOOK: query: drop table if exists smalltable_windowing_n0
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists smalltable_windowing_n0
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table smalltable_windowing_n0(
      i int,
      type string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@smalltable_windowing_n0
POSTHOOK: query: create table smalltable_windowing_n0(
      i int,
      type string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@smalltable_windowing_n0
PREHOOK: query: insert into smalltable_windowing_n0 values(3, 'a'), (1, 'a'), (2, 'a')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@smalltable_windowing_n0
POSTHOOK: query: insert into smalltable_windowing_n0 values(3, 'a'), (1, 'a'), (2, 'a')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@smalltable_windowing_n0
POSTHOOK: Lineage: smalltable_windowing_n0.i SCRIPT []
POSTHOOK: Lineage: smalltable_windowing_n0.type SCRIPT []
col1	col2
PREHOOK: query: explain vectorization detail
select type, i,
max(i) over (partition by type order by i rows between 1 preceding and 7 following),
min(i) over (partition by type order by i rows between 1 preceding and 7 following),
first_value(i) over (partition by type order by i rows between 1 preceding and 7 following),
last_value(i) over (partition by type order by i rows between 1 preceding and 7 following),
avg(i) over (partition by type order by i rows between 1 preceding and 7 following),
sum(i) over (partition by type order by i rows between 1 preceding and 7 following),
collect_set(i) over (partition by type order by i rows between 1 preceding and 7 following),
count(i) over (partition by type order by i rows between 1 preceding and 7 following)
from smalltable_windowing_n0
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select type, i,
max(i) over (partition by type order by i rows between 1 preceding and 7 following),
min(i) over (partition by type order by i rows between 1 preceding and 7 following),
first_value(i) over (partition by type order by i rows between 1 preceding and 7 following),
last_value(i) over (partition by type order by i rows between 1 preceding and 7 following),
avg(i) over (partition by type order by i rows between 1 preceding and 7 following),
sum(i) over (partition by type order by i rows between 1 preceding and 7 following),
collect_set(i) over (partition by type order by i rows between 1 preceding and 7 following),
count(i) over (partition by type order by i rows between 1 preceding and 7 following)
from smalltable_windowing_n0
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: smalltable_windowing_n0
                  Statistics: Num rows: 3 Data size: 267 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:i:int, 1:type:string, 2:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
                  Reduce Output Operator
                    key expressions: type (type: string), i (type: int)
                    sort order: ++
                    Map-reduce partition columns: type (type: string)
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkObjectHashOperator
                        keyColumnNums: [1, 0]
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        partitionColumnNums: [1]
                        valueColumnNums: []
                    Statistics: Num rows: 3 Data size: 267 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vector.serde.deserialize IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                vectorizationSupportRemovedReasons: [DECIMAL_64 disabled because LLAP is enabled]
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.mapred.TextInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 2
                    includeColumns: [0, 1]
                    dataColumns: i:int, type:string
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                notVectorizedReason: PTF Output Columns expression for PTF operator: Data type array<int> of column collect_set_window_6 not supported
                vectorized: false
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey1 (type: int), KEY.reducesinkkey0 (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 3 Data size: 1071 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: int, _col1: string
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS FIRST
                        partition by: _col1
                        raw input shape:
                        window functions:
                            window function definition
                              alias: max_window_0
                              arguments: _col0
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: ROWS PRECEDING(1)~FOLLOWING(7)
                            window function definition
                              alias: min_window_1
                              arguments: _col0
                              name: min
                              window function: GenericUDAFMinEvaluator
                              window frame: ROWS PRECEDING(1)~FOLLOWING(7)
                            window function definition
                              alias: first_value_window_2
                              arguments: _col0
                              name: first_value
                              window function: GenericUDAFFirstValueEvaluator
                              window frame: ROWS PRECEDING(1)~FOLLOWING(7)
                            window function definition
                              alias: last_value_window_3
                              arguments: _col0
                              name: last_value
                              window function: GenericUDAFLastValueEvaluator
                              window frame: ROWS PRECEDING(1)~FOLLOWING(7)
                            window function definition
                              alias: avg_window_4
                              arguments: _col0
                              name: avg
                              window function: GenericUDAFAverageEvaluatorDouble
                              window frame: ROWS PRECEDING(1)~FOLLOWING(7)
                            window function definition
                              alias: sum_window_5
                              arguments: _col0
                              name: sum
                              window function: GenericUDAFSumLong
                              window frame: ROWS PRECEDING(1)~FOLLOWING(7)
                            window function definition
                              alias: collect_set_window_6
                              arguments: _col0
                              name: collect_set
                              window function: GenericUDAFMkCollectionEvaluator
                              window frame: ROWS PRECEDING(1)~FOLLOWING(7)
                            window function definition
                              alias: count_window_7
                              arguments: _col0
                              name: count
                              window function: GenericUDAFCountEvaluator
                              window frame: ROWS PRECEDING(1)~FOLLOWING(7)
                  Statistics: Num rows: 3 Data size: 1071 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col1 (type: string), _col0 (type: int), max_window_0 (type: int), min_window_1 (type: int), first_value_window_2 (type: int), last_value_window_3 (type: int), avg_window_4 (type: double), sum_window_5 (type: bigint), collect_set_window_6 (type: array<int>), count_window_7 (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                    Statistics: Num rows: 3 Data size: 747 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 3 Data size: 747 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select type, i,
max(i) over (partition by type order by i rows between 1 preceding and 7 following),
min(i) over (partition by type order by i rows between 1 preceding and 7 following),
first_value(i) over (partition by type order by i rows between 1 preceding and 7 following),
last_value(i) over (partition by type order by i rows between 1 preceding and 7 following),
avg(i) over (partition by type order by i rows between 1 preceding and 7 following),
sum(i) over (partition by type order by i rows between 1 preceding and 7 following),
collect_set(i) over (partition by type order by i rows between 1 preceding and 7 following),
count(i) over (partition by type order by i rows between 1 preceding and 7 following)
from smalltable_windowing_n0
PREHOOK: type: QUERY
PREHOOK: Input: default@smalltable_windowing_n0
#### A masked pattern was here ####
POSTHOOK: query: select type, i,
max(i) over (partition by type order by i rows between 1 preceding and 7 following),
min(i) over (partition by type order by i rows between 1 preceding and 7 following),
first_value(i) over (partition by type order by i rows between 1 preceding and 7 following),
last_value(i) over (partition by type order by i rows between 1 preceding and 7 following),
avg(i) over (partition by type order by i rows between 1 preceding and 7 following),
sum(i) over (partition by type order by i rows between 1 preceding and 7 following),
collect_set(i) over (partition by type order by i rows between 1 preceding and 7 following),
count(i) over (partition by type order by i rows between 1 preceding and 7 following)
from smalltable_windowing_n0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@smalltable_windowing_n0
#### A masked pattern was here ####
type	i	max_window_0	min_window_1	first_value_window_2	last_value_window_3	avg_window_4	sum_window_5	collect_set_window_6	count_window_7
a	1	3	1	1	3	2.0	6	[1,2,3]	3
a	2	3	1	1	3	2.0	6	[1,2,3]	3
a	3	3	2	2	3	2.5	5	[2,3]	2
