PREHOOK: query: CREATE TABLE `customer_removal_n0`(
  `c_custkey` bigint,
  `c_name` string,
  `c_address` string,
  `c_city` string,
  `c_nation` string,
  `c_region` string,
  `c_phone` string,
  `c_mktsegment` string,
  primary key (`c_custkey`) disable rely)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@customer_removal_n0
POSTHOOK: query: CREATE TABLE `customer_removal_n0`(
  `c_custkey` bigint,
  `c_name` string,
  `c_address` string,
  `c_city` string,
  `c_nation` string,
  `c_region` string,
  `c_phone` string,
  `c_mktsegment` string,
  primary key (`c_custkey`) disable rely)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@customer_removal_n0
PREHOOK: query: CREATE TABLE `dates_removal_n0`(
  `d_datekey` bigint,
  `d_id` bigint,
  `d_date` string,
  `d_dayofweek` string,
  `d_month` string,
  `d_year` int,
  `d_yearmonthnum` int,
  `d_yearmonth` string,
  `d_daynuminweek` int,
  `d_daynuminmonth` int,
  `d_daynuminyear` int,
  `d_monthnuminyear` int,
  `d_weeknuminyear` int,
  `d_sellingseason` string,
  `d_lastdayinweekfl` int,
  `d_lastdayinmonthfl` int,
  `d_holidayfl` int ,
  `d_weekdayfl`int,
  primary key (`d_datekey`, `d_id`) disable rely)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@dates_removal_n0
POSTHOOK: query: CREATE TABLE `dates_removal_n0`(
  `d_datekey` bigint,
  `d_id` bigint,
  `d_date` string,
  `d_dayofweek` string,
  `d_month` string,
  `d_year` int,
  `d_yearmonthnum` int,
  `d_yearmonth` string,
  `d_daynuminweek` int,
  `d_daynuminmonth` int,
  `d_daynuminyear` int,
  `d_monthnuminyear` int,
  `d_weeknuminyear` int,
  `d_sellingseason` string,
  `d_lastdayinweekfl` int,
  `d_lastdayinmonthfl` int,
  `d_holidayfl` int ,
  `d_weekdayfl`int,
  primary key (`d_datekey`, `d_id`) disable rely)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@dates_removal_n0
PREHOOK: query: -- group by key has single primary key
  EXPLAIN SELECT c_custkey from customer_removal_n0 where c_nation IN ('USA', 'INDIA') group by c_custkey
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_removal_n0
#### A masked pattern was here ####
POSTHOOK: query: -- group by key has single primary key
  EXPLAIN SELECT c_custkey from customer_removal_n0 where c_nation IN ('USA', 'INDIA') group by c_custkey
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_removal_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: customer_removal_n0
          filterExpr: (c_nation) IN ('USA', 'INDIA') (type: boolean)
          Filter Operator
            predicate: (c_nation) IN ('USA', 'INDIA') (type: boolean)
            Select Operator
              expressions: c_custkey (type: bigint)
              outputColumnNames: _col0
              ListSink

PREHOOK: query: -- mix of primary + non-primary keys
  EXPLAIN SELECT c_custkey from customer_removal_n0 where c_nation IN ('USA', 'INDIA') group by c_custkey, c_nation
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_removal_n0
#### A masked pattern was here ####
POSTHOOK: query: -- mix of primary + non-primary keys
  EXPLAIN SELECT c_custkey from customer_removal_n0 where c_nation IN ('USA', 'INDIA') group by c_custkey, c_nation
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_removal_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: customer_removal_n0
          filterExpr: (c_nation) IN ('USA', 'INDIA') (type: boolean)
          Filter Operator
            predicate: (c_nation) IN ('USA', 'INDIA') (type: boolean)
            Select Operator
              expressions: c_custkey (type: bigint)
              outputColumnNames: _col0
              ListSink

PREHOOK: query: -- multiple keys
  EXPLAIN SELECT d_datekey from dates_removal_n0 where d_year IN (1985, 2004) group by d_datekey, d_id
PREHOOK: type: QUERY
PREHOOK: Input: default@dates_removal_n0
#### A masked pattern was here ####
POSTHOOK: query: -- multiple keys
  EXPLAIN SELECT d_datekey from dates_removal_n0 where d_year IN (1985, 2004) group by d_datekey, d_id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dates_removal_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: dates_removal_n0
          filterExpr: (d_year) IN (1985, 2004) (type: boolean)
          Filter Operator
            predicate: (d_year) IN (1985, 2004) (type: boolean)
            Select Operator
              expressions: d_datekey (type: bigint)
              outputColumnNames: _col0
              ListSink

PREHOOK: query: -- multiple keys + non-keys + different order
  EXPLAIN SELECT d_datekey from dates_removal_n0 where d_year IN (1985, 2004) group by d_id, d_datekey, d_sellingseason
    order by d_datekey limit 10
PREHOOK: type: QUERY
PREHOOK: Input: default@dates_removal_n0
#### A masked pattern was here ####
POSTHOOK: query: -- multiple keys + non-keys + different order
  EXPLAIN SELECT d_datekey from dates_removal_n0 where d_year IN (1985, 2004) group by d_id, d_datekey, d_sellingseason
    order by d_datekey limit 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dates_removal_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: dates_removal_n0
                  filterExpr: (d_year) IN (1985, 2004) (type: boolean)
                  Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (d_year) IN (1985, 2004) (type: boolean)
                    Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                    Top N Key Operator
                      sort order: +
                      keys: d_datekey (type: bigint)
                      null sort order: z
                      Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                      top n: 10
                      Select Operator
                        expressions: d_datekey (type: bigint)
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: bigint)
                          null sort order: z
                          sort order: +
                          Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: bigint)
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

PREHOOK: query: -- multiple keys in different order and mixed with non-keys
  EXPLAIN SELECT d_datekey from dates_removal_n0 where d_year IN (1985, 2004) group by d_id, d_daynuminmonth, d_datekey,
  d_sellingseason order by d_datekey limit 10
PREHOOK: type: QUERY
PREHOOK: Input: default@dates_removal_n0
#### A masked pattern was here ####
POSTHOOK: query: -- multiple keys in different order and mixed with non-keys
  EXPLAIN SELECT d_datekey from dates_removal_n0 where d_year IN (1985, 2004) group by d_id, d_daynuminmonth, d_datekey,
  d_sellingseason order by d_datekey limit 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dates_removal_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: dates_removal_n0
                  filterExpr: (d_year) IN (1985, 2004) (type: boolean)
                  Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (d_year) IN (1985, 2004) (type: boolean)
                    Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                    Top N Key Operator
                      sort order: +
                      keys: d_datekey (type: bigint)
                      null sort order: z
                      Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                      top n: 10
                      Select Operator
                        expressions: d_datekey (type: bigint)
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: bigint)
                          null sort order: z
                          sort order: +
                          Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: bigint)
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

PREHOOK: query: -- same as above but with aggregate
  EXPLAIN SELECT count(d_datekey) from dates_removal_n0 where d_year IN (1985, 2004) group by d_id, d_daynuminmonth, d_datekey,
  d_sellingseason order by d_datekey limit 10
PREHOOK: type: QUERY
PREHOOK: Input: default@dates_removal_n0
#### A masked pattern was here ####
POSTHOOK: query: -- same as above but with aggregate
  EXPLAIN SELECT count(d_datekey) from dates_removal_n0 where d_year IN (1985, 2004) group by d_id, d_daynuminmonth, d_datekey,
  d_sellingseason order by d_datekey limit 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dates_removal_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: dates_removal_n0
                  filterExpr: (d_year) IN (1985, 2004) (type: boolean)
                  Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (d_year) IN (1985, 2004) (type: boolean)
                    Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                    Top N Key Operator
                      sort order: ++
                      keys: d_datekey (type: bigint), d_id (type: bigint)
                      null sort order: zz
                      Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                      top n: 10
                      Select Operator
                        expressions: d_datekey (type: bigint), d_id (type: bigint)
                        outputColumnNames: d_datekey, d_id
                        Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                        Group By Operator
                          aggregations: count()
                          keys: d_datekey (type: bigint), d_id (type: bigint)
                          minReductionHashAggr: 0.99
                          mode: hash
                          outputColumnNames: _col0, _col1, _col2
                          Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                          Reduce Output Operator
                            key expressions: _col0 (type: bigint), _col1 (type: bigint)
                            null sort order: zz
                            sort order: ++
                            Map-reduce partition columns: _col0 (type: bigint), _col1 (type: bigint)
                            Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                            value expressions: _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: bigint), KEY._col1 (type: bigint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col2 (type: bigint), _col0 (type: bigint)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col1 (type: bigint)
                    null sort order: z
                    sort order: +
                    Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: bigint)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: bigint)
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: -- join
  insert into dates_removal_n0(d_datekey, d_id)  values(3, 0)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@dates_removal_n0
POSTHOOK: query: -- join
  insert into dates_removal_n0(d_datekey, d_id)  values(3, 0)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@dates_removal_n0
POSTHOOK: Lineage: dates_removal_n0.d_date SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_datekey SCRIPT []
POSTHOOK: Lineage: dates_removal_n0.d_daynuminmonth SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_daynuminweek SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_daynuminyear SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_dayofweek SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_holidayfl SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_id SCRIPT []
POSTHOOK: Lineage: dates_removal_n0.d_lastdayinmonthfl SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_lastdayinweekfl SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_month SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_monthnuminyear SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_sellingseason SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_weekdayfl SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_weeknuminyear SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_year SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_yearmonth SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_yearmonthnum SIMPLE []
PREHOOK: query: insert into dates_removal_n0(d_datekey, d_id)  values(3, 1)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@dates_removal_n0
POSTHOOK: query: insert into dates_removal_n0(d_datekey, d_id)  values(3, 1)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@dates_removal_n0
POSTHOOK: Lineage: dates_removal_n0.d_date SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_datekey SCRIPT []
POSTHOOK: Lineage: dates_removal_n0.d_daynuminmonth SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_daynuminweek SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_daynuminyear SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_dayofweek SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_holidayfl SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_id SCRIPT []
POSTHOOK: Lineage: dates_removal_n0.d_lastdayinmonthfl SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_lastdayinweekfl SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_month SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_monthnuminyear SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_sellingseason SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_weekdayfl SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_weeknuminyear SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_year SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_yearmonth SIMPLE []
POSTHOOK: Lineage: dates_removal_n0.d_yearmonthnum SIMPLE []
PREHOOK: query: insert into customer_removal_n0 (c_custkey) values(3)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@customer_removal_n0
POSTHOOK: query: insert into customer_removal_n0 (c_custkey) values(3)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@customer_removal_n0
POSTHOOK: Lineage: customer_removal_n0.c_address SIMPLE []
POSTHOOK: Lineage: customer_removal_n0.c_city SIMPLE []
POSTHOOK: Lineage: customer_removal_n0.c_custkey SCRIPT []
POSTHOOK: Lineage: customer_removal_n0.c_mktsegment SIMPLE []
POSTHOOK: Lineage: customer_removal_n0.c_name SIMPLE []
POSTHOOK: Lineage: customer_removal_n0.c_nation SIMPLE []
POSTHOOK: Lineage: customer_removal_n0.c_phone SIMPLE []
POSTHOOK: Lineage: customer_removal_n0.c_region SIMPLE []
PREHOOK: query: EXPLAIN SELECT d_datekey from dates_removal_n0 join customer_removal_n0 on d_datekey = c_custkey group by d_datekey, d_id
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_removal_n0
PREHOOK: Input: default@dates_removal_n0
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN SELECT d_datekey from dates_removal_n0 join customer_removal_n0 on d_datekey = c_custkey group by d_datekey, d_id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_removal_n0
POSTHOOK: Input: default@dates_removal_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: dates_removal_n0
                  Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: d_datekey (type: bigint)
                    outputColumnNames: _col0
                    Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: bigint)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: bigint)
                      Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: customer_removal_n0
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: c_custkey (type: bigint)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: bigint)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: bigint)
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: bigint)
                  1 _col0 (type: bigint)
                outputColumnNames: _col0
                Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT d_datekey from dates_removal_n0 join customer_removal_n0 on d_datekey = c_custkey group by d_datekey, d_id
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_removal_n0
PREHOOK: Input: default@dates_removal_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT d_datekey from dates_removal_n0 join customer_removal_n0 on d_datekey = c_custkey group by d_datekey, d_id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_removal_n0
POSTHOOK: Input: default@dates_removal_n0
#### A masked pattern was here ####
3
3
PREHOOK: query: -- group by keys are not primary keys
  EXPLAIN SELECT d_datekey from dates_removal_n0 where d_year IN (1985, 2004) group by d_datekey, d_sellingseason
    order by d_datekey limit 10
PREHOOK: type: QUERY
PREHOOK: Input: default@dates_removal_n0
#### A masked pattern was here ####
POSTHOOK: query: -- group by keys are not primary keys
  EXPLAIN SELECT d_datekey from dates_removal_n0 where d_year IN (1985, 2004) group by d_datekey, d_sellingseason
    order by d_datekey limit 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dates_removal_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: dates_removal_n0
                  filterExpr: (d_year) IN (1985, 2004) (type: boolean)
                  Statistics: Num rows: 2 Data size: 104 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (d_year) IN (1985, 2004) (type: boolean)
                    Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: COMPLETE
                    Top N Key Operator
                      sort order: ++
                      keys: d_datekey (type: bigint), d_sellingseason (type: string)
                      null sort order: zz
                      Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: COMPLETE
                      top n: 10
                      Select Operator
                        expressions: d_datekey (type: bigint), d_sellingseason (type: string)
                        outputColumnNames: d_datekey, d_sellingseason
                        Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: COMPLETE
                        Group By Operator
                          keys: d_datekey (type: bigint), d_sellingseason (type: string)
                          minReductionHashAggr: 0.4
                          mode: hash
                          outputColumnNames: _col0, _col1
                          Statistics: Num rows: 1 Data size: 92 Basic stats: COMPLETE Column stats: COMPLETE
                          Reduce Output Operator
                            key expressions: _col0 (type: bigint), _col1 (type: string)
                            null sort order: zz
                            sort order: ++
                            Map-reduce partition columns: _col0 (type: bigint), _col1 (type: string)
                            Statistics: Num rows: 1 Data size: 92 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: bigint), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 92 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: bigint)
                  outputColumnNames: _col0
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: bigint)
                    null sort order: z
                    sort order: +
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: bigint)
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

PREHOOK: query: -- negative
  -- with aggregate function
  EXPLAIN SELECT count(c_custkey) from customer_removal_n0 where c_nation IN ('USA', 'INDIA')
    group by c_custkey, c_nation
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_removal_n0
#### A masked pattern was here ####
POSTHOOK: query: -- negative
  -- with aggregate function
  EXPLAIN SELECT count(c_custkey) from customer_removal_n0 where c_nation IN ('USA', 'INDIA')
    group by c_custkey, c_nation
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_removal_n0
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: customer_removal_n0
                  filterExpr: (c_nation) IN ('USA', 'INDIA') (type: boolean)
                  Statistics: Num rows: 1 Data size: 92 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (c_nation) IN ('USA', 'INDIA') (type: boolean)
                    Statistics: Num rows: 1 Data size: 92 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: c_custkey (type: bigint)
                      outputColumnNames: c_custkey
                      Statistics: Num rows: 1 Data size: 92 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: count()
                        keys: c_custkey (type: bigint)
                        minReductionHashAggr: 0.4
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: bigint)
                          null sort order: z
                          sort order: +
                          Map-reduce partition columns: _col0 (type: bigint)
                          Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col1 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: bigint)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col1 (type: bigint)
                  outputColumnNames: _col0
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: DROP TABLE customer_removal_n0
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@customer_removal_n0
PREHOOK: Output: default@customer_removal_n0
POSTHOOK: query: DROP TABLE customer_removal_n0
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@customer_removal_n0
POSTHOOK: Output: default@customer_removal_n0
PREHOOK: query: DROP TABLE dates_removal_n0
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@dates_removal_n0
PREHOOK: Output: default@dates_removal_n0
POSTHOOK: query: DROP TABLE dates_removal_n0
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@dates_removal_n0
POSTHOOK: Output: default@dates_removal_n0
PREHOOK: query: -- group by reduction optimization
  create table dest_g21 (key1 int, value1 double, primary key(key1) disable rely)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@dest_g21
POSTHOOK: query: -- group by reduction optimization
  create table dest_g21 (key1 int, value1 double, primary key(key1) disable rely)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@dest_g21
PREHOOK: query: insert into dest_g21 values(1, 2), (2,2), (3, 1), (4,4), (5, null), (6, null)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@dest_g21
POSTHOOK: query: insert into dest_g21 values(1, 2), (2,2), (3, 1), (4,4), (5, null), (6, null)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@dest_g21
POSTHOOK: Lineage: dest_g21.key1 SCRIPT []
POSTHOOK: Lineage: dest_g21.value1 SCRIPT []
PREHOOK: query: -- value1 will removed because it is unused, then whole group by will be removed because key1 is unique
  explain select key1 from dest_g21 group by key1, value1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: -- value1 will removed because it is unused, then whole group by will be removed because key1 is unique
  explain select key1 from dest_g21 group by key1, value1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: dest_g21
          Select Operator
            expressions: key1 (type: int)
            outputColumnNames: _col0
            ListSink

PREHOOK: query: select key1 from dest_g21 group by key1, value1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: select key1 from dest_g21 group by key1, value1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
1
2
3
4
5
6
PREHOOK: query: -- same query but with filter
  explain select key1 from dest_g21 where value1 > 1 group by key1, value1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: -- same query but with filter
  explain select key1 from dest_g21 where value1 > 1 group by key1, value1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: dest_g21
          filterExpr: (value1 > 1.0D) (type: boolean)
          Filter Operator
            predicate: (value1 > 1.0D) (type: boolean)
            Select Operator
              expressions: key1 (type: int)
              outputColumnNames: _col0
              ListSink

PREHOOK: query: select key1 from dest_g21 where value1 > 1 group by key1, value1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: select key1 from dest_g21 where value1 > 1 group by key1, value1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
1
2
4
PREHOOK: query: explain select key1 from dest_g21 where key1 > 1 group by key1, value1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: explain select key1 from dest_g21 where key1 > 1 group by key1, value1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: dest_g21
          filterExpr: (key1 > 1) (type: boolean)
          Filter Operator
            predicate: (key1 > 1) (type: boolean)
            Select Operator
              expressions: key1 (type: int)
              outputColumnNames: _col0
              ListSink

PREHOOK: query: select key1 from dest_g21 where key1 > 1 group by key1, value1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: select key1 from dest_g21 where key1 > 1 group by key1, value1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
2
3
4
5
6
PREHOOK: query: -- only value1 will be removed because there is aggregate call
  explain select count(key1) from dest_g21 group by key1, value1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: -- only value1 will be removed because there is aggregate call
  explain select count(key1) from dest_g21 group by key1, value1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: dest_g21
                  Statistics: Num rows: 6 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key1 (type: int)
                    outputColumnNames: key1
                    Statistics: Num rows: 6 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      keys: key1 (type: int)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 6 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 6 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 6 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col1 (type: bigint)
                  outputColumnNames: _col0
                  Statistics: Num rows: 6 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 6 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(key1) from dest_g21 group by key1, value1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: select count(key1) from dest_g21 group by key1, value1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
1
1
1
1
1
1
PREHOOK: query: explain select count(key1) from dest_g21 where value1 > 1 group by key1, value1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: explain select count(key1) from dest_g21 where value1 > 1 group by key1, value1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: dest_g21
                  filterExpr: (value1 > 1.0D) (type: boolean)
                  Statistics: Num rows: 6 Data size: 64 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (value1 > 1.0D) (type: boolean)
                    Statistics: Num rows: 6 Data size: 64 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key1 (type: int)
                      outputColumnNames: key1
                      Statistics: Num rows: 6 Data size: 64 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: count()
                        keys: key1 (type: int)
                        minReductionHashAggr: 0.4
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 6 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: int)
                          null sort order: z
                          sort order: +
                          Map-reduce partition columns: _col0 (type: int)
                          Statistics: Num rows: 6 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col1 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 6 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col1 (type: bigint)
                  outputColumnNames: _col0
                  Statistics: Num rows: 6 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 6 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(key1) from dest_g21 where value1 > 1 group by key1, value1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: select count(key1) from dest_g21 where value1 > 1 group by key1, value1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
1
1
1
PREHOOK: query: -- t1.key is unique even after join therefore group by = group by (t1.key)
  explain select t1.key1 from dest_g21 t1 join dest_g21 t2 on t1.key1 = t2.key1 where t2.value1 > 2 group by t1.key1, t1.value1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: -- t1.key is unique even after join therefore group by = group by (t1.key)
  explain select t1.key1 from dest_g21 t1 join dest_g21 t2 on t1.key1 = t2.key1 where t2.value1 > 2 group by t1.key1, t1.value1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1
                  Statistics: Num rows: 6 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key1 (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 6 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 6 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: t2
                  filterExpr: (value1 > 2.0D) (type: boolean)
                  Statistics: Num rows: 6 Data size: 64 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (value1 > 2.0D) (type: boolean)
                    Statistics: Num rows: 4 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key1 (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0
                Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select t1.key1 from dest_g21 t1 join dest_g21 t2 on t1.key1 = t2.key1 where t2.value1 > 2 group by t1.key1, t1.value1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: select t1.key1 from dest_g21 t1 join dest_g21 t2 on t1.key1 = t2.key1 where t2.value1 > 2 group by t1.key1, t1.value1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
4
PREHOOK: query: explain select count(t1.key1) from dest_g21 t1 join dest_g21 t2 on t1.key1 = t2.key1 where t2.value1 > 2 group by t1.key1, t1.value1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: explain select count(t1.key1) from dest_g21 t1 join dest_g21 t2 on t1.key1 = t2.key1 where t2.value1 > 2 group by t1.key1, t1.value1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1
                  Statistics: Num rows: 6 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key1 (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 6 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 6 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: t2
                  filterExpr: (value1 > 2.0D) (type: boolean)
                  Statistics: Num rows: 6 Data size: 64 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (value1 > 2.0D) (type: boolean)
                    Statistics: Num rows: 4 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key1 (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0
                Statistics: Num rows: 4 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: count()
                  keys: _col0 (type: int)
                  minReductionHashAggr: 0.4
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 3 Data size: 36 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: int)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: int)
                    Statistics: Num rows: 3 Data size: 36 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col1 (type: bigint)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 3 Data size: 36 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col1 (type: bigint)
                  outputColumnNames: _col0
                  Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(t1.key1) from dest_g21 t1 join dest_g21 t2 on t1.key1 = t2.key1 where t2.value1 > 2 group by t1.key1, t1.value1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: select count(t1.key1) from dest_g21 t1 join dest_g21 t2 on t1.key1 = t2.key1 where t2.value1 > 2 group by t1.key1, t1.value1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
1
PREHOOK: query: -- both aggregate and one of the key1 should be removed
  explain select key1 from (select key1, count(key1) from dest_g21 where value1 < 4.5 group by key1, value1) sub
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: -- both aggregate and one of the key1 should be removed
  explain select key1 from (select key1, count(key1) from dest_g21 where value1 < 4.5 group by key1, value1) sub
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: dest_g21
          filterExpr: (value1 < 4.5D) (type: boolean)
          Filter Operator
            predicate: (value1 < 4.5D) (type: boolean)
            Select Operator
              expressions: key1 (type: int)
              outputColumnNames: _col0
              ListSink

PREHOOK: query: select key1 from (select key1, count(key1) from dest_g21 where value1 < 4.5 group by key1, value1) sub
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: select key1 from (select key1, count(key1) from dest_g21 where value1 < 4.5 group by key1, value1) sub
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
1
2
3
4
PREHOOK: query: -- one of the aggregate will be removed and one of the key1 will be removed
  explain select key1, sm from (select key1, count(key1), sum(key1) as sm from dest_g21 where value1 < 4.5 group by key1, value1) sub
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: -- one of the aggregate will be removed and one of the key1 will be removed
  explain select key1, sm from (select key1, count(key1), sum(key1) as sm from dest_g21 where value1 < 4.5 group by key1, value1) sub
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: dest_g21
                  filterExpr: (value1 < 4.5D) (type: boolean)
                  Statistics: Num rows: 6 Data size: 64 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (value1 < 4.5D) (type: boolean)
                    Statistics: Num rows: 6 Data size: 64 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key1 (type: int)
                      outputColumnNames: key1
                      Statistics: Num rows: 6 Data size: 64 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: sum(key1)
                        keys: key1 (type: int)
                        minReductionHashAggr: 0.4
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 6 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: int)
                          null sort order: z
                          sort order: +
                          Map-reduce partition columns: _col0 (type: int)
                          Statistics: Num rows: 6 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col1 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 6 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 6 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key1, sm from (select key1, count(key1), sum(key1) as sm from dest_g21 where value1 < 4.5 group by key1, value1) sub
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: select key1, sm from (select key1, count(key1), sum(key1) as sm from dest_g21 where value1 < 4.5 group by key1, value1) sub
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
3	3
1	1
2	2
4	4
PREHOOK: query: DROP table dest_g21
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@dest_g21
PREHOOK: Output: default@dest_g21
POSTHOOK: query: DROP table dest_g21
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@dest_g21
POSTHOOK: Output: default@dest_g21
PREHOOK: query: CREATE TABLE tconst(i int NOT NULL disable rely, j INT NOT NULL disable norely, d_year string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tconst
POSTHOOK: query: CREATE TABLE tconst(i int NOT NULL disable rely, j INT NOT NULL disable norely, d_year string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tconst
PREHOOK: query: INSERT INTO tconst values(1, 1, '2001'), (2, null, '2002'), (3, 3, '2010')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tconst
POSTHOOK: query: INSERT INTO tconst values(1, 1, '2001'), (2, null, '2002'), (3, 3, '2010')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tconst
POSTHOOK: Lineage: tconst.d_year SCRIPT []
POSTHOOK: Lineage: tconst.i SCRIPT []
POSTHOOK: Lineage: tconst.j SCRIPT []
PREHOOK: query: explain select i, j from tconst where i is not null group by i,j, d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@tconst
#### A masked pattern was here ####
POSTHOOK: query: explain select i, j from tconst where i is not null group by i,j, d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tconst
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: tconst
                  Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: i (type: int), j (type: int), d_year (type: string)
                    outputColumnNames: i, j, d_year
                    Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: i (type: int), j (type: int), d_year (type: string)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                        null sort order: zzz
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                        Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select i, j from tconst where i is not null group by i,j, d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@tconst
#### A masked pattern was here ####
POSTHOOK: query: select i, j from tconst where i is not null group by i,j, d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tconst
#### A masked pattern was here ####
1	1
3	3
2	NULL
PREHOOK: query: explain select i, j from tconst where i IS NOT NULL and j IS NOT NULL group by i,j, d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@tconst
#### A masked pattern was here ####
POSTHOOK: query: explain select i, j from tconst where i IS NOT NULL and j IS NOT NULL group by i,j, d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tconst
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: tconst
                  filterExpr: j is not null (type: boolean)
                  Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: j is not null (type: boolean)
                    Statistics: Num rows: 2 Data size: 192 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: i (type: int), j (type: int), d_year (type: string)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 2 Data size: 192 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                        null sort order: zzz
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                        Statistics: Num rows: 2 Data size: 192 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 2 Data size: 192 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select i, j from tconst where i IS NOT NULL and j IS NOT NULL group by i,j, d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@tconst
#### A masked pattern was here ####
POSTHOOK: query: select i, j from tconst where i IS NOT NULL and j IS NOT NULL group by i,j, d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tconst
#### A masked pattern was here ####
1	1
3	3
PREHOOK: query: explain select i,j from tconst where i is not null OR j IS NOT NULL group by i, j, d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@tconst
#### A masked pattern was here ####
POSTHOOK: query: explain select i,j from tconst where i is not null OR j IS NOT NULL group by i, j, d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tconst
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: tconst
                  Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: i (type: int), j (type: int), d_year (type: string)
                    outputColumnNames: i, j, d_year
                    Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: i (type: int), j (type: int), d_year (type: string)
                      minReductionHashAggr: 0.4
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                        null sort order: zzz
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                        Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select i,j from tconst where i is not null OR j IS NOT NULL group by i, j, d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@tconst
#### A masked pattern was here ####
POSTHOOK: query: select i,j from tconst where i is not null OR j IS NOT NULL group by i, j, d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tconst
#### A masked pattern was here ####
1	1
3	3
2	NULL
PREHOOK: query: explain select sum(t1.i) from tconst t1 join tconst t2 on t1.i=t2.j group by t1.i, t1.d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@tconst
#### A masked pattern was here ####
POSTHOOK: query: explain select sum(t1.i) from tconst t1 join tconst t2 on t1.i=t2.j group by t1.i, t1.d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tconst
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1
                  Statistics: Num rows: 3 Data size: 276 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: i (type: int), d_year (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 3 Data size: 276 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 3 Data size: 276 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: t2
                  filterExpr: j is not null (type: boolean)
                  Statistics: Num rows: 3 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: j is not null (type: boolean)
                    Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: j (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 2 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 2 Data size: 184 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: sum(_col0)
                  keys: _col0 (type: int), _col1 (type: string)
                  minReductionHashAggr: 0.4
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 2 Data size: 200 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: int), _col1 (type: string)
                    null sort order: zz
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: int), _col1 (type: string)
                    Statistics: Num rows: 2 Data size: 200 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: bigint)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: int), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 2 Data size: 200 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col2 (type: bigint)
                  outputColumnNames: _col0
                  Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select sum(t1.i) from tconst t1 join tconst t2 on t1.i=t2.j group by t1.i, t1.d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@tconst
#### A masked pattern was here ####
POSTHOOK: query: select sum(t1.i) from tconst t1 join tconst t2 on t1.i=t2.j group by t1.i, t1.d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tconst
#### A masked pattern was here ####
1
3
PREHOOK: query: explain select sum(t1.i) from tconst t1 join tconst t2 on t1.i=t2.i group by t1.i, t1.d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@tconst
#### A masked pattern was here ####
POSTHOOK: query: explain select sum(t1.i) from tconst t1 join tconst t2 on t1.i=t2.i group by t1.i, t1.d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tconst
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1
                  Statistics: Num rows: 3 Data size: 276 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: i (type: int), d_year (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 3 Data size: 276 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 3 Data size: 276 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: t2
                  Statistics: Num rows: 3 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: i (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 3 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 3 Data size: 12 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 3 Data size: 276 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: sum(_col0)
                  keys: _col0 (type: int), _col1 (type: string)
                  minReductionHashAggr: 0.4
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: int), _col1 (type: string)
                    null sort order: zz
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: int), _col1 (type: string)
                    Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: bigint)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: int), KEY._col1 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col2 (type: bigint)
                  outputColumnNames: _col0
                  Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select sum(t1.i) from tconst t1 join tconst t2 on t1.i=t2.i group by t1.i, t1.d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@tconst
#### A masked pattern was here ####
POSTHOOK: query: select sum(t1.i) from tconst t1 join tconst t2 on t1.i=t2.i group by t1.i, t1.d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tconst
#### A masked pattern was here ####
2
1
3
PREHOOK: query: DROP TABLE tconst
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@tconst
PREHOOK: Output: default@tconst
POSTHOOK: query: DROP TABLE tconst
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@tconst
POSTHOOK: Output: default@tconst
PREHOOK: query: create table dest_g21 (key1 int NOT NULL disable rely, value1 double, UNIQUE(key1) disable rely)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@dest_g21
POSTHOOK: query: create table dest_g21 (key1 int NOT NULL disable rely, value1 double, UNIQUE(key1) disable rely)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@dest_g21
PREHOOK: query: explain select key1 from dest_g21 group by key1, value1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g21
#### A masked pattern was here ####
POSTHOOK: query: explain select key1 from dest_g21 group by key1, value1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g21
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: dest_g21
          Select Operator
            expressions: key1 (type: int)
            outputColumnNames: _col0
            ListSink

PREHOOK: query: create table dest_g24 (key1 int , value1 double, UNIQUE(key1) disable rely)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@dest_g24
POSTHOOK: query: create table dest_g24 (key1 int , value1 double, UNIQUE(key1) disable rely)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@dest_g24
PREHOOK: query: explain select key1 from dest_g24 group by key1, value1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_g24
#### A masked pattern was here ####
POSTHOOK: query: explain select key1 from dest_g24 group by key1, value1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_g24
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: dest_g24
                  Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key1 (type: int), value1 (type: double)
                    outputColumnNames: key1, value1
                    Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      keys: key1 (type: int), value1 (type: double)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: double)
                        null sort order: zz
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: int), _col1 (type: double)
                        Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: int), KEY._col1 (type: double)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: int)
                  outputColumnNames: _col0
                  Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: DROP TABLE dest_g21
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@dest_g21
PREHOOK: Output: default@dest_g21
POSTHOOK: query: DROP TABLE dest_g21
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@dest_g21
POSTHOOK: Output: default@dest_g21
PREHOOK: query: DROP TABLE dest_g24
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@dest_g24
PREHOOK: Output: default@dest_g24
POSTHOOK: query: DROP TABLE dest_g24
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@dest_g24
POSTHOOK: Output: default@dest_g24
PREHOOK: query: CREATE TABLE `customer`(
  `c_customer_sk` int,
  `c_customer_id` string,
  `c_current_cdemo_sk` int,
  `c_current_hdemo_sk` int,
  `c_current_addr_sk` int,
  `c_first_shipto_date_sk` int,
  `c_first_sales_date_sk` int,
  `c_salutation` string,
  `c_first_name` string,
  `c_last_name` string,
  `c_preferred_cust_flag` string,
  `c_birth_day` int,
  `c_birth_month` int,
  `c_birth_year` int,
  `c_birth_country` string,
  `c_login` string,
  `c_email_address` string,
  `c_last_review_date` string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@customer
POSTHOOK: query: CREATE TABLE `customer`(
  `c_customer_sk` int,
  `c_customer_id` string,
  `c_current_cdemo_sk` int,
  `c_current_hdemo_sk` int,
  `c_current_addr_sk` int,
  `c_first_shipto_date_sk` int,
  `c_first_sales_date_sk` int,
  `c_salutation` string,
  `c_first_name` string,
  `c_last_name` string,
  `c_preferred_cust_flag` string,
  `c_birth_day` int,
  `c_birth_month` int,
  `c_birth_year` int,
  `c_birth_country` string,
  `c_login` string,
  `c_email_address` string,
  `c_last_review_date` string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@customer
PREHOOK: query: CREATE TABLE `store_sales`(
    `ss_sold_date_sk` int,
    `ss_sold_time_sk` int,
    `ss_item_sk` int,
    `ss_customer_sk` int,
    `ss_cdemo_sk` int,
    `ss_hdemo_sk` int,
    `ss_addr_sk` int,
    `ss_store_sk` int,
    `ss_promo_sk` int,
    `ss_ticket_number` int,
    `ss_quantity` int,
    `ss_wholesale_cost` decimal(7,2),
    `ss_list_price` decimal(7,2),
    `ss_sales_price` decimal(7,2),
    `ss_ext_discount_amt` decimal(7,2),
    `ss_ext_sales_price` decimal(7,2),
    `ss_ext_wholesale_cost` decimal(7,2),
    `ss_ext_list_price` decimal(7,2),
    `ss_ext_tax` decimal(7,2),
    `ss_coupon_amt` decimal(7,2),
    `ss_net_paid` decimal(7,2),
    `ss_net_paid_inc_tax` decimal(7,2),
    `ss_net_profit` decimal(7,2))
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@store_sales
POSTHOOK: query: CREATE TABLE `store_sales`(
    `ss_sold_date_sk` int,
    `ss_sold_time_sk` int,
    `ss_item_sk` int,
    `ss_customer_sk` int,
    `ss_cdemo_sk` int,
    `ss_hdemo_sk` int,
    `ss_addr_sk` int,
    `ss_store_sk` int,
    `ss_promo_sk` int,
    `ss_ticket_number` int,
    `ss_quantity` int,
    `ss_wholesale_cost` decimal(7,2),
    `ss_list_price` decimal(7,2),
    `ss_sales_price` decimal(7,2),
    `ss_ext_discount_amt` decimal(7,2),
    `ss_ext_sales_price` decimal(7,2),
    `ss_ext_wholesale_cost` decimal(7,2),
    `ss_ext_list_price` decimal(7,2),
    `ss_ext_tax` decimal(7,2),
    `ss_coupon_amt` decimal(7,2),
    `ss_net_paid` decimal(7,2),
    `ss_net_paid_inc_tax` decimal(7,2),
    `ss_net_profit` decimal(7,2))
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@store_sales
PREHOOK: query: alter table customer add constraint pk_c primary key (c_customer_sk) disable novalidate rely
PREHOOK: type: ALTERTABLE_ADDCONSTRAINT
POSTHOOK: query: alter table customer add constraint pk_c primary key (c_customer_sk) disable novalidate rely
POSTHOOK: type: ALTERTABLE_ADDCONSTRAINT
PREHOOK: query: alter table customer change column c_customer_id c_customer_id string constraint cid_nn not null disable novalidate rely
PREHOOK: type: ALTERTABLE_RENAMECOL
PREHOOK: Input: default@customer
PREHOOK: Output: default@customer
POSTHOOK: query: alter table customer change column c_customer_id c_customer_id string constraint cid_nn not null disable novalidate rely
POSTHOOK: type: ALTERTABLE_RENAMECOL
POSTHOOK: Input: default@customer
POSTHOOK: Output: default@customer
PREHOOK: query: alter table customer add constraint uk1 UNIQUE(c_customer_id) disable novalidate rely
PREHOOK: type: ALTERTABLE_ADDCONSTRAINT
POSTHOOK: query: alter table customer add constraint uk1 UNIQUE(c_customer_id) disable novalidate rely
POSTHOOK: type: ALTERTABLE_ADDCONSTRAINT
PREHOOK: query: alter table store_sales add constraint pk_ss primary key (ss_item_sk, ss_ticket_number) disable novalidate rely
PREHOOK: type: ALTERTABLE_ADDCONSTRAINT
POSTHOOK: query: alter table store_sales add constraint pk_ss primary key (ss_item_sk, ss_ticket_number) disable novalidate rely
POSTHOOK: type: ALTERTABLE_ADDCONSTRAINT
PREHOOK: query: alter table store_sales add constraint ss_c foreign key  (ss_customer_sk) references customer (c_customer_sk) disable novalidate rely
PREHOOK: type: ALTERTABLE_ADDCONSTRAINT
POSTHOOK: query: alter table store_sales add constraint ss_c foreign key  (ss_customer_sk) references customer (c_customer_sk) disable novalidate rely
POSTHOOK: type: ALTERTABLE_ADDCONSTRAINT
PREHOOK: query: explain cbo
     select c_customer_id
     from customer
         ,store_sales
     where c_customer_sk = ss_customer_sk
     group by c_customer_id
             ,c_first_name
             ,c_last_name
             ,c_preferred_cust_flag
             ,c_birth_country
             ,c_login
             ,c_email_address
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain cbo
     select c_customer_id
     from customer
         ,store_sales
     where c_customer_sk = ss_customer_sk
     group by c_customer_id
             ,c_first_name
             ,c_last_name
             ,c_preferred_cust_flag
             ,c_birth_country
             ,c_login
             ,c_email_address
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveAggregate(group=[{1}])
  HiveJoin(condition=[=($0, $8)], joinType=[inner], algorithm=[none], cost=[not available])
    HiveProject(c_customer_sk=[$0], c_customer_id=[$1], c_first_name=[$8], c_last_name=[$9], c_preferred_cust_flag=[$10], c_birth_country=[$14], c_login=[$15], c_email_address=[$16])
      HiveTableScan(table=[[default, customer]], table:alias=[customer])
    HiveProject(ss_customer_sk=[$3])
      HiveFilter(condition=[IS NOT NULL($3)])
        HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])

PREHOOK: query: explain cbo
          select c_customer_id
          from store_sales
              ,customer
          where c_customer_sk = ss_customer_sk
          group by c_customer_id
                  ,c_first_name
                  ,c_last_name
                  ,c_preferred_cust_flag
                  ,c_birth_country
                  ,c_login
                  ,c_email_address
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain cbo
          select c_customer_id
          from store_sales
              ,customer
          where c_customer_sk = ss_customer_sk
          group by c_customer_id
                  ,c_first_name
                  ,c_last_name
                  ,c_preferred_cust_flag
                  ,c_birth_country
                  ,c_login
                  ,c_email_address
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveAggregate(group=[{2}])
  HiveJoin(condition=[=($1, $0)], joinType=[inner], algorithm=[none], cost=[not available])
    HiveProject(ss_customer_sk=[$3])
      HiveFilter(condition=[IS NOT NULL($3)])
        HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
    HiveProject(c_customer_sk=[$0], c_customer_id=[$1], c_first_name=[$8], c_last_name=[$9], c_preferred_cust_flag=[$10], c_birth_country=[$14], c_login=[$15], c_email_address=[$16])
      HiveTableScan(table=[[default, customer]], table:alias=[customer])

PREHOOK: query: explain cbo
    with year_total as (
     select c_customer_id customer_id
           ,c_first_name customer_first_name
           ,c_last_name customer_last_name
           ,c_preferred_cust_flag customer_preferred_cust_flag
           ,c_birth_country customer_birth_country
           ,c_login customer_login
           ,c_email_address customer_email_address
           ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
           ,'s' sale_type
     from customer
         ,store_sales
     where c_customer_sk = ss_customer_sk
     group by c_customer_id
             ,c_first_name
             ,c_last_name
             ,c_preferred_cust_flag
             ,c_birth_country
             ,c_login
             ,c_email_address
             )
      select  t_s_secyear.customer_preferred_cust_flag
     from
         year_total t_s_secyear
       where t_s_secyear.sale_type = 's'
     order by t_s_secyear.customer_preferred_cust_flag
    limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain cbo
    with year_total as (
     select c_customer_id customer_id
           ,c_first_name customer_first_name
           ,c_last_name customer_last_name
           ,c_preferred_cust_flag customer_preferred_cust_flag
           ,c_birth_country customer_birth_country
           ,c_login customer_login
           ,c_email_address customer_email_address
           ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
           ,'s' sale_type
     from customer
         ,store_sales
     where c_customer_sk = ss_customer_sk
     group by c_customer_id
             ,c_first_name
             ,c_last_name
             ,c_preferred_cust_flag
             ,c_birth_country
             ,c_login
             ,c_email_address
             )
      select  t_s_secyear.customer_preferred_cust_flag
     from
         year_total t_s_secyear
       where t_s_secyear.sale_type = 's'
     order by t_s_secyear.customer_preferred_cust_flag
    limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveSortLimit(sort0=[$0], dir0=[ASC], fetch=[100])
  HiveProject(customer_preferred_cust_flag=[$1])
    HiveAggregate(group=[{1, 4}])
      HiveJoin(condition=[=($0, $8)], joinType=[inner], algorithm=[none], cost=[not available])
        HiveProject(c_customer_sk=[$0], c_customer_id=[$1], c_first_name=[$8], c_last_name=[$9], c_preferred_cust_flag=[$10], c_birth_country=[$14], c_login=[$15], c_email_address=[$16])
          HiveTableScan(table=[[default, customer]], table:alias=[customer])
        HiveProject(ss_customer_sk=[$3], /=[/(+(-(-($17, $16), $14), $15), 2:DECIMAL(10, 0))])
          HiveFilter(condition=[IS NOT NULL($3)])
            HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])

PREHOOK: query: explain cbo
        with year_total as (
         select c_customer_id customer_id
               ,c_first_name customer_first_name
               ,c_last_name customer_last_name
               ,c_preferred_cust_flag customer_preferred_cust_flag
               ,c_birth_country customer_birth_country
               ,c_login customer_login
               ,c_email_address customer_email_address
               ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
               ,'s' sale_type
         from store_sales
             ,customer
         where c_customer_sk = ss_customer_sk
         group by c_customer_id
                 ,c_first_name
                 ,c_last_name
                 ,c_preferred_cust_flag
                 ,c_birth_country
                 ,c_login
                 ,c_email_address
                 )
          select  t_s_secyear.customer_preferred_cust_flag
         from
             year_total t_s_secyear
           where t_s_secyear.sale_type = 's'
         order by t_s_secyear.customer_preferred_cust_flag
        limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain cbo
        with year_total as (
         select c_customer_id customer_id
               ,c_first_name customer_first_name
               ,c_last_name customer_last_name
               ,c_preferred_cust_flag customer_preferred_cust_flag
               ,c_birth_country customer_birth_country
               ,c_login customer_login
               ,c_email_address customer_email_address
               ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
               ,'s' sale_type
         from store_sales
             ,customer
         where c_customer_sk = ss_customer_sk
         group by c_customer_id
                 ,c_first_name
                 ,c_last_name
                 ,c_preferred_cust_flag
                 ,c_birth_country
                 ,c_login
                 ,c_email_address
                 )
          select  t_s_secyear.customer_preferred_cust_flag
         from
             year_total t_s_secyear
           where t_s_secyear.sale_type = 's'
         order by t_s_secyear.customer_preferred_cust_flag
        limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveSortLimit(sort0=[$0], dir0=[ASC], fetch=[100])
  HiveProject(customer_preferred_cust_flag=[$1])
    HiveAggregate(group=[{1, 4}])
      HiveJoin(condition=[=($0, $8)], joinType=[inner], algorithm=[none], cost=[not available])
        HiveProject(c_customer_sk=[$0], c_customer_id=[$1], c_first_name=[$8], c_last_name=[$9], c_preferred_cust_flag=[$10], c_birth_country=[$14], c_login=[$15], c_email_address=[$16])
          HiveTableScan(table=[[default, customer]], table:alias=[customer])
        HiveProject(ss_customer_sk=[$3], /=[/(+(-(-($17, $16), $14), $15), 2:DECIMAL(10, 0))])
          HiveFilter(condition=[IS NOT NULL($3)])
            HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])

PREHOOK: query: CREATE TABLE `date_dim`(
          `d_date_sk` int,
          `d_date_id` string,
          `d_date` string,
          `d_month_seq` int,
          `d_week_seq` int,
          `d_quarter_seq` int,
          `d_year` int,
          `d_dow` int,
          `d_moy` int,
          `d_dom` int,
          `d_qoy` int,
          `d_fy_year` int,
          `d_fy_quarter_seq` int,
          `d_fy_week_seq` int,
          `d_day_name` string,
          `d_quarter_name` string,
          `d_holiday` string,
          `d_weekend` string,
          `d_following_holiday` string,
          `d_first_dom` int,
          `d_last_dom` int,
          `d_same_day_ly` int,
          `d_same_day_lq` int,
          `d_current_day` string,
          `d_current_week` string,
          `d_current_month` string,
          `d_current_quarter` string,
          `d_current_year` string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@date_dim
POSTHOOK: query: CREATE TABLE `date_dim`(
          `d_date_sk` int,
          `d_date_id` string,
          `d_date` string,
          `d_month_seq` int,
          `d_week_seq` int,
          `d_quarter_seq` int,
          `d_year` int,
          `d_dow` int,
          `d_moy` int,
          `d_dom` int,
          `d_qoy` int,
          `d_fy_year` int,
          `d_fy_quarter_seq` int,
          `d_fy_week_seq` int,
          `d_day_name` string,
          `d_quarter_name` string,
          `d_holiday` string,
          `d_weekend` string,
          `d_following_holiday` string,
          `d_first_dom` int,
          `d_last_dom` int,
          `d_same_day_ly` int,
          `d_same_day_lq` int,
          `d_current_day` string,
          `d_current_week` string,
          `d_current_month` string,
          `d_current_quarter` string,
          `d_current_year` string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@date_dim
PREHOOK: query: explain cbo
    with year_total as (
     select c_customer_id customer_id
           ,c_first_name customer_first_name
           ,c_last_name customer_last_name
           ,c_preferred_cust_flag customer_preferred_cust_flag
           ,c_birth_country customer_birth_country
           ,c_login customer_login
           ,c_email_address customer_email_address
           ,d_year dyear
           ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
           ,'s' sale_type
     from customer
         ,store_sales
         ,date_dim
     where c_customer_sk = ss_customer_sk
       and ss_sold_date_sk = d_date_sk
     group by c_customer_id
             ,c_first_name
             ,c_last_name
             ,c_preferred_cust_flag
             ,c_birth_country
             ,c_login
             ,c_email_address
             ,d_year
             )
      select  t_s_secyear.customer_preferred_cust_flag
     from year_total t_s_firstyear
         ,year_total t_s_secyear
     where t_s_secyear.customer_id = t_s_firstyear.customer_id
       and t_s_firstyear.sale_type = 's'
       and t_s_secyear.sale_type = 's'
       and t_s_firstyear.dyear =  2001
       and t_s_secyear.dyear = 2001+1
       and t_s_firstyear.year_total > 0
     order by t_s_secyear.customer_preferred_cust_flag
    limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain cbo
    with year_total as (
     select c_customer_id customer_id
           ,c_first_name customer_first_name
           ,c_last_name customer_last_name
           ,c_preferred_cust_flag customer_preferred_cust_flag
           ,c_birth_country customer_birth_country
           ,c_login customer_login
           ,c_email_address customer_email_address
           ,d_year dyear
           ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
           ,'s' sale_type
     from customer
         ,store_sales
         ,date_dim
     where c_customer_sk = ss_customer_sk
       and ss_sold_date_sk = d_date_sk
     group by c_customer_id
             ,c_first_name
             ,c_last_name
             ,c_preferred_cust_flag
             ,c_birth_country
             ,c_login
             ,c_email_address
             ,d_year
             )
      select  t_s_secyear.customer_preferred_cust_flag
     from year_total t_s_firstyear
         ,year_total t_s_secyear
     where t_s_secyear.customer_id = t_s_firstyear.customer_id
       and t_s_firstyear.sale_type = 's'
       and t_s_secyear.sale_type = 's'
       and t_s_firstyear.dyear =  2001
       and t_s_secyear.dyear = 2001+1
       and t_s_firstyear.year_total > 0
     order by t_s_secyear.customer_preferred_cust_flag
    limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveSortLimit(sort0=[$0], dir0=[ASC], fetch=[100])
  HiveProject(customer_preferred_cust_flag=[$1])
    HiveJoin(condition=[=($0, $2)], joinType=[inner], algorithm=[none], cost=[not available])
      HiveProject(c_customer_id=[$0], c_preferred_cust_flag=[$1])
        HiveAggregate(group=[{1, 4}])
          HiveJoin(condition=[=($0, $9)], joinType=[inner], algorithm=[none], cost=[not available])
            HiveProject(c_customer_sk=[$0], c_customer_id=[$1], c_first_name=[$8], c_last_name=[$9], c_preferred_cust_flag=[$10], c_birth_country=[$14], c_login=[$15], c_email_address=[$16])
              HiveTableScan(table=[[default, customer]], table:alias=[customer])
            HiveJoin(condition=[=($0, $3)], joinType=[inner], algorithm=[none], cost=[not available])
              HiveProject(ss_sold_date_sk=[$0], ss_customer_sk=[$3], /=[/(+(-(-($17, $16), $14), $15), 2:DECIMAL(10, 0))])
                HiveFilter(condition=[AND(IS NOT NULL($3), IS NOT NULL($0))])
                  HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
              HiveProject(d_date_sk=[$0])
                HiveFilter(condition=[AND(=($6, 2002), IS NOT NULL($0))])
                  HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
      HiveProject($f0=[$0])
        HiveFilter(condition=[>($1, 0)])
          HiveAggregate(group=[{1}], agg#0=[sum($10)])
            HiveJoin(condition=[=($0, $9)], joinType=[inner], algorithm=[none], cost=[not available])
              HiveProject(c_customer_sk=[$0], c_customer_id=[$1], c_first_name=[$8], c_last_name=[$9], c_preferred_cust_flag=[$10], c_birth_country=[$14], c_login=[$15], c_email_address=[$16])
                HiveTableScan(table=[[default, customer]], table:alias=[customer])
              HiveJoin(condition=[=($0, $3)], joinType=[inner], algorithm=[none], cost=[not available])
                HiveProject(ss_sold_date_sk=[$0], ss_customer_sk=[$3], /=[/(+(-(-($17, $16), $14), $15), 2:DECIMAL(10, 0))])
                  HiveFilter(condition=[AND(IS NOT NULL($3), IS NOT NULL($0))])
                    HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
                HiveProject(d_date_sk=[$0])
                  HiveFilter(condition=[AND(=($6, 2001), IS NOT NULL($0))])
                    HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])

PREHOOK: query: EXPLAIN	CBO
SELECT
	C_CUSTOMER_SK
FROM
	CUSTOMER
,	STORE_SALES
WHERE
	C_CUSTOMER_SK	=	SS_CUSTOMER_SK
GROUP BY
	C_CUSTOMER_SK
,	C_CUSTOMER_ID
,	C_FIRST_NAME
,	C_LAST_NAME
,	C_PREFERRED_CUST_FLAG
,	C_BIRTH_COUNTRY
,	C_LOGIN
,	C_EMAIL_ADDRESS
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN	CBO
SELECT
	C_CUSTOMER_SK
FROM
	CUSTOMER
,	STORE_SALES
WHERE
	C_CUSTOMER_SK	=	SS_CUSTOMER_SK
GROUP BY
	C_CUSTOMER_SK
,	C_CUSTOMER_ID
,	C_FIRST_NAME
,	C_LAST_NAME
,	C_PREFERRED_CUST_FLAG
,	C_BIRTH_COUNTRY
,	C_LOGIN
,	C_EMAIL_ADDRESS
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveSemiJoin(condition=[=($0, $1)], joinType=[semi])
  HiveProject(c_customer_sk=[$0])
    HiveTableScan(table=[[default, customer]], table:alias=[customer])
  HiveProject(ss_customer_sk=[$3])
    HiveFilter(condition=[IS NOT NULL($3)])
      HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])

PREHOOK: query: EXPLAIN	CBO
SELECT
	C_CUSTOMER_ID
FROM
	CUSTOMER
,	STORE_SALES
WHERE
	C_CUSTOMER_SK	=	SS_CUSTOMER_SK
GROUP BY
	C_CUSTOMER_SK
,	C_CUSTOMER_ID
,	C_FIRST_NAME
,	C_LAST_NAME
,	C_PREFERRED_CUST_FLAG
,	C_BIRTH_COUNTRY
,	C_LOGIN
,	C_EMAIL_ADDRESS
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN	CBO
SELECT
	C_CUSTOMER_ID
FROM
	CUSTOMER
,	STORE_SALES
WHERE
	C_CUSTOMER_SK	=	SS_CUSTOMER_SK
GROUP BY
	C_CUSTOMER_SK
,	C_CUSTOMER_ID
,	C_FIRST_NAME
,	C_LAST_NAME
,	C_PREFERRED_CUST_FLAG
,	C_BIRTH_COUNTRY
,	C_LOGIN
,	C_EMAIL_ADDRESS
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveProject(c_customer_id=[$2])
  HiveJoin(condition=[=($0, $1)], joinType=[inner], algorithm=[none], cost=[not available])
    HiveSemiJoin(condition=[=($0, $1)], joinType=[semi])
      HiveProject(c_customer_sk=[$0])
        HiveTableScan(table=[[default, customer]], table:alias=[customer])
      HiveProject(ss_customer_sk=[$0])
        HiveFilter(condition=[IS NOT NULL($0)])
          HiveProject(ss_customer_sk=[$3])
            HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
    HiveProject(c_customer_sk=[$0], c_customer_id=[$1])
      HiveTableScan(table=[[default, customer]], table:alias=[customer])

PREHOOK: query: EXPLAIN	CBO
SELECT
	C_FIRST_NAME
FROM
	CUSTOMER
,	STORE_SALES
WHERE
	C_CUSTOMER_SK	=	SS_CUSTOMER_SK
GROUP BY
	C_CUSTOMER_SK
,	C_FIRST_NAME
,	C_LAST_NAME
,	C_PREFERRED_CUST_FLAG
,	C_BIRTH_COUNTRY
,	C_LOGIN
,	C_EMAIL_ADDRESS
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN	CBO
SELECT
	C_FIRST_NAME
FROM
	CUSTOMER
,	STORE_SALES
WHERE
	C_CUSTOMER_SK	=	SS_CUSTOMER_SK
GROUP BY
	C_CUSTOMER_SK
,	C_FIRST_NAME
,	C_LAST_NAME
,	C_PREFERRED_CUST_FLAG
,	C_BIRTH_COUNTRY
,	C_LOGIN
,	C_EMAIL_ADDRESS
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveProject(c_first_name=[$2])
  HiveJoin(condition=[=($0, $1)], joinType=[inner], algorithm=[none], cost=[not available])
    HiveSemiJoin(condition=[=($0, $1)], joinType=[semi])
      HiveProject(c_customer_sk=[$0])
        HiveTableScan(table=[[default, customer]], table:alias=[customer])
      HiveProject(ss_customer_sk=[$0])
        HiveFilter(condition=[IS NOT NULL($0)])
          HiveProject(ss_customer_sk=[$3])
            HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
    HiveProject(c_customer_sk=[$0], c_first_name=[$8])
      HiveTableScan(table=[[default, customer]], table:alias=[customer])

PREHOOK: query: EXPLAIN	CBO
SELECT
	C_CUSTOMER_ID
FROM
	CUSTOMER
,	STORE_SALES
WHERE
	C_CUSTOMER_SK	=	SS_CUSTOMER_SK
GROUP BY
	C_EMAIL_ADDRESS
,	C_LAST_NAME
,	C_FIRST_NAME
,	C_CUSTOMER_ID
,	C_PREFERRED_CUST_FLAG
,	C_BIRTH_COUNTRY
,	C_LOGIN
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN	CBO
SELECT
	C_CUSTOMER_ID
FROM
	CUSTOMER
,	STORE_SALES
WHERE
	C_CUSTOMER_SK	=	SS_CUSTOMER_SK
GROUP BY
	C_EMAIL_ADDRESS
,	C_LAST_NAME
,	C_FIRST_NAME
,	C_CUSTOMER_ID
,	C_PREFERRED_CUST_FLAG
,	C_BIRTH_COUNTRY
,	C_LOGIN
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveAggregate(group=[{1}])
  HiveJoin(condition=[=($0, $8)], joinType=[inner], algorithm=[none], cost=[not available])
    HiveProject(c_customer_sk=[$0], c_customer_id=[$1], c_first_name=[$8], c_last_name=[$9], c_preferred_cust_flag=[$10], c_birth_country=[$14], c_login=[$15], c_email_address=[$16])
      HiveTableScan(table=[[default, customer]], table:alias=[customer])
    HiveProject(ss_customer_sk=[$3])
      HiveFilter(condition=[IS NOT NULL($3)])
        HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])

PREHOOK: query: explain cbo select c_customer_sk from
 (select c_first_name, c_customer_sk ,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim
      ,customer
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = c_customer_sk
  group by c_first_name,c_customer_sk,d_date
  having count(*) >4) subq
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain cbo select c_customer_sk from
 (select c_first_name, c_customer_sk ,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim
      ,customer
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = c_customer_sk
  group by c_first_name,c_customer_sk,d_date
  having count(*) >4) subq
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveProject(c_customer_sk=[$0])
  HiveFilter(condition=[>($2, 4)])
    HiveProject(c_customer_sk=[$3], d_date=[$1], $f2=[$2])
      HiveJoin(condition=[=($0, $3)], joinType=[inner], algorithm=[none], cost=[not available])
        HiveProject(ss_item_sk=[$0], d_date=[$1], $f2=[$2])
          HiveAggregate(group=[{1, 3}], agg#0=[count()])
            HiveJoin(condition=[=($0, $2)], joinType=[inner], algorithm=[none], cost=[not available])
              HiveProject(ss_sold_date_sk=[$0], ss_item_sk=[$2])
                HiveFilter(condition=[IS NOT NULL($0)])
                  HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
              HiveProject(d_date_sk=[$0], d_date=[$2])
                HiveFilter(condition=[IS NOT NULL($0)])
                  HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
        HiveProject(c_customer_sk=[$0])
          HiveTableScan(table=[[default, customer]], table:alias=[customer])

PREHOOK: query: explain cbo select c_customer_sk from
 (select substr(c_first_name, 1,30), c_customer_sk ,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim
      ,customer
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = c_customer_sk
  group by substr(c_first_name, 1, 30),c_customer_sk,d_date
  having count(*) >4) subq
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain cbo select c_customer_sk from
 (select substr(c_first_name, 1,30), c_customer_sk ,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim
      ,customer
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = c_customer_sk
  group by substr(c_first_name, 1, 30),c_customer_sk,d_date
  having count(*) >4) subq
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveProject(c_customer_sk=[$0])
  HiveFilter(condition=[>($2, 4)])
    HiveProject(c_customer_sk=[$3], d_date=[$1], $f2=[$2])
      HiveJoin(condition=[=($0, $3)], joinType=[inner], algorithm=[none], cost=[not available])
        HiveProject(ss_item_sk=[$0], d_date=[$1], $f2=[$2])
          HiveAggregate(group=[{1, 3}], agg#0=[count()])
            HiveJoin(condition=[=($0, $2)], joinType=[inner], algorithm=[none], cost=[not available])
              HiveProject(ss_sold_date_sk=[$0], ss_item_sk=[$2])
                HiveFilter(condition=[IS NOT NULL($0)])
                  HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
              HiveProject(d_date_sk=[$0], d_date=[$2])
                HiveFilter(condition=[IS NOT NULL($0)])
                  HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
        HiveProject(c_customer_sk=[$0])
          HiveTableScan(table=[[default, customer]], table:alias=[customer])

PREHOOK: query: explain cbo select c_customer_sk from
 (select substr(c_first_name, 1,30), c_customer_sk ,count(*) cnt
  from store_sales
      ,date_dim
      ,customer
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = c_customer_sk
  group by substr(c_first_name, 1, 30),c_customer_sk
  having count(*) >4) subq
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain cbo select c_customer_sk from
 (select substr(c_first_name, 1,30), c_customer_sk ,count(*) cnt
  from store_sales
      ,date_dim
      ,customer
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = c_customer_sk
  group by substr(c_first_name, 1, 30),c_customer_sk
  having count(*) >4) subq
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveProject(c_customer_sk=[$0])
  HiveFilter(condition=[>($1, 4)])
    HiveProject(c_customer_sk=[$2], $f1=[$1])
      HiveJoin(condition=[=($0, $2)], joinType=[inner], algorithm=[none], cost=[not available])
        HiveProject(ss_item_sk=[$0], $f1=[$1])
          HiveAggregate(group=[{1}], agg#0=[count()])
            HiveJoin(condition=[=($0, $2)], joinType=[inner], algorithm=[none], cost=[not available])
              HiveProject(ss_sold_date_sk=[$0], ss_item_sk=[$2])
                HiveFilter(condition=[IS NOT NULL($0)])
                  HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
              HiveProject(d_date_sk=[$0])
                HiveFilter(condition=[IS NOT NULL($0)])
                  HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
        HiveProject(c_customer_sk=[$0])
          HiveTableScan(table=[[default, customer]], table:alias=[customer])

PREHOOK: query: -- group by keys from multiple table with non-deterministic expression
explain cbo select c_customer_sk from
 (select rand(), c_customer_sk ,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim
      ,customer
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = c_customer_sk
  group by rand(),c_customer_sk,d_date
  having count(*) >4) subq
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: -- group by keys from multiple table with non-deterministic expression
explain cbo select c_customer_sk from
 (select rand(), c_customer_sk ,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim
      ,customer
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = c_customer_sk
  group by rand(),c_customer_sk,d_date
  having count(*) >4) subq
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveProject(c_customer_sk=[$1])
  HiveFilter(condition=[>($3, 4)])
    HiveAggregate(group=[{0, 1, 2}], agg#0=[count()])
      HiveProject($f0=[rand()], $f1=[$2], $f2=[$4])
        HiveJoin(condition=[=($0, $3)], joinType=[inner], algorithm=[none], cost=[not available])
          HiveJoin(condition=[=($1, $2)], joinType=[inner], algorithm=[none], cost=[not available])
            HiveProject(ss_sold_date_sk=[$0], ss_item_sk=[$2])
              HiveFilter(condition=[IS NOT NULL($0)])
                HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
            HiveProject(c_customer_sk=[$0])
              HiveTableScan(table=[[default, customer]], table:alias=[customer])
          HiveProject(d_date_sk=[$0], d_date=[$2])
            HiveFilter(condition=[IS NOT NULL($0)])
              HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])

PREHOOK: query: explain cbo select * from
 (select substr(c_first_name, 1,30), log2(c_customer_sk),d_date solddate,count(*) cnt
  from store_sales
      ,date_dim
      ,customer
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = c_customer_sk
  group by substr(c_first_name, 1, 30),log2(c_customer_sk),d_date
  having count(*) >4) subq
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain cbo select * from
 (select substr(c_first_name, 1,30), log2(c_customer_sk),d_date solddate,count(*) cnt
  from store_sales
      ,date_dim
      ,customer
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = c_customer_sk
  group by substr(c_first_name, 1, 30),log2(c_customer_sk),d_date
  having count(*) >4) subq
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveFilter(condition=[>($3, 4)])
  HiveProject(substr=[$1], log2=[$2], d_date=[$0], $f3=[$3])
    HiveAggregate(group=[{3, 5, 6}], agg#0=[count()])
      HiveJoin(condition=[=($1, $4)], joinType=[inner], algorithm=[none], cost=[not available])
        HiveJoin(condition=[=($0, $2)], joinType=[inner], algorithm=[none], cost=[not available])
          HiveProject(ss_sold_date_sk=[$0], ss_item_sk=[$2])
            HiveFilter(condition=[IS NOT NULL($0)])
              HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
          HiveProject(d_date_sk=[$0], d_date=[$2])
            HiveFilter(condition=[IS NOT NULL($0)])
              HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
        HiveProject(c_customer_sk=[$0], substr=[substr($8, 1, 30)], log2=[log2($0)])
          HiveTableScan(table=[[default, customer]], table:alias=[customer])

PREHOOK: query: -- group by with keys consisting of pk from multiple tables with extra columns from both side
 explain cbo select c_customer_sk from
 (select substr(c_first_name, 1,30), c_customer_sk ,d_date solddate, d_date_sk, count(*) cnt
  from store_sales
      ,date_dim
      ,customer
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = c_customer_sk
  group by substr(c_first_name, 1, 30),c_customer_sk,d_date, d_date_sk
  having count(*) >4) subq
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: -- group by with keys consisting of pk from multiple tables with extra columns from both side
 explain cbo select c_customer_sk from
 (select substr(c_first_name, 1,30), c_customer_sk ,d_date solddate, d_date_sk, count(*) cnt
  from store_sales
      ,date_dim
      ,customer
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = c_customer_sk
  group by substr(c_first_name, 1, 30),c_customer_sk,d_date, d_date_sk
  having count(*) >4) subq
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveProject(c_customer_sk=[$0])
  HiveFilter(condition=[>($3, 4)])
    HiveProject(c_customer_sk=[$4], d_date=[$2], d_date_sk=[$1], $f3=[$3])
      HiveJoin(condition=[=($0, $4)], joinType=[inner], algorithm=[none], cost=[not available])
        HiveProject(ss_item_sk=[$0], d_date_sk=[$1], d_date=[$2], $f3=[$3])
          HiveAggregate(group=[{1, 2, 3}], agg#0=[count()])
            HiveJoin(condition=[=($0, $2)], joinType=[inner], algorithm=[none], cost=[not available])
              HiveProject(ss_sold_date_sk=[$0], ss_item_sk=[$2])
                HiveFilter(condition=[IS NOT NULL($0)])
                  HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
              HiveProject(d_date_sk=[$0], d_date=[$2])
                HiveFilter(condition=[IS NOT NULL($0)])
                  HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
        HiveProject(c_customer_sk=[$0])
          HiveTableScan(table=[[default, customer]], table:alias=[customer])

PREHOOK: query: -- group by with keys consisting of pk from multiple tables with extra expressions from both side
  explain cbo select c_customer_sk from
 (select substr(c_first_name, 1,30), c_customer_sk ,log2(d_date) solddate, d_date_sk, count(*) cnt
  from store_sales
      ,date_dim
      ,customer
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = c_customer_sk
  group by substr(c_first_name, 1, 30),c_customer_sk, log2(d_date), d_date_sk
  having count(*) >4) subq
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: -- group by with keys consisting of pk from multiple tables with extra expressions from both side
  explain cbo select c_customer_sk from
 (select substr(c_first_name, 1,30), c_customer_sk ,log2(d_date) solddate, d_date_sk, count(*) cnt
  from store_sales
      ,date_dim
      ,customer
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = c_customer_sk
  group by substr(c_first_name, 1, 30),c_customer_sk, log2(d_date), d_date_sk
  having count(*) >4) subq
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveProject(c_customer_sk=[$0])
  HiveFilter(condition=[>($3, 4)])
    HiveProject(c_customer_sk=[$4], log2=[$2], d_date_sk=[$1], $f3=[$3])
      HiveJoin(condition=[=($0, $4)], joinType=[inner], algorithm=[none], cost=[not available])
        HiveProject(ss_item_sk=[$0], d_date_sk=[$1], log2=[$2], $f3=[$3])
          HiveAggregate(group=[{1, 2, 3}], agg#0=[count()])
            HiveJoin(condition=[=($0, $2)], joinType=[inner], algorithm=[none], cost=[not available])
              HiveProject(ss_sold_date_sk=[$0], ss_item_sk=[$2])
                HiveFilter(condition=[IS NOT NULL($0)])
                  HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
              HiveProject(d_date_sk=[$0], log2=[log2($2)])
                HiveFilter(condition=[IS NOT NULL($0)])
                  HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
        HiveProject(c_customer_sk=[$0])
          HiveTableScan(table=[[default, customer]], table:alias=[customer])

PREHOOK: query: create table web_sales(ws_order_number int, ws_item_sk int, ws_price float,
    constraint pk1 primary key(ws_order_number, ws_item_sk) disable rely)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@web_sales
POSTHOOK: query: create table web_sales(ws_order_number int, ws_item_sk int, ws_price float,
    constraint pk1 primary key(ws_order_number, ws_item_sk) disable rely)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@web_sales
PREHOOK: query: insert into web_sales values(1, 1, 1.2)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@web_sales
POSTHOOK: query: insert into web_sales values(1, 1, 1.2)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@web_sales
POSTHOOK: Lineage: web_sales.ws_item_sk SCRIPT []
POSTHOOK: Lineage: web_sales.ws_order_number SCRIPT []
POSTHOOK: Lineage: web_sales.ws_price SCRIPT []
PREHOOK: query: insert into web_sales values(1, 1, 1.2)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@web_sales
POSTHOOK: query: insert into web_sales values(1, 1, 1.2)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@web_sales
POSTHOOK: Lineage: web_sales.ws_item_sk SCRIPT []
POSTHOOK: Lineage: web_sales.ws_order_number SCRIPT []
POSTHOOK: Lineage: web_sales.ws_price SCRIPT []
PREHOOK: query: explain cbo select count(distinct ws_order_number) from web_sales
PREHOOK: type: QUERY
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: explain cbo select count(distinct ws_order_number) from web_sales
POSTHOOK: type: QUERY
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
CBO PLAN:
HiveAggregate(group=[{}], agg#0=[count()])
  HiveProject(ws_order_number=[$0])
    HiveAggregate(group=[{0}])
      HiveTableScan(table=[[default, web_sales]], table:alias=[web_sales])

PREHOOK: query: select count(distinct ws_order_number) from web_sales
PREHOOK: type: QUERY
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: select count(distinct ws_order_number) from web_sales
POSTHOOK: type: QUERY
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
1
PREHOOK: query: drop table web_sales
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@web_sales
PREHOOK: Output: default@web_sales
POSTHOOK: query: drop table web_sales
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: default@web_sales
PREHOOK: query: create table t1(i int primary key disable rely, j int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@t1
POSTHOOK: query: create table t1(i int primary key disable rely, j int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t1
PREHOOK: query: insert into t1 values(1,100),(2,200)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@t1
POSTHOOK: query: insert into t1 values(1,100),(2,200)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@t1
POSTHOOK: Lineage: t1.i SCRIPT []
POSTHOOK: Lineage: t1.j SCRIPT []
PREHOOK: query: create table t2(i int primary key disable rely, j int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@t2
POSTHOOK: query: create table t2(i int primary key disable rely, j int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t2
PREHOOK: query: insert into t2 values(2,1000),(4,500)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@t2
POSTHOOK: query: insert into t2 values(2,1000),(4,500)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@t2
POSTHOOK: Lineage: t2.i SCRIPT []
POSTHOOK: Lineage: t2.j SCRIPT []
PREHOOK: query: explain cbo select i from (select i, j from t1 union all select i,j from t2) subq group by i,j
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: explain cbo select i from (select i, j from t1 union all select i,j from t2) subq group by i,j
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
CBO PLAN:
HiveProject(i=[$0])
  HiveAggregate(group=[{0, 1}])
    HiveProject(i=[$0], j=[$1])
      HiveUnion(all=[true])
        HiveProject(i=[$0], j=[$1])
          HiveTableScan(table=[[default, t1]], table:alias=[t1])
        HiveProject(i=[$0], j=[$1])
          HiveTableScan(table=[[default, t2]], table:alias=[t2])

PREHOOK: query: select i from (select i, j from t1 union all select i,j from t2) subq group by i,j
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: select i from (select i, j from t1 union all select i,j from t2) subq group by i,j
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
2
1
2
4
PREHOOK: query: explain cbo select i from (select i, j from t1 intersect select i,j from t2) subq group by i,j
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: explain cbo select i from (select i, j from t1 intersect select i,j from t2) subq group by i,j
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
CBO PLAN:
HiveProject(i=[$0])
  HiveFilter(condition=[=($2, 2)])
    HiveAggregate(group=[{0, 1}], agg#0=[count($2)])
      HiveProject(i=[$0], j=[$1], $f2=[$2])
        HiveUnion(all=[true])
          HiveProject(i=[$0], j=[$1], $f2=[$2])
            HiveAggregate(group=[{0, 1}], agg#0=[count()])
              HiveTableScan(table=[[default, t1]], table:alias=[t1])
          HiveProject(i=[$0], j=[$1], $f2=[$2])
            HiveAggregate(group=[{0, 1}], agg#0=[count()])
              HiveTableScan(table=[[default, t2]], table:alias=[t2])

PREHOOK: query: select i from (select i, j from t1 intersect select i,j from t2) subq group by i,j
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: select i from (select i, j from t1 intersect select i,j from t2) subq group by i,j
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
PREHOOK: query: drop table t1
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t1
PREHOOK: Output: default@t1
POSTHOOK: query: drop table t1
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t1
POSTHOOK: Output: default@t1
PREHOOK: query: drop table t2
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t2
PREHOOK: Output: default@t2
POSTHOOK: query: drop table t2
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t2
POSTHOOK: Output: default@t2
