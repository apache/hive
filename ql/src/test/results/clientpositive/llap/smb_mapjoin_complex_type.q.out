PREHOOK: query: CREATE TABLE test_list1 (key INT, value array<int>, col_1 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_list1
POSTHOOK: query: CREATE TABLE test_list1 (key INT, value array<int>, col_1 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_list1
PREHOOK: query: INSERT INTO test_list1 VALUES (99, array(0,0), 'Alice'), (99, array(2,2), 'Mat'), (100, array(0,0), 'Bob'), (101, array(2,2), 'Car')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_list1
POSTHOOK: query: INSERT INTO test_list1 VALUES (99, array(0,0), 'Alice'), (99, array(2,2), 'Mat'), (100, array(0,0), 'Bob'), (101, array(2,2), 'Car')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_list1
POSTHOOK: Lineage: test_list1.col_1 SCRIPT []
POSTHOOK: Lineage: test_list1.key SCRIPT []
POSTHOOK: Lineage: test_list1.value SCRIPT []
PREHOOK: query: CREATE TABLE test_list2 (key INT, value array<int>, col_2 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_list2
POSTHOOK: query: CREATE TABLE test_list2 (key INT, value array<int>, col_2 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_list2
PREHOOK: query: INSERT INTO test_list2 VALUES (102, array(2,2), 'Del'), (103, array(2,2), 'Ema'), (104, array(3,3), 'Fli')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_list2
POSTHOOK: query: INSERT INTO test_list2 VALUES (102, array(2,2), 'Del'), (103, array(2,2), 'Ema'), (104, array(3,3), 'Fli')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_list2
POSTHOOK: Lineage: test_list2.col_2 SCRIPT []
POSTHOOK: Lineage: test_list2.key SCRIPT []
POSTHOOK: Lineage: test_list2.value SCRIPT []
PREHOOK: query: EXPLAIN
SELECT *
FROM test_list1 INNER JOIN test_list2
ON (test_list1.value=test_list2.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@test_list1
PREHOOK: Input: default@test_list2
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test_list1 INNER JOIN test_list2
ON (test_list1.value=test_list2.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_list1
POSTHOOK: Input: default@test_list2
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 2 (CUSTOM_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test_list1
                  filterExpr: value is not null (type: boolean)
                  Statistics: Num rows: 4 Data size: 1232 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 4 Data size: 1232 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: int), value (type: array<int>), col_1 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 4 Data size: 1232 Basic stats: COMPLETE Column stats: NONE
                      Map Join Operator
                        condition map:
                             Inner Join 0 to 1
                        keys:
                          0 _col1 (type: array<int>)
                          1 _col1 (type: array<int>)
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                        input vertices:
                          1 Map 2
                        Statistics: Num rows: 4 Data size: 1355 Basic stats: COMPLETE Column stats: NONE
                        File Output Operator
                          compressed: false
                          Statistics: Num rows: 4 Data size: 1355 Basic stats: COMPLETE Column stats: NONE
                          table:
                              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: llap
            LLAP IO: all inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test_list2
                  filterExpr: value is not null (type: boolean)
                  Statistics: Num rows: 3 Data size: 924 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 924 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: int), value (type: array<int>), col_2 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 3 Data size: 924 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col1 (type: array<int>)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: array<int>)
                        Statistics: Num rows: 3 Data size: 924 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test_list1 INNER JOIN test_list2
ON (test_list1.value=test_list2.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@test_list1
PREHOOK: Input: default@test_list2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test_list1 INNER JOIN test_list2
ON (test_list1.value=test_list2.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_list1
POSTHOOK: Input: default@test_list2
#### A masked pattern was here ####
99	[2,2]	Mat	103	[2,2]	Ema
99	[2,2]	Mat	102	[2,2]	Del
101	[2,2]	Car	103	[2,2]	Ema
101	[2,2]	Car	102	[2,2]	Del
PREHOOK: query: CREATE TABLE test_map1 (key INT, value map<int, int>, col_1 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_map1
POSTHOOK: query: CREATE TABLE test_map1 (key INT, value map<int, int>, col_1 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_map1
PREHOOK: query: INSERT INTO test_map1 VALUES (99, map(0,0), 'Alice'), (99, map(2,2), 'Mat'), (100, map(0,0), 'Bob'), (101, map(2,2), 'Car')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_map1
POSTHOOK: query: INSERT INTO test_map1 VALUES (99, map(0,0), 'Alice'), (99, map(2,2), 'Mat'), (100, map(0,0), 'Bob'), (101, map(2,2), 'Car')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_map1
POSTHOOK: Lineage: test_map1.col_1 SCRIPT []
POSTHOOK: Lineage: test_map1.key SCRIPT []
POSTHOOK: Lineage: test_map1.value SCRIPT []
PREHOOK: query: CREATE TABLE test_map2 (key INT, value map<int, int>, col_2 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_map2
POSTHOOK: query: CREATE TABLE test_map2 (key INT, value map<int, int>, col_2 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_map2
PREHOOK: query: INSERT INTO test_map2 VALUES (102, map(2,2), 'Del'), (103, map(2,2), 'Ema'), (104, map(3,3), 'Fli')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_map2
POSTHOOK: query: INSERT INTO test_map2 VALUES (102, map(2,2), 'Del'), (103, map(2,2), 'Ema'), (104, map(3,3), 'Fli')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_map2
POSTHOOK: Lineage: test_map2.col_2 SCRIPT []
POSTHOOK: Lineage: test_map2.key SCRIPT []
POSTHOOK: Lineage: test_map2.value SCRIPT []
PREHOOK: query: EXPLAIN
SELECT *
FROM test_map1  INNER  JOIN test_map2
ON (test_map1.value=test_map2.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@test_map1
PREHOOK: Input: default@test_map2
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test_map1  INNER  JOIN test_map2
ON (test_map1.value=test_map2.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_map1
POSTHOOK: Input: default@test_map2
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 2 (CUSTOM_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test_map1
                  filterExpr: value is not null (type: boolean)
                  Statistics: Num rows: 4 Data size: 2992 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 4 Data size: 2992 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: int), value (type: map<int,int>), col_1 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 4 Data size: 2992 Basic stats: COMPLETE Column stats: NONE
                      Map Join Operator
                        condition map:
                             Inner Join 0 to 1
                        keys:
                          0 _col1 (type: map<int,int>)
                          1 _col1 (type: map<int,int>)
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                        input vertices:
                          1 Map 2
                        Statistics: Num rows: 4 Data size: 3291 Basic stats: COMPLETE Column stats: NONE
                        File Output Operator
                          compressed: false
                          Statistics: Num rows: 4 Data size: 3291 Basic stats: COMPLETE Column stats: NONE
                          table:
                              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: llap
            LLAP IO: all inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test_map2
                  filterExpr: value is not null (type: boolean)
                  Statistics: Num rows: 3 Data size: 2244 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 2244 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: int), value (type: map<int,int>), col_2 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 3 Data size: 2244 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col1 (type: map<int,int>)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: map<int,int>)
                        Statistics: Num rows: 3 Data size: 2244 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test_map1  INNER JOIN test_map2
ON (test_map1.value=test_map2.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@test_map1
PREHOOK: Input: default@test_map2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test_map1  INNER JOIN test_map2
ON (test_map1.value=test_map2.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_map1
POSTHOOK: Input: default@test_map2
#### A masked pattern was here ####
99	{2:2}	Mat	103	{2:2}	Ema
99	{2:2}	Mat	102	{2:2}	Del
101	{2:2}	Car	103	{2:2}	Ema
101	{2:2}	Car	102	{2:2}	Del
PREHOOK: query: CREATE TABLE test_union1 (key INT, value UNIONTYPE<int, string>, col_1 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_union1
POSTHOOK: query: CREATE TABLE test_union1 (key INT, value UNIONTYPE<int, string>, col_1 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_union1
PREHOOK: query: INSERT INTO test_union1 VALUES (99, create_union(0,0,"val_0"), 'Alice'), (99, create_union(0,2, "val_2"), 'Mat'),
 (100, create_union(0,0, "val_0"), 'Bob'), (101, create_union(0,2,"val_2"), 'Car')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_union1
POSTHOOK: query: INSERT INTO test_union1 VALUES (99, create_union(0,0,"val_0"), 'Alice'), (99, create_union(0,2, "val_2"), 'Mat'),
 (100, create_union(0,0, "val_0"), 'Bob'), (101, create_union(0,2,"val_2"), 'Car')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_union1
POSTHOOK: Lineage: test_union1.col_1 SCRIPT []
POSTHOOK: Lineage: test_union1.key SCRIPT []
POSTHOOK: Lineage: test_union1.value SCRIPT []
PREHOOK: query: CREATE TABLE test_union2 (key INT, value UNIONTYPE<int, string>, col_2 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_union2
POSTHOOK: query: CREATE TABLE test_union2 (key INT, value UNIONTYPE<int, string>, col_2 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_union2
PREHOOK: query: INSERT INTO test_union2 VALUES (102, create_union(0,2,"val_2"), 'Del'), (103, create_union(0,2,"val_2"), 'Ema'),
 (104, create_union(0,3,"val_3"), 'Fli')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_union2
POSTHOOK: query: INSERT INTO test_union2 VALUES (102, create_union(0,2,"val_2"), 'Del'), (103, create_union(0,2,"val_2"), 'Ema'),
 (104, create_union(0,3,"val_3"), 'Fli')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_union2
POSTHOOK: Lineage: test_union2.col_2 SCRIPT []
POSTHOOK: Lineage: test_union2.key SCRIPT []
POSTHOOK: Lineage: test_union2.value SCRIPT []
PREHOOK: query: EXPLAIN
SELECT *
FROM test_union1  INNER JOIN test_union2
ON (test_union1.value=test_union2.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@test_union1
PREHOOK: Input: default@test_union2
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test_union1  INNER JOIN test_union2
ON (test_union1.value=test_union2.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_union1
POSTHOOK: Input: default@test_union2
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 2 (CUSTOM_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test_union1
                  filterExpr: value is not null (type: boolean)
                  Statistics: Num rows: 4 Data size: 1664 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 4 Data size: 1664 Basic stats: COMPLETE Column stats: NONE
                    Map Join Operator
                      condition map:
                           Inner Join 0 to 1
                      keys:
                        0 value (type: uniontype<int,string>)
                        1 value (type: uniontype<int,string>)
                      outputColumnNames: _col0, _col1, _col2, _col7, _col8, _col9
                      input vertices:
                        1 Map 2
                      Statistics: Num rows: 4 Data size: 1830 Basic stats: COMPLETE Column stats: NONE
                      Select Operator
                        expressions: _col0 (type: int), _col1 (type: uniontype<int,string>), _col2 (type: string), _col7 (type: int), _col8 (type: uniontype<int,string>), _col9 (type: string)
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                        Statistics: Num rows: 4 Data size: 1830 Basic stats: COMPLETE Column stats: NONE
                        File Output Operator
                          compressed: false
                          Statistics: Num rows: 4 Data size: 1830 Basic stats: COMPLETE Column stats: NONE
                          table:
                              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: llap
            LLAP IO: all inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test_union2
                  filterExpr: value is not null (type: boolean)
                  Statistics: Num rows: 3 Data size: 1248 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 1248 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: value (type: uniontype<int,string>)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: value (type: uniontype<int,string>)
                      Statistics: Num rows: 3 Data size: 1248 Basic stats: COMPLETE Column stats: NONE
                      value expressions: key (type: int), col_2 (type: string)
            Execution mode: llap
            LLAP IO: all inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test_union1  INNER JOIN test_union2
ON (test_union1.value=test_union2.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@test_union1
PREHOOK: Input: default@test_union2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test_union1  INNER JOIN test_union2
ON (test_union1.value=test_union2.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_union1
POSTHOOK: Input: default@test_union2
#### A masked pattern was here ####
99	{0:2}	Mat	103	{0:2}	Ema
99	{0:2}	Mat	102	{0:2}	Del
101	{0:2}	Car	103	{0:2}	Ema
101	{0:2}	Car	102	{0:2}	Del
