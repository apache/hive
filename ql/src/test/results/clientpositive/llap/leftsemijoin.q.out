PREHOOK: query: drop table sales
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table sales
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table things
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table things
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE TABLE sales (name STRING, id INT)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@sales
POSTHOOK: query: CREATE TABLE sales (name STRING, id INT)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@sales
PREHOOK: query: CREATE TABLE things (id INT, name STRING) partitioned by (ds string)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@things
POSTHOOK: query: CREATE TABLE things (id INT, name STRING) partitioned by (ds string)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@things
PREHOOK: query: load data local inpath '../../data/files/sales.txt' INTO TABLE sales
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@sales
POSTHOOK: query: load data local inpath '../../data/files/sales.txt' INTO TABLE sales
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@sales
PREHOOK: query: load data local inpath '../../data/files/things.txt' INTO TABLE things partition(ds='2011-10-23')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@things
POSTHOOK: query: load data local inpath '../../data/files/things.txt' INTO TABLE things partition(ds='2011-10-23')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@things
POSTHOOK: Output: default@things@ds=2011-10-23
PREHOOK: query: load data local inpath '../../data/files/things2.txt' INTO TABLE things partition(ds='2011-10-24')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@things
POSTHOOK: query: load data local inpath '../../data/files/things2.txt' INTO TABLE things partition(ds='2011-10-24')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@things
POSTHOOK: Output: default@things@ds=2011-10-24
PREHOOK: query: SELECT name,id FROM sales
PREHOOK: type: QUERY
PREHOOK: Input: default@sales
#### A masked pattern was here ####
POSTHOOK: query: SELECT name,id FROM sales
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sales
#### A masked pattern was here ####
Hank	2
Joe	2
PREHOOK: query: SELECT id,name FROM things
PREHOOK: type: QUERY
PREHOOK: Input: default@things
PREHOOK: Input: default@things@ds=2011-10-23
PREHOOK: Input: default@things@ds=2011-10-24
#### A masked pattern was here ####
POSTHOOK: query: SELECT id,name FROM things
POSTHOOK: type: QUERY
POSTHOOK: Input: default@things
POSTHOOK: Input: default@things@ds=2011-10-23
POSTHOOK: Input: default@things@ds=2011-10-24
#### A masked pattern was here ####
2	Tie
2	Tie
PREHOOK: query: SELECT name,id FROM sales LEFT SEMI JOIN things ON (sales.id = things.id)
PREHOOK: type: QUERY
PREHOOK: Input: default@sales
PREHOOK: Input: default@things
PREHOOK: Input: default@things@ds=2011-10-23
PREHOOK: Input: default@things@ds=2011-10-24
#### A masked pattern was here ####
POSTHOOK: query: SELECT name,id FROM sales LEFT SEMI JOIN things ON (sales.id = things.id)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sales
POSTHOOK: Input: default@things
POSTHOOK: Input: default@things@ds=2011-10-23
POSTHOOK: Input: default@things@ds=2011-10-24
#### A masked pattern was here ####
Hank	2
Joe	2
PREHOOK: query: drop table sales
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@sales
PREHOOK: Output: default@sales
POSTHOOK: query: drop table sales
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@sales
POSTHOOK: Output: default@sales
PREHOOK: query: drop table things
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@things
PREHOOK: Output: default@things
POSTHOOK: query: drop table things
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@things
POSTHOOK: Output: default@things
Warning: Shuffle Join MERGEJOIN[24][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 4' is a cross product
PREHOOK: query: explain select part.p_type from part join (select p1.p_name from part p1, part p2 group by p1.p_name) pp ON pp.p_name = part.p_name
PREHOOK: type: QUERY
POSTHOOK: query: explain select part.p_type from part join (select p1.p_name from part p1, part p2 group by p1.p_name) pp ON pp.p_name = part.p_name
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
        Reducer 4 <- Map 3 (XPROD_EDGE), Map 5 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: part
                  Statistics: Num rows: 26 Data size: 5850 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: p_name is not null (type: boolean)
                    Statistics: Num rows: 26 Data size: 5850 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: p_name (type: string), p_type (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 26 Data size: 5850 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 26 Data size: 5850 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: p1
                  Statistics: Num rows: 26 Data size: 3146 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: p_name is not null (type: boolean)
                    Statistics: Num rows: 26 Data size: 3146 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: p_name (type: string)
                      outputColumnNames: _col0
                      Statistics: Num rows: 26 Data size: 3146 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        sort order: 
                        Statistics: Num rows: 26 Data size: 3146 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: p2
                  Statistics: Num rows: 26 Data size: 3147 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    Statistics: Num rows: 26 Data size: 104 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 26 Data size: 104 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col0 (type: string)
                  1 _col0 (type: string)
                outputColumnNames: _col1
                Statistics: Num rows: 26 Data size: 2704 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col1 (type: string)
                  outputColumnNames: _col0
                  Statistics: Num rows: 26 Data size: 2704 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 26 Data size: 2704 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0
                Statistics: Num rows: 676 Data size: 81796 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  keys: _col0 (type: string)
                  mode: hash
                  outputColumnNames: _col0
                  Statistics: Num rows: 25 Data size: 3025 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string)
                    sort order: +
                    Map-reduce partition columns: _col0 (type: string)
                    Statistics: Num rows: 25 Data size: 3025 Basic stats: COMPLETE Column stats: COMPLETE

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[24][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 4' is a cross product
PREHOOK: query: select part.p_type from part join (select p1.p_name from part p1, part p2 group by p1.p_name) pp ON pp.p_name = part.p_name
PREHOOK: type: QUERY
PREHOOK: Input: default@part
#### A masked pattern was here ####
POSTHOOK: query: select part.p_type from part join (select p1.p_name from part p1, part p2 group by p1.p_name) pp ON pp.p_name = part.p_name
POSTHOOK: type: QUERY
POSTHOOK: Input: default@part
#### A masked pattern was here ####
ECONOMY BRUSHED COPPER
ECONOMY BURNISHED STEEL
ECONOMY PLATED COPPER
ECONOMY POLISHED STEEL
LARGE BRUSHED BRASS
LARGE BRUSHED STEEL
LARGE BURNISHED STEEL
MEDIUM ANODIZED COPPER
MEDIUM BURNISHED BRASS
MEDIUM BURNISHED COPPER
MEDIUM BURNISHED TIN
MEDIUM BURNISHED TIN
PROMO ANODIZED TIN
PROMO BURNISHED NICKEL
PROMO PLATED TIN
PROMO PLATED TIN
PROMO POLISHED STEEL
SMALL BRUSHED BRASS
SMALL PLATED BRASS
SMALL PLATED STEEL
SMALL POLISHED NICKEL
STANDARD ANODIZED STEEL
STANDARD ANODIZED TIN
STANDARD BURNISHED TIN
STANDARD PLATED TIN
STANDARD POLISHED STEEL
PREHOOK: query: explain select part.p_type from part left join (select p1.p_name from part p1, part p2 group by p1.p_name) pp ON pp.p_name = part.p_name
PREHOOK: type: QUERY
POSTHOOK: query: explain select part.p_type from part left join (select p1.p_name from part p1, part p2 group by p1.p_name) pp ON pp.p_name = part.p_name
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: part
          Select Operator
            expressions: p_type (type: string)
            outputColumnNames: _col0
            ListSink

PREHOOK: query: select part.p_type from part left join (select p1.p_name from part p1, part p2 group by p1.p_name) pp ON pp.p_name = part.p_name
PREHOOK: type: QUERY
PREHOOK: Input: default@part
#### A masked pattern was here ####
POSTHOOK: query: select part.p_type from part left join (select p1.p_name from part p1, part p2 group by p1.p_name) pp ON pp.p_name = part.p_name
POSTHOOK: type: QUERY
POSTHOOK: Input: default@part
#### A masked pattern was here ####
ECONOMY BRUSHED COPPER
ECONOMY BURNISHED STEEL
ECONOMY PLATED COPPER
ECONOMY POLISHED STEEL
LARGE BRUSHED BRASS
LARGE BRUSHED STEEL
LARGE BURNISHED STEEL
MEDIUM ANODIZED COPPER
MEDIUM BURNISHED BRASS
MEDIUM BURNISHED COPPER
MEDIUM BURNISHED TIN
MEDIUM BURNISHED TIN
PROMO ANODIZED TIN
PROMO BURNISHED NICKEL
PROMO PLATED TIN
PROMO PLATED TIN
PROMO POLISHED STEEL
SMALL BRUSHED BRASS
SMALL PLATED BRASS
SMALL PLATED STEEL
SMALL POLISHED NICKEL
STANDARD ANODIZED STEEL
STANDARD ANODIZED TIN
STANDARD BURNISHED TIN
STANDARD PLATED TIN
STANDARD POLISHED STEEL
