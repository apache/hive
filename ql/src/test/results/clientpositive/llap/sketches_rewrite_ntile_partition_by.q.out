PREHOOK: query: create table sketch_input (id int, category char(1))
STORED AS ORC
TBLPROPERTIES ('transactional'='true')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@sketch_input
POSTHOOK: query: create table sketch_input (id int, category char(1))
STORED AS ORC
TBLPROPERTIES ('transactional'='true')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@sketch_input
PREHOOK: query: insert into table sketch_input values
  (1,'a'),(1, 'a'), (2, 'a'), (3, 'a'), (4, 'a'), (5, 'a'), (6, 'a'), (7, 'a'), (8, 'a'), (9, 'a'), (10, 'a'),
  (6,'b'),(6, 'b'), (7, 'b'), (8, 'b'), (9, 'b'), (10, 'b'), (11, 'b'), (12, 'b'), (13, 'b'), (14, 'b'), (15, 'b'),
  (1,null),(2,null),(10,null),(13,null)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@sketch_input
POSTHOOK: query: insert into table sketch_input values
  (1,'a'),(1, 'a'), (2, 'a'), (3, 'a'), (4, 'a'), (5, 'a'), (6, 'a'), (7, 'a'), (8, 'a'), (9, 'a'), (10, 'a'),
  (6,'b'),(6, 'b'), (7, 'b'), (8, 'b'), (9, 'b'), (10, 'b'), (11, 'b'), (12, 'b'), (13, 'b'), (14, 'b'), (15, 'b'),
  (1,null),(2,null),(10,null),(13,null)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@sketch_input
POSTHOOK: Lineage: sketch_input.category SCRIPT []
POSTHOOK: Lineage: sketch_input.id SCRIPT []
PREHOOK: query: select id,category,ntile(4) over (partition by category order by id) from sketch_input order by category,id
PREHOOK: type: QUERY
PREHOOK: Input: default@sketch_input
#### A masked pattern was here ####
POSTHOOK: query: select id,category,ntile(4) over (partition by category order by id) from sketch_input order by category,id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sketch_input
#### A masked pattern was here ####
1	a	1
1	a	1
2	a	1
3	a	2
4	a	2
5	a	2
6	a	3
7	a	3
8	a	3
9	a	4
10	a	4
6	b	1
6	b	1
7	b	1
8	b	2
9	b	2
10	b	2
11	b	3
12	b	3
13	b	3
14	b	4
15	b	4
1	NULL	1
2	NULL	2
10	NULL	3
13	NULL	4
PREHOOK: query: select id,category,ntile(4) over (partition by category order by id),1.0-ds_kll_cdf(ds, CAST(-id AS FLOAT))[0]
from sketch_input
join ( select category as c,ds_kll_sketch(cast(-id as float)) as ds from sketch_input group by category) q on (q.c=category)
order by category,id
PREHOOK: type: QUERY
PREHOOK: Input: default@sketch_input
#### A masked pattern was here ####
POSTHOOK: query: select id,category,ntile(4) over (partition by category order by id),1.0-ds_kll_cdf(ds, CAST(-id AS FLOAT))[0]
from sketch_input
join ( select category as c,ds_kll_sketch(cast(-id as float)) as ds from sketch_input group by category) q on (q.c=category)
order by category,id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sketch_input
#### A masked pattern was here ####
1	a	1	0.18181818181818177
1	a	1	0.18181818181818177
2	a	1	0.2727272727272727
3	a	2	0.36363636363636365
4	a	2	0.4545454545454546
5	a	2	0.5454545454545454
6	a	3	0.6363636363636364
7	a	3	0.7272727272727273
8	a	3	0.8181818181818181
9	a	4	0.9090909090909091
10	a	4	1.0
6	b	1	0.18181818181818177
6	b	1	0.18181818181818177
7	b	1	0.2727272727272727
8	b	2	0.36363636363636365
9	b	2	0.4545454545454546
10	b	2	0.5454545454545454
11	b	3	0.6363636363636364
12	b	3	0.7272727272727273
13	b	3	0.8181818181818181
14	b	4	0.9090909090909091
15	b	4	1.0
PREHOOK: query: explain
select id,'rewrite',ntile(4) over (partition by category order by id) from sketch_input order by category,id
PREHOOK: type: QUERY
PREHOOK: Input: default@sketch_input
#### A masked pattern was here ####
POSTHOOK: query: explain
select id,'rewrite',ntile(4) over (partition by category order by id) from sketch_input order by category,id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sketch_input
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: sketch_input
                  Statistics: Num rows: 26 Data size: 2059 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: category (type: char(1)), id (type: int)
                    null sort order: az
                    sort order: ++
                    Map-reduce partition columns: category (type: char(1))
                    Statistics: Num rows: 26 Data size: 2059 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: may be used (ACID table)
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey1 (type: int), KEY.reducesinkkey0 (type: char(1))
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 26 Data size: 9027 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: int, _col1: char(1)
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 ASC NULLS LAST
                        partition by: _col1
                        raw input shape:
                        window functions:
                            window function definition
                              alias: ntile_window_0
                              arguments: 4
                              name: ntile
                              window function: GenericUDAFNTileEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 26 Data size: 9027 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: int), ntile_window_0 (type: int), _col1 (type: char(1))
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 26 Data size: 1823 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col2 (type: char(1)), _col0 (type: int)
                      null sort order: zz
                      sort order: ++
                      Statistics: Num rows: 26 Data size: 1823 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: int)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey1 (type: int), 'rewrite' (type: string), VALUE._col0 (type: int)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 26 Data size: 2574 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 26 Data size: 2574 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select id,'rewrite',ntile(4) over (partition by category order by id) from sketch_input order by category,id
PREHOOK: type: QUERY
PREHOOK: Input: default@sketch_input
#### A masked pattern was here ####
POSTHOOK: query: select id,'rewrite',ntile(4) over (partition by category order by id) from sketch_input order by category,id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sketch_input
#### A masked pattern was here ####
1	rewrite	1
1	rewrite	1
2	rewrite	1
3	rewrite	2
4	rewrite	2
5	rewrite	2
6	rewrite	3
7	rewrite	3
8	rewrite	3
9	rewrite	4
10	rewrite	4
6	rewrite	1
6	rewrite	1
7	rewrite	1
8	rewrite	2
9	rewrite	2
10	rewrite	2
11	rewrite	3
12	rewrite	3
13	rewrite	3
14	rewrite	4
15	rewrite	4
1	rewrite	1
2	rewrite	2
10	rewrite	3
13	rewrite	4
