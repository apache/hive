PREHOOK: query: DESCRIBE FUNCTION percentile_cont
PREHOOK: type: DESCFUNCTION
POSTHOOK: query: DESCRIBE FUNCTION percentile_cont
POSTHOOK: type: DESCFUNCTION
percentile_cont(input, pc) - Returns the percentile of expr at pc (range: [0,1]).
PREHOOK: query: DESCRIBE FUNCTION EXTENDED percentile_cont
PREHOOK: type: DESCFUNCTION
POSTHOOK: query: DESCRIBE FUNCTION EXTENDED percentile_cont
POSTHOOK: type: DESCFUNCTION
percentile_cont(input, pc) - Returns the percentile of expr at pc (range: [0,1]).
Function class:org.apache.hadoop.hive.ql.udf.generic.GenericUDAFPercentileCont
Function type:BUILTIN
PREHOOK: query: SELECT CAST(key AS INT) DIV 10,
       percentile_cont(CAST(substr(value, 5) AS INT), 0.0),
       percentile_cont(CAST(substr(value, 5) AS DOUBLE), 0.5),
       percentile_cont(0.5) WITHIN GROUP (ORDER BY CAST(substr(value, 5) AS DOUBLE)),
       percentile_cont(CAST(substr(value, 5) AS DECIMAL), 1.0),
       percentile_cont(array(0.0, 0.5, 1.0)) WITHIN GROUP (ORDER BY CAST(substr(value, 5) AS DOUBLE))
FROM src
GROUP BY CAST(key AS INT) DIV 10
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: SELECT CAST(key AS INT) DIV 10,
       percentile_cont(CAST(substr(value, 5) AS INT), 0.0),
       percentile_cont(CAST(substr(value, 5) AS DOUBLE), 0.5),
       percentile_cont(0.5) WITHIN GROUP (ORDER BY CAST(substr(value, 5) AS DOUBLE)),
       percentile_cont(CAST(substr(value, 5) AS DECIMAL), 1.0),
       percentile_cont(array(0.0, 0.5, 1.0)) WITHIN GROUP (ORDER BY CAST(substr(value, 5) AS DOUBLE))
FROM src
GROUP BY CAST(key AS INT) DIV 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0	0.0	4.5	4.5	9.0	[0.0,4.5,9.0]
1	10.0	15.0	15.0	19.0	[10.0,15.0,19.0]
10	100.0	103.0	103.0	105.0	[100.0,103.0,105.0]
11	111.0	117.0	117.0	119.0	[111.0,117.0,119.0]
12	120.0	127.0	127.0	129.0	[120.0,127.0,129.0]
13	131.0	137.0	137.0	138.0	[131.0,137.0,138.0]
14	143.0	146.0	146.0	149.0	[143.0,146.0,149.0]
15	150.0	154.0	154.0	158.0	[150.0,154.0,158.0]
16	160.0	166.5	166.5	169.0	[160.0,166.5,169.0]
17	170.0	175.0	175.0	179.0	[170.0,175.0,179.0]
18	180.0	186.5	186.5	189.0	[180.0,186.5,189.0]
19	190.0	194.5	194.5	199.0	[190.0,194.5,199.0]
2	20.0	26.0	26.0	28.0	[20.0,26.0,28.0]
20	200.0	205.0	205.0	209.0	[200.0,205.0,209.0]
21	213.0	216.5	216.5	219.0	[213.0,216.5,219.0]
22	221.0	224.0	224.0	229.0	[221.0,224.0,229.0]
23	230.0	234.0	234.0	239.0	[230.0,234.0,239.0]
24	241.0	244.0	244.0	249.0	[241.0,244.0,249.0]
25	252.0	256.0	256.0	258.0	[252.0,256.0,258.0]
26	260.0	264.0	264.0	266.0	[260.0,264.0,266.0]
27	272.0	275.0	275.0	278.0	[272.0,275.0,278.0]
28	280.0	283.5	283.5	289.0	[280.0,283.5,289.0]
29	291.0	297.0	297.0	298.0	[291.0,297.0,298.0]
3	30.0	35.0	35.0	37.0	[30.0,35.0,37.0]
30	302.0	307.0	307.0	309.0	[302.0,307.0,309.0]
31	310.0	316.0	316.0	318.0	[310.0,316.0,318.0]
32	321.0	324.0	324.0	327.0	[321.0,324.0,327.0]
33	331.0	333.0	333.0	339.0	[331.0,333.0,339.0]
34	341.0	345.0	345.0	348.0	[341.0,345.0,348.0]
35	351.0	353.0	353.0	356.0	[351.0,353.0,356.0]
36	360.0	367.0	367.0	369.0	[360.0,367.0,369.0]
37	373.0	376.0	376.0	379.0	[373.0,376.0,379.0]
38	382.0	384.0	384.0	389.0	[382.0,384.0,389.0]
39	392.0	396.0	396.0	399.0	[392.0,396.0,399.0]
4	41.0	42.5	42.5	47.0	[41.0,42.5,47.0]
40	400.0	403.5	403.5	409.0	[400.0,403.5,409.0]
41	411.0	415.5	415.5	419.0	[411.0,415.5,419.0]
42	421.0	425.5	425.5	429.0	[421.0,425.5,429.0]
43	430.0	435.0	435.0	439.0	[430.0,435.0,439.0]
44	443.0	446.0	446.0	449.0	[443.0,446.0,449.0]
45	452.0	455.0	455.0	459.0	[452.0,455.0,459.0]
46	460.0	467.5	467.5	469.0	[460.0,467.5,469.0]
47	470.0	477.0	477.0	479.0	[470.0,477.0,479.0]
48	480.0	484.0	484.0	489.0	[480.0,484.0,489.0]
49	490.0	494.5	494.5	498.0	[490.0,494.5,498.0]
5	51.0	54.0	54.0	58.0	[51.0,54.0,58.0]
6	64.0	66.5	66.5	69.0	[64.0,66.5,69.0]
7	70.0	73.0	73.0	78.0	[70.0,73.0,78.0]
8	80.0	84.0	84.0	87.0	[80.0,84.0,87.0]
9	90.0	95.0	95.0	98.0	[90.0,95.0,98.0]
PREHOOK: query: SELECT CAST(key AS INT) DIV 10,
       percentile_cont(CAST(substr(value, 5) AS INT), 0.0),
       percentile_cont(CAST(substr(value, 5) AS DOUBLE), 0.5),
       percentile_cont(0.5) WITHIN GROUP (ORDER BY CAST(substr(value, 5) AS DOUBLE)),
       percentile_cont(CAST(substr(value, 5) AS DECIMAL), 1.0),
       percentile_cont(array(0.0, 0.1, 0.5, 0.8, 1.0)) WITHIN GROUP (ORDER BY CAST(substr(value, 5) AS DOUBLE))
FROM src
GROUP BY CAST(key AS INT) DIV 10
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: SELECT CAST(key AS INT) DIV 10,
       percentile_cont(CAST(substr(value, 5) AS INT), 0.0),
       percentile_cont(CAST(substr(value, 5) AS DOUBLE), 0.5),
       percentile_cont(0.5) WITHIN GROUP (ORDER BY CAST(substr(value, 5) AS DOUBLE)),
       percentile_cont(CAST(substr(value, 5) AS DECIMAL), 1.0),
       percentile_cont(array(0.0, 0.1, 0.5, 0.8, 1.0)) WITHIN GROUP (ORDER BY CAST(substr(value, 5) AS DOUBLE))
FROM src
GROUP BY CAST(key AS INT) DIV 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0	0.0	4.5	4.5	9.0	[0.0,0.0,4.5,5.6000000000000005,9.0]
1	10.0	15.0	15.0	19.0	[10.0,10.9,15.0,18.0,19.0]
10	100.0	103.0	103.0	105.0	[100.0,100.0,103.0,104.0,105.0]
11	111.0	117.0	117.0	119.0	[111.0,112.8,117.0,119.0,119.0]
12	120.0	127.0	127.0	129.0	[120.0,120.0,127.0,128.2,129.0]
13	131.0	137.0	137.0	138.0	[131.0,133.0,137.0,138.0,138.0]
14	143.0	146.0	146.0	149.0	[143.0,144.0,146.0,149.0,149.0]
15	150.0	154.0	154.0	158.0	[150.0,151.4,154.0,156.60000000000002,158.0]
16	160.0	166.5	166.5	169.0	[160.0,162.5,166.5,169.0,169.0]
17	170.0	175.0	175.0	179.0	[170.0,172.0,175.0,177.60000000000002,179.0]
18	180.0	186.5	186.5	189.0	[180.0,180.7,186.5,187.0,189.0]
19	190.0	194.5	194.5	199.0	[190.0,191.0,194.5,197.0,199.0]
2	20.0	26.0	26.0	28.0	[20.0,22.4,26.0,26.8,28.0]
20	200.0	205.0	205.0	209.0	[200.0,200.39999999999998,205.0,208.0,209.0]
21	213.0	216.5	216.5	219.0	[213.0,213.0,216.5,218.2,219.0]
22	221.0	224.0	224.0	229.0	[221.0,221.0,224.0,228.0,229.0]
23	230.0	234.0	234.0	239.0	[230.0,230.0,234.0,238.0,239.0]
24	241.0	244.0	244.0	249.0	[241.0,241.6,244.0,247.8,249.0]
25	252.0	256.0	256.0	258.0	[252.0,253.8,256.0,256.8,258.0]
26	260.0	264.0	264.0	266.0	[260.0,261.0,264.0,265.0,266.0]
27	272.0	275.0	275.0	278.0	[272.0,272.20000000000005,275.0,277.0,278.0]
28	280.0	283.5	283.5	289.0	[280.0,280.3,283.5,287.4,289.0]
29	291.0	297.0	297.0	298.0	[291.0,291.5,297.0,298.0,298.0]
3	30.0	35.0	35.0	37.0	[30.0,32.1,35.0,36.2,37.0]
30	302.0	307.0	307.0	309.0	[302.0,304.1,307.0,308.6,309.0]
31	310.0	316.0	316.0	318.0	[310.0,311.0,316.0,317.6,318.0]
32	321.0	324.0	324.0	327.0	[321.0,321.0,324.0,327.0,327.0]
33	331.0	333.0	333.0	339.0	[331.0,331.0,333.0,336.8,339.0]
34	341.0	345.0	345.0	348.0	[341.0,342.0,345.0,348.0,348.0]
35	351.0	353.0	353.0	356.0	[351.0,351.6,353.0,354.2,356.0]
36	360.0	367.0	367.0	369.0	[360.0,362.0,367.0,369.0,369.0]
37	373.0	376.0	376.0	379.0	[373.0,373.5,376.0,378.0,379.0]
38	382.0	384.0	384.0	389.0	[382.0,382.0,384.0,385.6,389.0]
39	392.0	396.0	396.0	399.0	[392.0,393.1,396.0,397.0,399.0]
4	41.0	42.5	42.5	47.0	[41.0,41.5,42.5,44.0,47.0]
40	400.0	403.5	403.5	409.0	[400.0,401.0,403.5,406.2,409.0]
41	411.0	415.5	415.5	419.0	[411.0,412.79999999999995,415.5,417.2,419.0]
42	421.0	425.5	425.5	429.0	[421.0,422.5,425.5,429.0,429.0]
43	430.0	435.0	435.0	439.0	[430.0,430.0,435.0,438.0,439.0]
44	443.0	446.0	446.0	449.0	[443.0,443.40000000000003,446.0,448.2,449.0]
45	452.0	455.0	455.0	459.0	[452.0,453.0,455.0,458.0,459.0]
46	460.0	467.5	467.5	469.0	[460.0,462.0,467.5,469.0,469.0]
47	470.0	477.0	477.0	479.0	[470.0,471.20000000000005,477.0,478.0,479.0]
48	480.0	484.0	484.0	489.0	[480.0,480.0,484.0,489.0,489.0]
49	490.0	494.5	494.5	498.0	[490.0,491.1,494.5,497.8,498.0]
5	51.0	54.0	54.0	58.0	[51.0,51.0,54.0,57.8,58.0]
6	64.0	66.5	66.5	69.0	[64.0,64.5,66.5,67.0,69.0]
7	70.0	73.0	73.0	78.0	[70.0,70.0,73.0,76.19999999999999,78.0]
8	80.0	84.0	84.0	87.0	[80.0,81.60000000000001,84.0,85.4,87.0]
9	90.0	95.0	95.0	98.0	[90.0,90.0,95.0,97.0,98.0]
PREHOOK: query: SELECT CAST(key AS INT) DIV 10,
       percentile_cont(CAST(substr(value, 5) AS INT), 0.0),
       percentile_cont(CAST(substr(value, 5) AS DOUBLE), 0.5),
       percentile_cont(0.5) WITHIN GROUP (ORDER BY CAST(substr(value, 5) AS DOUBLE)),
       percentile_cont(CAST(substr(value, 5) AS DECIMAL), 1.0),
       percentile_cont(array(0.5, 1.0)) WITHIN GROUP (ORDER BY CAST(substr(value, 5) AS DOUBLE))
FROM src
GROUP BY CAST(key AS INT) DIV 10
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: SELECT CAST(key AS INT) DIV 10,
       percentile_cont(CAST(substr(value, 5) AS INT), 0.0),
       percentile_cont(CAST(substr(value, 5) AS DOUBLE), 0.5),
       percentile_cont(0.5) WITHIN GROUP (ORDER BY CAST(substr(value, 5) AS DOUBLE)),
       percentile_cont(CAST(substr(value, 5) AS DECIMAL), 1.0),
       percentile_cont(array(0.5, 1.0)) WITHIN GROUP (ORDER BY CAST(substr(value, 5) AS DOUBLE))
FROM src
GROUP BY CAST(key AS INT) DIV 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0	0.0	4.5	4.5	9.0	[4.5,9.0]
1	10.0	15.0	15.0	19.0	[15.0,19.0]
10	100.0	103.0	103.0	105.0	[103.0,105.0]
11	111.0	117.0	117.0	119.0	[117.0,119.0]
12	120.0	127.0	127.0	129.0	[127.0,129.0]
13	131.0	137.0	137.0	138.0	[137.0,138.0]
14	143.0	146.0	146.0	149.0	[146.0,149.0]
15	150.0	154.0	154.0	158.0	[154.0,158.0]
16	160.0	166.5	166.5	169.0	[166.5,169.0]
17	170.0	175.0	175.0	179.0	[175.0,179.0]
18	180.0	186.5	186.5	189.0	[186.5,189.0]
19	190.0	194.5	194.5	199.0	[194.5,199.0]
2	20.0	26.0	26.0	28.0	[26.0,28.0]
20	200.0	205.0	205.0	209.0	[205.0,209.0]
21	213.0	216.5	216.5	219.0	[216.5,219.0]
22	221.0	224.0	224.0	229.0	[224.0,229.0]
23	230.0	234.0	234.0	239.0	[234.0,239.0]
24	241.0	244.0	244.0	249.0	[244.0,249.0]
25	252.0	256.0	256.0	258.0	[256.0,258.0]
26	260.0	264.0	264.0	266.0	[264.0,266.0]
27	272.0	275.0	275.0	278.0	[275.0,278.0]
28	280.0	283.5	283.5	289.0	[283.5,289.0]
29	291.0	297.0	297.0	298.0	[297.0,298.0]
3	30.0	35.0	35.0	37.0	[35.0,37.0]
30	302.0	307.0	307.0	309.0	[307.0,309.0]
31	310.0	316.0	316.0	318.0	[316.0,318.0]
32	321.0	324.0	324.0	327.0	[324.0,327.0]
33	331.0	333.0	333.0	339.0	[333.0,339.0]
34	341.0	345.0	345.0	348.0	[345.0,348.0]
35	351.0	353.0	353.0	356.0	[353.0,356.0]
36	360.0	367.0	367.0	369.0	[367.0,369.0]
37	373.0	376.0	376.0	379.0	[376.0,379.0]
38	382.0	384.0	384.0	389.0	[384.0,389.0]
39	392.0	396.0	396.0	399.0	[396.0,399.0]
4	41.0	42.5	42.5	47.0	[42.5,47.0]
40	400.0	403.5	403.5	409.0	[403.5,409.0]
41	411.0	415.5	415.5	419.0	[415.5,419.0]
42	421.0	425.5	425.5	429.0	[425.5,429.0]
43	430.0	435.0	435.0	439.0	[435.0,439.0]
44	443.0	446.0	446.0	449.0	[446.0,449.0]
45	452.0	455.0	455.0	459.0	[455.0,459.0]
46	460.0	467.5	467.5	469.0	[467.5,469.0]
47	470.0	477.0	477.0	479.0	[477.0,479.0]
48	480.0	484.0	484.0	489.0	[484.0,489.0]
49	490.0	494.5	494.5	498.0	[494.5,498.0]
5	51.0	54.0	54.0	58.0	[54.0,58.0]
6	64.0	66.5	66.5	69.0	[66.5,69.0]
7	70.0	73.0	73.0	78.0	[73.0,78.0]
8	80.0	84.0	84.0	87.0	[84.0,87.0]
9	90.0	95.0	95.0	98.0	[95.0,98.0]
PREHOOK: query: SELECT CAST(key AS INT) DIV 10,
       percentile_cont(CAST(substr(value, 5) AS INT), 0.0),
       percentile_cont(CAST(substr(value, 5) AS DOUBLE), 0.5),
       percentile_cont(0.5) WITHIN GROUP (ORDER BY CAST(substr(value, 5) AS DOUBLE)),
       percentile_cont(CAST(substr(value, 5) AS DECIMAL), 1.0),
       percentile_cont(array(0.0, 0.5, 0.7, 1.0)) WITHIN GROUP (ORDER BY CAST(substr(value, 5) AS DOUBLE))
FROM src
GROUP BY CAST(key AS INT) DIV 10
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: SELECT CAST(key AS INT) DIV 10,
       percentile_cont(CAST(substr(value, 5) AS INT), 0.0),
       percentile_cont(CAST(substr(value, 5) AS DOUBLE), 0.5),
       percentile_cont(0.5) WITHIN GROUP (ORDER BY CAST(substr(value, 5) AS DOUBLE)),
       percentile_cont(CAST(substr(value, 5) AS DECIMAL), 1.0),
       percentile_cont(array(0.0, 0.5, 0.7, 1.0)) WITHIN GROUP (ORDER BY CAST(substr(value, 5) AS DOUBLE))
FROM src
GROUP BY CAST(key AS INT) DIV 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0	0.0	4.5	4.5	9.0	[0.0,4.5,5.0,9.0]
1	10.0	15.0	15.0	19.0	[10.0,15.0,17.299999999999997,19.0]
10	100.0	103.0	103.0	105.0	[100.0,103.0,104.0,105.0]
11	111.0	117.0	117.0	119.0	[111.0,117.0,118.30000000000001,119.0]
12	120.0	127.0	127.0	129.0	[120.0,127.0,128.0,129.0]
13	131.0	137.0	137.0	138.0	[131.0,137.0,138.0,138.0]
14	143.0	146.0	146.0	149.0	[143.0,146.0,147.5,149.0]
15	150.0	154.0	154.0	158.0	[150.0,154.0,155.9,158.0]
16	160.0	166.5	166.5	169.0	[160.0,166.5,167.5,169.0]
17	170.0	175.0	175.0	179.0	[170.0,175.0,176.4,179.0]
18	180.0	186.5	186.5	189.0	[180.0,186.5,187.0,189.0]
19	190.0	194.5	194.5	199.0	[190.0,194.5,196.5,199.0]
2	20.0	26.0	26.0	28.0	[20.0,26.0,26.2,28.0]
20	200.0	205.0	205.0	209.0	[200.0,205.0,207.8,209.0]
21	213.0	216.5	216.5	219.0	[213.0,216.5,217.3,219.0]
22	221.0	224.0	224.0	229.0	[221.0,224.0,226.0,229.0]
23	230.0	234.0	234.0	239.0	[230.0,234.0,237.10000000000002,239.0]
24	241.0	244.0	244.0	249.0	[241.0,244.0,247.2,249.0]
25	252.0	256.0	256.0	258.0	[252.0,256.0,256.2,258.0]
26	260.0	264.0	264.0	266.0	[260.0,264.0,265.0,266.0]
27	272.0	275.0	275.0	278.0	[272.0,275.0,277.0,278.0]
28	280.0	283.5	283.5	289.0	[280.0,283.5,286.09999999999997,289.0]
29	291.0	297.0	297.0	298.0	[291.0,297.0,298.0,298.0]
3	30.0	35.0	35.0	37.0	[30.0,35.0,35.0,37.0]
30	302.0	307.0	307.0	309.0	[302.0,307.0,307.9,309.0]
31	310.0	316.0	316.0	318.0	[310.0,316.0,317.0,318.0]
32	321.0	324.0	324.0	327.0	[321.0,324.0,325.6,327.0]
33	331.0	333.0	333.0	339.0	[331.0,333.0,335.6,339.0]
34	341.0	345.0	345.0	348.0	[341.0,345.0,348.0,348.0]
35	351.0	353.0	353.0	356.0	[351.0,353.0,353.29999999999995,356.0]
36	360.0	367.0	367.0	369.0	[360.0,367.0,368.0,369.0]
37	373.0	376.0	376.0	379.0	[373.0,376.0,377.5,379.0]
38	382.0	384.0	384.0	389.0	[382.0,384.0,384.4,389.0]
39	392.0	396.0	396.0	399.0	[392.0,396.0,396.7,399.0]
4	41.0	42.5	42.5	47.0	[41.0,42.5,43.5,47.0]
40	400.0	403.5	403.5	409.0	[400.0,403.5,406.0,409.0]
41	411.0	415.5	415.5	419.0	[411.0,415.5,417.0,419.0]
42	421.0	425.5	425.5	429.0	[421.0,425.5,428.0,429.0]
43	430.0	435.0	435.0	439.0	[430.0,435.0,437.79999999999995,439.0]
44	443.0	446.0	446.0	449.0	[443.0,446.0,447.6,449.0]
45	452.0	455.0	455.0	459.0	[452.0,455.0,458.0,459.0]
46	460.0	467.5	467.5	469.0	[460.0,467.5,468.0,469.0]
47	470.0	477.0	477.0	479.0	[470.0,477.0,478.0,479.0]
48	480.0	484.0	484.0	489.0	[480.0,484.0,487.79999999999995,489.0]
49	490.0	494.5	494.5	498.0	[490.0,494.5,496.7,498.0]
5	51.0	54.0	54.0	58.0	[51.0,54.0,57.199999999999996,58.0]
6	64.0	66.5	66.5	69.0	[64.0,66.5,67.0,69.0]
7	70.0	73.0	73.0	78.0	[70.0,73.0,76.0,78.0]
8	80.0	84.0	84.0	87.0	[80.0,84.0,84.6,87.0]
9	90.0	95.0	95.0	98.0	[90.0,95.0,97.0,98.0]
PREHOOK: query: SELECT CAST(key AS INT) DIV 10,
       percentile_cont(NULL, 0.0),
       percentile_cont(0.0) WITHIN GROUP (ORDER BY NULL)
FROM src
GROUP BY CAST(key AS INT) DIV 10
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: SELECT CAST(key AS INT) DIV 10,
       percentile_cont(NULL, 0.0),
       percentile_cont(0.0) WITHIN GROUP (ORDER BY NULL)
FROM src
GROUP BY CAST(key AS INT) DIV 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0	NULL	NULL
1	NULL	NULL
10	NULL	NULL
11	NULL	NULL
12	NULL	NULL
13	NULL	NULL
14	NULL	NULL
15	NULL	NULL
16	NULL	NULL
17	NULL	NULL
18	NULL	NULL
19	NULL	NULL
2	NULL	NULL
20	NULL	NULL
21	NULL	NULL
22	NULL	NULL
23	NULL	NULL
24	NULL	NULL
25	NULL	NULL
26	NULL	NULL
27	NULL	NULL
28	NULL	NULL
29	NULL	NULL
3	NULL	NULL
30	NULL	NULL
31	NULL	NULL
32	NULL	NULL
33	NULL	NULL
34	NULL	NULL
35	NULL	NULL
36	NULL	NULL
37	NULL	NULL
38	NULL	NULL
39	NULL	NULL
4	NULL	NULL
40	NULL	NULL
41	NULL	NULL
42	NULL	NULL
43	NULL	NULL
44	NULL	NULL
45	NULL	NULL
46	NULL	NULL
47	NULL	NULL
48	NULL	NULL
49	NULL	NULL
5	NULL	NULL
6	NULL	NULL
7	NULL	NULL
8	NULL	NULL
9	NULL	NULL
PREHOOK: query: SELECT CAST(key AS INT) DIV 10,
       percentile_cont(IF(CAST(key AS INT) DIV 10 < 5, 1, NULL), 0.5),
       percentile_cont(0.5) WITHIN GROUP (ORDER BY IF(CAST(key AS INT) DIV 10 < 5, 1, NULL))
FROM src
GROUP BY CAST(key AS INT) DIV 10
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: SELECT CAST(key AS INT) DIV 10,
       percentile_cont(IF(CAST(key AS INT) DIV 10 < 5, 1, NULL), 0.5),
       percentile_cont(0.5) WITHIN GROUP (ORDER BY IF(CAST(key AS INT) DIV 10 < 5, 1, NULL))
FROM src
GROUP BY CAST(key AS INT) DIV 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0	1.0	1.0
1	1.0	1.0
10	NULL	NULL
11	NULL	NULL
12	NULL	NULL
13	NULL	NULL
14	NULL	NULL
15	NULL	NULL
16	NULL	NULL
17	NULL	NULL
18	NULL	NULL
19	NULL	NULL
2	1.0	1.0
20	NULL	NULL
21	NULL	NULL
22	NULL	NULL
23	NULL	NULL
24	NULL	NULL
25	NULL	NULL
26	NULL	NULL
27	NULL	NULL
28	NULL	NULL
29	NULL	NULL
3	1.0	1.0
30	NULL	NULL
31	NULL	NULL
32	NULL	NULL
33	NULL	NULL
34	NULL	NULL
35	NULL	NULL
36	NULL	NULL
37	NULL	NULL
38	NULL	NULL
39	NULL	NULL
4	1.0	1.0
40	NULL	NULL
41	NULL	NULL
42	NULL	NULL
43	NULL	NULL
44	NULL	NULL
45	NULL	NULL
46	NULL	NULL
47	NULL	NULL
48	NULL	NULL
49	NULL	NULL
5	NULL	NULL
6	NULL	NULL
7	NULL	NULL
8	NULL	NULL
9	NULL	NULL
PREHOOK: query: select percentile_cont(cast(key as bigint), 0.5),
       percentile_cont(0.5) within group (order by cast(key as bigint))
from src where false
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select percentile_cont(cast(key as bigint), 0.5),
       percentile_cont(0.5) within group (order by cast(key as bigint))
from src where false
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
NULL	NULL
PREHOOK: query: CREATE TABLE t_test (value int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@t_test
POSTHOOK: query: CREATE TABLE t_test (value int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t_test
PREHOOK: query: INSERT INTO t_test VALUES (NULL), (3), (8), (13), (7), (6), (20), (NULL), (NULL), (10), (7), (15), (16), (8), (7), (8), (NULL)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@t_test
POSTHOOK: query: INSERT INTO t_test VALUES (NULL), (3), (8), (13), (7), (6), (20), (NULL), (NULL), (10), (7), (15), (16), (8), (7), (8), (NULL)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@t_test
POSTHOOK: Lineage: t_test.value SCRIPT []
PREHOOK: query: EXPLAIN SELECT
percentile_cont(value, 0.0),
percentile_cont(value, 0.2),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value NULLS FIRST),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value NULLS LAST),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value) = percentile_cont(value, 0.2),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value ASC),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value ASC) = percentile_cont(value, 0.2),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value DESC),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value DESC NULLS FIRST),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value DESC NULLS LAST)
FROM t_test
PREHOOK: type: QUERY
PREHOOK: Input: default@t_test
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN SELECT
percentile_cont(value, 0.0),
percentile_cont(value, 0.2),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value NULLS FIRST),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value NULLS LAST),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value) = percentile_cont(value, 0.2),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value ASC),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value ASC) = percentile_cont(value, 0.2),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value DESC),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value DESC NULLS FIRST),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value DESC NULLS LAST)
FROM t_test
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t_test
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t_test
                  Statistics: Num rows: 17 Data size: 56 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: value (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 17 Data size: 56 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: percentile_cont(_col0, 0), percentile_cont(_col0, 0.2), percentile_cont(0.2, _col0, 1, 0), percentile_cont(0.2, _col0, 1, 1), percentile_cont(0.2, _col0, 0, 0), percentile_cont(0.2, _col0, 0, 1)
                      minReductionHashAggr: 0.9411765
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      Statistics: Num rows: 1 Data size: 4728 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 4728 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: struct<counts:map<bigint,bigint>,percentiles:array<double>,isascending:boolean>), _col1 (type: struct<counts:map<bigint,bigint>,percentiles:array<double>,isascending:boolean>), _col2 (type: struct<counts:map<bigint,bigint>,percentiles:array<double>,isascending:boolean>), _col3 (type: struct<counts:map<bigint,bigint>,percentiles:array<double>,isascending:boolean>), _col4 (type: struct<counts:map<bigint,bigint>,percentiles:array<double>,isascending:boolean>), _col5 (type: struct<counts:map<bigint,bigint>,percentiles:array<double>,isascending:boolean>)
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: percentile_cont(VALUE._col0), percentile_cont(VALUE._col1), percentile_cont(VALUE._col2), percentile_cont(VALUE._col3), percentile_cont(VALUE._col4), percentile_cont(VALUE._col5)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 1 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: double), _col1 (type: double), _col2 (type: double), _col3 (type: double), _col2 (type: double), (_col2 = _col1) (type: boolean), _col2 (type: double), (_col2 = _col1) (type: boolean), _col4 (type: double), _col5 (type: double), _col4 (type: double)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10
                  Statistics: Num rows: 1 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT
percentile_cont(value, 0.0),
percentile_cont(value, 0.2),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value NULLS FIRST),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value NULLS LAST),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value) = percentile_cont(value, 0.2),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value ASC),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value ASC) = percentile_cont(value, 0.2),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value DESC),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value DESC NULLS FIRST),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value DESC NULLS LAST)
FROM t_test
PREHOOK: type: QUERY
PREHOOK: Input: default@t_test
#### A masked pattern was here ####
POSTHOOK: query: SELECT
percentile_cont(value, 0.0),
percentile_cont(value, 0.2),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value NULLS FIRST),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value NULLS LAST),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value) = percentile_cont(value, 0.2),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value ASC),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value ASC) = percentile_cont(value, 0.2),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value DESC),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value DESC NULLS FIRST),
percentile_cont(0.2) WITHIN GROUP (ORDER BY value DESC NULLS LAST)
FROM t_test
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t_test
#### A masked pattern was here ####
3.0	7.0	7.0	7.0	7.0	true	7.0	true	14.2	14.2	14.2
PREHOOK: query: DROP TABLE t_test
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t_test
PREHOOK: Output: default@t_test
POSTHOOK: query: DROP TABLE t_test
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t_test
POSTHOOK: Output: default@t_test
