PREHOOK: query: drop table if exists vector_interval_2
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists vector_interval_2
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table vector_interval_2 (ts timestamp, dt date, str1 string, str2 string, str3 string, str4 string) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@vector_interval_2
POSTHOOK: query: create table vector_interval_2 (ts timestamp, dt date, str1 string, str2 string, str3 string, str4 string) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@vector_interval_2
PREHOOK: query: insert into vector_interval_2
  select timestamp '2001-01-01 01:02:03', date '2001-01-01', '1-2', '1-3', '1 2:3:4', '1 2:3:5' from src limit 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@vector_interval_2
POSTHOOK: query: insert into vector_interval_2
  select timestamp '2001-01-01 01:02:03', date '2001-01-01', '1-2', '1-3', '1 2:3:4', '1 2:3:5' from src limit 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@vector_interval_2
POSTHOOK: Lineage: vector_interval_2.dt SIMPLE []
POSTHOOK: Lineage: vector_interval_2.str1 SIMPLE []
POSTHOOK: Lineage: vector_interval_2.str2 SIMPLE []
POSTHOOK: Lineage: vector_interval_2.str3 SIMPLE []
POSTHOOK: Lineage: vector_interval_2.str4 SIMPLE []
POSTHOOK: Lineage: vector_interval_2.ts SIMPLE []
PREHOOK: query: insert into vector_interval_2
  select null, null, null, null, null, null from src limit 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@vector_interval_2
POSTHOOK: query: insert into vector_interval_2
  select null, null, null, null, null, null from src limit 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@vector_interval_2
POSTHOOK: Lineage: vector_interval_2.dt EXPRESSION []
POSTHOOK: Lineage: vector_interval_2.str1 EXPRESSION []
POSTHOOK: Lineage: vector_interval_2.str2 EXPRESSION []
POSTHOOK: Lineage: vector_interval_2.str3 EXPRESSION []
POSTHOOK: Lineage: vector_interval_2.str4 EXPRESSION []
POSTHOOK: Lineage: vector_interval_2.ts EXPRESSION []
PREHOOK: query: explain vectorization expression
select
  str1,
  -- Should all be true
  interval_year_month(str1) = interval_year_month(str1),
  interval_year_month(str1) <= interval_year_month(str1),
  interval_year_month(str1) <= interval_year_month(str2),
  interval_year_month(str1) < interval_year_month(str2),
  interval_year_month(str1) >= interval_year_month(str1),
  interval_year_month(str2) >= interval_year_month(str1),
  interval_year_month(str2) > interval_year_month(str1),
  interval_year_month(str1) != interval_year_month(str2),

  interval_year_month(str1) = interval '1-2' year to month,
  interval_year_month(str1) <= interval '1-2' year to month,
  interval_year_month(str1) <= interval '1-3' year to month,
  interval_year_month(str1) < interval '1-3' year to month,
  interval_year_month(str1) >= interval '1-2' year to month,
  interval_year_month(str2) >= interval '1-2' year to month,
  interval_year_month(str2) > interval '1-2' year to month,
  interval_year_month(str1) != interval '1-3' year to month,

  interval '1-2' year to month = interval_year_month(str1),
  interval '1-2' year to month <= interval_year_month(str1),
  interval '1-2' year to month <= interval_year_month(str2),
  interval '1-2' year to month < interval_year_month(str2),
  interval '1-2' year to month >= interval_year_month(str1),
  interval '1-3' year to month >= interval_year_month(str1),
  interval '1-3' year to month > interval_year_month(str1),
  interval '1-2' year to month != interval_year_month(str2)
from vector_interval_2 order by str1
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression
select
  str1,
  -- Should all be true
  interval_year_month(str1) = interval_year_month(str1),
  interval_year_month(str1) <= interval_year_month(str1),
  interval_year_month(str1) <= interval_year_month(str2),
  interval_year_month(str1) < interval_year_month(str2),
  interval_year_month(str1) >= interval_year_month(str1),
  interval_year_month(str2) >= interval_year_month(str1),
  interval_year_month(str2) > interval_year_month(str1),
  interval_year_month(str1) != interval_year_month(str2),

  interval_year_month(str1) = interval '1-2' year to month,
  interval_year_month(str1) <= interval '1-2' year to month,
  interval_year_month(str1) <= interval '1-3' year to month,
  interval_year_month(str1) < interval '1-3' year to month,
  interval_year_month(str1) >= interval '1-2' year to month,
  interval_year_month(str2) >= interval '1-2' year to month,
  interval_year_month(str2) > interval '1-2' year to month,
  interval_year_month(str1) != interval '1-3' year to month,

  interval '1-2' year to month = interval_year_month(str1),
  interval '1-2' year to month <= interval_year_month(str1),
  interval '1-2' year to month <= interval_year_month(str2),
  interval '1-2' year to month < interval_year_month(str2),
  interval '1-2' year to month >= interval_year_month(str1),
  interval '1-3' year to month >= interval_year_month(str1),
  interval '1-3' year to month > interval_year_month(str1),
  interval '1-2' year to month != interval_year_month(str2)
from vector_interval_2 order by str1
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_interval_2
                  Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    expressions: str1 (type: string), (CAST( str1 AS INTERVAL YEAR TO MONTH) = CAST( str1 AS INTERVAL YEAR TO MONTH)) (type: boolean), (CAST( str1 AS INTERVAL YEAR TO MONTH) <= CAST( str1 AS INTERVAL YEAR TO MONTH)) (type: boolean), (CAST( str1 AS INTERVAL YEAR TO MONTH) <= CAST( str2 AS INTERVAL YEAR TO MONTH)) (type: boolean), (CAST( str1 AS INTERVAL YEAR TO MONTH) < CAST( str2 AS INTERVAL YEAR TO MONTH)) (type: boolean), (CAST( str1 AS INTERVAL YEAR TO MONTH) >= CAST( str1 AS INTERVAL YEAR TO MONTH)) (type: boolean), (CAST( str2 AS INTERVAL YEAR TO MONTH) >= CAST( str1 AS INTERVAL YEAR TO MONTH)) (type: boolean), (CAST( str2 AS INTERVAL YEAR TO MONTH) > CAST( str1 AS INTERVAL YEAR TO MONTH)) (type: boolean), (CAST( str1 AS INTERVAL YEAR TO MONTH) <> CAST( str2 AS INTERVAL YEAR TO MONTH)) (type: boolean), (CAST( str1 AS INTERVAL YEAR TO MONTH) = INTERVAL'1-2') (type: boolean), (CAST( str1 AS INTERVAL YEAR TO MONTH) <= INTERVAL'1-2') (type: boolean), (CAST( str1 AS INTERVAL YEAR TO MONTH) <= INTERVAL'1-3') (type: boolean), (CAST( str1 AS INTERVAL YEAR TO MONTH) < INTERVAL'1-3') (type: boolean), (CAST( str1 AS INTERVAL YEAR TO MONTH) >= INTERVAL'1-2') (type: boolean), (CAST( str2 AS INTERVAL YEAR TO MONTH) >= INTERVAL'1-2') (type: boolean), (CAST( str2 AS INTERVAL YEAR TO MONTH) > INTERVAL'1-2') (type: boolean), (CAST( str1 AS INTERVAL YEAR TO MONTH) <> INTERVAL'1-3') (type: boolean), (INTERVAL'1-2' = CAST( str1 AS INTERVAL YEAR TO MONTH)) (type: boolean), (INTERVAL'1-2' <= CAST( str1 AS INTERVAL YEAR TO MONTH)) (type: boolean), (INTERVAL'1-2' <= CAST( str2 AS INTERVAL YEAR TO MONTH)) (type: boolean), (INTERVAL'1-2' < CAST( str2 AS INTERVAL YEAR TO MONTH)) (type: boolean), (INTERVAL'1-2' >= CAST( str1 AS INTERVAL YEAR TO MONTH)) (type: boolean), (INTERVAL'1-3' >= CAST( str1 AS INTERVAL YEAR TO MONTH)) (type: boolean), (INTERVAL'1-3' > CAST( str1 AS INTERVAL YEAR TO MONTH)) (type: boolean), (INTERVAL'1-2' <> CAST( str2 AS INTERVAL YEAR TO MONTH)) (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [2, 9, 10, 11, 12, 13, 14, 15, 16, 8, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
                        selectExpressions: LongColEqualLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 2:string) -> 8:interval_year_month) -> 9:boolean, LongColLessEqualLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 2:string) -> 8:interval_year_month) -> 10:boolean, LongColLessEqualLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 3:string) -> 8:interval_year_month) -> 11:boolean, LongColLessLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 3:string) -> 8:interval_year_month) -> 12:boolean, LongColGreaterEqualLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 2:string) -> 8:interval_year_month) -> 13:boolean, LongColGreaterEqualLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 2:string) -> 8:interval_year_month) -> 14:boolean, LongColGreaterLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 2:string) -> 8:interval_year_month) -> 15:boolean, LongColNotEqualLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 3:string) -> 8:interval_year_month) -> 16:boolean, IntervalYearMonthColEqualIntervalYearMonthScalar(col 7:interval_year_month, val 14)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 8:boolean, IntervalYearMonthColLessEqualIntervalYearMonthScalar(col 7:interval_year_month, val 14)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 17:boolean, IntervalYearMonthColLessEqualIntervalYearMonthScalar(col 7:interval_year_month, val 15)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 18:boolean, IntervalYearMonthColLessIntervalYearMonthScalar(col 7:interval_year_month, val 15)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 19:boolean, IntervalYearMonthColGreaterEqualIntervalYearMonthScalar(col 7:interval_year_month, val 14)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 20:boolean, IntervalYearMonthColGreaterEqualIntervalYearMonthScalar(col 7:interval_year_month, val 14)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month) -> 21:boolean, IntervalYearMonthColGreaterIntervalYearMonthScalar(col 7:interval_year_month, val 14)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month) -> 22:boolean, IntervalYearMonthColNotEqualIntervalYearMonthScalar(col 7:interval_year_month, val 15)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 23:boolean, IntervalYearMonthScalarEqualIntervalYearMonthColumn(val 14, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 24:boolean, IntervalYearMonthScalarLessEqualIntervalYearMonthColumn(val 14, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 25:boolean, IntervalYearMonthScalarLessEqualIntervalYearMonthColumn(val 14, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month) -> 26:boolean, IntervalYearMonthScalarLessIntervalYearMonthColumn(val 14, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month) -> 27:boolean, IntervalYearMonthScalarGreaterEqualIntervalYearMonthColumn(val 14, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 28:boolean, IntervalYearMonthScalarGreaterEqualIntervalYearMonthColumn(val 15, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 29:boolean, IntervalYearMonthScalarGreaterIntervalYearMonthColumn(val 15, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 30:boolean, IntervalYearMonthScalarNotEqualIntervalYearMonthColumn(val 14, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month) -> 31:boolean
                    Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Reduce Sink Vectorization:
                          className: VectorReduceSinkObjectHashOperator
                          native: true
                          nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                      Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: boolean), _col2 (type: boolean), _col3 (type: boolean), _col4 (type: boolean), _col5 (type: boolean), _col6 (type: boolean), _col7 (type: boolean), _col8 (type: boolean), _col9 (type: boolean), _col10 (type: boolean), _col11 (type: boolean), _col12 (type: boolean), _col13 (type: boolean), _col14 (type: boolean), _col15 (type: boolean), _col16 (type: boolean), _col17 (type: boolean), _col18 (type: boolean), _col19 (type: boolean), _col20 (type: boolean), _col21 (type: boolean), _col22 (type: boolean), _col23 (type: boolean), _col24 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: boolean), VALUE._col1 (type: boolean), VALUE._col2 (type: boolean), VALUE._col3 (type: boolean), VALUE._col4 (type: boolean), VALUE._col5 (type: boolean), VALUE._col6 (type: boolean), VALUE._col7 (type: boolean), VALUE._col8 (type: boolean), VALUE._col9 (type: boolean), VALUE._col10 (type: boolean), VALUE._col11 (type: boolean), VALUE._col12 (type: boolean), VALUE._col13 (type: boolean), VALUE._col14 (type: boolean), VALUE._col15 (type: boolean), VALUE._col16 (type: boolean), VALUE._col17 (type: boolean), VALUE._col18 (type: boolean), VALUE._col19 (type: boolean), VALUE._col20 (type: boolean), VALUE._col21 (type: boolean), VALUE._col22 (type: boolean), VALUE._col23 (type: boolean)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
                Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select
  str1,
  -- Should all be true
  interval_year_month(str1) = interval_year_month(str1),
  interval_year_month(str1) <= interval_year_month(str1),
  interval_year_month(str1) <= interval_year_month(str2),
  interval_year_month(str1) < interval_year_month(str2),
  interval_year_month(str1) >= interval_year_month(str1),
  interval_year_month(str2) >= interval_year_month(str1),
  interval_year_month(str2) > interval_year_month(str1),
  interval_year_month(str1) != interval_year_month(str2),

  interval_year_month(str1) = interval '1-2' year to month,
  interval_year_month(str1) <= interval '1-2' year to month,
  interval_year_month(str1) <= interval '1-3' year to month,
  interval_year_month(str1) < interval '1-3' year to month,
  interval_year_month(str1) >= interval '1-2' year to month,
  interval_year_month(str2) >= interval '1-2' year to month,
  interval_year_month(str2) > interval '1-2' year to month,
  interval_year_month(str1) != interval '1-3' year to month,

  interval '1-2' year to month = interval_year_month(str1),
  interval '1-2' year to month <= interval_year_month(str1),
  interval '1-2' year to month <= interval_year_month(str2),
  interval '1-2' year to month < interval_year_month(str2),
  interval '1-2' year to month >= interval_year_month(str1),
  interval '1-3' year to month >= interval_year_month(str1),
  interval '1-3' year to month > interval_year_month(str1),
  interval '1-2' year to month != interval_year_month(str2)
from vector_interval_2 order by str1
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
POSTHOOK: query: select
  str1,
  -- Should all be true
  interval_year_month(str1) = interval_year_month(str1),
  interval_year_month(str1) <= interval_year_month(str1),
  interval_year_month(str1) <= interval_year_month(str2),
  interval_year_month(str1) < interval_year_month(str2),
  interval_year_month(str1) >= interval_year_month(str1),
  interval_year_month(str2) >= interval_year_month(str1),
  interval_year_month(str2) > interval_year_month(str1),
  interval_year_month(str1) != interval_year_month(str2),

  interval_year_month(str1) = interval '1-2' year to month,
  interval_year_month(str1) <= interval '1-2' year to month,
  interval_year_month(str1) <= interval '1-3' year to month,
  interval_year_month(str1) < interval '1-3' year to month,
  interval_year_month(str1) >= interval '1-2' year to month,
  interval_year_month(str2) >= interval '1-2' year to month,
  interval_year_month(str2) > interval '1-2' year to month,
  interval_year_month(str1) != interval '1-3' year to month,

  interval '1-2' year to month = interval_year_month(str1),
  interval '1-2' year to month <= interval_year_month(str1),
  interval '1-2' year to month <= interval_year_month(str2),
  interval '1-2' year to month < interval_year_month(str2),
  interval '1-2' year to month >= interval_year_month(str1),
  interval '1-3' year to month >= interval_year_month(str1),
  interval '1-3' year to month > interval_year_month(str1),
  interval '1-2' year to month != interval_year_month(str2)
from vector_interval_2 order by str1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
1-2	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true
PREHOOK: query: explain vectorization expression
select
  str1,
  -- Should all be false
  interval_year_month(str1) != interval_year_month(str1),
  interval_year_month(str1) >= interval_year_month(str2),
  interval_year_month(str1) > interval_year_month(str2),
  interval_year_month(str2) <= interval_year_month(str1),
  interval_year_month(str2) < interval_year_month(str1),
  interval_year_month(str1) != interval_year_month(str1),

  interval_year_month(str1) != interval '1-2' year to month,
  interval_year_month(str1) >= interval '1-3' year to month,
  interval_year_month(str1) > interval '1-3' year to month,
  interval_year_month(str2) <= interval '1-2' year to month,
  interval_year_month(str2) < interval '1-2' year to month,
  interval_year_month(str1) != interval '1-2' year to month,

  interval '1-2' year to month != interval_year_month(str1),
  interval '1-2' year to month >= interval_year_month(str2),
  interval '1-2' year to month > interval_year_month(str2),
  interval '1-3' year to month <= interval_year_month(str1),
  interval '1-3' year to month < interval_year_month(str1),
  interval '1-2' year to month != interval_year_month(str1)
from vector_interval_2 order by str1
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression
select
  str1,
  -- Should all be false
  interval_year_month(str1) != interval_year_month(str1),
  interval_year_month(str1) >= interval_year_month(str2),
  interval_year_month(str1) > interval_year_month(str2),
  interval_year_month(str2) <= interval_year_month(str1),
  interval_year_month(str2) < interval_year_month(str1),
  interval_year_month(str1) != interval_year_month(str1),

  interval_year_month(str1) != interval '1-2' year to month,
  interval_year_month(str1) >= interval '1-3' year to month,
  interval_year_month(str1) > interval '1-3' year to month,
  interval_year_month(str2) <= interval '1-2' year to month,
  interval_year_month(str2) < interval '1-2' year to month,
  interval_year_month(str1) != interval '1-2' year to month,

  interval '1-2' year to month != interval_year_month(str1),
  interval '1-2' year to month >= interval_year_month(str2),
  interval '1-2' year to month > interval_year_month(str2),
  interval '1-3' year to month <= interval_year_month(str1),
  interval '1-3' year to month < interval_year_month(str1),
  interval '1-2' year to month != interval_year_month(str1)
from vector_interval_2 order by str1
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_interval_2
                  Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    expressions: str1 (type: string), (CAST( str1 AS INTERVAL YEAR TO MONTH) <> CAST( str1 AS INTERVAL YEAR TO MONTH)) (type: boolean), (CAST( str1 AS INTERVAL YEAR TO MONTH) >= CAST( str2 AS INTERVAL YEAR TO MONTH)) (type: boolean), (CAST( str1 AS INTERVAL YEAR TO MONTH) > CAST( str2 AS INTERVAL YEAR TO MONTH)) (type: boolean), (CAST( str2 AS INTERVAL YEAR TO MONTH) <= CAST( str1 AS INTERVAL YEAR TO MONTH)) (type: boolean), (CAST( str2 AS INTERVAL YEAR TO MONTH) < CAST( str1 AS INTERVAL YEAR TO MONTH)) (type: boolean), (CAST( str1 AS INTERVAL YEAR TO MONTH) <> INTERVAL'1-2') (type: boolean), (CAST( str1 AS INTERVAL YEAR TO MONTH) >= INTERVAL'1-3') (type: boolean), (CAST( str1 AS INTERVAL YEAR TO MONTH) > INTERVAL'1-3') (type: boolean), (CAST( str2 AS INTERVAL YEAR TO MONTH) <= INTERVAL'1-2') (type: boolean), (CAST( str2 AS INTERVAL YEAR TO MONTH) < INTERVAL'1-2') (type: boolean), (INTERVAL'1-2' <> CAST( str1 AS INTERVAL YEAR TO MONTH)) (type: boolean), (INTERVAL'1-2' >= CAST( str2 AS INTERVAL YEAR TO MONTH)) (type: boolean), (INTERVAL'1-2' > CAST( str2 AS INTERVAL YEAR TO MONTH)) (type: boolean), (INTERVAL'1-3' <= CAST( str1 AS INTERVAL YEAR TO MONTH)) (type: boolean), (INTERVAL'1-3' < CAST( str1 AS INTERVAL YEAR TO MONTH)) (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col7, _col8, _col9, _col10, _col11, _col13, _col14, _col15, _col16, _col17
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [2, 9, 10, 11, 12, 13, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22]
                        selectExpressions: LongColNotEqualLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 2:string) -> 8:interval_year_month) -> 9:boolean, LongColGreaterEqualLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 3:string) -> 8:interval_year_month) -> 10:boolean, LongColGreaterLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 3:string) -> 8:interval_year_month) -> 11:boolean, LongColLessEqualLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 2:string) -> 8:interval_year_month) -> 12:boolean, LongColLessLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 2:string) -> 8:interval_year_month) -> 13:boolean, IntervalYearMonthColNotEqualIntervalYearMonthScalar(col 7:interval_year_month, val 14)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 8:boolean, IntervalYearMonthColGreaterEqualIntervalYearMonthScalar(col 7:interval_year_month, val 15)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 14:boolean, IntervalYearMonthColGreaterIntervalYearMonthScalar(col 7:interval_year_month, val 15)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 15:boolean, IntervalYearMonthColLessEqualIntervalYearMonthScalar(col 7:interval_year_month, val 14)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month) -> 16:boolean, IntervalYearMonthColLessIntervalYearMonthScalar(col 7:interval_year_month, val 14)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month) -> 17:boolean, IntervalYearMonthScalarNotEqualIntervalYearMonthColumn(val 14, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 18:boolean, IntervalYearMonthScalarGreaterEqualIntervalYearMonthColumn(val 14, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month) -> 19:boolean, IntervalYearMonthScalarGreaterIntervalYearMonthColumn(val 14, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month) -> 20:boolean, IntervalYearMonthScalarLessEqualIntervalYearMonthColumn(val 15, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 21:boolean, IntervalYearMonthScalarLessIntervalYearMonthColumn(val 15, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 22:boolean
                    Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Reduce Sink Vectorization:
                          className: VectorReduceSinkObjectHashOperator
                          native: true
                          nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                      Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: boolean), _col2 (type: boolean), _col3 (type: boolean), _col4 (type: boolean), _col5 (type: boolean), _col7 (type: boolean), _col8 (type: boolean), _col9 (type: boolean), _col10 (type: boolean), _col11 (type: boolean), _col13 (type: boolean), _col14 (type: boolean), _col15 (type: boolean), _col16 (type: boolean), _col17 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: boolean), VALUE._col1 (type: boolean), VALUE._col2 (type: boolean), VALUE._col3 (type: boolean), VALUE._col4 (type: boolean), VALUE._col0 (type: boolean), VALUE._col5 (type: boolean), VALUE._col6 (type: boolean), VALUE._col7 (type: boolean), VALUE._col8 (type: boolean), VALUE._col9 (type: boolean), VALUE._col5 (type: boolean), VALUE._col10 (type: boolean), VALUE._col11 (type: boolean), VALUE._col12 (type: boolean), VALUE._col13 (type: boolean), VALUE._col14 (type: boolean), VALUE._col10 (type: boolean)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 1, 6, 7, 8, 9, 10, 6, 11, 12, 13, 14, 15, 11]
                Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select
  str1,
  -- Should all be false
  interval_year_month(str1) != interval_year_month(str1),
  interval_year_month(str1) >= interval_year_month(str2),
  interval_year_month(str1) > interval_year_month(str2),
  interval_year_month(str2) <= interval_year_month(str1),
  interval_year_month(str2) < interval_year_month(str1),
  interval_year_month(str1) != interval_year_month(str1),

  interval_year_month(str1) != interval '1-2' year to month,
  interval_year_month(str1) >= interval '1-3' year to month,
  interval_year_month(str1) > interval '1-3' year to month,
  interval_year_month(str2) <= interval '1-2' year to month,
  interval_year_month(str2) < interval '1-2' year to month,
  interval_year_month(str1) != interval '1-2' year to month,

  interval '1-2' year to month != interval_year_month(str1),
  interval '1-2' year to month >= interval_year_month(str2),
  interval '1-2' year to month > interval_year_month(str2),
  interval '1-3' year to month <= interval_year_month(str1),
  interval '1-3' year to month < interval_year_month(str1),
  interval '1-2' year to month != interval_year_month(str1)
from vector_interval_2 order by str1
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
POSTHOOK: query: select
  str1,
  -- Should all be false
  interval_year_month(str1) != interval_year_month(str1),
  interval_year_month(str1) >= interval_year_month(str2),
  interval_year_month(str1) > interval_year_month(str2),
  interval_year_month(str2) <= interval_year_month(str1),
  interval_year_month(str2) < interval_year_month(str1),
  interval_year_month(str1) != interval_year_month(str1),

  interval_year_month(str1) != interval '1-2' year to month,
  interval_year_month(str1) >= interval '1-3' year to month,
  interval_year_month(str1) > interval '1-3' year to month,
  interval_year_month(str2) <= interval '1-2' year to month,
  interval_year_month(str2) < interval '1-2' year to month,
  interval_year_month(str1) != interval '1-2' year to month,

  interval '1-2' year to month != interval_year_month(str1),
  interval '1-2' year to month >= interval_year_month(str2),
  interval '1-2' year to month > interval_year_month(str2),
  interval '1-3' year to month <= interval_year_month(str1),
  interval '1-3' year to month < interval_year_month(str1),
  interval '1-2' year to month != interval_year_month(str1)
from vector_interval_2 order by str1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
1-2	false	false	false	false	false	false	false	false	false	false	false	false	false	false	false	false	false	false
PREHOOK: query: explain vectorization expression
select
  str3,
  -- Should all be true
  interval_day_time(str3) = interval_day_time(str3),
  interval_day_time(str3) <= interval_day_time(str3),
  interval_day_time(str3) <= interval_day_time(str4),
  interval_day_time(str3) < interval_day_time(str4),
  interval_day_time(str3) >= interval_day_time(str3),
  interval_day_time(str4) >= interval_day_time(str3),
  interval_day_time(str4) > interval_day_time(str3),
  interval_day_time(str3) != interval_day_time(str4),

  interval_day_time(str3) = interval '1 2:3:4' day to second,
  interval_day_time(str3) <= interval '1 2:3:4' day to second,
  interval_day_time(str3) <= interval '1 2:3:5' day to second,
  interval_day_time(str3) < interval '1 2:3:5' day to second,
  interval_day_time(str3) >= interval '1 2:3:4' day to second,
  interval_day_time(str4) >= interval '1 2:3:4' day to second,
  interval_day_time(str4) > interval '1 2:3:4' day to second,
  interval_day_time(str3) != interval '1 2:3:5' day to second,

  interval '1 2:3:4' day to second = interval_day_time(str3),
  interval '1 2:3:4' day to second <= interval_day_time(str3),
  interval '1 2:3:4' day to second <= interval_day_time(str4),
  interval '1 2:3:4' day to second < interval_day_time(str4),
  interval '1 2:3:4' day to second >= interval_day_time(str3),
  interval '1 2:3:5' day to second >= interval_day_time(str3),
  interval '1 2:3:5' day to second > interval_day_time(str3),
  interval '1 2:3:4' day to second != interval_day_time(str4)
from vector_interval_2 order by str3
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression
select
  str3,
  -- Should all be true
  interval_day_time(str3) = interval_day_time(str3),
  interval_day_time(str3) <= interval_day_time(str3),
  interval_day_time(str3) <= interval_day_time(str4),
  interval_day_time(str3) < interval_day_time(str4),
  interval_day_time(str3) >= interval_day_time(str3),
  interval_day_time(str4) >= interval_day_time(str3),
  interval_day_time(str4) > interval_day_time(str3),
  interval_day_time(str3) != interval_day_time(str4),

  interval_day_time(str3) = interval '1 2:3:4' day to second,
  interval_day_time(str3) <= interval '1 2:3:4' day to second,
  interval_day_time(str3) <= interval '1 2:3:5' day to second,
  interval_day_time(str3) < interval '1 2:3:5' day to second,
  interval_day_time(str3) >= interval '1 2:3:4' day to second,
  interval_day_time(str4) >= interval '1 2:3:4' day to second,
  interval_day_time(str4) > interval '1 2:3:4' day to second,
  interval_day_time(str3) != interval '1 2:3:5' day to second,

  interval '1 2:3:4' day to second = interval_day_time(str3),
  interval '1 2:3:4' day to second <= interval_day_time(str3),
  interval '1 2:3:4' day to second <= interval_day_time(str4),
  interval '1 2:3:4' day to second < interval_day_time(str4),
  interval '1 2:3:4' day to second >= interval_day_time(str3),
  interval '1 2:3:5' day to second >= interval_day_time(str3),
  interval '1 2:3:5' day to second > interval_day_time(str3),
  interval '1 2:3:4' day to second != interval_day_time(str4)
from vector_interval_2 order by str3
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_interval_2
                  Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    expressions: str3 (type: string), (CAST( str3 AS INTERVAL DAY TO SECOND) = CAST( str3 AS INTERVAL DAY TO SECOND)) (type: boolean), (CAST( str3 AS INTERVAL DAY TO SECOND) <= CAST( str3 AS INTERVAL DAY TO SECOND)) (type: boolean), (CAST( str3 AS INTERVAL DAY TO SECOND) <= CAST( str4 AS INTERVAL DAY TO SECOND)) (type: boolean), (CAST( str3 AS INTERVAL DAY TO SECOND) < CAST( str4 AS INTERVAL DAY TO SECOND)) (type: boolean), (CAST( str3 AS INTERVAL DAY TO SECOND) >= CAST( str3 AS INTERVAL DAY TO SECOND)) (type: boolean), (CAST( str4 AS INTERVAL DAY TO SECOND) >= CAST( str3 AS INTERVAL DAY TO SECOND)) (type: boolean), (CAST( str4 AS INTERVAL DAY TO SECOND) > CAST( str3 AS INTERVAL DAY TO SECOND)) (type: boolean), (CAST( str3 AS INTERVAL DAY TO SECOND) <> CAST( str4 AS INTERVAL DAY TO SECOND)) (type: boolean), (CAST( str3 AS INTERVAL DAY TO SECOND) = INTERVAL'1 02:03:04.000000000') (type: boolean), (CAST( str3 AS INTERVAL DAY TO SECOND) <= INTERVAL'1 02:03:04.000000000') (type: boolean), (CAST( str3 AS INTERVAL DAY TO SECOND) <= INTERVAL'1 02:03:05.000000000') (type: boolean), (CAST( str3 AS INTERVAL DAY TO SECOND) < INTERVAL'1 02:03:05.000000000') (type: boolean), (CAST( str3 AS INTERVAL DAY TO SECOND) >= INTERVAL'1 02:03:04.000000000') (type: boolean), (CAST( str4 AS INTERVAL DAY TO SECOND) >= INTERVAL'1 02:03:04.000000000') (type: boolean), (CAST( str4 AS INTERVAL DAY TO SECOND) > INTERVAL'1 02:03:04.000000000') (type: boolean), (CAST( str3 AS INTERVAL DAY TO SECOND) <> INTERVAL'1 02:03:05.000000000') (type: boolean), (INTERVAL'1 02:03:04.000000000' = CAST( str3 AS INTERVAL DAY TO SECOND)) (type: boolean), (INTERVAL'1 02:03:04.000000000' <= CAST( str3 AS INTERVAL DAY TO SECOND)) (type: boolean), (INTERVAL'1 02:03:04.000000000' <= CAST( str4 AS INTERVAL DAY TO SECOND)) (type: boolean), (INTERVAL'1 02:03:04.000000000' < CAST( str4 AS INTERVAL DAY TO SECOND)) (type: boolean), (INTERVAL'1 02:03:04.000000000' >= CAST( str3 AS INTERVAL DAY TO SECOND)) (type: boolean), (INTERVAL'1 02:03:05.000000000' >= CAST( str3 AS INTERVAL DAY TO SECOND)) (type: boolean), (INTERVAL'1 02:03:05.000000000' > CAST( str3 AS INTERVAL DAY TO SECOND)) (type: boolean), (INTERVAL'1 02:03:04.000000000' <> CAST( str4 AS INTERVAL DAY TO SECOND)) (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
                        selectExpressions: IntervalDayTimeColEqualIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 4:string) -> 8:interval_day_time) -> 9:boolean, IntervalDayTimeColLessEqualIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 4:string) -> 8:interval_day_time) -> 10:boolean, IntervalDayTimeColLessEqualIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 5:string) -> 8:interval_day_time) -> 11:boolean, IntervalDayTimeColLessIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 5:string) -> 8:interval_day_time) -> 12:boolean, IntervalDayTimeColGreaterEqualIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 4:string) -> 8:interval_day_time) -> 13:boolean, IntervalDayTimeColGreaterEqualIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 4:string) -> 8:interval_day_time) -> 14:boolean, IntervalDayTimeColGreaterIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 4:string) -> 8:interval_day_time) -> 15:boolean, IntervalDayTimeColNotEqualIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 5:string) -> 8:interval_day_time) -> 16:boolean, IntervalDayTimeColEqualIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:04.000000000)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time) -> 17:boolean, IntervalDayTimeColLessEqualIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:04.000000000)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time) -> 18:boolean, IntervalDayTimeColLessEqualIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:05.000000000)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time) -> 19:boolean, IntervalDayTimeColLessIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:05.000000000)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time) -> 20:boolean, IntervalDayTimeColGreaterEqualIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:04.000000000)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time) -> 21:boolean, IntervalDayTimeColGreaterEqualIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:04.000000000)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time) -> 22:boolean, IntervalDayTimeColGreaterIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:04.000000000)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time) -> 23:boolean, IntervalDayTimeColNotEqualIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:05.000000000)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time) -> 24:boolean, IntervalDayTimeScalarEqualIntervalDayTimeColumn(val 1 02:03:04.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time) -> 25:boolean, IntervalDayTimeScalarLessEqualIntervalDayTimeColumn(val 1 02:03:04.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time) -> 26:boolean, IntervalDayTimeScalarLessEqualIntervalDayTimeColumn(val 1 02:03:04.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time) -> 27:boolean, IntervalDayTimeScalarLessIntervalDayTimeColumn(val 1 02:03:04.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time) -> 28:boolean, IntervalDayTimeScalarGreaterEqualIntervalDayTimeColumn(val 1 02:03:04.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time) -> 29:boolean, IntervalDayTimeScalarGreaterEqualIntervalDayTimeColumn(val 1 02:03:05.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time) -> 30:boolean, IntervalDayTimeScalarGreaterIntervalDayTimeColumn(val 1 02:03:05.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time) -> 31:boolean, IntervalDayTimeScalarNotEqualIntervalDayTimeColumn(val 1 02:03:04.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time) -> 32:boolean
                    Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Reduce Sink Vectorization:
                          className: VectorReduceSinkObjectHashOperator
                          native: true
                          nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                      Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: boolean), _col2 (type: boolean), _col3 (type: boolean), _col4 (type: boolean), _col5 (type: boolean), _col6 (type: boolean), _col7 (type: boolean), _col8 (type: boolean), _col9 (type: boolean), _col10 (type: boolean), _col11 (type: boolean), _col12 (type: boolean), _col13 (type: boolean), _col14 (type: boolean), _col15 (type: boolean), _col16 (type: boolean), _col17 (type: boolean), _col18 (type: boolean), _col19 (type: boolean), _col20 (type: boolean), _col21 (type: boolean), _col22 (type: boolean), _col23 (type: boolean), _col24 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: boolean), VALUE._col1 (type: boolean), VALUE._col2 (type: boolean), VALUE._col3 (type: boolean), VALUE._col4 (type: boolean), VALUE._col5 (type: boolean), VALUE._col6 (type: boolean), VALUE._col7 (type: boolean), VALUE._col8 (type: boolean), VALUE._col9 (type: boolean), VALUE._col10 (type: boolean), VALUE._col11 (type: boolean), VALUE._col12 (type: boolean), VALUE._col13 (type: boolean), VALUE._col14 (type: boolean), VALUE._col15 (type: boolean), VALUE._col16 (type: boolean), VALUE._col17 (type: boolean), VALUE._col18 (type: boolean), VALUE._col19 (type: boolean), VALUE._col20 (type: boolean), VALUE._col21 (type: boolean), VALUE._col22 (type: boolean), VALUE._col23 (type: boolean)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
                Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select
  str3,
  -- Should all be true
  interval_day_time(str3) = interval_day_time(str3),
  interval_day_time(str3) <= interval_day_time(str3),
  interval_day_time(str3) <= interval_day_time(str4),
  interval_day_time(str3) < interval_day_time(str4),
  interval_day_time(str3) >= interval_day_time(str3),
  interval_day_time(str4) >= interval_day_time(str3),
  interval_day_time(str4) > interval_day_time(str3),
  interval_day_time(str3) != interval_day_time(str4),

  interval_day_time(str3) = interval '1 2:3:4' day to second,
  interval_day_time(str3) <= interval '1 2:3:4' day to second,
  interval_day_time(str3) <= interval '1 2:3:5' day to second,
  interval_day_time(str3) < interval '1 2:3:5' day to second,
  interval_day_time(str3) >= interval '1 2:3:4' day to second,
  interval_day_time(str4) >= interval '1 2:3:4' day to second,
  interval_day_time(str4) > interval '1 2:3:4' day to second,
  interval_day_time(str3) != interval '1 2:3:5' day to second,

  interval '1 2:3:4' day to second = interval_day_time(str3),
  interval '1 2:3:4' day to second <= interval_day_time(str3),
  interval '1 2:3:4' day to second <= interval_day_time(str4),
  interval '1 2:3:4' day to second < interval_day_time(str4),
  interval '1 2:3:4' day to second >= interval_day_time(str3),
  interval '1 2:3:5' day to second >= interval_day_time(str3),
  interval '1 2:3:5' day to second > interval_day_time(str3),
  interval '1 2:3:4' day to second != interval_day_time(str4)
from vector_interval_2 order by str3
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
POSTHOOK: query: select
  str3,
  -- Should all be true
  interval_day_time(str3) = interval_day_time(str3),
  interval_day_time(str3) <= interval_day_time(str3),
  interval_day_time(str3) <= interval_day_time(str4),
  interval_day_time(str3) < interval_day_time(str4),
  interval_day_time(str3) >= interval_day_time(str3),
  interval_day_time(str4) >= interval_day_time(str3),
  interval_day_time(str4) > interval_day_time(str3),
  interval_day_time(str3) != interval_day_time(str4),

  interval_day_time(str3) = interval '1 2:3:4' day to second,
  interval_day_time(str3) <= interval '1 2:3:4' day to second,
  interval_day_time(str3) <= interval '1 2:3:5' day to second,
  interval_day_time(str3) < interval '1 2:3:5' day to second,
  interval_day_time(str3) >= interval '1 2:3:4' day to second,
  interval_day_time(str4) >= interval '1 2:3:4' day to second,
  interval_day_time(str4) > interval '1 2:3:4' day to second,
  interval_day_time(str3) != interval '1 2:3:5' day to second,

  interval '1 2:3:4' day to second = interval_day_time(str3),
  interval '1 2:3:4' day to second <= interval_day_time(str3),
  interval '1 2:3:4' day to second <= interval_day_time(str4),
  interval '1 2:3:4' day to second < interval_day_time(str4),
  interval '1 2:3:4' day to second >= interval_day_time(str3),
  interval '1 2:3:5' day to second >= interval_day_time(str3),
  interval '1 2:3:5' day to second > interval_day_time(str3),
  interval '1 2:3:4' day to second != interval_day_time(str4)
from vector_interval_2 order by str3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
1 2:3:4	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true	true
PREHOOK: query: explain vectorization expression
select
  str3,
  -- Should all be false
  interval_day_time(str3) != interval_day_time(str3),
  interval_day_time(str3) >= interval_day_time(str4),
  interval_day_time(str3) > interval_day_time(str4),
  interval_day_time(str4) <= interval_day_time(str3),
  interval_day_time(str4) < interval_day_time(str3),
  interval_day_time(str3) != interval_day_time(str3),

  interval_day_time(str3) != interval '1 2:3:4' day to second,
  interval_day_time(str3) >= interval '1 2:3:5' day to second,
  interval_day_time(str3) > interval '1 2:3:5' day to second,
  interval_day_time(str4) <= interval '1 2:3:4' day to second,
  interval_day_time(str4) < interval '1 2:3:4' day to second,
  interval_day_time(str3) != interval '1 2:3:4' day to second,

  interval '1 2:3:4' day to second != interval_day_time(str3),
  interval '1 2:3:4' day to second >= interval_day_time(str4),
  interval '1 2:3:4' day to second > interval_day_time(str4),
  interval '1 2:3:5' day to second <= interval_day_time(str3),
  interval '1 2:3:5' day to second < interval_day_time(str3),
  interval '1 2:3:4' day to second != interval_day_time(str3)
from vector_interval_2 order by str3
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression
select
  str3,
  -- Should all be false
  interval_day_time(str3) != interval_day_time(str3),
  interval_day_time(str3) >= interval_day_time(str4),
  interval_day_time(str3) > interval_day_time(str4),
  interval_day_time(str4) <= interval_day_time(str3),
  interval_day_time(str4) < interval_day_time(str3),
  interval_day_time(str3) != interval_day_time(str3),

  interval_day_time(str3) != interval '1 2:3:4' day to second,
  interval_day_time(str3) >= interval '1 2:3:5' day to second,
  interval_day_time(str3) > interval '1 2:3:5' day to second,
  interval_day_time(str4) <= interval '1 2:3:4' day to second,
  interval_day_time(str4) < interval '1 2:3:4' day to second,
  interval_day_time(str3) != interval '1 2:3:4' day to second,

  interval '1 2:3:4' day to second != interval_day_time(str3),
  interval '1 2:3:4' day to second >= interval_day_time(str4),
  interval '1 2:3:4' day to second > interval_day_time(str4),
  interval '1 2:3:5' day to second <= interval_day_time(str3),
  interval '1 2:3:5' day to second < interval_day_time(str3),
  interval '1 2:3:4' day to second != interval_day_time(str3)
from vector_interval_2 order by str3
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_interval_2
                  Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    expressions: str3 (type: string), (CAST( str3 AS INTERVAL DAY TO SECOND) <> CAST( str3 AS INTERVAL DAY TO SECOND)) (type: boolean), (CAST( str3 AS INTERVAL DAY TO SECOND) >= CAST( str4 AS INTERVAL DAY TO SECOND)) (type: boolean), (CAST( str3 AS INTERVAL DAY TO SECOND) > CAST( str4 AS INTERVAL DAY TO SECOND)) (type: boolean), (CAST( str4 AS INTERVAL DAY TO SECOND) <= CAST( str3 AS INTERVAL DAY TO SECOND)) (type: boolean), (CAST( str4 AS INTERVAL DAY TO SECOND) < CAST( str3 AS INTERVAL DAY TO SECOND)) (type: boolean), (CAST( str3 AS INTERVAL DAY TO SECOND) <> INTERVAL'1 02:03:04.000000000') (type: boolean), (CAST( str3 AS INTERVAL DAY TO SECOND) >= INTERVAL'1 02:03:05.000000000') (type: boolean), (CAST( str3 AS INTERVAL DAY TO SECOND) > INTERVAL'1 02:03:05.000000000') (type: boolean), (CAST( str4 AS INTERVAL DAY TO SECOND) <= INTERVAL'1 02:03:04.000000000') (type: boolean), (CAST( str4 AS INTERVAL DAY TO SECOND) < INTERVAL'1 02:03:04.000000000') (type: boolean), (INTERVAL'1 02:03:04.000000000' <> CAST( str3 AS INTERVAL DAY TO SECOND)) (type: boolean), (INTERVAL'1 02:03:04.000000000' >= CAST( str4 AS INTERVAL DAY TO SECOND)) (type: boolean), (INTERVAL'1 02:03:04.000000000' > CAST( str4 AS INTERVAL DAY TO SECOND)) (type: boolean), (INTERVAL'1 02:03:05.000000000' <= CAST( str3 AS INTERVAL DAY TO SECOND)) (type: boolean), (INTERVAL'1 02:03:05.000000000' < CAST( str3 AS INTERVAL DAY TO SECOND)) (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col7, _col8, _col9, _col10, _col11, _col13, _col14, _col15, _col16, _col17
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
                        selectExpressions: IntervalDayTimeColNotEqualIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 4:string) -> 8:interval_day_time) -> 9:boolean, IntervalDayTimeColGreaterEqualIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 5:string) -> 8:interval_day_time) -> 10:boolean, IntervalDayTimeColGreaterIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 5:string) -> 8:interval_day_time) -> 11:boolean, IntervalDayTimeColLessEqualIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 4:string) -> 8:interval_day_time) -> 12:boolean, IntervalDayTimeColLessIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 4:string) -> 8:interval_day_time) -> 13:boolean, IntervalDayTimeColNotEqualIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:04.000000000)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time) -> 14:boolean, IntervalDayTimeColGreaterEqualIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:05.000000000)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time) -> 15:boolean, IntervalDayTimeColGreaterIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:05.000000000)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time) -> 16:boolean, IntervalDayTimeColLessEqualIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:04.000000000)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time) -> 17:boolean, IntervalDayTimeColLessIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:04.000000000)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time) -> 18:boolean, IntervalDayTimeScalarNotEqualIntervalDayTimeColumn(val 1 02:03:04.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time) -> 19:boolean, IntervalDayTimeScalarGreaterEqualIntervalDayTimeColumn(val 1 02:03:04.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time) -> 20:boolean, IntervalDayTimeScalarGreaterIntervalDayTimeColumn(val 1 02:03:04.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time) -> 21:boolean, IntervalDayTimeScalarLessEqualIntervalDayTimeColumn(val 1 02:03:05.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time) -> 22:boolean, IntervalDayTimeScalarLessIntervalDayTimeColumn(val 1 02:03:05.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time) -> 23:boolean
                    Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Reduce Sink Vectorization:
                          className: VectorReduceSinkObjectHashOperator
                          native: true
                          nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                      Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: boolean), _col2 (type: boolean), _col3 (type: boolean), _col4 (type: boolean), _col5 (type: boolean), _col7 (type: boolean), _col8 (type: boolean), _col9 (type: boolean), _col10 (type: boolean), _col11 (type: boolean), _col13 (type: boolean), _col14 (type: boolean), _col15 (type: boolean), _col16 (type: boolean), _col17 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: boolean), VALUE._col1 (type: boolean), VALUE._col2 (type: boolean), VALUE._col3 (type: boolean), VALUE._col4 (type: boolean), VALUE._col0 (type: boolean), VALUE._col5 (type: boolean), VALUE._col6 (type: boolean), VALUE._col7 (type: boolean), VALUE._col8 (type: boolean), VALUE._col9 (type: boolean), VALUE._col5 (type: boolean), VALUE._col10 (type: boolean), VALUE._col11 (type: boolean), VALUE._col12 (type: boolean), VALUE._col13 (type: boolean), VALUE._col14 (type: boolean), VALUE._col10 (type: boolean)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 1, 6, 7, 8, 9, 10, 6, 11, 12, 13, 14, 15, 11]
                Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 2 Data size: 736 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select
  str3,
  -- Should all be false
  interval_day_time(str3) != interval_day_time(str3),
  interval_day_time(str3) >= interval_day_time(str4),
  interval_day_time(str3) > interval_day_time(str4),
  interval_day_time(str4) <= interval_day_time(str3),
  interval_day_time(str4) < interval_day_time(str3),
  interval_day_time(str3) != interval_day_time(str3),

  interval_day_time(str3) != interval '1 2:3:4' day to second,
  interval_day_time(str3) >= interval '1 2:3:5' day to second,
  interval_day_time(str3) > interval '1 2:3:5' day to second,
  interval_day_time(str4) <= interval '1 2:3:4' day to second,
  interval_day_time(str4) < interval '1 2:3:4' day to second,
  interval_day_time(str3) != interval '1 2:3:4' day to second,

  interval '1 2:3:4' day to second != interval_day_time(str3),
  interval '1 2:3:4' day to second >= interval_day_time(str4),
  interval '1 2:3:4' day to second > interval_day_time(str4),
  interval '1 2:3:5' day to second <= interval_day_time(str3),
  interval '1 2:3:5' day to second < interval_day_time(str3),
  interval '1 2:3:4' day to second != interval_day_time(str3)
from vector_interval_2 order by str3
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
POSTHOOK: query: select
  str3,
  -- Should all be false
  interval_day_time(str3) != interval_day_time(str3),
  interval_day_time(str3) >= interval_day_time(str4),
  interval_day_time(str3) > interval_day_time(str4),
  interval_day_time(str4) <= interval_day_time(str3),
  interval_day_time(str4) < interval_day_time(str3),
  interval_day_time(str3) != interval_day_time(str3),

  interval_day_time(str3) != interval '1 2:3:4' day to second,
  interval_day_time(str3) >= interval '1 2:3:5' day to second,
  interval_day_time(str3) > interval '1 2:3:5' day to second,
  interval_day_time(str4) <= interval '1 2:3:4' day to second,
  interval_day_time(str4) < interval '1 2:3:4' day to second,
  interval_day_time(str3) != interval '1 2:3:4' day to second,

  interval '1 2:3:4' day to second != interval_day_time(str3),
  interval '1 2:3:4' day to second >= interval_day_time(str4),
  interval '1 2:3:4' day to second > interval_day_time(str4),
  interval '1 2:3:5' day to second <= interval_day_time(str3),
  interval '1 2:3:5' day to second < interval_day_time(str3),
  interval '1 2:3:4' day to second != interval_day_time(str3)
from vector_interval_2 order by str3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
1 2:3:4	false	false	false	false	false	false	false	false	false	false	false	false	false	false	false	false	false	false
PREHOOK: query: explain vectorization expression
select ts from vector_interval_2
where
  interval_year_month(str1) = interval_year_month(str1)
  and interval_year_month(str1) != interval_year_month(str2)
  and interval_year_month(str1) <= interval_year_month(str2)
  and interval_year_month(str1) < interval_year_month(str2)
  and interval_year_month(str2) >= interval_year_month(str1)
  and interval_year_month(str2) > interval_year_month(str1)

  and interval_year_month(str1) = interval '1-2' year to month
  and interval_year_month(str1) != interval '1-3' year to month
  and interval_year_month(str1) <= interval '1-3' year to month
  and interval_year_month(str1) < interval '1-3' year to month
  and interval_year_month(str2) >= interval '1-2' year to month
  and interval_year_month(str2) > interval '1-2' year to month

  and interval '1-2' year to month = interval_year_month(str1)
  and interval '1-2' year to month != interval_year_month(str2)
  and interval '1-2' year to month <= interval_year_month(str2)
  and interval '1-2' year to month < interval_year_month(str2)
  and interval '1-3' year to month >= interval_year_month(str1)
  and interval '1-3' year to month > interval_year_month(str1)
order by ts
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression
select ts from vector_interval_2
where
  interval_year_month(str1) = interval_year_month(str1)
  and interval_year_month(str1) != interval_year_month(str2)
  and interval_year_month(str1) <= interval_year_month(str2)
  and interval_year_month(str1) < interval_year_month(str2)
  and interval_year_month(str2) >= interval_year_month(str1)
  and interval_year_month(str2) > interval_year_month(str1)

  and interval_year_month(str1) = interval '1-2' year to month
  and interval_year_month(str1) != interval '1-3' year to month
  and interval_year_month(str1) <= interval '1-3' year to month
  and interval_year_month(str1) < interval '1-3' year to month
  and interval_year_month(str2) >= interval '1-2' year to month
  and interval_year_month(str2) > interval '1-2' year to month

  and interval '1-2' year to month = interval_year_month(str1)
  and interval '1-2' year to month != interval_year_month(str2)
  and interval '1-2' year to month <= interval_year_month(str2)
  and interval '1-2' year to month < interval_year_month(str2)
  and interval '1-3' year to month >= interval_year_month(str1)
  and interval '1-3' year to month > interval_year_month(str1)
order by ts
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_interval_2
                  Statistics: Num rows: 2 Data size: 816 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprAndExpr(children: FilterLongColEqualLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 2:string) -> 8:interval_year_month), FilterLongColNotEqualLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 3:string) -> 8:interval_year_month), FilterLongColLessEqualLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 3:string) -> 8:interval_year_month), FilterLongColLessLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 3:string) -> 8:interval_year_month), FilterLongColGreaterEqualLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 2:string) -> 8:interval_year_month), FilterLongColGreaterLongColumn(col 7:interval_year_month, col 8:interval_year_month)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month, CastStringToIntervalYearMonth(col 2:string) -> 8:interval_year_month), FilterIntervalYearMonthColEqualIntervalYearMonthScalar(col 7:interval_year_month, val 14)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month), FilterIntervalYearMonthColNotEqualIntervalYearMonthScalar(col 7:interval_year_month, val 15)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month), FilterIntervalYearMonthColLessEqualIntervalYearMonthScalar(col 7:interval_year_month, val 15)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month), FilterIntervalYearMonthColLessIntervalYearMonthScalar(col 7:interval_year_month, val 15)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month), FilterIntervalYearMonthColGreaterEqualIntervalYearMonthScalar(col 7:interval_year_month, val 14)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month), FilterIntervalYearMonthColGreaterIntervalYearMonthScalar(col 7:interval_year_month, val 14)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month), FilterIntervalYearMonthScalarEqualIntervalYearMonthColumn(val 14, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month), FilterIntervalYearMonthScalarNotEqualIntervalYearMonthColumn(val 14, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month), FilterIntervalYearMonthScalarLessEqualIntervalYearMonthColumn(val 14, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month), FilterIntervalYearMonthScalarLessIntervalYearMonthColumn(val 14, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 3:string) -> 7:interval_year_month), FilterIntervalYearMonthScalarGreaterEqualIntervalYearMonthColumn(val 15, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month), FilterIntervalYearMonthScalarGreaterIntervalYearMonthColumn(val 15, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month))
                    predicate: ((CAST( str1 AS INTERVAL YEAR TO MONTH) < CAST( str2 AS INTERVAL YEAR TO MONTH)) and (CAST( str1 AS INTERVAL YEAR TO MONTH) < INTERVAL'1-3') and (CAST( str1 AS INTERVAL YEAR TO MONTH) <= CAST( str2 AS INTERVAL YEAR TO MONTH)) and (CAST( str1 AS INTERVAL YEAR TO MONTH) <= INTERVAL'1-3') and (CAST( str1 AS INTERVAL YEAR TO MONTH) <> CAST( str2 AS INTERVAL YEAR TO MONTH)) and (CAST( str1 AS INTERVAL YEAR TO MONTH) <> INTERVAL'1-3') and (CAST( str1 AS INTERVAL YEAR TO MONTH) = CAST( str1 AS INTERVAL YEAR TO MONTH)) and (CAST( str1 AS INTERVAL YEAR TO MONTH) = INTERVAL'1-2') and (CAST( str2 AS INTERVAL YEAR TO MONTH) > CAST( str1 AS INTERVAL YEAR TO MONTH)) and (CAST( str2 AS INTERVAL YEAR TO MONTH) > INTERVAL'1-2') and (CAST( str2 AS INTERVAL YEAR TO MONTH) >= CAST( str1 AS INTERVAL YEAR TO MONTH)) and (CAST( str2 AS INTERVAL YEAR TO MONTH) >= INTERVAL'1-2') and (INTERVAL'1-2' < CAST( str2 AS INTERVAL YEAR TO MONTH)) and (INTERVAL'1-2' <= CAST( str2 AS INTERVAL YEAR TO MONTH)) and (INTERVAL'1-2' <> CAST( str2 AS INTERVAL YEAR TO MONTH)) and (INTERVAL'1-2' = CAST( str1 AS INTERVAL YEAR TO MONTH)) and (INTERVAL'1-3' > CAST( str1 AS INTERVAL YEAR TO MONTH)) and (INTERVAL'1-3' >= CAST( str1 AS INTERVAL YEAR TO MONTH))) (type: boolean)
                    Statistics: Num rows: 1 Data size: 408 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: ts (type: timestamp)
                      outputColumnNames: _col0
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [0]
                      Statistics: Num rows: 1 Data size: 408 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: timestamp)
                        sort order: +
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkObjectHashOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 1 Data size: 408 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: timestamp)
                outputColumnNames: _col0
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0]
                Statistics: Num rows: 1 Data size: 408 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 408 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select ts from vector_interval_2
where
  interval_year_month(str1) = interval_year_month(str1)
  and interval_year_month(str1) != interval_year_month(str2)
  and interval_year_month(str1) <= interval_year_month(str2)
  and interval_year_month(str1) < interval_year_month(str2)
  and interval_year_month(str2) >= interval_year_month(str1)
  and interval_year_month(str2) > interval_year_month(str1)

  and interval_year_month(str1) = interval '1-2' year to month
  and interval_year_month(str1) != interval '1-3' year to month
  and interval_year_month(str1) <= interval '1-3' year to month
  and interval_year_month(str1) < interval '1-3' year to month
  and interval_year_month(str2) >= interval '1-2' year to month
  and interval_year_month(str2) > interval '1-2' year to month

  and interval '1-2' year to month = interval_year_month(str1)
  and interval '1-2' year to month != interval_year_month(str2)
  and interval '1-2' year to month <= interval_year_month(str2)
  and interval '1-2' year to month < interval_year_month(str2)
  and interval '1-3' year to month >= interval_year_month(str1)
  and interval '1-3' year to month > interval_year_month(str1)
order by ts
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
POSTHOOK: query: select ts from vector_interval_2
where
  interval_year_month(str1) = interval_year_month(str1)
  and interval_year_month(str1) != interval_year_month(str2)
  and interval_year_month(str1) <= interval_year_month(str2)
  and interval_year_month(str1) < interval_year_month(str2)
  and interval_year_month(str2) >= interval_year_month(str1)
  and interval_year_month(str2) > interval_year_month(str1)

  and interval_year_month(str1) = interval '1-2' year to month
  and interval_year_month(str1) != interval '1-3' year to month
  and interval_year_month(str1) <= interval '1-3' year to month
  and interval_year_month(str1) < interval '1-3' year to month
  and interval_year_month(str2) >= interval '1-2' year to month
  and interval_year_month(str2) > interval '1-2' year to month

  and interval '1-2' year to month = interval_year_month(str1)
  and interval '1-2' year to month != interval_year_month(str2)
  and interval '1-2' year to month <= interval_year_month(str2)
  and interval '1-2' year to month < interval_year_month(str2)
  and interval '1-3' year to month >= interval_year_month(str1)
  and interval '1-3' year to month > interval_year_month(str1)
order by ts
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
2001-01-01 01:02:03
PREHOOK: query: explain vectorization expression
select ts from vector_interval_2
where
  interval_day_time(str3) = interval_day_time(str3)
  and interval_day_time(str3) != interval_day_time(str4)
  and interval_day_time(str3) <= interval_day_time(str4)
  and interval_day_time(str3) < interval_day_time(str4)
  and interval_day_time(str4) >= interval_day_time(str3)
  and interval_day_time(str4) > interval_day_time(str3)

  and interval_day_time(str3) = interval '1 2:3:4' day to second
  and interval_day_time(str3) != interval '1 2:3:5' day to second
  and interval_day_time(str3) <= interval '1 2:3:5' day to second
  and interval_day_time(str3) < interval '1 2:3:5' day to second
  and interval_day_time(str4) >= interval '1 2:3:4' day to second
  and interval_day_time(str4) > interval '1 2:3:4' day to second

  and interval '1 2:3:4' day to second = interval_day_time(str3)
  and interval '1 2:3:4' day to second != interval_day_time(str4)
  and interval '1 2:3:4' day to second <= interval_day_time(str4)
  and interval '1 2:3:4' day to second < interval_day_time(str4)
  and interval '1 2:3:5' day to second >= interval_day_time(str3)
  and interval '1 2:3:5' day to second > interval_day_time(str3)
order by ts
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression
select ts from vector_interval_2
where
  interval_day_time(str3) = interval_day_time(str3)
  and interval_day_time(str3) != interval_day_time(str4)
  and interval_day_time(str3) <= interval_day_time(str4)
  and interval_day_time(str3) < interval_day_time(str4)
  and interval_day_time(str4) >= interval_day_time(str3)
  and interval_day_time(str4) > interval_day_time(str3)

  and interval_day_time(str3) = interval '1 2:3:4' day to second
  and interval_day_time(str3) != interval '1 2:3:5' day to second
  and interval_day_time(str3) <= interval '1 2:3:5' day to second
  and interval_day_time(str3) < interval '1 2:3:5' day to second
  and interval_day_time(str4) >= interval '1 2:3:4' day to second
  and interval_day_time(str4) > interval '1 2:3:4' day to second

  and interval '1 2:3:4' day to second = interval_day_time(str3)
  and interval '1 2:3:4' day to second != interval_day_time(str4)
  and interval '1 2:3:4' day to second <= interval_day_time(str4)
  and interval '1 2:3:4' day to second < interval_day_time(str4)
  and interval '1 2:3:5' day to second >= interval_day_time(str3)
  and interval '1 2:3:5' day to second > interval_day_time(str3)
order by ts
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_interval_2
                  Statistics: Num rows: 2 Data size: 816 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprAndExpr(children: FilterIntervalDayTimeColEqualIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 4:string) -> 8:interval_day_time), FilterIntervalDayTimeColNotEqualIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 5:string) -> 8:interval_day_time), FilterIntervalDayTimeColLessEqualIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 5:string) -> 8:interval_day_time), FilterIntervalDayTimeColLessIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 5:string) -> 8:interval_day_time), FilterIntervalDayTimeColGreaterEqualIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 4:string) -> 8:interval_day_time), FilterIntervalDayTimeColGreaterIntervalDayTimeColumn(col 7:interval_day_time, col 8:interval_day_time)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time, CastStringToIntervalDayTime(col 4:string) -> 8:interval_day_time), FilterIntervalDayTimeColEqualIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:04.000000000)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time), FilterIntervalDayTimeColNotEqualIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:05.000000000)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time), FilterIntervalDayTimeColLessEqualIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:05.000000000)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time), FilterIntervalDayTimeColLessIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:05.000000000)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time), FilterIntervalDayTimeColGreaterEqualIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:04.000000000)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time), FilterIntervalDayTimeColGreaterIntervalDayTimeScalar(col 7:interval_day_time, val 1 02:03:04.000000000)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time), FilterIntervalDayTimeScalarEqualIntervalDayTimeColumn(val 1 02:03:04.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time), FilterIntervalDayTimeScalarNotEqualIntervalDayTimeColumn(val 1 02:03:04.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time), FilterIntervalDayTimeScalarLessEqualIntervalDayTimeColumn(val 1 02:03:04.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time), FilterIntervalDayTimeScalarLessIntervalDayTimeColumn(val 1 02:03:04.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 5:string) -> 7:interval_day_time), FilterIntervalDayTimeScalarGreaterEqualIntervalDayTimeColumn(val 1 02:03:05.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time), FilterIntervalDayTimeScalarGreaterIntervalDayTimeColumn(val 1 02:03:05.000000000, col 7:interval_day_time)(children: CastStringToIntervalDayTime(col 4:string) -> 7:interval_day_time))
                    predicate: ((CAST( str3 AS INTERVAL DAY TO SECOND) < CAST( str4 AS INTERVAL DAY TO SECOND)) and (CAST( str3 AS INTERVAL DAY TO SECOND) < INTERVAL'1 02:03:05.000000000') and (CAST( str3 AS INTERVAL DAY TO SECOND) <= CAST( str4 AS INTERVAL DAY TO SECOND)) and (CAST( str3 AS INTERVAL DAY TO SECOND) <= INTERVAL'1 02:03:05.000000000') and (CAST( str3 AS INTERVAL DAY TO SECOND) <> CAST( str4 AS INTERVAL DAY TO SECOND)) and (CAST( str3 AS INTERVAL DAY TO SECOND) <> INTERVAL'1 02:03:05.000000000') and (CAST( str3 AS INTERVAL DAY TO SECOND) = CAST( str3 AS INTERVAL DAY TO SECOND)) and (CAST( str3 AS INTERVAL DAY TO SECOND) = INTERVAL'1 02:03:04.000000000') and (CAST( str4 AS INTERVAL DAY TO SECOND) > CAST( str3 AS INTERVAL DAY TO SECOND)) and (CAST( str4 AS INTERVAL DAY TO SECOND) > INTERVAL'1 02:03:04.000000000') and (CAST( str4 AS INTERVAL DAY TO SECOND) >= CAST( str3 AS INTERVAL DAY TO SECOND)) and (CAST( str4 AS INTERVAL DAY TO SECOND) >= INTERVAL'1 02:03:04.000000000') and (INTERVAL'1 02:03:04.000000000' < CAST( str4 AS INTERVAL DAY TO SECOND)) and (INTERVAL'1 02:03:04.000000000' <= CAST( str4 AS INTERVAL DAY TO SECOND)) and (INTERVAL'1 02:03:04.000000000' <> CAST( str4 AS INTERVAL DAY TO SECOND)) and (INTERVAL'1 02:03:04.000000000' = CAST( str3 AS INTERVAL DAY TO SECOND)) and (INTERVAL'1 02:03:05.000000000' > CAST( str3 AS INTERVAL DAY TO SECOND)) and (INTERVAL'1 02:03:05.000000000' >= CAST( str3 AS INTERVAL DAY TO SECOND))) (type: boolean)
                    Statistics: Num rows: 1 Data size: 408 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: ts (type: timestamp)
                      outputColumnNames: _col0
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [0]
                      Statistics: Num rows: 1 Data size: 408 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: timestamp)
                        sort order: +
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkObjectHashOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 1 Data size: 408 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: timestamp)
                outputColumnNames: _col0
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0]
                Statistics: Num rows: 1 Data size: 408 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 408 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select ts from vector_interval_2
where
  interval_day_time(str3) = interval_day_time(str3)
  and interval_day_time(str3) != interval_day_time(str4)
  and interval_day_time(str3) <= interval_day_time(str4)
  and interval_day_time(str3) < interval_day_time(str4)
  and interval_day_time(str4) >= interval_day_time(str3)
  and interval_day_time(str4) > interval_day_time(str3)

  and interval_day_time(str3) = interval '1 2:3:4' day to second
  and interval_day_time(str3) != interval '1 2:3:5' day to second
  and interval_day_time(str3) <= interval '1 2:3:5' day to second
  and interval_day_time(str3) < interval '1 2:3:5' day to second
  and interval_day_time(str4) >= interval '1 2:3:4' day to second
  and interval_day_time(str4) > interval '1 2:3:4' day to second

  and interval '1 2:3:4' day to second = interval_day_time(str3)
  and interval '1 2:3:4' day to second != interval_day_time(str4)
  and interval '1 2:3:4' day to second <= interval_day_time(str4)
  and interval '1 2:3:4' day to second < interval_day_time(str4)
  and interval '1 2:3:5' day to second >= interval_day_time(str3)
  and interval '1 2:3:5' day to second > interval_day_time(str3)
order by ts
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
POSTHOOK: query: select ts from vector_interval_2
where
  interval_day_time(str3) = interval_day_time(str3)
  and interval_day_time(str3) != interval_day_time(str4)
  and interval_day_time(str3) <= interval_day_time(str4)
  and interval_day_time(str3) < interval_day_time(str4)
  and interval_day_time(str4) >= interval_day_time(str3)
  and interval_day_time(str4) > interval_day_time(str3)

  and interval_day_time(str3) = interval '1 2:3:4' day to second
  and interval_day_time(str3) != interval '1 2:3:5' day to second
  and interval_day_time(str3) <= interval '1 2:3:5' day to second
  and interval_day_time(str3) < interval '1 2:3:5' day to second
  and interval_day_time(str4) >= interval '1 2:3:4' day to second
  and interval_day_time(str4) > interval '1 2:3:4' day to second

  and interval '1 2:3:4' day to second = interval_day_time(str3)
  and interval '1 2:3:4' day to second != interval_day_time(str4)
  and interval '1 2:3:4' day to second <= interval_day_time(str4)
  and interval '1 2:3:4' day to second < interval_day_time(str4)
  and interval '1 2:3:5' day to second >= interval_day_time(str3)
  and interval '1 2:3:5' day to second > interval_day_time(str3)
order by ts
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
2001-01-01 01:02:03
PREHOOK: query: explain vectorization expression
select ts from vector_interval_2
where
  date '2002-03-01' = dt + interval_year_month(str1)
  and date '2002-03-01' <= dt + interval_year_month(str1)
  and date '2002-03-01' >= dt + interval_year_month(str1)
  and dt + interval_year_month(str1) = date '2002-03-01'
  and dt + interval_year_month(str1) <= date '2002-03-01'
  and dt + interval_year_month(str1) >= date '2002-03-01'
  and dt != dt + interval_year_month(str1)

  and date '2002-03-01' = dt + interval '1-2' year to month
  and date '2002-03-01' <= dt + interval '1-2' year to month
  and date '2002-03-01' >= dt + interval '1-2' year to month
  and dt + interval '1-2' year to month = date '2002-03-01'
  and dt + interval '1-2' year to month <= date '2002-03-01'
  and dt + interval '1-2' year to month >= date '2002-03-01'
  and dt != dt + interval '1-2' year to month
order by ts
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression
select ts from vector_interval_2
where
  date '2002-03-01' = dt + interval_year_month(str1)
  and date '2002-03-01' <= dt + interval_year_month(str1)
  and date '2002-03-01' >= dt + interval_year_month(str1)
  and dt + interval_year_month(str1) = date '2002-03-01'
  and dt + interval_year_month(str1) <= date '2002-03-01'
  and dt + interval_year_month(str1) >= date '2002-03-01'
  and dt != dt + interval_year_month(str1)

  and date '2002-03-01' = dt + interval '1-2' year to month
  and date '2002-03-01' <= dt + interval '1-2' year to month
  and date '2002-03-01' >= dt + interval '1-2' year to month
  and dt + interval '1-2' year to month = date '2002-03-01'
  and dt + interval '1-2' year to month <= date '2002-03-01'
  and dt + interval '1-2' year to month >= date '2002-03-01'
  and dt != dt + interval '1-2' year to month
order by ts
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_interval_2
                  Statistics: Num rows: 2 Data size: 560 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprAndExpr(children: FilterDateScalarEqualDateColumn(val 11747, col 8:date)(children: DateColAddIntervalYearMonthColumn(col 1:date, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 8:date), FilterDateScalarLessEqualDateColumn(val 11747, col 8:date)(children: DateColAddIntervalYearMonthColumn(col 1:date, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 8:date), FilterDateScalarGreaterEqualDateColumn(val 11747, col 8:date)(children: DateColAddIntervalYearMonthColumn(col 1:date, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 8:date), FilterDateColEqualDateScalar(col 8:date, val 11747)(children: DateColAddIntervalYearMonthColumn(col 1:date, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 8:date), FilterDateColLessEqualDateScalar(col 8:date, val 11747)(children: DateColAddIntervalYearMonthColumn(col 1:date, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 8:date), FilterDateColGreaterEqualDateScalar(col 8:date, val 11747)(children: DateColAddIntervalYearMonthColumn(col 1:date, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 8:date), FilterLongColNotEqualLongColumn(col 1:date, col 8:date)(children: DateColAddIntervalYearMonthColumn(col 1:date, col 7:interval_year_month)(children: CastStringToIntervalYearMonth(col 2:string) -> 7:interval_year_month) -> 8:date), FilterDateScalarEqualDateColumn(val 11747, col 7:date)(children: DateColAddIntervalYearMonthScalar(col 1:date, val 1-2) -> 7:date), FilterDateScalarLessEqualDateColumn(val 11747, col 7:date)(children: DateColAddIntervalYearMonthScalar(col 1:date, val 1-2) -> 7:date), FilterDateScalarGreaterEqualDateColumn(val 11747, col 7:date)(children: DateColAddIntervalYearMonthScalar(col 1:date, val 1-2) -> 7:date), FilterDateColEqualDateScalar(col 7:date, val 11747)(children: DateColAddIntervalYearMonthScalar(col 1:date, val 1-2) -> 7:date), FilterDateColLessEqualDateScalar(col 7:date, val 11747)(children: DateColAddIntervalYearMonthScalar(col 1:date, val 1-2) -> 7:date), FilterDateColGreaterEqualDateScalar(col 7:date, val 11747)(children: DateColAddIntervalYearMonthScalar(col 1:date, val 1-2) -> 7:date), FilterLongColNotEqualLongColumn(col 1:date, col 7:date)(children: DateColAddIntervalYearMonthScalar(col 1:date, val 1-2) -> 7:date))
                    predicate: (((dt + CAST( str1 AS INTERVAL YEAR TO MONTH)) <= DATE'2002-03-01') and ((dt + CAST( str1 AS INTERVAL YEAR TO MONTH)) = DATE'2002-03-01') and ((dt + CAST( str1 AS INTERVAL YEAR TO MONTH)) >= DATE'2002-03-01') and ((dt + INTERVAL'1-2') <= DATE'2002-03-01') and ((dt + INTERVAL'1-2') = DATE'2002-03-01') and ((dt + INTERVAL'1-2') >= DATE'2002-03-01') and (DATE'2002-03-01' <= (dt + CAST( str1 AS INTERVAL YEAR TO MONTH))) and (DATE'2002-03-01' <= (dt + INTERVAL'1-2')) and (DATE'2002-03-01' = (dt + CAST( str1 AS INTERVAL YEAR TO MONTH))) and (DATE'2002-03-01' = (dt + INTERVAL'1-2')) and (DATE'2002-03-01' >= (dt + CAST( str1 AS INTERVAL YEAR TO MONTH))) and (DATE'2002-03-01' >= (dt + INTERVAL'1-2')) and (dt <> (dt + CAST( str1 AS INTERVAL YEAR TO MONTH))) and (dt <> (dt + INTERVAL'1-2'))) (type: boolean)
                    Statistics: Num rows: 1 Data size: 280 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: ts (type: timestamp)
                      outputColumnNames: _col0
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [0]
                      Statistics: Num rows: 1 Data size: 280 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: timestamp)
                        sort order: +
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkObjectHashOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 1 Data size: 280 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: timestamp)
                outputColumnNames: _col0
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0]
                Statistics: Num rows: 1 Data size: 280 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 280 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select ts from vector_interval_2
where
  date '2002-03-01' = dt + interval_year_month(str1)
  and date '2002-03-01' <= dt + interval_year_month(str1)
  and date '2002-03-01' >= dt + interval_year_month(str1)
  and dt + interval_year_month(str1) = date '2002-03-01'
  and dt + interval_year_month(str1) <= date '2002-03-01'
  and dt + interval_year_month(str1) >= date '2002-03-01'
  and dt != dt + interval_year_month(str1)

  and date '2002-03-01' = dt + interval '1-2' year to month
  and date '2002-03-01' <= dt + interval '1-2' year to month
  and date '2002-03-01' >= dt + interval '1-2' year to month
  and dt + interval '1-2' year to month = date '2002-03-01'
  and dt + interval '1-2' year to month <= date '2002-03-01'
  and dt + interval '1-2' year to month >= date '2002-03-01'
  and dt != dt + interval '1-2' year to month
order by ts
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
POSTHOOK: query: select ts from vector_interval_2
where
  date '2002-03-01' = dt + interval_year_month(str1)
  and date '2002-03-01' <= dt + interval_year_month(str1)
  and date '2002-03-01' >= dt + interval_year_month(str1)
  and dt + interval_year_month(str1) = date '2002-03-01'
  and dt + interval_year_month(str1) <= date '2002-03-01'
  and dt + interval_year_month(str1) >= date '2002-03-01'
  and dt != dt + interval_year_month(str1)

  and date '2002-03-01' = dt + interval '1-2' year to month
  and date '2002-03-01' <= dt + interval '1-2' year to month
  and date '2002-03-01' >= dt + interval '1-2' year to month
  and dt + interval '1-2' year to month = date '2002-03-01'
  and dt + interval '1-2' year to month <= date '2002-03-01'
  and dt + interval '1-2' year to month >= date '2002-03-01'
  and dt != dt + interval '1-2' year to month
order by ts
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
2001-01-01 01:02:03
PREHOOK: query: explain vectorization expression
select ts from vector_interval_2
where
  timestamp '2002-03-01 01:02:03' = ts + interval '1-2' year to month
  and timestamp '2002-03-01 01:02:03' <= ts + interval '1-2' year to month
  and timestamp '2002-03-01 01:02:03' >= ts + interval '1-2' year to month
  and timestamp '2002-04-01 01:02:03' != ts + interval '1-2' year to month
  and timestamp '2002-02-01 01:02:03' < ts + interval '1-2' year to month
  and timestamp '2002-04-01 01:02:03' > ts + interval '1-2' year to month

  and ts + interval '1-2' year to month = timestamp '2002-03-01 01:02:03'
  and ts + interval '1-2' year to month >= timestamp '2002-03-01 01:02:03'
  and ts + interval '1-2' year to month <= timestamp '2002-03-01 01:02:03'
  and ts + interval '1-2' year to month != timestamp '2002-04-01 01:02:03'
  and ts + interval '1-2' year to month > timestamp '2002-02-01 01:02:03'
  and ts + interval '1-2' year to month < timestamp '2002-04-01 01:02:03'

  and ts = ts + interval '0' year
  and ts != ts + interval '1' year
  and ts <= ts + interval '1' year
  and ts < ts + interval '1' year
  and ts >= ts - interval '1' year
  and ts > ts - interval '1' year
order by ts
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression
select ts from vector_interval_2
where
  timestamp '2002-03-01 01:02:03' = ts + interval '1-2' year to month
  and timestamp '2002-03-01 01:02:03' <= ts + interval '1-2' year to month
  and timestamp '2002-03-01 01:02:03' >= ts + interval '1-2' year to month
  and timestamp '2002-04-01 01:02:03' != ts + interval '1-2' year to month
  and timestamp '2002-02-01 01:02:03' < ts + interval '1-2' year to month
  and timestamp '2002-04-01 01:02:03' > ts + interval '1-2' year to month

  and ts + interval '1-2' year to month = timestamp '2002-03-01 01:02:03'
  and ts + interval '1-2' year to month >= timestamp '2002-03-01 01:02:03'
  and ts + interval '1-2' year to month <= timestamp '2002-03-01 01:02:03'
  and ts + interval '1-2' year to month != timestamp '2002-04-01 01:02:03'
  and ts + interval '1-2' year to month > timestamp '2002-02-01 01:02:03'
  and ts + interval '1-2' year to month < timestamp '2002-04-01 01:02:03'

  and ts = ts + interval '0' year
  and ts != ts + interval '1' year
  and ts <= ts + interval '1' year
  and ts < ts + interval '1' year
  and ts >= ts - interval '1' year
  and ts > ts - interval '1' year
order by ts
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_interval_2
                  Statistics: Num rows: 2 Data size: 80 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprAndExpr(children: FilterTimestampScalarEqualTimestampColumn(val 2002-03-01 01:02:03.0, col 7:timestamp)(children: TimestampColAddIntervalYearMonthScalar(col 0:timestamp, val 1-2) -> 7:timestamp), FilterTimestampScalarLessEqualTimestampColumn(val 2002-03-01 01:02:03.0, col 7:timestamp)(children: TimestampColAddIntervalYearMonthScalar(col 0:timestamp, val 1-2) -> 7:timestamp), FilterTimestampScalarGreaterEqualTimestampColumn(val 2002-03-01 01:02:03.0, col 7:timestamp)(children: TimestampColAddIntervalYearMonthScalar(col 0:timestamp, val 1-2) -> 7:timestamp), FilterTimestampScalarNotEqualTimestampColumn(val 2002-04-01 01:02:03.0, col 7:timestamp)(children: TimestampColAddIntervalYearMonthScalar(col 0:timestamp, val 1-2) -> 7:timestamp), FilterTimestampScalarLessTimestampColumn(val 2002-02-01 01:02:03.0, col 7:timestamp)(children: TimestampColAddIntervalYearMonthScalar(col 0:timestamp, val 1-2) -> 7:timestamp), FilterTimestampScalarGreaterTimestampColumn(val 2002-04-01 01:02:03.0, col 7:timestamp)(children: TimestampColAddIntervalYearMonthScalar(col 0:timestamp, val 1-2) -> 7:timestamp), FilterTimestampColEqualTimestampScalar(col 7:timestamp, val 2002-03-01 01:02:03.0)(children: TimestampColAddIntervalYearMonthScalar(col 0:timestamp, val 1-2) -> 7:timestamp), FilterTimestampColGreaterEqualTimestampScalar(col 7:timestamp, val 2002-03-01 01:02:03.0)(children: TimestampColAddIntervalYearMonthScalar(col 0:timestamp, val 1-2) -> 7:timestamp), FilterTimestampColLessEqualTimestampScalar(col 7:timestamp, val 2002-03-01 01:02:03.0)(children: TimestampColAddIntervalYearMonthScalar(col 0:timestamp, val 1-2) -> 7:timestamp), FilterTimestampColNotEqualTimestampScalar(col 7:timestamp, val 2002-04-01 01:02:03.0)(children: TimestampColAddIntervalYearMonthScalar(col 0:timestamp, val 1-2) -> 7:timestamp), FilterTimestampColGreaterTimestampScalar(col 7:timestamp, val 2002-02-01 01:02:03.0)(children: TimestampColAddIntervalYearMonthScalar(col 0:timestamp, val 1-2) -> 7:timestamp), FilterTimestampColLessTimestampScalar(col 7:timestamp, val 2002-04-01 01:02:03.0)(children: TimestampColAddIntervalYearMonthScalar(col 0:timestamp, val 1-2) -> 7:timestamp), FilterTimestampColEqualTimestampColumn(col 0:timestamp, col 7:timestamp)(children: TimestampColAddIntervalYearMonthScalar(col 0:timestamp, val 0-0) -> 7:timestamp), FilterTimestampColNotEqualTimestampColumn(col 0:timestamp, col 7:timestamp)(children: TimestampColAddIntervalYearMonthScalar(col 0:timestamp, val 1-0) -> 7:timestamp), FilterTimestampColLessEqualTimestampColumn(col 0:timestamp, col 7:timestamp)(children: TimestampColAddIntervalYearMonthScalar(col 0:timestamp, val 1-0) -> 7:timestamp), FilterTimestampColLessTimestampColumn(col 0:timestamp, col 7:timestamp)(children: TimestampColAddIntervalYearMonthScalar(col 0:timestamp, val 1-0) -> 7:timestamp), FilterTimestampColGreaterEqualTimestampColumn(col 0:timestamp, col 7:timestamp)(children: TimestampColSubtractIntervalYearMonthScalar(col 0:timestamp, val 1-0) -> 7:timestamp), FilterTimestampColGreaterTimestampColumn(col 0:timestamp, col 7:timestamp)(children: TimestampColSubtractIntervalYearMonthScalar(col 0:timestamp, val 1-0) -> 7:timestamp))
                    predicate: (((ts + INTERVAL'1-2') < TIMESTAMP'2002-04-01 01:02:03.0') and ((ts + INTERVAL'1-2') <= TIMESTAMP'2002-03-01 01:02:03.0') and ((ts + INTERVAL'1-2') <> TIMESTAMP'2002-04-01 01:02:03.0') and ((ts + INTERVAL'1-2') = TIMESTAMP'2002-03-01 01:02:03.0') and ((ts + INTERVAL'1-2') > TIMESTAMP'2002-02-01 01:02:03.0') and ((ts + INTERVAL'1-2') >= TIMESTAMP'2002-03-01 01:02:03.0') and (TIMESTAMP'2002-02-01 01:02:03.0' < (ts + INTERVAL'1-2')) and (TIMESTAMP'2002-03-01 01:02:03.0' <= (ts + INTERVAL'1-2')) and (TIMESTAMP'2002-03-01 01:02:03.0' = (ts + INTERVAL'1-2')) and (TIMESTAMP'2002-03-01 01:02:03.0' >= (ts + INTERVAL'1-2')) and (TIMESTAMP'2002-04-01 01:02:03.0' <> (ts + INTERVAL'1-2')) and (TIMESTAMP'2002-04-01 01:02:03.0' > (ts + INTERVAL'1-2')) and (ts < (ts + INTERVAL'1-0')) and (ts <= (ts + INTERVAL'1-0')) and (ts <> (ts + INTERVAL'1-0')) and (ts = (ts + INTERVAL'0-0')) and (ts > (ts - INTERVAL'1-0')) and (ts >= (ts - INTERVAL'1-0'))) (type: boolean)
                    Statistics: Num rows: 1 Data size: 40 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: ts (type: timestamp)
                      outputColumnNames: _col0
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [0]
                      Statistics: Num rows: 1 Data size: 40 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: timestamp)
                        sort order: +
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkObjectHashOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 1 Data size: 40 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: timestamp)
                outputColumnNames: _col0
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0]
                Statistics: Num rows: 1 Data size: 40 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 40 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select ts from vector_interval_2
where
  timestamp '2002-03-01 01:02:03' = ts + interval '1-2' year to month
  and timestamp '2002-03-01 01:02:03' <= ts + interval '1-2' year to month
  and timestamp '2002-03-01 01:02:03' >= ts + interval '1-2' year to month
  and timestamp '2002-04-01 01:02:03' != ts + interval '1-2' year to month
  and timestamp '2002-02-01 01:02:03' < ts + interval '1-2' year to month
  and timestamp '2002-04-01 01:02:03' > ts + interval '1-2' year to month

  and ts + interval '1-2' year to month = timestamp '2002-03-01 01:02:03'
  and ts + interval '1-2' year to month >= timestamp '2002-03-01 01:02:03'
  and ts + interval '1-2' year to month <= timestamp '2002-03-01 01:02:03'
  and ts + interval '1-2' year to month != timestamp '2002-04-01 01:02:03'
  and ts + interval '1-2' year to month > timestamp '2002-02-01 01:02:03'
  and ts + interval '1-2' year to month < timestamp '2002-04-01 01:02:03'

  and ts = ts + interval '0' year
  and ts != ts + interval '1' year
  and ts <= ts + interval '1' year
  and ts < ts + interval '1' year
  and ts >= ts - interval '1' year
  and ts > ts - interval '1' year
order by ts
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
POSTHOOK: query: select ts from vector_interval_2
where
  timestamp '2002-03-01 01:02:03' = ts + interval '1-2' year to month
  and timestamp '2002-03-01 01:02:03' <= ts + interval '1-2' year to month
  and timestamp '2002-03-01 01:02:03' >= ts + interval '1-2' year to month
  and timestamp '2002-04-01 01:02:03' != ts + interval '1-2' year to month
  and timestamp '2002-02-01 01:02:03' < ts + interval '1-2' year to month
  and timestamp '2002-04-01 01:02:03' > ts + interval '1-2' year to month

  and ts + interval '1-2' year to month = timestamp '2002-03-01 01:02:03'
  and ts + interval '1-2' year to month >= timestamp '2002-03-01 01:02:03'
  and ts + interval '1-2' year to month <= timestamp '2002-03-01 01:02:03'
  and ts + interval '1-2' year to month != timestamp '2002-04-01 01:02:03'
  and ts + interval '1-2' year to month > timestamp '2002-02-01 01:02:03'
  and ts + interval '1-2' year to month < timestamp '2002-04-01 01:02:03'

  and ts = ts + interval '0' year
  and ts != ts + interval '1' year
  and ts <= ts + interval '1' year
  and ts < ts + interval '1' year
  and ts >= ts - interval '1' year
  and ts > ts - interval '1' year
order by ts
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
2001-01-01 01:02:03
PREHOOK: query: explain vectorization expression
select ts from vector_interval_2
where
  timestamp '2001-01-01 01:02:03' = dt + interval '0 1:2:3' day to second
  and timestamp '2001-01-01 01:02:03' != dt + interval '0 1:2:4' day to second
  and timestamp '2001-01-01 01:02:03' <= dt + interval '0 1:2:3' day to second
  and timestamp '2001-01-01 01:02:03' < dt + interval '0 1:2:4' day to second
  and timestamp '2001-01-01 01:02:03' >= dt - interval '0 1:2:3' day to second
  and timestamp '2001-01-01 01:02:03' > dt - interval '0 1:2:4' day to second

  and dt + interval '0 1:2:3' day to second = timestamp '2001-01-01 01:02:03'
  and dt + interval '0 1:2:4' day to second != timestamp '2001-01-01 01:02:03'
  and dt + interval '0 1:2:3' day to second >= timestamp '2001-01-01 01:02:03'
  and dt + interval '0 1:2:4' day to second > timestamp '2001-01-01 01:02:03'
  and dt - interval '0 1:2:3' day to second <= timestamp '2001-01-01 01:02:03'
  and dt - interval '0 1:2:4' day to second < timestamp '2001-01-01 01:02:03'

  and ts = dt + interval '0 1:2:3' day to second
  and ts != dt + interval '0 1:2:4' day to second
  and ts <= dt + interval '0 1:2:3' day to second
  and ts < dt + interval '0 1:2:4' day to second
  and ts >= dt - interval '0 1:2:3' day to second
  and ts > dt - interval '0 1:2:4' day to second
order by ts
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression
select ts from vector_interval_2
where
  timestamp '2001-01-01 01:02:03' = dt + interval '0 1:2:3' day to second
  and timestamp '2001-01-01 01:02:03' != dt + interval '0 1:2:4' day to second
  and timestamp '2001-01-01 01:02:03' <= dt + interval '0 1:2:3' day to second
  and timestamp '2001-01-01 01:02:03' < dt + interval '0 1:2:4' day to second
  and timestamp '2001-01-01 01:02:03' >= dt - interval '0 1:2:3' day to second
  and timestamp '2001-01-01 01:02:03' > dt - interval '0 1:2:4' day to second

  and dt + interval '0 1:2:3' day to second = timestamp '2001-01-01 01:02:03'
  and dt + interval '0 1:2:4' day to second != timestamp '2001-01-01 01:02:03'
  and dt + interval '0 1:2:3' day to second >= timestamp '2001-01-01 01:02:03'
  and dt + interval '0 1:2:4' day to second > timestamp '2001-01-01 01:02:03'
  and dt - interval '0 1:2:3' day to second <= timestamp '2001-01-01 01:02:03'
  and dt - interval '0 1:2:4' day to second < timestamp '2001-01-01 01:02:03'

  and ts = dt + interval '0 1:2:3' day to second
  and ts != dt + interval '0 1:2:4' day to second
  and ts <= dt + interval '0 1:2:3' day to second
  and ts < dt + interval '0 1:2:4' day to second
  and ts >= dt - interval '0 1:2:3' day to second
  and ts > dt - interval '0 1:2:4' day to second
order by ts
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_interval_2
                  Statistics: Num rows: 2 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprAndExpr(children: FilterTimestampScalarEqualTimestampColumn(val 2001-01-01 01:02:03.0, col 7:timestamp)(children: DateColAddIntervalDayTimeScalar(col 1:date, val 0 01:02:03.000000000) -> 7:timestamp), FilterTimestampScalarNotEqualTimestampColumn(val 2001-01-01 01:02:03.0, col 7:timestamp)(children: DateColAddIntervalDayTimeScalar(col 1:date, val 0 01:02:04.000000000) -> 7:timestamp), FilterTimestampScalarLessEqualTimestampColumn(val 2001-01-01 01:02:03.0, col 7:timestamp)(children: DateColAddIntervalDayTimeScalar(col 1:date, val 0 01:02:03.000000000) -> 7:timestamp), FilterTimestampScalarLessTimestampColumn(val 2001-01-01 01:02:03.0, col 7:timestamp)(children: DateColAddIntervalDayTimeScalar(col 1:date, val 0 01:02:04.000000000) -> 7:timestamp), FilterTimestampScalarGreaterEqualTimestampColumn(val 2001-01-01 01:02:03.0, col 7:timestamp)(children: DateColSubtractIntervalDayTimeScalar(col 1:date, val 0 01:02:03.000000000) -> 7:timestamp), FilterTimestampScalarGreaterTimestampColumn(val 2001-01-01 01:02:03.0, col 7:timestamp)(children: DateColSubtractIntervalDayTimeScalar(col 1:date, val 0 01:02:04.000000000) -> 7:timestamp), FilterTimestampColEqualTimestampScalar(col 7:timestamp, val 2001-01-01 01:02:03.0)(children: DateColAddIntervalDayTimeScalar(col 1:date, val 0 01:02:03.000000000) -> 7:timestamp), FilterTimestampColNotEqualTimestampScalar(col 7:timestamp, val 2001-01-01 01:02:03.0)(children: DateColAddIntervalDayTimeScalar(col 1:date, val 0 01:02:04.000000000) -> 7:timestamp), FilterTimestampColGreaterEqualTimestampScalar(col 7:timestamp, val 2001-01-01 01:02:03.0)(children: DateColAddIntervalDayTimeScalar(col 1:date, val 0 01:02:03.000000000) -> 7:timestamp), FilterTimestampColGreaterTimestampScalar(col 7:timestamp, val 2001-01-01 01:02:03.0)(children: DateColAddIntervalDayTimeScalar(col 1:date, val 0 01:02:04.000000000) -> 7:timestamp), FilterTimestampColLessEqualTimestampScalar(col 7:timestamp, val 2001-01-01 01:02:03.0)(children: DateColSubtractIntervalDayTimeScalar(col 1:date, val 0 01:02:03.000000000) -> 7:timestamp), FilterTimestampColLessTimestampScalar(col 7:timestamp, val 2001-01-01 01:02:03.0)(children: DateColSubtractIntervalDayTimeScalar(col 1:date, val 0 01:02:04.000000000) -> 7:timestamp), FilterTimestampColEqualTimestampColumn(col 0:timestamp, col 7:timestamp)(children: DateColAddIntervalDayTimeScalar(col 1:date, val 0 01:02:03.000000000) -> 7:timestamp), FilterTimestampColNotEqualTimestampColumn(col 0:timestamp, col 7:timestamp)(children: DateColAddIntervalDayTimeScalar(col 1:date, val 0 01:02:04.000000000) -> 7:timestamp), FilterTimestampColLessEqualTimestampColumn(col 0:timestamp, col 7:timestamp)(children: DateColAddIntervalDayTimeScalar(col 1:date, val 0 01:02:03.000000000) -> 7:timestamp), FilterTimestampColLessTimestampColumn(col 0:timestamp, col 7:timestamp)(children: DateColAddIntervalDayTimeScalar(col 1:date, val 0 01:02:04.000000000) -> 7:timestamp), FilterTimestampColGreaterEqualTimestampColumn(col 0:timestamp, col 7:timestamp)(children: DateColSubtractIntervalDayTimeScalar(col 1:date, val 0 01:02:03.000000000) -> 7:timestamp), FilterTimestampColGreaterTimestampColumn(col 0:timestamp, col 7:timestamp)(children: DateColSubtractIntervalDayTimeScalar(col 1:date, val 0 01:02:04.000000000) -> 7:timestamp))
                    predicate: (((dt + INTERVAL'0 01:02:03.000000000') = TIMESTAMP'2001-01-01 01:02:03.0') and ((dt + INTERVAL'0 01:02:03.000000000') >= TIMESTAMP'2001-01-01 01:02:03.0') and ((dt + INTERVAL'0 01:02:04.000000000') <> TIMESTAMP'2001-01-01 01:02:03.0') and ((dt + INTERVAL'0 01:02:04.000000000') > TIMESTAMP'2001-01-01 01:02:03.0') and ((dt - INTERVAL'0 01:02:03.000000000') <= TIMESTAMP'2001-01-01 01:02:03.0') and ((dt - INTERVAL'0 01:02:04.000000000') < TIMESTAMP'2001-01-01 01:02:03.0') and (TIMESTAMP'2001-01-01 01:02:03.0' < (dt + INTERVAL'0 01:02:04.000000000')) and (TIMESTAMP'2001-01-01 01:02:03.0' <= (dt + INTERVAL'0 01:02:03.000000000')) and (TIMESTAMP'2001-01-01 01:02:03.0' <> (dt + INTERVAL'0 01:02:04.000000000')) and (TIMESTAMP'2001-01-01 01:02:03.0' = (dt + INTERVAL'0 01:02:03.000000000')) and (TIMESTAMP'2001-01-01 01:02:03.0' > (dt - INTERVAL'0 01:02:04.000000000')) and (TIMESTAMP'2001-01-01 01:02:03.0' >= (dt - INTERVAL'0 01:02:03.000000000')) and (ts < (dt + INTERVAL'0 01:02:04.000000000')) and (ts <= (dt + INTERVAL'0 01:02:03.000000000')) and (ts <> (dt + INTERVAL'0 01:02:04.000000000')) and (ts = (dt + INTERVAL'0 01:02:03.000000000')) and (ts > (dt - INTERVAL'0 01:02:04.000000000')) and (ts >= (dt - INTERVAL'0 01:02:03.000000000'))) (type: boolean)
                    Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: ts (type: timestamp)
                      outputColumnNames: _col0
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [0]
                      Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: timestamp)
                        sort order: +
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkObjectHashOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: timestamp)
                outputColumnNames: _col0
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0]
                Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select ts from vector_interval_2
where
  timestamp '2001-01-01 01:02:03' = dt + interval '0 1:2:3' day to second
  and timestamp '2001-01-01 01:02:03' != dt + interval '0 1:2:4' day to second
  and timestamp '2001-01-01 01:02:03' <= dt + interval '0 1:2:3' day to second
  and timestamp '2001-01-01 01:02:03' < dt + interval '0 1:2:4' day to second
  and timestamp '2001-01-01 01:02:03' >= dt - interval '0 1:2:3' day to second
  and timestamp '2001-01-01 01:02:03' > dt - interval '0 1:2:4' day to second

  and dt + interval '0 1:2:3' day to second = timestamp '2001-01-01 01:02:03'
  and dt + interval '0 1:2:4' day to second != timestamp '2001-01-01 01:02:03'
  and dt + interval '0 1:2:3' day to second >= timestamp '2001-01-01 01:02:03'
  and dt + interval '0 1:2:4' day to second > timestamp '2001-01-01 01:02:03'
  and dt - interval '0 1:2:3' day to second <= timestamp '2001-01-01 01:02:03'
  and dt - interval '0 1:2:4' day to second < timestamp '2001-01-01 01:02:03'

  and ts = dt + interval '0 1:2:3' day to second
  and ts != dt + interval '0 1:2:4' day to second
  and ts <= dt + interval '0 1:2:3' day to second
  and ts < dt + interval '0 1:2:4' day to second
  and ts >= dt - interval '0 1:2:3' day to second
  and ts > dt - interval '0 1:2:4' day to second
order by ts
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
POSTHOOK: query: select ts from vector_interval_2
where
  timestamp '2001-01-01 01:02:03' = dt + interval '0 1:2:3' day to second
  and timestamp '2001-01-01 01:02:03' != dt + interval '0 1:2:4' day to second
  and timestamp '2001-01-01 01:02:03' <= dt + interval '0 1:2:3' day to second
  and timestamp '2001-01-01 01:02:03' < dt + interval '0 1:2:4' day to second
  and timestamp '2001-01-01 01:02:03' >= dt - interval '0 1:2:3' day to second
  and timestamp '2001-01-01 01:02:03' > dt - interval '0 1:2:4' day to second

  and dt + interval '0 1:2:3' day to second = timestamp '2001-01-01 01:02:03'
  and dt + interval '0 1:2:4' day to second != timestamp '2001-01-01 01:02:03'
  and dt + interval '0 1:2:3' day to second >= timestamp '2001-01-01 01:02:03'
  and dt + interval '0 1:2:4' day to second > timestamp '2001-01-01 01:02:03'
  and dt - interval '0 1:2:3' day to second <= timestamp '2001-01-01 01:02:03'
  and dt - interval '0 1:2:4' day to second < timestamp '2001-01-01 01:02:03'

  and ts = dt + interval '0 1:2:3' day to second
  and ts != dt + interval '0 1:2:4' day to second
  and ts <= dt + interval '0 1:2:3' day to second
  and ts < dt + interval '0 1:2:4' day to second
  and ts >= dt - interval '0 1:2:3' day to second
  and ts > dt - interval '0 1:2:4' day to second
order by ts
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
2001-01-01 01:02:03
PREHOOK: query: explain vectorization expression
select ts from vector_interval_2
where
  timestamp '2001-01-01 01:02:03' = ts + interval '0' day
  and timestamp '2001-01-01 01:02:03' != ts + interval '1' day
  and timestamp '2001-01-01 01:02:03' <= ts + interval '1' day
  and timestamp '2001-01-01 01:02:03' < ts + interval '1' day
  and timestamp '2001-01-01 01:02:03' >= ts - interval '1' day
  and timestamp '2001-01-01 01:02:03' > ts - interval '1' day

  and ts + interval '0' day = timestamp '2001-01-01 01:02:03'
  and ts + interval '1' day != timestamp '2001-01-01 01:02:03'
  and ts + interval '1' day >= timestamp '2001-01-01 01:02:03'
  and ts + interval '1' day > timestamp '2001-01-01 01:02:03'
  and ts - interval '1' day <= timestamp '2001-01-01 01:02:03'
  and ts - interval '1' day < timestamp '2001-01-01 01:02:03'

  and ts = ts + interval '0' day
  and ts != ts + interval '1' day
  and ts <= ts + interval '1' day
  and ts < ts + interval '1' day
  and ts >= ts - interval '1' day
  and ts > ts - interval '1' day
order by ts
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression
select ts from vector_interval_2
where
  timestamp '2001-01-01 01:02:03' = ts + interval '0' day
  and timestamp '2001-01-01 01:02:03' != ts + interval '1' day
  and timestamp '2001-01-01 01:02:03' <= ts + interval '1' day
  and timestamp '2001-01-01 01:02:03' < ts + interval '1' day
  and timestamp '2001-01-01 01:02:03' >= ts - interval '1' day
  and timestamp '2001-01-01 01:02:03' > ts - interval '1' day

  and ts + interval '0' day = timestamp '2001-01-01 01:02:03'
  and ts + interval '1' day != timestamp '2001-01-01 01:02:03'
  and ts + interval '1' day >= timestamp '2001-01-01 01:02:03'
  and ts + interval '1' day > timestamp '2001-01-01 01:02:03'
  and ts - interval '1' day <= timestamp '2001-01-01 01:02:03'
  and ts - interval '1' day < timestamp '2001-01-01 01:02:03'

  and ts = ts + interval '0' day
  and ts != ts + interval '1' day
  and ts <= ts + interval '1' day
  and ts < ts + interval '1' day
  and ts >= ts - interval '1' day
  and ts > ts - interval '1' day
order by ts
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: vector_interval_2
                  Statistics: Num rows: 2 Data size: 80 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprAndExpr(children: FilterTimestampScalarEqualTimestampColumn(val 2001-01-01 01:02:03.0, col 7:timestamp)(children: TimestampColAddIntervalDayTimeScalar(col 0:timestamp, val 0 00:00:00.000000000) -> 7:timestamp), FilterTimestampScalarNotEqualTimestampColumn(val 2001-01-01 01:02:03.0, col 7:timestamp)(children: TimestampColAddIntervalDayTimeScalar(col 0:timestamp, val 1 00:00:00.000000000) -> 7:timestamp), FilterTimestampScalarLessEqualTimestampColumn(val 2001-01-01 01:02:03.0, col 7:timestamp)(children: TimestampColAddIntervalDayTimeScalar(col 0:timestamp, val 1 00:00:00.000000000) -> 7:timestamp), FilterTimestampScalarLessTimestampColumn(val 2001-01-01 01:02:03.0, col 7:timestamp)(children: TimestampColAddIntervalDayTimeScalar(col 0:timestamp, val 1 00:00:00.000000000) -> 7:timestamp), FilterTimestampScalarGreaterEqualTimestampColumn(val 2001-01-01 01:02:03.0, col 7:timestamp)(children: TimestampColSubtractIntervalDayTimeScalar(col 0:timestamp, val 1 00:00:00.000000000) -> 7:timestamp), FilterTimestampScalarGreaterTimestampColumn(val 2001-01-01 01:02:03.0, col 7:timestamp)(children: TimestampColSubtractIntervalDayTimeScalar(col 0:timestamp, val 1 00:00:00.000000000) -> 7:timestamp), FilterTimestampColEqualTimestampScalar(col 7:timestamp, val 2001-01-01 01:02:03.0)(children: TimestampColAddIntervalDayTimeScalar(col 0:timestamp, val 0 00:00:00.000000000) -> 7:timestamp), FilterTimestampColNotEqualTimestampScalar(col 7:timestamp, val 2001-01-01 01:02:03.0)(children: TimestampColAddIntervalDayTimeScalar(col 0:timestamp, val 1 00:00:00.000000000) -> 7:timestamp), FilterTimestampColGreaterEqualTimestampScalar(col 7:timestamp, val 2001-01-01 01:02:03.0)(children: TimestampColAddIntervalDayTimeScalar(col 0:timestamp, val 1 00:00:00.000000000) -> 7:timestamp), FilterTimestampColGreaterTimestampScalar(col 7:timestamp, val 2001-01-01 01:02:03.0)(children: TimestampColAddIntervalDayTimeScalar(col 0:timestamp, val 1 00:00:00.000000000) -> 7:timestamp), FilterTimestampColLessEqualTimestampScalar(col 7:timestamp, val 2001-01-01 01:02:03.0)(children: TimestampColSubtractIntervalDayTimeScalar(col 0:timestamp, val 1 00:00:00.000000000) -> 7:timestamp), FilterTimestampColLessTimestampScalar(col 7:timestamp, val 2001-01-01 01:02:03.0)(children: TimestampColSubtractIntervalDayTimeScalar(col 0:timestamp, val 1 00:00:00.000000000) -> 7:timestamp), FilterTimestampColEqualTimestampColumn(col 0:timestamp, col 7:timestamp)(children: TimestampColAddIntervalDayTimeScalar(col 0:timestamp, val 0 00:00:00.000000000) -> 7:timestamp), FilterTimestampColNotEqualTimestampColumn(col 0:timestamp, col 7:timestamp)(children: TimestampColAddIntervalDayTimeScalar(col 0:timestamp, val 1 00:00:00.000000000) -> 7:timestamp), FilterTimestampColLessEqualTimestampColumn(col 0:timestamp, col 7:timestamp)(children: TimestampColAddIntervalDayTimeScalar(col 0:timestamp, val 1 00:00:00.000000000) -> 7:timestamp), FilterTimestampColLessTimestampColumn(col 0:timestamp, col 7:timestamp)(children: TimestampColAddIntervalDayTimeScalar(col 0:timestamp, val 1 00:00:00.000000000) -> 7:timestamp), FilterTimestampColGreaterEqualTimestampColumn(col 0:timestamp, col 7:timestamp)(children: TimestampColSubtractIntervalDayTimeScalar(col 0:timestamp, val 1 00:00:00.000000000) -> 7:timestamp), FilterTimestampColGreaterTimestampColumn(col 0:timestamp, col 7:timestamp)(children: TimestampColSubtractIntervalDayTimeScalar(col 0:timestamp, val 1 00:00:00.000000000) -> 7:timestamp))
                    predicate: (((ts + INTERVAL'0 00:00:00.000000000') = TIMESTAMP'2001-01-01 01:02:03.0') and ((ts + INTERVAL'1 00:00:00.000000000') <> TIMESTAMP'2001-01-01 01:02:03.0') and ((ts + INTERVAL'1 00:00:00.000000000') > TIMESTAMP'2001-01-01 01:02:03.0') and ((ts + INTERVAL'1 00:00:00.000000000') >= TIMESTAMP'2001-01-01 01:02:03.0') and ((ts - INTERVAL'1 00:00:00.000000000') < TIMESTAMP'2001-01-01 01:02:03.0') and ((ts - INTERVAL'1 00:00:00.000000000') <= TIMESTAMP'2001-01-01 01:02:03.0') and (TIMESTAMP'2001-01-01 01:02:03.0' < (ts + INTERVAL'1 00:00:00.000000000')) and (TIMESTAMP'2001-01-01 01:02:03.0' <= (ts + INTERVAL'1 00:00:00.000000000')) and (TIMESTAMP'2001-01-01 01:02:03.0' <> (ts + INTERVAL'1 00:00:00.000000000')) and (TIMESTAMP'2001-01-01 01:02:03.0' = (ts + INTERVAL'0 00:00:00.000000000')) and (TIMESTAMP'2001-01-01 01:02:03.0' > (ts - INTERVAL'1 00:00:00.000000000')) and (TIMESTAMP'2001-01-01 01:02:03.0' >= (ts - INTERVAL'1 00:00:00.000000000')) and (ts < (ts + INTERVAL'1 00:00:00.000000000')) and (ts <= (ts + INTERVAL'1 00:00:00.000000000')) and (ts <> (ts + INTERVAL'1 00:00:00.000000000')) and (ts = (ts + INTERVAL'0 00:00:00.000000000')) and (ts > (ts - INTERVAL'1 00:00:00.000000000')) and (ts >= (ts - INTERVAL'1 00:00:00.000000000'))) (type: boolean)
                    Statistics: Num rows: 1 Data size: 40 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: ts (type: timestamp)
                      outputColumnNames: _col0
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [0]
                      Statistics: Num rows: 1 Data size: 40 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: timestamp)
                        sort order: +
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkObjectHashOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 1 Data size: 40 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: timestamp)
                outputColumnNames: _col0
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0]
                Statistics: Num rows: 1 Data size: 40 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 40 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select ts from vector_interval_2
where
  timestamp '2001-01-01 01:02:03' = ts + interval '0' day
  and timestamp '2001-01-01 01:02:03' != ts + interval '1' day
  and timestamp '2001-01-01 01:02:03' <= ts + interval '1' day
  and timestamp '2001-01-01 01:02:03' < ts + interval '1' day
  and timestamp '2001-01-01 01:02:03' >= ts - interval '1' day
  and timestamp '2001-01-01 01:02:03' > ts - interval '1' day

  and ts + interval '0' day = timestamp '2001-01-01 01:02:03'
  and ts + interval '1' day != timestamp '2001-01-01 01:02:03'
  and ts + interval '1' day >= timestamp '2001-01-01 01:02:03'
  and ts + interval '1' day > timestamp '2001-01-01 01:02:03'
  and ts - interval '1' day <= timestamp '2001-01-01 01:02:03'
  and ts - interval '1' day < timestamp '2001-01-01 01:02:03'

  and ts = ts + interval '0' day
  and ts != ts + interval '1' day
  and ts <= ts + interval '1' day
  and ts < ts + interval '1' day
  and ts >= ts - interval '1' day
  and ts > ts - interval '1' day
order by ts
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
POSTHOOK: query: select ts from vector_interval_2
where
  timestamp '2001-01-01 01:02:03' = ts + interval '0' day
  and timestamp '2001-01-01 01:02:03' != ts + interval '1' day
  and timestamp '2001-01-01 01:02:03' <= ts + interval '1' day
  and timestamp '2001-01-01 01:02:03' < ts + interval '1' day
  and timestamp '2001-01-01 01:02:03' >= ts - interval '1' day
  and timestamp '2001-01-01 01:02:03' > ts - interval '1' day

  and ts + interval '0' day = timestamp '2001-01-01 01:02:03'
  and ts + interval '1' day != timestamp '2001-01-01 01:02:03'
  and ts + interval '1' day >= timestamp '2001-01-01 01:02:03'
  and ts + interval '1' day > timestamp '2001-01-01 01:02:03'
  and ts - interval '1' day <= timestamp '2001-01-01 01:02:03'
  and ts - interval '1' day < timestamp '2001-01-01 01:02:03'

  and ts = ts + interval '0' day
  and ts != ts + interval '1' day
  and ts <= ts + interval '1' day
  and ts < ts + interval '1' day
  and ts >= ts - interval '1' day
  and ts > ts - interval '1' day
order by ts
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_interval_2
#### A masked pattern was here ####
2001-01-01 01:02:03
PREHOOK: query: drop table vector_interval_2
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@vector_interval_2
PREHOOK: Output: default@vector_interval_2
POSTHOOK: query: drop table vector_interval_2
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@vector_interval_2
POSTHOOK: Output: default@vector_interval_2
