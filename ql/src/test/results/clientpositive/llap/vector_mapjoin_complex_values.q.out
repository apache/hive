PREHOOK: query: create table census(
ssn int,
name string,
city string,
email string) 
row format delimited 
fields terminated by ','
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@census
POSTHOOK: query: create table census(
ssn int,
name string,
city string,
email string) 
row format delimited 
fields terminated by ','
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@census
PREHOOK: query: insert into census values(100,"raj","san jose","email")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@census
POSTHOOK: query: insert into census values(100,"raj","san jose","email")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@census
POSTHOOK: Lineage: census.city SCRIPT []
POSTHOOK: Lineage: census.email SCRIPT []
POSTHOOK: Lineage: census.name SCRIPT []
POSTHOOK: Lineage: census.ssn SCRIPT []
col1	col2	col3	col4
PREHOOK: query: create table census_clus(
ssn int,
name string,
city string,
email string) 
clustered by (ssn) into 4 buckets  stored as orc TBLPROPERTIES ('transactional'='true')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@census_clus
POSTHOOK: query: create table census_clus(
ssn int,
name string,
city string,
email string) 
clustered by (ssn) into 4 buckets  stored as orc TBLPROPERTIES ('transactional'='true')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@census_clus
PREHOOK: query: insert into  table census_clus select *  from census
PREHOOK: type: QUERY
PREHOOK: Input: default@census
PREHOOK: Output: default@census_clus
POSTHOOK: query: insert into  table census_clus select *  from census
POSTHOOK: type: QUERY
POSTHOOK: Input: default@census
POSTHOOK: Output: default@census_clus
POSTHOOK: Lineage: census_clus.city SIMPLE [(census)census.FieldSchema(name:city, type:string, comment:null), ]
POSTHOOK: Lineage: census_clus.email SIMPLE [(census)census.FieldSchema(name:email, type:string, comment:null), ]
POSTHOOK: Lineage: census_clus.name SIMPLE [(census)census.FieldSchema(name:name, type:string, comment:null), ]
POSTHOOK: Lineage: census_clus.ssn SIMPLE [(census)census.FieldSchema(name:ssn, type:int, comment:null), ]
census.ssn	census.name	census.city	census.email
Warning: Map Join MAPJOIN[34][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
UPDATE census_clus SET name = 'updated name' where ssn=100 and   EXISTS (select distinct ssn from census where ssn=census_clus.ssn)
PREHOOK: type: QUERY
PREHOOK: Input: default@census
PREHOOK: Input: default@census_clus
PREHOOK: Output: default@census_clus
PREHOOK: Output: default@census_clus
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
UPDATE census_clus SET name = 'updated name' where ssn=100 and   EXISTS (select distinct ssn from census where ssn=census_clus.ssn)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@census
POSTHOOK: Input: default@census_clus
POSTHOOK: Output: default@census_clus
POSTHOOK: Output: default@census_clus
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-2 is a root stage
  Stage-3 depends on stages: Stage-2
  Stage-0 depends on stages: Stage-3
  Stage-4 depends on stages: Stage-0
  Stage-1 depends on stages: Stage-3
  Stage-5 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-2
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Reducer 6 (BROADCAST_EDGE)
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Map 1 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
        Reducer 6 <- Map 5 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: census_clus
                  filterExpr: (ssn = 100) (type: boolean)
                  Statistics: Num rows: 1 Data size: 185 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:ssn:int, 1:name:string, 2:city:string, 3:email:string, 4:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>, 5:ROW__IS__DELETED:boolean]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterLongColEqualLongScalar(col 0:int, val 100)
                    predicate: (ssn = 100) (type: boolean)
                    Statistics: Num rows: 1 Data size: 185 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: city (type: string), email (type: string), ROW__ID (type: struct<writeid:bigint,bucketid:int,rowid:bigint>)
                      outputColumnNames: _col1, _col2, _col3
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [2, 3, 4]
                      Statistics: Num rows: 1 Data size: 257 Basic stats: COMPLETE Column stats: COMPLETE
                      Map Join Operator
                        condition map:
                             Left Semi Join 0 to 1
                        keys:
                          0 
                          1 
                        Map Join Vectorization:
                            bigTableValueExpressions: col 2:string, col 3:string, col 4:struct<writeid:bigint,bucketid:int,rowid:bigint>
                            className: VectorMapJoinOperator
                            native: false
                            nativeConditionsMet: hive.mapjoin.optimized.hashtable IS true, hive.vectorized.execution.mapjoin.native.enabled IS true, hive.execution.engine tez IN [tez] IS true, One MapJoin Condition IS true, No nullsafe IS true, Small table vectorizes IS true, Optimized Table and Supports Key Types IS true
                            nativeConditionsNotMet: Supports Value Types [STRUCT] IS false
                        outputColumnNames: _col1, _col2, _col3
                        input vertices:
                          1 Reducer 6
                        Statistics: Num rows: 1 Data size: 257 Basic stats: COMPLETE Column stats: COMPLETE
                        Select Operator
                          expressions: _col3 (type: struct<writeid:bigint,bucketid:int,rowid:bigint>), _col1 (type: string), _col2 (type: string)
                          outputColumnNames: _col0, _col3, _col4
                          Select Vectorization:
                              className: VectorSelectOperator
                              native: true
                              projectedOutputColumnNums: [2, 0, 1]
                          Statistics: Num rows: 1 Data size: 257 Basic stats: COMPLETE Column stats: COMPLETE
                          Select Operator
                            expressions: _col0 (type: struct<writeid:bigint,bucketid:int,rowid:bigint>)
                            outputColumnNames: _col0
                            Select Vectorization:
                                className: VectorSelectOperator
                                native: true
                                projectedOutputColumnNums: [2]
                            Statistics: Num rows: 1 Data size: 76 Basic stats: COMPLETE Column stats: COMPLETE
                            Reduce Output Operator
                              key expressions: _col0 (type: struct<writeid:bigint,bucketid:int,rowid:bigint>)
                              null sort order: z
                              sort order: +
                              Map-reduce partition columns: UDFToInteger(_col0) (type: int)
                              Reduce Sink Vectorization:
                                  className: VectorReduceSinkObjectHashOperator
                                  keyColumns: 2:struct<writeid:bigint,bucketid:int,rowid:bigint>
                                  native: true
                                  nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                                  partitionColumns: 5:int
                              Statistics: Num rows: 1 Data size: 76 Basic stats: COMPLETE Column stats: COMPLETE
                          Select Operator
                            expressions: 100 (type: int), 'updated name' (type: string), _col3 (type: string), _col4 (type: string)
                            outputColumnNames: _col0, _col1, _col2, _col3
                            Select Vectorization:
                                className: VectorSelectOperator
                                native: true
                                projectedOutputColumnNums: [3, 4, 0, 1]
                                selectExpressions: ConstantVectorExpression(val 100) -> 3:int, ConstantVectorExpression(val updated name) -> 4:string
                            Statistics: Num rows: 1 Data size: 281 Basic stats: COMPLETE Column stats: COMPLETE
                            Reduce Output Operator
                              key expressions: _col0 (type: int)
                              null sort order: a
                              sort order: +
                              Map-reduce partition columns: _col0 (type: int)
                              Reduce Sink Vectorization:
                                  className: VectorReduceSinkObjectHashOperator
                                  keyColumns: 3:int
                                  native: true
                                  nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                                  partitionColumns: 3:int
                                  valueColumns: 4:string, 0:string, 1:string
                              Statistics: Num rows: 1 Data size: 281 Basic stats: COMPLETE Column stats: COMPLETE
                              value expressions: _col1 (type: string), _col2 (type: string), _col3 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: may be used (ACID table)
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 4
                    includeColumns: [0, 2, 3]
                    dataColumns: ssn:int, name:string, city:string, email:string
                    neededVirtualColumns: [ROWID]
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: census
                  filterExpr: (ssn = 100) (type: boolean)
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:ssn:int, 1:name:string, 2:city:string, 3:email:string, 4:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>, 5:ROW__IS__DELETED:boolean]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterLongColEqualLongScalar(col 0:int, val 100)
                    predicate: (ssn = 100) (type: boolean)
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: []
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        Group By Vectorization:
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            keyExpressions: ConstantVectorExpression(val 1) -> 6:boolean
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: []
                        keys: true (type: boolean)
                        minReductionHashAggr: 0.4
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: boolean)
                          null sort order: z
                          sort order: +
                          Map-reduce partition columns: _col0 (type: boolean)
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkLongOperator
                              keyColumns: 0:boolean
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vector.serde.deserialize IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.mapred.TextInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 4
                    includeColumns: [0]
                    dataColumns: ssn:int, name:string, city:string, email:string
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez] IS true
                reduceColumnNullOrder: z
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 1
                    dataColumns: KEY.reducesinkkey0:struct<writeid:bigint,bucketid:int,rowid:bigint>
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: struct<writeid:bigint,bucketid:int,rowid:bigint>)
                outputColumnNames: _col0
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0]
                Statistics: Num rows: 1 Data size: 76 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 76 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                      output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
                      serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
                      name: default.census_clus
                  Write Type: DELETE
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez] IS true
                reduceColumnNullOrder: a
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 4
                    dataColumns: KEY.reducesinkkey0:int, VALUE._col0:string, VALUE._col1:string, VALUE._col2:string
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint]
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: string), VALUE._col1 (type: string), VALUE._col2 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3]
                Statistics: Num rows: 1 Data size: 281 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 281 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                      output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
                      serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
                      name: default.census_clus
                  Write Type: INSERT
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: string), _col2 (type: string), _col3 (type: string)
                  outputColumnNames: ssn, name, city, email
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [0, 1, 2, 3]
                  Statistics: Num rows: 1 Data size: 281 Basic stats: COMPLETE Column stats: COMPLETE
                  Group By Operator
                    aggregations: min(ssn), max(ssn), count(1), count(ssn), compute_bit_vector_hll(ssn), max(length(name)), avg(COALESCE(length(name),0)), count(name), compute_bit_vector_hll(name), max(length(city)), avg(COALESCE(length(city),0)), count(city), compute_bit_vector_hll(city), max(length(email)), avg(COALESCE(length(email),0)), count(email), compute_bit_vector_hll(email)
                    Group By Vectorization:
                        aggregators: VectorUDAFMinLong(col 0:int) -> int, VectorUDAFMaxLong(col 0:int) -> int, VectorUDAFCount(ConstantVectorExpression(val 1) -> 4:int) -> bigint, VectorUDAFCount(col 0:int) -> bigint, VectorUDAFComputeBitVectorLong(col 0:int) -> binary, VectorUDAFMaxLong(StringLength(col 1:string) -> 5:int) -> int, VectorUDAFAvgLong(VectorCoalesce(columns [6, 7])(children: StringLength(col 1:string) -> 6:int, ConstantVectorExpression(val 0) -> 7:int) -> 8:int) -> struct<count:bigint,sum:double,input:int>, VectorUDAFCount(col 1:string) -> bigint, VectorUDAFComputeBitVectorString(col 1:string) -> binary, VectorUDAFMaxLong(StringLength(col 2:string) -> 9:int) -> int, VectorUDAFAvgLong(VectorCoalesce(columns [10, 11])(children: StringLength(col 2:string) -> 10:int, ConstantVectorExpression(val 0) -> 11:int) -> 12:int) -> struct<count:bigint,sum:double,input:int>, VectorUDAFCount(col 2:string) -> bigint, VectorUDAFComputeBitVectorString(col 2:string) -> binary, VectorUDAFMaxLong(StringLength(col 3:string) -> 13:int) -> int, VectorUDAFAvgLong(VectorCoalesce(columns [14, 15])(children: StringLength(col 3:string) -> 14:int, ConstantVectorExpression(val 0) -> 15:int) -> 16:int) -> struct<count:bigint,sum:double,input:int>, VectorUDAFCount(col 3:string) -> bigint, VectorUDAFComputeBitVectorString(col 3:string) -> binary
                        className: VectorGroupByOperator
                        groupByMode: HASH
                        native: false
                        vectorProcessingMode: HASH
                        projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
                    minReductionHashAggr: 0.4
                    mode: hash
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16
                    Statistics: Num rows: 1 Data size: 864 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Reduce Sink Vectorization:
                          className: VectorReduceSinkEmptyKeyOperator
                          native: true
                          nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          valueColumns: 0:int, 1:int, 2:bigint, 3:bigint, 4:binary, 5:int, 6:struct<count:bigint,sum:double,input:int>, 7:bigint, 8:binary, 9:int, 10:struct<count:bigint,sum:double,input:int>, 11:bigint, 12:binary, 13:int, 14:struct<count:bigint,sum:double,input:int>, 15:bigint, 16:binary
                      Statistics: Num rows: 1 Data size: 864 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: binary), _col5 (type: int), _col6 (type: struct<count:bigint,sum:double,input:int>), _col7 (type: bigint), _col8 (type: binary), _col9 (type: int), _col10 (type: struct<count:bigint,sum:double,input:int>), _col11 (type: bigint), _col12 (type: binary), _col13 (type: int), _col14 (type: struct<count:bigint,sum:double,input:int>), _col15 (type: bigint), _col16 (type: binary)
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez] IS true
                reduceColumnNullOrder: 
                reduceColumnSortOrder: 
                allNative: false
                usesVectorUDFAdaptor: true
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 17
                    dataColumns: VALUE._col0:int, VALUE._col1:int, VALUE._col2:bigint, VALUE._col3:bigint, VALUE._col4:binary, VALUE._col5:int, VALUE._col6:struct<count:bigint,sum:double,input:int>, VALUE._col7:bigint, VALUE._col8:binary, VALUE._col9:int, VALUE._col10:struct<count:bigint,sum:double,input:int>, VALUE._col11:bigint, VALUE._col12:binary, VALUE._col13:int, VALUE._col14:struct<count:bigint,sum:double,input:int>, VALUE._col15:bigint, VALUE._col16:binary
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
            Reduce Operator Tree:
              Group By Operator
                aggregations: min(VALUE._col0), max(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector_hll(VALUE._col4), max(VALUE._col5), avg(VALUE._col6), count(VALUE._col7), compute_bit_vector_hll(VALUE._col8), max(VALUE._col9), avg(VALUE._col10), count(VALUE._col11), compute_bit_vector_hll(VALUE._col12), max(VALUE._col13), avg(VALUE._col14), count(VALUE._col15), compute_bit_vector_hll(VALUE._col16)
                Group By Vectorization:
                    aggregators: VectorUDAFMinLong(col 0:int) -> int, VectorUDAFMaxLong(col 1:int) -> int, VectorUDAFCountMerge(col 2:bigint) -> bigint, VectorUDAFCountMerge(col 3:bigint) -> bigint, VectorUDAFComputeBitVectorFinal(col 4:binary) -> binary, VectorUDAFMaxLong(col 5:int) -> int, VectorUDAFAvgFinal(col 6:struct<count:bigint,sum:double,input:int>) -> double, VectorUDAFCountMerge(col 7:bigint) -> bigint, VectorUDAFComputeBitVectorFinal(col 8:binary) -> binary, VectorUDAFMaxLong(col 9:int) -> int, VectorUDAFAvgFinal(col 10:struct<count:bigint,sum:double,input:int>) -> double, VectorUDAFCountMerge(col 11:bigint) -> bigint, VectorUDAFComputeBitVectorFinal(col 12:binary) -> binary, VectorUDAFMaxLong(col 13:int) -> int, VectorUDAFAvgFinal(col 14:struct<count:bigint,sum:double,input:int>) -> double, VectorUDAFCountMerge(col 15:bigint) -> bigint, VectorUDAFComputeBitVectorFinal(col 16:binary) -> binary
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16
                Statistics: Num rows: 1 Data size: 660 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: 'LONG' (type: string), UDFToLong(_col0) (type: bigint), UDFToLong(_col1) (type: bigint), (_col2 - _col3) (type: bigint), COALESCE(ndv_compute_bit_vector(_col4),0) (type: bigint), _col4 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col5,0)) (type: bigint), COALESCE(_col6,0) (type: double), (_col2 - _col7) (type: bigint), COALESCE(ndv_compute_bit_vector(_col8),0) (type: bigint), _col8 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col9,0)) (type: bigint), COALESCE(_col10,0) (type: double), (_col2 - _col11) (type: bigint), COALESCE(ndv_compute_bit_vector(_col12),0) (type: bigint), _col12 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col13,0)) (type: bigint), COALESCE(_col14,0) (type: double), (_col2 - _col15) (type: bigint), COALESCE(ndv_compute_bit_vector(_col16),0) (type: bigint), _col16 (type: binary)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [17, 0, 1, 18, 21, 4, 22, 24, 26, 27, 30, 8, 31, 33, 35, 36, 39, 12, 40, 42, 44, 45, 48, 16]
                      selectExpressions: ConstantVectorExpression(val LONG) -> 17:string, LongColSubtractLongColumn(col 2:bigint, col 3:bigint) -> 18:bigint, VectorCoalesce(columns [19, 20])(children: VectorUDFAdaptor(ndv_compute_bit_vector(_col4)) -> 19:bigint, ConstantVectorExpression(val 0) -> 20:bigint) -> 21:bigint, ConstantVectorExpression(val STRING) -> 22:string, VectorCoalesce(columns [5, 23])(children: col 5:int, ConstantVectorExpression(val 0) -> 23:int) -> 24:int, VectorCoalesce(columns [6, 25])(children: col 6:double, ConstantVectorExpression(val 0.0) -> 25:double) -> 26:double, LongColSubtractLongColumn(col 2:bigint, col 7:bigint) -> 27:bigint, VectorCoalesce(columns [28, 29])(children: VectorUDFAdaptor(ndv_compute_bit_vector(_col8)) -> 28:bigint, ConstantVectorExpression(val 0) -> 29:bigint) -> 30:bigint, ConstantVectorExpression(val STRING) -> 31:string, VectorCoalesce(columns [9, 32])(children: col 9:int, ConstantVectorExpression(val 0) -> 32:int) -> 33:int, VectorCoalesce(columns [10, 34])(children: col 10:double, ConstantVectorExpression(val 0.0) -> 34:double) -> 35:double, LongColSubtractLongColumn(col 2:bigint, col 11:bigint) -> 36:bigint, VectorCoalesce(columns [37, 38])(children: VectorUDFAdaptor(ndv_compute_bit_vector(_col12)) -> 37:bigint, ConstantVectorExpression(val 0) -> 38:bigint) -> 39:bigint, ConstantVectorExpression(val STRING) -> 40:string, VectorCoalesce(columns [13, 41])(children: col 13:int, ConstantVectorExpression(val 0) -> 41:int) -> 42:int, VectorCoalesce(columns [14, 43])(children: col 14:double, ConstantVectorExpression(val 0.0) -> 43:double) -> 44:double, LongColSubtractLongColumn(col 2:bigint, col 15:bigint) -> 45:bigint, VectorCoalesce(columns [46, 47])(children: VectorUDFAdaptor(ndv_compute_bit_vector(_col16)) -> 46:bigint, ConstantVectorExpression(val 0) -> 47:bigint) -> 48:bigint
                  Statistics: Num rows: 1 Data size: 1062 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 1 Data size: 1062 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez] IS true
                reduceColumnNullOrder: z
                reduceColumnSortOrder: +
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 1
                    dataColumns: KEY._col0:boolean
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
            Reduce Operator Tree:
              Group By Operator
                Group By Vectorization:
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    keyExpressions: col 0:boolean
                    native: false
                    vectorProcessingMode: MERGE_PARTIAL
                    projectedOutputColumnNums: []
                keys: KEY._col0 (type: boolean)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: []
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    null sort order: 
                    sort order: 
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkEmptyKeyOperator
                        native: true
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE

  Stage: Stage-3
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          replace: false
          table:
              input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
              output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
              serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
              name: default.census_clus
          Write Type: DELETE

  Stage: Stage-4
    Stats Work
      Basic Stats Work:

  Stage: Stage-1
    Move Operator
      tables:
          replace: false
          table:
              input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
              output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
              serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
              name: default.census_clus
          Write Type: INSERT

  Stage: Stage-5
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: ssn, name, city, email
          Column Types: int, string, string, string
          Table: default.census_clus

Warning: Map Join MAPJOIN[34][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: UPDATE census_clus SET name = 'updated name' where ssn=100 and   EXISTS (select distinct ssn from census where ssn=census_clus.ssn)
PREHOOK: type: QUERY
PREHOOK: Input: default@census
PREHOOK: Input: default@census_clus
PREHOOK: Output: default@census_clus
PREHOOK: Output: default@census_clus
POSTHOOK: query: UPDATE census_clus SET name = 'updated name' where ssn=100 and   EXISTS (select distinct ssn from census where ssn=census_clus.ssn)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@census
POSTHOOK: Input: default@census_clus
POSTHOOK: Output: default@census_clus
POSTHOOK: Output: default@census_clus
POSTHOOK: Lineage: census_clus.city SIMPLE [(census_clus)census_clus.FieldSchema(name:city, type:string, comment:null), ]
POSTHOOK: Lineage: census_clus.email SIMPLE [(census_clus)census_clus.FieldSchema(name:email, type:string, comment:null), ]
POSTHOOK: Lineage: census_clus.name SIMPLE []
POSTHOOK: Lineage: census_clus.ssn SIMPLE []
s.ssn	s.name	s.city	s.email
