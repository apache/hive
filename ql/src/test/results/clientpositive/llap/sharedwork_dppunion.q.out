PREHOOK: query: drop table if exists admirals
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists admirals
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists ship_types
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists ship_types
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists ships
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists ships
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists torpedos
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists torpedos
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table ships (id integer,ship_type_id integer,crew_size integer)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@ships
POSTHOOK: query: create table ships (id integer,ship_type_id integer,crew_size integer)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@ships
PREHOOK: query: create table ship_types (id integer,type_name string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@ship_types
POSTHOOK: query: create table ship_types (id integer,type_name string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@ship_types
PREHOOK: query: insert into ship_types values
    (1,'galaxy class'),
    (2,'nebula class'),
    (3,'orion class'),
    (4,'first class'),
    (5,'last pass'),
    (6,'last pass'),
    (7,'akira class'),
    (8,'aeon type'),
    (9,'antares type'),
    (10,'apollo class')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@ship_types
POSTHOOK: query: insert into ship_types values
    (1,'galaxy class'),
    (2,'nebula class'),
    (3,'orion class'),
    (4,'first class'),
    (5,'last pass'),
    (6,'last pass'),
    (7,'akira class'),
    (8,'aeon type'),
    (9,'antares type'),
    (10,'apollo class')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@ship_types
POSTHOOK: Lineage: ship_types.id SCRIPT []
POSTHOOK: Lineage: ship_types.type_name SCRIPT []
PREHOOK: query: create table admirals as
    select id from ship_types
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@ship_types
PREHOOK: Output: database:default
PREHOOK: Output: default@admirals
POSTHOOK: query: create table admirals as
    select id from ship_types
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@ship_types
POSTHOOK: Output: database:default
POSTHOOK: Output: default@admirals
POSTHOOK: Lineage: admirals.id SIMPLE [(ship_types)ship_types.FieldSchema(name:id, type:int, comment:null), ]
PREHOOK: query: create table torpedos (id integer,ship_id integer,admiral_id integer)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@torpedos
POSTHOOK: query: create table torpedos (id integer,ship_id integer,admiral_id integer)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@torpedos
Warning: Shuffle Join MERGEJOIN[24][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: insert into ships
select row_number() over (),t.id,row_number() over (partition by t.id) from ship_types t join ship_types t2
PREHOOK: type: QUERY
PREHOOK: Input: default@ship_types
PREHOOK: Output: default@ships
POSTHOOK: query: insert into ships
select row_number() over (),t.id,row_number() over (partition by t.id) from ship_types t join ship_types t2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ship_types
POSTHOOK: Output: default@ships
POSTHOOK: Lineage: ships.crew_size SCRIPT [(ship_types)t.FieldSchema(name:id, type:int, comment:null), ]
POSTHOOK: Lineage: ships.id SCRIPT [(ship_types)t.FieldSchema(name:id, type:int, comment:null), ]
POSTHOOK: Lineage: ships.ship_type_id SIMPLE [(ship_types)t.FieldSchema(name:id, type:int, comment:null), ]
Warning: Shuffle Join MERGEJOIN[24][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: insert into torpedos
select row_number() over (),s.id,row_number() over (partition by s.id) from ships s join ship_types t2
PREHOOK: type: QUERY
PREHOOK: Input: default@ship_types
PREHOOK: Input: default@ships
PREHOOK: Output: default@torpedos
POSTHOOK: query: insert into torpedos
select row_number() over (),s.id,row_number() over (partition by s.id) from ships s join ship_types t2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ship_types
POSTHOOK: Input: default@ships
POSTHOOK: Output: default@torpedos
POSTHOOK: Lineage: torpedos.admiral_id SCRIPT [(ships)s.FieldSchema(name:id, type:int, comment:null), ]
POSTHOOK: Lineage: torpedos.id SCRIPT [(ships)s.FieldSchema(name:id, type:int, comment:null), ]
POSTHOOK: Lineage: torpedos.ship_id SIMPLE [(ships)s.FieldSchema(name:id, type:int, comment:null), ]
PREHOOK: query: create table torpedos2 as select * from torpedos
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@torpedos
PREHOOK: Output: database:default
PREHOOK: Output: default@torpedos2
POSTHOOK: query: create table torpedos2 as select * from torpedos
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@torpedos
POSTHOOK: Output: database:default
POSTHOOK: Output: default@torpedos2
POSTHOOK: Lineage: torpedos2.admiral_id SIMPLE [(torpedos)torpedos.FieldSchema(name:admiral_id, type:int, comment:null), ]
POSTHOOK: Lineage: torpedos2.id SIMPLE [(torpedos)torpedos.FieldSchema(name:id, type:int, comment:null), ]
POSTHOOK: Lineage: torpedos2.ship_id SIMPLE [(torpedos)torpedos.FieldSchema(name:ship_id, type:int, comment:null), ]
PREHOOK: query: alter table torpedos2 update statistics set(
'numRows'='12345678',
'rawDataSize'='123456789')
PREHOOK: type: ALTERTABLE_UPDATETABLESTATS
PREHOOK: Input: default@torpedos2
PREHOOK: Output: default@torpedos2
POSTHOOK: query: alter table torpedos2 update statistics set(
'numRows'='12345678',
'rawDataSize'='123456789')
POSTHOOK: type: ALTERTABLE_UPDATETABLESTATS
POSTHOOK: Input: default@torpedos2
POSTHOOK: Output: default@torpedos2
PREHOOK: query: explain
select * from torpedos t,ships s,ship_types st where t.ship_id = s.id and s.ship_type_id=st.id and st.type_name = 'galaxy class'
union
select * from torpedos t,ships s,ship_types st where t.ship_id = s.id and s.ship_type_id=st.id and st.type_name = 'apollo class'
PREHOOK: type: QUERY
PREHOOK: Input: default@ship_types
PREHOOK: Input: default@ships
PREHOOK: Input: default@torpedos
#### A masked pattern was here ####
POSTHOOK: query: explain
select * from torpedos t,ships s,ship_types st where t.ship_id = s.id and s.ship_type_id=st.id and st.type_name = 'galaxy class'
union
select * from torpedos t,ships s,ship_types st where t.ship_id = s.id and s.ship_type_id=st.id and st.type_name = 'apollo class'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ship_types
POSTHOOK: Input: default@ships
POSTHOOK: Input: default@torpedos
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 2 (BROADCAST_EDGE)
Map 3 <- Map 1 (BROADCAST_EDGE), Union 4 (CONTAINS)
Map 6 <- Map 2 (BROADCAST_EDGE)
Map 7 <- Map 6 (BROADCAST_EDGE), Union 4 (CONTAINS)
Reducer 5 <- Union 4 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5 vectorized, llap
      File Output Operator [FS_139]
        Group By Operator [GBY_138] (rows=101 width=124)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7
        <-Union 4 [SIMPLE_EDGE]
          <-Map 3 [CONTAINS] vectorized, llap
            Reduce Output Operator [RS_137]
              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
              Group By Operator [GBY_136] (rows=101 width=124)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                Select Operator [SEL_135] (rows=101 width=124)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                  Map Join Operator [MAPJOIN_134] (rows=101 width=28)
                    Conds:RS_131._col0=SEL_133._col1(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                  <-Map 1 [BROADCAST_EDGE] vectorized, llap
                    BROADCAST [RS_131]
                      PartitionCols:_col0
                      Map Join Operator [MAPJOIN_130] (rows=11 width=16)
                        Conds:SEL_129._col1=RS_126._col0(Inner),Output:["_col0","_col1","_col2","_col3"]
                      <-Map 2 [BROADCAST_EDGE] vectorized, llap
                        BROADCAST [RS_126]
                          PartitionCols:_col0
                          Select Operator [SEL_124] (rows=1 width=4)
                            Output:["_col0"]
                            Filter Operator [FIL_122] (rows=1 width=99)
                              predicate:((type_name = 'galaxy class') and id is not null)
                              TableScan [TS_3] (rows=10 width=99)
                                default@ship_types,st,Tbl:COMPLETE,Col:COMPLETE,Output:["id","type_name"]
                      <-Select Operator [SEL_129] (rows=100 width=12)
                          Output:["_col0","_col1","_col2"]
                          Filter Operator [FIL_128] (rows=100 width=12)
                            predicate:(id is not null and ship_type_id is not null)
                            TableScan [TS_0] (rows=100 width=12)
                              default@ships,s,Tbl:COMPLETE,Col:COMPLETE,Output:["id","ship_type_id","crew_size"]
                  <-Select Operator [SEL_133] (rows=1000 width=12)
                      Output:["_col0","_col1","_col2"]
                      Filter Operator [FIL_132] (rows=1000 width=12)
                        predicate:ship_id is not null
                        TableScan [TS_104] (rows=1000 width=12)
                          Output:["id","ship_id","admiral_id"]
          <-Map 7 [CONTAINS] vectorized, llap
            Reduce Output Operator [RS_149]
              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
              Group By Operator [GBY_148] (rows=101 width=124)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                Select Operator [SEL_147] (rows=101 width=124)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                  Map Join Operator [MAPJOIN_146] (rows=101 width=28)
                    Conds:RS_143._col0=SEL_145._col1(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                  <-Map 6 [BROADCAST_EDGE] vectorized, llap
                    BROADCAST [RS_143]
                      PartitionCols:_col0
                      Map Join Operator [MAPJOIN_142] (rows=11 width=16)
                        Conds:SEL_141._col1=RS_127._col0(Inner),Output:["_col0","_col1","_col2","_col3"]
                      <-Map 2 [BROADCAST_EDGE] vectorized, llap
                        BROADCAST [RS_127]
                          PartitionCols:_col0
                          Select Operator [SEL_125] (rows=1 width=4)
                            Output:["_col0"]
                            Filter Operator [FIL_123] (rows=1 width=99)
                              predicate:((type_name = 'apollo class') and id is not null)
                               Please refer to the previous TableScan [TS_3]
                      <-Select Operator [SEL_141] (rows=100 width=12)
                          Output:["_col0","_col1","_col2"]
                          Filter Operator [FIL_140] (rows=100 width=12)
                            predicate:(id is not null and ship_type_id is not null)
                            TableScan [TS_16] (rows=100 width=12)
                              default@ships,s,Tbl:COMPLETE,Col:COMPLETE,Output:["id","ship_type_id","crew_size"]
                  <-Select Operator [SEL_145] (rows=1000 width=12)
                      Output:["_col0","_col1","_col2"]
                      Filter Operator [FIL_144] (rows=1000 width=12)
                        predicate:ship_id is not null
                        TableScan [TS_113] (rows=1000 width=12)
                          Output:["id","ship_id","admiral_id"]

