PREHOOK: query: DROP TABLE rcfile_merge2a
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE rcfile_merge2a
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE TABLE rcfile_merge2a (key INT, value STRING)
    PARTITIONED BY (one string, two string, three string)
    STORED AS RCFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@rcfile_merge2a
POSTHOOK: query: CREATE TABLE rcfile_merge2a (key INT, value STRING)
    PARTITIONED BY (one string, two string, three string)
    STORED AS RCFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@rcfile_merge2a
PREHOOK: query: EXPLAIN INSERT OVERWRITE TABLE rcfile_merge2a PARTITION (one='1', two, three)
    SELECT key, value, PMOD(HASH(key), 10) as two, 
        PMOD(HASH(value), 10) as three
    FROM src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@rcfile_merge2a@one=1
POSTHOOK: query: EXPLAIN INSERT OVERWRITE TABLE rcfile_merge2a PARTITION (one='1', two, three)
    SELECT key, value, PMOD(HASH(key), 10) as two, 
        PMOD(HASH(value), 10) as three
    FROM src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: UDFToInteger(key) (type: int), value (type: string), CAST( (hash(key) pmod 10) AS STRING) (type: string), CAST( (hash(value) pmod 10) AS STRING) (type: string)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 500 Data size: 231500 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col2 (type: string), _col3 (type: string)
                      null sort order: aa
                      sort order: ++
                      Map-reduce partition columns: _col2 (type: string), _col3 (type: string)
                      Statistics: Num rows: 500 Data size: 231500 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: string)
                    Select Operator
                      expressions: _col0 (type: int), _col1 (type: string), '1' (type: string), _col2 (type: string), _col3 (type: string)
                      outputColumnNames: key, value, one, two, three
                      Statistics: Num rows: 500 Data size: 274000 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: min(key), max(key), count(1), count(key), compute_bit_vector_hll(key), max(length(value)), avg(COALESCE(length(value),0)), count(value), compute_bit_vector_hll(value)
                        keys: one (type: string), two (type: string), three (type: string)
                        minReductionHashAggr: 0.4
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11
                        Statistics: Num rows: 500 Data size: 426500 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string)
                          null sort order: zzz
                          sort order: +++
                          Map-reduce partition columns: _col0 (type: string), _col1 (type: string), _col2 (type: string)
                          Statistics: Num rows: 500 Data size: 426500 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col3 (type: int), _col4 (type: int), _col5 (type: bigint), _col6 (type: bigint), _col7 (type: binary), _col8 (type: int), _col9 (type: struct<count:bigint,sum:double,input:int>), _col10 (type: bigint), _col11 (type: binary)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: int), VALUE._col1 (type: string), KEY._col2 (type: string), KEY._col3 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3
                File Output Operator
                  compressed: false
                  Dp Sort State: PARTITION_SORTED
                  Statistics: Num rows: 500 Data size: 231500 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.hive.ql.io.RCFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.RCFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe
                      name: default.rcfile_merge2a
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: min(VALUE._col0), max(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector_hll(VALUE._col4), max(VALUE._col5), avg(VALUE._col6), count(VALUE._col7), compute_bit_vector_hll(VALUE._col8)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11
                Statistics: Num rows: 500 Data size: 392500 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: 'LONG' (type: string), UDFToLong(_col3) (type: bigint), UDFToLong(_col4) (type: bigint), (_col5 - _col6) (type: bigint), COALESCE(ndv_compute_bit_vector(_col7),0) (type: bigint), _col7 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col8,0)) (type: bigint), COALESCE(_col9,0) (type: double), (_col5 - _col10) (type: bigint), COALESCE(ndv_compute_bit_vector(_col11),0) (type: bigint), _col11 (type: binary), _col0 (type: string), _col1 (type: string), _col2 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14
                  Statistics: Num rows: 500 Data size: 491500 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 500 Data size: 491500 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            one 1
            three 
            two 
          replace: true
          table:
              input format: org.apache.hadoop.hive.ql.io.RCFileInputFormat
              output format: org.apache.hadoop.hive.ql.io.RCFileOutputFormat
              serde: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe
              name: default.rcfile_merge2a

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key, value
          Column Types: int, string
          Table: default.rcfile_merge2a

PREHOOK: query: INSERT OVERWRITE TABLE rcfile_merge2a PARTITION (one='1', two, three)
    SELECT key, value, PMOD(HASH(key), 10) as two, 
        PMOD(HASH(value), 10) as three
    FROM src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@rcfile_merge2a@one=1
POSTHOOK: query: INSERT OVERWRITE TABLE rcfile_merge2a PARTITION (one='1', two, three)
    SELECT key, value, PMOD(HASH(key), 10) as two, 
        PMOD(HASH(value), 10) as three
    FROM src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=0/three=2
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=0/three=8
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=1/three=3
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=1/three=9
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=2/three=0
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=2/three=4
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=3/three=1
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=3/three=5
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=4/three=2
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=4/three=6
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=5/three=3
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=5/three=7
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=6/three=4
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=6/three=8
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=7/three=5
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=7/three=9
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=8/three=0
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=8/three=6
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=9/three=1
POSTHOOK: Output: default@rcfile_merge2a@one=1/two=9/three=7
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=0,three=2).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=0,three=2).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=0,three=8).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=0,three=8).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=1,three=3).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=1,three=3).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=1,three=9).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=1,three=9).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=2,three=0).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=2,three=0).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=2,three=4).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=2,three=4).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=3,three=1).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=3,three=1).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=3,three=5).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=3,three=5).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=4,three=2).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=4,three=2).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=4,three=6).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=4,three=6).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=5,three=3).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=5,three=3).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=5,three=7).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=5,three=7).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=6,three=4).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=6,three=4).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=6,three=8).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=6,three=8).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=7,three=5).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=7,three=5).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=7,three=9).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=7,three=9).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=8,three=0).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=8,three=0).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=8,three=6).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=8,three=6).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=9,three=1).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=9,three=1).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=9,three=7).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: rcfile_merge2a PARTITION(one=1,two=9,three=7).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: SELECT SUM(HASH(c)) FROM (
    SELECT TRANSFORM(*) USING 'tr \t _' AS (c)
    FROM rcfile_merge2a
) t
PREHOOK: type: QUERY
PREHOOK: Input: default@rcfile_merge2a
PREHOOK: Input: default@rcfile_merge2a@one=1/two=0/three=2
PREHOOK: Input: default@rcfile_merge2a@one=1/two=0/three=8
PREHOOK: Input: default@rcfile_merge2a@one=1/two=1/three=3
PREHOOK: Input: default@rcfile_merge2a@one=1/two=1/three=9
PREHOOK: Input: default@rcfile_merge2a@one=1/two=2/three=0
PREHOOK: Input: default@rcfile_merge2a@one=1/two=2/three=4
PREHOOK: Input: default@rcfile_merge2a@one=1/two=3/three=1
PREHOOK: Input: default@rcfile_merge2a@one=1/two=3/three=5
PREHOOK: Input: default@rcfile_merge2a@one=1/two=4/three=2
PREHOOK: Input: default@rcfile_merge2a@one=1/two=4/three=6
PREHOOK: Input: default@rcfile_merge2a@one=1/two=5/three=3
PREHOOK: Input: default@rcfile_merge2a@one=1/two=5/three=7
PREHOOK: Input: default@rcfile_merge2a@one=1/two=6/three=4
PREHOOK: Input: default@rcfile_merge2a@one=1/two=6/three=8
PREHOOK: Input: default@rcfile_merge2a@one=1/two=7/three=5
PREHOOK: Input: default@rcfile_merge2a@one=1/two=7/three=9
PREHOOK: Input: default@rcfile_merge2a@one=1/two=8/three=0
PREHOOK: Input: default@rcfile_merge2a@one=1/two=8/three=6
PREHOOK: Input: default@rcfile_merge2a@one=1/two=9/three=1
PREHOOK: Input: default@rcfile_merge2a@one=1/two=9/three=7
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT SUM(HASH(c)) FROM (
    SELECT TRANSFORM(*) USING 'tr \t _' AS (c)
    FROM rcfile_merge2a
) t
POSTHOOK: type: QUERY
POSTHOOK: Input: default@rcfile_merge2a
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=0/three=2
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=0/three=8
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=1/three=3
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=1/three=9
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=2/three=0
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=2/three=4
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=3/three=1
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=3/three=5
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=4/three=2
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=4/three=6
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=5/three=3
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=5/three=7
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=6/three=4
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=6/three=8
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=7/three=5
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=7/three=9
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=8/three=0
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=8/three=6
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=9/three=1
POSTHOOK: Input: default@rcfile_merge2a@one=1/two=9/three=7
POSTHOOK: Output: hdfs://### HDFS PATH ###
-4209012844
PREHOOK: query: SELECT SUM(HASH(c)) FROM (
    SELECT TRANSFORM(key, value, '1', PMOD(HASH(key), 10), 
        PMOD(HASH(value), 10)) USING 'tr \t _' AS (c)
    FROM src
) t
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT SUM(HASH(c)) FROM (
    SELECT TRANSFORM(key, value, '1', PMOD(HASH(key), 10), 
        PMOD(HASH(value), 10)) USING 'tr \t _' AS (c)
    FROM src
) t
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: hdfs://### HDFS PATH ###
-4209012844
PREHOOK: query: DROP TABLE rcfile_merge2a
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@rcfile_merge2a
PREHOOK: Output: default@rcfile_merge2a
POSTHOOK: query: DROP TABLE rcfile_merge2a
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@rcfile_merge2a
POSTHOOK: Output: default@rcfile_merge2a
