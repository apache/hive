PREHOOK: query: CREATE TABLE decimal_test_n0 STORED AS ORC AS SELECT cbigint, cdouble, CAST (((cdouble*22.1)/37) AS DECIMAL(20,10)) AS cdecimal1, CAST (((cdouble*9.3)/13) AS DECIMAL(23,14)) AS cdecimal2 FROM alltypesorc
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@alltypesorc
PREHOOK: Output: database:default
PREHOOK: Output: default@decimal_test_n0
POSTHOOK: query: CREATE TABLE decimal_test_n0 STORED AS ORC AS SELECT cbigint, cdouble, CAST (((cdouble*22.1)/37) AS DECIMAL(20,10)) AS cdecimal1, CAST (((cdouble*9.3)/13) AS DECIMAL(23,14)) AS cdecimal2 FROM alltypesorc
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@alltypesorc
POSTHOOK: Output: database:default
POSTHOOK: Output: default@decimal_test_n0
POSTHOOK: Lineage: decimal_test_n0.cbigint SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cbigint, type:bigint, comment:null), ]
POSTHOOK: Lineage: decimal_test_n0.cdecimal1 EXPRESSION [(alltypesorc)alltypesorc.FieldSchema(name:cdouble, type:double, comment:null), ]
POSTHOOK: Lineage: decimal_test_n0.cdecimal2 EXPRESSION [(alltypesorc)alltypesorc.FieldSchema(name:cdouble, type:double, comment:null), ]
POSTHOOK: Lineage: decimal_test_n0.cdouble SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cdouble, type:double, comment:null), ]
PREHOOK: query: insert into decimal_test_n0 values (NULL, NULL, NULL, NULL)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@decimal_test_n0
POSTHOOK: query: insert into decimal_test_n0 values (NULL, NULL, NULL, NULL)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@decimal_test_n0
POSTHOOK: Lineage: decimal_test_n0.cbigint EXPRESSION []
POSTHOOK: Lineage: decimal_test_n0.cdecimal1 EXPRESSION []
POSTHOOK: Lineage: decimal_test_n0.cdecimal2 EXPRESSION []
POSTHOOK: Lineage: decimal_test_n0.cdouble EXPRESSION []
PREHOOK: query: explain vectorization detail
select
   cdecimal1
  ,Round(cdecimal1, 2)
  ,Round(cdecimal1)
  ,Floor(cdecimal1)
  ,Ceil(cdecimal1)
  ,round(Exp(cdecimal1), 58)
  ,Ln(cdecimal1)  
  ,Log10(cdecimal1)
  -- Use log2 as a representative function to test all input types.
  ,Log2(cdecimal1)
  -- Use 15601.0 to test zero handling, as there are no zeroes in the table
  ,Log2(cdecimal1 - 15601.0)
  ,Log(2.0, cdecimal1)
  ,Pow(log2(cdecimal1), 2.0)  
  ,Power(log2(cdecimal1), 2.0)
  ,Sqrt(cdecimal1)
  ,Abs(cdecimal1)
  ,Sin(cdecimal1)
  ,Asin(cdecimal1)
  ,Cos(cdecimal1)
  ,ACos(cdecimal1)
  ,Atan(cdecimal1)
  ,Degrees(cdecimal1)
  ,Radians(cdecimal1)
  ,Positive(cdecimal1)
  ,Negative(cdecimal1)
  ,Sign(cdecimal1)
  -- Test nesting
  ,cos(-sin(log(cdecimal1)) + 3.14159)
from decimal_test_n0

where cbigint % 500 = 0

and sin(cdecimal1) >= -1.0
PREHOOK: type: QUERY
PREHOOK: Input: default@decimal_test_n0
#### A masked pattern was here ####
POSTHOOK: query: explain vectorization detail
select
   cdecimal1
  ,Round(cdecimal1, 2)
  ,Round(cdecimal1)
  ,Floor(cdecimal1)
  ,Ceil(cdecimal1)
  ,round(Exp(cdecimal1), 58)
  ,Ln(cdecimal1)  
  ,Log10(cdecimal1)
  -- Use log2 as a representative function to test all input types.
  ,Log2(cdecimal1)
  -- Use 15601.0 to test zero handling, as there are no zeroes in the table
  ,Log2(cdecimal1 - 15601.0)
  ,Log(2.0, cdecimal1)
  ,Pow(log2(cdecimal1), 2.0)  
  ,Power(log2(cdecimal1), 2.0)
  ,Sqrt(cdecimal1)
  ,Abs(cdecimal1)
  ,Sin(cdecimal1)
  ,Asin(cdecimal1)
  ,Cos(cdecimal1)
  ,ACos(cdecimal1)
  ,Atan(cdecimal1)
  ,Degrees(cdecimal1)
  ,Radians(cdecimal1)
  ,Positive(cdecimal1)
  ,Negative(cdecimal1)
  ,Sign(cdecimal1)
  -- Test nesting
  ,cos(-sin(log(cdecimal1)) + 3.14159)
from decimal_test_n0

where cbigint % 500 = 0

and sin(cdecimal1) >= -1.0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@decimal_test_n0
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: decimal_test_n0
                  filterExpr: (((cbigint % 500L) = 0L) and (sin(cdecimal1) >= -1.0D)) (type: boolean)
                  Statistics: Num rows: 12289 Data size: 1100992 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:cbigint:bigint, 1:cdouble:double, 2:cdecimal1:decimal(20,10), 3:cdecimal2:decimal(23,14), 4:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>, 5:ROW__IS__DELETED:boolean]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprAndExpr(children: FilterLongColEqualLongScalar(col 6:bigint, val 0)(children: LongColModuloLongScalar(col 0:bigint, val 500) -> 6:bigint), FilterDoubleColGreaterEqualDoubleScalar(col 8:double, val -1.0)(children: FuncSinDoubleToDouble(col 7:double)(children: CastDecimalToDouble(col 2:decimal(20,10)) -> 7:double) -> 8:double))
                    predicate: (((cbigint % 500L) = 0L) and (sin(cdecimal1) >= -1.0D)) (type: boolean)
                    Statistics: Num rows: 2048 Data size: 183600 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: cdecimal1 (type: decimal(20,10)), round(cdecimal1, 2) (type: decimal(13,2)), round(cdecimal1) (type: decimal(11,0)), floor(cdecimal1) (type: decimal(11,0)), ceil(cdecimal1) (type: decimal(11,0)), round(exp(cdecimal1), 58) (type: double), ln(cdecimal1) (type: double), log10(cdecimal1) (type: double), log2(cdecimal1) (type: double), log2((cdecimal1 - 15601)) (type: double), log(2, cdecimal1) (type: double), power(log2(cdecimal1), 2) (type: double), power(log2(cdecimal1), 2) (type: double), sqrt(cdecimal1) (type: double), abs(cdecimal1) (type: decimal(20,10)), sin(cdecimal1) (type: double), asin(cdecimal1) (type: double), cos(cdecimal1) (type: double), acos(cdecimal1) (type: double), atan(cdecimal1) (type: double), degrees(cdecimal1) (type: double), radians(cdecimal1) (type: double), cdecimal1 (type: decimal(20,10)), (- cdecimal1) (type: decimal(20,10)), sign(cdecimal1) (type: int), cos(((- sin(log(cdecimal1))) + 3.14159D)) (type: double)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [2, 9, 10, 11, 12, 15, 17, 19, 21, 24, 26, 29, 32, 34, 35, 37, 39, 41, 43, 45, 47, 49, 2, 50, 51, 57]
                          selectExpressions: FuncRoundWithNumDigitsDecimalToDecimal(col 2:decimal(20,10), decimalPlaces 2) -> 9:decimal(13,2), FuncRoundDecimalToDecimal(col 2:decimal(20,10)) -> 10:decimal(11,0), FuncFloorDecimalToDecimal(col 2:decimal(20,10)) -> 11:decimal(11,0), FuncCeilDecimalToDecimal(col 2:decimal(20,10)) -> 12:decimal(11,0), RoundWithNumDigitsDoubleToDouble(col 14, decimalPlaces 58)(children: FuncExpDoubleToDouble(col 13:double)(children: CastDecimalToDouble(col 2:decimal(20,10)) -> 13:double) -> 14:double) -> 15:double, FuncLnDoubleToDouble(col 16:double)(children: CastDecimalToDouble(col 2:decimal(20,10)) -> 16:double) -> 17:double, FuncLog10DoubleToDouble(col 18:double)(children: CastDecimalToDouble(col 2:decimal(20,10)) -> 18:double) -> 19:double, FuncLog2DoubleToDouble(col 20:double)(children: CastDecimalToDouble(col 2:decimal(20,10)) -> 20:double) -> 21:double, FuncLog2DoubleToDouble(col 23:double)(children: CastDecimalToDouble(col 22:decimal(21,10))(children: DecimalColSubtractDecimalScalar(col 2:decimal(20,10), val 15601) -> 22:decimal(21,10)) -> 23:double) -> 24:double, FuncLogWithBaseDoubleToDouble(col 25:double)(children: CastDecimalToDouble(col 2:decimal(20,10)) -> 25:double) -> 26:double, FuncPowerDoubleToDouble(col 28:double)(children: FuncLog2DoubleToDouble(col 27:double)(children: CastDecimalToDouble(col 2:decimal(20,10)) -> 27:double) -> 28:double) -> 29:double, FuncPowerDoubleToDouble(col 31:double)(children: FuncLog2DoubleToDouble(col 30:double)(children: CastDecimalToDouble(col 2:decimal(20,10)) -> 30:double) -> 31:double) -> 32:double, FuncSqrtDoubleToDouble(col 33:double)(children: CastDecimalToDouble(col 2:decimal(20,10)) -> 33:double) -> 34:double, FuncAbsDecimalToDecimal(col 2:decimal(20,10)) -> 35:decimal(20,10), FuncSinDoubleToDouble(col 36:double)(children: CastDecimalToDouble(col 2:decimal(20,10)) -> 36:double) -> 37:double, FuncASinDoubleToDouble(col 38:double)(children: CastDecimalToDouble(col 2:decimal(20,10)) -> 38:double) -> 39:double, FuncCosDoubleToDouble(col 40:double)(children: CastDecimalToDouble(col 2:decimal(20,10)) -> 40:double) -> 41:double, FuncACosDoubleToDouble(col 42:double)(children: CastDecimalToDouble(col 2:decimal(20,10)) -> 42:double) -> 43:double, FuncATanDoubleToDouble(col 44:double)(children: CastDecimalToDouble(col 2:decimal(20,10)) -> 44:double) -> 45:double, FuncDegreesDoubleToDouble(col 46:double)(children: CastDecimalToDouble(col 2:decimal(20,10)) -> 46:double) -> 47:double, FuncRadiansDoubleToDouble(col 48:double)(children: CastDecimalToDouble(col 2:decimal(20,10)) -> 48:double) -> 49:double, FuncNegateDecimalToDecimal(col 2:decimal(20,10)) -> 50:decimal(20,10), FuncSignDecimalToLong(col 2:decimal(20,10)) -> 51:int, FuncCosDoubleToDouble(col 56:double)(children: DoubleColAddDoubleScalar(col 55:double, val 3.14159)(children: DoubleColUnaryMinus(col 54:double)(children: FuncSinDoubleToDouble(col 53:double)(children: FuncLnDoubleToDouble(col 52:double)(children: CastDecimalToDouble(col 2:decimal(20,10)) -> 52:double) -> 53:double) -> 54:double) -> 55:double) -> 56:double) -> 57:double
                      Statistics: Num rows: 2048 Data size: 2005696 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        File Sink Vectorization:
                            className: VectorFileSinkOperator
                            native: false
                        Statistics: Num rows: 2048 Data size: 2005696 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 4
                    includeColumns: [0, 2]
                    dataColumns: cbigint:bigint, cdouble:double, cdecimal1:decimal(20,10), cdecimal2:decimal(23,14)
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, double, double, decimal(13,2), decimal(11,0), decimal(11,0), decimal(11,0), double, double, double, double, double, double, double, double, double, decimal(21,10), double, double, double, double, double, double, double, double, double, double, double, double, decimal(20,10), double, double, double, double, double, double, double, double, double, double, double, double, double, double, decimal(20,10), bigint, double, double, double, double, double, double]

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select
   cdecimal1
  ,Round(cdecimal1, 2)
  ,Round(cdecimal1)
  ,Floor(cdecimal1)
  ,Ceil(cdecimal1)
  ,round(Exp(cdecimal1), 58)
  ,Ln(cdecimal1)
  ,Log10(cdecimal1)
  -- Use log2 as a representative function to test all input types.
  ,Log2(cdecimal1)
  -- Use 15601.0 to test zero handling, as there are no zeroes in the table
  ,Log2(cdecimal1 - 15601.0)
  ,Log(2.0, cdecimal1)
  ,Pow(log2(cdecimal1), 2.0)  
  ,Power(log2(cdecimal1), 2.0)
  ,Sqrt(cdecimal1)
  ,Abs(cdecimal1)
  ,Sin(cdecimal1)
  ,Asin(cdecimal1)
  ,Cos(cdecimal1)
  ,ACos(cdecimal1)
  ,Atan(cdecimal1)
  ,Degrees(cdecimal1)
  ,Radians(cdecimal1)
  ,Positive(cdecimal1)
  ,Negative(cdecimal1)
  ,Sign(cdecimal1)
  -- Test nesting
  ,cos(-sin(log(cdecimal1)) + 3.14159)
from decimal_test_n0

where cbigint % 500 = 0

and sin(cdecimal1) >= -1.0
PREHOOK: type: QUERY
PREHOOK: Input: default@decimal_test_n0
#### A masked pattern was here ####
POSTHOOK: query: select
   cdecimal1
  ,Round(cdecimal1, 2)
  ,Round(cdecimal1)
  ,Floor(cdecimal1)
  ,Ceil(cdecimal1)
  ,round(Exp(cdecimal1), 58)
  ,Ln(cdecimal1)
  ,Log10(cdecimal1)
  -- Use log2 as a representative function to test all input types.
  ,Log2(cdecimal1)
  -- Use 15601.0 to test zero handling, as there are no zeroes in the table
  ,Log2(cdecimal1 - 15601.0)
  ,Log(2.0, cdecimal1)
  ,Pow(log2(cdecimal1), 2.0)  
  ,Power(log2(cdecimal1), 2.0)
  ,Sqrt(cdecimal1)
  ,Abs(cdecimal1)
  ,Sin(cdecimal1)
  ,Asin(cdecimal1)
  ,Cos(cdecimal1)
  ,ACos(cdecimal1)
  ,Atan(cdecimal1)
  ,Degrees(cdecimal1)
  ,Radians(cdecimal1)
  ,Positive(cdecimal1)
  ,Negative(cdecimal1)
  ,Sign(cdecimal1)
  -- Test nesting
  ,cos(-sin(log(cdecimal1)) + 3.14159)
from decimal_test_n0

where cbigint % 500 = 0

and sin(cdecimal1) >= -1.0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@decimal_test_n0
#### A masked pattern was here ####
-119.4594594595	-119.46	-119	-120	-119	1.316485E-52	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	119.4594594595	-0.07885666683797002	NULL	0.9968859644388647	NULL	-1.5624254815943668	-6844.522849943508	-2.0849608902209606	-119.4594594595	119.4594594595	-1	NULL
9318.4351351351	9318.44	9318	9318	9319	Infinity	9.13974998962673	3.969342986470191	13.185871984999437	NULL	13.185871984999437	173.867220004793	173.867220004793	96.53204201266593	9318.4351351351	0.4540668481851705	NULL	0.8909676185918236	NULL	1.5706890126394983	533907.0049096602	162.63737424163023	9318.4351351351	-9318.4351351351	1	-0.9607267417229353
9318.4351351351	9318.44	9318	9318	9319	Infinity	9.13974998962673	3.969342986470191	13.185871984999437	NULL	13.185871984999437	173.867220004793	173.867220004793	96.53204201266593	9318.4351351351	0.4540668481851705	NULL	0.8909676185918236	NULL	1.5706890126394983	533907.0049096602	162.63737424163023	9318.4351351351	-9318.4351351351	1	-0.9607267417229353
9318.4351351351	9318.44	9318	9318	9319	Infinity	9.13974998962673	3.969342986470191	13.185871984999437	NULL	13.185871984999437	173.867220004793	173.867220004793	96.53204201266593	9318.4351351351	0.4540668481851705	NULL	0.8909676185918236	NULL	1.5706890126394983	533907.0049096602	162.63737424163023	9318.4351351351	-9318.4351351351	1	-0.9607267417229353
-4298.1513513514	-4298.15	-4298	-4299	-4298	0.0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4298.1513513514	-0.43730633941118113	NULL	0.899312607223313	NULL	-1.5705636686355597	-246265.93214088667	-75.01689283012556	-4298.1513513514	4298.1513513514	-1	NULL
-4298.1513513514	-4298.15	-4298	-4299	-4298	0.0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4298.1513513514	-0.43730633941118113	NULL	0.899312607223313	NULL	-1.5705636686355597	-246265.93214088667	-75.01689283012556	-4298.1513513514	4298.1513513514	-1	NULL
-4298.1513513514	-4298.15	-4298	-4299	-4298	0.0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4298.1513513514	-0.43730633941118113	NULL	0.899312607223313	NULL	-1.5705636686355597	-246265.93214088667	-75.01689283012556	-4298.1513513514	4298.1513513514	-1	NULL
-4298.1513513514	-4298.15	-4298	-4299	-4298	0.0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4298.1513513514	-0.43730633941118113	NULL	0.899312607223313	NULL	-1.5705636686355597	-246265.93214088667	-75.01689283012556	-4298.1513513514	4298.1513513514	-1	NULL
-4298.1513513514	-4298.15	-4298	-4299	-4298	0.0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4298.1513513514	-0.43730633941118113	NULL	0.899312607223313	NULL	-1.5705636686355597	-246265.93214088667	-75.01689283012556	-4298.1513513514	4298.1513513514	-1	NULL
-4298.1513513514	-4298.15	-4298	-4299	-4298	0.0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4298.1513513514	-0.43730633941118113	NULL	0.899312607223313	NULL	-1.5705636686355597	-246265.93214088667	-75.01689283012556	-4298.1513513514	4298.1513513514	-1	NULL
-4298.1513513514	-4298.15	-4298	-4299	-4298	0.0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4298.1513513514	-0.43730633941118113	NULL	0.899312607223313	NULL	-1.5705636686355597	-246265.93214088667	-75.01689283012556	-4298.1513513514	4298.1513513514	-1	NULL
PREHOOK: query: CREATE TABLE decimal_test_small STORED AS ORC AS SELECT cbigint, cdouble, CAST (((cdouble*22.1)/37) AS DECIMAL(12,4)) AS cdecimal1, CAST (((cdouble*9.3)/13) AS DECIMAL(14,8)) AS cdecimal2 FROM alltypesorc
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@alltypesorc
PREHOOK: Output: database:default
PREHOOK: Output: default@decimal_test_small
POSTHOOK: query: CREATE TABLE decimal_test_small STORED AS ORC AS SELECT cbigint, cdouble, CAST (((cdouble*22.1)/37) AS DECIMAL(12,4)) AS cdecimal1, CAST (((cdouble*9.3)/13) AS DECIMAL(14,8)) AS cdecimal2 FROM alltypesorc
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@alltypesorc
POSTHOOK: Output: database:default
POSTHOOK: Output: default@decimal_test_small
POSTHOOK: Lineage: decimal_test_small.cbigint SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cbigint, type:bigint, comment:null), ]
POSTHOOK: Lineage: decimal_test_small.cdecimal1 EXPRESSION [(alltypesorc)alltypesorc.FieldSchema(name:cdouble, type:double, comment:null), ]
POSTHOOK: Lineage: decimal_test_small.cdecimal2 EXPRESSION [(alltypesorc)alltypesorc.FieldSchema(name:cdouble, type:double, comment:null), ]
POSTHOOK: Lineage: decimal_test_small.cdouble SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cdouble, type:double, comment:null), ]
PREHOOK: query: explain vectorization detail
select
   cdecimal1
  ,Round(cdecimal1, 2)
  ,Round(cdecimal1)
  ,Floor(cdecimal1)
  ,Ceil(cdecimal1)
  ,round(Exp(cdecimal1), 58)
  ,Ln(cdecimal1)
  ,Log10(cdecimal1)
  -- Use log2 as a representative function to test all input types.
  ,Log2(cdecimal1)
  -- Use 15601.0 to test zero handling, as there are no zeroes in the table
  ,Log2(cdecimal1 - 15601.0)
  ,Log(2.0, cdecimal1)
  ,Pow(log2(cdecimal1), 2.0)
  ,Power(log2(cdecimal1), 2.0)
  ,Sqrt(cdecimal1)
  ,Abs(cdecimal1)
  ,Sin(cdecimal1)
  ,Asin(cdecimal1)
  ,Cos(cdecimal1)
  ,ACos(cdecimal1)
  ,Atan(cdecimal1)
  ,Degrees(cdecimal1)
  ,Radians(cdecimal1)
  ,Positive(cdecimal1)
  ,Negative(cdecimal1)
  ,Sign(cdecimal1)
  -- Test nesting
  ,cos(-sin(log(cdecimal1)) + 3.14159)
from decimal_test_small

where cbigint % 500 = 0

and sin(cdecimal1) >= -1.0
PREHOOK: type: QUERY
PREHOOK: Input: default@decimal_test_small
#### A masked pattern was here ####
POSTHOOK: query: explain vectorization detail
select
   cdecimal1
  ,Round(cdecimal1, 2)
  ,Round(cdecimal1)
  ,Floor(cdecimal1)
  ,Ceil(cdecimal1)
  ,round(Exp(cdecimal1), 58)
  ,Ln(cdecimal1)
  ,Log10(cdecimal1)
  -- Use log2 as a representative function to test all input types.
  ,Log2(cdecimal1)
  -- Use 15601.0 to test zero handling, as there are no zeroes in the table
  ,Log2(cdecimal1 - 15601.0)
  ,Log(2.0, cdecimal1)
  ,Pow(log2(cdecimal1), 2.0)
  ,Power(log2(cdecimal1), 2.0)
  ,Sqrt(cdecimal1)
  ,Abs(cdecimal1)
  ,Sin(cdecimal1)
  ,Asin(cdecimal1)
  ,Cos(cdecimal1)
  ,ACos(cdecimal1)
  ,Atan(cdecimal1)
  ,Degrees(cdecimal1)
  ,Radians(cdecimal1)
  ,Positive(cdecimal1)
  ,Negative(cdecimal1)
  ,Sign(cdecimal1)
  -- Test nesting
  ,cos(-sin(log(cdecimal1)) + 3.14159)
from decimal_test_small

where cbigint % 500 = 0

and sin(cdecimal1) >= -1.0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@decimal_test_small
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: decimal_test_small
                  filterExpr: (((cbigint % 500L) = 0L) and (sin(cdecimal1) >= -1.0D)) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 1100992 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:cbigint:bigint, 1:cdouble:double, 2:cdecimal1:decimal(12,4)/DECIMAL_64, 3:cdecimal2:decimal(14,8)/DECIMAL_64, 4:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>, 5:ROW__IS__DELETED:boolean]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprAndExpr(children: FilterLongColEqualLongScalar(col 6:bigint, val 0)(children: LongColModuloLongScalar(col 0:bigint, val 500) -> 6:bigint), FilterDoubleColGreaterEqualDoubleScalar(col 9:double, val -1.0)(children: FuncSinDoubleToDouble(col 8:double)(children: CastDecimalToDouble(col 7:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 7:decimal(12,4)) -> 8:double) -> 9:double))
                    predicate: (((cbigint % 500L) = 0L) and (sin(cdecimal1) >= -1.0D)) (type: boolean)
                    Statistics: Num rows: 2048 Data size: 183600 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: cdecimal1 (type: decimal(12,4)), round(cdecimal1, 2) (type: decimal(11,2)), round(cdecimal1) (type: decimal(9,0)), floor(cdecimal1) (type: decimal(9,0)), ceil(cdecimal1) (type: decimal(9,0)), round(exp(cdecimal1), 58) (type: double), ln(cdecimal1) (type: double), log10(cdecimal1) (type: double), log2(cdecimal1) (type: double), log2((cdecimal1 - 15601)) (type: double), log(2, cdecimal1) (type: double), power(log2(cdecimal1), 2) (type: double), power(log2(cdecimal1), 2) (type: double), sqrt(cdecimal1) (type: double), abs(cdecimal1) (type: decimal(12,4)), sin(cdecimal1) (type: double), asin(cdecimal1) (type: double), cos(cdecimal1) (type: double), acos(cdecimal1) (type: double), atan(cdecimal1) (type: double), degrees(cdecimal1) (type: double), radians(cdecimal1) (type: double), cdecimal1 (type: decimal(12,4)), (- cdecimal1) (type: decimal(12,4)), sign(cdecimal1) (type: int), cos(((- sin(log(cdecimal1))) + 3.14159D)) (type: double)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [2, 11, 13, 15, 17, 21, 24, 27, 30, 33, 36, 40, 44, 47, 49, 52, 55, 58, 61, 64, 67, 70, 2, 72, 74, 81]
                          selectExpressions: FuncRoundWithNumDigitsDecimalToDecimal(col 10:decimal(12,4), decimalPlaces 2)(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 10:decimal(12,4)) -> 11:decimal(11,2), FuncRoundDecimalToDecimal(col 12:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 12:decimal(12,4)) -> 13:decimal(9,0), FuncFloorDecimalToDecimal(col 14:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 14:decimal(12,4)) -> 15:decimal(9,0), FuncCeilDecimalToDecimal(col 16:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 16:decimal(12,4)) -> 17:decimal(9,0), RoundWithNumDigitsDoubleToDouble(col 20, decimalPlaces 58)(children: FuncExpDoubleToDouble(col 19:double)(children: CastDecimalToDouble(col 18:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 18:decimal(12,4)) -> 19:double) -> 20:double) -> 21:double, FuncLnDoubleToDouble(col 23:double)(children: CastDecimalToDouble(col 22:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 22:decimal(12,4)) -> 23:double) -> 24:double, FuncLog10DoubleToDouble(col 26:double)(children: CastDecimalToDouble(col 25:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 25:decimal(12,4)) -> 26:double) -> 27:double, FuncLog2DoubleToDouble(col 29:double)(children: CastDecimalToDouble(col 28:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 28:decimal(12,4)) -> 29:double) -> 30:double, FuncLog2DoubleToDouble(col 32:double)(children: CastDecimalToDouble(col 82:decimal(13,4))(children: ConvertDecimal64ToDecimal(col 31:decimal(13,4)/DECIMAL_64)(children: Decimal64ColSubtractDecimal64Scalar(col 2:decimal(12,4)/DECIMAL_64, decimal64Val 156010000, decimalVal 15601) -> 31:decimal(13,4)/DECIMAL_64) -> 82:decimal(13,4)) -> 32:double) -> 33:double, FuncLogWithBaseDoubleToDouble(col 35:double)(children: CastDecimalToDouble(col 34:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 34:decimal(12,4)) -> 35:double) -> 36:double, FuncPowerDoubleToDouble(col 39:double)(children: FuncLog2DoubleToDouble(col 38:double)(children: CastDecimalToDouble(col 37:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 37:decimal(12,4)) -> 38:double) -> 39:double) -> 40:double, FuncPowerDoubleToDouble(col 43:double)(children: FuncLog2DoubleToDouble(col 42:double)(children: CastDecimalToDouble(col 41:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 41:decimal(12,4)) -> 42:double) -> 43:double) -> 44:double, FuncSqrtDoubleToDouble(col 46:double)(children: CastDecimalToDouble(col 45:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 45:decimal(12,4)) -> 46:double) -> 47:double, FuncAbsDecimalToDecimal(col 48:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 48:decimal(12,4)) -> 49:decimal(12,4), FuncSinDoubleToDouble(col 51:double)(children: CastDecimalToDouble(col 50:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 50:decimal(12,4)) -> 51:double) -> 52:double, FuncASinDoubleToDouble(col 54:double)(children: CastDecimalToDouble(col 53:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 53:decimal(12,4)) -> 54:double) -> 55:double, FuncCosDoubleToDouble(col 57:double)(children: CastDecimalToDouble(col 56:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 56:decimal(12,4)) -> 57:double) -> 58:double, FuncACosDoubleToDouble(col 60:double)(children: CastDecimalToDouble(col 59:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 59:decimal(12,4)) -> 60:double) -> 61:double, FuncATanDoubleToDouble(col 63:double)(children: CastDecimalToDouble(col 62:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 62:decimal(12,4)) -> 63:double) -> 64:double, FuncDegreesDoubleToDouble(col 66:double)(children: CastDecimalToDouble(col 65:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 65:decimal(12,4)) -> 66:double) -> 67:double, FuncRadiansDoubleToDouble(col 69:double)(children: CastDecimalToDouble(col 68:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 68:decimal(12,4)) -> 69:double) -> 70:double, FuncNegateDecimalToDecimal(col 71:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 71:decimal(12,4)) -> 72:decimal(12,4), FuncSignDecimalToLong(col 73:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 73:decimal(12,4)) -> 74:int, FuncCosDoubleToDouble(col 80:double)(children: DoubleColAddDoubleScalar(col 79:double, val 3.14159)(children: DoubleColUnaryMinus(col 78:double)(children: FuncSinDoubleToDouble(col 77:double)(children: FuncLnDoubleToDouble(col 76:double)(children: CastDecimalToDouble(col 75:decimal(12,4))(children: ConvertDecimal64ToDecimal(col 2:decimal(12,4)/DECIMAL_64) -> 75:decimal(12,4)) -> 76:double) -> 77:double) -> 78:double) -> 79:double) -> 80:double) -> 81:double
                      Statistics: Num rows: 2048 Data size: 2005696 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        File Sink Vectorization:
                            className: VectorFileSinkOperator
                            native: false
                        Statistics: Num rows: 2048 Data size: 2005696 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 4
                    includeColumns: [0, 2]
                    dataColumns: cbigint:bigint, cdouble:double, cdecimal1:decimal(12,4)/DECIMAL_64, cdecimal2:decimal(14,8)/DECIMAL_64
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [bigint, decimal(12,4), double, double, decimal(12,4), decimal(11,2), decimal(12,4), decimal(9,0), decimal(12,4), decimal(9,0), decimal(12,4), decimal(9,0), decimal(12,4), double, double, double, decimal(12,4), double, double, decimal(12,4), double, double, decimal(12,4), double, double, decimal(13,4)/DECIMAL_64, double, double, decimal(12,4), double, double, decimal(12,4), double, double, double, decimal(12,4), double, double, double, decimal(12,4), double, double, decimal(12,4), decimal(12,4), decimal(12,4), double, double, decimal(12,4), double, double, decimal(12,4), double, double, decimal(12,4), double, double, decimal(12,4), double, double, decimal(12,4), double, double, decimal(12,4), double, double, decimal(12,4), decimal(12,4), decimal(12,4), bigint, decimal(12,4), double, double, double, double, double, double, decimal(13,4)]

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select
   cdecimal1
  ,Round(cdecimal1, 2)
  ,Round(cdecimal1)
  ,Floor(cdecimal1)
  ,Ceil(cdecimal1)
  ,round(Exp(cdecimal1), 58)
  ,Ln(cdecimal1)
  ,Log10(cdecimal1)
  -- Use log2 as a representative function to test all input types.
  ,Log2(cdecimal1)
  -- Use 15601.0 to test zero handling, as there are no zeroes in the table
  ,Log2(cdecimal1 - 15601.0)
  ,Log(2.0, cdecimal1)
  ,Pow(log2(cdecimal1), 2.0)
  ,Power(log2(cdecimal1), 2.0)
  ,Sqrt(cdecimal1)
  ,Abs(cdecimal1)
  ,Sin(cdecimal1)
  ,Asin(cdecimal1)
  ,Cos(cdecimal1)
  ,ACos(cdecimal1)
  ,Atan(cdecimal1)
  ,Degrees(cdecimal1)
  ,Radians(cdecimal1)
  ,Positive(cdecimal1)
  ,Negative(cdecimal1)
  ,Sign(cdecimal1)
  -- Test nesting
  ,cos(-sin(log(cdecimal1)) + 3.14159)
from decimal_test_small

where cbigint % 500 = 0

and sin(cdecimal1) >= -1.0
PREHOOK: type: QUERY
PREHOOK: Input: default@decimal_test_small
#### A masked pattern was here ####
POSTHOOK: query: select
   cdecimal1
  ,Round(cdecimal1, 2)
  ,Round(cdecimal1)
  ,Floor(cdecimal1)
  ,Ceil(cdecimal1)
  ,round(Exp(cdecimal1), 58)
  ,Ln(cdecimal1)
  ,Log10(cdecimal1)
  -- Use log2 as a representative function to test all input types.
  ,Log2(cdecimal1)
  -- Use 15601.0 to test zero handling, as there are no zeroes in the table
  ,Log2(cdecimal1 - 15601.0)
  ,Log(2.0, cdecimal1)
  ,Pow(log2(cdecimal1), 2.0)
  ,Power(log2(cdecimal1), 2.0)
  ,Sqrt(cdecimal1)
  ,Abs(cdecimal1)
  ,Sin(cdecimal1)
  ,Asin(cdecimal1)
  ,Cos(cdecimal1)
  ,ACos(cdecimal1)
  ,Atan(cdecimal1)
  ,Degrees(cdecimal1)
  ,Radians(cdecimal1)
  ,Positive(cdecimal1)
  ,Negative(cdecimal1)
  ,Sign(cdecimal1)
  -- Test nesting
  ,cos(-sin(log(cdecimal1)) + 3.14159)
from decimal_test_small

where cbigint % 500 = 0

and sin(cdecimal1) >= -1.0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@decimal_test_small
#### A masked pattern was here ####
-119.4595	-119.46	-119	-120	-119	1.316432E-52	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	119.4595	-0.07889708102860798	NULL	0.9968827667309558	NULL	-1.562425484435015	-6844.525172743059	-2.084961597786166	-119.4595	119.4595	-1	NULL
9318.4351	9318.44	9318	9318	9319	Infinity	9.139749985856234	3.9693429848326867	13.185871979559764	NULL	13.185871979559764	173.86721986133932	173.86721986133932	96.5320418306792	9318.4351	0.4540355436693385	NULL	0.8909835717255892	NULL	1.5706890126390936	533907.0028965673	162.63737362840706	9318.4351	-9318.4351	1	-0.9607267407188516
9318.4351	9318.44	9318	9318	9319	Infinity	9.139749985856234	3.9693429848326867	13.185871979559764	NULL	13.185871979559764	173.86721986133932	173.86721986133932	96.5320418306792	9318.4351	0.4540355436693385	NULL	0.8909835717255892	NULL	1.5706890126390936	533907.0028965673	162.63737362840706	9318.4351	-9318.4351	1	-0.9607267407188516
9318.4351	9318.44	9318	9318	9319	Infinity	9.139749985856234	3.9693429848326867	13.185871979559764	NULL	13.185871979559764	173.86721986133932	173.86721986133932	96.5320418306792	9318.4351	0.4540355436693385	NULL	0.8909835717255892	NULL	1.5706890126390936	533907.0028965673	162.63737362840706	9318.4351	-9318.4351	1	-0.9607267407188516
-4298.1514	-4298.15	-4298	-4299	-4298	0.0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4298.1514	-0.4373500891926774	NULL	0.8992913318180917	NULL	-1.5705636686381932	-246265.9349282461	-75.01689367920379	-4298.1514	4298.1514	-1	NULL
-4298.1514	-4298.15	-4298	-4299	-4298	0.0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4298.1514	-0.4373500891926774	NULL	0.8992913318180917	NULL	-1.5705636686381932	-246265.9349282461	-75.01689367920379	-4298.1514	4298.1514	-1	NULL
-4298.1514	-4298.15	-4298	-4299	-4298	0.0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4298.1514	-0.4373500891926774	NULL	0.8992913318180917	NULL	-1.5705636686381932	-246265.9349282461	-75.01689367920379	-4298.1514	4298.1514	-1	NULL
-4298.1514	-4298.15	-4298	-4299	-4298	0.0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4298.1514	-0.4373500891926774	NULL	0.8992913318180917	NULL	-1.5705636686381932	-246265.9349282461	-75.01689367920379	-4298.1514	4298.1514	-1	NULL
-4298.1514	-4298.15	-4298	-4299	-4298	0.0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4298.1514	-0.4373500891926774	NULL	0.8992913318180917	NULL	-1.5705636686381932	-246265.9349282461	-75.01689367920379	-4298.1514	4298.1514	-1	NULL
-4298.1514	-4298.15	-4298	-4299	-4298	0.0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4298.1514	-0.4373500891926774	NULL	0.8992913318180917	NULL	-1.5705636686381932	-246265.9349282461	-75.01689367920379	-4298.1514	4298.1514	-1	NULL
-4298.1514	-4298.15	-4298	-4299	-4298	0.0	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	4298.1514	-0.4373500891926774	NULL	0.8992913318180917	NULL	-1.5705636686381932	-246265.9349282461	-75.01689367920379	-4298.1514	4298.1514	-1	NULL
