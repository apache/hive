PREHOOK: query: explain select * from part where p_type = ALL(select max(p_type) from part)
PREHOOK: type: QUERY
PREHOOK: Input: default@part
#### A masked pattern was here ####
POSTHOOK: query: explain select * from part where p_type = ALL(select max(p_type) from part)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@part
#### A masked pattern was here ####
Plan not optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 1 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3 llap
      File Output Operator [FS_16]
        Merge Join Operator [MERGEJOIN_26] (rows=1 width=619)
          Conds:RS_30.p_type=RS_35._col0(Left Semi),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
        <-Map 1 [SIMPLE_EDGE] vectorized, llap
          SHUFFLE [RS_30]
            PartitionCols:p_type
            Filter Operator [FIL_28] (rows=26 width=619)
              predicate:p_type is not null
              TableScan [TS_1] (rows=26 width=104)
                default@part,part,Tbl:COMPLETE,Col:COMPLETE,Output:["p_type","p_partkey","p_name","p_mfgr","p_brand","p_size","p_container","p_retailprice","p_comment"]
        <-Reducer 2 [SIMPLE_EDGE] vectorized, llap
          SHUFFLE [RS_35]
            PartitionCols:_col0
            Group By Operator [GBY_34] (rows=1 width=184)
              Output:["_col0"],keys:_col0
              Filter Operator [FIL_33] (rows=1 width=184)
                predicate:_col0 is not null
                Group By Operator [GBY_32] (rows=1 width=184)
                  Output:["_col0"],aggregations:["max(VALUE._col0)"]
                <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized, llap
                  SHUFFLE [RS_31]
                    Group By Operator [GBY_29] (rows=1 width=184)
                      Output:["_col0"],aggregations:["max(p_type)"]
                      Select Operator [SEL_27] (rows=26 width=104)
                        Output:["p_type"]
                         Please refer to the previous TableScan [TS_1]

