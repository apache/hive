PREHOOK: query: CREATE TABLE test1_n14 (key INT, value INT, col_1 STRING)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test1_n14
POSTHOOK: query: CREATE TABLE test1_n14 (key INT, value INT, col_1 STRING)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test1_n14
PREHOOK: query: INSERT INTO test1_n14 VALUES (NULL, NULL, 'None'), (98, NULL, 'None'),
    (99, 0, 'Alice'), (99, 2, 'Mat'), (100, 1, 'Bob'), (101, 2, 'Car')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test1_n14
POSTHOOK: query: INSERT INTO test1_n14 VALUES (NULL, NULL, 'None'), (98, NULL, 'None'),
    (99, 0, 'Alice'), (99, 2, 'Mat'), (100, 1, 'Bob'), (101, 2, 'Car')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test1_n14
POSTHOOK: Lineage: test1_n14.col_1 SCRIPT []
POSTHOOK: Lineage: test1_n14.key SCRIPT []
POSTHOOK: Lineage: test1_n14.value SCRIPT []
PREHOOK: query: CREATE TABLE test2_n9 (key INT, value INT, col_2 STRING)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test2_n9
POSTHOOK: query: CREATE TABLE test2_n9 (key INT, value INT, col_2 STRING)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test2_n9
PREHOOK: query: INSERT INTO test2_n9 VALUES (102, 2, 'Del'), (103, 2, 'Ema'),
    (104, 3, 'Fli'), (105, NULL, 'None')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test2_n9
POSTHOOK: query: INSERT INTO test2_n9 VALUES (102, 2, 'Del'), (103, 2, 'Ema'),
    (104, 3, 'Fli'), (105, NULL, 'None')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test2_n9
POSTHOOK: Lineage: test2_n9.col_2 SCRIPT []
POSTHOOK: Lineage: test2_n9.key SCRIPT []
POSTHOOK: Lineage: test2_n9.value SCRIPT []
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 2 (BROADCAST_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n14
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Left Outer Join 0 to 1
                      keys:
                        0 _col1 (type: int)
                        1 _col1 (type: int)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      input vertices:
                        1 Map 2
                      Statistics: Num rows: 8 Data size: 1524 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 8 Data size: 1524 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test2_n9
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n14
PREHOOK: Input: default@test2_n9
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n14
POSTHOOK: Input: default@test2_n9
#### A masked pattern was here ####
100	1	Bob	NULL	NULL	NULL
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
NULL	NULL	None	NULL	NULL	NULL
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  AND test1_n14.key between 100 and 102
  AND test2_n9.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  AND test1_n14.key between 100 and 102
  AND test2_n9.key between 100 and 102)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 2 (BROADCAST_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n14
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Left Outer Join 0 to 1
                      filter predicates:
                        0 {_col0 BETWEEN 100 AND 102}
                        1 
                      keys:
                        0 _col1 (type: int)
                        1 _col1 (type: int)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      input vertices:
                        1 Map 2
                      Statistics: Num rows: 6 Data size: 857 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 6 Data size: 857 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test2_n9
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: key BETWEEN 100 AND 102 (type: boolean)
                    Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_2 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  AND test1_n14.key between 100 and 102
  AND test2_n9.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n14
PREHOOK: Input: default@test2_n9
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  AND test1_n14.key between 100 and 102
  AND test2_n9.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n14
POSTHOOK: Input: default@test2_n9
#### A masked pattern was here ####
100	1	Bob	NULL	NULL	NULL
101	2	Car	102	2	Del
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	NULL	NULL	NULL
NULL	NULL	None	NULL	NULL	NULL
Warning: Map Join MAPJOIN[11][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.key between 100 and 102
  AND test2_n9.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.key between 100 and 102
  AND test2_n9.key between 100 and 102)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 2 (BROADCAST_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n14
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Left Outer Join 0 to 1
                      filter predicates:
                        0 {_col0 BETWEEN 100 AND 102}
                        1 
                      keys:
                        0 
                        1 
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      input vertices:
                        1 Map 2
                      Statistics: Num rows: 6 Data size: 1142 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 6 Data size: 1142 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test2_n9
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: key BETWEEN 100 AND 102 (type: boolean)
                    Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_2 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        sort order: 
                        Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Map Join MAPJOIN[11][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.key between 100 and 102
  AND test2_n9.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n14
PREHOOK: Input: default@test2_n9
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.key between 100 and 102
  AND test2_n9.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n14
POSTHOOK: Input: default@test2_n9
#### A masked pattern was here ####
100	1	Bob	102	2	Del
101	2	Car	102	2	Del
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	NULL	NULL	NULL
NULL	NULL	None	NULL	NULL	NULL
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value AND true)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value AND true)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 2 <- Map 1 (BROADCAST_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n14
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test2_n9
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Right Outer Join 0 to 1
                      keys:
                        0 _col1 (type: int)
                        1 _col1 (type: int)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      input vertices:
                        0 Map 1
                      Statistics: Num rows: 8 Data size: 1524 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 8 Data size: 1524 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: no inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value AND true)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n14
PREHOOK: Input: default@test2_n9
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value AND true)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n14
POSTHOOK: Input: default@test2_n9
#### A masked pattern was here ####
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
NULL	NULL	NULL	104	3	Fli
NULL	NULL	NULL	105	NULL	None
Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.key between 100 and 102)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 2 (BROADCAST_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n14
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Left Outer Join 0 to 1
                      filter predicates:
                        0 {_col0 BETWEEN 100 AND 102}
                        1 
                      keys:
                        0 
                        1 
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      input vertices:
                        1 Map 2
                      Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test2_n9
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n14
PREHOOK: Input: default@test2_n9
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n14
POSTHOOK: Input: default@test2_n9
#### A masked pattern was here ####
100	1	Bob	102	2	Del
100	1	Bob	103	2	Ema
100	1	Bob	104	3	Fli
100	1	Bob	105	NULL	None
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	104	3	Fli
101	2	Car	105	NULL	None
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	NULL	NULL	NULL
NULL	NULL	None	NULL	NULL	NULL
Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102
  OR test2_n9.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102
  OR test2_n9.key between 100 and 102)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 2 (BROADCAST_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n14
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Left Outer Join 0 to 1
                      keys:
                        0 
                        1 
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      input vertices:
                        1 Map 2
                      residual filter predicates: {((_col1 = _col4) or _col0 BETWEEN 100 AND 102 or _col3 BETWEEN 100 AND 102)}
                      Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test2_n9
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102
  OR test2_n9.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n14
PREHOOK: Input: default@test2_n9
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102
  OR test2_n9.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n14
POSTHOOK: Input: default@test2_n9
#### A masked pattern was here ####
100	1	Bob	102	2	Del
100	1	Bob	103	2	Ema
100	1	Bob	104	3	Fli
100	1	Bob	105	NULL	None
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	104	3	Fli
101	2	Car	105	NULL	None
98	NULL	None	102	2	Del
99	0	Alice	102	2	Del
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
NULL	NULL	None	102	2	Del
Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 2 (BROADCAST_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n14
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Left Outer Join 0 to 1
                      keys:
                        0 
                        1 
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      input vertices:
                        1 Map 2
                      residual filter predicates: {((_col1 = _col4) or _col0 BETWEEN 100 AND 102)}
                      Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test2_n9
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n14
PREHOOK: Input: default@test2_n9
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n14
POSTHOOK: Input: default@test2_n9
#### A masked pattern was here ####
100	1	Bob	102	2	Del
100	1	Bob	103	2	Ema
100	1	Bob	104	3	Fli
100	1	Bob	105	NULL	None
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	104	3	Fli
101	2	Car	105	NULL	None
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
NULL	NULL	None	NULL	NULL	NULL
Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test2_n9.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test2_n9.key between 100 and 102)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 2 (BROADCAST_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n14
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Left Outer Join 0 to 1
                      keys:
                        0 
                        1 
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      input vertices:
                        1 Map 2
                      residual filter predicates: {((_col1 = _col4) or _col3 BETWEEN 100 AND 102)}
                      Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test2_n9
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test2_n9.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n14
PREHOOK: Input: default@test2_n9
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test2_n9.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n14
POSTHOOK: Input: default@test2_n9
#### A masked pattern was here ####
100	1	Bob	102	2	Del
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
98	NULL	None	102	2	Del
99	0	Alice	102	2	Del
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
NULL	NULL	None	102	2	Del
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  AND (test1_n14.key between 100 and 102
    OR test2_n9.key between 100 and 102))
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  AND (test1_n14.key between 100 and 102
    OR test2_n9.key between 100 and 102))
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 2 (BROADCAST_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n14
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Left Outer Join 0 to 1
                      keys:
                        0 _col1 (type: int)
                        1 _col1 (type: int)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      input vertices:
                        1 Map 2
                      residual filter predicates: {(_col0 BETWEEN 100 AND 102 or _col3 BETWEEN 100 AND 102)}
                      Statistics: Num rows: 8 Data size: 1524 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 8 Data size: 1524 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test2_n9
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  AND (test1_n14.key between 100 and 102
    OR test2_n9.key between 100 and 102))
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n14
PREHOOK: Input: default@test2_n9
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n14 LEFT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  AND (test1_n14.key between 100 and 102
    OR test2_n9.key between 100 and 102))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n14
POSTHOOK: Input: default@test2_n9
#### A masked pattern was here ####
100	1	Bob	NULL	NULL	NULL
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	102	2	Del
NULL	NULL	None	NULL	NULL	NULL
Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102
  OR test2_n9.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102
  OR test2_n9.key between 100 and 102)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 2 <- Map 1 (BROADCAST_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n14
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test2_n9
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Right Outer Join 0 to 1
                      keys:
                        0 
                        1 
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      input vertices:
                        0 Map 1
                      residual filter predicates: {((_col1 = _col4) or _col0 BETWEEN 100 AND 102 or _col3 BETWEEN 100 AND 102)}
                      Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: llap
            LLAP IO: no inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102
  OR test2_n9.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n14
PREHOOK: Input: default@test2_n9
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102
  OR test2_n9.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n14
POSTHOOK: Input: default@test2_n9
#### A masked pattern was here ####
100	1	Bob	102	2	Del
100	1	Bob	103	2	Ema
100	1	Bob	104	3	Fli
100	1	Bob	105	NULL	None
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	104	3	Fli
101	2	Car	105	NULL	None
98	NULL	None	102	2	Del
99	0	Alice	102	2	Del
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
NULL	NULL	None	102	2	Del
Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 2 <- Map 1 (BROADCAST_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n14
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test2_n9
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Right Outer Join 0 to 1
                      keys:
                        0 
                        1 
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      input vertices:
                        0 Map 1
                      residual filter predicates: {((_col1 = _col4) or _col0 BETWEEN 100 AND 102)}
                      Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: llap
            LLAP IO: no inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n14
PREHOOK: Input: default@test2_n9
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n14
POSTHOOK: Input: default@test2_n9
#### A masked pattern was here ####
100	1	Bob	102	2	Del
100	1	Bob	103	2	Ema
100	1	Bob	104	3	Fli
100	1	Bob	105	NULL	None
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	104	3	Fli
101	2	Car	105	NULL	None
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test2_n9.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test2_n9.key between 100 and 102)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 2 <- Map 1 (BROADCAST_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n14
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test2_n9
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Right Outer Join 0 to 1
                      keys:
                        0 
                        1 
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      input vertices:
                        0 Map 1
                      residual filter predicates: {((_col1 = _col4) or _col3 BETWEEN 100 AND 102)}
                      Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: llap
            LLAP IO: no inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test2_n9.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n14
PREHOOK: Input: default@test2_n9
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test2_n9.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n14
POSTHOOK: Input: default@test2_n9
#### A masked pattern was here ####
100	1	Bob	102	2	Del
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
98	NULL	None	102	2	Del
99	0	Alice	102	2	Del
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
NULL	NULL	NULL	104	3	Fli
NULL	NULL	NULL	105	NULL	None
NULL	NULL	None	102	2	Del
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  AND (test1_n14.key between 100 and 102
    OR test2_n9.key between 100 and 102))
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  AND (test1_n14.key between 100 and 102
    OR test2_n9.key between 100 and 102))
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 2 <- Map 1 (BROADCAST_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n14
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test2_n9
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Right Outer Join 0 to 1
                      keys:
                        0 _col1 (type: int)
                        1 _col1 (type: int)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      input vertices:
                        0 Map 1
                      residual filter predicates: {(_col0 BETWEEN 100 AND 102 or _col3 BETWEEN 100 AND 102)}
                      Statistics: Num rows: 8 Data size: 1524 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 8 Data size: 1524 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: llap
            LLAP IO: no inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  AND (test1_n14.key between 100 and 102
    OR test2_n9.key between 100 and 102))
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n14
PREHOOK: Input: default@test2_n9
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n14 RIGHT OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  AND (test1_n14.key between 100 and 102
    OR test2_n9.key between 100 and 102))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n14
POSTHOOK: Input: default@test2_n9
#### A masked pattern was here ####
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
99	2	Mat	102	2	Del
NULL	NULL	NULL	104	3	Fli
NULL	NULL	NULL	105	NULL	None
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 FULL OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102
  OR test2_n9.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 FULL OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102
  OR test2_n9.key between 100 and 102)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n14
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n9
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Outer Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                residual filter predicates: {((_col1 = _col4) or _col0 BETWEEN 100 AND 102 or _col3 BETWEEN 100 AND 102)}
                Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n14 FULL OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102
  OR test2_n9.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n14
PREHOOK: Input: default@test2_n9
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n14 FULL OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102
  OR test2_n9.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n14
POSTHOOK: Input: default@test2_n9
#### A masked pattern was here ####
100	1	Bob	102	2	Del
100	1	Bob	103	2	Ema
100	1	Bob	104	3	Fli
100	1	Bob	105	NULL	None
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	104	3	Fli
101	2	Car	105	NULL	None
98	NULL	None	102	2	Del
99	0	Alice	102	2	Del
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
NULL	NULL	None	102	2	Del
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 FULL OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 FULL OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n14
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n9
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Outer Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                residual filter predicates: {((_col1 = _col4) or _col0 BETWEEN 100 AND 102)}
                Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n14 FULL OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n14
PREHOOK: Input: default@test2_n9
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n14 FULL OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test1_n14.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n14
POSTHOOK: Input: default@test2_n9
#### A masked pattern was here ####
100	1	Bob	102	2	Del
100	1	Bob	103	2	Ema
100	1	Bob	104	3	Fli
100	1	Bob	105	NULL	None
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	104	3	Fli
101	2	Car	105	NULL	None
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
NULL	NULL	None	NULL	NULL	NULL
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 FULL OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test2_n9.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 FULL OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test2_n9.key between 100 and 102)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 3 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n14
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n9
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Outer Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                residual filter predicates: {((_col1 = _col4) or _col3 BETWEEN 100 AND 102)}
                Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n14 FULL OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test2_n9.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n14
PREHOOK: Input: default@test2_n9
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n14 FULL OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  OR test2_n9.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n14
POSTHOOK: Input: default@test2_n9
#### A masked pattern was here ####
100	1	Bob	102	2	Del
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
98	NULL	None	102	2	Del
99	0	Alice	102	2	Del
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
NULL	NULL	NULL	104	3	Fli
NULL	NULL	NULL	105	NULL	None
NULL	NULL	None	102	2	Del
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 FULL OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  AND (test1_n14.key between 100 and 102
    OR test2_n9.key between 100 and 102))
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n14 FULL OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  AND (test1_n14.key between 100 and 102
    OR test2_n9.key between 100 and 102))
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n14
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n9
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Outer Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                residual filter predicates: {(_col0 BETWEEN 100 AND 102 or _col3 BETWEEN 100 AND 102)}
                Statistics: Num rows: 10 Data size: 1711 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 10 Data size: 1711 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test1_n14 FULL OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  AND (test1_n14.key between 100 and 102
    OR test2_n9.key between 100 and 102))
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n14
PREHOOK: Input: default@test2_n9
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n14 FULL OUTER JOIN test2_n9
ON (test1_n14.value=test2_n9.value
  AND (test1_n14.key between 100 and 102
    OR test2_n9.key between 100 and 102))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n14
POSTHOOK: Input: default@test2_n9
#### A masked pattern was here ####
100	1	Bob	NULL	NULL	NULL
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	102	2	Del
NULL	NULL	NULL	104	3	Fli
NULL	NULL	NULL	105	NULL	None
NULL	NULL	None	NULL	NULL	NULL
