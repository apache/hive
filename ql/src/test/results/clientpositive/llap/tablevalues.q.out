PREHOOK: query: CREATE TABLE mytbl_n1 AS
SELECT key, value
FROM src
ORDER BY key, value
LIMIT 5
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@src
PREHOOK: Output: database:default
PREHOOK: Output: default@mytbl_n1
POSTHOOK: query: CREATE TABLE mytbl_n1 AS
SELECT key, value
FROM src
ORDER BY key, value
LIMIT 5
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@src
POSTHOOK: Output: database:default
POSTHOOK: Output: default@mytbl_n1
POSTHOOK: Lineage: mytbl_n1.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: mytbl_n1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: EXPLAIN
INSERT INTO mytbl_n1(key,value)
SELECT a,b as c FROM TABLE(VALUES(1,2),(3,4)) AS vc(a,b)
WHERE b = 9
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@mytbl_n1
POSTHOOK: query: EXPLAIN
INSERT INTO mytbl_n1(key,value)
SELECT a,b as c FROM TABLE(VALUES(1,2),(3,4)) AS vc(a,b)
WHERE b = 9
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@mytbl_n1
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: _dummy_table
                  Row Limit Per Split: 1
                  Statistics: Num rows: 1 Data size: 10 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: array(const struct(1,2),const struct(3,4)) (type: array<struct<col1:int,col2:int>>)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 640 Basic stats: COMPLETE Column stats: COMPLETE
                    UDTF Operator
                      Statistics: Num rows: 1 Data size: 640 Basic stats: COMPLETE Column stats: COMPLETE
                      function name: inline
                      Filter Operator
                        predicate: (col2 = 9) (type: boolean)
                        Statistics: Num rows: 1 Data size: 640 Basic stats: COMPLETE Column stats: COMPLETE
                        Select Operator
                          expressions: CAST( col1 AS STRING) (type: string), '9' (type: string)
                          outputColumnNames: _col0, _col1
                          Statistics: Num rows: 1 Data size: 269 Basic stats: COMPLETE Column stats: COMPLETE
                          File Output Operator
                            compressed: false
                            Statistics: Num rows: 1 Data size: 269 Basic stats: COMPLETE Column stats: COMPLETE
                            table:
                                input format: org.apache.hadoop.mapred.TextInputFormat
                                output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                                name: default.mytbl_n1
                          Select Operator
                            expressions: _col0 (type: string), _col1 (type: string)
                            outputColumnNames: key, value
                            Statistics: Num rows: 1 Data size: 269 Basic stats: COMPLETE Column stats: COMPLETE
                            Group By Operator
                              aggregations: max(length(key)), avg(COALESCE(length(key),0)), count(1), count(key), compute_bit_vector_hll(key), max(length(value)), avg(COALESCE(length(value),0)), count(value), compute_bit_vector_hll(value)
                              minReductionHashAggr: 0.4
                              mode: hash
                              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                              Statistics: Num rows: 1 Data size: 472 Basic stats: COMPLETE Column stats: COMPLETE
                              Reduce Output Operator
                                null sort order: 
                                sort order: 
                                Statistics: Num rows: 1 Data size: 472 Basic stats: COMPLETE Column stats: COMPLETE
                                value expressions: _col0 (type: int), _col1 (type: struct<count:bigint,sum:double,input:int>), _col2 (type: bigint), _col3 (type: bigint), _col4 (type: binary), _col5 (type: int), _col6 (type: struct<count:bigint,sum:double,input:int>), _col7 (type: bigint), _col8 (type: binary)
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0), avg(VALUE._col1), count(VALUE._col2), count(VALUE._col3), compute_bit_vector_hll(VALUE._col4), max(VALUE._col5), avg(VALUE._col6), count(VALUE._col7), compute_bit_vector_hll(VALUE._col8)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                Statistics: Num rows: 1 Data size: 336 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: 'STRING' (type: string), UDFToLong(COALESCE(_col0,0)) (type: bigint), COALESCE(_col1,0) (type: double), (_col2 - _col3) (type: bigint), COALESCE(ndv_compute_bit_vector(_col4),0) (type: bigint), _col4 (type: binary), 'STRING' (type: string), UDFToLong(COALESCE(_col5,0)) (type: bigint), COALESCE(_col6,0) (type: double), (_col2 - _col7) (type: bigint), COALESCE(ndv_compute_bit_vector(_col8),0) (type: bigint), _col8 (type: binary)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11
                  Statistics: Num rows: 1 Data size: 532 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 532 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          replace: false
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.mytbl_n1

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key, value
          Column Types: string, string
          Table: default.mytbl_n1

PREHOOK: query: INSERT INTO mytbl_n1(key,value)
SELECT a,b as c FROM TABLE(VALUES(1,2),(3,4)) AS vc(a,b)
WHERE b = 9
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@mytbl_n1
POSTHOOK: query: INSERT INTO mytbl_n1(key,value)
SELECT a,b as c FROM TABLE(VALUES(1,2),(3,4)) AS vc(a,b)
WHERE b = 9
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@mytbl_n1
POSTHOOK: Lineage: mytbl_n1.key SCRIPT []
POSTHOOK: Lineage: mytbl_n1.value EXPRESSION []
PREHOOK: query: EXPLAIN
SELECT tf.col1, tf.col2, tf.col3
FROM
  (SELECT key, value FROM mytbl_n1) t
  LATERAL VIEW
  INLINE(array(struct('A', 10, t.key),struct('B', 20, t.key))) tf AS col1, col2, col3
PREHOOK: type: QUERY
PREHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT tf.col1, tf.col2, tf.col3
FROM
  (SELECT key, value FROM mytbl_n1) t
  LATERAL VIEW
  INLINE(array(struct('A', 10, t.key),struct('B', 20, t.key))) tf AS col1, col2, col3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: mytbl_n1
          Select Operator
            expressions: array(struct(key,value,'A',10,key),struct(key,value,'B',20,key)) (type: array<struct<col1:string,col2:string,col3:string,col4:int,col5:string>>)
            outputColumnNames: _col0
            UDTF Operator
              function name: inline
              Select Operator
                expressions: col3 (type: string), col4 (type: int), col5 (type: string)
                outputColumnNames: _col0, _col1, _col2
                ListSink

PREHOOK: query: SELECT tf.col1, tf.col2, tf.col3
FROM
  (SELECT key, value FROM mytbl_n1) t
  LATERAL VIEW
  INLINE(array(struct('A', 10, t.key),struct('B', 20, t.key))) tf AS col1, col2, col3
PREHOOK: type: QUERY
PREHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
POSTHOOK: query: SELECT tf.col1, tf.col2, tf.col3
FROM
  (SELECT key, value FROM mytbl_n1) t
  LATERAL VIEW
  INLINE(array(struct('A', 10, t.key),struct('B', 20, t.key))) tf AS col1, col2, col3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
A	10	0
A	10	0
A	10	0
A	10	10
A	10	100
B	20	0
B	20	0
B	20	0
B	20	10
B	20	100
PREHOOK: query: EXPLAIN
SELECT INLINE(array(struct('A', 10, 30),struct('B', 20, 30))) AS (col1, col2, col3)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT INLINE(array(struct('A', 10, 30),struct('B', 20, 30))) AS (col1, col2, col3)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: _dummy_table
          Row Limit Per Split: 1
          Select Operator
            expressions: array(const struct('A',10,30),const struct('B',20,30)) (type: array<struct<col1:string,col2:int,col3:int>>)
            outputColumnNames: _col0
            UDTF Operator
              function name: inline
              Select Operator
                expressions: col1 (type: string), col2 (type: int), col3 (type: int)
                outputColumnNames: _col0, _col1, _col2
                ListSink

PREHOOK: query: SELECT INLINE(array(struct('A', 10, 30),struct('B', 20, 30))) AS (col1, col2, col3)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT INLINE(array(struct('A', 10, 30),struct('B', 20, 30))) AS (col1, col2, col3)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
A	10	30
B	20	30
PREHOOK: query: EXPLAIN
SELECT tf.col1, tf.col2, tf.col3
FROM
  TABLE(VALUES('A', 10, 30.0),('B', 20, 30.0)) AS tf(col1, col2, col3)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT tf.col1, tf.col2, tf.col3
FROM
  TABLE(VALUES('A', 10, 30.0),('B', 20, 30.0)) AS tf(col1, col2, col3)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: _dummy_table
          Row Limit Per Split: 1
          Select Operator
            expressions: array(const struct('A',10,30),const struct('B',20,30)) (type: array<struct<col1:string,col2:int,col3:decimal(2,0)>>)
            outputColumnNames: _col0
            UDTF Operator
              function name: inline
              Select Operator
                expressions: col1 (type: string), col2 (type: int), col3 (type: decimal(2,0))
                outputColumnNames: _col0, _col1, _col2
                ListSink

PREHOOK: query: SELECT tf.col1, tf.col2, tf.col3
FROM
  TABLE(VALUES('A', 10, 30),('B', 20, 30)) AS tf(col1, col2, col3)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT tf.col1, tf.col2, tf.col3
FROM
  TABLE(VALUES('A', 10, 30),('B', 20, 30)) AS tf(col1, col2, col3)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
A	10	30
B	20	30
Warning: Shuffle Join MERGEJOIN[11][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT tf.col1, tf.col2, tf.col3
FROM
  TABLE(VALUES('A', 10, 30),('B', 20, 30)) AS tf(col1, col2, col3),
  (SELECT key, value FROM mytbl_n1) t
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT tf.col1, tf.col2, tf.col3
FROM
  TABLE(VALUES('A', 10, 30),('B', 20, 30)) AS tf(col1, col2, col3),
  (SELECT key, value FROM mytbl_n1) t
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: _dummy_table
                  Row Limit Per Split: 1
                  Statistics: Num rows: 1 Data size: 10 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: array(const struct('A',10,30),const struct('B',20,30)) (type: array<struct<col1:string,col2:int,col3:int>>)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 2560 Basic stats: COMPLETE Column stats: COMPLETE
                    UDTF Operator
                      Statistics: Num rows: 1 Data size: 2560 Basic stats: COMPLETE Column stats: COMPLETE
                      function name: inline
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 2560 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: col1 (type: string), col2 (type: int), col3 (type: int)
            Execution mode: llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: mytbl_n1
                  Statistics: Num rows: 5 Data size: 41 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    Statistics: Num rows: 5 Data size: 20 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 5 Data size: 20 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 5 Data size: 580 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 5 Data size: 580 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[11][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT tf.col1, tf.col2, tf.col3
FROM
  TABLE(VALUES('A', 10, 30),('B', 20, 30)) AS tf(col1, col2, col3),
  (SELECT key, value FROM mytbl_n1) t
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
POSTHOOK: query: SELECT tf.col1, tf.col2, tf.col3
FROM
  TABLE(VALUES('A', 10, 30),('B', 20, 30)) AS tf(col1, col2, col3),
  (SELECT key, value FROM mytbl_n1) t
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
A	10	30
A	10	30
A	10	30
A	10	30
A	10	30
B	20	30
B	20	30
B	20	30
B	20	30
B	20	30
Warning: Shuffle Join MERGEJOIN[14][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT tf.col1, tf.col2, tf.col3
FROM
  TABLE(VALUES('A', 10, 30),('B', 20, 30)) AS tf(col1, col2, col3),
  TABLE(VALUES('A', 10),('B', 20)) AS tf2(col1, col2)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT tf.col1, tf.col2, tf.col3
FROM
  TABLE(VALUES('A', 10, 30),('B', 20, 30)) AS tf(col1, col2, col3),
  TABLE(VALUES('A', 10),('B', 20)) AS tf2(col1, col2)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: _dummy_table
                  Row Limit Per Split: 1
                  Statistics: Num rows: 1 Data size: 10 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: array(const struct('A',10,30),const struct('B',20,30)) (type: array<struct<col1:string,col2:int,col3:int>>)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 2560 Basic stats: COMPLETE Column stats: COMPLETE
                    UDTF Operator
                      Statistics: Num rows: 1 Data size: 2560 Basic stats: COMPLETE Column stats: COMPLETE
                      function name: inline
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 2560 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: col1 (type: string), col2 (type: int), col3 (type: int)
            Execution mode: llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: _dummy_table
                  Row Limit Per Split: 1
                  Statistics: Num rows: 1 Data size: 10 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: array(const struct('A',10),const struct('B',20)) (type: array<struct<col1:string,col2:int>>)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 2440 Basic stats: COMPLETE Column stats: COMPLETE
                    UDTF Operator
                      Statistics: Num rows: 1 Data size: 2440 Basic stats: COMPLETE Column stats: COMPLETE
                      function name: inline
                      Select Operator
                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          null sort order: 
                          sort order: 
                          Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[14][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT tf.col1, tf.col2, tf.col3
FROM
  TABLE(VALUES('A', 10, 30),('B', 20, 30)) AS tf(col1, col2, col3),
  TABLE(VALUES('A', 10),('B', 20)) AS tf2(col1, col2)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: SELECT tf.col1, tf.col2, tf.col3
FROM
  TABLE(VALUES('A', 10, 30),('B', 20, 30)) AS tf(col1, col2, col3),
  TABLE(VALUES('A', 10),('B', 20)) AS tf2(col1, col2)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
A	10	30
A	10	30
B	20	30
B	20	30
Warning: Shuffle Join MERGEJOIN[11][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT tf.col1, tf.col2, tf.col3
FROM
  (SELECT key, value FROM mytbl_n1) t,
  TABLE(VALUES('A', 10, 30),('B', 20, 30)) AS tf(col1, col2, col3)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT tf.col1, tf.col2, tf.col3
FROM
  (SELECT key, value FROM mytbl_n1) t,
  TABLE(VALUES('A', 10, 30),('B', 20, 30)) AS tf(col1, col2, col3)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: mytbl_n1
                  Statistics: Num rows: 5 Data size: 41 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    Statistics: Num rows: 5 Data size: 20 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 5 Data size: 20 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: _dummy_table
                  Row Limit Per Split: 1
                  Statistics: Num rows: 1 Data size: 10 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: array(const struct('A',10,30),const struct('B',20,30)) (type: array<struct<col1:string,col2:int,col3:int>>)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 2560 Basic stats: COMPLETE Column stats: COMPLETE
                    UDTF Operator
                      Statistics: Num rows: 1 Data size: 2560 Basic stats: COMPLETE Column stats: COMPLETE
                      function name: inline
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 2560 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: col1 (type: string), col2 (type: int), col3 (type: int)
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col1, _col2, _col3
                Statistics: Num rows: 5 Data size: 580 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col1 (type: string), _col2 (type: int), _col3 (type: int)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 5 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 5 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[11][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT tf.col1, tf.col2, tf.col3
FROM
  (SELECT key, value FROM mytbl_n1) t,
  TABLE(VALUES('A', 10, 30),('B', 20, 30)) AS tf(col1, col2, col3)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
POSTHOOK: query: SELECT tf.col1, tf.col2, tf.col3
FROM
  (SELECT key, value FROM mytbl_n1) t,
  TABLE(VALUES('A', 10, 30),('B', 20, 30)) AS tf(col1, col2, col3)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
A	10	30
A	10	30
A	10	30
A	10	30
A	10	30
B	20	30
B	20	30
B	20	30
B	20	30
B	20	30
PREHOOK: query: EXPLAIN
SELECT tf.col1, tf.col2, tf.col3
FROM
  (SELECT key, value FROM mytbl_n1) t,
  LATERAL TABLE(VALUES('A', 10, t.key),('B', 20, t.key)) AS tf(col1, col2, col3)
PREHOOK: type: QUERY
PREHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT tf.col1, tf.col2, tf.col3
FROM
  (SELECT key, value FROM mytbl_n1) t,
  LATERAL TABLE(VALUES('A', 10, t.key),('B', 20, t.key)) AS tf(col1, col2, col3)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: mytbl_n1
          Select Operator
            expressions: array(struct(key,value,'A',10,key),struct(key,value,'B',20,key)) (type: array<struct<col1:string,col2:string,col3:string,col4:int,col5:string>>)
            outputColumnNames: _col0
            UDTF Operator
              function name: inline
              Select Operator
                expressions: col3 (type: string), col4 (type: int), col5 (type: string)
                outputColumnNames: _col0, _col1, _col2
                ListSink

PREHOOK: query: SELECT tf.col1, tf.col2, tf.col3
FROM
  (SELECT key, value FROM mytbl_n1) t,
  LATERAL TABLE(VALUES('A', 10, t.key),('B', 20, t.key)) AS tf(col1, col2, col3)
PREHOOK: type: QUERY
PREHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
POSTHOOK: query: SELECT tf.col1, tf.col2, tf.col3
FROM
  (SELECT key, value FROM mytbl_n1) t,
  LATERAL TABLE(VALUES('A', 10, t.key),('B', 20, t.key)) AS tf(col1, col2, col3)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
A	10	0
A	10	0
A	10	0
A	10	10
A	10	100
B	20	0
B	20	0
B	20	0
B	20	10
B	20	100
PREHOOK: query: EXPLAIN
SELECT t.key
FROM
  (SELECT key, value FROM mytbl_n1) t,
  LATERAL TABLE(VALUES('A', 10, t.key),('B', 20, t.key)) AS tf
PREHOOK: type: QUERY
PREHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT t.key
FROM
  (SELECT key, value FROM mytbl_n1) t,
  LATERAL TABLE(VALUES('A', 10, t.key),('B', 20, t.key)) AS tf
POSTHOOK: type: QUERY
POSTHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: mytbl_n1
          Select Operator
            expressions: array(struct(key,value,'A',10,key),struct(key,value,'B',20,key)) (type: array<struct<col1:string,col2:string,col3:string,col4:int,col5:string>>)
            outputColumnNames: _col0
            UDTF Operator
              function name: inline
              Select Operator
                expressions: col1 (type: string)
                outputColumnNames: _col0
                ListSink

PREHOOK: query: SELECT t.key
FROM
  (SELECT key, value FROM mytbl_n1) t,
  LATERAL TABLE(VALUES('A', 10, t.key),('B', 20, t.key)) AS tf
PREHOOK: type: QUERY
PREHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
POSTHOOK: query: SELECT t.key
FROM
  (SELECT key, value FROM mytbl_n1) t,
  LATERAL TABLE(VALUES('A', 10, t.key),('B', 20, t.key)) AS tf
POSTHOOK: type: QUERY
POSTHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
0
0
0
0
0
0
10
10
100
100
PREHOOK: query: EXPLAIN
SELECT tf.col3
FROM
  (SELECT key, value FROM mytbl_n1) t,
  LATERAL TABLE(VALUES('A', 10, t.key),('B', 20, t.key)) AS tf(col1, col2, col3)
PREHOOK: type: QUERY
PREHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT tf.col3
FROM
  (SELECT key, value FROM mytbl_n1) t,
  LATERAL TABLE(VALUES('A', 10, t.key),('B', 20, t.key)) AS tf(col1, col2, col3)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: mytbl_n1
          Select Operator
            expressions: array(struct(key,value,'A',10,key),struct(key,value,'B',20,key)) (type: array<struct<col1:string,col2:string,col3:string,col4:int,col5:string>>)
            outputColumnNames: _col0
            UDTF Operator
              function name: inline
              Select Operator
                expressions: col5 (type: string)
                outputColumnNames: _col0
                ListSink

PREHOOK: query: SELECT tf.col3
FROM
  (SELECT key, value FROM mytbl_n1) t,
  LATERAL TABLE(VALUES('A', 10, t.key),('B', 20, t.key)) AS tf(col1, col2, col3)
PREHOOK: type: QUERY
PREHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
POSTHOOK: query: SELECT tf.col3
FROM
  (SELECT key, value FROM mytbl_n1) t,
  LATERAL TABLE(VALUES('A', 10, t.key),('B', 20, t.key)) AS tf(col1, col2, col3)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
0
0
0
0
0
0
10
10
100
100
PREHOOK: query: EXPLAIN
SELECT tf.col3
FROM
  (SELECT row_number() over (order by key desc) as r FROM mytbl_n1) t,
  LATERAL TABLE(VALUES('A', 10, t.r),('B', 20, t.r)) AS tf(col1, col2, col3)
PREHOOK: type: QUERY
PREHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT tf.col3
FROM
  (SELECT row_number() over (order by key desc) as r FROM mytbl_n1) t,
  LATERAL TABLE(VALUES('A', 10, t.r),('B', 20, t.r)) AS tf(col1, col2, col3)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: mytbl_n1
                  Statistics: Num rows: 5 Data size: 430 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: 0 (type: int), key (type: string)
                    null sort order: aa
                    sort order: +-
                    Map-reduce partition columns: 0 (type: int)
                    Statistics: Num rows: 5 Data size: 430 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey1 (type: string)
                outputColumnNames: _col0
                Statistics: Num rows: 5 Data size: 1770 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col0 DESC NULLS FIRST
                        partition by: 0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: row_number_window_0
                              name: row_number
                              window function: GenericUDAFRowNumberEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 5 Data size: 1770 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: array(struct(row_number_window_0,'A',10,row_number_window_0),struct(row_number_window_0,'B',20,row_number_window_0)) (type: array<struct<col1:int,col2:string,col3:int,col4:int>>)
                    outputColumnNames: _col0
                    Statistics: Num rows: 5 Data size: 13400 Basic stats: COMPLETE Column stats: COMPLETE
                    UDTF Operator
                      Statistics: Num rows: 5 Data size: 13400 Basic stats: COMPLETE Column stats: COMPLETE
                      function name: inline
                      Select Operator
                        expressions: col4 (type: int)
                        outputColumnNames: _col0
                        Statistics: Num rows: 5 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                        File Output Operator
                          compressed: false
                          Statistics: Num rows: 5 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                          table:
                              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT tf.col3
FROM
  (SELECT row_number() over (order by key desc) as r FROM mytbl_n1) t,
  LATERAL TABLE(VALUES('A', 10, t.r),('B', 20, t.r)) AS tf(col1, col2, col3)
PREHOOK: type: QUERY
PREHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
POSTHOOK: query: SELECT tf.col3
FROM
  (SELECT row_number() over (order by key desc) as r FROM mytbl_n1) t,
  LATERAL TABLE(VALUES('A', 10, t.r),('B', 20, t.r)) AS tf(col1, col2, col3)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@mytbl_n1
#### A masked pattern was here ####
1
1
2
2
3
3
4
4
5
5
