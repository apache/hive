PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT cboolean1,
       cbigint,
       csmallint,
       ctinyint,
       ctimestamp1,
       cstring1,
       (cbigint + cbigint) as c1,
       (csmallint % -257) as c2,
       (-(csmallint)) as c3,
       (-(ctinyint)) as c4,
       ((-(ctinyint)) + 17) as c5,
       (cbigint * (-(csmallint))) as c6,
       (cint % csmallint) as c7,
       (-(ctinyint)) as c8,
       ((-(ctinyint)) % ctinyint) as c9
FROM   alltypesparquet
WHERE  ((ctinyint != 0)
        AND (((ctimestamp1 <= -28800)
          OR ((ctinyint = cint)
               OR (cstring2 LIKE 'ss')))
          AND ((988888 < cdouble)
              OR ((ctimestamp2 > -28815)
                  AND (3569 >= cdouble)))))
ORDER BY cboolean1, cbigint, csmallint, ctinyint, ctimestamp1, cstring1, c1, c2, c3, c4, c5, c6, c7, c8, c9
LIMIT 25
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesparquet
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT cboolean1,
       cbigint,
       csmallint,
       ctinyint,
       ctimestamp1,
       cstring1,
       (cbigint + cbigint) as c1,
       (csmallint % -257) as c2,
       (-(csmallint)) as c3,
       (-(ctinyint)) as c4,
       ((-(ctinyint)) + 17) as c5,
       (cbigint * (-(csmallint))) as c6,
       (cint % csmallint) as c7,
       (-(ctinyint)) as c8,
       ((-(ctinyint)) % ctinyint) as c9
FROM   alltypesparquet
WHERE  ((ctinyint != 0)
        AND (((ctimestamp1 <= -28800)
          OR ((ctinyint = cint)
               OR (cstring2 LIKE 'ss')))
          AND ((988888 < cdouble)
              OR ((ctimestamp2 > -28815)
                  AND (3569 >= cdouble)))))
ORDER BY cboolean1, cbigint, csmallint, ctinyint, ctimestamp1, cstring1, c1, c2, c3, c4, c5, c6, c7, c8, c9
LIMIT 25
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesparquet
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesparquet
                  filterExpr: (((cdouble > 988888.0D) or ((UDFToDouble(ctimestamp2) > -28815.0D) and (cdouble <= 3569.0D))) and ((UDFToDouble(ctimestamp1) <= -28800.0D) or (UDFToInteger(ctinyint) = cint) or (cstring2 like 'ss')) and (ctinyint <> 0Y)) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 2770698 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprAndExpr(children: FilterExprOrExpr(children: FilterDoubleColGreaterDoubleScalar(col 5:double, val 988888.0), FilterExprAndExpr(children: FilterDoubleColGreaterDoubleScalar(col 13:double, val -28815.0)(children: CastTimestampToDouble(col 9:timestamp) -> 13:double), FilterDoubleColLessEqualDoubleScalar(col 5:double, val 3569.0))), FilterExprOrExpr(children: FilterDoubleColLessEqualDoubleScalar(col 14:double, val -28800.0)(children: CastTimestampToDouble(col 8:timestamp) -> 14:double), FilterLongColEqualLongColumn(col 0:int, col 2:int)(children: col 0:tinyint), FilterStringColLikeStringScalar(col 7:string, pattern ss)), FilterLongColNotEqualLongScalar(col 0:tinyint, val 0))
                    predicate: (((cdouble > 988888.0D) or ((UDFToDouble(ctimestamp2) > -28815.0D) and (cdouble <= 3569.0D))) and ((UDFToDouble(ctimestamp1) <= -28800.0D) or (UDFToInteger(ctinyint) = cint) or (cstring2 like 'ss')) and (ctinyint <> 0Y)) (type: boolean)
                    Statistics: Num rows: 11033 Data size: 2487724 Basic stats: COMPLETE Column stats: COMPLETE
                    Top N Key Operator
                      sort order: +++++++++++++++
                      keys: cboolean1 (type: boolean), cbigint (type: bigint), csmallint (type: smallint), ctinyint (type: tinyint), ctimestamp1 (type: timestamp), cstring1 (type: string), (cbigint + cbigint) (type: bigint), (UDFToInteger(csmallint) % -257) (type: int), (- csmallint) (type: smallint), (- ctinyint) (type: tinyint), (UDFToInteger((- ctinyint)) + 17) (type: int), (cbigint * UDFToLong((- csmallint))) (type: bigint), (cint % UDFToInteger(csmallint)) (type: int), (- ctinyint) (type: tinyint), ((- ctinyint) % ctinyint) (type: tinyint)
                      null sort order: zzzzzzzzzzzzzzz
                      Statistics: Num rows: 11033 Data size: 2487724 Basic stats: COMPLETE Column stats: COMPLETE
                      top n: 25
                      Top N Key Vectorization:
                          className: VectorTopNKeyOperator
                          keyExpressions: col 10:boolean, col 3:bigint, col 1:smallint, col 0:tinyint, col 8:timestamp, col 6:string, LongColAddLongColumn(col 3:bigint, col 3:bigint) -> 15:bigint, LongColModuloLongScalar(col 1:int, val -257)(children: col 1:smallint) -> 16:int, LongColUnaryMinus(col 1:smallint) -> 17:smallint, LongColUnaryMinus(col 0:tinyint) -> 18:tinyint, LongColAddLongScalar(col 19:int, val 17)(children: LongColUnaryMinus(col 0:tinyint) -> 19:tinyint) -> 20:int, LongColMultiplyLongColumn(col 3:bigint, col 21:bigint)(children: LongColUnaryMinus(col 1:smallint) -> 21:smallint) -> 22:bigint, LongColModuloLongColumn(col 2:int, col 1:int)(children: col 1:smallint) -> 23:int, LongColUnaryMinus(col 0:tinyint) -> 24:tinyint, LongColModuloLongColumn(col 25:tinyint, col 0:tinyint)(children: LongColUnaryMinus(col 0:tinyint) -> 25:tinyint) -> 26:tinyint
                          native: true
                      Select Operator
                        expressions: cboolean1 (type: boolean), cbigint (type: bigint), csmallint (type: smallint), ctinyint (type: tinyint), ctimestamp1 (type: timestamp), cstring1 (type: string), (cbigint + cbigint) (type: bigint), (UDFToInteger(csmallint) % -257) (type: int), (- csmallint) (type: smallint), (- ctinyint) (type: tinyint), (UDFToInteger((- ctinyint)) + 17) (type: int), (cbigint * UDFToLong((- csmallint))) (type: bigint), (cint % UDFToInteger(csmallint)) (type: int), (- ctinyint) (type: tinyint), ((- ctinyint) % ctinyint) (type: tinyint)
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14
                        Select Vectorization:
                            className: VectorSelectOperator
                            native: true
                            projectedOutputColumnNums: [10, 3, 1, 0, 8, 6, 19, 21, 25, 27, 29, 31, 32, 33, 35]
                            selectExpressions: LongColAddLongColumn(col 3:bigint, col 3:bigint) -> 19:bigint, LongColModuloLongScalar(col 1:int, val -257)(children: col 1:smallint) -> 21:int, LongColUnaryMinus(col 1:smallint) -> 25:smallint, LongColUnaryMinus(col 0:tinyint) -> 27:tinyint, LongColAddLongScalar(col 28:int, val 17)(children: LongColUnaryMinus(col 0:tinyint) -> 28:tinyint) -> 29:int, LongColMultiplyLongColumn(col 3:bigint, col 30:bigint)(children: LongColUnaryMinus(col 1:smallint) -> 30:smallint) -> 31:bigint, LongColModuloLongColumn(col 2:int, col 1:int)(children: col 1:smallint) -> 32:int, LongColUnaryMinus(col 0:tinyint) -> 33:tinyint, LongColModuloLongColumn(col 34:tinyint, col 0:tinyint)(children: LongColUnaryMinus(col 0:tinyint) -> 34:tinyint) -> 35:tinyint
                        Statistics: Num rows: 11033 Data size: 1323416 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: boolean), _col1 (type: bigint), _col2 (type: smallint), _col3 (type: tinyint), _col4 (type: timestamp), _col5 (type: string), _col6 (type: bigint), _col7 (type: int), _col8 (type: smallint), _col9 (type: tinyint), _col10 (type: int), _col11 (type: bigint), _col12 (type: int), _col13 (type: tinyint), _col14 (type: tinyint)
                          null sort order: zzzzzzzzzzzzzzz
                          sort order: +++++++++++++++
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkObjectHashOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          Statistics: Num rows: 11033 Data size: 1323416 Basic stats: COMPLETE Column stats: COMPLETE
                          TopN Hash Memory Usage: 0.1
            Execution mode: vectorized, llap
            LLAP IO: all inputs (cache only)
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: boolean), KEY.reducesinkkey1 (type: bigint), KEY.reducesinkkey2 (type: smallint), KEY.reducesinkkey3 (type: tinyint), KEY.reducesinkkey4 (type: timestamp), KEY.reducesinkkey5 (type: string), KEY.reducesinkkey6 (type: bigint), KEY.reducesinkkey7 (type: int), KEY.reducesinkkey8 (type: smallint), KEY.reducesinkkey9 (type: tinyint), KEY.reducesinkkey10 (type: int), KEY.reducesinkkey11 (type: bigint), KEY.reducesinkkey12 (type: int), KEY.reducesinkkey9 (type: tinyint), KEY.reducesinkkey14 (type: tinyint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 9, 14]
                Statistics: Num rows: 11033 Data size: 1323416 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 25
                  Limit Vectorization:
                      className: VectorLimitOperator
                      native: true
                  Statistics: Num rows: 25 Data size: 3102 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 25 Data size: 3102 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 25
      Processor Tree:
        ListSink

PREHOOK: query: SELECT cboolean1,
       cbigint,
       csmallint,
       ctinyint,
       ctimestamp1,
       cstring1,
       (cbigint + cbigint) as c1,
       (csmallint % -257) as c2,
       (-(csmallint)) as c3,
       (-(ctinyint)) as c4,
       ((-(ctinyint)) + 17) as c5,
       (cbigint * (-(csmallint))) as c6,
       (cint % csmallint) as c7,
       (-(ctinyint)) as c8,
       ((-(ctinyint)) % ctinyint) as c9
FROM   alltypesparquet
WHERE  ((ctinyint != 0)
        AND (((ctimestamp1 <= -28800)
          OR ((ctinyint = cint)
               OR (cstring2 LIKE 'ss')))
          AND ((988888 < cdouble)
              OR ((ctimestamp2 > -28815)
                  AND (3569 >= cdouble)))))
ORDER BY cboolean1, cbigint, csmallint, ctinyint, ctimestamp1, cstring1, c1, c2, c3, c4, c5, c6, c7, c8, c9
LIMIT 25
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesparquet
#### A masked pattern was here ####
POSTHOOK: query: SELECT cboolean1,
       cbigint,
       csmallint,
       ctinyint,
       ctimestamp1,
       cstring1,
       (cbigint + cbigint) as c1,
       (csmallint % -257) as c2,
       (-(csmallint)) as c3,
       (-(ctinyint)) as c4,
       ((-(ctinyint)) + 17) as c5,
       (cbigint * (-(csmallint))) as c6,
       (cint % csmallint) as c7,
       (-(ctinyint)) as c8,
       ((-(ctinyint)) % ctinyint) as c9
FROM   alltypesparquet
WHERE  ((ctinyint != 0)
        AND (((ctimestamp1 <= -28800)
          OR ((ctinyint = cint)
               OR (cstring2 LIKE 'ss')))
          AND ((988888 < cdouble)
              OR ((ctimestamp2 > -28815)
                  AND (3569 >= cdouble)))))
ORDER BY cboolean1, cbigint, csmallint, ctinyint, ctimestamp1, cstring1, c1, c2, c3, c4, c5, c6, c7, c8, c9
LIMIT 25
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesparquet
#### A masked pattern was here ####
true	NULL	-15892	29	1969-12-31 15:59:57.937	821UdmGbkEf4j	NULL	-215	15892	-29	-12	NULL	171	-29	0
true	NULL	-15899	50	1969-12-31 15:59:46.926	821UdmGbkEf4j	NULL	-222	15899	-50	-33	NULL	10210	-50	0
true	NULL	-15903	-2	1969-12-31 15:59:46.371	cvLH6Eat2yFsyy7p	NULL	-226	15903	2	19	NULL	14465	2	0
true	NULL	-15920	-64	1969-12-31 15:59:51.859	cvLH6Eat2yFsyy7p	NULL	-243	15920	64	81	NULL	6687	64	0
true	NULL	-15922	-17	1969-12-31 15:59:46.164	821UdmGbkEf4j	NULL	-245	15922	17	34	NULL	10851	17	0
true	NULL	-15923	49	1969-12-31 15:59:47.323	cvLH6Eat2yFsyy7p	NULL	-246	15923	-49	-32	NULL	2628	-49	0
true	NULL	-15935	-6	1969-12-31 15:59:45.859	1cGVWH7n1QU	NULL	-1	15935	6	23	NULL	12046	6	0
true	NULL	-15948	31	1969-12-31 15:59:47.577	821UdmGbkEf4j	NULL	-14	15948	-31	-14	NULL	7799	-31	0
true	NULL	-15948	6	1969-12-31 15:59:49.269	1cGVWH7n1QU	NULL	-14	15948	-6	11	NULL	12436	-6	0
true	NULL	-15980	-6	1969-12-31 15:59:54.84	1cGVWH7n1QU	NULL	-46	15980	6	23	NULL	14836	6	0
true	NULL	-15999	4	1969-12-31 15:59:46.491	1cGVWH7n1QU	NULL	-65	15999	-4	13	NULL	1231	-4	0
true	NULL	-16017	-21	1969-12-31 15:59:44.02	821UdmGbkEf4j	NULL	-83	16017	21	38	NULL	2282	21	0
true	NULL	-16025	-42	1969-12-31 15:59:54.534	cvLH6Eat2yFsyy7p	NULL	-91	16025	42	59	NULL	14242	42	0
true	NULL	-16036	-15	1969-12-31 15:59:58.681	1cGVWH7n1QU	NULL	-102	16036	15	32	NULL	7928	15	0
true	NULL	-16059	-35	1969-12-31 15:59:53.038	821UdmGbkEf4j	NULL	-125	16059	35	52	NULL	12437	35	0
true	NULL	-16076	59	1969-12-31 15:59:55.023	821UdmGbkEf4j	NULL	-142	16076	-59	-42	NULL	7907	-59	0
true	NULL	-16122	50	1969-12-31 15:59:51.608	1cGVWH7n1QU	NULL	-188	16122	-50	-33	NULL	1828	-50	0
true	NULL	-16123	-20	1969-12-31 15:59:51.177	1cGVWH7n1QU	NULL	-189	16123	20	37	NULL	2217	20	0
true	NULL	-16153	35	1969-12-31 15:59:52.036	1cGVWH7n1QU	NULL	-219	16153	-35	-18	NULL	14817	-35	0
true	NULL	-16169	5	1969-12-31 15:59:45.059	1cGVWH7n1QU	NULL	-235	16169	-5	12	NULL	6104	-5	0
true	NULL	-16207	-4	1969-12-31 15:59:45.956	cvLH6Eat2yFsyy7p	NULL	-16	16207	4	21	NULL	8290	4	0
true	NULL	-16221	-12	1969-12-31 15:59:45.877	1cGVWH7n1QU	NULL	-30	16221	12	29	NULL	1378	12	0
true	NULL	-16227	2	1969-12-31 15:59:44.065	821UdmGbkEf4j	NULL	-36	16227	-2	15	NULL	9761	-2	0
true	NULL	-16305	3	1969-12-31 15:59:43.878	1cGVWH7n1QU	NULL	-114	16305	-3	14	NULL	8491	-3	0
true	NULL	-16339	15	1969-12-31 15:59:53.966	821UdmGbkEf4j	NULL	-148	16339	-15	2	NULL	12588	-15	0
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT cboolean1,
       cbigint,
       csmallint,
       ctinyint,
       ctimestamp1,
       cstring1,
       (cbigint + cbigint) as c1,
       (csmallint % -257) as c2,
       (-(csmallint)) as c3,
       (-(ctinyint)) as c4,
       ((-(ctinyint)) + 17) as c5,
       (cbigint * (-(csmallint))) as c6,
       (cint % csmallint) as c7,
       (-(ctinyint)) as c8,
       ((-(ctinyint)) % ctinyint) as c9
FROM   alltypesparquet
WHERE  ((ctinyint != 0)
        AND (((ctimestamp1 <= -28800.0)
          OR ((ctinyint = cint)
               OR (cstring2 LIKE 'ss')))
          AND ((988888 < cdouble)
              OR ((ctimestamp2 > -28792.3149999999999995)
                  AND (3569 >= cdouble)))))
ORDER BY cboolean1, cbigint, csmallint, ctinyint, ctimestamp1, cstring1, c1, c2, c3, c4, c5, c6, c7, c8, c9
LIMIT 25
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesparquet
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT cboolean1,
       cbigint,
       csmallint,
       ctinyint,
       ctimestamp1,
       cstring1,
       (cbigint + cbigint) as c1,
       (csmallint % -257) as c2,
       (-(csmallint)) as c3,
       (-(ctinyint)) as c4,
       ((-(ctinyint)) + 17) as c5,
       (cbigint * (-(csmallint))) as c6,
       (cint % csmallint) as c7,
       (-(ctinyint)) as c8,
       ((-(ctinyint)) % ctinyint) as c9
FROM   alltypesparquet
WHERE  ((ctinyint != 0)
        AND (((ctimestamp1 <= -28800.0)
          OR ((ctinyint = cint)
               OR (cstring2 LIKE 'ss')))
          AND ((988888 < cdouble)
              OR ((ctimestamp2 > -28792.3149999999999995)
                  AND (3569 >= cdouble)))))
ORDER BY cboolean1, cbigint, csmallint, ctinyint, ctimestamp1, cstring1, c1, c2, c3, c4, c5, c6, c7, c8, c9
LIMIT 25
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesparquet
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesparquet
                  filterExpr: (((cdouble > 988888.0D) or ((UDFToDouble(ctimestamp2) > -28792.315D) and (cdouble <= 3569.0D))) and ((UDFToDouble(ctimestamp1) <= -28800.0D) or (UDFToInteger(ctinyint) = cint) or (cstring2 like 'ss')) and (ctinyint <> 0Y)) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 2770698 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprAndExpr(children: FilterExprOrExpr(children: FilterDoubleColGreaterDoubleScalar(col 5:double, val 988888.0), FilterExprAndExpr(children: FilterDoubleColGreaterDoubleScalar(col 13:double, val -28792.315)(children: CastTimestampToDouble(col 9:timestamp) -> 13:double), FilterDoubleColLessEqualDoubleScalar(col 5:double, val 3569.0))), FilterExprOrExpr(children: FilterDoubleColLessEqualDoubleScalar(col 14:double, val -28800.0)(children: CastTimestampToDouble(col 8:timestamp) -> 14:double), FilterLongColEqualLongColumn(col 0:int, col 2:int)(children: col 0:tinyint), FilterStringColLikeStringScalar(col 7:string, pattern ss)), FilterLongColNotEqualLongScalar(col 0:tinyint, val 0))
                    predicate: (((cdouble > 988888.0D) or ((UDFToDouble(ctimestamp2) > -28792.315D) and (cdouble <= 3569.0D))) and ((UDFToDouble(ctimestamp1) <= -28800.0D) or (UDFToInteger(ctinyint) = cint) or (cstring2 like 'ss')) and (ctinyint <> 0Y)) (type: boolean)
                    Statistics: Num rows: 11033 Data size: 2487724 Basic stats: COMPLETE Column stats: COMPLETE
                    Top N Key Operator
                      sort order: +++++++++++++++
                      keys: cboolean1 (type: boolean), cbigint (type: bigint), csmallint (type: smallint), ctinyint (type: tinyint), ctimestamp1 (type: timestamp), cstring1 (type: string), (cbigint + cbigint) (type: bigint), (UDFToInteger(csmallint) % -257) (type: int), (- csmallint) (type: smallint), (- ctinyint) (type: tinyint), (UDFToInteger((- ctinyint)) + 17) (type: int), (cbigint * UDFToLong((- csmallint))) (type: bigint), (cint % UDFToInteger(csmallint)) (type: int), (- ctinyint) (type: tinyint), ((- ctinyint) % ctinyint) (type: tinyint)
                      null sort order: zzzzzzzzzzzzzzz
                      Statistics: Num rows: 11033 Data size: 2487724 Basic stats: COMPLETE Column stats: COMPLETE
                      top n: 25
                      Top N Key Vectorization:
                          className: VectorTopNKeyOperator
                          keyExpressions: col 10:boolean, col 3:bigint, col 1:smallint, col 0:tinyint, col 8:timestamp, col 6:string, LongColAddLongColumn(col 3:bigint, col 3:bigint) -> 15:bigint, LongColModuloLongScalar(col 1:int, val -257)(children: col 1:smallint) -> 16:int, LongColUnaryMinus(col 1:smallint) -> 17:smallint, LongColUnaryMinus(col 0:tinyint) -> 18:tinyint, LongColAddLongScalar(col 19:int, val 17)(children: LongColUnaryMinus(col 0:tinyint) -> 19:tinyint) -> 20:int, LongColMultiplyLongColumn(col 3:bigint, col 21:bigint)(children: LongColUnaryMinus(col 1:smallint) -> 21:smallint) -> 22:bigint, LongColModuloLongColumn(col 2:int, col 1:int)(children: col 1:smallint) -> 23:int, LongColUnaryMinus(col 0:tinyint) -> 24:tinyint, LongColModuloLongColumn(col 25:tinyint, col 0:tinyint)(children: LongColUnaryMinus(col 0:tinyint) -> 25:tinyint) -> 26:tinyint
                          native: true
                      Select Operator
                        expressions: cboolean1 (type: boolean), cbigint (type: bigint), csmallint (type: smallint), ctinyint (type: tinyint), ctimestamp1 (type: timestamp), cstring1 (type: string), (cbigint + cbigint) (type: bigint), (UDFToInteger(csmallint) % -257) (type: int), (- csmallint) (type: smallint), (- ctinyint) (type: tinyint), (UDFToInteger((- ctinyint)) + 17) (type: int), (cbigint * UDFToLong((- csmallint))) (type: bigint), (cint % UDFToInteger(csmallint)) (type: int), (- ctinyint) (type: tinyint), ((- ctinyint) % ctinyint) (type: tinyint)
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14
                        Select Vectorization:
                            className: VectorSelectOperator
                            native: true
                            projectedOutputColumnNums: [10, 3, 1, 0, 8, 6, 19, 21, 25, 27, 29, 31, 32, 33, 35]
                            selectExpressions: LongColAddLongColumn(col 3:bigint, col 3:bigint) -> 19:bigint, LongColModuloLongScalar(col 1:int, val -257)(children: col 1:smallint) -> 21:int, LongColUnaryMinus(col 1:smallint) -> 25:smallint, LongColUnaryMinus(col 0:tinyint) -> 27:tinyint, LongColAddLongScalar(col 28:int, val 17)(children: LongColUnaryMinus(col 0:tinyint) -> 28:tinyint) -> 29:int, LongColMultiplyLongColumn(col 3:bigint, col 30:bigint)(children: LongColUnaryMinus(col 1:smallint) -> 30:smallint) -> 31:bigint, LongColModuloLongColumn(col 2:int, col 1:int)(children: col 1:smallint) -> 32:int, LongColUnaryMinus(col 0:tinyint) -> 33:tinyint, LongColModuloLongColumn(col 34:tinyint, col 0:tinyint)(children: LongColUnaryMinus(col 0:tinyint) -> 34:tinyint) -> 35:tinyint
                        Statistics: Num rows: 11033 Data size: 1323416 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: boolean), _col1 (type: bigint), _col2 (type: smallint), _col3 (type: tinyint), _col4 (type: timestamp), _col5 (type: string), _col6 (type: bigint), _col7 (type: int), _col8 (type: smallint), _col9 (type: tinyint), _col10 (type: int), _col11 (type: bigint), _col12 (type: int), _col13 (type: tinyint), _col14 (type: tinyint)
                          null sort order: zzzzzzzzzzzzzzz
                          sort order: +++++++++++++++
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkObjectHashOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          Statistics: Num rows: 11033 Data size: 1323416 Basic stats: COMPLETE Column stats: COMPLETE
                          TopN Hash Memory Usage: 0.1
            Execution mode: vectorized, llap
            LLAP IO: all inputs (cache only)
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: boolean), KEY.reducesinkkey1 (type: bigint), KEY.reducesinkkey2 (type: smallint), KEY.reducesinkkey3 (type: tinyint), KEY.reducesinkkey4 (type: timestamp), KEY.reducesinkkey5 (type: string), KEY.reducesinkkey6 (type: bigint), KEY.reducesinkkey7 (type: int), KEY.reducesinkkey8 (type: smallint), KEY.reducesinkkey9 (type: tinyint), KEY.reducesinkkey10 (type: int), KEY.reducesinkkey11 (type: bigint), KEY.reducesinkkey12 (type: int), KEY.reducesinkkey9 (type: tinyint), KEY.reducesinkkey14 (type: tinyint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 9, 14]
                Statistics: Num rows: 11033 Data size: 1323416 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 25
                  Limit Vectorization:
                      className: VectorLimitOperator
                      native: true
                  Statistics: Num rows: 25 Data size: 3102 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 25 Data size: 3102 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 25
      Processor Tree:
        ListSink

PREHOOK: query: SELECT cboolean1,
       cbigint,
       csmallint,
       ctinyint,
       ctimestamp1,
       cstring1,
       (cbigint + cbigint) as c1,
       (csmallint % -257) as c2,
       (-(csmallint)) as c3,
       (-(ctinyint)) as c4,
       ((-(ctinyint)) + 17) as c5,
       (cbigint * (-(csmallint))) as c6,
       (cint % csmallint) as c7,
       (-(ctinyint)) as c8,
       ((-(ctinyint)) % ctinyint) as c9
FROM   alltypesparquet
WHERE  ((ctinyint != 0)
        AND (((ctimestamp1 <= -28800.0)
          OR ((ctinyint = cint)
               OR (cstring2 LIKE 'ss')))
          AND ((988888 < cdouble)
              OR ((ctimestamp2 > -28792.3149999999999995)
                  AND (3569 >= cdouble)))))
ORDER BY cboolean1, cbigint, csmallint, ctinyint, ctimestamp1, cstring1, c1, c2, c3, c4, c5, c6, c7, c8, c9
LIMIT 25
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesparquet
#### A masked pattern was here ####
POSTHOOK: query: SELECT cboolean1,
       cbigint,
       csmallint,
       ctinyint,
       ctimestamp1,
       cstring1,
       (cbigint + cbigint) as c1,
       (csmallint % -257) as c2,
       (-(csmallint)) as c3,
       (-(ctinyint)) as c4,
       ((-(ctinyint)) + 17) as c5,
       (cbigint * (-(csmallint))) as c6,
       (cint % csmallint) as c7,
       (-(ctinyint)) as c8,
       ((-(ctinyint)) % ctinyint) as c9
FROM   alltypesparquet
WHERE  ((ctinyint != 0)
        AND (((ctimestamp1 <= -28800.0)
          OR ((ctinyint = cint)
               OR (cstring2 LIKE 'ss')))
          AND ((988888 < cdouble)
              OR ((ctimestamp2 > -28792.3149999999999995)
                  AND (3569 >= cdouble)))))
ORDER BY cboolean1, cbigint, csmallint, ctinyint, ctimestamp1, cstring1, c1, c2, c3, c4, c5, c6, c7, c8, c9
LIMIT 25
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesparquet
#### A masked pattern was here ####
true	NULL	-14584	-7	1969-12-31 15:59:46.965	1cGVWH7n1QU	NULL	-192	14584	7	24	NULL	5864	7	0
true	NULL	-14739	4	1969-12-31 15:59:55.188	cvLH6Eat2yFsyy7p	NULL	-90	14739	-4	13	NULL	8966	-4	0
true	NULL	-14771	13	1969-12-31 15:59:58.839	821UdmGbkEf4j	NULL	-122	14771	-13	4	NULL	12897	-13	0
true	NULL	-15149	20	1969-12-31 15:59:46.575	1cGVWH7n1QU	NULL	-243	15149	-20	-3	NULL	10520	-20	0
true	NULL	-15344	48	1969-12-31 15:59:54.853	821UdmGbkEf4j	NULL	-181	15344	-48	-31	NULL	13871	-48	0
true	NULL	-15388	49	1969-12-31 15:59:58.545	cvLH6Eat2yFsyy7p	NULL	-225	15388	-49	-32	NULL	3131	-49	0
true	NULL	-15431	-11	1969-12-31 15:59:52.176	cvLH6Eat2yFsyy7p	NULL	-11	15431	11	28	NULL	7586	11	0
true	NULL	-15435	-21	1969-12-31 15:59:54.705	1cGVWH7n1QU	NULL	-15	15435	21	38	NULL	6586	21	0
true	NULL	-15450	-34	1969-12-31 15:59:55.681	cvLH6Eat2yFsyy7p	NULL	-30	15450	34	51	NULL	5717	34	0
true	NULL	-15478	7	1969-12-31 15:59:56.809	cvLH6Eat2yFsyy7p	NULL	-58	15478	-7	10	NULL	7501	-7	0
true	NULL	-15555	-2	1969-12-31 15:59:58.773	1cGVWH7n1QU	NULL	-135	15555	2	19	NULL	9991	2	0
true	NULL	-15659	-11	1969-12-31 15:59:48.466	cvLH6Eat2yFsyy7p	NULL	-239	15659	11	28	NULL	12199	11	0
true	NULL	-15711	-60	1969-12-31 15:59:53.115	821UdmGbkEf4j	NULL	-34	15711	60	77	NULL	7646	60	0
true	NULL	-15770	-23	1969-12-31 15:59:56.822	1cGVWH7n1QU	NULL	-93	15770	23	40	NULL	4926	23	0
true	NULL	-15794	53	1969-12-31 15:59:53.749	cvLH6Eat2yFsyy7p	NULL	-117	15794	-53	-36	NULL	4351	-53	0
true	NULL	-15892	29	1969-12-31 15:59:57.937	821UdmGbkEf4j	NULL	-215	15892	-29	-12	NULL	171	-29	0
true	NULL	-15899	50	1969-12-31 15:59:46.926	821UdmGbkEf4j	NULL	-222	15899	-50	-33	NULL	10210	-50	0
true	NULL	-15920	-64	1969-12-31 15:59:51.859	cvLH6Eat2yFsyy7p	NULL	-243	15920	64	81	NULL	6687	64	0
true	NULL	-15922	-17	1969-12-31 15:59:46.164	821UdmGbkEf4j	NULL	-245	15922	17	34	NULL	10851	17	0
true	NULL	-15980	-6	1969-12-31 15:59:54.84	1cGVWH7n1QU	NULL	-46	15980	6	23	NULL	14836	6	0
true	NULL	-16017	-21	1969-12-31 15:59:44.02	821UdmGbkEf4j	NULL	-83	16017	21	38	NULL	2282	21	0
true	NULL	-16036	-15	1969-12-31 15:59:58.681	1cGVWH7n1QU	NULL	-102	16036	15	32	NULL	7928	15	0
true	NULL	-16076	59	1969-12-31 15:59:55.023	821UdmGbkEf4j	NULL	-142	16076	-59	-42	NULL	7907	-59	0
true	NULL	-16122	50	1969-12-31 15:59:51.608	1cGVWH7n1QU	NULL	-188	16122	-50	-33	NULL	1828	-50	0
true	NULL	-16153	35	1969-12-31 15:59:52.036	1cGVWH7n1QU	NULL	-219	16153	-35	-18	NULL	14817	-35	0
