PREHOOK: query: create table t (a integer)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@t
POSTHOOK: query: create table t (a integer)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t
PREHOOK: query: insert into t values (1),(2),(null)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@t
POSTHOOK: query: insert into t values (1),(2),(null)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@t
POSTHOOK: Lineage: t.a SCRIPT []
PREHOOK: query: select grouping(a),a from t group by a with rollup
PREHOOK: type: QUERY
PREHOOK: Input: default@t
#### A masked pattern was here ####
POSTHOOK: query: select grouping(a),a from t group by a with rollup
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t
#### A masked pattern was here ####
0	1
0	2
1	NULL
0	NULL
PREHOOK: query: select grouping(a),a,count(a) from t group by a with rollup
PREHOOK: type: QUERY
PREHOOK: Input: default@t
#### A masked pattern was here ####
POSTHOOK: query: select grouping(a),a,count(a) from t group by a with rollup
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t
#### A masked pattern was here ####
0	1	1
0	2	1
1	NULL	2
0	NULL	0
PREHOOK: query: select a,count(1),count(a) from t group by a with rollup
PREHOOK: type: QUERY
PREHOOK: Input: default@t
#### A masked pattern was here ####
POSTHOOK: query: select a,count(1),count(a) from t group by a with rollup
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t
#### A masked pattern was here ####
1	1	1
2	1	1
NULL	3	2
NULL	1	0
PREHOOK: query: select a,count(a) from t group by a GROUPING SETS ((),(a))
PREHOOK: type: QUERY
PREHOOK: Input: default@t
#### A masked pattern was here ####
POSTHOOK: query: select a,count(a) from t group by a GROUPING SETS ((),(a))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t
#### A masked pattern was here ####
1	1
2	1
NULL	2
NULL	0
PREHOOK: query: explain
select grouping(a),count(distinct a) from t group by a with rollup
PREHOOK: type: QUERY
PREHOOK: Input: default@t
#### A masked pattern was here ####
POSTHOOK: query: explain
select grouping(a),count(distinct a) from t group by a with rollup
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t
                  Statistics: Num rows: 3 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: a (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 3 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(DISTINCT _col0)
                      keys: _col0 (type: int), 0L (type: bigint)
                      grouping sets: 0, 1
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 6 Data size: 24 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: bigint)
                        null sort order: zzz
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: int), _col1 (type: bigint)
                        Statistics: Num rows: 6 Data size: 24 Basic stats: COMPLETE Column stats: NONE
            Execution mode: llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(DISTINCT KEY._col2:0._col0)
                keys: KEY._col0 (type: int), KEY._col1 (type: bigint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 3 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: grouping(_col1, 0L) (type: bigint), _col2 (type: bigint)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 3 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 3 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select grouping(a),count(distinct a) from t group by a with rollup
PREHOOK: type: QUERY
PREHOOK: Input: default@t
#### A masked pattern was here ####
POSTHOOK: query: select grouping(a),count(distinct a) from t group by a with rollup
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t
#### A masked pattern was here ####
0	1
0	1
0	0
1	0
PREHOOK: query: explain
SELECT grouping(key) gk, grouping(value) gv, key, value, count(key) FROM src where key<10 GROUP BY key, value with rollup order by gk,gv,key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: explain
SELECT grouping(key) gk, grouping(value) gv, key, value, count(key) FROM src where key<10 GROUP BY key, value with rollup order by gk,gv,key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  filterExpr: (UDFToDouble(key) < 10.0D) (type: boolean)
                  Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (UDFToDouble(key) < 10.0D) (type: boolean)
                    Statistics: Num rows: 166 Data size: 29548 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: string), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 166 Data size: 29548 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: count(_col0)
                        keys: _col0 (type: string), _col1 (type: string), 0L (type: bigint)
                        grouping sets: 0, 1, 3
                        minReductionHashAggr: 0.4
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3
                        Statistics: Num rows: 249 Data size: 48306 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                          null sort order: zzz
                          sort order: +++
                          Map-reduce partition columns: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                          Statistics: Num rows: 249 Data size: 48306 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col3 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 249 Data size: 48306 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: grouping(_col2, 1L) (type: bigint), grouping(_col2, 0L) (type: bigint), _col0 (type: string), _col1 (type: string), _col3 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4
                  Statistics: Num rows: 249 Data size: 50298 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: bigint), _col1 (type: bigint), _col2 (type: string)
                    null sort order: zzz
                    sort order: +++
                    Statistics: Num rows: 249 Data size: 50298 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col3 (type: string), _col4 (type: bigint)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: bigint), KEY.reducesinkkey1 (type: bigint), KEY.reducesinkkey2 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: bigint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 249 Data size: 50298 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 249 Data size: 50298 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT grouping(key) gk, grouping(value) gv, key, value, count(key) FROM src where key<10 GROUP BY key, value with rollup order by gk,gv,key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: SELECT grouping(key) gk, grouping(value) gv, key, value, count(key) FROM src where key<10 GROUP BY key, value with rollup order by gk,gv,key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0	0	0	val_0	3
0	0	2	val_2	1
0	0	4	val_4	1
0	0	5	val_5	3
0	0	8	val_8	1
0	0	9	val_9	1
0	1	0	NULL	3
0	1	2	NULL	1
0	1	4	NULL	1
0	1	5	NULL	3
0	1	8	NULL	1
0	1	9	NULL	1
1	1	NULL	NULL	10
