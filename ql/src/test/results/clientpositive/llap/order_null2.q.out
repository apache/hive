PREHOOK: query: CREATE TABLE event (username string, action string, amount int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@event
POSTHOOK: query: CREATE TABLE event (username string, action string, amount int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@event
PREHOOK: query: INSERT INTO event VALUES
('john', 'sell', 20),
('john', 'sell', 3),
('john', 'buy', 25),
('john', 'buy', 39),
('john', 'buy', null)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@event
POSTHOOK: query: INSERT INTO event VALUES
('john', 'sell', 20),
('john', 'sell', 3),
('john', 'buy', 25),
('john', 'buy', 39),
('john', 'buy', null)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@event
POSTHOOK: Lineage: event.action SCRIPT []
POSTHOOK: Lineage: event.amount SCRIPT []
POSTHOOK: Lineage: event.username SCRIPT []
PREHOOK: query: EXPLAIN AST
SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC)
FROM event
PREHOOK: type: QUERY
PREHOOK: Input: default@event
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN AST
SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC)
FROM event
POSTHOOK: type: QUERY
POSTHOOK: Input: default@event
#### A masked pattern was here ####
ABSTRACT SYNTAX TREE:
  
TOK_QUERY
   TOK_FROM
      TOK_TABREF
         TOK_TABNAME
            event
   TOK_INSERT
      TOK_DESTINATION
         TOK_DIR
            TOK_TMP_FILE
      TOK_SELECT
         TOK_SELEXPR
            TOK_TABLE_OR_COL
               username
         TOK_SELEXPR
            TOK_TABLE_OR_COL
               action
         TOK_SELEXPR
            TOK_TABLE_OR_COL
               amount
         TOK_SELEXPR
            TOK_FUNCTION
               row_number
               TOK_WINDOWSPEC
                  TOK_PARTITIONINGSPEC
                     TOK_DISTRIBUTEBY
                        TOK_TABLE_OR_COL
                           username
                        TOK_TABLE_OR_COL
                           action
                     TOK_ORDERBY
                        TOK_TABSORTCOLNAMEDESC
                           TOK_NULLS_FIRST
                              TOK_TABLE_OR_COL
                                 action
                        TOK_TABSORTCOLNAMEDESC
                           TOK_NULLS_FIRST
                              TOK_TABLE_OR_COL
                                 amount

PREHOOK: query: EXPLAIN
SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC)
FROM event
PREHOOK: type: QUERY
PREHOOK: Input: default@event
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC)
FROM event
POSTHOOK: type: QUERY
POSTHOOK: Input: default@event
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: event
                  Statistics: Num rows: 5 Data size: 895 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: username (type: string), action (type: string), amount (type: int)
                    null sort order: aaa
                    sort order: +--
                    Map-reduce partition columns: username (type: string), action (type: string)
                    Statistics: Num rows: 5 Data size: 895 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), KEY.reducesinkkey2 (type: int)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 5 Data size: 895 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 DESC NULLS FIRST, _col2 DESC NULLS FIRST
                        partition by: _col0, _col1
                        raw input shape:
                        window functions:
                            window function definition
                              alias: row_number_window_0
                              name: row_number
                              window function: GenericUDAFRowNumberEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 5 Data size: 895 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: int), row_number_window_0 (type: int)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 5 Data size: 911 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 5 Data size: 911 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC)
FROM event
PREHOOK: type: QUERY
PREHOOK: Input: default@event
#### A masked pattern was here ####
POSTHOOK: query: SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC)
FROM event
POSTHOOK: type: QUERY
POSTHOOK: Input: default@event
#### A masked pattern was here ####
john	sell	20	1
john	sell	3	2
john	buy	NULL	1
john	buy	39	2
john	buy	25	3
PREHOOK: query: EXPLAIN AST
SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC)
FROM event
PREHOOK: type: QUERY
PREHOOK: Input: default@event
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN AST
SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC)
FROM event
POSTHOOK: type: QUERY
POSTHOOK: Input: default@event
#### A masked pattern was here ####
ABSTRACT SYNTAX TREE:
  
TOK_QUERY
   TOK_FROM
      TOK_TABREF
         TOK_TABNAME
            event
   TOK_INSERT
      TOK_DESTINATION
         TOK_DIR
            TOK_TMP_FILE
      TOK_SELECT
         TOK_SELEXPR
            TOK_TABLE_OR_COL
               username
         TOK_SELEXPR
            TOK_TABLE_OR_COL
               action
         TOK_SELEXPR
            TOK_TABLE_OR_COL
               amount
         TOK_SELEXPR
            TOK_FUNCTION
               row_number
               TOK_WINDOWSPEC
                  TOK_PARTITIONINGSPEC
                     TOK_DISTRIBUTEBY
                        TOK_TABLE_OR_COL
                           username
                        TOK_TABLE_OR_COL
                           action
                     TOK_ORDERBY
                        TOK_TABSORTCOLNAMEDESC
                           TOK_NULLS_LAST
                              TOK_TABLE_OR_COL
                                 action
                        TOK_TABSORTCOLNAMEDESC
                           TOK_NULLS_LAST
                              TOK_TABLE_OR_COL
                                 amount

PREHOOK: query: EXPLAIN
SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC)
FROM event
PREHOOK: type: QUERY
PREHOOK: Input: default@event
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC)
FROM event
POSTHOOK: type: QUERY
POSTHOOK: Input: default@event
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: event
                  Statistics: Num rows: 5 Data size: 895 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: username (type: string), action (type: string), amount (type: int)
                    null sort order: azz
                    sort order: +--
                    Map-reduce partition columns: username (type: string), action (type: string)
                    Statistics: Num rows: 5 Data size: 895 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), KEY.reducesinkkey2 (type: int)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 5 Data size: 895 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 DESC NULLS LAST, _col2 DESC NULLS LAST
                        partition by: _col0, _col1
                        raw input shape:
                        window functions:
                            window function definition
                              alias: row_number_window_0
                              name: row_number
                              window function: GenericUDAFRowNumberEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 5 Data size: 895 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: int), row_number_window_0 (type: int)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 5 Data size: 911 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 5 Data size: 911 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC)
FROM event
PREHOOK: type: QUERY
PREHOOK: Input: default@event
#### A masked pattern was here ####
POSTHOOK: query: SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC)
FROM event
POSTHOOK: type: QUERY
POSTHOOK: Input: default@event
#### A masked pattern was here ####
john	sell	20	1
john	sell	3	2
john	buy	39	1
john	buy	25	2
john	buy	NULL	3
PREHOOK: query: EXPLAIN AST
SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC NULLS LAST)
FROM event
PREHOOK: type: QUERY
PREHOOK: Input: default@event
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN AST
SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC NULLS LAST)
FROM event
POSTHOOK: type: QUERY
POSTHOOK: Input: default@event
#### A masked pattern was here ####
ABSTRACT SYNTAX TREE:
  
TOK_QUERY
   TOK_FROM
      TOK_TABREF
         TOK_TABNAME
            event
   TOK_INSERT
      TOK_DESTINATION
         TOK_DIR
            TOK_TMP_FILE
      TOK_SELECT
         TOK_SELEXPR
            TOK_TABLE_OR_COL
               username
         TOK_SELEXPR
            TOK_TABLE_OR_COL
               action
         TOK_SELEXPR
            TOK_TABLE_OR_COL
               amount
         TOK_SELEXPR
            TOK_FUNCTION
               row_number
               TOK_WINDOWSPEC
                  TOK_PARTITIONINGSPEC
                     TOK_DISTRIBUTEBY
                        TOK_TABLE_OR_COL
                           username
                        TOK_TABLE_OR_COL
                           action
                     TOK_ORDERBY
                        TOK_TABSORTCOLNAMEDESC
                           TOK_NULLS_LAST
                              TOK_TABLE_OR_COL
                                 action
                        TOK_TABSORTCOLNAMEDESC
                           TOK_NULLS_LAST
                              TOK_TABLE_OR_COL
                                 amount

PREHOOK: query: EXPLAIN
SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC NULLS LAST)
FROM event
PREHOOK: type: QUERY
PREHOOK: Input: default@event
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC NULLS LAST)
FROM event
POSTHOOK: type: QUERY
POSTHOOK: Input: default@event
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: event
                  Statistics: Num rows: 5 Data size: 895 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: username (type: string), action (type: string), amount (type: int)
                    null sort order: azz
                    sort order: +--
                    Map-reduce partition columns: username (type: string), action (type: string)
                    Statistics: Num rows: 5 Data size: 895 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), KEY.reducesinkkey2 (type: int)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 5 Data size: 895 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 DESC NULLS LAST, _col2 DESC NULLS LAST
                        partition by: _col0, _col1
                        raw input shape:
                        window functions:
                            window function definition
                              alias: row_number_window_0
                              name: row_number
                              window function: GenericUDAFRowNumberEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 5 Data size: 895 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: int), row_number_window_0 (type: int)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 5 Data size: 911 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 5 Data size: 911 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC NULLS LAST)
FROM event
PREHOOK: type: QUERY
PREHOOK: Input: default@event
#### A masked pattern was here ####
POSTHOOK: query: SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC NULLS LAST)
FROM event
POSTHOOK: type: QUERY
POSTHOOK: Input: default@event
#### A masked pattern was here ####
john	sell	20	1
john	sell	3	2
john	buy	39	1
john	buy	25	2
john	buy	NULL	3
PREHOOK: query: EXPLAIN AST
SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC NULLS FIRST)
FROM event
PREHOOK: type: QUERY
PREHOOK: Input: default@event
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN AST
SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC NULLS FIRST)
FROM event
POSTHOOK: type: QUERY
POSTHOOK: Input: default@event
#### A masked pattern was here ####
ABSTRACT SYNTAX TREE:
  
TOK_QUERY
   TOK_FROM
      TOK_TABREF
         TOK_TABNAME
            event
   TOK_INSERT
      TOK_DESTINATION
         TOK_DIR
            TOK_TMP_FILE
      TOK_SELECT
         TOK_SELEXPR
            TOK_TABLE_OR_COL
               username
         TOK_SELEXPR
            TOK_TABLE_OR_COL
               action
         TOK_SELEXPR
            TOK_TABLE_OR_COL
               amount
         TOK_SELEXPR
            TOK_FUNCTION
               row_number
               TOK_WINDOWSPEC
                  TOK_PARTITIONINGSPEC
                     TOK_DISTRIBUTEBY
                        TOK_TABLE_OR_COL
                           username
                        TOK_TABLE_OR_COL
                           action
                     TOK_ORDERBY
                        TOK_TABSORTCOLNAMEDESC
                           TOK_NULLS_LAST
                              TOK_TABLE_OR_COL
                                 action
                        TOK_TABSORTCOLNAMEDESC
                           TOK_NULLS_FIRST
                              TOK_TABLE_OR_COL
                                 amount

PREHOOK: query: EXPLAIN
SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC NULLS FIRST)
FROM event
PREHOOK: type: QUERY
PREHOOK: Input: default@event
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC NULLS FIRST)
FROM event
POSTHOOK: type: QUERY
POSTHOOK: Input: default@event
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: event
                  Statistics: Num rows: 5 Data size: 895 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: username (type: string), action (type: string), amount (type: int)
                    null sort order: aza
                    sort order: +--
                    Map-reduce partition columns: username (type: string), action (type: string)
                    Statistics: Num rows: 5 Data size: 895 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), KEY.reducesinkkey2 (type: int)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 5 Data size: 895 Basic stats: COMPLETE Column stats: COMPLETE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: int
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 DESC NULLS LAST, _col2 DESC NULLS FIRST
                        partition by: _col0, _col1
                        raw input shape:
                        window functions:
                            window function definition
                              alias: row_number_window_0
                              name: row_number
                              window function: GenericUDAFRowNumberEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 5 Data size: 895 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: string), _col2 (type: int), row_number_window_0 (type: int)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 5 Data size: 911 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 5 Data size: 911 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC NULLS FIRST)
FROM event
PREHOOK: type: QUERY
PREHOOK: Input: default@event
#### A masked pattern was here ####
POSTHOOK: query: SELECT username, action, amount, row_number() OVER (PARTITION BY username, action ORDER BY action DESC, amount DESC NULLS FIRST)
FROM event
POSTHOOK: type: QUERY
POSTHOOK: Input: default@event
#### A masked pattern was here ####
john	sell	20	1
john	sell	3	2
john	buy	NULL	1
john	buy	39	2
john	buy	25	3
