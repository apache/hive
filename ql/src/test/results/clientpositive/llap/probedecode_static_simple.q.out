PREHOOK: query: DROP TABLE IF EXISTS orders
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS orders
POSTHOOK: type: DROPTABLE
PREHOOK: query: DROP TABLE IF EXISTS orders_all
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS orders_all
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE TABLE orders (key2 int, stringval string, doubleval double, decival decimal(38,0), tsval timestamp) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@orders
POSTHOOK: query: CREATE TABLE orders (key2 int, stringval string, doubleval double, decival decimal(38,0), tsval timestamp) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@orders
PREHOOK: query: CREATE EXTERNAL TABLE orders_all (key2 int, stringval string, doubleval double, decival decimal(38,0), tsval timestamp)
stored as orc
#### A masked pattern was here ####
PREHOOK: type: CREATETABLE
#### A masked pattern was here ####
PREHOOK: Output: database:default
PREHOOK: Output: default@orders_all
POSTHOOK: query: CREATE EXTERNAL TABLE orders_all (key2 int, stringval string, doubleval double, decival decimal(38,0), tsval timestamp)
stored as orc
#### A masked pattern was here ####
POSTHOOK: type: CREATETABLE
#### A masked pattern was here ####
POSTHOOK: Output: database:default
POSTHOOK: Output: default@orders_all
PREHOOK: query: FROM orders_all ss
INSERT OVERWRITE TABLE orders
SELECT *
PREHOOK: type: QUERY
PREHOOK: Input: default@orders_all
PREHOOK: Output: default@orders
POSTHOOK: query: FROM orders_all ss
INSERT OVERWRITE TABLE orders
SELECT *
POSTHOOK: type: QUERY
POSTHOOK: Input: default@orders_all
POSTHOOK: Output: default@orders
POSTHOOK: Lineage: orders.decival SIMPLE [(orders_all)ss.FieldSchema(name:decival, type:decimal(38,0), comment:null), ]
POSTHOOK: Lineage: orders.doubleval SIMPLE [(orders_all)ss.FieldSchema(name:doubleval, type:double, comment:null), ]
POSTHOOK: Lineage: orders.key2 SIMPLE [(orders_all)ss.FieldSchema(name:key2, type:int, comment:null), ]
POSTHOOK: Lineage: orders.stringval SIMPLE [(orders_all)ss.FieldSchema(name:stringval, type:string, comment:null), ]
POSTHOOK: Lineage: orders.tsval SIMPLE [(orders_all)ss.FieldSchema(name:tsval, type:timestamp, comment:null), ]
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT * from orders where orders.key2 <> 100
PREHOOK: type: QUERY
PREHOOK: Input: default@orders
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT * from orders where orders.key2 <> 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@orders
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: orders
          filterExpr: (key2 <> 100) (type: boolean)
          probeDecodeDetails: dynFilter={CKey:null, bigTColName:null, smallTPos:0, KRatio:0.0}, staticFilter={Expr: GenericUDFOPNotEqual(Column[key2], Const int 100)}
          Select Operator
            expressions: key2 (type: int), stringval (type: string), doubleval (type: double), decival (type: decimal(38,0)), tsval (type: timestamp)
            outputColumnNames: _col0, _col1, _col2, _col3, _col4
            ListSink

PREHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT key2, doubleval, stringval, tsval
FROM orders
WHERE key2 + 1 <> bround(101.1)
PREHOOK: type: QUERY
PREHOOK: Input: default@orders
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT key2, doubleval, stringval, tsval
FROM orders
WHERE key2 + 1 <> bround(101.1)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@orders
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: orders
          filterExpr: (CAST( (key2 + 1) AS decimal(10,0)) <> 101) (type: boolean)
          probeDecodeDetails: dynFilter={CKey:null, bigTColName:null, smallTPos:0, KRatio:0.0}, staticFilter={Expr: GenericUDFOPNotEqual(GenericUDFToDecimal(GenericUDFOPPlus(Column[key2], Const int 1)), Const decimal(3,0) 101)}
          Select Operator
            expressions: key2 (type: int), doubleval (type: double), stringval (type: string), tsval (type: timestamp)
            outputColumnNames: _col0, _col1, _col2, _col3
            ListSink

PREHOOK: query: EXPLAIN VECTORIZATION SELECT SUM(key2 * doubleval)
FROM orders
WHERE key2 <> 100
PREHOOK: type: QUERY
PREHOOK: Input: default@orders
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION SELECT SUM(key2 * doubleval)
FROM orders
WHERE key2 <> 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@orders
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: orders
                  filterExpr: (key2 <> 100) (type: boolean)
                  probeDecodeDetails: dynFilter={CKey:null, bigTColName:null, smallTPos:0, KRatio:0.0}, staticFilter={Expr: GenericUDFOPNotEqual(Column[key2], Const int 100)}
                  Statistics: Num rows: 25000 Data size: 400000 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: (UDFToDouble(key2) * doubleval) (type: double)
                    outputColumnNames: _col0
                    Statistics: Num rows: 25000 Data size: 400000 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: sum(_col0)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: double)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

