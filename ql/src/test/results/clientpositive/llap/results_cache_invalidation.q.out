PREHOOK: query: create table tab1 (key string, value string) stored as orc tblproperties ('transactional'='true')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tab1
POSTHOOK: query: create table tab1 (key string, value string) stored as orc tblproperties ('transactional'='true')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tab1
PREHOOK: query: create table tab2 (key string, value string) stored as orc tblproperties ('transactional'='true')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tab2
POSTHOOK: query: create table tab2 (key string, value string) stored as orc tblproperties ('transactional'='true')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tab2
PREHOOK: query: insert into tab1 select * from default.src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@tab1
POSTHOOK: query: insert into tab1 select * from default.src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@tab1
POSTHOOK: Lineage: tab1.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: tab1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: insert into tab2 select * from default.src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@tab2
POSTHOOK: query: insert into tab2 select * from default.src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@tab2
POSTHOOK: Lineage: tab2.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: tab2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
test.comment="Run queries to load into cache"
PREHOOK: query: explain
select count(*) from tab1 a where key >= 0
PREHOOK: type: QUERY
POSTHOOK: query: explain
select count(*) from tab1 a where key >= 0
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 91 Data size: 16192 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (UDFToDouble(key) >= 0.0D) (type: boolean)
                    Statistics: Num rows: 30 Data size: 5338 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      Statistics: Num rows: 30 Data size: 5338 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        aggregations: count()
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          sort order: 
                          Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col0 (type: bigint)
            Execution mode: llap
            LLAP IO: may be used (ACID table)
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(*) from tab1 a where key >= 0
PREHOOK: type: QUERY
PREHOOK: Input: default@tab1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from tab1 a where key >= 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab1
#### A masked pattern was here ####
500
PREHOOK: query: explain
select max(key) from tab2
PREHOOK: type: QUERY
POSTHOOK: query: explain
select max(key) from tab2
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: tab2
                  Statistics: Num rows: 91 Data size: 16192 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string)
                    outputColumnNames: key
                    Statistics: Num rows: 91 Data size: 16192 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: max(key)
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        sort order: 
                        Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: string)
            Execution mode: llap
            LLAP IO: may be used (ACID table)
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select max(key) from tab2
PREHOOK: type: QUERY
PREHOOK: Input: default@tab2
#### A masked pattern was here ####
POSTHOOK: query: select max(key) from tab2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab2
#### A masked pattern was here ####
98
PREHOOK: query: explain
select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
PREHOOK: type: QUERY
POSTHOOK: query: explain
select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: tab1
                  Statistics: Num rows: 91 Data size: 16192 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: key is not null (type: boolean)
                    Statistics: Num rows: 87 Data size: 15480 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: string)
                      outputColumnNames: _col0
                      Statistics: Num rows: 87 Data size: 15480 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 87 Data size: 15480 Basic stats: COMPLETE Column stats: NONE
            Execution mode: llap
            LLAP IO: may be used (ACID table)
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: tab2
                  Statistics: Num rows: 91 Data size: 16192 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: key is not null (type: boolean)
                    Statistics: Num rows: 87 Data size: 15480 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: string)
                      outputColumnNames: _col0
                      Statistics: Num rows: 87 Data size: 15480 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 87 Data size: 15480 Basic stats: COMPLETE Column stats: NONE
            Execution mode: llap
            LLAP IO: may be used (ACID table)
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: string)
                  1 _col0 (type: string)
                Statistics: Num rows: 95 Data size: 17028 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: count()
                  mode: hash
                  outputColumnNames: _col0
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    sort order: 
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: bigint)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
PREHOOK: type: QUERY
PREHOOK: Input: default@tab1
PREHOOK: Input: default@tab2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab1
POSTHOOK: Input: default@tab2
#### A masked pattern was here ####
1028
test.comment="Q1 should now be able to use cache"
PREHOOK: query: explain
select count(*) from tab1 a where key >= 0
PREHOOK: type: QUERY
POSTHOOK: query: explain
select count(*) from tab1 a where key >= 0
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink
      Cached Query Result: true

PREHOOK: query: select count(*) from tab1 a where key >= 0
PREHOOK: type: QUERY
PREHOOK: Input: default@tab1
POSTHOOK: query: select count(*) from tab1 a where key >= 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab1
500
test.comment="Q2 should now be able to use cache"
PREHOOK: query: explain
select max(key) from tab2
PREHOOK: type: QUERY
POSTHOOK: query: explain
select max(key) from tab2
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink
      Cached Query Result: true

PREHOOK: query: select max(key) from tab2
PREHOOK: type: QUERY
PREHOOK: Input: default@tab2
POSTHOOK: query: select max(key) from tab2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab2
98
test.comment="Q3 should now be able to use cache"
PREHOOK: query: explain
select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
PREHOOK: type: QUERY
POSTHOOK: query: explain
select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink
      Cached Query Result: true

PREHOOK: query: select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
PREHOOK: type: QUERY
PREHOOK: Input: default@tab1
PREHOOK: Input: default@tab2
POSTHOOK: query: select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab1
POSTHOOK: Input: default@tab2
1028
PREHOOK: query: insert into tab1 values ('88', 'val_88')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tab1
POSTHOOK: query: insert into tab1 values ('88', 'val_88')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tab1
POSTHOOK: Lineage: tab1.key SCRIPT []
POSTHOOK: Lineage: tab1.value SCRIPT []
test.comment="Q1 should not use cache"
PREHOOK: query: explain
select count(*) from tab1 a where key >= 0
PREHOOK: type: QUERY
POSTHOOK: query: explain
select count(*) from tab1 a where key >= 0
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 110 Data size: 19504 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (UDFToDouble(key) >= 0.0D) (type: boolean)
                    Statistics: Num rows: 36 Data size: 6383 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      Statistics: Num rows: 36 Data size: 6383 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        aggregations: count()
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          sort order: 
                          Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col0 (type: bigint)
            Execution mode: llap
            LLAP IO: may be used (ACID table)
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(*) from tab1 a where key >= 0
PREHOOK: type: QUERY
PREHOOK: Input: default@tab1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from tab1 a where key >= 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab1
#### A masked pattern was here ####
501
test.comment="Q2 should still use cache since tab2 not updated"
PREHOOK: query: explain
select max(key) from tab2
PREHOOK: type: QUERY
POSTHOOK: query: explain
select max(key) from tab2
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink
      Cached Query Result: true

PREHOOK: query: select max(key) from tab2
PREHOOK: type: QUERY
PREHOOK: Input: default@tab2
POSTHOOK: query: select max(key) from tab2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab2
98
test.comment="Q3 should not use cache"
PREHOOK: query: explain
select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
PREHOOK: type: QUERY
POSTHOOK: query: explain
select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: tab1
                  Statistics: Num rows: 110 Data size: 19504 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: key is not null (type: boolean)
                    Statistics: Num rows: 105 Data size: 18617 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: string)
                      outputColumnNames: _col0
                      Statistics: Num rows: 105 Data size: 18617 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 105 Data size: 18617 Basic stats: COMPLETE Column stats: NONE
            Execution mode: llap
            LLAP IO: may be used (ACID table)
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: tab2
                  Statistics: Num rows: 91 Data size: 16192 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: key is not null (type: boolean)
                    Statistics: Num rows: 87 Data size: 15480 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: string)
                      outputColumnNames: _col0
                      Statistics: Num rows: 87 Data size: 15480 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 87 Data size: 15480 Basic stats: COMPLETE Column stats: NONE
            Execution mode: llap
            LLAP IO: may be used (ACID table)
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: string)
                  1 _col0 (type: string)
                Statistics: Num rows: 115 Data size: 20478 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: count()
                  mode: hash
                  outputColumnNames: _col0
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    sort order: 
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: bigint)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
PREHOOK: type: QUERY
PREHOOK: Input: default@tab1
PREHOOK: Input: default@tab2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab1
POSTHOOK: Input: default@tab2
#### A masked pattern was here ####
1028
PREHOOK: query: insert into tab2 values ('88', 'val_88')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tab2
POSTHOOK: query: insert into tab2 values ('88', 'val_88')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tab2
POSTHOOK: Lineage: tab2.key SCRIPT []
POSTHOOK: Lineage: tab2.value SCRIPT []
test.comment="Q1 should use cache"
PREHOOK: query: explain
select count(*) from tab1 a where key >= 0
PREHOOK: type: QUERY
POSTHOOK: query: explain
select count(*) from tab1 a where key >= 0
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink
      Cached Query Result: true

PREHOOK: query: select count(*) from tab1 a where key >= 0
PREHOOK: type: QUERY
PREHOOK: Input: default@tab1
POSTHOOK: query: select count(*) from tab1 a where key >= 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab1
501
test.comment="Q2 should not use cache"
PREHOOK: query: explain
select max(key) from tab2
PREHOOK: type: QUERY
POSTHOOK: query: explain
select max(key) from tab2
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: tab2
                  Statistics: Num rows: 110 Data size: 19504 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string)
                    outputColumnNames: key
                    Statistics: Num rows: 110 Data size: 19504 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: max(key)
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        sort order: 
                        Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: string)
            Execution mode: llap
            LLAP IO: may be used (ACID table)
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 368 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select max(key) from tab2
PREHOOK: type: QUERY
PREHOOK: Input: default@tab2
#### A masked pattern was here ####
POSTHOOK: query: select max(key) from tab2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab2
#### A masked pattern was here ####
98
test.comment="Q3 should not use cache"
PREHOOK: query: explain
select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
PREHOOK: type: QUERY
POSTHOOK: query: explain
select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: tab1
                  Statistics: Num rows: 110 Data size: 19504 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: key is not null (type: boolean)
                    Statistics: Num rows: 105 Data size: 18617 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: string)
                      outputColumnNames: _col0
                      Statistics: Num rows: 105 Data size: 18617 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 105 Data size: 18617 Basic stats: COMPLETE Column stats: NONE
            Execution mode: llap
            LLAP IO: may be used (ACID table)
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: tab2
                  Statistics: Num rows: 110 Data size: 19504 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: key is not null (type: boolean)
                    Statistics: Num rows: 105 Data size: 18617 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: string)
                      outputColumnNames: _col0
                      Statistics: Num rows: 105 Data size: 18617 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 105 Data size: 18617 Basic stats: COMPLETE Column stats: NONE
            Execution mode: llap
            LLAP IO: may be used (ACID table)
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: string)
                  1 _col0 (type: string)
                Statistics: Num rows: 115 Data size: 20478 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: count()
                  mode: hash
                  outputColumnNames: _col0
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    sort order: 
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: bigint)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
PREHOOK: type: QUERY
PREHOOK: Input: default@tab1
PREHOOK: Input: default@tab2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab1
POSTHOOK: Input: default@tab2
#### A masked pattern was here ####
1029
