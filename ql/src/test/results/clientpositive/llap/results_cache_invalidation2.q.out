PREHOOK: query: select reflect('org.apache.hadoop.hive.ql.QTestUtil', 'initEventNotificationPoll')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select reflect('org.apache.hadoop.hive.ql.QTestUtil', 'initEventNotificationPoll')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
null
PREHOOK: query: create table tab1 stored as textfile as select * from src
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@src
PREHOOK: Output: database:default
PREHOOK: Output: default@tab1
POSTHOOK: query: create table tab1 stored as textfile as select * from src
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@src
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tab1
POSTHOOK: Lineage: tab1.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: tab1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: insert into tab1 select * from src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@tab1
POSTHOOK: query: insert into tab1 select * from src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@tab1
POSTHOOK: Lineage: tab1.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: tab1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: create table tab2 (key string, value string) stored as textfile
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tab2
POSTHOOK: query: create table tab2 (key string, value string) stored as textfile
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tab2
PREHOOK: query: insert into tab2 select * from src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@tab2
POSTHOOK: query: insert into tab2 select * from src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@tab2
POSTHOOK: Lineage: tab2.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: tab2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: select count(*) from tab1 where key > 0
PREHOOK: type: QUERY
PREHOOK: Input: default@tab1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from tab1 where key > 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab1
#### A masked pattern was here ####
994
PREHOOK: query: select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
PREHOOK: type: QUERY
PREHOOK: Input: default@tab1
PREHOOK: Input: default@tab2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab1
POSTHOOK: Input: default@tab2
#### A masked pattern was here ####
2056
PREHOOK: query: select count(*) from tab2 where key > 0
PREHOOK: type: QUERY
PREHOOK: Input: default@tab2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from tab2 where key > 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab2
#### A masked pattern was here ####
497
test.comment="Cached entry should be used"
PREHOOK: query: explain
select count(*) from tab1 where key > 0
PREHOOK: type: QUERY
POSTHOOK: query: explain
select count(*) from tab1 where key > 0
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink
      Cached Query Result: true

PREHOOK: query: select count(*) from tab1 where key > 0
PREHOOK: type: QUERY
PREHOOK: Input: default@tab1
POSTHOOK: query: select count(*) from tab1 where key > 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab1
994
test.comment="Cached entry should be used"
PREHOOK: query: explain
select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
PREHOOK: type: QUERY
POSTHOOK: query: explain
select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink
      Cached Query Result: true

PREHOOK: query: select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
PREHOOK: type: QUERY
PREHOOK: Input: default@tab1
PREHOOK: Input: default@tab2
POSTHOOK: query: select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab1
POSTHOOK: Input: default@tab2
2056
test.comment="Cached entry should be used"
PREHOOK: query: explain
select count(*) from tab2 where key > 0
PREHOOK: type: QUERY
POSTHOOK: query: explain
select count(*) from tab2 where key > 0
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink
      Cached Query Result: true

PREHOOK: query: select count(*) from tab2 where key > 0
PREHOOK: type: QUERY
PREHOOK: Input: default@tab2
POSTHOOK: query: select count(*) from tab2 where key > 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab2
497
PREHOOK: query: insert into tab1 select * from src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@tab1
POSTHOOK: query: insert into tab1 select * from src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@tab1
POSTHOOK: Lineage: tab1.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: tab1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: select reflect("java.lang.Thread", 'sleep', cast(4000 as bigint))
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
POSTHOOK: query: select reflect("java.lang.Thread", 'sleep', cast(4000 as bigint))
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
#### A masked pattern was here ####
null
test.comment="Cached entry should be invalidated - query should not use cache"
PREHOOK: query: explain
select count(*) from tab1 where key > 0
PREHOOK: type: QUERY
POSTHOOK: query: explain
select count(*) from tab1 where key > 0
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: tab1
                  Statistics: Num rows: 1500 Data size: 262384 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (UDFToDouble(key) > 0.0D) (type: boolean)
                    Statistics: Num rows: 500 Data size: 87461 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      Statistics: Num rows: 500 Data size: 87461 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        aggregations: count()
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          sort order: 
                          Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col0 (type: bigint)
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(*) from tab1 where key > 0
PREHOOK: type: QUERY
PREHOOK: Input: default@tab1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from tab1 where key > 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab1
#### A masked pattern was here ####
1491
test.comment="Cached entry should be invalidated - query should not use cache"
PREHOOK: query: explain
select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
PREHOOK: type: QUERY
POSTHOOK: query: explain
select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: tab1
                  Statistics: Num rows: 1500 Data size: 262384 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: key is not null (type: boolean)
                    Statistics: Num rows: 1425 Data size: 249264 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: string)
                      outputColumnNames: _col0
                      Statistics: Num rows: 1425 Data size: 249264 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 1425 Data size: 249264 Basic stats: COMPLETE Column stats: NONE
            Execution mode: llap
            LLAP IO: no inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: tab2
                  Statistics: Num rows: 500 Data size: 43500 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: key is not null (type: boolean)
                    Statistics: Num rows: 500 Data size: 43500 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: string)
                      outputColumnNames: _col0
                      Statistics: Num rows: 500 Data size: 43500 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 500 Data size: 43500 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: string)
                  1 _col0 (type: string)
                Statistics: Num rows: 1567 Data size: 274190 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: count()
                  mode: hash
                  outputColumnNames: _col0
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    sort order: 
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: bigint)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
PREHOOK: type: QUERY
PREHOOK: Input: default@tab1
PREHOOK: Input: default@tab2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from tab1 join tab2 on (tab1.key = tab2.key)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab1
POSTHOOK: Input: default@tab2
#### A masked pattern was here ####
3084
test.comment="tab2 was not modified, this query should still use cache"
PREHOOK: query: explain
select count(*) from tab2 where key > 0
PREHOOK: type: QUERY
POSTHOOK: query: explain
select count(*) from tab2 where key > 0
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink
      Cached Query Result: true

PREHOOK: query: select count(*) from tab2 where key > 0
PREHOOK: type: QUERY
PREHOOK: Input: default@tab2
POSTHOOK: query: select count(*) from tab2 where key > 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab2
497
