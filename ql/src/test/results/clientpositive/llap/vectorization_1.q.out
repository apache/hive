PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT VAR_POP(ctinyint),
       (VAR_POP(ctinyint) / -26.28),
       SUM(cfloat),
       (-1.389 + SUM(cfloat)),
       (SUM(cfloat) * (-1.389 + SUM(cfloat))),
       MAX(ctinyint),
       (-((SUM(cfloat) * (-1.389 + SUM(cfloat))))),
       MAX(cint),
       (MAX(cint) * 79.553),
       VAR_SAMP(cdouble),
       (10.175 % (-((SUM(cfloat) * (-1.389 + SUM(cfloat)))))),
       COUNT(cint),
       (-563 % MAX(cint))
FROM   alltypesorc
WHERE  (((cdouble > ctinyint)
         AND (cboolean2 > 0))
        OR ((cbigint < ctinyint)
            OR ((cint > cbigint)
                OR (cboolean1 < 0))))
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT VAR_POP(ctinyint),
       (VAR_POP(ctinyint) / -26.28),
       SUM(cfloat),
       (-1.389 + SUM(cfloat)),
       (SUM(cfloat) * (-1.389 + SUM(cfloat))),
       MAX(ctinyint),
       (-((SUM(cfloat) * (-1.389 + SUM(cfloat))))),
       MAX(cint),
       (MAX(cint) * 79.553),
       VAR_SAMP(cdouble),
       (10.175 % (-((SUM(cfloat) * (-1.389 + SUM(cfloat)))))),
       COUNT(cint),
       (-563 % MAX(cint))
FROM   alltypesorc
WHERE  (((cdouble > ctinyint)
         AND (cboolean2 > 0))
        OR ((cbigint < ctinyint)
            OR ((cint > cbigint)
                OR (cboolean1 < 0))))
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  Statistics: Num rows: 12288 Data size: 330276 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:ctinyint:tinyint, 1:csmallint:smallint, 2:cint:int, 3:cbigint:bigint, 4:cfloat:float, 5:cdouble:double, 6:cstring1:string, 7:cstring2:string, 8:ctimestamp1:timestamp, 9:ctimestamp2:timestamp, 10:cboolean1:boolean, 11:cboolean2:boolean, 12:ROW__ID:struct<transactionid:bigint,bucketid:int,rowid:bigint>]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprOrExpr(children: FilterExprAndExpr(children: FilterDoubleColGreaterDoubleColumn(col 5:double, col 13:double)(children: CastLongToDouble(col 0:tinyint) -> 13:double), FilterLongColGreaterLongScalar(col 11:boolean, val 0)), FilterLongColLessLongColumn(col 3:bigint, col 0:bigint)(children: col 0:tinyint), FilterLongColGreaterLongColumn(col 2:bigint, col 3:bigint)(children: col 2:int), FilterLongColLessLongScalar(col 10:boolean, val 0))
                    predicate: (((cdouble > UDFToDouble(ctinyint)) and (cboolean2 > 0)) or (UDFToLong(cint) > cbigint) or (cbigint < UDFToLong(ctinyint)) or (cboolean1 < 0)) (type: boolean)
                    Statistics: Num rows: 12288 Data size: 330276 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: ctinyint (type: tinyint), cint (type: int), cfloat (type: float), cdouble (type: double)
                      outputColumnNames: ctinyint, cint, cfloat, cdouble
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [0, 2, 4, 5]
                      Statistics: Num rows: 12288 Data size: 330276 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        aggregations: var_pop(ctinyint), sum(cfloat), max(ctinyint), max(cint), var_samp(cdouble), count(cint)
                        Group By Vectorization:
                            aggregators: VectorUDAFVarLong(col 0:tinyint) -> struct<count:bigint,sum:double,variance:double> aggregation: var_pop, VectorUDAFSumDouble(col 4:float) -> double, VectorUDAFMaxLong(col 0:tinyint) -> tinyint, VectorUDAFMaxLong(col 2:int) -> int, VectorUDAFVarDouble(col 5:double) -> struct<count:bigint,sum:double,variance:double> aggregation: var_samp, VectorUDAFCount(col 2:int) -> bigint
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0, 1, 2, 3, 4, 5]
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                        Statistics: Num rows: 1 Data size: 184 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          sort order: 
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkEmptyKeyOperator
                              keyColumnNums: []
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                              valueColumnNums: [0, 1, 2, 3, 4, 5]
                          Statistics: Num rows: 1 Data size: 184 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: struct<count:bigint,sum:double,variance:double>), _col1 (type: double), _col2 (type: tinyint), _col3 (type: int), _col4 (type: struct<count:bigint,sum:double,variance:double>), _col5 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 12
                    includeColumns: [0, 2, 3, 4, 5, 10, 11]
                    dataColumns: ctinyint:tinyint, csmallint:smallint, cint:int, cbigint:bigint, cfloat:float, cdouble:double, cstring1:string, cstring2:string, ctimestamp1:timestamp, ctimestamp2:timestamp, cboolean1:boolean, cboolean2:boolean
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [double]
        Reducer 2 
            Execution mode: llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                notVectorizedReason: GROUPBY operator: Vector aggregation : "var_pop" for input type: "STRUCT" and output type: "DOUBLE" and mode: FINAL not supported for evaluator GenericUDAFVarianceEvaluator
                vectorized: false
            Reduce Operator Tree:
              Group By Operator
                aggregations: var_pop(VALUE._col0), sum(VALUE._col1), max(VALUE._col2), max(VALUE._col3), var_samp(VALUE._col4), count(VALUE._col5)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 1 Data size: 40 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: double), (_col0 / -26.28) (type: double), _col1 (type: double), (-1.389 + _col1) (type: double), (_col1 * (-1.389 + _col1)) (type: double), _col2 (type: tinyint), (- (_col1 * (-1.389 + _col1))) (type: double), _col3 (type: int), (CAST( _col3 AS decimal(10,0)) * 79.553) (type: decimal(16,3)), _col4 (type: double), (10.175 % (- (_col1 * (-1.389 + _col1)))) (type: double), _col5 (type: bigint), (-563 % _col3) (type: int)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                  Statistics: Num rows: 1 Data size: 196 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 196 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT VAR_POP(ctinyint),
       (VAR_POP(ctinyint) / -26.28),
       SUM(cfloat),
       (-1.389 + SUM(cfloat)),
       (SUM(cfloat) * (-1.389 + SUM(cfloat))),
       MAX(ctinyint),
       (-((SUM(cfloat) * (-1.389 + SUM(cfloat))))),
       MAX(cint),
       (MAX(cint) * 79.553),
       VAR_SAMP(cdouble),
       (10.175 % (-((SUM(cfloat) * (-1.389 + SUM(cfloat)))))),
       COUNT(cint),
       (-563 % MAX(cint))
FROM   alltypesorc
WHERE  (((cdouble > ctinyint)
         AND (cboolean2 > 0))
        OR ((cbigint < ctinyint)
            OR ((cint > cbigint)
                OR (cboolean1 < 0))))
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: SELECT VAR_POP(ctinyint),
       (VAR_POP(ctinyint) / -26.28),
       SUM(cfloat),
       (-1.389 + SUM(cfloat)),
       (SUM(cfloat) * (-1.389 + SUM(cfloat))),
       MAX(ctinyint),
       (-((SUM(cfloat) * (-1.389 + SUM(cfloat))))),
       MAX(cint),
       (MAX(cint) * 79.553),
       VAR_SAMP(cdouble),
       (10.175 % (-((SUM(cfloat) * (-1.389 + SUM(cfloat)))))),
       COUNT(cint),
       (-563 % MAX(cint))
FROM   alltypesorc
WHERE  (((cdouble > ctinyint)
         AND (cboolean2 > 0))
        OR ((cbigint < ctinyint)
            OR ((cint > cbigint)
                OR (cboolean1 < 0))))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
1074.830257547229	-40.89917266161449	-21997.674998402596	-21999.063998402595	4.839282601059194E8	62	-4.839282601059194E8	1073680599	85414512692.247	7.569848642620903E10	10.175	3745	-563
