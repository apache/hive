PREHOOK: query: create table purchase_history (s string, product string, price double, `time` int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@purchase_history
POSTHOOK: query: create table purchase_history (s string, product string, price double, `time` int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@purchase_history
PREHOOK: query: insert into purchase_history values ('1', 'Belt', 20.00, 21)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@purchase_history
POSTHOOK: query: insert into purchase_history values ('1', 'Belt', 20.00, 21)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@purchase_history
POSTHOOK: Lineage: purchase_history.price SCRIPT []
POSTHOOK: Lineage: purchase_history.product SCRIPT []
POSTHOOK: Lineage: purchase_history.s SCRIPT []
POSTHOOK: Lineage: purchase_history.time SCRIPT []
PREHOOK: query: insert into purchase_history values ('1', 'Socks', 3.50, 31)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@purchase_history
POSTHOOK: query: insert into purchase_history values ('1', 'Socks', 3.50, 31)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@purchase_history
POSTHOOK: Lineage: purchase_history.price SCRIPT []
POSTHOOK: Lineage: purchase_history.product SCRIPT []
POSTHOOK: Lineage: purchase_history.s SCRIPT []
POSTHOOK: Lineage: purchase_history.time SCRIPT []
PREHOOK: query: insert into purchase_history values ('3', 'Belt', 20.00, 51)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@purchase_history
POSTHOOK: query: insert into purchase_history values ('3', 'Belt', 20.00, 51)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@purchase_history
POSTHOOK: Lineage: purchase_history.price SCRIPT []
POSTHOOK: Lineage: purchase_history.product SCRIPT []
POSTHOOK: Lineage: purchase_history.s SCRIPT []
POSTHOOK: Lineage: purchase_history.time SCRIPT []
PREHOOK: query: insert into purchase_history values ('4', 'Shirt', 15.50, 59)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@purchase_history
POSTHOOK: query: insert into purchase_history values ('4', 'Shirt', 15.50, 59)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@purchase_history
POSTHOOK: Lineage: purchase_history.price SCRIPT []
POSTHOOK: Lineage: purchase_history.product SCRIPT []
POSTHOOK: Lineage: purchase_history.s SCRIPT []
POSTHOOK: Lineage: purchase_history.time SCRIPT []
PREHOOK: query: create table cart_history (s string, cart_id int, `time` int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@cart_history
POSTHOOK: query: create table cart_history (s string, cart_id int, `time` int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@cart_history
PREHOOK: query: insert into cart_history values ('1', 1, 10)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@cart_history
POSTHOOK: query: insert into cart_history values ('1', 1, 10)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@cart_history
POSTHOOK: Lineage: cart_history.cart_id SCRIPT []
POSTHOOK: Lineage: cart_history.s SCRIPT []
POSTHOOK: Lineage: cart_history.time SCRIPT []
PREHOOK: query: insert into cart_history values ('1', 2, 20)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@cart_history
POSTHOOK: query: insert into cart_history values ('1', 2, 20)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@cart_history
POSTHOOK: Lineage: cart_history.cart_id SCRIPT []
POSTHOOK: Lineage: cart_history.s SCRIPT []
POSTHOOK: Lineage: cart_history.time SCRIPT []
PREHOOK: query: insert into cart_history values ('1', 3, 30)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@cart_history
POSTHOOK: query: insert into cart_history values ('1', 3, 30)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@cart_history
POSTHOOK: Lineage: cart_history.cart_id SCRIPT []
POSTHOOK: Lineage: cart_history.s SCRIPT []
POSTHOOK: Lineage: cart_history.time SCRIPT []
PREHOOK: query: insert into cart_history values ('1', 4, 40)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@cart_history
POSTHOOK: query: insert into cart_history values ('1', 4, 40)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@cart_history
POSTHOOK: Lineage: cart_history.cart_id SCRIPT []
POSTHOOK: Lineage: cart_history.s SCRIPT []
POSTHOOK: Lineage: cart_history.time SCRIPT []
PREHOOK: query: insert into cart_history values ('3', 5, 50)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@cart_history
POSTHOOK: query: insert into cart_history values ('3', 5, 50)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@cart_history
POSTHOOK: Lineage: cart_history.cart_id SCRIPT []
POSTHOOK: Lineage: cart_history.s SCRIPT []
POSTHOOK: Lineage: cart_history.time SCRIPT []
PREHOOK: query: insert into cart_history values ('4', 6, 60)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@cart_history
POSTHOOK: query: insert into cart_history values ('4', 6, 60)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@cart_history
POSTHOOK: Lineage: cart_history.cart_id SCRIPT []
POSTHOOK: Lineage: cart_history.s SCRIPT []
POSTHOOK: Lineage: cart_history.time SCRIPT []
PREHOOK: query: create table events (s string, st2 string, n int, `time` int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@events
POSTHOOK: query: create table events (s string, st2 string, n int, `time` int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@events
PREHOOK: query: insert into events values ('1', 'Bob', 1234, 20)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@events
POSTHOOK: query: insert into events values ('1', 'Bob', 1234, 20)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@events
POSTHOOK: Lineage: events.n SCRIPT []
POSTHOOK: Lineage: events.s SCRIPT []
POSTHOOK: Lineage: events.st2 SCRIPT []
POSTHOOK: Lineage: events.time SCRIPT []
PREHOOK: query: insert into events values ('1', 'Bob', 1234, 30)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@events
POSTHOOK: query: insert into events values ('1', 'Bob', 1234, 30)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@events
POSTHOOK: Lineage: events.n SCRIPT []
POSTHOOK: Lineage: events.s SCRIPT []
POSTHOOK: Lineage: events.st2 SCRIPT []
POSTHOOK: Lineage: events.time SCRIPT []
PREHOOK: query: insert into events values ('1', 'Bob', 1234, 25)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@events
POSTHOOK: query: insert into events values ('1', 'Bob', 1234, 25)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@events
POSTHOOK: Lineage: events.n SCRIPT []
POSTHOOK: Lineage: events.s SCRIPT []
POSTHOOK: Lineage: events.st2 SCRIPT []
POSTHOOK: Lineage: events.time SCRIPT []
PREHOOK: query: insert into events values ('2', 'Sam', 1234, 30)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@events
POSTHOOK: query: insert into events values ('2', 'Sam', 1234, 30)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@events
POSTHOOK: Lineage: events.n SCRIPT []
POSTHOOK: Lineage: events.s SCRIPT []
POSTHOOK: Lineage: events.st2 SCRIPT []
POSTHOOK: Lineage: events.time SCRIPT []
PREHOOK: query: insert into events values ('3', 'Jeff', 1234, 50)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@events
POSTHOOK: query: insert into events values ('3', 'Jeff', 1234, 50)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@events
POSTHOOK: Lineage: events.n SCRIPT []
POSTHOOK: Lineage: events.s SCRIPT []
POSTHOOK: Lineage: events.st2 SCRIPT []
POSTHOOK: Lineage: events.time SCRIPT []
PREHOOK: query: insert into events values ('4', 'Ted', 1234, 60)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@events
POSTHOOK: query: insert into events values ('4', 'Ted', 1234, 60)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@events
POSTHOOK: Lineage: events.n SCRIPT []
POSTHOOK: Lineage: events.s SCRIPT []
POSTHOOK: Lineage: events.st2 SCRIPT []
POSTHOOK: Lineage: events.time SCRIPT []
PREHOOK: query: explain
select s
from (
  select last.*, action.st2, action.n
  from (
    select purchase.s, purchase.`time`, max (mevt.`time`) as last_stage_time
    from (select * from purchase_history) purchase
    join (select * from cart_history) mevt
    on purchase.s = mevt.s
    where purchase.`time` > mevt.`time`
    group by purchase.s, purchase.`time`
  ) last
  join (select * from events) action
  on last.s = action.s and last.last_stage_time = action.`time`
) list
PREHOOK: type: QUERY
PREHOOK: Input: default@cart_history
PREHOOK: Input: default@events
PREHOOK: Input: default@purchase_history
#### A masked pattern was here ####
POSTHOOK: query: explain
select s
from (
  select last.*, action.st2, action.n
  from (
    select purchase.s, purchase.`time`, max (mevt.`time`) as last_stage_time
    from (select * from purchase_history) purchase
    join (select * from cart_history) mevt
    on purchase.s = mevt.s
    where purchase.`time` > mevt.`time`
    group by purchase.s, purchase.`time`
  ) last
  join (select * from events) action
  on last.s = action.s and last.last_stage_time = action.`time`
) list
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cart_history
POSTHOOK: Input: default@events
POSTHOOK: Input: default@purchase_history
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
        Reducer 4 <- Map 3 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
        Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: events
                  filterExpr: (s is not null and time is not null) (type: boolean)
                  Statistics: Num rows: 6 Data size: 534 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (s is not null and time is not null) (type: boolean)
                    Statistics: Num rows: 6 Data size: 534 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: s (type: string), time (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 6 Data size: 534 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: int)
                        null sort order: zz
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: int)
                        Statistics: Num rows: 6 Data size: 534 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: cart_history
                  filterExpr: (s is not null and time is not null) (type: boolean)
                  Statistics: Num rows: 6 Data size: 534 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (s is not null and time is not null) (type: boolean)
                    Statistics: Num rows: 6 Data size: 534 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: s (type: string), time (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 6 Data size: 534 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 6 Data size: 534 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: purchase_history
                  filterExpr: (s is not null and time is not null) (type: boolean)
                  Statistics: Num rows: 4 Data size: 356 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (s is not null and time is not null) (type: boolean)
                    Statistics: Num rows: 4 Data size: 356 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: s (type: string), time (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 4 Data size: 356 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 4 Data size: 356 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: string), _col1 (type: int)
                  1 _col0 (type: string), _col2 (type: int)
                outputColumnNames: _col2
                Statistics: Num rows: 2 Data size: 170 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col2 (type: string)
                  outputColumnNames: _col0
                  Statistics: Num rows: 2 Data size: 170 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 170 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: string)
                  1 _col0 (type: string)
                outputColumnNames: _col1, _col2, _col3
                residual filter predicates: {(_col3 > _col1)}
                Statistics: Num rows: 2 Data size: 186 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: max(_col1)
                  keys: _col2 (type: string), _col3 (type: int)
                  minReductionHashAggr: 0.4
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 2 Data size: 186 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: int)
                    null sort order: zz
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: string), _col1 (type: int)
                    Statistics: Num rows: 2 Data size: 186 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: int)
        Reducer 5 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 2 Data size: 186 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: string), _col2 (type: int)
                  outputColumnNames: _col0, _col2
                  Statistics: Num rows: 2 Data size: 178 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: _col2 is not null (type: boolean)
                    Statistics: Num rows: 2 Data size: 178 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: string), _col2 (type: int)
                      null sort order: zz
                      sort order: ++
                      Map-reduce partition columns: _col0 (type: string), _col2 (type: int)
                      Statistics: Num rows: 2 Data size: 178 Basic stats: COMPLETE Column stats: COMPLETE

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select s
from (
  select last.*, action.st2, action.n
  from (
    select purchase.s, purchase.`time`, max (mevt.`time`) as last_stage_time
    from (select * from purchase_history) purchase
    join (select * from cart_history) mevt
    on purchase.s = mevt.s
    where purchase.`time` > mevt.`time`
    group by purchase.s, purchase.`time`
  ) last
  join (select * from events) action
  on last.s = action.s and last.last_stage_time = action.`time`
) list
PREHOOK: type: QUERY
PREHOOK: Input: default@cart_history
PREHOOK: Input: default@events
PREHOOK: Input: default@purchase_history
#### A masked pattern was here ####
POSTHOOK: query: select s
from (
  select last.*, action.st2, action.n
  from (
    select purchase.s, purchase.`time`, max (mevt.`time`) as last_stage_time
    from (select * from purchase_history) purchase
    join (select * from cart_history) mevt
    on purchase.s = mevt.s
    where purchase.`time` > mevt.`time`
    group by purchase.s, purchase.`time`
  ) last
  join (select * from events) action
  on last.s = action.s and last.last_stage_time = action.`time`
) list
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cart_history
POSTHOOK: Input: default@events
POSTHOOK: Input: default@purchase_history
#### A masked pattern was here ####
1
1
3
PREHOOK: query: explain
select *
from (
  select last.*, action.st2, action.n
  from (
    select purchase.s, purchase.`time`, max (mevt.`time`) as last_stage_time
    from (select * from purchase_history) purchase
    join (select * from cart_history) mevt
    on purchase.s = mevt.s
    where purchase.`time` > mevt.`time`
    group by purchase.s, purchase.`time`
  ) last
  join (select * from events) action
  on last.s = action.s and last.last_stage_time = action.`time`
) list
PREHOOK: type: QUERY
PREHOOK: Input: default@cart_history
PREHOOK: Input: default@events
PREHOOK: Input: default@purchase_history
#### A masked pattern was here ####
POSTHOOK: query: explain
select *
from (
  select last.*, action.st2, action.n
  from (
    select purchase.s, purchase.`time`, max (mevt.`time`) as last_stage_time
    from (select * from purchase_history) purchase
    join (select * from cart_history) mevt
    on purchase.s = mevt.s
    where purchase.`time` > mevt.`time`
    group by purchase.s, purchase.`time`
  ) last
  join (select * from events) action
  on last.s = action.s and last.last_stage_time = action.`time`
) list
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cart_history
POSTHOOK: Input: default@events
POSTHOOK: Input: default@purchase_history
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
        Reducer 4 <- Map 3 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
        Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: events
                  filterExpr: (s is not null and time is not null) (type: boolean)
                  Statistics: Num rows: 6 Data size: 1086 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (s is not null and time is not null) (type: boolean)
                    Statistics: Num rows: 6 Data size: 1086 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: s (type: string), st2 (type: string), n (type: int), time (type: int)
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 6 Data size: 1086 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col3 (type: int)
                        null sort order: zz
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col3 (type: int)
                        Statistics: Num rows: 6 Data size: 1086 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: string), _col2 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: cart_history
                  filterExpr: (s is not null and time is not null) (type: boolean)
                  Statistics: Num rows: 6 Data size: 534 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (s is not null and time is not null) (type: boolean)
                    Statistics: Num rows: 6 Data size: 534 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: s (type: string), time (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 6 Data size: 534 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 6 Data size: 534 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: purchase_history
                  filterExpr: (s is not null and time is not null) (type: boolean)
                  Statistics: Num rows: 4 Data size: 356 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (s is not null and time is not null) (type: boolean)
                    Statistics: Num rows: 4 Data size: 356 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: s (type: string), time (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 4 Data size: 356 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 4 Data size: 356 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: string), _col3 (type: int)
                  1 _col0 (type: string), _col2 (type: int)
                outputColumnNames: _col1, _col2, _col4, _col5, _col6
                Statistics: Num rows: 2 Data size: 370 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col4 (type: string), _col5 (type: int), _col6 (type: int), _col1 (type: string), _col2 (type: int)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4
                  Statistics: Num rows: 2 Data size: 370 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 370 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: string)
                  1 _col0 (type: string)
                outputColumnNames: _col1, _col2, _col3
                residual filter predicates: {(_col3 > _col1)}
                Statistics: Num rows: 2 Data size: 186 Basic stats: COMPLETE Column stats: COMPLETE
                Group By Operator
                  aggregations: max(_col1)
                  keys: _col2 (type: string), _col3 (type: int)
                  minReductionHashAggr: 0.4
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 2 Data size: 186 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: int)
                    null sort order: zz
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: string), _col1 (type: int)
                    Statistics: Num rows: 2 Data size: 186 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col2 (type: int)
        Reducer 5 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: max(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 2 Data size: 186 Basic stats: COMPLETE Column stats: COMPLETE
                Filter Operator
                  predicate: _col2 is not null (type: boolean)
                  Statistics: Num rows: 2 Data size: 186 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col2 (type: int)
                    null sort order: zz
                    sort order: ++
                    Map-reduce partition columns: _col0 (type: string), _col2 (type: int)
                    Statistics: Num rows: 2 Data size: 186 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col1 (type: int)

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select *
from (
  select last.*, action.st2, action.n
  from (
    select purchase.s, purchase.`time`, max (mevt.`time`) as last_stage_time
    from (select * from purchase_history) purchase
    join (select * from cart_history) mevt
    on purchase.s = mevt.s
    where purchase.`time` > mevt.`time`
    group by purchase.s, purchase.`time`
  ) last
  join (select * from events) action
  on last.s = action.s and last.last_stage_time = action.`time`
) list
PREHOOK: type: QUERY
PREHOOK: Input: default@cart_history
PREHOOK: Input: default@events
PREHOOK: Input: default@purchase_history
#### A masked pattern was here ####
POSTHOOK: query: select *
from (
  select last.*, action.st2, action.n
  from (
    select purchase.s, purchase.`time`, max (mevt.`time`) as last_stage_time
    from (select * from purchase_history) purchase
    join (select * from cart_history) mevt
    on purchase.s = mevt.s
    where purchase.`time` > mevt.`time`
    group by purchase.s, purchase.`time`
  ) last
  join (select * from events) action
  on last.s = action.s and last.last_stage_time = action.`time`
) list
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cart_history
POSTHOOK: Input: default@events
POSTHOOK: Input: default@purchase_history
#### A masked pattern was here ####
1	21	20	Bob	1234
1	31	30	Bob	1234
3	51	50	Jeff	1234
