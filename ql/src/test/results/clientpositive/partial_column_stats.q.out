PREHOOK: query: create table t1_n53 (key int, data struct<name:string, id: string>, value string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@t1_n53
POSTHOOK: query: create table t1_n53 (key int, data struct<name:string, id: string>, value string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t1_n53
PREHOOK: query: explain analyze table t1_n53 compute statistics for columns
PREHOOK: type: ANALYZE_TABLE
PREHOOK: Input: default@t1_n53
PREHOOK: Output: default@t1_n53
#### A masked pattern was here ####
POSTHOOK: query: explain analyze table t1_n53 compute statistics for columns
POSTHOOK: type: ANALYZE_TABLE
POSTHOOK: Input: default@t1_n53
POSTHOOK: Output: default@t1_n53
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage
  Stage-1 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-0
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: t1_n53
            Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: string)
              outputColumnNames: key, value
              Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
              Group By Operator
                aggregations: compute_stats(key, 'hll'), compute_stats(value, 'hll')
                mode: hash
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 864 Basic stats: PARTIAL Column stats: NONE
                Reduce Output Operator
                  sort order: 
                  Statistics: Num rows: 1 Data size: 864 Basic stats: PARTIAL Column stats: NONE
                  value expressions: _col0 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col1 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>)
      Reduce Operator Tree:
        Group By Operator
          aggregations: compute_stats(VALUE._col0), compute_stats(VALUE._col1)
          mode: mergepartial
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 1 Data size: 880 Basic stats: PARTIAL Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 1 Data size: 880 Basic stats: PARTIAL Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-1
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key, value
          Column Types: int, string
          Table: default.t1_n53

PREHOOK: query: analyze table t1_n53 compute statistics for columns
PREHOOK: type: ANALYZE_TABLE
PREHOOK: Input: default@t1_n53
PREHOOK: Output: default@t1_n53
#### A masked pattern was here ####
POSTHOOK: query: analyze table t1_n53 compute statistics for columns
POSTHOOK: type: ANALYZE_TABLE
POSTHOOK: Input: default@t1_n53
POSTHOOK: Output: default@t1_n53
#### A masked pattern was here ####
PREHOOK: query: desc formatted t1_n53 value
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@t1_n53
POSTHOOK: query: desc formatted t1_n53 value
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@t1_n53
col_name            	value               	 	 	 	 	 	 	 	 	 	 
data_type           	string              	 	 	 	 	 	 	 	 	 	 
min                 	                    	 	 	 	 	 	 	 	 	 	 
max                 	                    	 	 	 	 	 	 	 	 	 	 
num_nulls           	0                   	 	 	 	 	 	 	 	 	 	 
distinct_count      	0                   	 	 	 	 	 	 	 	 	 	 
avg_col_len         	0.0                 	 	 	 	 	 	 	 	 	 	 
max_col_len         	0                   	 	 	 	 	 	 	 	 	 	 
num_trues           	                    	 	 	 	 	 	 	 	 	 	 
num_falses          	                    	 	 	 	 	 	 	 	 	 	 
bitVector           	                    	 	 	 	 	 	 	 	 	 	 
comment             	from deserializer   	 	 	 	 	 	 	 	 	 	 
COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"data\":\"true\",\"key\":\"true\",\"value\":\"true\"}}	 	 	 	 	 	 	 	 	 	 
