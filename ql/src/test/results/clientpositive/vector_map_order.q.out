PREHOOK: query: create table map_table_n0 (foo STRING , bar MAP<STRING, STRING>)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '\t'
COLLECTION ITEMS TERMINATED BY ','
MAP KEYS TERMINATED BY ':'
STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@map_table_n0
POSTHOOK: query: create table map_table_n0 (foo STRING , bar MAP<STRING, STRING>)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '\t'
COLLECTION ITEMS TERMINATED BY ','
MAP KEYS TERMINATED BY ':'
STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@map_table_n0
PREHOOK: query: load data local inpath "../../data/files/map_table.txt" overwrite into table map_table_n0
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@map_table_n0
POSTHOOK: query: load data local inpath "../../data/files/map_table.txt" overwrite into table map_table_n0
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@map_table_n0
PREHOOK: query: explain vectorization detail
select * from map_table_n0
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select * from map_table_n0
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: map_table_n0
            Statistics: Num rows: 1 Data size: 520 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                vectorizationSchemaColumns: [0:foo:string, 1:bar:map<string,string>, 2:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
            Select Operator
              expressions: foo (type: string), bar (type: map<string,string>)
              outputColumnNames: _col0, _col1
              Select Vectorization:
                  className: VectorSelectOperator
                  native: true
                  projectedOutputColumnNums: [0, 1]
              Statistics: Num rows: 1 Data size: 520 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                File Sink Vectorization:
                    className: VectorFileSinkOperator
                    native: false
                Statistics: Num rows: 1 Data size: 520 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vector.serde.deserialize IS true
          inputFormatFeatureSupport: [DECIMAL_64]
          featureSupportInUse: [DECIMAL_64]
          inputFileFormats: org.apache.hadoop.mapred.TextInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 2
              includeColumns: [0, 1]
              dataColumns: foo:string, bar:map<string,string>
              partitionColumnCount: 0
              scratchColumnTypeNames: []

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from map_table_n0
PREHOOK: type: QUERY
PREHOOK: Input: default@map_table_n0
#### A masked pattern was here ####
POSTHOOK: query: select * from map_table_n0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@map_table_n0
#### A masked pattern was here ####
foo1	{"k1":"v1","k2":"v2","k3":"v3"}
foo2	{"k21":"v21","k22":"v22","k31":"v31"}
