PREHOOK: query: CREATE TABLE T1(key INT, value INT) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@T1
POSTHOOK: query: CREATE TABLE T1(key INT, value INT) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@T1
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/groupby_groupingid.txt' INTO TABLE T1
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@t1
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/groupby_groupingid.txt' INTO TABLE T1
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@t1
PREHOOK: query: explain
select key, value, `grouping__id`, grouping(key), grouping(value)
from T1
group by rollup(key, value)
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key, value, `grouping__id`, grouping(key), grouping(value)
from T1
group by rollup(key, value)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: t1
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Group By Operator
                keys: _col0 (type: int), _col1 (type: int), 0 (type: bigint)
                mode: hash
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 3 Data size: 900 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  sort order: +++
                  Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  Statistics: Num rows: 3 Data size: 900 Basic stats: COMPLETE Column stats: NONE
      Reduce Operator Tree:
        Group By Operator
          keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: bigint)
          mode: mergepartial
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint), grouping(_col2, 1) (type: bigint), grouping(_col2, 0) (type: bigint)
            outputColumnNames: _col0, _col1, _col2, _col3, _col4
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key, value, `grouping__id`, grouping(key), grouping(value)
from T1
group by rollup(key, value)
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: select key, value, `grouping__id`, grouping(key), grouping(value)
from T1
group by rollup(key, value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
1	1	0	0	0
1	NULL	0	0	0
1	NULL	1	0	1
2	2	0	0	0
2	NULL	1	0	1
3	3	0	0	0
3	NULL	0	0	0
3	NULL	1	0	1
4	5	0	0	0
4	NULL	1	0	1
NULL	NULL	3	1	1
PREHOOK: query: explain
select key, value, `grouping__id`, grouping(key), grouping(value)
from T1
group by cube(key, value)
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key, value, `grouping__id`, grouping(key), grouping(value)
from T1
group by cube(key, value)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: t1
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Group By Operator
                keys: _col0 (type: int), _col1 (type: int), 0 (type: bigint)
                mode: hash
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  sort order: +++
                  Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
      Reduce Operator Tree:
        Group By Operator
          keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: bigint)
          mode: mergepartial
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint), grouping(_col2, 1) (type: bigint), grouping(_col2, 0) (type: bigint)
            outputColumnNames: _col0, _col1, _col2, _col3, _col4
            Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key, value, `grouping__id`, grouping(key), grouping(value)
from T1
group by cube(key, value)
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: select key, value, `grouping__id`, grouping(key), grouping(value)
from T1
group by cube(key, value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
1	1	0	0	0
1	NULL	0	0	0
1	NULL	1	0	1
2	2	0	0	0
2	NULL	1	0	1
3	3	0	0	0
3	NULL	0	0	0
3	NULL	1	0	1
4	5	0	0	0
4	NULL	1	0	1
NULL	1	2	1	0
NULL	2	2	1	0
NULL	3	2	1	0
NULL	5	2	1	0
NULL	NULL	2	1	0
NULL	NULL	3	1	1
PREHOOK: query: explain
select key, value
from T1
group by cube(key, value)
having grouping(key) = 1
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key, value
from T1
group by cube(key, value)
having grouping(key) = 1
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: t1
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Group By Operator
                keys: _col0 (type: int), _col1 (type: int), 0 (type: bigint)
                mode: hash
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  sort order: +++
                  Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
      Reduce Operator Tree:
        Group By Operator
          keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: bigint)
          mode: mergepartial
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
          Filter Operator
            predicate: (grouping(_col2, 1) = 1) (type: boolean)
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: int), _col1 (type: int)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key, value
from T1
group by cube(key, value)
having grouping(key) = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: select key, value
from T1
group by cube(key, value)
having grouping(key) = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
NULL	1
NULL	2
NULL	3
NULL	5
NULL	NULL
NULL	NULL
PREHOOK: query: explain
select key, value, grouping(key)+grouping(value) as x
from T1
group by cube(key, value)
having grouping(key) = 1 OR grouping(value) = 1
order by x desc, case when x = 1 then key end
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key, value, grouping(key)+grouping(value) as x
from T1
group by cube(key, value)
having grouping(key) = 1 OR grouping(value) = 1
order by x desc, case when x = 1 then key end
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: t1
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Group By Operator
                keys: _col0 (type: int), _col1 (type: int), 0 (type: bigint)
                mode: hash
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  sort order: +++
                  Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
      Reduce Operator Tree:
        Group By Operator
          keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: bigint)
          mode: mergepartial
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
          Filter Operator
            predicate: ((grouping(_col2, 0) = 1) or (grouping(_col2, 1) = 1)) (type: boolean)
            Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: int), _col1 (type: int), (grouping(_col2, 1) + grouping(_col2, 0)) (type: bigint), CASE WHEN (((grouping(_col2, 1) + grouping(_col2, 0)) = 1)) THEN (_col0) ELSE (null) END (type: int)
              outputColumnNames: _col0, _col1, _col2, _col3
              Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              key expressions: _col2 (type: bigint), _col3 (type: int)
              sort order: -+
              Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
              value expressions: _col0 (type: int), _col1 (type: int)
      Reduce Operator Tree:
        Select Operator
          expressions: VALUE._col0 (type: int), VALUE._col1 (type: int), KEY.reducesinkkey0 (type: bigint)
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key, value, grouping(key)+grouping(value) as x
from T1
group by cube(key, value)
having grouping(key) = 1 OR grouping(value) = 1
order by x desc, case when x = 1 then key end
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: select key, value, grouping(key)+grouping(value) as x
from T1
group by cube(key, value)
having grouping(key) = 1 OR grouping(value) = 1
order by x desc, case when x = 1 then key end
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
1	NULL	1
2	NULL	1
3	NULL	1
4	NULL	1
NULL	1	1
NULL	2	1
NULL	3	1
NULL	5	1
NULL	NULL	1
NULL	NULL	2
PREHOOK: query: explain
select key, value, `grouping__id`, grouping(key), grouping(value)
from T1
group by rollup(key, value)
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key, value, `grouping__id`, grouping(key), grouping(value)
from T1
group by rollup(key, value)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: t1
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: key, value
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Group By Operator
                keys: key (type: int), value (type: int), 0 (type: bigint)
                mode: hash
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 3 Data size: 900 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  sort order: +++
                  Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  Statistics: Num rows: 3 Data size: 900 Basic stats: COMPLETE Column stats: NONE
      Reduce Operator Tree:
        Group By Operator
          keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: bigint)
          mode: mergepartial
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint), grouping(_col2, 1) (type: bigint), grouping(_col2, 0) (type: bigint)
            outputColumnNames: _col0, _col1, _col2, _col3, _col4
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key, value, `grouping__id`, grouping(key), grouping(value)
from T1
group by rollup(key, value)
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: select key, value, `grouping__id`, grouping(key), grouping(value)
from T1
group by rollup(key, value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
1	1	0	0	0
1	NULL	0	0	0
1	NULL	1	0	1
2	2	0	0	0
2	NULL	1	0	1
3	3	0	0	0
3	NULL	0	0	0
3	NULL	1	0	1
4	5	0	0	0
4	NULL	1	0	1
NULL	NULL	3	1	1
PREHOOK: query: explain
select key, value, `grouping__id`, grouping(key), grouping(value)
from T1
group by cube(key, value)
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key, value, `grouping__id`, grouping(key), grouping(value)
from T1
group by cube(key, value)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: t1
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: key, value
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Group By Operator
                keys: key (type: int), value (type: int), 0 (type: bigint)
                mode: hash
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  sort order: +++
                  Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
      Reduce Operator Tree:
        Group By Operator
          keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: bigint)
          mode: mergepartial
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint), grouping(_col2, 1) (type: bigint), grouping(_col2, 0) (type: bigint)
            outputColumnNames: _col0, _col1, _col2, _col3, _col4
            Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key, value, `grouping__id`, grouping(key), grouping(value)
from T1
group by cube(key, value)
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: select key, value, `grouping__id`, grouping(key), grouping(value)
from T1
group by cube(key, value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
1	1	0	0	0
1	NULL	0	0	0
1	NULL	1	0	1
2	2	0	0	0
2	NULL	1	0	1
3	3	0	0	0
3	NULL	0	0	0
3	NULL	1	0	1
4	5	0	0	0
4	NULL	1	0	1
NULL	1	2	1	0
NULL	2	2	1	0
NULL	3	2	1	0
NULL	5	2	1	0
NULL	NULL	2	1	0
NULL	NULL	3	1	1
PREHOOK: query: explain
select key, value
from T1
group by cube(key, value)
having grouping(key) = 1
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key, value
from T1
group by cube(key, value)
having grouping(key) = 1
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: t1
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: key, value
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Group By Operator
                keys: key (type: int), value (type: int), 0 (type: bigint)
                mode: hash
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                Filter Operator
                  predicate: (grouping(_col2, 1) = 1) (type: boolean)
                  Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                    sort order: +++
                    Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                    Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
      Reduce Operator Tree:
        Group By Operator
          keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: bigint)
          mode: mergepartial
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
          pruneGroupingSetId: true
          File Output Operator
            compressed: false
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key, value
from T1
group by cube(key, value)
having grouping(key) = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: select key, value
from T1
group by cube(key, value)
having grouping(key) = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
NULL	1
NULL	2
NULL	3
NULL	5
NULL	NULL
NULL	NULL
PREHOOK: query: explain
select key, value, grouping(key)+grouping(value) as x
from T1
group by cube(key, value)
having grouping(key) = 1 OR grouping(value) = 1
order by x desc, case when x = 1 then key end
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key, value, grouping(key)+grouping(value) as x
from T1
group by cube(key, value)
having grouping(key) = 1 OR grouping(value) = 1
order by x desc, case when x = 1 then key end
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: t1
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: key, value
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Group By Operator
                keys: key (type: int), value (type: int), 0 (type: bigint)
                mode: hash
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                Filter Operator
                  predicate: ((grouping(_col2, 0) = 1) or (grouping(_col2, 1) = 1)) (type: boolean)
                  Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                    sort order: +++
                    Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                    Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
      Reduce Operator Tree:
        Group By Operator
          keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: bigint)
          mode: mergepartial
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: _col0 (type: int), _col1 (type: int), (grouping(_col2, 1) + grouping(_col2, 0)) (type: bigint)
            outputColumnNames: _col0, _col1, _col2
            Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              key expressions: _col2 (type: bigint), CASE WHEN ((_col2 = 1)) THEN (_col0) END (type: int)
              sort order: -+
              Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
              value expressions: _col0 (type: int), _col1 (type: int)
      Reduce Operator Tree:
        Select Operator
          expressions: VALUE._col0 (type: int), VALUE._col1 (type: int), KEY.reducesinkkey0 (type: bigint)
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key, value, grouping(key)+grouping(value) as x
from T1
group by cube(key, value)
having grouping(key) = 1 OR grouping(value) = 1
order by x desc, case when x = 1 then key end
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: select key, value, grouping(key)+grouping(value) as x
from T1
group by cube(key, value)
having grouping(key) = 1 OR grouping(value) = 1
order by x desc, case when x = 1 then key end
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
1	NULL	1
2	NULL	1
3	NULL	1
4	NULL	1
NULL	1	1
NULL	2	1
NULL	3	1
NULL	5	1
NULL	NULL	1
NULL	NULL	2
PREHOOK: query: explain
select key, value, grouping(key), grouping(value)
from T1
group by key, value
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key, value, grouping(key), grouping(value)
from T1
group by key, value
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: t1
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: key, value
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Group By Operator
                keys: key (type: int), value (type: int)
                mode: hash
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int), _col1 (type: int)
                  sort order: ++
                  Map-reduce partition columns: _col0 (type: int), _col1 (type: int)
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
      Reduce Operator Tree:
        Group By Operator
          keys: KEY._col0 (type: int), KEY._col1 (type: int)
          mode: mergepartial
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: _col0 (type: int), _col1 (type: int), 0 (type: bigint), 0 (type: bigint)
            outputColumnNames: _col0, _col1, _col2, _col3
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key, value, grouping(key), grouping(value)
from T1
group by key, value
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: select key, value, grouping(key), grouping(value)
from T1
group by key, value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
1	1	0	0
1	NULL	0	0
2	2	0	0
3	3	0	0
3	NULL	0	0
4	5	0	0
PREHOOK: query: explain
select key, value, grouping(value)
from T1
group by key, value
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key, value, grouping(value)
from T1
group by key, value
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: t1
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: key, value
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Group By Operator
                keys: key (type: int), value (type: int)
                mode: hash
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int), _col1 (type: int)
                  sort order: ++
                  Map-reduce partition columns: _col0 (type: int), _col1 (type: int)
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
      Reduce Operator Tree:
        Group By Operator
          keys: KEY._col0 (type: int), KEY._col1 (type: int)
          mode: mergepartial
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: _col0 (type: int), _col1 (type: int), 0 (type: bigint)
            outputColumnNames: _col0, _col1, _col2
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key, value, grouping(value)
from T1
group by key, value
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: select key, value, grouping(value)
from T1
group by key, value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
1	1	0
1	NULL	0
2	2	0
3	3	0
3	NULL	0
4	5	0
PREHOOK: query: explain
select key, value
from T1
group by key, value
having grouping(key) = 0
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key, value
from T1
group by key, value
having grouping(key) = 0
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: t1
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: key, value
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Group By Operator
                keys: key (type: int), value (type: int)
                mode: hash
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int), _col1 (type: int)
                  sort order: ++
                  Map-reduce partition columns: _col0 (type: int), _col1 (type: int)
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
      Reduce Operator Tree:
        Group By Operator
          keys: KEY._col0 (type: int), KEY._col1 (type: int)
          mode: mergepartial
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key, value
from T1
group by key, value
having grouping(key) = 0
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: select key, value
from T1
group by key, value
having grouping(key) = 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
1	1
1	NULL
2	2
3	3
3	NULL
4	5
PREHOOK: query: explain
select key, value, `grouping__id`, grouping(key, value)
from T1
group by cube(key, value)
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key, value, `grouping__id`, grouping(key, value)
from T1
group by cube(key, value)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: t1
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: key, value
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Group By Operator
                keys: key (type: int), value (type: int), 0 (type: bigint)
                mode: hash
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  sort order: +++
                  Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
      Reduce Operator Tree:
        Group By Operator
          keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: bigint)
          mode: mergepartial
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint), grouping(_col2, 1, 0) (type: bigint)
            outputColumnNames: _col0, _col1, _col2, _col3
            Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key, value, `grouping__id`, grouping(key, value)
from T1
group by cube(key, value)
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: select key, value, `grouping__id`, grouping(key, value)
from T1
group by cube(key, value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
1	1	0	0
1	NULL	0	0
1	NULL	1	1
2	2	0	0
2	NULL	1	1
3	3	0	0
3	NULL	0	0
3	NULL	1	1
4	5	0	0
4	NULL	1	1
NULL	1	2	2
NULL	2	2	2
NULL	3	2	2
NULL	5	2	2
NULL	NULL	2	2
NULL	NULL	3	3
PREHOOK: query: explain
select key, value, `grouping__id`, grouping(value, key)
from T1
group by cube(key, value)
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key, value, `grouping__id`, grouping(value, key)
from T1
group by cube(key, value)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: t1
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: key, value
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Group By Operator
                keys: key (type: int), value (type: int), 0 (type: bigint)
                mode: hash
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  sort order: +++
                  Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
      Reduce Operator Tree:
        Group By Operator
          keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: bigint)
          mode: mergepartial
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint), grouping(_col2, 0, 1) (type: bigint)
            outputColumnNames: _col0, _col1, _col2, _col3
            Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key, value, `grouping__id`, grouping(value, key)
from T1
group by cube(key, value)
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: select key, value, `grouping__id`, grouping(value, key)
from T1
group by cube(key, value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
1	1	0	0
1	NULL	0	0
1	NULL	1	2
2	2	0	0
2	NULL	1	2
3	3	0	0
3	NULL	0	0
3	NULL	1	2
4	5	0	0
4	NULL	1	2
NULL	1	2	1
NULL	2	2	1
NULL	3	2	1
NULL	5	2	1
NULL	NULL	2	1
NULL	NULL	3	3
PREHOOK: query: explain
select key, value, `grouping__id`, grouping(key, value)
from T1
group by rollup(key, value)
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key, value, `grouping__id`, grouping(key, value)
from T1
group by rollup(key, value)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: t1
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: key, value
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Group By Operator
                keys: key (type: int), value (type: int), 0 (type: bigint)
                mode: hash
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 3 Data size: 900 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  sort order: +++
                  Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  Statistics: Num rows: 3 Data size: 900 Basic stats: COMPLETE Column stats: NONE
      Reduce Operator Tree:
        Group By Operator
          keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: bigint)
          mode: mergepartial
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint), grouping(_col2, 1, 0) (type: bigint)
            outputColumnNames: _col0, _col1, _col2, _col3
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key, value, `grouping__id`, grouping(key, value)
from T1
group by rollup(key, value)
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: select key, value, `grouping__id`, grouping(key, value)
from T1
group by rollup(key, value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
1	1	0	0
1	NULL	0	0
1	NULL	1	1
2	2	0	0
2	NULL	1	1
3	3	0	0
3	NULL	0	0
3	NULL	1	1
4	5	0	0
4	NULL	1	1
NULL	NULL	3	3
PREHOOK: query: explain
select key, value, `grouping__id`, grouping(value, key)
from T1
group by rollup(key, value)
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key, value, `grouping__id`, grouping(value, key)
from T1
group by rollup(key, value)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: t1
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: int), value (type: int)
              outputColumnNames: key, value
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Group By Operator
                keys: key (type: int), value (type: int), 0 (type: bigint)
                mode: hash
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 3 Data size: 900 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  sort order: +++
                  Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: bigint)
                  Statistics: Num rows: 3 Data size: 900 Basic stats: COMPLETE Column stats: NONE
      Reduce Operator Tree:
        Group By Operator
          keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: bigint)
          mode: mergepartial
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: _col0 (type: int), _col1 (type: int), _col2 (type: bigint), grouping(_col2, 0, 1) (type: bigint)
            outputColumnNames: _col0, _col1, _col2, _col3
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key, value, `grouping__id`, grouping(value, key)
from T1
group by rollup(key, value)
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: select key, value, `grouping__id`, grouping(value, key)
from T1
group by rollup(key, value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
1	1	0	0
1	NULL	0	0
1	NULL	1	2
2	2	0	0
2	NULL	1	2
3	3	0	0
3	NULL	0	0
3	NULL	1	2
4	5	0	0
4	NULL	1	2
NULL	NULL	3	3
