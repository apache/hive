PREHOOK: query: CREATE TABLE dest1(`location` INT, `type` STRING) PARTITIONED BY(`table` STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@dest1
POSTHOOK: query: CREATE TABLE dest1(`location` INT, `type` STRING) PARTITIONED BY(`table` STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@dest1
PREHOOK: query: EXPLAIN
FROM src
INSERT OVERWRITE TABLE dest1 PARTITION(`table`='2008-04-08') SELECT src.key as `partition`, src.value as `from` WHERE src.key >= 200 and src.key < 300
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
FROM src
INSERT OVERWRITE TABLE dest1 PARTITION(`table`='2008-04-08') SELECT src.key as `partition`, src.value as `from` WHERE src.key >= 200 and src.key < 300
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-7 depends on stages: Stage-1 , consists of Stage-4, Stage-3, Stage-5
  Stage-4
  Stage-0 depends on stages: Stage-4, Stage-3, Stage-6
  Stage-2 depends on stages: Stage-0
  Stage-3
  Stage-5
  Stage-6 depends on stages: Stage-5

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: src
            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: ((UDFToDouble(key) < 300.0D) and (UDFToDouble(key) >= 200.0D)) (type: boolean)
              Statistics: Num rows: 55 Data size: 584 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: UDFToInteger(key) (type: int), value (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 55 Data size: 584 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 55 Data size: 584 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.dest1
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: string), '2008-04-08' (type: string)
                  outputColumnNames: location, type, table
                  Statistics: Num rows: 55 Data size: 584 Basic stats: COMPLETE Column stats: NONE
                  Group By Operator
                    aggregations: compute_stats(location, 'hll'), compute_stats(type, 'hll')
                    keys: table (type: string)
                    mode: hash
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 55 Data size: 584 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Map-reduce partition columns: _col0 (type: string)
                      Statistics: Num rows: 55 Data size: 584 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col2 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>)
      Reduce Operator Tree:
        Group By Operator
          aggregations: compute_stats(VALUE._col0), compute_stats(VALUE._col1)
          keys: KEY._col0 (type: string)
          mode: mergepartial
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 27 Data size: 286 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: _col1 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), _col2 (type: struct<columntype:string,maxlength:bigint,avglength:double,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), _col0 (type: string)
            outputColumnNames: _col0, _col1, _col2
            Statistics: Num rows: 27 Data size: 286 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              Statistics: Num rows: 27 Data size: 286 Basic stats: COMPLETE Column stats: NONE
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-7
    Conditional Operator

  Stage: Stage-4
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            table 2008-04-08
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.dest1

  Stage: Stage-2
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: location, type
          Column Types: int, string
          Table: default.dest1

  Stage: Stage-3
    Map Reduce
      Map Operator Tree:
          TableScan
            File Output Operator
              compressed: false
              table:
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                  name: default.dest1

  Stage: Stage-5
    Map Reduce
      Map Operator Tree:
          TableScan
            File Output Operator
              compressed: false
              table:
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                  name: default.dest1

  Stage: Stage-6
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####

PREHOOK: query: EXPLAIN
SELECT `int`.`location`, `int`.`type`, `int`.`table` FROM dest1 `int` WHERE `int`.`table` = '2008-04-08'
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT `int`.`location`, `int`.`type`, `int`.`table` FROM dest1 `int` WHERE `int`.`table` = '2008-04-08'
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: int
          Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
          Filter Operator
            predicate: (table = '2008-04-08') (type: boolean)
            Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
            Select Operator
              expressions: location (type: int), type (type: string), '2008-04-08' (type: string)
              outputColumnNames: _col0, _col1, _col2
              Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
              ListSink

PREHOOK: query: FROM src
INSERT OVERWRITE TABLE dest1 PARTITION(`table`='2008-04-08') SELECT src.key as `partition`, src.value as `from` WHERE src.key >= 200 and src.key < 300
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1@table=2008-04-08
POSTHOOK: query: FROM src
INSERT OVERWRITE TABLE dest1 PARTITION(`table`='2008-04-08') SELECT src.key as `partition`, src.value as `from` WHERE src.key >= 200 and src.key < 300
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1@table=2008-04-08
POSTHOOK: Lineage: dest1 PARTITION(table=2008-04-08).location EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest1 PARTITION(table=2008-04-08).type SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: SELECT `int`.`location`, `int`.`type`, `int`.`table` FROM dest1 `int` WHERE `int`.`table` = '2008-04-08'
PREHOOK: type: QUERY
PREHOOK: Input: default@dest1
PREHOOK: Input: default@dest1@table=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: SELECT `int`.`location`, `int`.`type`, `int`.`table` FROM dest1 `int` WHERE `int`.`table` = '2008-04-08'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest1
POSTHOOK: Input: default@dest1@table=2008-04-08
#### A masked pattern was here ####
238	val_238	2008-04-08
255	val_255	2008-04-08
278	val_278	2008-04-08
265	val_265	2008-04-08
273	val_273	2008-04-08
224	val_224	2008-04-08
213	val_213	2008-04-08
281	val_281	2008-04-08
277	val_277	2008-04-08
209	val_209	2008-04-08
252	val_252	2008-04-08
292	val_292	2008-04-08
219	val_219	2008-04-08
287	val_287	2008-04-08
237	val_237	2008-04-08
207	val_207	2008-04-08
208	val_208	2008-04-08
247	val_247	2008-04-08
266	val_266	2008-04-08
203	val_203	2008-04-08
205	val_205	2008-04-08
221	val_221	2008-04-08
280	val_280	2008-04-08
277	val_277	2008-04-08
208	val_208	2008-04-08
286	val_286	2008-04-08
239	val_239	2008-04-08
213	val_213	2008-04-08
216	val_216	2008-04-08
278	val_278	2008-04-08
289	val_289	2008-04-08
221	val_221	2008-04-08
275	val_275	2008-04-08
241	val_241	2008-04-08
284	val_284	2008-04-08
230	val_230	2008-04-08
260	val_260	2008-04-08
272	val_272	2008-04-08
217	val_217	2008-04-08
230	val_230	2008-04-08
208	val_208	2008-04-08
298	val_298	2008-04-08
230	val_230	2008-04-08
205	val_205	2008-04-08
288	val_288	2008-04-08
282	val_282	2008-04-08
282	val_282	2008-04-08
238	val_238	2008-04-08
277	val_277	2008-04-08
273	val_273	2008-04-08
224	val_224	2008-04-08
242	val_242	2008-04-08
272	val_272	2008-04-08
242	val_242	2008-04-08
226	val_226	2008-04-08
229	val_229	2008-04-08
233	val_233	2008-04-08
223	val_223	2008-04-08
218	val_218	2008-04-08
228	val_228	2008-04-08
209	val_209	2008-04-08
230	val_230	2008-04-08
296	val_296	2008-04-08
216	val_216	2008-04-08
274	val_274	2008-04-08
219	val_219	2008-04-08
239	val_239	2008-04-08
223	val_223	2008-04-08
256	val_256	2008-04-08
263	val_263	2008-04-08
288	val_288	2008-04-08
244	val_244	2008-04-08
202	val_202	2008-04-08
229	val_229	2008-04-08
280	val_280	2008-04-08
283	val_283	2008-04-08
235	val_235	2008-04-08
257	val_257	2008-04-08
258	val_258	2008-04-08
203	val_203	2008-04-08
262	val_262	2008-04-08
201	val_201	2008-04-08
217	val_217	2008-04-08
298	val_298	2008-04-08
291	val_291	2008-04-08
255	val_255	2008-04-08
200	val_200	2008-04-08
237	val_237	2008-04-08
248	val_248	2008-04-08
277	val_277	2008-04-08
230	val_230	2008-04-08
207	val_207	2008-04-08
249	val_249	2008-04-08
265	val_265	2008-04-08
214	val_214	2008-04-08
233	val_233	2008-04-08
256	val_256	2008-04-08
298	val_298	2008-04-08
285	val_285	2008-04-08
273	val_273	2008-04-08
281	val_281	2008-04-08
222	val_222	2008-04-08
200	val_200	2008-04-08
