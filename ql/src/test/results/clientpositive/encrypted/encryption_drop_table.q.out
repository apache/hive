PREHOOK: query: DROP TABLE IF EXISTS encrypted_table_n2
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS encrypted_table_n2
POSTHOOK: type: DROPTABLE
PREHOOK: query: DROP TABLE IF EXISTS encrypted_ext_table
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS encrypted_ext_table
POSTHOOK: type: DROPTABLE
#### A masked pattern was here ####
PREHOOK: type: CREATETABLE
PREHOOK: Input: hdfs://### HDFS PATH ###
PREHOOK: Output: database:default
PREHOOK: Output: default@encrypted_table_n2
#### A masked pattern was here ####
POSTHOOK: type: CREATETABLE
POSTHOOK: Input: hdfs://### HDFS PATH ###
POSTHOOK: Output: database:default
POSTHOOK: Output: default@encrypted_table_n2
Encryption key created: 'key_128'
Encryption zone created: '/build/ql/test/data/warehouse/default/encrypted_table' using key: 'key_128'
PREHOOK: query: INSERT OVERWRITE TABLE encrypted_table_n2 SELECT * FROM src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@encrypted_table_n2
POSTHOOK: query: INSERT OVERWRITE TABLE encrypted_table_n2 SELECT * FROM src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@encrypted_table_n2
POSTHOOK: Lineage: encrypted_table_n2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: encrypted_table_n2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
#### A masked pattern was here ####
PREHOOK: type: CREATETABLE
PREHOOK: Input: hdfs://### HDFS PATH ###
PREHOOK: Output: database:default
PREHOOK: Output: default@encrypted_ext_table
#### A masked pattern was here ####
POSTHOOK: type: CREATETABLE
POSTHOOK: Input: hdfs://### HDFS PATH ###
POSTHOOK: Output: database:default
POSTHOOK: Output: default@encrypted_ext_table
PREHOOK: query: SHOW TABLES
PREHOOK: type: SHOWTABLES
PREHOOK: Input: database:default
POSTHOOK: query: SHOW TABLES
POSTHOOK: type: SHOWTABLES
POSTHOOK: Input: database:default
encrypted_ext_table
encrypted_table_n2
src
PREHOOK: query: DROP TABLE default.encrypted_ext_table
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@encrypted_ext_table
PREHOOK: Output: default@encrypted_ext_table
POSTHOOK: query: DROP TABLE default.encrypted_ext_table
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@encrypted_ext_table
POSTHOOK: Output: default@encrypted_ext_table
PREHOOK: query: SHOW TABLES
PREHOOK: type: SHOWTABLES
PREHOOK: Input: database:default
POSTHOOK: query: SHOW TABLES
POSTHOOK: type: SHOWTABLES
POSTHOOK: Input: database:default
encrypted_table_n2
src
PREHOOK: query: DROP TABLE default.encrypted_table_n2
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@encrypted_table_n2
PREHOOK: Output: default@encrypted_table_n2
POSTHOOK: query: DROP TABLE default.encrypted_table_n2
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@encrypted_table_n2
POSTHOOK: Output: default@encrypted_table_n2
PREHOOK: query: SHOW TABLES
PREHOOK: type: SHOWTABLES
PREHOOK: Input: database:default
POSTHOOK: query: SHOW TABLES
POSTHOOK: type: SHOWTABLES
POSTHOOK: Input: database:default
src
PREHOOK: query: DROP TABLE IF EXISTS encrypted_table1
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS encrypted_table1
POSTHOOK: type: DROPTABLE
#### A masked pattern was here ####
PREHOOK: type: CREATETABLE
PREHOOK: Input: hdfs://### HDFS PATH ###
PREHOOK: Output: database:default
PREHOOK: Output: default@encrypted_table1
#### A masked pattern was here ####
POSTHOOK: type: CREATETABLE
POSTHOOK: Input: hdfs://### HDFS PATH ###
POSTHOOK: Output: database:default
POSTHOOK: Output: default@encrypted_table1
Encryption zone created: '/build/ql/test/data/warehouse/default/encrypted_table1' using key: 'key_128'
PREHOOK: query: INSERT OVERWRITE TABLE encrypted_table1 SELECT * FROM src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@encrypted_table1
POSTHOOK: query: INSERT OVERWRITE TABLE encrypted_table1 SELECT * FROM src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@encrypted_table1
POSTHOOK: Lineage: encrypted_table1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: encrypted_table1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: SELECT COUNT(*) FROM encrypted_table1
PREHOOK: type: QUERY
PREHOOK: Input: default@encrypted_table1
#### A PARTIAL masked pattern was here #### data/warehouse/default/encrypted_table1/.hive-staging
POSTHOOK: query: SELECT COUNT(*) FROM encrypted_table1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@encrypted_table1
#### A PARTIAL masked pattern was here #### data/warehouse/default/encrypted_table1/.hive-staging
500
PREHOOK: query: TRUNCATE TABLE encrypted_table1
PREHOOK: type: TRUNCATETABLE
PREHOOK: Output: default@encrypted_table1
POSTHOOK: query: TRUNCATE TABLE encrypted_table1
POSTHOOK: type: TRUNCATETABLE
POSTHOOK: Output: default@encrypted_table1
PREHOOK: query: SELECT COUNT(*) FROM encrypted_table1
PREHOOK: type: QUERY
PREHOOK: Input: default@encrypted_table1
#### A PARTIAL masked pattern was here #### data/warehouse/default/encrypted_table1/.hive-staging
POSTHOOK: query: SELECT COUNT(*) FROM encrypted_table1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@encrypted_table1
#### A PARTIAL masked pattern was here #### data/warehouse/default/encrypted_table1/.hive-staging
0
PREHOOK: query: INSERT OVERWRITE TABLE encrypted_table1 SELECT * FROM src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@encrypted_table1
POSTHOOK: query: INSERT OVERWRITE TABLE encrypted_table1 SELECT * FROM src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@encrypted_table1
POSTHOOK: Lineage: encrypted_table1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: encrypted_table1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: DROP TABLE default.encrypted_table1
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@encrypted_table1
PREHOOK: Output: default@encrypted_table1
POSTHOOK: query: DROP TABLE default.encrypted_table1
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@encrypted_table1
POSTHOOK: Output: default@encrypted_table1
PREHOOK: query: SHOW TABLES
PREHOOK: type: SHOWTABLES
PREHOOK: Input: database:default
POSTHOOK: query: SHOW TABLES
POSTHOOK: type: SHOWTABLES
POSTHOOK: Input: database:default
src
FAILED: SemanticException [Error 10001]: Table not found encrypted_table1
PREHOOK: query: DROP TABLE default.encrypted_table1
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE default.encrypted_table1
POSTHOOK: type: DROPTABLE
PREHOOK: query: SHOW TABLES
PREHOOK: type: SHOWTABLES
PREHOOK: Input: database:default
POSTHOOK: query: SHOW TABLES
POSTHOOK: type: SHOWTABLES
POSTHOOK: Input: database:default
src
