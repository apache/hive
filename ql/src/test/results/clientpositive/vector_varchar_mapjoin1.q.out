PREHOOK: query: drop table if exists varchar_join1_vc1
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists varchar_join1_vc1
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists varchar_join1_vc2
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists varchar_join1_vc2
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists varchar_join1_str
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists varchar_join1_str
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists varchar_join1_vc1_orc
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists varchar_join1_vc1_orc
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists varchar_join1_vc2_orc
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists varchar_join1_vc2_orc
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists varchar_join1_str_orc
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists varchar_join1_str_orc
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table  varchar_join1_vc1 (
  c1 int,
  c2 varchar(10)
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@varchar_join1_vc1
POSTHOOK: query: create table  varchar_join1_vc1 (
  c1 int,
  c2 varchar(10)
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@varchar_join1_vc1
PREHOOK: query: create table  varchar_join1_vc2 (
  c1 int,
  c2 varchar(20)
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@varchar_join1_vc2
POSTHOOK: query: create table  varchar_join1_vc2 (
  c1 int,
  c2 varchar(20)
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@varchar_join1_vc2
PREHOOK: query: create table  varchar_join1_str (
  c1 int,
  c2 string
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@varchar_join1_str
POSTHOOK: query: create table  varchar_join1_str (
  c1 int,
  c2 string
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@varchar_join1_str
PREHOOK: query: load data local inpath '../../data/files/vc1.txt' into table varchar_join1_vc1
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@varchar_join1_vc1
POSTHOOK: query: load data local inpath '../../data/files/vc1.txt' into table varchar_join1_vc1
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@varchar_join1_vc1
PREHOOK: query: load data local inpath '../../data/files/vc1.txt' into table varchar_join1_vc2
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@varchar_join1_vc2
POSTHOOK: query: load data local inpath '../../data/files/vc1.txt' into table varchar_join1_vc2
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@varchar_join1_vc2
PREHOOK: query: load data local inpath '../../data/files/vc1.txt' into table varchar_join1_str
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@varchar_join1_str
POSTHOOK: query: load data local inpath '../../data/files/vc1.txt' into table varchar_join1_str
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@varchar_join1_str
PREHOOK: query: create table varchar_join1_vc1_orc stored as orc as select * from varchar_join1_vc1
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@varchar_join1_vc1
PREHOOK: Output: database:default
PREHOOK: Output: default@varchar_join1_vc1_orc
POSTHOOK: query: create table varchar_join1_vc1_orc stored as orc as select * from varchar_join1_vc1
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@varchar_join1_vc1
POSTHOOK: Output: database:default
POSTHOOK: Output: default@varchar_join1_vc1_orc
POSTHOOK: Lineage: varchar_join1_vc1_orc.c1 SIMPLE [(varchar_join1_vc1)varchar_join1_vc1.FieldSchema(name:c1, type:int, comment:null), ]
POSTHOOK: Lineage: varchar_join1_vc1_orc.c2 SIMPLE [(varchar_join1_vc1)varchar_join1_vc1.FieldSchema(name:c2, type:varchar(10), comment:null), ]
PREHOOK: query: create table varchar_join1_vc2_orc stored as orc as select * from varchar_join1_vc2
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@varchar_join1_vc2
PREHOOK: Output: database:default
PREHOOK: Output: default@varchar_join1_vc2_orc
POSTHOOK: query: create table varchar_join1_vc2_orc stored as orc as select * from varchar_join1_vc2
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@varchar_join1_vc2
POSTHOOK: Output: database:default
POSTHOOK: Output: default@varchar_join1_vc2_orc
POSTHOOK: Lineage: varchar_join1_vc2_orc.c1 SIMPLE [(varchar_join1_vc2)varchar_join1_vc2.FieldSchema(name:c1, type:int, comment:null), ]
POSTHOOK: Lineage: varchar_join1_vc2_orc.c2 SIMPLE [(varchar_join1_vc2)varchar_join1_vc2.FieldSchema(name:c2, type:varchar(20), comment:null), ]
PREHOOK: query: create table varchar_join1_str_orc stored as orc as select * from varchar_join1_str
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@varchar_join1_str
PREHOOK: Output: database:default
PREHOOK: Output: default@varchar_join1_str_orc
POSTHOOK: query: create table varchar_join1_str_orc stored as orc as select * from varchar_join1_str
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@varchar_join1_str
POSTHOOK: Output: database:default
POSTHOOK: Output: default@varchar_join1_str_orc
POSTHOOK: Lineage: varchar_join1_str_orc.c1 SIMPLE [(varchar_join1_str)varchar_join1_str.FieldSchema(name:c1, type:int, comment:null), ]
POSTHOOK: Lineage: varchar_join1_str_orc.c2 SIMPLE [(varchar_join1_str)varchar_join1_str.FieldSchema(name:c2, type:string, comment:null), ]
PREHOOK: query: explain vectorization select * from varchar_join1_vc1_orc a join varchar_join1_vc1_orc b on (a.c2 = b.c2) order by a.c1
PREHOOK: type: QUERY
PREHOOK: Input: default@varchar_join1_vc1_orc
#### A masked pattern was here ####
POSTHOOK: query: explain vectorization select * from varchar_join1_vc1_orc a join varchar_join1_vc1_orc b on (a.c2 = b.c2) order by a.c1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@varchar_join1_vc1_orc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-5 is a root stage
  Stage-2 depends on stages: Stage-5
  Stage-0 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-5
    Map Reduce Local Work
      Alias -> Map Local Tables:
        $hdt$_0:a 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        $hdt$_0:a 
          TableScan
            alias: a
            Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: c2 is not null (type: boolean)
              Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: c1 (type: int), c2 (type: varchar(10))
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
                HashTable Sink Operator
                  keys:
                    0 _col1 (type: varchar(10))
                    1 _col1 (type: varchar(10))

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: b
            Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: c2 is not null (type: boolean)
              Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: c1 (type: int), c2 (type: varchar(10))
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
                Map Join Operator
                  condition map:
                       Inner Join 0 to 1
                  keys:
                    0 _col1 (type: varchar(10))
                    1 _col1 (type: varchar(10))
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: int)
                    sort order: +
                    Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: varchar(10)), _col2 (type: int), _col3 (type: varchar(10))
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          inputFormatFeatureSupport: [DECIMAL_64]
          featureSupportInUse: [DECIMAL_64]
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
      Local Work:
        Map Reduce Local Work
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: varchar(10)), VALUE._col1 (type: int), VALUE._col2 (type: varchar(10))
          outputColumnNames: _col0, _col1, _col2, _col3
          Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from varchar_join1_vc1_orc a join varchar_join1_vc1_orc b on (a.c2 = b.c2) order by a.c1
PREHOOK: type: QUERY
PREHOOK: Input: default@varchar_join1_vc1_orc
#### A masked pattern was here ####
POSTHOOK: query: select * from varchar_join1_vc1_orc a join varchar_join1_vc1_orc b on (a.c2 = b.c2) order by a.c1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@varchar_join1_vc1_orc
#### A masked pattern was here ####
1	abc	1	abc
2	abc 	2	abc 
3	 abc	3	 abc
PREHOOK: query: explain vectorization select * from varchar_join1_vc1_orc a join varchar_join1_vc2_orc b on (a.c2 = b.c2) order by a.c1
PREHOOK: type: QUERY
PREHOOK: Input: default@varchar_join1_vc1_orc
PREHOOK: Input: default@varchar_join1_vc2_orc
#### A masked pattern was here ####
POSTHOOK: query: explain vectorization select * from varchar_join1_vc1_orc a join varchar_join1_vc2_orc b on (a.c2 = b.c2) order by a.c1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@varchar_join1_vc1_orc
POSTHOOK: Input: default@varchar_join1_vc2_orc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-5 is a root stage
  Stage-2 depends on stages: Stage-5
  Stage-0 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-5
    Map Reduce Local Work
      Alias -> Map Local Tables:
        $hdt$_0:a 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        $hdt$_0:a 
          TableScan
            alias: a
            Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: c2 is not null (type: boolean)
              Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: c1 (type: int), c2 (type: varchar(10))
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
                HashTable Sink Operator
                  keys:
                    0 _col1 (type: varchar(20))
                    1 _col1 (type: varchar(20))

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: b
            Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: c2 is not null (type: boolean)
              Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: c1 (type: int), c2 (type: varchar(20))
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
                Map Join Operator
                  condition map:
                       Inner Join 0 to 1
                  keys:
                    0 _col1 (type: varchar(20))
                    1 _col1 (type: varchar(20))
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: int)
                    sort order: +
                    Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: varchar(10)), _col2 (type: int), _col3 (type: varchar(20))
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          inputFormatFeatureSupport: [DECIMAL_64]
          featureSupportInUse: [DECIMAL_64]
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
      Local Work:
        Map Reduce Local Work
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: varchar(10)), VALUE._col1 (type: int), VALUE._col2 (type: varchar(20))
          outputColumnNames: _col0, _col1, _col2, _col3
          Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from varchar_join1_vc1_orc a join varchar_join1_vc2_orc b on (a.c2 = b.c2) order by a.c1
PREHOOK: type: QUERY
PREHOOK: Input: default@varchar_join1_vc1_orc
PREHOOK: Input: default@varchar_join1_vc2_orc
#### A masked pattern was here ####
POSTHOOK: query: select * from varchar_join1_vc1_orc a join varchar_join1_vc2_orc b on (a.c2 = b.c2) order by a.c1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@varchar_join1_vc1_orc
POSTHOOK: Input: default@varchar_join1_vc2_orc
#### A masked pattern was here ####
1	abc	1	abc
2	abc 	2	abc 
3	 abc	3	 abc
PREHOOK: query: explain vectorization select * from varchar_join1_vc1_orc a join varchar_join1_str_orc b on (a.c2 = b.c2) order by a.c1
PREHOOK: type: QUERY
PREHOOK: Input: default@varchar_join1_str_orc
PREHOOK: Input: default@varchar_join1_vc1_orc
#### A masked pattern was here ####
POSTHOOK: query: explain vectorization select * from varchar_join1_vc1_orc a join varchar_join1_str_orc b on (a.c2 = b.c2) order by a.c1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@varchar_join1_str_orc
POSTHOOK: Input: default@varchar_join1_vc1_orc
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-5 is a root stage
  Stage-2 depends on stages: Stage-5
  Stage-0 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-5
    Map Reduce Local Work
      Alias -> Map Local Tables:
        $hdt$_1:b 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        $hdt$_1:b 
          TableScan
            alias: b
            Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: c2 is not null (type: boolean)
              Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: c1 (type: int), c2 (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
                HashTable Sink Operator
                  keys:
                    0 CAST( _col1 AS STRING) (type: string)
                    1 _col1 (type: string)

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: a
            Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: c2 is not null (type: boolean)
              Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: c1 (type: int), c2 (type: varchar(10))
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
                Map Join Operator
                  condition map:
                       Inner Join 0 to 1
                  keys:
                    0 CAST( _col1 AS STRING) (type: string)
                    1 _col1 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: int)
                    sort order: +
                    Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: varchar(10)), _col2 (type: int), _col3 (type: string)
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          inputFormatFeatureSupport: [DECIMAL_64]
          featureSupportInUse: [DECIMAL_64]
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
      Local Work:
        Map Reduce Local Work
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: varchar(10)), VALUE._col1 (type: int), VALUE._col2 (type: string)
          outputColumnNames: _col0, _col1, _col2, _col3
          Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from varchar_join1_vc1_orc a join varchar_join1_str_orc b on (a.c2 = b.c2) order by a.c1
PREHOOK: type: QUERY
PREHOOK: Input: default@varchar_join1_str_orc
PREHOOK: Input: default@varchar_join1_vc1_orc
#### A masked pattern was here ####
POSTHOOK: query: select * from varchar_join1_vc1_orc a join varchar_join1_str_orc b on (a.c2 = b.c2) order by a.c1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@varchar_join1_str_orc
POSTHOOK: Input: default@varchar_join1_vc1_orc
#### A masked pattern was here ####
1	abc	1	abc
2	abc 	2	abc 
3	 abc	3	 abc
PREHOOK: query: drop table varchar_join1_vc1
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@varchar_join1_vc1
PREHOOK: Output: default@varchar_join1_vc1
POSTHOOK: query: drop table varchar_join1_vc1
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@varchar_join1_vc1
POSTHOOK: Output: default@varchar_join1_vc1
PREHOOK: query: drop table varchar_join1_vc2
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@varchar_join1_vc2
PREHOOK: Output: default@varchar_join1_vc2
POSTHOOK: query: drop table varchar_join1_vc2
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@varchar_join1_vc2
POSTHOOK: Output: default@varchar_join1_vc2
PREHOOK: query: drop table varchar_join1_str
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@varchar_join1_str
PREHOOK: Output: default@varchar_join1_str
POSTHOOK: query: drop table varchar_join1_str
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@varchar_join1_str
POSTHOOK: Output: default@varchar_join1_str
PREHOOK: query: drop table varchar_join1_vc1_orc
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@varchar_join1_vc1_orc
PREHOOK: Output: default@varchar_join1_vc1_orc
POSTHOOK: query: drop table varchar_join1_vc1_orc
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@varchar_join1_vc1_orc
POSTHOOK: Output: default@varchar_join1_vc1_orc
PREHOOK: query: drop table varchar_join1_vc2_orc
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@varchar_join1_vc2_orc
PREHOOK: Output: default@varchar_join1_vc2_orc
POSTHOOK: query: drop table varchar_join1_vc2_orc
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@varchar_join1_vc2_orc
POSTHOOK: Output: default@varchar_join1_vc2_orc
PREHOOK: query: drop table varchar_join1_str_orc
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@varchar_join1_str_orc
PREHOOK: Output: default@varchar_join1_str_orc
POSTHOOK: query: drop table varchar_join1_str_orc
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@varchar_join1_str_orc
POSTHOOK: Output: default@varchar_join1_str_orc
