PREHOOK: query: CREATE DATABASE it
PREHOOK: type: CREATEDATABASE
PREHOOK: Output: database:it
POSTHOOK: query: CREATE DATABASE it
POSTHOOK: type: CREATEDATABASE
POSTHOOK: Output: database:it
PREHOOK: query: CREATE TABLE it.temp(key STRING, val STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:it
PREHOOK: Output: it@temp
POSTHOOK: query: CREATE TABLE it.temp(key STRING, val STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:it
POSTHOOK: Output: it@temp
PREHOOK: query: CREATE INDEX temp_index ON TABLE it.temp(key) as 'COMPACT' WITH DEFERRED REBUILD
PREHOOK: type: CREATEINDEX
PREHOOK: Input: it@temp
POSTHOOK: query: CREATE INDEX temp_index ON TABLE it.temp(key) as 'COMPACT' WITH DEFERRED REBUILD
POSTHOOK: type: CREATEINDEX
POSTHOOK: Input: it@temp
POSTHOOK: Output: it@it__temp_temp_index__
PREHOOK: query: ALTER INDEX temp_index ON it.temp REBUILD
PREHOOK: type: ALTERINDEX_REBUILD
PREHOOK: Input: it@temp
PREHOOK: Output: it@it__temp_temp_index__
POSTHOOK: query: ALTER INDEX temp_index ON it.temp REBUILD
POSTHOOK: type: ALTERINDEX_REBUILD
POSTHOOK: Input: it@temp
POSTHOOK: Output: it@it__temp_temp_index__
POSTHOOK: Lineage: it__temp_temp_index__._bucketname SIMPLE [(temp)temp.FieldSchema(name:INPUT__FILE__NAME, type:string, comment:), ]
POSTHOOK: Lineage: it__temp_temp_index__._offsets EXPRESSION [(temp)temp.FieldSchema(name:BLOCK__OFFSET__INSIDE__FILE, type:bigint, comment:), ]
POSTHOOK: Lineage: it__temp_temp_index__.key SIMPLE [(temp)temp.FieldSchema(name:key, type:string, comment:null), ]
PREHOOK: query: SELECT * FROM it.it__temp_temp_index__ WHERE key = 86
PREHOOK: type: QUERY
PREHOOK: Input: it@it__temp_temp_index__
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM it.it__temp_temp_index__ WHERE key = 86
POSTHOOK: type: QUERY
POSTHOOK: Input: it@it__temp_temp_index__
#### A masked pattern was here ####
PREHOOK: query: EXPLAIN SELECT * FROM it.temp WHERE key  = 86
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN SELECT * FROM it.temp WHERE key  = 86
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: temp
            filterExpr: (UDFToDouble(key) = 86.0) (type: boolean)
            Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
            Filter Operator
              predicate: (UDFToDouble(key) = 86.0) (type: boolean)
              Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
              Select Operator
                expressions: key (type: string), val (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT * FROM it.temp WHERE key  = 86
PREHOOK: type: QUERY
PREHOOK: Input: it@temp
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM it.temp WHERE key  = 86
POSTHOOK: type: QUERY
POSTHOOK: Input: it@temp
#### A masked pattern was here ####
PREHOOK: query: DROP table it.temp
PREHOOK: type: DROPTABLE
PREHOOK: Input: it@temp
PREHOOK: Output: it@temp
POSTHOOK: query: DROP table it.temp
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: it@temp
POSTHOOK: Output: it@temp
PREHOOK: query: DROP DATABASE it
PREHOOK: type: DROPDATABASE
PREHOOK: Input: database:it
PREHOOK: Output: database:it
POSTHOOK: query: DROP DATABASE it
POSTHOOK: type: DROPDATABASE
POSTHOOK: Input: database:it
POSTHOOK: Output: database:it
