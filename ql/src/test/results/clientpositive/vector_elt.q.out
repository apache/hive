PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION SELECT (ctinyint % 2) + 1, cstring1, cint, elt((ctinyint % 2) + 1, cstring1, cint) 
FROM alltypesorc
WHERE ctinyint > 0 LIMIT 10
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION SELECT (ctinyint % 2) + 1, cstring1, cint, elt((ctinyint % 2) + 1, cstring1, cint) 
FROM alltypesorc
WHERE ctinyint > 0 LIMIT 10
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: alltypesorc
            Statistics: Num rows: 12288 Data size: 2641964 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
            Filter Operator
              Filter Vectorization:
                  className: VectorFilterOperator
                  native: true
                  predicateExpression: FilterLongColGreaterLongScalar(col 0, val 0) -> boolean
              predicate: (ctinyint > 0) (type: boolean)
              Statistics: Num rows: 4096 Data size: 880654 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: ((UDFToInteger(ctinyint) % 2) + 1) (type: int), cstring1 (type: string), cint (type: int), elt(((UDFToInteger(ctinyint) % 2) + 1), cstring1, cint) (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumns: [13, 6, 2, 16]
                    selectExpressions: LongColAddLongScalar(col 12, val 1)(children: LongColModuloLongScalar(col 0, val 2)(children: col 0) -> 12:long) -> 13:long, VectorElt(columns [14, 6, 15])(children: LongColAddLongScalar(col 12, val 1)(children: LongColModuloLongScalar(col 0, val 2)(children: col 0) -> 12:long) -> 14:long, col 6, CastLongToString(col 2) -> 15:String) -> 16:string
                Statistics: Num rows: 4096 Data size: 880654 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 10
                  Limit Vectorization:
                      className: VectorLimitOperator
                      native: true
                  Statistics: Num rows: 10 Data size: 2150 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 10 Data size: 2150 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

PREHOOK: query: SELECT (ctinyint % 2) + 1, cstring1, cint, elt((ctinyint % 2) + 1, cstring1, cint) 
FROM alltypesorc
WHERE ctinyint > 0 LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: SELECT (ctinyint % 2) + 1, cstring1, cint, elt((ctinyint % 2) + 1, cstring1, cint) 
FROM alltypesorc
WHERE ctinyint > 0 LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
2	cvLH6Eat2yFsyy7p	528534767	528534767
2	cvLH6Eat2yFsyy7p	528534767	528534767
2	cvLH6Eat2yFsyy7p	528534767	528534767
2	cvLH6Eat2yFsyy7p	528534767	528534767
2	cvLH6Eat2yFsyy7p	528534767	528534767
1	cvLH6Eat2yFsyy7p	528534767	cvLH6Eat2yFsyy7p
2	cvLH6Eat2yFsyy7p	528534767	528534767
1	cvLH6Eat2yFsyy7p	528534767	cvLH6Eat2yFsyy7p
2	cvLH6Eat2yFsyy7p	528534767	528534767
1	cvLH6Eat2yFsyy7p	528534767	cvLH6Eat2yFsyy7p
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT elt(2, 'abc', 'defg'),
       elt(3, 'aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'gg'),
       elt('1', 'abc', 'defg'),
       elt(2, 'aa', CAST('2' AS TINYINT)),
       elt(2, 'aa', CAST('12345' AS SMALLINT)),
       elt(2, 'aa', CAST('123456789012' AS BIGINT)),
       elt(2, 'aa', CAST(1.25 AS FLOAT)),
       elt(2, 'aa', CAST(16.0 AS DOUBLE)),
       elt(0, 'abc', 'defg'),
       elt(3, 'abc', 'defg')
FROM alltypesorc LIMIT 1
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT elt(2, 'abc', 'defg'),
       elt(3, 'aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'gg'),
       elt('1', 'abc', 'defg'),
       elt(2, 'aa', CAST('2' AS TINYINT)),
       elt(2, 'aa', CAST('12345' AS SMALLINT)),
       elt(2, 'aa', CAST('123456789012' AS BIGINT)),
       elt(2, 'aa', CAST(1.25 AS FLOAT)),
       elt(2, 'aa', CAST(16.0 AS DOUBLE)),
       elt(0, 'abc', 'defg'),
       elt(3, 'abc', 'defg')
FROM alltypesorc LIMIT 1
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: alltypesorc
            Statistics: Num rows: 12288 Data size: 2641964 Basic stats: COMPLETE Column stats: COMPLETE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
            Select Operator
              expressions: 'defg' (type: string), 'cc' (type: string), 'abc' (type: string), '2' (type: string), '12345' (type: string), '123456789012' (type: string), '1.25' (type: string), '16.0' (type: string), null (type: string), null (type: string)
              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
              Select Vectorization:
                  className: VectorSelectOperator
                  native: true
                  projectedOutputColumns: [12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
                  selectExpressions: ConstantVectorExpression(val defg) -> 12:string, ConstantVectorExpression(val cc) -> 13:string, ConstantVectorExpression(val abc) -> 14:string, ConstantVectorExpression(val 2) -> 15:string, ConstantVectorExpression(val 12345) -> 16:string, ConstantVectorExpression(val 123456789012) -> 17:string, ConstantVectorExpression(val 1.25) -> 18:string, ConstantVectorExpression(val 16.0) -> 19:string, ConstantVectorExpression(val null) -> 20:string, ConstantVectorExpression(val null) -> 21:string
              Statistics: Num rows: 12288 Data size: 8687784 Basic stats: COMPLETE Column stats: COMPLETE
              Limit
                Number of rows: 1
                Limit Vectorization:
                    className: VectorLimitOperator
                    native: true
                Statistics: Num rows: 1 Data size: 875 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 875 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true

  Stage: Stage-0
    Fetch Operator
      limit: 1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT elt(2, 'abc', 'defg'),
       elt(3, 'aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'gg'),
       elt('1', 'abc', 'defg'),
       elt(2, 'aa', CAST('2' AS TINYINT)),
       elt(2, 'aa', CAST('12345' AS SMALLINT)),
       elt(2, 'aa', CAST('123456789012' AS BIGINT)),
       elt(2, 'aa', CAST(1.25 AS FLOAT)),
       elt(2, 'aa', CAST(16.0 AS DOUBLE)),
       elt(0, 'abc', 'defg'),
       elt(3, 'abc', 'defg')
FROM alltypesorc LIMIT 1
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: SELECT elt(2, 'abc', 'defg'),
       elt(3, 'aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'gg'),
       elt('1', 'abc', 'defg'),
       elt(2, 'aa', CAST('2' AS TINYINT)),
       elt(2, 'aa', CAST('12345' AS SMALLINT)),
       elt(2, 'aa', CAST('123456789012' AS BIGINT)),
       elt(2, 'aa', CAST(1.25 AS FLOAT)),
       elt(2, 'aa', CAST(16.0 AS DOUBLE)),
       elt(0, 'abc', 'defg'),
       elt(3, 'abc', 'defg')
FROM alltypesorc LIMIT 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
defg	cc	abc	2	12345	123456789012	1.25	16.0	NULL	NULL
