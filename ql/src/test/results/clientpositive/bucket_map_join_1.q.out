PREHOOK: query: drop table table1
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table table1
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table table2
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table table2
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table table1(key string, value string) clustered by (key, value)
sorted by (key, value) into 1 BUCKETS stored as textfile
PREHOOK: type: CREATETABLE
POSTHOOK: query: create table table1(key string, value string) clustered by (key, value)
sorted by (key, value) into 1 BUCKETS stored as textfile
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@table1
PREHOOK: query: create table table2(key string, value string) clustered by (value, key)
sorted by (value, key) into 1 BUCKETS stored as textfile
PREHOOK: type: CREATETABLE
POSTHOOK: query: create table table2(key string, value string) clustered by (value, key)
sorted by (value, key) into 1 BUCKETS stored as textfile
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@table2
PREHOOK: query: load data local inpath '../data/files/SortCol1Col2.txt' overwrite into table table1
PREHOOK: type: LOAD
PREHOOK: Output: default@table1
POSTHOOK: query: load data local inpath '../data/files/SortCol1Col2.txt' overwrite into table table1
POSTHOOK: type: LOAD
POSTHOOK: Output: default@table1
PREHOOK: query: load data local inpath '../data/files/SortCol2Col1.txt' overwrite into table table2
PREHOOK: type: LOAD
PREHOOK: Output: default@table2
POSTHOOK: query: load data local inpath '../data/files/SortCol2Col1.txt' overwrite into table table2
POSTHOOK: type: LOAD
POSTHOOK: Output: default@table2
PREHOOK: query: -- The tables are bucketed in same columns in different order,
-- but sorted in different column orders
-- Neither bucketed map-join, nor sort-merge join should be performed

explain extended
select /*+ mapjoin(b) */ count(*) from table1 a join table2 b on a.key=b.key and a.value=b.value
PREHOOK: type: QUERY
POSTHOOK: query: -- The tables are bucketed in same columns in different order,
-- but sorted in different column orders
-- Neither bucketed map-join, nor sort-merge join should be performed

explain extended
select /*+ mapjoin(b) */ count(*) from table1 a join table2 b on a.key=b.key and a.value=b.value
POSTHOOK: type: QUERY
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_TABREF (TOK_TABNAME table1) a) (TOK_TABREF (TOK_TABNAME table2) b) (and (= (. (TOK_TABLE_OR_COL a) key) (. (TOK_TABLE_OR_COL b) key)) (= (. (TOK_TABLE_OR_COL a) value) (. (TOK_TABLE_OR_COL b) value))))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_HINTLIST (TOK_HINT TOK_MAPJOIN (TOK_HINTARGLIST b))) (TOK_SELEXPR (TOK_FUNCTIONSTAR count)))))

STAGE DEPENDENCIES:
  Stage-3 is a root stage
  Stage-1 depends on stages: Stage-3
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-3
    Map Reduce Local Work
      Alias -> Map Local Tables:
        b 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        b 
          TableScan
            alias: b
            GatherStats: false
            HashTable Sink Operator
              condition expressions:
                0 
                1 
              handleSkewJoin: false
              keys:
                0 [Column[key], Column[value]]
                1 [Column[key], Column[value]]
              Position of Big Table: 0

  Stage: Stage-1
    Map Reduce
      Alias -> Map Operator Tree:
        a 
          TableScan
            alias: a
            GatherStats: false
            Map Join Operator
              condition map:
                   Inner Join 0 to 1
              condition expressions:
                0 
                1 
              handleSkewJoin: false
              keys:
                0 [Column[key], Column[value]]
                1 [Column[key], Column[value]]
              Position of Big Table: 0
              Select Operator
                Group By Operator
                  aggregations:
                        expr: count()
                  bucketGroup: false
                  mode: hash
                  outputColumnNames: _col0
                  Reduce Output Operator
                    sort order: 
                    tag: -1
                    value expressions:
                          expr: _col0
                          type: bigint
      Local Work:
        Map Reduce Local Work
      Needs Tagging: false
      Path -> Alias:
#### A masked pattern was here ####
      Path -> Partition:
#### A masked pattern was here ####
          Partition
            base file name: table1
            input format: org.apache.hadoop.mapred.TextInputFormat
            output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            properties:
              SORTBUCKETCOLSPREFIX TRUE
              bucket_count 1
              bucket_field_name key
              columns key,value
              columns.types string:string
#### A masked pattern was here ####
              name default.table1
              numFiles 1
              numPartitions 0
              numRows 0
              rawDataSize 0
              serialization.ddl struct table1 { string key, string value}
              serialization.format 1
              serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              totalSize 20
#### A masked pattern was here ####
            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
          
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              properties:
                SORTBUCKETCOLSPREFIX TRUE
                bucket_count 1
                bucket_field_name key
                columns key,value
                columns.types string:string
#### A masked pattern was here ####
                name default.table1
                numFiles 1
                numPartitions 0
                numRows 0
                rawDataSize 0
                serialization.ddl struct table1 { string key, string value}
                serialization.format 1
                serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                totalSize 20
#### A masked pattern was here ####
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.table1
            name: default.table1
      Reduce Operator Tree:
        Group By Operator
          aggregations:
                expr: count(VALUE._col0)
          bucketGroup: false
          mode: mergepartial
          outputColumnNames: _col0
          Select Operator
            expressions:
                  expr: _col0
                  type: bigint
            outputColumnNames: _col0
            File Output Operator
              compressed: false
              GlobalTableId: 0
#### A masked pattern was here ####
              NumFilesPerFileSink: 1
#### A masked pattern was here ####
              table:
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  properties:
                    columns _col0
                    columns.types bigint
                    escape.delim \
                    serialization.format 1
              TotalFiles: 1
              GatherStats: false
              MultiFileSpray: false
      Truncated Path -> Alias:
        /table1 [a]

  Stage: Stage-0
    Fetch Operator
      limit: -1


PREHOOK: query: select /*+ mapjoin(b) */ count(*) from table1 a join table2 b on a.key=b.key and a.value=b.value
PREHOOK: type: QUERY
PREHOOK: Input: default@table1
PREHOOK: Input: default@table2
#### A masked pattern was here ####
POSTHOOK: query: select /*+ mapjoin(b) */ count(*) from table1 a join table2 b on a.key=b.key and a.value=b.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@table1
POSTHOOK: Input: default@table2
#### A masked pattern was here ####
4
