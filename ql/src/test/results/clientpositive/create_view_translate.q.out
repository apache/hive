PREHOOK: query: drop view if exists v_n7
PREHOOK: type: DROPVIEW
POSTHOOK: query: drop view if exists v_n7
POSTHOOK: type: DROPVIEW
PREHOOK: query: drop view if exists w
PREHOOK: type: DROPVIEW
POSTHOOK: query: drop view if exists w
POSTHOOK: type: DROPVIEW
PREHOOK: query: create view v_n7 as select cast(key as string) from src
PREHOOK: type: CREATEVIEW
PREHOOK: Input: default@src
PREHOOK: Output: database:default
PREHOOK: Output: default@v_n7
POSTHOOK: query: create view v_n7 as select cast(key as string) from src
POSTHOOK: type: CREATEVIEW
POSTHOOK: Input: default@src
POSTHOOK: Output: database:default
POSTHOOK: Output: default@v_n7
POSTHOOK: Lineage: v_n7.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: describe formatted v_n7
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@v_n7
POSTHOOK: query: describe formatted v_n7
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@v_n7
# col_name            	data_type           	comment             
key                 	string              	                    
	 	 
# Detailed Table Information	 	 
Database:           	default             	 
#### A masked pattern was here ####
Retention:          	0                   	 
Table Type:         	VIRTUAL_VIEW        	 
Table Parameters:	 	 
	bucketing_version   	2                   
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	null                	 
InputFormat:        	org.apache.hadoop.mapred.TextInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	-1                  	 
Bucket Columns:     	[]                  	 
Sort Columns:       	[]                  	 
	 	 
# View Information	 	 
Original Query:     	select cast(key as string) from src	 
Expanded Query:     	select `src`.`key` from `default`.`src`	 
PREHOOK: query: create view w as select key, value from (
  select key, value from src
) a
PREHOOK: type: CREATEVIEW
PREHOOK: Input: default@src
PREHOOK: Output: database:default
PREHOOK: Output: default@w
POSTHOOK: query: create view w as select key, value from (
  select key, value from src
) a
POSTHOOK: type: CREATEVIEW
POSTHOOK: Input: default@src
POSTHOOK: Output: database:default
POSTHOOK: Output: default@w
POSTHOOK: Lineage: w.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: w.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: describe formatted w
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@w
POSTHOOK: query: describe formatted w
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@w
# col_name            	data_type           	comment             
key                 	string              	                    
value               	string              	                    
	 	 
# Detailed Table Information	 	 
Database:           	default             	 
#### A masked pattern was here ####
Retention:          	0                   	 
Table Type:         	VIRTUAL_VIEW        	 
Table Parameters:	 	 
	bucketing_version   	2                   
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	null                	 
InputFormat:        	org.apache.hadoop.mapred.TextInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	-1                  	 
Bucket Columns:     	[]                  	 
Sort Columns:       	[]                  	 
	 	 
# View Information	 	 
Original Query:     	select key, value from (	 
	                    	  select key, value from src
	                    	) a                 
Expanded Query:     	select `a`.`key`, `a`.`value` from (	 
	                    	  select `src`.`key`, `src`.`value` from `default`.`src`
	                    	) `a`               
PREHOOK: query: drop view v_n7
PREHOOK: type: DROPVIEW
PREHOOK: Input: default@v_n7
PREHOOK: Output: default@v_n7
POSTHOOK: query: drop view v_n7
POSTHOOK: type: DROPVIEW
POSTHOOK: Input: default@v_n7
POSTHOOK: Output: default@v_n7
PREHOOK: query: drop view w
PREHOOK: type: DROPVIEW
PREHOOK: Input: default@w
PREHOOK: Output: default@w
POSTHOOK: query: drop view w
POSTHOOK: type: DROPVIEW
POSTHOOK: Input: default@w
POSTHOOK: Output: default@w
PREHOOK: query: CREATE TABLE items (id INT, name STRING, info MAP<STRING,STRING>)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@items
POSTHOOK: query: CREATE TABLE items (id INT, name STRING, info MAP<STRING,STRING>)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@items
PREHOOK: query: explain
CREATE VIEW priceview AS SELECT items.id, items.info['price'] FROM items
PREHOOK: type: CREATEVIEW
POSTHOOK: query: explain
CREATE VIEW priceview AS SELECT items.id, items.info['price'] FROM items
POSTHOOK: type: CREATEVIEW
STAGE DEPENDENCIES:
  Stage-1 is a root stage

STAGE PLANS:
  Stage: Stage-1
      Create View Operator:
        Create View
          columns: id int, _c1 string
          expanded text: SELECT `items`.`id`, `items`.`info`['price'] FROM `default`.`items`
          name: default.priceview
          original text: SELECT items.id, items.info['price'] FROM items

PREHOOK: query: CREATE VIEW priceview AS SELECT items.id, items.info['price'] FROM items
PREHOOK: type: CREATEVIEW
PREHOOK: Input: default@items
PREHOOK: Output: database:default
PREHOOK: Output: default@priceview
POSTHOOK: query: CREATE VIEW priceview AS SELECT items.id, items.info['price'] FROM items
POSTHOOK: type: CREATEVIEW
POSTHOOK: Input: default@items
POSTHOOK: Output: database:default
POSTHOOK: Output: default@priceview
POSTHOOK: Lineage: priceview._c1 EXPRESSION [(items)items.FieldSchema(name:info, type:map<string,string>, comment:null), ]
POSTHOOK: Lineage: priceview.id SIMPLE [(items)items.FieldSchema(name:id, type:int, comment:null), ]
PREHOOK: query: select * from priceview
PREHOOK: type: QUERY
PREHOOK: Input: default@items
PREHOOK: Input: default@priceview
#### A masked pattern was here ####
POSTHOOK: query: select * from priceview
POSTHOOK: type: QUERY
POSTHOOK: Input: default@items
POSTHOOK: Input: default@priceview
#### A masked pattern was here ####
