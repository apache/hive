PREHOOK: query: CREATE TABLE test_list1 (key INT, value array<int>, col_1 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_list1
POSTHOOK: query: CREATE TABLE test_list1 (key INT, value array<int>, col_1 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_list1
PREHOOK: query: INSERT INTO test_list1 VALUES (99, array(0,0), 'Alice'), (99, array(2,2), 'Mat'), (100, array(0,0), 'Bob'), (101, array(2,2), 'Car')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_list1
POSTHOOK: query: INSERT INTO test_list1 VALUES (99, array(0,0), 'Alice'), (99, array(2,2), 'Mat'), (100, array(0,0), 'Bob'), (101, array(2,2), 'Car')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_list1
POSTHOOK: Lineage: test_list1.col_1 SCRIPT []
POSTHOOK: Lineage: test_list1.key SCRIPT []
POSTHOOK: Lineage: test_list1.value SCRIPT []
PREHOOK: query: CREATE TABLE test_list2 (key INT, value array<int>, col_2 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_list2
POSTHOOK: query: CREATE TABLE test_list2 (key INT, value array<int>, col_2 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_list2
PREHOOK: query: INSERT INTO test_list2 VALUES (102, array(2,2), 'Del'), (103, array(2,2), 'Ema'), (104, array(3,3), 'Fli')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_list2
POSTHOOK: query: INSERT INTO test_list2 VALUES (102, array(2,2), 'Del'), (103, array(2,2), 'Ema'), (104, array(3,3), 'Fli')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_list2
POSTHOOK: Lineage: test_list2.col_2 SCRIPT []
POSTHOOK: Lineage: test_list2.key SCRIPT []
POSTHOOK: Lineage: test_list2.value SCRIPT []
PREHOOK: query: EXPLAIN
SELECT *
FROM test_list1 INNER JOIN test_list2
ON (test_list1.value=test_list2.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@test_list1
PREHOOK: Input: default@test_list2
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test_list1 INNER JOIN test_list2
ON (test_list1.value=test_list2.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_list1
POSTHOOK: Input: default@test_list2
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: test_list1
            filterExpr: value is not null (type: boolean)
            Statistics: Num rows: 4 Data size: 1232 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: value is not null (type: boolean)
              Statistics: Num rows: 4 Data size: 1232 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: key (type: int), value (type: array<int>), col_1 (type: string)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 4 Data size: 1232 Basic stats: COMPLETE Column stats: NONE
                Sorted Merge Bucket Map Join Operator
                  condition map:
                       Inner Join 0 to 1
                  keys:
                    0 _col1 (type: array<int>)
                    1 _col1 (type: array<int>)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 4 Data size: 1355 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 4 Data size: 1355 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test_list1 INNER JOIN test_list2
ON (test_list1.value=test_list2.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@test_list1
PREHOOK: Input: default@test_list2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test_list1 INNER JOIN test_list2
ON (test_list1.value=test_list2.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_list1
POSTHOOK: Input: default@test_list2
#### A masked pattern was here ####
101	[2,2]	Car	103	[2,2]	Ema
101	[2,2]	Car	102	[2,2]	Del
99	[2,2]	Mat	103	[2,2]	Ema
99	[2,2]	Mat	102	[2,2]	Del
PREHOOK: query: CREATE TABLE test_struct1 (key INT, value struct<f1: int,f2: string>, col_1 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_struct1
POSTHOOK: query: CREATE TABLE test_struct1 (key INT, value struct<f1: int,f2: string>, col_1 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_struct1
PREHOOK: query: INSERT INTO test_struct1 VALUES (99, named_struct("f1", 1, "f2", 'val_0'), 'Alice'),
 (99, named_struct("f1", 2, "f2", 'val_2'), 'Mat'),
 (100, named_struct("f1", 0, "f2", 'val_0'), 'Bob'), (101, named_struct("f1", 2, "f2", 'val_2'), 'Car')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_struct1
POSTHOOK: query: INSERT INTO test_struct1 VALUES (99, named_struct("f1", 1, "f2", 'val_0'), 'Alice'),
 (99, named_struct("f1", 2, "f2", 'val_2'), 'Mat'),
 (100, named_struct("f1", 0, "f2", 'val_0'), 'Bob'), (101, named_struct("f1", 2, "f2", 'val_2'), 'Car')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_struct1
POSTHOOK: Lineage: test_struct1.col_1 SCRIPT []
POSTHOOK: Lineage: test_struct1.key SCRIPT []
POSTHOOK: Lineage: test_struct1.value SCRIPT []
PREHOOK: query: CREATE TABLE test_struct2 (key INT, value struct<f1: int,f2: string>, col_2 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_struct2
POSTHOOK: query: CREATE TABLE test_struct2 (key INT, value struct<f1: int,f2: string>, col_2 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_struct2
PREHOOK: query: INSERT INTO test_struct2 VALUES (102, named_struct("f1", 2, "f2", 'val_2'), 'Del'), (103, named_struct("f1", 2, "f2", 'val_2'), 'Ema'),
 (104, named_struct("f1", 3, "f2", 'val_3'), 'Fli')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_struct2
POSTHOOK: query: INSERT INTO test_struct2 VALUES (102, named_struct("f1", 2, "f2", 'val_2'), 'Del'), (103, named_struct("f1", 2, "f2", 'val_2'), 'Ema'),
 (104, named_struct("f1", 3, "f2", 'val_3'), 'Fli')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_struct2
POSTHOOK: Lineage: test_struct2.col_2 SCRIPT []
POSTHOOK: Lineage: test_struct2.key SCRIPT []
POSTHOOK: Lineage: test_struct2.value SCRIPT []
PREHOOK: query: EXPLAIN
SELECT *
FROM test_struct1  INNER JOIN test_struct2
ON (test_struct1.value=test_struct2.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@test_struct1
PREHOOK: Input: default@test_struct2
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test_struct1  INNER JOIN test_struct2
ON (test_struct1.value=test_struct2.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_struct1
POSTHOOK: Input: default@test_struct2
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: test_struct1
            filterExpr: value is not null (type: boolean)
            Statistics: Num rows: 4 Data size: 1696 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: value is not null (type: boolean)
              Statistics: Num rows: 4 Data size: 1696 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: key (type: int), value (type: struct<f1:int,f2:string>), col_1 (type: string)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 4 Data size: 1696 Basic stats: COMPLETE Column stats: NONE
                Sorted Merge Bucket Map Join Operator
                  condition map:
                       Inner Join 0 to 1
                  keys:
                    0 _col1 (type: struct<f1:int,f2:string>)
                    1 _col1 (type: struct<f1:int,f2:string>)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 4 Data size: 1865 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 4 Data size: 1865 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test_struct1  INNER JOIN test_struct2
ON (test_struct1.value=test_struct2.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@test_struct1
PREHOOK: Input: default@test_struct2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test_struct1  INNER JOIN test_struct2
ON (test_struct1.value=test_struct2.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_struct1
POSTHOOK: Input: default@test_struct2
#### A masked pattern was here ####
101	{"f1":2,"f2":"val_2"}	Car	103	{"f1":2,"f2":"val_2"}	Ema
101	{"f1":2,"f2":"val_2"}	Car	102	{"f1":2,"f2":"val_2"}	Del
99	{"f1":2,"f2":"val_2"}	Mat	103	{"f1":2,"f2":"val_2"}	Ema
99	{"f1":2,"f2":"val_2"}	Mat	102	{"f1":2,"f2":"val_2"}	Del
