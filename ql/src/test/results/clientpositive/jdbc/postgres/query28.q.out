Warning: Shuffle Join MERGEJOIN[30][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
Warning: Shuffle Join MERGEJOIN[31][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 3' is a cross product
Warning: Shuffle Join MERGEJOIN[32][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3]] in Stage 'Reducer 4' is a cross product
Warning: Shuffle Join MERGEJOIN[33][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[34][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5]] in Stage 'Reducer 6' is a cross product
PREHOOK: query: explain
select  *
from (select avg(ss_list_price) B1_LP
            ,count(ss_list_price) B1_CNT
            ,count(distinct ss_list_price) B1_CNTD
      from store_sales
      where ss_quantity between 0 and 5
        and (ss_list_price between 11 and 11+10 
             or ss_coupon_amt between 460 and 460+1000
             or ss_wholesale_cost between 14 and 14+20)) B1,
     (select avg(ss_list_price) B2_LP
            ,count(ss_list_price) B2_CNT
            ,count(distinct ss_list_price) B2_CNTD
      from store_sales
      where ss_quantity between 6 and 10
        and (ss_list_price between 91 and 91+10
          or ss_coupon_amt between 1430 and 1430+1000
          or ss_wholesale_cost between 32 and 32+20)) B2,
     (select avg(ss_list_price) B3_LP
            ,count(ss_list_price) B3_CNT
            ,count(distinct ss_list_price) B3_CNTD
      from store_sales
      where ss_quantity between 11 and 15
        and (ss_list_price between 66 and 66+10
          or ss_coupon_amt between 920 and 920+1000
          or ss_wholesale_cost between 4 and 4+20)) B3,
     (select avg(ss_list_price) B4_LP
            ,count(ss_list_price) B4_CNT
            ,count(distinct ss_list_price) B4_CNTD
      from store_sales
      where ss_quantity between 16 and 20
        and (ss_list_price between 142 and 142+10
          or ss_coupon_amt between 3054 and 3054+1000
          or ss_wholesale_cost between 80 and 80+20)) B4,
     (select avg(ss_list_price) B5_LP
            ,count(ss_list_price) B5_CNT
            ,count(distinct ss_list_price) B5_CNTD
      from store_sales
      where ss_quantity between 21 and 25
        and (ss_list_price between 135 and 135+10
          or ss_coupon_amt between 14180 and 14180+1000
          or ss_wholesale_cost between 38 and 38+20)) B5,
     (select avg(ss_list_price) B6_LP
            ,count(ss_list_price) B6_CNT
            ,count(distinct ss_list_price) B6_CNTD
      from store_sales
      where ss_quantity between 26 and 30
        and (ss_list_price between 28 and 28+10
          or ss_coupon_amt between 2513 and 2513+1000
          or ss_wholesale_cost between 42 and 42+20)) B6
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
select  *
from (select avg(ss_list_price) B1_LP
            ,count(ss_list_price) B1_CNT
            ,count(distinct ss_list_price) B1_CNTD
      from store_sales
      where ss_quantity between 0 and 5
        and (ss_list_price between 11 and 11+10 
             or ss_coupon_amt between 460 and 460+1000
             or ss_wholesale_cost between 14 and 14+20)) B1,
     (select avg(ss_list_price) B2_LP
            ,count(ss_list_price) B2_CNT
            ,count(distinct ss_list_price) B2_CNTD
      from store_sales
      where ss_quantity between 6 and 10
        and (ss_list_price between 91 and 91+10
          or ss_coupon_amt between 1430 and 1430+1000
          or ss_wholesale_cost between 32 and 32+20)) B2,
     (select avg(ss_list_price) B3_LP
            ,count(ss_list_price) B3_CNT
            ,count(distinct ss_list_price) B3_CNTD
      from store_sales
      where ss_quantity between 11 and 15
        and (ss_list_price between 66 and 66+10
          or ss_coupon_amt between 920 and 920+1000
          or ss_wholesale_cost between 4 and 4+20)) B3,
     (select avg(ss_list_price) B4_LP
            ,count(ss_list_price) B4_CNT
            ,count(distinct ss_list_price) B4_CNTD
      from store_sales
      where ss_quantity between 16 and 20
        and (ss_list_price between 142 and 142+10
          or ss_coupon_amt between 3054 and 3054+1000
          or ss_wholesale_cost between 80 and 80+20)) B4,
     (select avg(ss_list_price) B5_LP
            ,count(ss_list_price) B5_CNT
            ,count(distinct ss_list_price) B5_CNTD
      from store_sales
      where ss_quantity between 21 and 25
        and (ss_list_price between 135 and 135+10
          or ss_coupon_amt between 14180 and 14180+1000
          or ss_wholesale_cost between 38 and 38+20)) B5,
     (select avg(ss_list_price) B6_LP
            ,count(ss_list_price) B6_CNT
            ,count(distinct ss_list_price) B6_CNTD
      from store_sales
      where ss_quantity between 26 and 30
        and (ss_list_price between 28 and 28+10
          or ss_coupon_amt between 2513 and 2513+1000
          or ss_wholesale_cost between 42 and 42+20)) B6
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 7 (XPROD_EDGE)
        Reducer 3 <- Map 8 (XPROD_EDGE), Reducer 2 (XPROD_EDGE)
        Reducer 4 <- Map 9 (XPROD_EDGE), Reducer 3 (XPROD_EDGE)
        Reducer 5 <- Map 10 (XPROD_EDGE), Reducer 4 (XPROD_EDGE)
        Reducer 6 <- Map 11 (XPROD_EDGE), Reducer 5 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT CAST(SUM("ss_list_price") / COUNT("ss_list_price") AS DECIMAL(11, 6)) AS "b1_lp", COUNT("ss_list_price") AS "b1_cnt", COUNT(DISTINCT "ss_list_price") AS "b1_cntd"
FROM (SELECT "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_coupon_amt"
FROM "store_sales") AS "t"
WHERE ("ss_list_price" BETWEEN 11 AND 21 OR ("ss_coupon_amt" BETWEEN 460 AND 1460 OR "ss_wholesale_cost" BETWEEN 14 AND 34)) AND "ss_quantity" BETWEEN 0 AND 5
                    hive.sql.query.fieldNames b1_lp,b1_cnt,b1_cntd
                    hive.sql.query.fieldTypes decimal(11,6),bigint,bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: b1_lp (type: decimal(11,6)), b1_cnt (type: bigint), b1_cntd (type: bigint)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: decimal(11,6)), _col1 (type: bigint), _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 10 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT CAST(SUM("ss_list_price") / COUNT("ss_list_price") AS DECIMAL(11, 6)) AS "b3_lp", COUNT("ss_list_price") AS "b3_cnt", COUNT(DISTINCT "ss_list_price") AS "b3_cntd"
FROM (SELECT "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_coupon_amt"
FROM "store_sales") AS "t"
WHERE ("ss_list_price" BETWEEN 66 AND 76 OR ("ss_coupon_amt" BETWEEN 920 AND 1920 OR "ss_wholesale_cost" BETWEEN 4 AND 24)) AND "ss_quantity" BETWEEN 11 AND 15
                    hive.sql.query.fieldNames b3_lp,b3_cnt,b3_cntd
                    hive.sql.query.fieldTypes decimal(11,6),bigint,bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: b3_lp (type: decimal(11,6)), b3_cnt (type: bigint), b3_cntd (type: bigint)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: decimal(11,6)), _col1 (type: bigint), _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 11 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT CAST(SUM("ss_list_price") / COUNT("ss_list_price") AS DECIMAL(11, 6)) AS "b2_lp", COUNT("ss_list_price") AS "b2_cnt", COUNT(DISTINCT "ss_list_price") AS "b2_cntd"
FROM (SELECT "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_coupon_amt"
FROM "store_sales") AS "t"
WHERE ("ss_list_price" BETWEEN 91 AND 101 OR ("ss_coupon_amt" BETWEEN 1430 AND 2430 OR "ss_wholesale_cost" BETWEEN 32 AND 52)) AND "ss_quantity" BETWEEN 6 AND 10
                    hive.sql.query.fieldNames b2_lp,b2_cnt,b2_cntd
                    hive.sql.query.fieldTypes decimal(11,6),bigint,bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: b2_lp (type: decimal(11,6)), b2_cnt (type: bigint), b2_cntd (type: bigint)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: decimal(11,6)), _col1 (type: bigint), _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT CAST(SUM("ss_list_price") / COUNT("ss_list_price") AS DECIMAL(11, 6)) AS "b6_lp", COUNT("ss_list_price") AS "b6_cnt", COUNT(DISTINCT "ss_list_price") AS "b6_cntd"
FROM (SELECT "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_coupon_amt"
FROM "store_sales") AS "t"
WHERE ("ss_list_price" BETWEEN 28 AND 38 OR ("ss_coupon_amt" BETWEEN 2513 AND 3513 OR "ss_wholesale_cost" BETWEEN 42 AND 62)) AND "ss_quantity" BETWEEN 26 AND 30
                    hive.sql.query.fieldNames b6_lp,b6_cnt,b6_cntd
                    hive.sql.query.fieldTypes decimal(11,6),bigint,bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: b6_lp (type: decimal(11,6)), b6_cnt (type: bigint), b6_cntd (type: bigint)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: decimal(11,6)), _col1 (type: bigint), _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 8 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT CAST(SUM("ss_list_price") / COUNT("ss_list_price") AS DECIMAL(11, 6)) AS "b5_lp", COUNT("ss_list_price") AS "b5_cnt", COUNT(DISTINCT "ss_list_price") AS "b5_cntd"
FROM (SELECT "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_coupon_amt"
FROM "store_sales") AS "t"
WHERE ("ss_list_price" BETWEEN 135 AND 145 OR ("ss_coupon_amt" BETWEEN 14180 AND 15180 OR "ss_wholesale_cost" BETWEEN 38 AND 58)) AND "ss_quantity" BETWEEN 21 AND 25
                    hive.sql.query.fieldNames b5_lp,b5_cnt,b5_cntd
                    hive.sql.query.fieldTypes decimal(11,6),bigint,bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: b5_lp (type: decimal(11,6)), b5_cnt (type: bigint), b5_cntd (type: bigint)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: decimal(11,6)), _col1 (type: bigint), _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 9 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT CAST(SUM("ss_list_price") / COUNT("ss_list_price") AS DECIMAL(11, 6)) AS "b4_lp", COUNT("ss_list_price") AS "b4_cnt", COUNT(DISTINCT "ss_list_price") AS "b4_cntd"
FROM (SELECT "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_coupon_amt"
FROM "store_sales") AS "t"
WHERE ("ss_list_price" BETWEEN 142 AND 152 OR ("ss_coupon_amt" BETWEEN 3054 AND 4054 OR "ss_wholesale_cost" BETWEEN 80 AND 100)) AND "ss_quantity" BETWEEN 16 AND 20
                    hive.sql.query.fieldNames b4_lp,b4_cnt,b4_cntd
                    hive.sql.query.fieldTypes decimal(11,6),bigint,bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: b4_lp (type: decimal(11,6)), b4_cnt (type: bigint), b4_cntd (type: bigint)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: decimal(11,6)), _col1 (type: bigint), _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 1 Data size: 257 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 1 Data size: 257 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: decimal(11,6)), _col1 (type: bigint), _col2 (type: bigint), _col3 (type: decimal(11,6)), _col4 (type: bigint), _col5 (type: bigint)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                Statistics: Num rows: 1 Data size: 386 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 1 Data size: 386 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: decimal(11,6)), _col1 (type: bigint), _col2 (type: bigint), _col3 (type: decimal(11,6)), _col4 (type: bigint), _col5 (type: bigint), _col6 (type: decimal(11,6)), _col7 (type: bigint), _col8 (type: bigint)
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11
                Statistics: Num rows: 1 Data size: 515 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 1 Data size: 515 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: decimal(11,6)), _col1 (type: bigint), _col2 (type: bigint), _col3 (type: decimal(11,6)), _col4 (type: bigint), _col5 (type: bigint), _col6 (type: decimal(11,6)), _col7 (type: bigint), _col8 (type: bigint), _col9 (type: decimal(11,6)), _col10 (type: bigint), _col11 (type: bigint)
        Reducer 5 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14
                Statistics: Num rows: 1 Data size: 644 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 1 Data size: 644 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: decimal(11,6)), _col1 (type: bigint), _col2 (type: bigint), _col3 (type: decimal(11,6)), _col4 (type: bigint), _col5 (type: bigint), _col6 (type: decimal(11,6)), _col7 (type: bigint), _col8 (type: bigint), _col9 (type: decimal(11,6)), _col10 (type: bigint), _col11 (type: bigint), _col12 (type: decimal(11,6)), _col13 (type: bigint), _col14 (type: bigint)
        Reducer 6 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17
                Statistics: Num rows: 1 Data size: 773 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: decimal(11,6)), _col1 (type: bigint), _col2 (type: bigint), _col15 (type: decimal(11,6)), _col16 (type: bigint), _col17 (type: bigint), _col12 (type: decimal(11,6)), _col13 (type: bigint), _col14 (type: bigint), _col9 (type: decimal(11,6)), _col10 (type: bigint), _col11 (type: bigint), _col6 (type: decimal(11,6)), _col7 (type: bigint), _col8 (type: bigint), _col3 (type: decimal(11,6)), _col4 (type: bigint), _col5 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17
                  Statistics: Num rows: 1 Data size: 773 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 773 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

