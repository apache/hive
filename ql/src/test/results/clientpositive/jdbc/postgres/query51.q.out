PREHOOK: query: explain
WITH web_v1 as (
select
  ws_item_sk item_sk, d_date,
  sum(sum(ws_sales_price))
      over (partition by ws_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from web_sales
    ,date_dim
where ws_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ws_item_sk is not NULL
group by ws_item_sk, d_date),
store_v1 as (
select
  ss_item_sk item_sk, d_date,
  sum(sum(ss_sales_price))
      over (partition by ss_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from store_sales
    ,date_dim
where ss_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ss_item_sk is not NULL
group by ss_item_sk, d_date)
 select  *
from (select item_sk
     ,d_date
     ,web_sales
     ,store_sales
     ,max(web_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) web_cumulative
     ,max(store_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) store_cumulative
     from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk
                 ,case when web.d_date is not null then web.d_date else store.d_date end d_date
                 ,web.cume_sales web_sales
                 ,store.cume_sales store_sales
           from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk
                                                          and web.d_date = store.d_date)
          )x )y
where web_cumulative > store_cumulative
order by item_sk
        ,d_date
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
WITH web_v1 as (
select
  ws_item_sk item_sk, d_date,
  sum(sum(ws_sales_price))
      over (partition by ws_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from web_sales
    ,date_dim
where ws_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ws_item_sk is not NULL
group by ws_item_sk, d_date),
store_v1 as (
select
  ss_item_sk item_sk, d_date,
  sum(sum(ss_sales_price))
      over (partition by ss_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from store_sales
    ,date_dim
where ss_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ss_item_sk is not NULL
group by ss_item_sk, d_date)
 select  *
from (select item_sk
     ,d_date
     ,web_sales
     ,store_sales
     ,max(web_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) web_cumulative
     ,max(store_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) store_cumulative
     from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk
                 ,case when web.d_date is not null then web.d_date else store.d_date end d_date
                 ,web.cume_sales web_sales
                 ,store.cume_sales store_sales
           from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk
                                                          and web.d_date = store.d_date)
          )x )y
where web_cumulative > store_cumulative
order by item_sk
        ,d_date
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
        Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
        Reducer 7 <- Map 6 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: web_sales
                  properties:
                    hive.sql.query SELECT "t1"."ws_item_sk", "t4"."d_date", SUM("t1"."ws_sales_price") AS "$f2"
FROM (SELECT "ws_sold_date_sk", "ws_item_sk", "ws_sales_price"
FROM (SELECT "ws_sold_date_sk", "ws_item_sk", "ws_sales_price"
FROM "web_sales") AS "t"
WHERE "ws_item_sk" IS NOT NULL AND "ws_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk", "d_date"
FROM (SELECT "d_date_sk", "d_date", "d_month_seq"
FROM "date_dim") AS "t2"
WHERE "d_month_seq" BETWEEN 1212 AND 1223 AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."ws_sold_date_sk" = "t4"."d_date_sk"
GROUP BY "t1"."ws_item_sk", "t4"."d_date"
                    hive.sql.query.fieldNames ws_item_sk,d_date,$f2
                    hive.sql.query.fieldTypes bigint,string,decimal(17,2)
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 304 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ws_item_sk (type: bigint), d_date (type: string), $f2 (type: decimal(17,2))
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 304 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: bigint), _col1 (type: string)
                      null sort order: az
                      sort order: ++
                      Map-reduce partition columns: _col0 (type: bigint)
                      Statistics: Num rows: 1 Data size: 304 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col2 (type: decimal(17,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "t1"."ss_item_sk", "t4"."d_date", SUM("t1"."ss_sales_price") AS "$f2"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk", "ss_sales_price"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk", "ss_sales_price"
FROM "store_sales") AS "t"
WHERE "ss_item_sk" IS NOT NULL AND "ss_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk", "d_date"
FROM (SELECT "d_date_sk", "d_date", "d_month_seq"
FROM "date_dim") AS "t2"
WHERE "d_month_seq" BETWEEN 1212 AND 1223 AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."ss_sold_date_sk" = "t4"."d_date_sk"
GROUP BY "t1"."ss_item_sk", "t4"."d_date"
                    hive.sql.query.fieldNames ss_item_sk,d_date,$f2
                    hive.sql.query.fieldTypes bigint,string,decimal(17,2)
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 304 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ss_item_sk (type: bigint), d_date (type: string), $f2 (type: decimal(17,2))
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 304 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: bigint), _col1 (type: string)
                      null sort order: az
                      sort order: ++
                      Map-reduce partition columns: _col0 (type: bigint)
                      Statistics: Num rows: 1 Data size: 304 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col2 (type: decimal(17,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: bigint), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: decimal(17,2))
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 1 Data size: 304 Basic stats: COMPLETE Column stats: NONE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: bigint, _col1: string, _col2: decimal(17,2)
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS LAST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: sum_window_0
                              arguments: _col2
                              name: sum
                              window function: GenericUDAFSumHiveDecimal
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                  Statistics: Num rows: 1 Data size: 304 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: _col0 (type: bigint), _col1 (type: string), sum_window_0 (type: decimal(27,2))
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 304 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: bigint), _col1 (type: string)
                      null sort order: zz
                      sort order: ++
                      Map-reduce partition columns: _col0 (type: bigint), _col1 (type: string)
                      Statistics: Num rows: 1 Data size: 304 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col2 (type: decimal(27,2))
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Full Outer Join 0 to 1
                keys:
                  0 _col0 (type: bigint), _col1 (type: string)
                  1 _col0 (type: bigint), _col1 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 1 Data size: 334 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: CASE WHEN (_col0 is not null) THEN (_col0) ELSE (_col3) END (type: bigint), CASE WHEN (_col1 is not null) THEN (_col1) ELSE (_col4) END (type: string)
                  null sort order: az
                  sort order: ++
                  Map-reduce partition columns: CASE WHEN (_col0 is not null) THEN (_col0) ELSE (_col3) END (type: bigint)
                  Statistics: Num rows: 1 Data size: 334 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: bigint), _col1 (type: string), _col2 (type: decimal(27,2)), _col3 (type: bigint), _col4 (type: string), _col5 (type: decimal(27,2))
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: bigint), VALUE._col1 (type: string), VALUE._col2 (type: decimal(27,2)), VALUE._col3 (type: bigint), VALUE._col4 (type: string), VALUE._col5 (type: decimal(27,2))
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 1 Data size: 334 Basic stats: COMPLETE Column stats: NONE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: bigint, _col1: string, _col2: decimal(27,2), _col3: bigint, _col4: string, _col5: decimal(27,2)
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: CASE WHEN (_col1 is not null) THEN (_col1) ELSE (_col4) END ASC NULLS LAST
                        partition by: CASE WHEN (_col0 is not null) THEN (_col0) ELSE (_col3) END
                        raw input shape:
                        window functions:
                            window function definition
                              alias: max_window_0
                              arguments: _col2
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                            window function definition
                              alias: max_window_1
                              arguments: _col5
                              name: max
                              window function: GenericUDAFMaxEvaluator
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                  Statistics: Num rows: 1 Data size: 334 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (max_window_0 > max_window_1) (type: boolean)
                    Statistics: Num rows: 1 Data size: 334 Basic stats: COMPLETE Column stats: NONE
                    Top N Key Operator
                      sort order: ++
                      keys: if(_col0 is not null, _col0, _col3) (type: bigint), if(_col1 is not null, _col1, _col4) (type: string)
                      null sort order: zz
                      Statistics: Num rows: 1 Data size: 334 Basic stats: COMPLETE Column stats: NONE
                      top n: 100
                      Select Operator
                        expressions: if(_col0 is not null, _col0, _col3) (type: bigint), if(_col1 is not null, _col1, _col4) (type: string), _col2 (type: decimal(27,2)), _col5 (type: decimal(27,2)), max_window_0 (type: decimal(27,2)), max_window_1 (type: decimal(27,2))
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                        Statistics: Num rows: 1 Data size: 334 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: bigint), _col1 (type: string)
                          null sort order: zz
                          sort order: ++
                          Statistics: Num rows: 1 Data size: 334 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col2 (type: decimal(27,2)), _col3 (type: decimal(27,2)), _col4 (type: decimal(27,2)), _col5 (type: decimal(27,2))
        Reducer 5 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: bigint), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: decimal(27,2)), VALUE._col1 (type: decimal(27,2)), VALUE._col2 (type: decimal(27,2)), VALUE._col3 (type: decimal(27,2))
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 1 Data size: 334 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 334 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 334 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 7 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: bigint), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: decimal(17,2))
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 1 Data size: 304 Basic stats: COMPLETE Column stats: NONE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: bigint, _col1: string, _col2: decimal(17,2)
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 ASC NULLS LAST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: sum_window_0
                              arguments: _col2
                              name: sum
                              window function: GenericUDAFSumHiveDecimal
                              window frame: ROWS PRECEDING(MAX)~CURRENT
                  Statistics: Num rows: 1 Data size: 304 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: _col0 (type: bigint), _col1 (type: string), sum_window_0 (type: decimal(27,2))
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 304 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: bigint), _col1 (type: string)
                      null sort order: zz
                      sort order: ++
                      Map-reduce partition columns: _col0 (type: bigint), _col1 (type: string)
                      Statistics: Num rows: 1 Data size: 304 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col2 (type: decimal(27,2))

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

