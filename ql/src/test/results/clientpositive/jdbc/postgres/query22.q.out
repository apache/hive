PREHOOK: query: explain
select  i_product_name
             ,i_brand
             ,i_class
             ,i_category
             ,avg(inv_quantity_on_hand) qoh
       from inventory
           ,date_dim
           ,item
           ,warehouse
       where inv_date_sk=d_date_sk
              and inv_item_sk=i_item_sk
              and inv_warehouse_sk = w_warehouse_sk
              and d_month_seq between 1212 and 1212 + 11
       group by rollup(i_product_name
                       ,i_brand
                       ,i_class
                       ,i_category)
order by qoh, i_product_name, i_brand, i_class, i_category
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@inventory
PREHOOK: Input: default@item
PREHOOK: Input: default@warehouse
#### A masked pattern was here ####
POSTHOOK: query: explain
select  i_product_name
             ,i_brand
             ,i_class
             ,i_category
             ,avg(inv_quantity_on_hand) qoh
       from inventory
           ,date_dim
           ,item
           ,warehouse
       where inv_date_sk=d_date_sk
              and inv_item_sk=i_item_sk
              and inv_warehouse_sk = w_warehouse_sk
              and d_month_seq between 1212 and 1212 + 11
       group by rollup(i_product_name
                       ,i_brand
                       ,i_class
                       ,i_category)
order by qoh, i_product_name, i_brand, i_class, i_category
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@inventory
POSTHOOK: Input: default@item
POSTHOOK: Input: default@warehouse
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: inventory
                  properties:
                    hive.sql.query SELECT "t0"."inv_date_sk", "t0"."inv_item_sk", "t0"."inv_warehouse_sk", "t0"."inv_quantity_on_hand", "t3"."d_date_sk", "t6"."w_warehouse_sk", "t9"."i_item_sk", "t9"."i_brand", "t9"."i_class", "t9"."i_category", "t9"."i_product_name"
FROM (SELECT "inv_date_sk", "inv_item_sk", "inv_warehouse_sk", "inv_quantity_on_hand"
FROM "inventory"
WHERE "inv_date_sk" IS NOT NULL AND ("inv_item_sk" IS NOT NULL AND "inv_warehouse_sk" IS NOT NULL)) AS "t0"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_month_seq"
FROM "date_dim") AS "t1"
WHERE "d_month_seq" BETWEEN 1212 AND 1223 AND "d_date_sk" IS NOT NULL) AS "t3" ON "t0"."inv_date_sk" = "t3"."d_date_sk"
INNER JOIN (SELECT "w_warehouse_sk"
FROM (SELECT "w_warehouse_sk"
FROM "warehouse") AS "t4"
WHERE "w_warehouse_sk" IS NOT NULL) AS "t6" ON "t0"."inv_warehouse_sk" = "t6"."w_warehouse_sk"
INNER JOIN (SELECT "i_item_sk", "i_brand", "i_class", "i_category", "i_product_name"
FROM (SELECT "i_item_sk", "i_brand", "i_class", "i_category", "i_product_name"
FROM "item") AS "t7"
WHERE "i_item_sk" IS NOT NULL) AS "t9" ON "t0"."inv_item_sk" = "t9"."i_item_sk"
                    hive.sql.query.fieldNames inv_date_sk,inv_item_sk,inv_warehouse_sk,inv_quantity_on_hand,d_date_sk,w_warehouse_sk,i_item_sk,i_brand,i_class,i_category,i_product_name
                    hive.sql.query.fieldTypes int,bigint,int,int,int,int,bigint,string,string,string,string
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 740 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: inv_quantity_on_hand (type: int), i_brand (type: string), i_class (type: string), i_category (type: string), i_product_name (type: string)
                    outputColumnNames: _col3, _col7, _col8, _col9, _col10
                    Statistics: Num rows: 1 Data size: 740 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: sum(_col3), count(_col3)
                      keys: _col7 (type: string), _col8 (type: string), _col9 (type: string), _col10 (type: string), 0L (type: bigint)
                      grouping sets: 0, 2, 6, 14, 15
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                      Statistics: Num rows: 5 Data size: 3700 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string), _col3 (type: string), _col4 (type: bigint)
                        null sort order: zzzzz
                        sort order: +++++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string), _col2 (type: string), _col3 (type: string), _col4 (type: bigint)
                        Statistics: Num rows: 5 Data size: 3700 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col5 (type: bigint), _col6 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: string), KEY._col3 (type: string), KEY._col4 (type: bigint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col5, _col6
                Statistics: Num rows: 2 Data size: 1480 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Top N Key Operator
                  sort order: +++++
                  keys: (UDFToDouble(_col5) / _col6) (type: double), _col3 (type: string), _col0 (type: string), _col1 (type: string), _col2 (type: string)
                  null sort order: zzzzz
                  Statistics: Num rows: 2 Data size: 1480 Basic stats: COMPLETE Column stats: NONE
                  top n: 100
                  Select Operator
                    expressions: _col3 (type: string), _col0 (type: string), _col1 (type: string), _col2 (type: string), (UDFToDouble(_col5) / _col6) (type: double)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4
                    Statistics: Num rows: 2 Data size: 1480 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col4 (type: double), _col0 (type: string), _col1 (type: string), _col2 (type: string), _col3 (type: string)
                      null sort order: zzzzz
                      sort order: +++++
                      Statistics: Num rows: 2 Data size: 1480 Basic stats: COMPLETE Column stats: NONE
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey1 (type: string), KEY.reducesinkkey2 (type: string), KEY.reducesinkkey3 (type: string), KEY.reducesinkkey4 (type: string), KEY.reducesinkkey0 (type: double)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 2 Data size: 1480 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 2 Data size: 1480 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 1480 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

