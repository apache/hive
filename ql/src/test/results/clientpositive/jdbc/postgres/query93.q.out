PREHOOK: query: explain
select  ss_customer_sk
            ,sum(act_sales) sumsales
      from (select ss_item_sk
                  ,ss_ticket_number
                  ,ss_customer_sk
                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                            else (ss_quantity*ss_sales_price) end act_sales
            from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
                                                               and sr_ticket_number = ss_ticket_number)
                ,reason
            where sr_reason_sk = r_reason_sk
              and r_reason_desc = 'Did not like the warranty') t
      group by ss_customer_sk
      order by sumsales, ss_customer_sk
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@reason
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
select  ss_customer_sk
            ,sum(act_sales) sumsales
      from (select ss_item_sk
                  ,ss_ticket_number
                  ,ss_customer_sk
                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                            else (ss_quantity*ss_sales_price) end act_sales
            from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
                                                               and sr_ticket_number = ss_ticket_number)
                ,reason
            where sr_reason_sk = r_reason_sk
              and r_reason_desc = 'Did not like the warranty') t
      group by ss_customer_sk
      order by sumsales, ss_customer_sk
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@reason
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: store_returns
          properties:
            hive.sql.query SELECT "t10"."$f0", "t10"."$f1"
FROM (SELECT "t7"."ss_customer_sk" AS "$f0", SUM(CASE WHEN "t1"."IS NOT NULL" THEN CAST("t7"."ss_quantity" - "t1"."sr_return_quantity" AS DECIMAL(10, 0)) * "t7"."ss_sales_price" ELSE "t7"."""*""" END) AS "$f1"
FROM (SELECT "sr_item_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_quantity" IS NOT NULL AS "IS NOT NULL"
FROM (SELECT "sr_item_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity"
FROM "store_returns") AS "t"
WHERE "sr_item_sk" IS NOT NULL AND ("sr_ticket_number" IS NOT NULL AND "sr_reason_sk" IS NOT NULL)) AS "t1"
INNER JOIN (SELECT "r_reason_sk"
FROM (SELECT "r_reason_sk", "r_reason_desc"
FROM "reason") AS "t2"
WHERE "r_reason_desc" = 'Did not like the warranty' AND "r_reason_sk" IS NOT NULL) AS "t4" ON "t1"."sr_reason_sk" = "t4"."r_reason_sk"
INNER JOIN (SELECT "ss_item_sk", "ss_customer_sk", "ss_ticket_number", "ss_quantity", "ss_sales_price", CAST("ss_quantity" AS DECIMAL(10, 0)) * "ss_sales_price" AS "*"
FROM (SELECT "ss_item_sk", "ss_customer_sk", "ss_ticket_number", "ss_quantity", "ss_sales_price"
FROM "store_sales") AS "t5"
WHERE "ss_item_sk" IS NOT NULL AND "ss_ticket_number" IS NOT NULL) AS "t7" ON "t1"."sr_item_sk" = "t7"."ss_item_sk" AND "t1"."sr_ticket_number" = "t7"."ss_ticket_number"
GROUP BY "t7"."ss_customer_sk"
ORDER BY SUM(CASE WHEN "t1"."IS NOT NULL" THEN CAST("t7"."ss_quantity" - "t1"."sr_return_quantity" AS DECIMAL(10, 0)) * "t7"."ss_sales_price" ELSE "t7"."""*""" END), "t7"."ss_customer_sk"
FETCH NEXT 100 ROWS ONLY) AS "t10"
            hive.sql.query.fieldNames $f0,$f1
            hive.sql.query.fieldTypes int,decimal(28,2)
            hive.sql.query.split false
          Select Operator
            expressions: $f0 (type: int), $f1 (type: decimal(28,2))
            outputColumnNames: _col0, _col1
            ListSink

