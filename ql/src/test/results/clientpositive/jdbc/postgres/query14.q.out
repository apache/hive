Warning: Shuffle Join MERGEJOIN[334][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 28' is a cross product
Warning: Shuffle Join MERGEJOIN[340][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 9' is a cross product
Warning: Shuffle Join MERGEJOIN[346][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 17' is a cross product
Warning: Shuffle Join MERGEJOIN[352][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 20' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@avg_sales
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@avg_sales
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-4 depends on stages: Stage-2, Stage-0
  Stage-0 depends on stages: Stage-1
  Stage-3 depends on stages: Stage-4

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Union 2 (CONTAINS)
        Map 4 <- Union 2 (CONTAINS)
        Map 5 <- Union 2 (CONTAINS)
        Reducer 3 <- Union 2 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: quantity (type: int), list_price (type: decimal(7,2))
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: (CAST( _col0 AS decimal(10,0)) * _col1) (type: decimal(18,2))
                      outputColumnNames: _col0
                      Statistics: Num rows: 3 Data size: 348 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        aggregations: sum(_col0), count(_col0)
                        minReductionHashAggr: 0.99
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          null sort order: 
                          sort order: 
                          Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col0 (type: decimal(28,2)), _col1 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: catalog_sales
                  Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: quantity (type: int), list_price (type: decimal(7,2))
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: (CAST( _col0 AS decimal(10,0)) * _col1) (type: decimal(18,2))
                      outputColumnNames: _col0
                      Statistics: Num rows: 3 Data size: 348 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        aggregations: sum(_col0), count(_col0)
                        minReductionHashAggr: 0.99
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          null sort order: 
                          sort order: 
                          Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col0 (type: decimal(28,2)), _col1 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: web_sales
                  Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: quantity (type: int), list_price (type: decimal(7,2))
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 116 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: (CAST( _col0 AS decimal(10,0)) * _col1) (type: decimal(18,2))
                      outputColumnNames: _col0
                      Statistics: Num rows: 3 Data size: 348 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        aggregations: sum(_col0), count(_col0)
                        minReductionHashAggr: 0.99
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          null sort order: 
                          sort order: 
                          Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col0 (type: decimal(28,2)), _col1 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: CAST( (_col0 / _col1) AS decimal(22,6)) (type: decimal(22,6))
                  outputColumnNames: _col0
                  Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        name: default.avg_sales
        Union 2 
            Vertex: Union 2

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-4
    Tez
#### A masked pattern was here ####
      Edges:
        Map 21 <- Union 22 (CONTAINS)
        Map 24 <- Union 22 (CONTAINS)
        Map 25 <- Union 22 (CONTAINS)
        Reducer 11 <- Union 10 (SIMPLE_EDGE)
        Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
        Reducer 14 <- Map 13 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
        Reducer 15 <- Map 30 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
        Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
        Reducer 17 <- Reducer 16 (XPROD_EDGE), Reducer 28 (XPROD_EDGE), Union 10 (CONTAINS)
        Reducer 18 <- Map 29 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
        Reducer 19 <- Reducer 18 (SIMPLE_EDGE)
        Reducer 20 <- Reducer 19 (XPROD_EDGE), Reducer 28 (XPROD_EDGE), Union 10 (CONTAINS)
        Reducer 23 <- Union 22 (SIMPLE_EDGE)
        Reducer 27 <- Map 26 (CUSTOM_SIMPLE_EDGE)
        Reducer 28 <- Map 26 (XPROD_EDGE), Reducer 27 (XPROD_EDGE)
        Reducer 7 <- Map 6 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
        Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
        Reducer 9 <- Reducer 28 (XPROD_EDGE), Reducer 8 (XPROD_EDGE), Union 10 (CONTAINS)
#### A masked pattern was here ####
      Vertices:
        Map 13 
            Map Operator Tree:
                TableScan
                  alias: item
                  properties:
                    hive.sql.query SELECT "i_item_sk", "i_brand_id", "i_class_id", "i_category_id"
FROM (SELECT "i_item_sk", "i_brand_id", "i_class_id", "i_category_id"
FROM "item") AS "t"
WHERE "i_brand_id" IS NOT NULL AND "i_class_id" IS NOT NULL AND ("i_category_id" IS NOT NULL AND "i_item_sk" IS NOT NULL)
                    hive.sql.query.fieldNames i_item_sk,i_brand_id,i_class_id,i_category_id
                    hive.sql.query.fieldTypes bigint,int,int,int
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: i_item_sk (type: bigint), i_brand_id (type: int), i_class_id (type: int), i_category_id (type: int)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: int), _col2 (type: int), _col3 (type: int)
                      null sort order: zzz
                      sort order: +++
                      Map-reduce partition columns: _col1 (type: int), _col2 (type: int), _col3 (type: int)
                      Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 21 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: i_brand_id (type: int), i_class_id (type: int), i_category_id (type: int), $f3 (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(_col3)
                      keys: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 3 Data size: 60 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                        null sort order: zzz
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                        Statistics: Num rows: 3 Data size: 60 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 24 
            Map Operator Tree:
                TableScan
                  alias: catalog_sales
                  Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: i_brand_id (type: int), i_class_id (type: int), i_category_id (type: int), $f3 (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(_col3)
                      keys: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 3 Data size: 60 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                        null sort order: zzz
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                        Statistics: Num rows: 3 Data size: 60 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 25 
            Map Operator Tree:
                TableScan
                  alias: web_sales
                  Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: i_brand_id (type: int), i_class_id (type: int), i_category_id (type: int), $f3 (type: bigint)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(_col3)
                      keys: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 3 Data size: 60 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                        null sort order: zzz
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                        Statistics: Num rows: 3 Data size: 60 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 26 
            Map Operator Tree:
                TableScan
                  alias: avg_sales
                  Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count()
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: bigint)
                  Filter Operator
                    predicate: average_sales is not null (type: boolean)
                    Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: average_sales (type: decimal(22,6))
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: decimal(22,6))
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Map 29 
            Map Operator Tree:
                TableScan
                  alias: catalog_sales
                  properties:
                    hive.sql.query SELECT "t1"."cs_sold_date_sk", "t1"."cs_item_sk", "t1"."cs_quantity", "t1"."cs_list_price", "t7"."i_item_sk", "t7"."i_brand_id", "t7"."i_class_id", "t7"."i_category_id", "t4"."d_date_sk", "t4"."d_year", "t4"."d_moy"
FROM (SELECT "cs_sold_date_sk", "cs_item_sk", "cs_quantity", "cs_list_price"
FROM (SELECT "cs_sold_date_sk", "cs_item_sk", "cs_quantity", "cs_list_price"
FROM "catalog_sales") AS "t"
WHERE "cs_item_sk" IS NOT NULL AND "cs_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk", "d_year", "d_moy"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "date_dim") AS "t2"
WHERE "d_year" = 2000 AND ("d_moy" = 11 AND "d_date_sk" IS NOT NULL)) AS "t4" ON "t1"."cs_sold_date_sk" = "t4"."d_date_sk"
INNER JOIN (SELECT "i_item_sk", "i_brand_id", "i_class_id", "i_category_id"
FROM (SELECT "i_item_sk", "i_brand_id", "i_class_id", "i_category_id"
FROM "item") AS "t5"
WHERE "i_item_sk" IS NOT NULL) AS "t7" ON "t1"."cs_item_sk" = "t7"."i_item_sk"
                    hive.sql.query.fieldNames cs_sold_date_sk,cs_item_sk,cs_quantity,cs_list_price,i_item_sk,i_brand_id,i_class_id,i_category_id,d_date_sk,d_year,d_moy
                    hive.sql.query.fieldTypes int,bigint,int,decimal(7,2),bigint,int,int,int,int,int,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 136 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: cs_item_sk (type: bigint), cs_quantity (type: int), cs_list_price (type: decimal(7,2)), i_brand_id (type: int), i_class_id (type: int), i_category_id (type: int)
                    outputColumnNames: _col1, _col2, _col3, _col5, _col6, _col7
                    Statistics: Num rows: 1 Data size: 136 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: bigint)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: bigint)
                      Statistics: Num rows: 1 Data size: 136 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col2 (type: int), _col3 (type: decimal(7,2)), _col5 (type: int), _col6 (type: int), _col7 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 30 
            Map Operator Tree:
                TableScan
                  alias: web_sales
                  properties:
                    hive.sql.query SELECT "t1"."ws_sold_date_sk", "t1"."ws_item_sk", "t1"."ws_quantity", "t1"."ws_list_price", "t7"."i_item_sk", "t7"."i_brand_id", "t7"."i_class_id", "t7"."i_category_id", "t4"."d_date_sk", "t4"."d_year", "t4"."d_moy"
FROM (SELECT "ws_sold_date_sk", "ws_item_sk", "ws_quantity", "ws_list_price"
FROM (SELECT "ws_sold_date_sk", "ws_item_sk", "ws_quantity", "ws_list_price"
FROM "web_sales") AS "t"
WHERE "ws_item_sk" IS NOT NULL AND "ws_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk", "d_year", "d_moy"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "date_dim") AS "t2"
WHERE "d_year" = 2000 AND ("d_moy" = 11 AND "d_date_sk" IS NOT NULL)) AS "t4" ON "t1"."ws_sold_date_sk" = "t4"."d_date_sk"
INNER JOIN (SELECT "i_item_sk", "i_brand_id", "i_class_id", "i_category_id"
FROM (SELECT "i_item_sk", "i_brand_id", "i_class_id", "i_category_id"
FROM "item") AS "t5"
WHERE "i_item_sk" IS NOT NULL) AS "t7" ON "t1"."ws_item_sk" = "t7"."i_item_sk"
                    hive.sql.query.fieldNames ws_sold_date_sk,ws_item_sk,ws_quantity,ws_list_price,i_item_sk,i_brand_id,i_class_id,i_category_id,d_date_sk,d_year,d_moy
                    hive.sql.query.fieldTypes int,bigint,int,decimal(7,2),bigint,int,int,int,int,int,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 136 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ws_item_sk (type: bigint), ws_quantity (type: int), ws_list_price (type: decimal(7,2)), i_brand_id (type: int), i_class_id (type: int), i_category_id (type: int)
                    outputColumnNames: _col1, _col2, _col3, _col5, _col6, _col7
                    Statistics: Num rows: 1 Data size: 136 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: bigint)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: bigint)
                      Statistics: Num rows: 1 Data size: 136 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col2 (type: int), _col3 (type: decimal(7,2)), _col5 (type: int), _col6 (type: int), _col7 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "t1"."ss_sold_date_sk", "t1"."ss_item_sk", "t1"."ss_quantity", "t1"."ss_list_price", "t7"."i_item_sk", "t7"."i_brand_id", "t7"."i_class_id", "t7"."i_category_id", "t4"."d_date_sk", "t4"."d_year", "t4"."d_moy"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk", "ss_quantity", "ss_list_price"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk", "ss_quantity", "ss_list_price"
FROM "store_sales") AS "t"
WHERE "ss_item_sk" IS NOT NULL AND "ss_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk", "d_year", "d_moy"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "date_dim") AS "t2"
WHERE "d_year" = 2000 AND ("d_moy" = 11 AND "d_date_sk" IS NOT NULL)) AS "t4" ON "t1"."ss_sold_date_sk" = "t4"."d_date_sk"
INNER JOIN (SELECT "i_item_sk", "i_brand_id", "i_class_id", "i_category_id"
FROM (SELECT "i_item_sk", "i_brand_id", "i_class_id", "i_category_id"
FROM "item") AS "t5"
WHERE "i_item_sk" IS NOT NULL) AS "t7" ON "t1"."ss_item_sk" = "t7"."i_item_sk"
                    hive.sql.query.fieldNames ss_sold_date_sk,ss_item_sk,ss_quantity,ss_list_price,i_item_sk,i_brand_id,i_class_id,i_category_id,d_date_sk,d_year,d_moy
                    hive.sql.query.fieldTypes int,bigint,int,decimal(7,2),bigint,int,int,int,int,int,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 136 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ss_item_sk (type: bigint), ss_quantity (type: int), ss_list_price (type: decimal(7,2)), i_brand_id (type: int), i_class_id (type: int), i_category_id (type: int)
                    outputColumnNames: _col1, _col2, _col3, _col5, _col6, _col7
                    Statistics: Num rows: 1 Data size: 136 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: bigint)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: bigint)
                      Statistics: Num rows: 1 Data size: 136 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col2 (type: int), _col3 (type: decimal(7,2)), _col5 (type: int), _col6 (type: int), _col7 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 11 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), sum(VALUE._col1)
                keys: KEY._col0 (type: string), KEY._col1 (type: int), KEY._col2 (type: int), KEY._col3 (type: int), KEY._col4 (type: bigint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col5, _col6
                Statistics: Num rows: 7 Data size: 4361 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int), _col5 (type: decimal(38,2)), _col6 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 7 Data size: 4361 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int)
                    null sort order: zzzz
                    sort order: ++++
                    Statistics: Num rows: 7 Data size: 4361 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col4 (type: decimal(38,2)), _col5 (type: bigint)
        Reducer 12 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: int), KEY.reducesinkkey2 (type: int), KEY.reducesinkkey3 (type: int), VALUE._col0 (type: decimal(38,2)), VALUE._col1 (type: bigint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 7 Data size: 4361 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 7 Data size: 4361 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 7 Data size: 4361 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 14 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col1 (type: int), _col2 (type: int), _col3 (type: int)
                  1 _col0 (type: int), _col1 (type: int), _col2 (type: int)
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 22 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  keys: _col0 (type: bigint)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0
                  Statistics: Num rows: 1 Data size: 22 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: bigint)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: bigint)
                    Statistics: Num rows: 1 Data size: 22 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: bigint)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: bigint)
                    Statistics: Num rows: 1 Data size: 22 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: bigint)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: bigint)
                    Statistics: Num rows: 1 Data size: 22 Basic stats: COMPLETE Column stats: NONE
        Reducer 15 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col1 (type: bigint)
                  1 _col0 (type: bigint)
                outputColumnNames: _col2, _col3, _col5, _col6, _col7
                Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col5 (type: int), _col6 (type: int), _col7 (type: int), (CAST( _col2 AS decimal(10,0)) * _col3) (type: decimal(18,2))
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                  Group By Operator
                    aggregations: sum(_col3), count()
                    keys: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                    minReductionHashAggr: 0.99
                    mode: hash
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4
                    Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                      null sort order: zzz
                      sort order: +++
                      Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                      Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col3 (type: decimal(28,2)), _col4 (type: bigint)
        Reducer 16 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1)
                keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                Filter Operator
                  predicate: _col3 is not null (type: boolean)
                  Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    null sort order: 
                    sort order: 
                    Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: int), _col3 (type: decimal(28,2)), _col4 (type: bigint)
        Reducer 17 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col1, _col2, _col3, _col4, _col5, _col6
                residual filter predicates: {(_col5 > _col1)}
                Statistics: Num rows: 1 Data size: 623 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: 'web' (type: string), _col2 (type: int), _col3 (type: int), _col4 (type: int), _col5 (type: decimal(28,2)), _col6 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 1 Data size: 623 Basic stats: COMPLETE Column stats: NONE
                  Top N Key Operator
                    sort order: ++++
                    keys: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int)
                    null sort order: zzzz
                    Statistics: Num rows: 3 Data size: 1869 Basic stats: COMPLETE Column stats: NONE
                    top n: 100
                    Group By Operator
                      aggregations: sum(_col4), sum(_col5)
                      keys: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int), 0L (type: bigint)
                      grouping sets: 0, 1, 3, 7, 15
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                      Statistics: Num rows: 15 Data size: 9345 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int), _col4 (type: bigint)
                        null sort order: zzzzz
                        sort order: +++++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int), _col4 (type: bigint)
                        Statistics: Num rows: 15 Data size: 9345 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col5 (type: decimal(38,2)), _col6 (type: bigint)
        Reducer 18 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col1 (type: bigint)
                  1 _col0 (type: bigint)
                outputColumnNames: _col2, _col3, _col5, _col6, _col7
                Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col5 (type: int), _col6 (type: int), _col7 (type: int), (CAST( _col2 AS decimal(10,0)) * _col3) (type: decimal(18,2))
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                  Group By Operator
                    aggregations: sum(_col3), count()
                    keys: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                    minReductionHashAggr: 0.99
                    mode: hash
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4
                    Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                      null sort order: zzz
                      sort order: +++
                      Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                      Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col3 (type: decimal(28,2)), _col4 (type: bigint)
        Reducer 19 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1)
                keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                Filter Operator
                  predicate: _col3 is not null (type: boolean)
                  Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    null sort order: 
                    sort order: 
                    Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: int), _col3 (type: decimal(28,2)), _col4 (type: bigint)
        Reducer 20 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col1, _col2, _col3, _col4, _col5, _col6
                residual filter predicates: {(_col5 > _col1)}
                Statistics: Num rows: 1 Data size: 623 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: 'catalog' (type: string), _col2 (type: int), _col3 (type: int), _col4 (type: int), _col5 (type: decimal(28,2)), _col6 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 1 Data size: 623 Basic stats: COMPLETE Column stats: NONE
                  Top N Key Operator
                    sort order: ++++
                    keys: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int)
                    null sort order: zzzz
                    Statistics: Num rows: 3 Data size: 1869 Basic stats: COMPLETE Column stats: NONE
                    top n: 100
                    Group By Operator
                      aggregations: sum(_col4), sum(_col5)
                      keys: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int), 0L (type: bigint)
                      grouping sets: 0, 1, 3, 7, 15
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                      Statistics: Num rows: 15 Data size: 9345 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int), _col4 (type: bigint)
                        null sort order: zzzzz
                        sort order: +++++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int), _col4 (type: bigint)
                        Statistics: Num rows: 15 Data size: 9345 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col5 (type: decimal(38,2)), _col6 (type: bigint)
        Reducer 23 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                Filter Operator
                  predicate: (_col3 = 3L) (type: boolean)
                  Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                      null sort order: zzz
                      sort order: +++
                      Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                      Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
        Reducer 27 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                Filter Operator
                  predicate: sq_count_check(_col0) (type: boolean)
                  Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 236 Basic stats: COMPLETE Column stats: NONE
        Reducer 28 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col1
                Statistics: Num rows: 1 Data size: 473 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 1 Data size: 473 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: decimal(22,6))
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 1 Data size: 473 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: decimal(22,6))
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 1 Data size: 473 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: decimal(22,6))
        Reducer 7 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col1 (type: bigint)
                  1 _col0 (type: bigint)
                outputColumnNames: _col2, _col3, _col5, _col6, _col7
                Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col5 (type: int), _col6 (type: int), _col7 (type: int), (CAST( _col2 AS decimal(10,0)) * _col3) (type: decimal(18,2))
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                  Group By Operator
                    aggregations: sum(_col3), count()
                    keys: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                    minReductionHashAggr: 0.99
                    mode: hash
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4
                    Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                      null sort order: zzz
                      sort order: +++
                      Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                      Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col3 (type: decimal(28,2)), _col4 (type: bigint)
        Reducer 8 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1)
                keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                Filter Operator
                  predicate: _col3 is not null (type: boolean)
                  Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    null sort order: 
                    sort order: 
                    Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: int), _col3 (type: decimal(28,2)), _col4 (type: bigint)
        Reducer 9 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col1, _col2, _col3, _col4, _col5, _col6
                residual filter predicates: {(_col5 > _col1)}
                Statistics: Num rows: 1 Data size: 623 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: 'store' (type: string), _col2 (type: int), _col3 (type: int), _col4 (type: int), _col5 (type: decimal(28,2)), _col6 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 1 Data size: 623 Basic stats: COMPLETE Column stats: NONE
                  Top N Key Operator
                    sort order: ++++
                    keys: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int)
                    null sort order: zzzz
                    Statistics: Num rows: 3 Data size: 1869 Basic stats: COMPLETE Column stats: NONE
                    top n: 100
                    Group By Operator
                      aggregations: sum(_col4), sum(_col5)
                      keys: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int), 0L (type: bigint)
                      grouping sets: 0, 1, 3, 7, 15
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                      Statistics: Num rows: 15 Data size: 9345 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int), _col4 (type: bigint)
                        null sort order: zzzzz
                        sort order: +++++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int), _col4 (type: bigint)
                        Statistics: Num rows: 15 Data size: 9345 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col5 (type: decimal(38,2)), _col6 (type: bigint)
        Union 10 
            Vertex: Union 10
        Union 22 
            Vertex: Union 22

  Stage: Stage-0
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####

  Stage: Stage-3
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

