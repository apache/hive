PREHOOK: query: explain
select  
    sum(ss_net_profit) as total_sum
   ,s_state
   ,s_county
   ,grouping(s_state)+grouping(s_county) as lochierarchy
   ,rank() over (
 	partition by grouping(s_state)+grouping(s_county),
 	case when grouping(s_county) = 0 then s_state end 
 	order by sum(ss_net_profit) desc) as rank_within_parent
 from
    store_sales
   ,date_dim       d1
   ,store
 where
    d1.d_month_seq between 1212 and 1212+11
 and d1.d_date_sk = ss_sold_date_sk
 and s_store_sk  = ss_store_sk
 and s_state in
             ( select s_state
               from  (select s_state as s_state,
 			    rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
                      from   store_sales, store, date_dim
                      where  d_month_seq between 1212 and 1212+11
 			    and d_date_sk = ss_sold_date_sk
 			    and s_store_sk  = ss_store_sk
                      group by s_state
                     ) tmp1 
               where ranking <= 5
             )
 group by rollup(s_state,s_county)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then s_state end
  ,rank_within_parent
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
select  
    sum(ss_net_profit) as total_sum
   ,s_state
   ,s_county
   ,grouping(s_state)+grouping(s_county) as lochierarchy
   ,rank() over (
 	partition by grouping(s_state)+grouping(s_county),
 	case when grouping(s_county) = 0 then s_state end 
 	order by sum(ss_net_profit) desc) as rank_within_parent
 from
    store_sales
   ,date_dim       d1
   ,store
 where
    d1.d_month_seq between 1212 and 1212+11
 and d1.d_date_sk = ss_sold_date_sk
 and s_store_sk  = ss_store_sk
 and s_state in
             ( select s_state
               from  (select s_state as s_state,
 			    rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
                      from   store_sales, store, date_dim
                      where  d_month_seq between 1212 and 1212+11
 			    and d_date_sk = ss_sold_date_sk
 			    and s_store_sk  = ss_store_sk
                      group by s_state
                     ) tmp1 
               where ranking <= 5
             )
 group by rollup(s_state,s_county)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then s_state end
  ,rank_within_parent
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
        Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
        Reducer 7 <- Map 6 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "t1"."ss_sold_date_sk", "t1"."ss_store_sk", "t1"."ss_net_profit", "t4"."d_date_sk", "t4"."d_month_seq", "t7"."s_store_sk", "t7"."s_county", "t7"."s_state"
FROM (SELECT "ss_sold_date_sk", "ss_store_sk", "ss_net_profit"
FROM (SELECT "ss_sold_date_sk", "ss_store_sk", "ss_net_profit"
FROM "store_sales") AS "t"
WHERE "ss_sold_date_sk" IS NOT NULL AND "ss_store_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk", "d_month_seq"
FROM (SELECT "d_date_sk", "d_month_seq"
FROM "date_dim") AS "t2"
WHERE "d_month_seq" BETWEEN 1212 AND 1223 AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."ss_sold_date_sk" = "t4"."d_date_sk"
INNER JOIN (SELECT "s_store_sk", "s_county", "s_state"
FROM (SELECT "s_store_sk", "s_county", "s_state"
FROM "store") AS "t5"
WHERE "s_state" IS NOT NULL AND "s_store_sk" IS NOT NULL) AS "t7" ON "t1"."ss_store_sk" = "t7"."s_store_sk"
                    hive.sql.query.fieldNames ss_sold_date_sk,ss_store_sk,ss_net_profit,d_date_sk,d_month_seq,s_store_sk,s_county,s_state
                    hive.sql.query.fieldTypes int,int,decimal(7,2),int,int,int,string,string
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 480 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ss_net_profit (type: decimal(7,2)), s_county (type: string), s_state (type: string)
                    outputColumnNames: _col2, _col6, _col7
                    Statistics: Num rows: 1 Data size: 480 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col7 (type: string)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col7 (type: string)
                      Statistics: Num rows: 1 Data size: 480 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col2 (type: decimal(7,2)), _col6 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "t7"."s_state", SUM("t1"."ss_net_profit") AS "$f1"
FROM (SELECT "ss_sold_date_sk", "ss_store_sk", "ss_net_profit"
FROM (SELECT "ss_sold_date_sk", "ss_store_sk", "ss_net_profit"
FROM "store_sales") AS "t"
WHERE "ss_store_sk" IS NOT NULL AND "ss_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_month_seq"
FROM "date_dim") AS "t2"
WHERE "d_month_seq" BETWEEN 1212 AND 1223 AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."ss_sold_date_sk" = "t4"."d_date_sk"
INNER JOIN (SELECT "s_store_sk", "s_state"
FROM (SELECT "s_store_sk", "s_state"
FROM "store") AS "t5"
WHERE "s_store_sk" IS NOT NULL AND "s_state" IS NOT NULL) AS "t7" ON "t1"."ss_store_sk" = "t7"."s_store_sk"
GROUP BY "t7"."s_state"
                    hive.sql.query.fieldNames s_state,$f1
                    hive.sql.query.fieldTypes string,decimal(17,2)
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
                  Top N Key Operator
                    sort order: +-
                    keys: s_state (type: string), $f1 (type: decimal(17,2))
                    null sort order: aa
                    Map-reduce partition columns: s_state (type: string)
                    Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
                    top n: 6
                    Select Operator
                      expressions: s_state (type: string), $f1 (type: decimal(17,2))
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: decimal(17,2))
                        null sort order: aa
                        sort order: +-
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col7 (type: string)
                  1 _col0 (type: string)
                outputColumnNames: _col2, _col6, _col7
                Statistics: Num rows: 1 Data size: 528 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col7 (type: string), _col6 (type: string), _col2 (type: decimal(7,2))
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 1 Data size: 528 Basic stats: COMPLETE Column stats: NONE
                  Group By Operator
                    aggregations: sum(_col2)
                    keys: _col0 (type: string), _col1 (type: string), 0L (type: bigint)
                    grouping sets: 0, 1, 3
                    minReductionHashAggr: 0.99
                    mode: hash
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 3 Data size: 1584 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                      null sort order: zzz
                      sort order: +++
                      Map-reduce partition columns: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                      Statistics: Num rows: 3 Data size: 1584 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col3 (type: decimal(17,2))
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 1 Data size: 528 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), _col3 (type: decimal(17,2)), _col2 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 1 Data size: 528 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: (grouping(_col3, 1L) + grouping(_col3, 0L)) (type: bigint), CASE WHEN ((grouping(_col3, 0L) = UDFToLong(0))) THEN (_col0) ELSE (CAST( null AS STRING)) END (type: string), _col2 (type: decimal(17,2))
                    null sort order: aaa
                    sort order: ++-
                    Map-reduce partition columns: (grouping(_col3, 1L) + grouping(_col3, 0L)) (type: bigint), CASE WHEN ((grouping(_col3, 0L) = UDFToLong(0))) THEN (_col0) ELSE (CAST( null AS STRING)) END (type: string)
                    Statistics: Num rows: 1 Data size: 528 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: string), _col1 (type: string), _col3 (type: bigint)
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), VALUE._col1 (type: string), KEY.reducesinkkey2 (type: decimal(17,2)), VALUE._col2 (type: bigint)
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 1 Data size: 528 Basic stats: COMPLETE Column stats: NONE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: decimal(17,2), _col3: bigint
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col2 DESC NULLS FIRST
                        partition by: (grouping(_col3, 1L) + grouping(_col3, 0L)), CASE WHEN ((grouping(_col3, 0L) = UDFToLong(0))) THEN (_col0) ELSE (CAST( null AS STRING)) END
                        raw input shape:
                        window functions:
                            window function definition
                              alias: rank_window_0
                              arguments: _col2
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 1 Data size: 528 Basic stats: COMPLETE Column stats: NONE
                  Top N Key Operator
                    sort order: -++
                    keys: (grouping(_col3, 1L) + grouping(_col3, 0L)) (type: bigint), if(((grouping(_col3, 1L) + grouping(_col3, 0L)) = 0L), _col0, null) (type: string), rank_window_0 (type: int)
                    null sort order: azz
                    Statistics: Num rows: 1 Data size: 528 Basic stats: COMPLETE Column stats: NONE
                    top n: 100
                    Select Operator
                      expressions: _col2 (type: decimal(17,2)), _col0 (type: string), _col1 (type: string), (grouping(_col3, 1L) + grouping(_col3, 0L)) (type: bigint), rank_window_0 (type: int), if(((grouping(_col3, 1L) + grouping(_col3, 0L)) = 0L), _col0, null) (type: string)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      Statistics: Num rows: 1 Data size: 528 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col3 (type: bigint), _col5 (type: string), _col4 (type: int)
                        null sort order: azz
                        sort order: -++
                        Statistics: Num rows: 1 Data size: 528 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: decimal(17,2)), _col1 (type: string), _col2 (type: string)
        Reducer 5 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: decimal(17,2)), VALUE._col1 (type: string), VALUE._col2 (type: string), KEY.reducesinkkey0 (type: bigint), KEY.reducesinkkey2 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 1 Data size: 528 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 528 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 528 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 7 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: decimal(17,2))
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: decimal(17,2)
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col1 DESC NULLS FIRST
                        partition by: _col0
                        raw input shape:
                        window functions:
                            window function definition
                              alias: rank_window_0
                              arguments: _col1
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (rank_window_0 <= 5) (type: boolean)
                    Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: _col0 (type: string)
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        keys: _col0 (type: string)
                        minReductionHashAggr: 0.99
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: string)
                          null sort order: z
                          sort order: +
                          Map-reduce partition columns: _col0 (type: string)
                          Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

