PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 10 <- Map 12 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE), Union 4 (CONTAINS)
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
        Reducer 3 <- Map 12 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE), Union 4 (CONTAINS)
        Reducer 5 <- Union 4 (CUSTOM_SIMPLE_EDGE)
        Reducer 7 <- Map 11 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
        Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
        Reducer 9 <- Map 13 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: catalog_sales
                  properties:
                    hive.sql.query SELECT "t1"."cs_sold_date_sk", "t1"."cs_bill_customer_sk", "t1"."cs_item_sk", "t1"."cs_quantity", "t1"."cs_list_price", "t4"."d_date_sk", "t4"."d_year", "t4"."d_moy"
FROM (SELECT "cs_sold_date_sk", "cs_bill_customer_sk", "cs_item_sk", "cs_quantity", "cs_list_price"
FROM (SELECT "cs_sold_date_sk", "cs_bill_customer_sk", "cs_item_sk", "cs_quantity", "cs_list_price"
FROM "catalog_sales") AS "t"
WHERE "cs_item_sk" IS NOT NULL AND ("cs_bill_customer_sk" IS NOT NULL AND "cs_sold_date_sk" IS NOT NULL)) AS "t1"
INNER JOIN (SELECT "d_date_sk", "d_year", "d_moy"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "date_dim") AS "t2"
WHERE "d_year" = 1999 AND ("d_moy" = 1 AND "d_date_sk" IS NOT NULL)) AS "t4" ON "t1"."cs_sold_date_sk" = "t4"."d_date_sk"
                    hive.sql.query.fieldNames cs_sold_date_sk,cs_bill_customer_sk,cs_item_sk,cs_quantity,cs_list_price,d_date_sk,d_year,d_moy
                    hive.sql.query.fieldTypes int,int,bigint,int,decimal(7,2),int,int,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: cs_bill_customer_sk (type: int), cs_item_sk (type: bigint), cs_quantity (type: int), cs_list_price (type: decimal(7,2))
                    outputColumnNames: _col1, _col2, _col3, _col4
                    Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col2 (type: bigint)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col2 (type: bigint)
                      Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: int), _col3 (type: int), _col4 (type: decimal(7,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 11 
            Map Operator Tree:
                TableScan
                  alias: item
                  properties:
                    hive.sql.query SELECT "i_item_sk", "i_item_desc"
FROM (SELECT "i_item_sk", "i_item_desc"
FROM "item") AS "t"
WHERE "i_item_sk" IS NOT NULL
                    hive.sql.query.fieldNames i_item_sk,i_item_desc
                    hive.sql.query.fieldTypes bigint,string
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: i_item_sk (type: bigint), substr(i_item_desc, 1, 30) (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: bigint)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: bigint)
                      Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 12 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "t7"."c_customer_sk"
FROM (SELECT "t4"."c_customer_sk", SUM("t1"."""*""") AS "$f1"
FROM (SELECT "ss_customer_sk", CAST("ss_quantity" AS DECIMAL(10, 0)) * "ss_sales_price" AS "*"
FROM (SELECT "ss_customer_sk", "ss_quantity", "ss_sales_price"
FROM "store_sales") AS "t"
WHERE "ss_customer_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "c_customer_sk"
FROM (SELECT "c_customer_sk"
FROM "customer") AS "t2"
WHERE "c_customer_sk" IS NOT NULL) AS "t4" ON "t1"."ss_customer_sk" = "t4"."c_customer_sk"
GROUP BY "t4"."c_customer_sk"
HAVING SUM("t1"."""*""") IS NOT NULL) AS "t7"
INNER JOIN (SELECT 0.95 * MAX("t17"."$f1") AS "*"
FROM (SELECT "t13"."c_customer_sk", SUM("t10"."""*""") AS "$f1"
FROM (SELECT "ss_sold_date_sk", "ss_customer_sk", CAST("ss_quantity" AS DECIMAL(10, 0)) * "ss_sales_price" AS "*"
FROM (SELECT "ss_sold_date_sk", "ss_customer_sk", "ss_quantity", "ss_sales_price"
FROM "store_sales") AS "t8"
WHERE "ss_customer_sk" IS NOT NULL AND "ss_sold_date_sk" IS NOT NULL) AS "t10"
INNER JOIN (SELECT "c_customer_sk"
FROM (SELECT "c_customer_sk"
FROM "customer") AS "t11"
WHERE "c_customer_sk" IS NOT NULL) AS "t13" ON "t10"."ss_customer_sk" = "t13"."c_customer_sk"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year"
FROM "date_dim") AS "t14"
WHERE "d_year" IN (1999, 2000, 2001, 2002) AND "d_date_sk" IS NOT NULL) AS "t16" ON "t10"."ss_sold_date_sk" = "t16"."d_date_sk"
GROUP BY "t13"."c_customer_sk") AS "t17"
HAVING MAX("t17"."$f1") IS NOT NULL) AS "t20" ON "t7"."$f1" > "t20"."""*"""
                    hive.sql.query.fieldNames c_customer_sk
                    hive.sql.query.fieldTypes int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: c_customer_sk (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      keys: _col0 (type: int)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 13 
            Map Operator Tree:
                TableScan
                  alias: web_sales
                  properties:
                    hive.sql.query SELECT "t1"."ws_sold_date_sk", "t1"."ws_item_sk", "t1"."ws_bill_customer_sk", "t1"."ws_quantity", "t1"."ws_list_price", "t4"."d_date_sk", "t4"."d_year", "t4"."d_moy"
FROM (SELECT "ws_sold_date_sk", "ws_item_sk", "ws_bill_customer_sk", "ws_quantity", "ws_list_price"
FROM (SELECT "ws_sold_date_sk", "ws_item_sk", "ws_bill_customer_sk", "ws_quantity", "ws_list_price"
FROM "web_sales") AS "t"
WHERE "ws_item_sk" IS NOT NULL AND ("ws_bill_customer_sk" IS NOT NULL AND "ws_sold_date_sk" IS NOT NULL)) AS "t1"
INNER JOIN (SELECT "d_date_sk", "d_year", "d_moy"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "date_dim") AS "t2"
WHERE "d_year" = 1999 AND ("d_moy" = 1 AND "d_date_sk" IS NOT NULL)) AS "t4" ON "t1"."ws_sold_date_sk" = "t4"."d_date_sk"
                    hive.sql.query.fieldNames ws_sold_date_sk,ws_item_sk,ws_bill_customer_sk,ws_quantity,ws_list_price,d_date_sk,d_year,d_moy
                    hive.sql.query.fieldTypes int,bigint,int,int,decimal(7,2),int,int,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ws_item_sk (type: bigint), ws_bill_customer_sk (type: int), ws_quantity (type: int), ws_list_price (type: decimal(7,2))
                    outputColumnNames: _col1, _col2, _col3, _col4
                    Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: bigint)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: bigint)
                      Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col2 (type: int), _col3 (type: int), _col4 (type: decimal(7,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "t1"."ss_sold_date_sk", "t1"."ss_item_sk", "t4"."d_date_sk", "t4"."d_date"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk"
FROM "store_sales") AS "t"
WHERE "ss_sold_date_sk" IS NOT NULL AND "ss_item_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk", "d_date"
FROM (SELECT "d_date_sk", "d_date", "d_year"
FROM "date_dim") AS "t2"
WHERE "d_year" IN (1999, 2000, 2001, 2002) AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."ss_sold_date_sk" = "t4"."d_date_sk"
                    hive.sql.query.fieldNames ss_sold_date_sk,ss_item_sk,d_date_sk,d_date
                    hive.sql.query.fieldTypes int,bigint,int,string
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ss_item_sk (type: bigint), d_date (type: string)
                    outputColumnNames: _col1, _col3
                    Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: bigint)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: bigint)
                      Statistics: Num rows: 1 Data size: 192 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col3 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 10 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col2 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col3, _col4
                Statistics: Num rows: 1 Data size: 154 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: (CAST( _col3 AS decimal(10,0)) * _col4) (type: decimal(18,2))
                  outputColumnNames: _col0
                  Statistics: Num rows: 1 Data size: 154 Basic stats: COMPLETE Column stats: NONE
                  Group By Operator
                    aggregations: sum(_col0)
                    minReductionHashAggr: 0.99
                    mode: hash
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 112 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 112 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: decimal(28,2))
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col2 (type: bigint)
                  1 _col0 (type: bigint)
                outputColumnNames: _col1, _col3, _col4
                Statistics: Num rows: 1 Data size: 140 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col1 (type: int)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col1 (type: int)
                  Statistics: Num rows: 1 Data size: 140 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col3 (type: int), _col4 (type: decimal(7,2))
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col3, _col4
                Statistics: Num rows: 1 Data size: 154 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: (CAST( _col3 AS decimal(10,0)) * _col4) (type: decimal(18,2))
                  outputColumnNames: _col0
                  Statistics: Num rows: 1 Data size: 154 Basic stats: COMPLETE Column stats: NONE
                  Group By Operator
                    aggregations: sum(_col0)
                    minReductionHashAggr: 0.99
                    mode: hash
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 112 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 112 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: decimal(28,2))
        Reducer 5 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 112 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 112 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 7 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col1 (type: bigint)
                  1 _col0 (type: bigint)
                outputColumnNames: _col3, _col4, _col5
                Statistics: Num rows: 1 Data size: 211 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: count()
                  keys: _col4 (type: bigint), _col3 (type: string), _col5 (type: string)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 1 Data size: 211 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: bigint), _col1 (type: string), _col2 (type: string)
                    null sort order: zzz
                    sort order: +++
                    Map-reduce partition columns: _col0 (type: bigint), _col1 (type: string), _col2 (type: string)
                    Statistics: Num rows: 1 Data size: 211 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col3 (type: bigint)
        Reducer 8 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: bigint), KEY._col1 (type: string), KEY._col2 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 1 Data size: 211 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: bigint), _col3 (type: bigint)
                  outputColumnNames: _col1, _col3
                  Statistics: Num rows: 1 Data size: 211 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (_col3 > 4L) (type: boolean)
                    Statistics: Num rows: 1 Data size: 211 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: _col1 (type: bigint)
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 211 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        keys: _col0 (type: bigint)
                        minReductionHashAggr: 0.99
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 211 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: bigint)
                          null sort order: z
                          sort order: +
                          Map-reduce partition columns: _col0 (type: bigint)
                          Statistics: Num rows: 1 Data size: 211 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: bigint)
                          null sort order: z
                          sort order: +
                          Map-reduce partition columns: _col0 (type: bigint)
                          Statistics: Num rows: 1 Data size: 211 Basic stats: COMPLETE Column stats: NONE
        Reducer 9 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col1 (type: bigint)
                  1 _col0 (type: bigint)
                outputColumnNames: _col2, _col3, _col4
                Statistics: Num rows: 1 Data size: 140 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col2 (type: int)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col2 (type: int)
                  Statistics: Num rows: 1 Data size: 140 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col3 (type: int), _col4 (type: decimal(7,2))
        Union 4 
            Vertex: Union 4

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

