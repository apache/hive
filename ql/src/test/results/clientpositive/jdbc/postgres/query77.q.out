Warning: Shuffle Join MERGEJOIN[38][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 6' is a cross product
PREHOOK: query: explain
with ss as
 (select s_store_sk,
         sum(ss_ext_sales_price) as sales,
         sum(ss_net_profit) as profit
 from store_sales,
      date_dim,
      store
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  30 days) 
       and ss_store_sk = s_store_sk
 group by s_store_sk)
 ,
 sr as
 (select s_store_sk,
         sum(sr_return_amt) as returns,
         sum(sr_net_loss) as profit_loss
 from store_returns,
      date_dim,
      store
 where sr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and sr_store_sk = s_store_sk
 group by s_store_sk), 
 cs as
 (select cs_call_center_sk,
        sum(cs_ext_sales_price) as sales,
        sum(cs_net_profit) as profit
 from catalog_sales,
      date_dim
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
 group by cs_call_center_sk 
 ), 
 cr as
 (select
        sum(cr_return_amount) as returns,
        sum(cr_net_loss) as profit_loss
 from catalog_returns,
      date_dim
 where cr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
 ), 
 ws as
 ( select wp_web_page_sk,
        sum(ws_ext_sales_price) as sales,
        sum(ws_net_profit) as profit
 from web_sales,
      date_dim,
      web_page
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and ws_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk), 
 wr as
 (select wp_web_page_sk,
        sum(wr_return_amt) as returns,
        sum(wr_net_loss) as profit_loss
 from web_returns,
      date_dim,
      web_page
 where wr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and wr_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , ss.s_store_sk as id
        , sales
        , coalesce(returns, 0) as returns
        , (profit - coalesce(profit_loss,0)) as profit
 from   ss left join sr
        on  ss.s_store_sk = sr.s_store_sk
 union all
 select 'catalog channel' as channel
        , cs_call_center_sk as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from  cs
       , cr
 union all
 select 'web channel' as channel
        , ws.wp_web_page_sk as id
        , sales
        , coalesce(returns, 0) returns
        , (profit - coalesce(profit_loss,0)) as profit
 from   ws left join wr
        on  ws.wp_web_page_sk = wr.wp_web_page_sk
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_page
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
with ss as
 (select s_store_sk,
         sum(ss_ext_sales_price) as sales,
         sum(ss_net_profit) as profit
 from store_sales,
      date_dim,
      store
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  30 days) 
       and ss_store_sk = s_store_sk
 group by s_store_sk)
 ,
 sr as
 (select s_store_sk,
         sum(sr_return_amt) as returns,
         sum(sr_net_loss) as profit_loss
 from store_returns,
      date_dim,
      store
 where sr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and sr_store_sk = s_store_sk
 group by s_store_sk), 
 cs as
 (select cs_call_center_sk,
        sum(cs_ext_sales_price) as sales,
        sum(cs_net_profit) as profit
 from catalog_sales,
      date_dim
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
 group by cs_call_center_sk 
 ), 
 cr as
 (select
        sum(cr_return_amount) as returns,
        sum(cr_net_loss) as profit_loss
 from catalog_returns,
      date_dim
 where cr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
 ), 
 ws as
 ( select wp_web_page_sk,
        sum(ws_ext_sales_price) as sales,
        sum(ws_net_profit) as profit
 from web_sales,
      date_dim,
      web_page
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and ws_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk), 
 wr as
 (select wp_web_page_sk,
        sum(wr_return_amt) as returns,
        sum(wr_net_loss) as profit_loss
 from web_returns,
      date_dim,
      web_page
 where wr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and wr_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , ss.s_store_sk as id
        , sales
        , coalesce(returns, 0) as returns
        , (profit - coalesce(profit_loss,0)) as profit
 from   ss left join sr
        on  ss.s_store_sk = sr.s_store_sk
 union all
 select 'catalog channel' as channel
        , cs_call_center_sk as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from  cs
       , cr
 union all
 select 'web channel' as channel
        , ws.wp_web_page_sk as id
        , sales
        , coalesce(returns, 0) returns
        , (profit - coalesce(profit_loss,0)) as profit
 from   ws left join wr
        on  ws.wp_web_page_sk = wr.wp_web_page_sk
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_page
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Union 2 (CONTAINS)
        Map 8 <- Union 2 (CONTAINS)
        Reducer 3 <- Union 2 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
        Reducer 6 <- Map 5 (XPROD_EDGE), Map 7 (XPROD_EDGE), Union 2 (CONTAINS)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  Statistics: Num rows: 1 Data size: 524 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: channel (type: string), id (type: int), sales (type: decimal(17,2)), returns (type: decimal(17,2)), profit (type: decimal(18,2))
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4
                    Statistics: Num rows: 1 Data size: 524 Basic stats: COMPLETE Column stats: NONE
                    Top N Key Operator
                      sort order: ++
                      keys: _col0 (type: string), _col1 (type: int)
                      null sort order: zz
                      Statistics: Num rows: 3 Data size: 1501 Basic stats: COMPLETE Column stats: NONE
                      top n: 100
                      Group By Operator
                        aggregations: sum(_col2), sum(_col3), sum(_col4)
                        keys: _col0 (type: string), _col1 (type: int), 0L (type: bigint)
                        grouping sets: 0, 1, 3
                        minReductionHashAggr: 0.99
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                        Statistics: Num rows: 9 Data size: 4503 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: string), _col1 (type: int), _col2 (type: bigint)
                          null sort order: zzz
                          sort order: +++
                          Map-reduce partition columns: _col0 (type: string), _col1 (type: int), _col2 (type: bigint)
                          Statistics: Num rows: 9 Data size: 4503 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col3 (type: decimal(27,2)), _col4 (type: decimal(27,2)), _col5 (type: decimal(28,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: catalog_sales
                  properties:
                    hive.sql.query SELECT "t1"."cs_call_center_sk", SUM("t1"."cs_ext_sales_price") AS "$f1", SUM("t1"."cs_net_profit") AS "$f2"
FROM (SELECT "cs_sold_date_sk", "cs_call_center_sk", "cs_ext_sales_price", "cs_net_profit"
FROM (SELECT "cs_sold_date_sk", "cs_call_center_sk", "cs_ext_sales_price", "cs_net_profit"
FROM "catalog_sales") AS "t"
WHERE "cs_sold_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_date"
FROM "date_dim") AS "t2"
WHERE CAST("d_date" AS TIMESTAMP(9)) BETWEEN TIMESTAMP '1998-08-04 00:00:00.000000000' AND TIMESTAMP '1998-09-03 00:00:00.000000000' AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."cs_sold_date_sk" = "t4"."d_date_sk"
GROUP BY "t1"."cs_call_center_sk"
                    hive.sql.query.fieldNames cs_call_center_sk,$f1,$f2
                    hive.sql.query.fieldTypes int,decimal(17,2),decimal(17,2)
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 228 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: cs_call_center_sk (type: int), $f1 (type: decimal(17,2)), $f2 (type: decimal(17,2))
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 228 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 228 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: int), _col1 (type: decimal(17,2)), _col2 (type: decimal(17,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: catalog_returns
                  properties:
                    hive.sql.query SELECT SUM("t1"."cr_return_amount") AS "$f0", SUM("t1"."cr_net_loss") AS "$f1"
FROM (SELECT "cr_returned_date_sk", "cr_return_amount", "cr_net_loss"
FROM (SELECT "cr_returned_date_sk", "cr_return_amount", "cr_net_loss"
FROM "catalog_returns") AS "t"
WHERE "cr_returned_date_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_date"
FROM "date_dim") AS "t2"
WHERE CAST("d_date" AS TIMESTAMP(9)) BETWEEN TIMESTAMP '1998-08-04 00:00:00.000000000' AND TIMESTAMP '1998-09-03 00:00:00.000000000' AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."cr_returned_date_sk" = "t4"."d_date_sk"
                    hive.sql.query.fieldNames $f0,$f1
                    hive.sql.query.fieldTypes decimal(17,2),decimal(17,2)
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 224 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: $f0 (type: decimal(17,2)), $f1 (type: decimal(17,2))
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 224 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 224 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: decimal(17,2)), _col1 (type: decimal(17,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 8 
            Map Operator Tree:
                TableScan
                  alias: web_sales
                  Statistics: Num rows: 1 Data size: 524 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: channel (type: string), id (type: int), sales (type: decimal(17,2)), returns (type: decimal(17,2)), profit (type: decimal(18,2))
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4
                    Statistics: Num rows: 1 Data size: 524 Basic stats: COMPLETE Column stats: NONE
                    Top N Key Operator
                      sort order: ++
                      keys: _col0 (type: string), _col1 (type: int)
                      null sort order: zz
                      Statistics: Num rows: 3 Data size: 1501 Basic stats: COMPLETE Column stats: NONE
                      top n: 100
                      Group By Operator
                        aggregations: sum(_col2), sum(_col3), sum(_col4)
                        keys: _col0 (type: string), _col1 (type: int), 0L (type: bigint)
                        grouping sets: 0, 1, 3
                        minReductionHashAggr: 0.99
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                        Statistics: Num rows: 9 Data size: 4503 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: string), _col1 (type: int), _col2 (type: bigint)
                          null sort order: zzz
                          sort order: +++
                          Map-reduce partition columns: _col0 (type: string), _col1 (type: int), _col2 (type: bigint)
                          Statistics: Num rows: 9 Data size: 4503 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col3 (type: decimal(27,2)), _col4 (type: decimal(27,2)), _col5 (type: decimal(28,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), sum(VALUE._col1), sum(VALUE._col2)
                keys: KEY._col0 (type: string), KEY._col1 (type: int), KEY._col2 (type: bigint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col3, _col4, _col5
                Statistics: Num rows: 4 Data size: 2001 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: int), _col3 (type: decimal(27,2)), _col4 (type: decimal(27,2)), _col5 (type: decimal(28,2))
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4
                  Statistics: Num rows: 4 Data size: 2001 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: int)
                    null sort order: zz
                    sort order: ++
                    Statistics: Num rows: 4 Data size: 2001 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col2 (type: decimal(27,2)), _col3 (type: decimal(27,2)), _col4 (type: decimal(28,2))
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: int), VALUE._col0 (type: decimal(27,2)), VALUE._col1 (type: decimal(27,2)), VALUE._col2 (type: decimal(28,2))
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 4 Data size: 2001 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 4 Data size: 2001 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 4 Data size: 2001 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 6 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 1 Data size: 453 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: 'catalog channel' (type: string), _col0 (type: int), _col1 (type: decimal(17,2)), _col3 (type: decimal(17,2)), (_col2 - _col4) (type: decimal(18,2))
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4
                  Statistics: Num rows: 1 Data size: 453 Basic stats: COMPLETE Column stats: NONE
                  Top N Key Operator
                    sort order: ++
                    keys: _col0 (type: string), _col1 (type: int)
                    null sort order: zz
                    Statistics: Num rows: 3 Data size: 1501 Basic stats: COMPLETE Column stats: NONE
                    top n: 100
                    Group By Operator
                      aggregations: sum(_col2), sum(_col3), sum(_col4)
                      keys: _col0 (type: string), _col1 (type: int), 0L (type: bigint)
                      grouping sets: 0, 1, 3
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      Statistics: Num rows: 9 Data size: 4503 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: int), _col2 (type: bigint)
                        null sort order: zzz
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: int), _col2 (type: bigint)
                        Statistics: Num rows: 9 Data size: 4503 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: decimal(27,2)), _col4 (type: decimal(27,2)), _col5 (type: decimal(28,2))
        Union 2 
            Vertex: Union 2

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

