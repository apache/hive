PREHOOK: query: explain
select  *
from (select i_category
            ,i_class
            ,i_brand
            ,i_product_name
            ,d_year
            ,d_qoy
            ,d_moy
            ,s_store_id
            ,sumsales
            ,rank() over (partition by i_category order by sumsales desc) rk
      from (select i_category
                  ,i_class
                  ,i_brand
                  ,i_product_name
                  ,d_year
                  ,d_qoy
                  ,d_moy
                  ,s_store_id
                  ,sum(coalesce(ss_sales_price*ss_quantity,0)) sumsales
            from store_sales
                ,date_dim
                ,store
                ,item
       where  ss_sold_date_sk=d_date_sk
          and ss_item_sk=i_item_sk
          and ss_store_sk = s_store_sk
          and d_month_seq between 1212 and 1212+11
       group by  rollup(i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy,s_store_id))dw1) dw2
where rk <= 100
order by i_category
        ,i_class
        ,i_brand
        ,i_product_name
        ,d_year
        ,d_qoy
        ,d_moy
        ,s_store_id
        ,sumsales
        ,rk
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
select  *
from (select i_category
            ,i_class
            ,i_brand
            ,i_product_name
            ,d_year
            ,d_qoy
            ,d_moy
            ,s_store_id
            ,sumsales
            ,rank() over (partition by i_category order by sumsales desc) rk
      from (select i_category
                  ,i_class
                  ,i_brand
                  ,i_product_name
                  ,d_year
                  ,d_qoy
                  ,d_moy
                  ,s_store_id
                  ,sum(coalesce(ss_sales_price*ss_quantity,0)) sumsales
            from store_sales
                ,date_dim
                ,store
                ,item
       where  ss_sold_date_sk=d_date_sk
          and ss_item_sk=i_item_sk
          and ss_store_sk = s_store_sk
          and d_month_seq between 1212 and 1212+11
       group by  rollup(i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy,s_store_id))dw1) dw2
where rk <= 100
order by i_category
        ,i_class
        ,i_brand
        ,i_product_name
        ,d_year
        ,d_qoy
        ,d_moy
        ,s_store_id
        ,sumsales
        ,rk
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "t1"."ss_sold_date_sk", "t1"."ss_item_sk", "t1"."ss_store_sk", "t1"."CASE", "t4"."s_store_sk", "t4"."s_store_id", "t7"."d_date_sk", "t7"."d_year", "t7"."d_moy", "t7"."d_qoy", "t10"."i_item_sk", "t10"."i_brand", "t10"."i_class", "t10"."i_category", "t10"."i_product_name"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk", "ss_store_sk", CASE WHEN "ss_sales_price" IS NOT NULL AND CAST("ss_quantity" AS DECIMAL(10, 0)) IS NOT NULL THEN "ss_sales_price" * CAST("ss_quantity" AS DECIMAL(10, 0)) ELSE 0 END AS "CASE"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk", "ss_store_sk", "ss_quantity", "ss_sales_price"
FROM "store_sales") AS "t"
WHERE "ss_sold_date_sk" IS NOT NULL AND ("ss_store_sk" IS NOT NULL AND "ss_item_sk" IS NOT NULL)) AS "t1"
INNER JOIN (SELECT "s_store_sk", "s_store_id"
FROM (SELECT "s_store_sk", "s_store_id"
FROM "store") AS "t2"
WHERE "s_store_sk" IS NOT NULL) AS "t4" ON "t1"."ss_store_sk" = "t4"."s_store_sk"
INNER JOIN (SELECT "d_date_sk", "d_year", "d_moy", "d_qoy"
FROM (SELECT "d_date_sk", "d_month_seq", "d_year", "d_moy", "d_qoy"
FROM "date_dim") AS "t5"
WHERE "d_month_seq" BETWEEN 1212 AND 1223 AND "d_date_sk" IS NOT NULL) AS "t7" ON "t1"."ss_sold_date_sk" = "t7"."d_date_sk"
INNER JOIN (SELECT "i_item_sk", "i_brand", "i_class", "i_category", "i_product_name"
FROM (SELECT "i_item_sk", "i_brand", "i_class", "i_category", "i_product_name"
FROM "item") AS "t8"
WHERE "i_item_sk" IS NOT NULL) AS "t10" ON "t1"."ss_item_sk" = "t10"."i_item_sk"
                    hive.sql.query.fieldNames ss_sold_date_sk,ss_item_sk,ss_store_sk,CASE,s_store_sk,s_store_id,d_date_sk,d_year,d_moy,d_qoy,i_item_sk,i_brand,i_class,i_category,i_product_name
                    hive.sql.query.fieldTypes int,bigint,int,decimal(18,2),int,string,int,int,int,int,bigint,string,string,string,string
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 1044 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: case (type: decimal(18,2)), s_store_id (type: string), d_year (type: int), d_moy (type: int), d_qoy (type: int), i_brand (type: string), i_class (type: string), i_category (type: string), i_product_name (type: string)
                    outputColumnNames: _col3, _col5, _col7, _col8, _col9, _col11, _col12, _col13, _col14
                    Statistics: Num rows: 1 Data size: 1044 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: sum(_col3)
                      keys: _col5 (type: string), _col7 (type: int), _col8 (type: int), _col9 (type: int), _col11 (type: string), _col12 (type: string), _col13 (type: string), _col14 (type: string), 0L (type: bigint)
                      grouping sets: 0, 128, 160, 176, 240, 241, 249, 253, 255
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                      Statistics: Num rows: 9 Data size: 9396 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: string), _col8 (type: bigint)
                        null sort order: zzzzzzzzz
                        sort order: +++++++++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: string), _col8 (type: bigint)
                        Statistics: Num rows: 9 Data size: 9396 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col9 (type: decimal(28,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: int), KEY._col2 (type: int), KEY._col3 (type: int), KEY._col4 (type: string), KEY._col5 (type: string), KEY._col6 (type: string), KEY._col7 (type: string), KEY._col8 (type: bigint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col9
                Statistics: Num rows: 4 Data size: 4176 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Top N Key Operator
                  sort order: +-
                  keys: _col6 (type: string), _col9 (type: decimal(28,2))
                  null sort order: aa
                  Map-reduce partition columns: _col6 (type: string)
                  Statistics: Num rows: 4 Data size: 4176 Basic stats: COMPLETE Column stats: NONE
                  top n: 101
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: string), _col9 (type: decimal(28,2))
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                    Statistics: Num rows: 4 Data size: 4176 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col6 (type: string), _col8 (type: decimal(28,2))
                      null sort order: aa
                      sort order: +-
                      Map-reduce partition columns: _col6 (type: string)
                      Statistics: Num rows: 4 Data size: 4176 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: int), _col4 (type: string), _col5 (type: string), _col7 (type: string)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), VALUE._col1 (type: int), VALUE._col2 (type: int), VALUE._col3 (type: int), VALUE._col4 (type: string), VALUE._col5 (type: string), KEY.reducesinkkey0 (type: string), VALUE._col6 (type: string), KEY.reducesinkkey1 (type: decimal(28,2))
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                Statistics: Num rows: 4 Data size: 4176 Basic stats: COMPLETE Column stats: NONE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: int, _col2: int, _col3: int, _col4: string, _col5: string, _col6: string, _col7: string, _col8: decimal(28,2)
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col8 DESC NULLS FIRST
                        partition by: _col6
                        raw input shape:
                        window functions:
                            window function definition
                              alias: rank_window_0
                              arguments: _col8
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 4 Data size: 4176 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (rank_window_0 <= 100) (type: boolean)
                    Statistics: Num rows: 1 Data size: 1044 Basic stats: COMPLETE Column stats: NONE
                    Top N Key Operator
                      sort order: ++++++++++
                      keys: _col6 (type: string), _col5 (type: string), _col4 (type: string), _col7 (type: string), _col1 (type: int), _col3 (type: int), _col2 (type: int), _col0 (type: string), _col8 (type: decimal(28,2)), rank_window_0 (type: int)
                      null sort order: zzzzzzzzzz
                      Statistics: Num rows: 1 Data size: 1044 Basic stats: COMPLETE Column stats: NONE
                      top n: 100
                      Select Operator
                        expressions: _col6 (type: string), _col5 (type: string), _col4 (type: string), _col7 (type: string), _col1 (type: int), _col3 (type: int), _col2 (type: int), _col0 (type: string), _col8 (type: decimal(28,2)), rank_window_0 (type: int)
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                        Statistics: Num rows: 1 Data size: 1044 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string), _col3 (type: string), _col4 (type: int), _col5 (type: int), _col6 (type: int), _col7 (type: string), _col8 (type: decimal(28,2)), _col9 (type: int)
                          null sort order: zzzzzzzzzz
                          sort order: ++++++++++
                          Statistics: Num rows: 1 Data size: 1044 Basic stats: COMPLETE Column stats: NONE
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), KEY.reducesinkkey2 (type: string), KEY.reducesinkkey3 (type: string), KEY.reducesinkkey4 (type: int), KEY.reducesinkkey5 (type: int), KEY.reducesinkkey6 (type: int), KEY.reducesinkkey7 (type: string), KEY.reducesinkkey8 (type: decimal(28,2)), KEY.reducesinkkey9 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                Statistics: Num rows: 1 Data size: 1044 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 1044 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 1044 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

