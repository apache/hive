PREHOOK: query: explain cbo
select  ss_customer_sk
            ,sum(act_sales) sumsales
      from (select ss_item_sk
                  ,ss_ticket_number
                  ,ss_customer_sk
                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                            else (ss_quantity*ss_sales_price) end act_sales
            from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
                                                               and sr_ticket_number = ss_ticket_number)
                ,reason
            where sr_reason_sk = r_reason_sk
              and r_reason_desc = 'Did not like the warranty') t
      group by ss_customer_sk
      order by sumsales, ss_customer_sk
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@reason
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain cbo
select  ss_customer_sk
            ,sum(act_sales) sumsales
      from (select ss_item_sk
                  ,ss_ticket_number
                  ,ss_customer_sk
                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                            else (ss_quantity*ss_sales_price) end act_sales
            from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
                                                               and sr_ticket_number = ss_ticket_number)
                ,reason
            where sr_reason_sk = r_reason_sk
              and r_reason_desc = 'Did not like the warranty') t
      group by ss_customer_sk
      order by sumsales, ss_customer_sk
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@reason
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveJdbcConverter(convention=[JDBC.POSTGRES])
  JdbcSort(sort0=[$1], sort1=[$0], dir0=[ASC], dir1=[ASC], fetch=[100])
    JdbcAggregate(group=[{0}], agg#0=[sum($1)])
      JdbcProject($f0=[$7], $f1=[CASE($4, *(CAST(-($9, $3)):DECIMAL(10, 0), $10), $11)])
        JdbcJoin(condition=[AND(=($0, $6), =($2, $8))], joinType=[inner])
          JdbcJoin(condition=[=($1, $5)], joinType=[inner])
            JdbcProject(sr_item_sk=[$0], sr_reason_sk=[$1], sr_ticket_number=[$2], sr_return_quantity=[$3], IS NOT NULL=[IS NOT NULL($3)])
              JdbcFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($2), IS NOT NULL($1))])
                JdbcProject(sr_item_sk=[$2], sr_reason_sk=[$8], sr_ticket_number=[$9], sr_return_quantity=[$10])
                  JdbcHiveTableScan(table=[[default, store_returns]], table:alias=[store_returns])
            JdbcProject(r_reason_sk=[$0])
              JdbcFilter(condition=[AND(=($1, _UTF-16LE'Did not like the warranty'), IS NOT NULL($0))])
                JdbcProject(r_reason_sk=[$0], r_reason_desc=[$2])
                  JdbcHiveTableScan(table=[[default, reason]], table:alias=[reason])
          JdbcProject(ss_item_sk=[$0], ss_customer_sk=[$1], ss_ticket_number=[$2], ss_quantity=[$3], ss_sales_price=[$4], *=[*(CAST($3):DECIMAL(10, 0), $4)])
            JdbcFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($2))])
              JdbcProject(ss_item_sk=[$2], ss_customer_sk=[$3], ss_ticket_number=[$9], ss_quantity=[$10], ss_sales_price=[$13])
                JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])

