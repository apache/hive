PREHOOK: query: explain
select  i_item_id,
        ca_country,
        ca_state, 
        ca_county,
        avg( cast(cs_quantity as numeric(12,2))) agg1,
        avg( cast(cs_list_price as numeric(12,2))) agg2,
        avg( cast(cs_coupon_amt as numeric(12,2))) agg3,
        avg( cast(cs_sales_price as numeric(12,2))) agg4,
        avg( cast(cs_net_profit as numeric(12,2))) agg5,
        avg( cast(c_birth_year as numeric(12,2))) agg6,
        avg( cast(cd1.cd_dep_count as numeric(12,2))) agg7
 from catalog_sales, customer_demographics cd1, 
      customer_demographics cd2, customer, customer_address, date_dim, item
 where cs_sold_date_sk = d_date_sk and
       cs_item_sk = i_item_sk and
       cs_bill_cdemo_sk = cd1.cd_demo_sk and
       cs_bill_customer_sk = c_customer_sk and
       cd1.cd_gender = 'M' and 
       cd1.cd_education_status = 'College' and
       c_current_cdemo_sk = cd2.cd_demo_sk and
       c_current_addr_sk = ca_address_sk and
       c_birth_month in (9,5,12,4,1,10) and
       d_year = 2001 and
       ca_state in ('ND','WI','AL'
                   ,'NC','OK','MS','TN')
 group by rollup (i_item_id, ca_country, ca_state, ca_county)
 order by ca_country,
        ca_state, 
        ca_county,
	i_item_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
#### A masked pattern was here ####
POSTHOOK: query: explain
select  i_item_id,
        ca_country,
        ca_state, 
        ca_county,
        avg( cast(cs_quantity as numeric(12,2))) agg1,
        avg( cast(cs_list_price as numeric(12,2))) agg2,
        avg( cast(cs_coupon_amt as numeric(12,2))) agg3,
        avg( cast(cs_sales_price as numeric(12,2))) agg4,
        avg( cast(cs_net_profit as numeric(12,2))) agg5,
        avg( cast(c_birth_year as numeric(12,2))) agg6,
        avg( cast(cd1.cd_dep_count as numeric(12,2))) agg7
 from catalog_sales, customer_demographics cd1, 
      customer_demographics cd2, customer, customer_address, date_dim, item
 where cs_sold_date_sk = d_date_sk and
       cs_item_sk = i_item_sk and
       cs_bill_cdemo_sk = cd1.cd_demo_sk and
       cs_bill_customer_sk = c_customer_sk and
       cd1.cd_gender = 'M' and 
       cd1.cd_education_status = 'College' and
       c_current_cdemo_sk = cd2.cd_demo_sk and
       c_current_addr_sk = ca_address_sk and
       c_birth_month in (9,5,12,4,1,10) and
       d_year = 2001 and
       ca_state in ('ND','WI','AL'
                   ,'NC','OK','MS','TN')
 group by rollup (i_item_id, ca_country, ca_state, ca_county)
 order by ca_country,
        ca_state, 
        ca_county,
	i_item_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: catalog_sales
                  properties:
                    hive.sql.query SELECT "t1"."cs_sold_date_sk", "t1"."cs_bill_customer_sk", "t1"."cs_bill_cdemo_sk", "t1"."cs_item_sk", "t1"."CAST", "t1"."CAST5", "t1"."CAST6", "t1"."CAST7", "t1"."CAST8", "t4"."d_date_sk", "t7"."cd_demo_sk", "t7"."CAST" AS "CAST0", "t10"."i_item_sk", "t10"."i_item_id", "t20"."c_customer_sk", "t20"."c_current_cdemo_sk", "t20"."c_current_addr_sk", "t20"."CAST" AS "CAST1", "t20"."cd_demo_sk" AS "cd_demo_sk0", "t20"."ca_address_sk", "t20"."ca_county", "t20"."ca_state", "t20"."ca_country"
FROM (SELECT "cs_sold_date_sk", "cs_bill_customer_sk", "cs_bill_cdemo_sk", "cs_item_sk", CAST("cs_quantity" AS DECIMAL(12, 2)) AS "CAST", CAST("cs_list_price" AS DECIMAL(12, 2)) AS "CAST5", CAST("cs_coupon_amt" AS DECIMAL(12, 2)) AS "CAST6", CAST("cs_sales_price" AS DECIMAL(12, 2)) AS "CAST7", CAST("cs_net_profit" AS DECIMAL(12, 2)) AS "CAST8"
FROM (SELECT "cs_sold_date_sk", "cs_bill_customer_sk", "cs_bill_cdemo_sk", "cs_item_sk", "cs_quantity", "cs_list_price", "cs_sales_price", "cs_coupon_amt", "cs_net_profit"
FROM "catalog_sales") AS "t"
WHERE "cs_bill_cdemo_sk" IS NOT NULL AND "cs_bill_customer_sk" IS NOT NULL AND ("cs_sold_date_sk" IS NOT NULL AND "cs_item_sk" IS NOT NULL)) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year"
FROM "date_dim") AS "t2"
WHERE "d_year" = 2001 AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."cs_sold_date_sk" = "t4"."d_date_sk"
INNER JOIN (SELECT "cd_demo_sk", CAST("cd_dep_count" AS DECIMAL(12, 2)) AS "CAST"
FROM (SELECT "cd_demo_sk", "cd_gender", "cd_education_status", "cd_dep_count"
FROM "customer_demographics") AS "t5"
WHERE "cd_gender" = 'M' AND ("cd_education_status" = 'College' AND "cd_demo_sk" IS NOT NULL)) AS "t7" ON "t1"."cs_bill_cdemo_sk" = "t7"."cd_demo_sk"
INNER JOIN (SELECT "i_item_sk", "i_item_id"
FROM (SELECT "i_item_sk", "i_item_id"
FROM "item") AS "t8"
WHERE "i_item_sk" IS NOT NULL) AS "t10" ON "t1"."cs_item_sk" = "t10"."i_item_sk"
INNER JOIN (SELECT "t13"."c_customer_sk", "t13"."c_current_cdemo_sk", "t13"."c_current_addr_sk", "t13"."CAST", "t16"."cd_demo_sk", "t19"."ca_address_sk", "t19"."ca_county", "t19"."ca_state", "t19"."ca_country"
FROM (SELECT "c_customer_sk", "c_current_cdemo_sk", "c_current_addr_sk", CAST("c_birth_year" AS DECIMAL(12, 2)) AS "CAST"
FROM (SELECT "c_customer_sk", "c_current_cdemo_sk", "c_current_addr_sk", "c_birth_month", "c_birth_year"
FROM "customer") AS "t11"
WHERE "c_birth_month" IN (9, 5, 12, 4, 1, 10) AND "c_customer_sk" IS NOT NULL AND ("c_current_cdemo_sk" IS NOT NULL AND "c_current_addr_sk" IS NOT NULL)) AS "t13"
INNER JOIN (SELECT "cd_demo_sk"
FROM (SELECT "cd_demo_sk"
FROM "customer_demographics") AS "t14"
WHERE "cd_demo_sk" IS NOT NULL) AS "t16" ON "t13"."c_current_cdemo_sk" = "t16"."cd_demo_sk"
INNER JOIN (SELECT "ca_address_sk", "ca_county", "ca_state", "ca_country"
FROM (SELECT "ca_address_sk", "ca_county", "ca_state", "ca_country"
FROM "customer_address") AS "t17"
WHERE "ca_state" IN ('ND', 'WI', 'AL', 'NC', 'OK', 'MS', 'TN') AND "ca_address_sk" IS NOT NULL) AS "t19" ON "t13"."c_current_addr_sk" = "t19"."ca_address_sk") AS "t20" ON "t1"."cs_bill_customer_sk" = "t20"."c_customer_sk"
                    hive.sql.query.fieldNames cs_sold_date_sk,cs_bill_customer_sk,cs_bill_cdemo_sk,cs_item_sk,CAST,CAST5,CAST6,CAST7,CAST8,d_date_sk,cd_demo_sk,CAST0,i_item_sk,i_item_id,c_customer_sk,c_current_cdemo_sk,c_current_addr_sk,CAST1,cd_demo_sk0,ca_address_sk,ca_county,ca_state,ca_country
                    hive.sql.query.fieldTypes int,int,int,bigint,decimal(12,2),decimal(12,2),decimal(12,2),decimal(12,2),decimal(12,2),int,int,decimal(12,2),bigint,string,int,int,int,decimal(12,2),int,int,string,string,string
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 1520 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: cast (type: decimal(12,2)), cast5 (type: decimal(12,2)), cast6 (type: decimal(12,2)), cast7 (type: decimal(12,2)), cast8 (type: decimal(12,2)), cast0 (type: decimal(12,2)), i_item_id (type: string), cast1 (type: decimal(12,2)), ca_county (type: string), ca_state (type: string), ca_country (type: string)
                    outputColumnNames: _col4, _col5, _col6, _col7, _col8, _col11, _col13, _col17, _col20, _col21, _col22
                    Statistics: Num rows: 1 Data size: 1520 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: sum(_col4), count(_col4), sum(_col5), count(_col5), sum(_col6), count(_col6), sum(_col7), count(_col7), sum(_col8), count(_col8), sum(_col17), count(_col17), sum(_col11), count(_col11)
                      keys: _col13 (type: string), _col20 (type: string), _col21 (type: string), _col22 (type: string), 0L (type: bigint)
                      grouping sets: 0, 4, 6, 7, 15
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18
                      Statistics: Num rows: 5 Data size: 7600 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string), _col3 (type: string), _col4 (type: bigint)
                        null sort order: zzzzz
                        sort order: +++++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string), _col2 (type: string), _col3 (type: string), _col4 (type: bigint)
                        Statistics: Num rows: 5 Data size: 7600 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col5 (type: decimal(22,2)), _col6 (type: bigint), _col7 (type: decimal(22,2)), _col8 (type: bigint), _col9 (type: decimal(22,2)), _col10 (type: bigint), _col11 (type: decimal(22,2)), _col12 (type: bigint), _col13 (type: decimal(22,2)), _col14 (type: bigint), _col15 (type: decimal(22,2)), _col16 (type: bigint), _col17 (type: decimal(22,2)), _col18 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1), sum(VALUE._col2), count(VALUE._col3), sum(VALUE._col4), count(VALUE._col5), sum(VALUE._col6), count(VALUE._col7), sum(VALUE._col8), count(VALUE._col9), sum(VALUE._col10), count(VALUE._col11), sum(VALUE._col12), count(VALUE._col13)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: string), KEY._col3 (type: string), KEY._col4 (type: bigint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18
                Statistics: Num rows: 2 Data size: 3040 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Top N Key Operator
                  sort order: ++++
                  keys: _col3 (type: string), _col2 (type: string), _col1 (type: string), _col0 (type: string)
                  null sort order: zzzz
                  Statistics: Num rows: 2 Data size: 3040 Basic stats: COMPLETE Column stats: NONE
                  top n: 100
                  Select Operator
                    expressions: _col0 (type: string), _col3 (type: string), _col2 (type: string), _col1 (type: string), CAST( (_col5 / _col6) AS decimal(16,6)) (type: decimal(16,6)), CAST( (_col7 / _col8) AS decimal(16,6)) (type: decimal(16,6)), CAST( (_col9 / _col10) AS decimal(16,6)) (type: decimal(16,6)), CAST( (_col11 / _col12) AS decimal(16,6)) (type: decimal(16,6)), CAST( (_col13 / _col14) AS decimal(16,6)) (type: decimal(16,6)), CAST( (_col15 / _col16) AS decimal(16,6)) (type: decimal(16,6)), CAST( (_col17 / _col18) AS decimal(16,6)) (type: decimal(16,6))
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10
                    Statistics: Num rows: 2 Data size: 3040 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: string), _col2 (type: string), _col3 (type: string), _col0 (type: string)
                      null sort order: zzzz
                      sort order: ++++
                      Statistics: Num rows: 2 Data size: 3040 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col4 (type: decimal(16,6)), _col5 (type: decimal(16,6)), _col6 (type: decimal(16,6)), _col7 (type: decimal(16,6)), _col8 (type: decimal(16,6)), _col9 (type: decimal(16,6)), _col10 (type: decimal(16,6))
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey3 (type: string), KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), KEY.reducesinkkey2 (type: string), VALUE._col0 (type: decimal(16,6)), VALUE._col1 (type: decimal(16,6)), VALUE._col2 (type: decimal(16,6)), VALUE._col3 (type: decimal(16,6)), VALUE._col4 (type: decimal(16,6)), VALUE._col5 (type: decimal(16,6)), VALUE._col6 (type: decimal(16,6))
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10
                Statistics: Num rows: 2 Data size: 3040 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 2 Data size: 3040 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 3040 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

