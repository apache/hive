PREHOOK: query: explain
with ws_wh as
(select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2
 from web_sales ws1,web_sales ws2
 where ws1.ws_order_number = ws2.ws_order_number
   and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
 select  
   count(distinct ws_order_number) as `order count`
  ,sum(ws_ext_ship_cost) as `total shipping cost`
  ,sum(ws_net_profit) as `total net profit`
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-5-01' and 
           (cast('1999-5-01' as date) + 60 days)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TX'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and ws1.ws_order_number in (select ws_order_number
                            from ws_wh)
and ws1.ws_order_number in (select wr_order_number
                            from web_returns,ws_wh
                            where wr_order_number = ws_wh.ws_order_number)
order by count(distinct ws_order_number)
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Input: default@web_site
#### A masked pattern was here ####
POSTHOOK: query: explain
with ws_wh as
(select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2
 from web_sales ws1,web_sales ws2
 where ws1.ws_order_number = ws2.ws_order_number
   and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
 select  
   count(distinct ws_order_number) as `order count`
  ,sum(ws_ext_ship_cost) as `total shipping cost`
  ,sum(ws_net_profit) as `total net profit`
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-5-01' and 
           (cast('1999-5-01' as date) + 60 days)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TX'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and ws1.ws_order_number in (select ws_order_number
                            from ws_wh)
and ws1.ws_order_number in (select wr_order_number
                            from web_returns,ws_wh
                            where wr_order_number = ws_wh.ws_order_number)
order by count(distinct ws_order_number)
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Input: default@web_site
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
        Reducer 3 <- Map 7 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
        Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: ws1
                  properties:
                    hive.sql.query SELECT "t1"."ws_ship_date_sk", "t1"."ws_ship_addr_sk", "t1"."ws_web_site_sk", "t1"."ws_order_number", "t1"."ws_ext_ship_cost", "t1"."ws_net_profit", "t4"."d_date_sk", "t4"."d_date", "t7"."ca_address_sk", "t7"."ca_state", "t10"."web_site_sk", "t10"."web_company_name"
FROM (SELECT "ws_ship_date_sk", "ws_ship_addr_sk", "ws_web_site_sk", "ws_order_number", "ws_ext_ship_cost", "ws_net_profit"
FROM (SELECT "ws_ship_date_sk", "ws_ship_addr_sk", "ws_web_site_sk", "ws_order_number", "ws_ext_ship_cost", "ws_net_profit"
FROM "web_sales") AS "t"
WHERE "ws_order_number" IS NOT NULL AND "ws_ship_date_sk" IS NOT NULL AND ("ws_ship_addr_sk" IS NOT NULL AND "ws_web_site_sk" IS NOT NULL)) AS "t1"
INNER JOIN (SELECT "d_date_sk", "d_date"
FROM (SELECT "d_date_sk", "d_date"
FROM "date_dim") AS "t2"
WHERE CAST("d_date" AS TIMESTAMP(9)) BETWEEN TIMESTAMP '1999-05-01 00:00:00.000000000' AND TIMESTAMP '1999-06-30 00:00:00.000000000' AND "d_date_sk" IS NOT NULL) AS "t4" ON "t1"."ws_ship_date_sk" = "t4"."d_date_sk"
INNER JOIN (SELECT "ca_address_sk", "ca_state"
FROM (SELECT "ca_address_sk", "ca_state"
FROM "customer_address") AS "t5"
WHERE "ca_state" = 'TX' AND "ca_address_sk" IS NOT NULL) AS "t7" ON "t1"."ws_ship_addr_sk" = "t7"."ca_address_sk"
INNER JOIN (SELECT "web_site_sk", "web_company_name"
FROM (SELECT "web_site_sk", "web_company_name"
FROM "web_site") AS "t8"
WHERE "web_company_name" = 'pri' AND "web_site_sk" IS NOT NULL) AS "t10" ON "t1"."ws_web_site_sk" = "t10"."web_site_sk"
                    hive.sql.query.fieldNames ws_ship_date_sk,ws_ship_addr_sk,ws_web_site_sk,ws_order_number,ws_ext_ship_cost,ws_net_profit,d_date_sk,d_date,ca_address_sk,ca_state,web_site_sk,web_company_name
                    hive.sql.query.fieldTypes int,int,int,bigint,decimal(7,2),decimal(7,2),int,string,int,string,int,string
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 232 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ws_order_number (type: bigint), ws_ext_ship_cost (type: decimal(7,2)), ws_net_profit (type: decimal(7,2))
                    outputColumnNames: _col3, _col4, _col5
                    Statistics: Num rows: 1 Data size: 232 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col3 (type: bigint)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col3 (type: bigint)
                      Statistics: Num rows: 1 Data size: 232 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col4 (type: decimal(7,2)), _col5 (type: decimal(7,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: ws1
                  properties:
                    hive.sql.query SELECT "t1"."ws_order_number"
FROM (SELECT "ws_warehouse_sk", "ws_order_number"
FROM (SELECT "ws_warehouse_sk", "ws_order_number"
FROM "web_sales") AS "t"
WHERE "ws_order_number" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "ws_warehouse_sk", "ws_order_number"
FROM (SELECT "ws_warehouse_sk", "ws_order_number"
FROM "web_sales") AS "t2"
WHERE "ws_order_number" IS NOT NULL) AS "t4" ON "t1"."ws_order_number" = "t4"."ws_order_number" AND "t1"."ws_warehouse_sk" <> "t4"."ws_warehouse_sk"
                    hive.sql.query.fieldNames ws_order_number
                    hive.sql.query.fieldTypes bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ws_order_number (type: bigint)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      keys: _col0 (type: bigint)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: bigint)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: bigint)
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: ws1
                  properties:
                    hive.sql.query SELECT "t4"."wr_order_number"
FROM (SELECT "ws_warehouse_sk", "ws_order_number"
FROM (SELECT "ws_warehouse_sk", "ws_order_number"
FROM "web_sales") AS "t"
WHERE "ws_order_number" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "wr_order_number"
FROM (SELECT "wr_order_number"
FROM "web_returns") AS "t2"
WHERE "wr_order_number" IS NOT NULL) AS "t4" ON "t1"."ws_order_number" = "t4"."wr_order_number"
INNER JOIN (SELECT "ws_warehouse_sk", "ws_order_number"
FROM (SELECT "ws_warehouse_sk", "ws_order_number"
FROM "web_sales") AS "t5"
WHERE "ws_order_number" IS NOT NULL) AS "t7" ON "t1"."ws_order_number" = "t7"."ws_order_number" AND "t1"."ws_warehouse_sk" <> "t7"."ws_warehouse_sk"
                    hive.sql.query.fieldNames wr_order_number
                    hive.sql.query.fieldTypes bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: wr_order_number (type: bigint)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      keys: _col0 (type: bigint)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: bigint)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: bigint)
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col3 (type: bigint)
                  1 _col0 (type: bigint)
                outputColumnNames: _col3, _col4, _col5
                Statistics: Num rows: 1 Data size: 255 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col3 (type: bigint)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col3 (type: bigint)
                  Statistics: Num rows: 1 Data size: 255 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col4 (type: decimal(7,2)), _col5 (type: decimal(7,2))
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col3 (type: bigint)
                  1 _col0 (type: bigint)
                outputColumnNames: _col3, _col4, _col5
                Statistics: Num rows: 1 Data size: 280 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col4), sum(_col5)
                  keys: _col3 (type: bigint)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col2, _col3
                  Statistics: Num rows: 1 Data size: 280 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: bigint)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: bigint)
                    Statistics: Num rows: 1 Data size: 280 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col2 (type: decimal(17,2)), _col3 (type: decimal(17,2))
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), sum(VALUE._col1)
                keys: KEY._col0 (type: bigint)
                mode: partial2
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 1 Data size: 280 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: count(_col0), sum(_col1), sum(_col2)
                  mode: partial2
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 1 Data size: 344 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    null sort order: 
                    sort order: 
                    Statistics: Num rows: 1 Data size: 344 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: bigint), _col1 (type: decimal(17,2)), _col2 (type: decimal(17,2))
        Reducer 5 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0), sum(VALUE._col1), sum(VALUE._col2)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 1 Data size: 344 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 344 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

