PREHOOK: query: explain
select i_brand_id brand_id, i_brand brand,t_hour,t_minute,
 	sum(ext_price) ext_price
 from item, (select ws_ext_sales_price as ext_price, 
                        ws_sold_date_sk as sold_date_sk,
                        ws_item_sk as sold_item_sk,
                        ws_sold_time_sk as time_sk  
                 from web_sales,date_dim
                 where d_date_sk = ws_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 union all
                 select cs_ext_sales_price as ext_price,
                        cs_sold_date_sk as sold_date_sk,
                        cs_item_sk as sold_item_sk,
                        cs_sold_time_sk as time_sk
                 from catalog_sales,date_dim
                 where d_date_sk = cs_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 union all
                 select ss_ext_sales_price as ext_price,
                        ss_sold_date_sk as sold_date_sk,
                        ss_item_sk as sold_item_sk,
                        ss_sold_time_sk as time_sk
                 from store_sales,date_dim
                 where d_date_sk = ss_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 ) as tmp,time_dim
 where
   sold_item_sk = i_item_sk
   and i_manager_id=1
   and time_sk = t_time_sk
   and (t_meal_time = 'breakfast' or t_meal_time = 'dinner')
 group by i_brand, i_brand_id,t_hour,t_minute
 order by ext_price desc, i_brand_id
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@time_dim
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
select i_brand_id brand_id, i_brand brand,t_hour,t_minute,
 	sum(ext_price) ext_price
 from item, (select ws_ext_sales_price as ext_price, 
                        ws_sold_date_sk as sold_date_sk,
                        ws_item_sk as sold_item_sk,
                        ws_sold_time_sk as time_sk  
                 from web_sales,date_dim
                 where d_date_sk = ws_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 union all
                 select cs_ext_sales_price as ext_price,
                        cs_sold_date_sk as sold_date_sk,
                        cs_item_sk as sold_item_sk,
                        cs_sold_time_sk as time_sk
                 from catalog_sales,date_dim
                 where d_date_sk = cs_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 union all
                 select ss_ext_sales_price as ext_price,
                        ss_sold_date_sk as sold_date_sk,
                        ss_item_sk as sold_item_sk,
                        ss_sold_time_sk as time_sk
                 from store_sales,date_dim
                 where d_date_sk = ss_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 ) as tmp,time_dim
 where
   sold_item_sk = i_item_sk
   and i_manager_id=1
   and time_sk = t_time_sk
   and (t_meal_time = 'breakfast' or t_meal_time = 'dinner')
 group by i_brand, i_brand_id,t_hour,t_minute
 order by ext_price desc, i_brand_id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@time_dim
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Union 2 (CONTAINS)
        Map 7 <- Union 2 (CONTAINS)
        Map 8 <- Union 2 (CONTAINS)
        Reducer 3 <- Map 9 (SIMPLE_EDGE), Union 2 (SIMPLE_EDGE)
        Reducer 4 <- Map 10 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
        Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
        Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: web_sales
                  Statistics: Num rows: 1 Data size: 124 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ext_price (type: decimal(7,2)), sold_item_sk (type: bigint), time_sk (type: int)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 124 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: bigint)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: bigint)
                      Statistics: Num rows: 3 Data size: 372 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: decimal(7,2)), _col2 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 10 
            Map Operator Tree:
                TableScan
                  alias: time_dim
                  properties:
                    hive.sql.query SELECT "t_time_sk", "t_hour", "t_minute"
FROM (SELECT "t_time_sk", "t_hour", "t_minute", "t_meal_time"
FROM "time_dim") AS "t"
WHERE "t_meal_time" IN ('breakfast', 'dinner') AND "t_time_sk" IS NOT NULL
                    hive.sql.query.fieldNames t_time_sk,t_hour,t_minute
                    hive.sql.query.fieldTypes int,int,int
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: t_time_sk (type: int), t_hour (type: int), t_minute (type: int)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: int), _col2 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: catalog_sales
                  Statistics: Num rows: 1 Data size: 124 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ext_price (type: decimal(7,2)), sold_item_sk (type: bigint), time_sk (type: int)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 124 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: bigint)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: bigint)
                      Statistics: Num rows: 3 Data size: 372 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: decimal(7,2)), _col2 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 8 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  Statistics: Num rows: 1 Data size: 124 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ext_price (type: decimal(7,2)), sold_item_sk (type: bigint), time_sk (type: int)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 124 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: bigint)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: bigint)
                      Statistics: Num rows: 3 Data size: 372 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: decimal(7,2)), _col2 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 9 
            Map Operator Tree:
                TableScan
                  alias: item
                  properties:
                    hive.sql.query SELECT "i_item_sk", "i_brand_id", "i_brand"
FROM (SELECT "i_item_sk", "i_brand_id", "i_brand", "i_manager_id"
FROM "item") AS "t"
WHERE "i_manager_id" = 1 AND "i_item_sk" IS NOT NULL
                    hive.sql.query.fieldNames i_item_sk,i_brand_id,i_brand
                    hive.sql.query.fieldTypes bigint,int,string
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 196 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: i_item_sk (type: bigint), i_brand_id (type: int), i_brand (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 196 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: bigint)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: bigint)
                      Statistics: Num rows: 1 Data size: 196 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col1 (type: bigint)
                  1 _col0 (type: bigint)
                outputColumnNames: _col0, _col2, _col4, _col5
                Statistics: Num rows: 3 Data size: 409 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col2 (type: int)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col2 (type: int)
                  Statistics: Num rows: 3 Data size: 409 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: decimal(7,2)), _col4 (type: int), _col5 (type: string)
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col2 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col4, _col5, _col7, _col8
                Statistics: Num rows: 3 Data size: 449 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col0)
                  keys: _col4 (type: int), _col5 (type: string), _col7 (type: int), _col8 (type: int)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4
                  Statistics: Num rows: 3 Data size: 449 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: int), _col1 (type: string), _col2 (type: int), _col3 (type: int)
                    null sort order: zzzz
                    sort order: ++++
                    Map-reduce partition columns: _col0 (type: int), _col1 (type: string), _col2 (type: int), _col3 (type: int)
                    Statistics: Num rows: 3 Data size: 449 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col4 (type: decimal(17,2))
        Reducer 5 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: int), KEY._col1 (type: string), KEY._col2 (type: int), KEY._col3 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col1 (type: string), _col2 (type: int), _col3 (type: int), _col4 (type: decimal(17,2)), _col0 (type: int)
                  outputColumnNames: _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col4 (type: decimal(17,2)), _col5 (type: int)
                    null sort order: az
                    sort order: -+
                    Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: string), _col2 (type: int), _col3 (type: int)
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey1 (type: int), VALUE._col0 (type: string), VALUE._col1 (type: int), VALUE._col2 (type: int), KEY.reducesinkkey0 (type: decimal(17,2))
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 149 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Union 2 
            Vertex: Union 2

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

