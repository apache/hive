PREHOOK: query: explain cbo
select  asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing
from(select *
     from (select item_sk,rank() over (order by rank_col asc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col 
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V1)V11
     where rnk  < 11) asceding,
    (select *
     from (select item_sk,rank() over (order by rank_col desc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V2)V21
     where rnk  < 11) descending,
item i1,
item i2
where asceding.rnk = descending.rnk 
  and i1.i_item_sk=asceding.item_sk
  and i2.i_item_sk=descending.item_sk
order by asceding.rnk
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain cbo
select  asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing
from(select *
     from (select item_sk,rank() over (order by rank_col asc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col 
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V1)V11
     where rnk  < 11) asceding,
    (select *
     from (select item_sk,rank() over (order by rank_col desc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V2)V21
     where rnk  < 11) descending,
item i1,
item i2
where asceding.rnk = descending.rnk 
  and i1.i_item_sk=asceding.item_sk
  and i2.i_item_sk=descending.item_sk
order by asceding.rnk
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveSortLimit(sort0=[$0], dir0=[ASC], fetch=[100])
  HiveProject(rnk=[$3], best_performing=[$1], worst_performing=[$7])
    HiveJoin(condition=[=($3, $5)], joinType=[inner], algorithm=[none], cost=[not available])
      HiveJoin(condition=[=($0, $2)], joinType=[inner], algorithm=[none], cost=[not available])
        HiveProject(i_item_sk=[$0], i_product_name=[$1])
          HiveJdbcConverter(convention=[JDBC.POSTGRES])
            JdbcFilter(condition=[IS NOT NULL($0)])
              JdbcProject(i_item_sk=[$0], i_product_name=[$21])
                JdbcHiveTableScan(table=[[default, item]], table:alias=[i1])
        HiveProject(item_sk=[$0], rank_window_0=[$1])
          HiveFilter(condition=[AND(<($1, 11), IS NOT NULL($0))])
            HiveProject(item_sk=[$0], rank_window_0=[rank() OVER (PARTITION BY 0 ORDER BY $1 NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
              HiveProject($f0=[$0], $f1=[$1], rank_col=[$2])
                HiveJdbcConverter(convention=[JDBC.POSTGRES])
                  JdbcJoin(condition=[>($1, *(0.9:DECIMAL(1, 1), $2))], joinType=[inner])
                    JdbcProject($f0=[$0], $f1=[CAST(/($1, $2)):DECIMAL(11, 6)])
                      JdbcFilter(condition=[IS NOT NULL(CAST(/($1, $2)):DECIMAL(11, 6))])
                        JdbcAggregate(group=[{0}], agg#0=[sum($2)], agg#1=[count($2)])
                          JdbcFilter(condition=[=($1, 410)])
                            JdbcProject(ss_item_sk=[$2], ss_store_sk=[$7], ss_net_profit=[$22])
                              JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[ss1])
                    JdbcProject(rank_col=[CAST(/($1, $2)):DECIMAL(11, 6)])
                      JdbcFilter(condition=[IS NOT NULL(CAST(/($1, $2)):DECIMAL(11, 6))])
                        JdbcAggregate(group=[{0}], agg#0=[sum($1)], agg#1=[count($1)])
                          JdbcProject($f0=[true], $f1=[$2])
                            JdbcFilter(condition=[AND(=($1, 410), IS NULL($0))])
                              JdbcProject(ss_hdemo_sk=[$5], ss_store_sk=[$7], ss_net_profit=[$22])
                                JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
      HiveProject(item_sk=[$0], rank_window_0=[$1], i_item_sk=[$2], i_product_name=[$3])
        HiveJoin(condition=[=($2, $0)], joinType=[inner], algorithm=[none], cost=[not available])
          HiveProject(item_sk=[$0], rank_window_0=[$1])
            HiveFilter(condition=[AND(<($1, 11), IS NOT NULL($0))])
              HiveProject(item_sk=[$0], rank_window_0=[rank() OVER (PARTITION BY 0 ORDER BY $1 DESC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
                HiveProject($f0=[$0], $f1=[$1], rank_col=[$2])
                  HiveJdbcConverter(convention=[JDBC.POSTGRES])
                    JdbcJoin(condition=[>($1, *(0.9:DECIMAL(1, 1), $2))], joinType=[inner])
                      JdbcProject($f0=[$0], $f1=[CAST(/($1, $2)):DECIMAL(11, 6)])
                        JdbcFilter(condition=[IS NOT NULL(CAST(/($1, $2)):DECIMAL(11, 6))])
                          JdbcAggregate(group=[{0}], agg#0=[sum($2)], agg#1=[count($2)])
                            JdbcFilter(condition=[=($1, 410)])
                              JdbcProject(ss_item_sk=[$2], ss_store_sk=[$7], ss_net_profit=[$22])
                                JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[ss1])
                      JdbcProject(rank_col=[CAST(/($1, $2)):DECIMAL(11, 6)])
                        JdbcFilter(condition=[IS NOT NULL(CAST(/($1, $2)):DECIMAL(11, 6))])
                          JdbcAggregate(group=[{0}], agg#0=[sum($1)], agg#1=[count($1)])
                            JdbcProject($f0=[true], $f1=[$2])
                              JdbcFilter(condition=[AND(=($1, 410), IS NULL($0))])
                                JdbcProject(ss_hdemo_sk=[$5], ss_store_sk=[$7], ss_net_profit=[$22])
                                  JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
          HiveProject(i_item_sk=[$0], i_product_name=[$1])
            HiveJdbcConverter(convention=[JDBC.POSTGRES])
              JdbcFilter(condition=[IS NOT NULL($0)])
                JdbcProject(i_item_sk=[$0], i_product_name=[$21])
                  JdbcHiveTableScan(table=[[default, item]], table:alias=[i2])

