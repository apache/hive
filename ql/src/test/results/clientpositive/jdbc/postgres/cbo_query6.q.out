Warning: Map Join MAPJOIN[51][bigTable=?] in task 'Map 2' is a cross product
PREHOOK: query: explain cbo
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain cbo
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveSortLimit(sort0=[$1], dir0=[ASC], fetch=[100])
  HiveProject($f0=[$0], $f1=[$1])
    HiveFilter(condition=[>=($1, 10)])
      HiveAggregate(group=[{13}], agg#0=[count()])
        HiveJoin(condition=[=($14, $6)], joinType=[inner], algorithm=[none], cost=[not available])
          HiveJoin(condition=[=($5, $7)], joinType=[inner], algorithm=[none], cost=[not available])
            HiveJoin(condition=[=($4, $0)], joinType=[inner], algorithm=[none], cost=[not available])
              HiveJoin(condition=[true], joinType=[inner], algorithm=[none], cost=[not available])
                HiveProject(d_date_sk=[$0], d_month_seq=[$1], d_month_seq0=[$2])
                  HiveJdbcConverter(convention=[JDBC.POSTGRES])
                    JdbcJoin(condition=[=($1, $2)], joinType=[inner])
                      JdbcProject(d_date_sk=[$0], d_month_seq=[$1])
                        JdbcFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($1))])
                          JdbcProject(d_date_sk=[$0], d_month_seq=[$3])
                            JdbcHiveTableScan(table=[[default, date_dim]], table:alias=[d])
                      JdbcAggregate(group=[{0}])
                        JdbcFilter(condition=[AND(=($1, 2000), =($2, 2), IS NOT NULL($0))])
                          JdbcProject(d_month_seq=[$3], d_year=[$6], d_moy=[$8])
                            JdbcHiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
                HiveProject(cnt=[$0])
                  HiveFilter(condition=[sq_count_check($0)])
                    HiveProject(cnt=[$0])
                      HiveJdbcConverter(convention=[JDBC.POSTGRES])
                        JdbcAggregate(group=[{}], cnt=[COUNT()])
                          JdbcAggregate(group=[{0}])
                            JdbcFilter(condition=[AND(=($1, 2000), =($2, 2))])
                              JdbcProject(d_month_seq=[$3], d_year=[$6], d_moy=[$8])
                                JdbcHiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
              HiveProject(ss_sold_date_sk=[$0], ss_item_sk=[$1], ss_customer_sk=[$2])
                HiveJdbcConverter(convention=[JDBC.POSTGRES])
                  JdbcFilter(condition=[AND(IS NOT NULL($2), IS NOT NULL($0), IS NOT NULL($1))])
                    JdbcProject(ss_sold_date_sk=[$0], ss_item_sk=[$2], ss_customer_sk=[$3])
                      JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[s])
            HiveProject(i_item_sk=[$0], i_current_price=[$1], i_category=[$2], i_category0=[$3], *=[$4])
              HiveJdbcConverter(convention=[JDBC.POSTGRES])
                JdbcJoin(condition=[AND(=($3, $2), >($1, $4))], joinType=[inner])
                  JdbcProject(i_item_sk=[$0], i_current_price=[$1], i_category=[$2])
                    JdbcFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($2), IS NOT NULL($1))])
                      JdbcProject(i_item_sk=[$0], i_current_price=[$5], i_category=[$12])
                        JdbcHiveTableScan(table=[[default, item]], table:alias=[i])
                  JdbcProject(i_category=[$0], *=[*(1.2:DECIMAL(2, 1), CAST(CAST(/($1, $2)):DECIMAL(11, 6)):DECIMAL(16, 6))])
                    JdbcFilter(condition=[IS NOT NULL(CAST(CAST(/($1, $2)):DECIMAL(11, 6)):DECIMAL(16, 6))])
                      JdbcAggregate(group=[{1}], agg#0=[sum($0)], agg#1=[count($0)])
                        JdbcFilter(condition=[IS NOT NULL($1)])
                          JdbcProject(i_current_price=[$5], i_category=[$12])
                            JdbcHiveTableScan(table=[[default, item]], table:alias=[j])
          HiveProject(ca_address_sk=[$0], ca_state=[$1], c_customer_sk=[$2], c_current_addr_sk=[$3])
            HiveJdbcConverter(convention=[JDBC.POSTGRES])
              JdbcJoin(condition=[=($0, $3)], joinType=[inner])
                JdbcProject(ca_address_sk=[$0], ca_state=[$1])
                  JdbcFilter(condition=[IS NOT NULL($0)])
                    JdbcProject(ca_address_sk=[$0], ca_state=[$8])
                      JdbcHiveTableScan(table=[[default, customer_address]], table:alias=[a])
                JdbcProject(c_customer_sk=[$0], c_current_addr_sk=[$1])
                  JdbcFilter(condition=[AND(IS NOT NULL($1), IS NOT NULL($0))])
                    JdbcProject(c_customer_sk=[$0], c_current_addr_sk=[$4])
                      JdbcHiveTableScan(table=[[default, customer]], table:alias=[c])

