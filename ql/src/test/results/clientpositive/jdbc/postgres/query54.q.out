Warning: Shuffle Join MERGEJOIN[69][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
Warning: Shuffle Join MERGEJOIN[71][tables = [$hdt$_3, $hdt$_4]] in Stage 'Reducer 12' is a cross product
Warning: Shuffle Join MERGEJOIN[72][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3]] in Stage 'Reducer 4' is a cross product
PREHOOK: query: explain
with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   web_sales
         ) cs_or_ws_sales,
         item,
         date_dim,
         customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Jewelry'
         and i_class = 'consignment'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 3
         and d_year = 1999
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        store_sales,
        customer_address,
        store,
        date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   date_dim where d_year = 1999 and d_moy = 3)
                           and  (select distinct d_month_seq+3
                                 from   date_dim where d_year = 1999 and d_moy = 3)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   web_sales
         ) cs_or_ws_sales,
         item,
         date_dim,
         customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Jewelry'
         and i_class = 'consignment'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 3
         and d_year = 1999
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        store_sales,
        customer_address,
        store,
        date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   date_dim where d_year = 1999 and d_moy = 3)
                           and  (select distinct d_month_seq+3
                                 from   date_dim where d_year = 1999 and d_moy = 3)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 12 <- Map 11 (XPROD_EDGE), Map 13 (XPROD_EDGE)
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 9 (XPROD_EDGE)
        Reducer 3 <- Map 10 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 12 (XPROD_EDGE), Reducer 3 (XPROD_EDGE)
        Reducer 5 <- Map 14 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
        Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
        Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
        Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: date_dim
                  properties:
                    hive.sql.query SELECT "t1"."d_date_sk", "t1"."d_month_seq", "t5"."$f0"
FROM (SELECT "d_date_sk", "d_month_seq"
FROM (SELECT "d_date_sk", "d_month_seq"
FROM "date_dim") AS "t"
WHERE "d_date_sk" IS NOT NULL AND "d_month_seq" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_month_seq" + 1 AS "$f0"
FROM (SELECT "d_month_seq", "d_year", "d_moy"
FROM "date_dim") AS "t2"
WHERE "d_year" = 1999 AND ("d_moy" = 3 AND "d_month_seq" IS NOT NULL)
GROUP BY "d_month_seq" + 1) AS "t5" ON "t1"."d_month_seq" >= "t5"."$f0"
                    hive.sql.query.fieldNames d_date_sk,d_month_seq,$f0
                    hive.sql.query.fieldTypes int,int,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: d_date_sk (type: int), d_month_seq (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: int), _col1 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 10 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "ss_sold_date_sk", "ss_customer_sk", "ss_ext_sales_price"
FROM (SELECT "ss_sold_date_sk", "ss_customer_sk", "ss_ext_sales_price"
FROM "store_sales") AS "t"
WHERE "ss_customer_sk" IS NOT NULL AND "ss_sold_date_sk" IS NOT NULL
                    hive.sql.query.fieldNames ss_sold_date_sk,ss_customer_sk,ss_ext_sales_price
                    hive.sql.query.fieldTypes int,int,decimal(7,2)
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 120 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ss_sold_date_sk (type: int), ss_customer_sk (type: int), ss_ext_sales_price (type: decimal(7,2))
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 120 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 120 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: int), _col2 (type: decimal(7,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 11 
            Map Operator Tree:
                TableScan
                  alias: date_dim
                  properties:
                    hive.sql.query SELECT COUNT(*) AS "cnt"
FROM (SELECT "d_month_seq" + 1 AS "$f0"
FROM (SELECT "d_month_seq", "d_year", "d_moy"
FROM "date_dim") AS "t"
WHERE "d_year" = 1999 AND "d_moy" = 3
GROUP BY "d_month_seq" + 1) AS "t2"
                    hive.sql.query.fieldNames cnt
                    hive.sql.query.fieldTypes bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: cnt (type: bigint)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Filter Operator
                      predicate: sq_count_check(_col0) (type: boolean)
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      Select Operator
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          null sort order: 
                          sort order: 
                          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 13 
            Map Operator Tree:
                TableScan
                  alias: date_dim
                  properties:
                    hive.sql.query SELECT "d_month_seq" + 3 AS "$f0"
FROM (SELECT "d_month_seq", "d_year", "d_moy"
FROM "date_dim") AS "t"
WHERE "d_year" = 1999 AND ("d_moy" = 3 AND "d_month_seq" IS NOT NULL)
GROUP BY "d_month_seq" + 3
                    hive.sql.query.fieldNames $f0
                    hive.sql.query.fieldTypes int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: $f0 (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 14 
            Map Operator Tree:
                TableScan
                  alias: customer_address
                  properties:
                    hive.sql.query SELECT "t1"."ca_address_sk", "t1"."ca_county", "t1"."ca_state", "t4"."s_county", "t4"."s_state", "t22"."c_customer_sk", "t22"."c_current_addr_sk"
FROM (SELECT "ca_address_sk", "ca_county", "ca_state"
FROM (SELECT "ca_address_sk", "ca_county", "ca_state"
FROM "customer_address") AS "t"
WHERE "ca_address_sk" IS NOT NULL AND ("ca_county" IS NOT NULL AND "ca_state" IS NOT NULL)) AS "t1"
INNER JOIN (SELECT "s_county", "s_state"
FROM (SELECT "s_county", "s_state"
FROM "store") AS "t2"
WHERE "s_county" IS NOT NULL AND "s_state" IS NOT NULL) AS "t4" ON "t1"."ca_county" = "t4"."s_county" AND "t1"."ca_state" = "t4"."s_state"
INNER JOIN (SELECT "t21"."c_customer_sk", "t21"."c_current_addr_sk"
FROM (SELECT "cs_sold_date_sk", "cs_bill_customer_sk", "cs_item_sk"
FROM (SELECT "cs_sold_date_sk", "cs_bill_customer_sk", "cs_item_sk"
FROM (SELECT "cs_sold_date_sk", "cs_bill_customer_sk", "cs_item_sk"
FROM "catalog_sales") AS "t5"
WHERE "cs_item_sk" IS NOT NULL AND ("cs_sold_date_sk" IS NOT NULL AND "cs_bill_customer_sk" IS NOT NULL)
UNION ALL
SELECT "ws_sold_date_sk" AS "sold_date_sk", "ws_bill_customer_sk" AS "customer_sk", "ws_item_sk" AS "item_sk"
FROM (SELECT "ws_sold_date_sk", "ws_item_sk", "ws_bill_customer_sk"
FROM "web_sales") AS "t8"
WHERE "ws_item_sk" IS NOT NULL AND ("ws_sold_date_sk" IS NOT NULL AND "ws_bill_customer_sk" IS NOT NULL)) AS "t11") AS "t12"
INNER JOIN (SELECT "i_item_sk"
FROM (SELECT "i_item_sk", "i_class", "i_category"
FROM "item") AS "t13"
WHERE "i_category" = 'Jewelry' AND ("i_class" = 'consignment' AND "i_item_sk" IS NOT NULL)) AS "t15" ON "t12"."cs_item_sk" = "t15"."i_item_sk"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "date_dim") AS "t16"
WHERE "d_moy" = 3 AND ("d_year" = 1999 AND "d_date_sk" IS NOT NULL)) AS "t18" ON "t12"."cs_sold_date_sk" = "t18"."d_date_sk"
INNER JOIN (SELECT "c_customer_sk", "c_current_addr_sk"
FROM (SELECT "c_customer_sk", "c_current_addr_sk"
FROM "customer") AS "t19"
WHERE "c_customer_sk" IS NOT NULL AND "c_current_addr_sk" IS NOT NULL) AS "t21" ON "t12"."cs_bill_customer_sk" = "t21"."c_customer_sk"
GROUP BY "t21"."c_customer_sk", "t21"."c_current_addr_sk") AS "t22" ON "t1"."ca_address_sk" = "t22"."c_current_addr_sk"
                    hive.sql.query.fieldNames ca_address_sk,ca_county,ca_state,s_county,s_state,c_customer_sk,c_current_addr_sk
                    hive.sql.query.fieldTypes int,string,string,string,string,int,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: c_customer_sk (type: int)
                    outputColumnNames: _col5
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col5 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col5 (type: int)
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 9 
            Map Operator Tree:
                TableScan
                  alias: date_dim
                  properties:
                    hive.sql.query SELECT COUNT(*) AS "cnt"
FROM (SELECT "d_month_seq" + 3 AS "$f0"
FROM (SELECT "d_month_seq", "d_year", "d_moy"
FROM "date_dim") AS "t"
WHERE "d_year" = 1999 AND "d_moy" = 3
GROUP BY "d_month_seq" + 3) AS "t2"
                    hive.sql.query.fieldNames cnt
                    hive.sql.query.fieldTypes bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: cnt (type: bigint)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Filter Operator
                      predicate: sq_count_check(_col0) (type: boolean)
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      Select Operator
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          null sort order: 
                          sort order: 
                          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 12 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col1
                Statistics: Num rows: 1 Data size: 13 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 1 Data size: 13 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: int)
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 17 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col0 (type: int)
                  Statistics: Num rows: 1 Data size: 17 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: int)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col1, _col5, _col6
                Statistics: Num rows: 1 Data size: 18 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 1 Data size: 18 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: int), _col5 (type: int), _col6 (type: decimal(7,2))
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col1, _col5, _col6, _col8
                residual filter predicates: {(_col1 <= _col8)}
                Statistics: Num rows: 1 Data size: 32 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col5 (type: int)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col5 (type: int)
                  Statistics: Num rows: 1 Data size: 32 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col6 (type: decimal(7,2))
        Reducer 5 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col5 (type: int)
                  1 _col5 (type: int)
                outputColumnNames: _col6, _col14
                Statistics: Num rows: 1 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col6)
                  keys: _col14 (type: int)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: int)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: int)
                    Statistics: Num rows: 1 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: decimal(17,2))
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                Top N Key Operator
                  sort order: +
                  keys: UDFToInteger((_col1 / 50)) (type: int)
                  null sort order: z
                  Statistics: Num rows: 1 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                  top n: 100
                  Select Operator
                    expressions: UDFToInteger((_col1 / 50)) (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count()
                      keys: _col0 (type: int)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 1 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col1 (type: bigint)
        Reducer 7 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                Top N Key Operator
                  sort order: ++
                  keys: _col0 (type: int), _col1 (type: bigint)
                  null sort order: zz
                  Statistics: Num rows: 1 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                  top n: 100
                  Select Operator
                    expressions: _col0 (type: int), _col1 (type: bigint), (_col0 * 50) (type: int)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int), _col1 (type: bigint)
                      null sort order: zz
                      sort order: ++
                      Statistics: Num rows: 1 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col2 (type: int)
        Reducer 8 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), KEY.reducesinkkey1 (type: bigint), VALUE._col0 (type: int)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 1 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 35 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

