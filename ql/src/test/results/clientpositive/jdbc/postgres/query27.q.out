PREHOOK: query: explain
select  i_item_id,
        s_state, grouping(s_state) g_state,
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4
 from store_sales, customer_demographics, date_dim, store, item
 where ss_sold_date_sk = d_date_sk and
       ss_item_sk = i_item_sk and
       ss_store_sk = s_store_sk and
       ss_cdemo_sk = cd_demo_sk and
       cd_gender = 'M' and
       cd_marital_status = 'U' and
       cd_education_status = '2 yr Degree' and
       d_year = 2001 and
       s_state in ('SD','FL', 'MI', 'LA', 'MO', 'SC')
 group by rollup (i_item_id, s_state)
 order by i_item_id
         ,s_state
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
select  i_item_id,
        s_state, grouping(s_state) g_state,
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4
 from store_sales, customer_demographics, date_dim, store, item
 where ss_sold_date_sk = d_date_sk and
       ss_item_sk = i_item_sk and
       ss_store_sk = s_store_sk and
       ss_cdemo_sk = cd_demo_sk and
       cd_gender = 'M' and
       cd_marital_status = 'U' and
       cd_education_status = '2 yr Degree' and
       d_year = 2001 and
       s_state in ('SD','FL', 'MI', 'LA', 'MO', 'SC')
 group by rollup (i_item_id, s_state)
 order by i_item_id
         ,s_state
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "t13"."i_item_id" AS "$f0", "t10"."s_state" AS "$f1", "t1"."ss_quantity" AS "$f2", "t1"."ss_list_price" AS "$f3", "t1"."ss_coupon_amt" AS "$f4", "t1"."ss_sales_price" AS "$f5"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk", "ss_cdemo_sk", "ss_store_sk", "ss_quantity", "ss_list_price", "ss_sales_price", "ss_coupon_amt"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk", "ss_cdemo_sk", "ss_store_sk", "ss_quantity", "ss_list_price", "ss_sales_price", "ss_coupon_amt"
FROM "store_sales") AS "t"
WHERE "ss_cdemo_sk" IS NOT NULL AND "ss_sold_date_sk" IS NOT NULL AND ("ss_store_sk" IS NOT NULL AND "ss_item_sk" IS NOT NULL)) AS "t1"
INNER JOIN (SELECT "cd_demo_sk"
FROM (SELECT "cd_demo_sk", "cd_gender", "cd_marital_status", "cd_education_status"
FROM "customer_demographics") AS "t2"
WHERE "cd_gender" = 'M' AND "cd_marital_status" = 'U' AND ("cd_education_status" = '2 yr Degree' AND "cd_demo_sk" IS NOT NULL)) AS "t4" ON "t1"."ss_cdemo_sk" = "t4"."cd_demo_sk"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year"
FROM "date_dim") AS "t5"
WHERE "d_year" = 2001 AND "d_date_sk" IS NOT NULL) AS "t7" ON "t1"."ss_sold_date_sk" = "t7"."d_date_sk"
INNER JOIN (SELECT "s_store_sk", "s_state"
FROM (SELECT "s_store_sk", "s_state"
FROM "store") AS "t8"
WHERE "s_state" IN ('SD', 'FL', 'MI', 'LA', 'MO', 'SC') AND "s_store_sk" IS NOT NULL) AS "t10" ON "t1"."ss_store_sk" = "t10"."s_store_sk"
INNER JOIN (SELECT "i_item_sk", "i_item_id"
FROM (SELECT "i_item_sk", "i_item_id"
FROM "item") AS "t11"
WHERE "i_item_sk" IS NOT NULL) AS "t13" ON "t1"."ss_item_sk" = "t13"."i_item_sk"
                    hive.sql.query.fieldNames $f0,$f1,$f2,$f3,$f4,$f5
                    hive.sql.query.fieldTypes string,string,int,decimal(7,2),decimal(7,2),decimal(7,2)
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 708 Basic stats: COMPLETE Column stats: NONE
                  Top N Key Operator
                    sort order: ++
                    keys: $f0 (type: string), $f1 (type: string)
                    null sort order: zz
                    Statistics: Num rows: 1 Data size: 708 Basic stats: COMPLETE Column stats: NONE
                    top n: 100
                    Select Operator
                      expressions: $f0 (type: string), $f1 (type: string), $f2 (type: int), $f3 (type: decimal(7,2)), $f4 (type: decimal(7,2)), $f5 (type: decimal(7,2))
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      Statistics: Num rows: 1 Data size: 708 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        aggregations: sum(_col2), count(_col2), sum(_col3), count(_col3), sum(_col4), count(_col4), sum(_col5), count(_col5)
                        keys: _col0 (type: string), _col1 (type: string), 0L (type: bigint)
                        grouping sets: 0, 1, 3
                        minReductionHashAggr: 0.99
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10
                        Statistics: Num rows: 3 Data size: 2124 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                          null sort order: zzz
                          sort order: +++
                          Map-reduce partition columns: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                          Statistics: Num rows: 3 Data size: 2124 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col3 (type: bigint), _col4 (type: bigint), _col5 (type: decimal(17,2)), _col6 (type: bigint), _col7 (type: decimal(17,2)), _col8 (type: bigint), _col9 (type: decimal(17,2)), _col10 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1), sum(VALUE._col2), count(VALUE._col3), sum(VALUE._col4), count(VALUE._col5), sum(VALUE._col6), count(VALUE._col7)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10
                Statistics: Num rows: 1 Data size: 708 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), grouping(_col2, 0L) (type: bigint), (UDFToDouble(_col3) / _col4) (type: double), CAST( (_col5 / _col6) AS decimal(11,6)) (type: decimal(11,6)), CAST( (_col7 / _col8) AS decimal(11,6)) (type: decimal(11,6)), CAST( (_col9 / _col10) AS decimal(11,6)) (type: decimal(11,6))
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                  Statistics: Num rows: 1 Data size: 708 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: string)
                    null sort order: zz
                    sort order: ++
                    Statistics: Num rows: 1 Data size: 708 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col2 (type: bigint), _col3 (type: double), _col4 (type: decimal(11,6)), _col5 (type: decimal(11,6)), _col6 (type: decimal(11,6))
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: bigint), VALUE._col1 (type: double), VALUE._col2 (type: decimal(11,6)), VALUE._col3 (type: decimal(11,6)), VALUE._col4 (type: decimal(11,6))
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                Statistics: Num rows: 1 Data size: 708 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 708 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 708 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

