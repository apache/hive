Warning: Shuffle Join MERGEJOIN[79][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
Warning: Shuffle Join MERGEJOIN[80][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 3' is a cross product
Warning: Shuffle Join MERGEJOIN[81][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3]] in Stage 'Reducer 4' is a cross product
Warning: Shuffle Join MERGEJOIN[82][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[83][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[84][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6]] in Stage 'Reducer 7' is a cross product
Warning: Shuffle Join MERGEJOIN[85][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6, $hdt$_7]] in Stage 'Reducer 8' is a cross product
Warning: Shuffle Join MERGEJOIN[86][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6, $hdt$_7, $hdt$_8]] in Stage 'Reducer 9' is a cross product
Warning: Shuffle Join MERGEJOIN[87][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6, $hdt$_7, $hdt$_8, $hdt$_9]] in Stage 'Reducer 10' is a cross product
Warning: Shuffle Join MERGEJOIN[88][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6, $hdt$_7, $hdt$_8, $hdt$_9, $hdt$_10]] in Stage 'Reducer 11' is a cross product
Warning: Shuffle Join MERGEJOIN[89][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6, $hdt$_7, $hdt$_8, $hdt$_9, $hdt$_10, $hdt$_11]] in Stage 'Reducer 12' is a cross product
Warning: Shuffle Join MERGEJOIN[90][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6, $hdt$_7, $hdt$_8, $hdt$_9, $hdt$_10, $hdt$_11, $hdt$_12]] in Stage 'Reducer 13' is a cross product
Warning: Shuffle Join MERGEJOIN[91][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6, $hdt$_7, $hdt$_8, $hdt$_9, $hdt$_10, $hdt$_11, $hdt$_12, $hdt$_13]] in Stage 'Reducer 14' is a cross product
Warning: Shuffle Join MERGEJOIN[92][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6, $hdt$_7, $hdt$_8, $hdt$_9, $hdt$_10, $hdt$_11, $hdt$_12, $hdt$_13, $hdt$_14]] in Stage 'Reducer 15' is a cross product
Warning: Shuffle Join MERGEJOIN[93][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6, $hdt$_7, $hdt$_8, $hdt$_9, $hdt$_10, $hdt$_11, $hdt$_12, $hdt$_13, $hdt$_14, $hdt$_15]] in Stage 'Reducer 16' is a cross product
PREHOOK: query: explain cbo
select case when (select count(*) 
                  from store_sales 
                  where ss_quantity between 1 and 20) > 409437
            then (select avg(ss_ext_list_price) 
                  from store_sales 
                  where ss_quantity between 1 and 20) 
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 1 and 20) end bucket1 ,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 21 and 40) > 4595804
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 21 and 40) 
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 21 and 40) end bucket2,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 41 and 60) > 7887297
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 41 and 60)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 41 and 60) end bucket3,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 61 and 80) > 10872978
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 61 and 80)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 61 and 80) end bucket4,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 81 and 100) > 43571537
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 81 and 100)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 81 and 100) end bucket5
from reason
where r_reason_sk = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@reason
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain cbo
select case when (select count(*) 
                  from store_sales 
                  where ss_quantity between 1 and 20) > 409437
            then (select avg(ss_ext_list_price) 
                  from store_sales 
                  where ss_quantity between 1 and 20) 
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 1 and 20) end bucket1 ,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 21 and 40) > 4595804
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 21 and 40) 
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 21 and 40) end bucket2,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 41 and 60) > 7887297
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 41 and 60)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 41 and 60) end bucket3,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 61 and 80) > 10872978
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 61 and 80)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 61 and 80) end bucket4,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 81 and 100) > 43571537
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 81 and 100)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 81 and 100) end bucket5
from reason
where r_reason_sk = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@reason
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveProject(bucket1=[CASE($1, $2, $3)], bucket2=[CASE($4, $5, $6)], bucket3=[CASE($7, $8, $9)], bucket4=[CASE($10, $11, $12)], bucket5=[CASE($13, $14, $15)])
  HiveJoin(condition=[true], joinType=[left], algorithm=[none], cost=[not available])
    HiveJoin(condition=[true], joinType=[left], algorithm=[none], cost=[not available])
      HiveJoin(condition=[true], joinType=[left], algorithm=[none], cost=[not available])
        HiveJoin(condition=[true], joinType=[left], algorithm=[none], cost=[not available])
          HiveJoin(condition=[true], joinType=[left], algorithm=[none], cost=[not available])
            HiveJoin(condition=[true], joinType=[left], algorithm=[none], cost=[not available])
              HiveJoin(condition=[true], joinType=[left], algorithm=[none], cost=[not available])
                HiveJoin(condition=[true], joinType=[left], algorithm=[none], cost=[not available])
                  HiveJoin(condition=[true], joinType=[left], algorithm=[none], cost=[not available])
                    HiveJoin(condition=[true], joinType=[left], algorithm=[none], cost=[not available])
                      HiveJoin(condition=[true], joinType=[left], algorithm=[none], cost=[not available])
                        HiveJoin(condition=[true], joinType=[left], algorithm=[none], cost=[not available])
                          HiveJoin(condition=[true], joinType=[left], algorithm=[none], cost=[not available])
                            HiveJoin(condition=[true], joinType=[left], algorithm=[none], cost=[not available])
                              HiveJoin(condition=[true], joinType=[left], algorithm=[none], cost=[not available])
                                HiveProject(r_reason_sk=[$0])
                                  HiveJdbcConverter(convention=[JDBC.POSTGRES])
                                    JdbcFilter(condition=[=($0, 1)])
                                      JdbcProject(r_reason_sk=[$0])
                                        JdbcHiveTableScan(table=[[default, reason]], table:alias=[reason])
                                HiveProject(>=[$0])
                                  HiveJdbcConverter(convention=[JDBC.POSTGRES])
                                    JdbcProject(>=[>($0, 409437)])
                                      JdbcAggregate(group=[{}], agg#0=[count()])
                                        JdbcFilter(condition=[BETWEEN(false, $0, 1, 20)])
                                          JdbcProject(ss_quantity=[$10])
                                            JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
                              HiveProject(_o__c0=[$0])
                                HiveJdbcConverter(convention=[JDBC.POSTGRES])
                                  JdbcProject(_o__c0=[CAST(/($0, $1)):DECIMAL(11, 6)])
                                    JdbcAggregate(group=[{}], agg#0=[sum($1)], agg#1=[count($1)])
                                      JdbcFilter(condition=[BETWEEN(false, $0, 1, 20)])
                                        JdbcProject(ss_quantity=[$10], ss_ext_list_price=[$17])
                                          JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
                            HiveProject(_o__c0=[$0])
                              HiveJdbcConverter(convention=[JDBC.POSTGRES])
                                JdbcProject(_o__c0=[CAST(/($0, $1)):DECIMAL(11, 6)])
                                  JdbcAggregate(group=[{}], agg#0=[sum($1)], agg#1=[count($1)])
                                    JdbcFilter(condition=[BETWEEN(false, $0, 1, 20)])
                                      JdbcProject(ss_quantity=[$10], ss_net_paid_inc_tax=[$21])
                                        JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
                          HiveProject(>=[$0])
                            HiveJdbcConverter(convention=[JDBC.POSTGRES])
                              JdbcProject(>=[>($0, 4595804)])
                                JdbcAggregate(group=[{}], agg#0=[count()])
                                  JdbcFilter(condition=[BETWEEN(false, $0, 21, 40)])
                                    JdbcProject(ss_quantity=[$10])
                                      JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
                        HiveProject(_o__c0=[$0])
                          HiveJdbcConverter(convention=[JDBC.POSTGRES])
                            JdbcProject(_o__c0=[CAST(/($0, $1)):DECIMAL(11, 6)])
                              JdbcAggregate(group=[{}], agg#0=[sum($1)], agg#1=[count($1)])
                                JdbcFilter(condition=[BETWEEN(false, $0, 21, 40)])
                                  JdbcProject(ss_quantity=[$10], ss_ext_list_price=[$17])
                                    JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
                      HiveProject(_o__c0=[$0])
                        HiveJdbcConverter(convention=[JDBC.POSTGRES])
                          JdbcProject(_o__c0=[CAST(/($0, $1)):DECIMAL(11, 6)])
                            JdbcAggregate(group=[{}], agg#0=[sum($1)], agg#1=[count($1)])
                              JdbcFilter(condition=[BETWEEN(false, $0, 21, 40)])
                                JdbcProject(ss_quantity=[$10], ss_net_paid_inc_tax=[$21])
                                  JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
                    HiveProject(>=[$0])
                      HiveJdbcConverter(convention=[JDBC.POSTGRES])
                        JdbcProject(>=[>($0, 7887297)])
                          JdbcAggregate(group=[{}], agg#0=[count()])
                            JdbcFilter(condition=[BETWEEN(false, $0, 41, 60)])
                              JdbcProject(ss_quantity=[$10])
                                JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
                  HiveProject(_o__c0=[$0])
                    HiveJdbcConverter(convention=[JDBC.POSTGRES])
                      JdbcProject(_o__c0=[CAST(/($0, $1)):DECIMAL(11, 6)])
                        JdbcAggregate(group=[{}], agg#0=[sum($1)], agg#1=[count($1)])
                          JdbcFilter(condition=[BETWEEN(false, $0, 41, 60)])
                            JdbcProject(ss_quantity=[$10], ss_ext_list_price=[$17])
                              JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
                HiveProject(_o__c0=[$0])
                  HiveJdbcConverter(convention=[JDBC.POSTGRES])
                    JdbcProject(_o__c0=[CAST(/($0, $1)):DECIMAL(11, 6)])
                      JdbcAggregate(group=[{}], agg#0=[sum($1)], agg#1=[count($1)])
                        JdbcFilter(condition=[BETWEEN(false, $0, 41, 60)])
                          JdbcProject(ss_quantity=[$10], ss_net_paid_inc_tax=[$21])
                            JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
              HiveProject(>=[$0])
                HiveJdbcConverter(convention=[JDBC.POSTGRES])
                  JdbcProject(>=[>($0, 10872978)])
                    JdbcAggregate(group=[{}], agg#0=[count()])
                      JdbcFilter(condition=[BETWEEN(false, $0, 61, 80)])
                        JdbcProject(ss_quantity=[$10])
                          JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
            HiveProject(_o__c0=[$0])
              HiveJdbcConverter(convention=[JDBC.POSTGRES])
                JdbcProject(_o__c0=[CAST(/($0, $1)):DECIMAL(11, 6)])
                  JdbcAggregate(group=[{}], agg#0=[sum($1)], agg#1=[count($1)])
                    JdbcFilter(condition=[BETWEEN(false, $0, 61, 80)])
                      JdbcProject(ss_quantity=[$10], ss_ext_list_price=[$17])
                        JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
          HiveProject(_o__c0=[$0])
            HiveJdbcConverter(convention=[JDBC.POSTGRES])
              JdbcProject(_o__c0=[CAST(/($0, $1)):DECIMAL(11, 6)])
                JdbcAggregate(group=[{}], agg#0=[sum($1)], agg#1=[count($1)])
                  JdbcFilter(condition=[BETWEEN(false, $0, 61, 80)])
                    JdbcProject(ss_quantity=[$10], ss_net_paid_inc_tax=[$21])
                      JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
        HiveProject(>=[$0])
          HiveJdbcConverter(convention=[JDBC.POSTGRES])
            JdbcProject(>=[>($0, 43571537)])
              JdbcAggregate(group=[{}], agg#0=[count()])
                JdbcFilter(condition=[BETWEEN(false, $0, 81, 100)])
                  JdbcProject(ss_quantity=[$10])
                    JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
      HiveProject(_o__c0=[$0])
        HiveJdbcConverter(convention=[JDBC.POSTGRES])
          JdbcProject(_o__c0=[CAST(/($0, $1)):DECIMAL(11, 6)])
            JdbcAggregate(group=[{}], agg#0=[sum($1)], agg#1=[count($1)])
              JdbcFilter(condition=[BETWEEN(false, $0, 81, 100)])
                JdbcProject(ss_quantity=[$10], ss_ext_list_price=[$17])
                  JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
    HiveProject(_o__c0=[$0])
      HiveJdbcConverter(convention=[JDBC.POSTGRES])
        JdbcProject(_o__c0=[CAST(/($0, $1)):DECIMAL(11, 6)])
          JdbcAggregate(group=[{}], agg#0=[sum($1)], agg#1=[count($1)])
            JdbcFilter(condition=[BETWEEN(false, $0, 81, 100)])
              JdbcProject(ss_quantity=[$10], ss_net_paid_inc_tax=[$21])
                JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])

