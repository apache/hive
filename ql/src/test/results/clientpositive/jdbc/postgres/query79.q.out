PREHOOK: query: explain
select 
  c_last_name,c_first_name,substr(s_city,1,30),ss_ticket_number,amt,profit
  from
   (select ss_ticket_number
          ,ss_customer_sk
          ,store.s_city
          ,sum(ss_coupon_amt) amt
          ,sum(ss_net_profit) profit
    from store_sales,date_dim,store,household_demographics
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and (household_demographics.hd_dep_count = 8 or household_demographics.hd_vehicle_count > 0)
    and date_dim.d_dow = 1
    and date_dim.d_year in (1998,1998+1,1998+2) 
    and store.s_number_employees between 200 and 295
    group by ss_ticket_number,ss_customer_sk,ss_addr_sk,store.s_city) ms,customer
    where ss_customer_sk = c_customer_sk
 order by c_last_name,c_first_name,substr(s_city,1,30), profit
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
select 
  c_last_name,c_first_name,substr(s_city,1,30),ss_ticket_number,amt,profit
  from
   (select ss_ticket_number
          ,ss_customer_sk
          ,store.s_city
          ,sum(ss_coupon_amt) amt
          ,sum(ss_net_profit) profit
    from store_sales,date_dim,store,household_demographics
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and (household_demographics.hd_dep_count = 8 or household_demographics.hd_vehicle_count > 0)
    and date_dim.d_dow = 1
    and date_dim.d_year in (1998,1998+1,1998+2) 
    and store.s_number_employees between 200 and 295
    group by ss_ticket_number,ss_customer_sk,ss_addr_sk,store.s_city) ms,customer
    where ss_customer_sk = c_customer_sk
 order by c_last_name,c_first_name,substr(s_city,1,30), profit
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "t1"."ss_customer_sk", "t1"."ss_addr_sk", "t1"."ss_ticket_number", "t10"."s_city", SUM("t1"."ss_coupon_amt") AS "$f4", SUM("t1"."ss_net_profit") AS "$f5"
FROM (SELECT "ss_sold_date_sk", "ss_customer_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_ticket_number", "ss_coupon_amt", "ss_net_profit"
FROM (SELECT "ss_sold_date_sk", "ss_customer_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_ticket_number", "ss_coupon_amt", "ss_net_profit"
FROM "store_sales") AS "t"
WHERE "ss_sold_date_sk" IS NOT NULL AND "ss_store_sk" IS NOT NULL AND ("ss_hdemo_sk" IS NOT NULL AND "ss_customer_sk" IS NOT NULL)) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year", "d_dow"
FROM "date_dim") AS "t2"
WHERE "d_year" IN (1998, 1999, 2000) AND ("d_dow" = 1 AND "d_date_sk" IS NOT NULL)) AS "t4" ON "t1"."ss_sold_date_sk" = "t4"."d_date_sk"
INNER JOIN (SELECT "hd_demo_sk"
FROM (SELECT "hd_demo_sk", "hd_dep_count", "hd_vehicle_count"
FROM "household_demographics") AS "t5"
WHERE ("hd_dep_count" = 8 OR "hd_vehicle_count" > 0) AND "hd_demo_sk" IS NOT NULL) AS "t7" ON "t1"."ss_hdemo_sk" = "t7"."hd_demo_sk"
INNER JOIN (SELECT "s_store_sk", "s_city"
FROM (SELECT "s_store_sk", "s_number_employees", "s_city"
FROM "store") AS "t8"
WHERE "s_number_employees" BETWEEN 200 AND 295 AND "s_store_sk" IS NOT NULL) AS "t10" ON "t1"."ss_store_sk" = "t10"."s_store_sk"
GROUP BY "t1"."ss_customer_sk", "t1"."ss_addr_sk", "t1"."ss_ticket_number", "t10"."s_city"
                    hive.sql.query.fieldNames ss_customer_sk,ss_addr_sk,ss_ticket_number,s_city,$f4,$f5
                    hive.sql.query.fieldTypes int,int,bigint,string,decimal(17,2),decimal(17,2)
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 420 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ss_ticket_number (type: bigint), ss_customer_sk (type: int), $f4 (type: decimal(17,2)), $f5 (type: decimal(17,2)), substr(s_city, 1, 30) (type: string)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4
                    Statistics: Num rows: 1 Data size: 420 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 1 Data size: 420 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: bigint), _col2 (type: decimal(17,2)), _col3 (type: decimal(17,2)), _col4 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: customer
                  properties:
                    hive.sql.query SELECT "c_customer_sk", "c_first_name", "c_last_name"
FROM (SELECT "c_customer_sk", "c_first_name", "c_last_name"
FROM "customer") AS "t"
WHERE "c_customer_sk" IS NOT NULL
                    hive.sql.query.fieldNames c_customer_sk,c_first_name,c_last_name
                    hive.sql.query.fieldTypes int,string,string
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 372 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: c_customer_sk (type: int), c_first_name (type: string), c_last_name (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 372 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 372 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: string), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col2, _col3, _col4, _col6, _col7
                Statistics: Num rows: 1 Data size: 462 Basic stats: COMPLETE Column stats: NONE
                Top N Key Operator
                  sort order: ++++
                  keys: _col7 (type: string), _col6 (type: string), _col4 (type: string), _col3 (type: decimal(17,2))
                  null sort order: zzzz
                  Statistics: Num rows: 1 Data size: 462 Basic stats: COMPLETE Column stats: NONE
                  top n: 100
                  Select Operator
                    expressions: _col7 (type: string), _col6 (type: string), _col0 (type: bigint), _col2 (type: decimal(17,2)), _col3 (type: decimal(17,2)), _col4 (type: string)
                    outputColumnNames: _col0, _col1, _col3, _col4, _col5, _col6
                    Statistics: Num rows: 1 Data size: 462 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string), _col1 (type: string), _col6 (type: string), _col5 (type: decimal(17,2))
                      null sort order: zzzz
                      sort order: ++++
                      Statistics: Num rows: 1 Data size: 462 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col3 (type: bigint), _col4 (type: decimal(17,2))
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), KEY.reducesinkkey2 (type: string), VALUE._col0 (type: bigint), VALUE._col1 (type: decimal(17,2)), KEY.reducesinkkey3 (type: decimal(17,2))
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 1 Data size: 462 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 462 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 462 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

