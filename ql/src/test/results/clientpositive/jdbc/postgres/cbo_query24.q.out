CTE Suggestion:
HiveJoin(condition=[=($7, $2)], joinType=[inner], algorithm=[none], cost=[not available])
  HiveProject(ca_address_sk=[$0], ca_state=[$1], ca_zip=[$2], UPPER=[UPPER($3)])
    HiveJdbcConverter(convention=[JDBC.POSTGRES])
      JdbcFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($2))])
        JdbcProject(ca_address_sk=[$0], ca_state=[$8], ca_zip=[$9], ca_country=[$10])
          JdbcHiveTableScan(table=[[default, customer_address]], table:alias=[customer_address])
  HiveJdbcConverter(convention=[JDBC.POSTGRES])
    JdbcProject(s_store_sk=[$0], s_store_name=[$1], s_state=[$3], s_zip=[$4])
      JdbcFilter(condition=[AND(=($2, 7), IS NOT NULL($0), IS NOT NULL($4))])
        JdbcProject(s_store_sk=[$0], s_store_name=[$5], s_market_id=[$10], s_state=[$24], s_zip=[$25])
          JdbcHiveTableScan(table=[[default, store]], table:alias=[store])

CTE Suggestion:
JdbcJoin(condition=[AND(=($3, $6), =($0, $5))], joinType=[inner])
  JdbcFilter(condition=[AND(IS NOT NULL($3), IS NOT NULL($0), IS NOT NULL($2), IS NOT NULL($1))])
    JdbcProject(ss_item_sk=[$2], ss_customer_sk=[$3], ss_store_sk=[$7], ss_ticket_number=[$9], ss_sales_price=[$13])
      JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
  JdbcFilter(condition=[AND(IS NOT NULL($1), IS NOT NULL($0))])
    JdbcProject(sr_item_sk=[$2], sr_ticket_number=[$9])
      JdbcHiveTableScan(table=[[default, store_returns]], table:alias=[store_returns])

Warning: Shuffle Join MERGEJOIN[111][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 5' is a cross product
PREHOOK: query: explain cbo
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_current_addr_sk = ca_address_sk
  and c_birth_country <> upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain cbo
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_current_addr_sk = ca_address_sk
  and c_birth_country <> upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
CBO PLAN:
HiveProject(c_last_name=[$0], c_first_name=[$1], s_store_name=[$2], paid=[$3])
  HiveJoin(condition=[>($3, $4)], joinType=[inner], algorithm=[none], cost=[not available])
    HiveProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3])
      HiveFilter(condition=[IS NOT NULL($3)])
        HiveProject(c_last_name=[$2], c_first_name=[$1], s_store_name=[$0], $f3=[$3])
          HiveAggregate(group=[{5, 7, 8}], agg#0=[sum($9)])
            HiveProject(i_current_price=[$0], i_size=[$1], i_units=[$2], i_manager_id=[$3], ca_state=[$4], s_store_name=[$5], s_state=[$6], c_first_name=[$7], c_last_name=[$8], $f9=[$9])
              HiveAggregate(group=[{8, 9, 10, 11, 13, 17, 18, 22, 23}], agg#0=[sum($4)])
                HiveJoin(condition=[AND(=($21, $12), <>($24, $15), =($1, $20))], joinType=[inner], algorithm=[none], cost=[not available])
                  HiveJoin(condition=[=($2, $16)], joinType=[inner], algorithm=[none], cost=[not available])
                    HiveProject(ss_item_sk=[$0], ss_customer_sk=[$1], ss_store_sk=[$2], ss_ticket_number=[$3], ss_sales_price=[$4], sr_item_sk=[$5], sr_ticket_number=[$6], i_item_sk=[$7], i_current_price=[$8], i_size=[$9], i_units=[$10], i_manager_id=[$11])
                      HiveJdbcConverter(convention=[JDBC.POSTGRES])
                        JdbcJoin(condition=[=($0, $7)], joinType=[inner])
                          JdbcJoin(condition=[AND(=($3, $6), =($0, $5))], joinType=[inner])
                            JdbcProject(ss_item_sk=[$0], ss_customer_sk=[$1], ss_store_sk=[$2], ss_ticket_number=[$3], ss_sales_price=[$4])
                              JdbcFilter(condition=[AND(IS NOT NULL($3), IS NOT NULL($0), IS NOT NULL($2), IS NOT NULL($1))])
                                JdbcProject(ss_item_sk=[$2], ss_customer_sk=[$3], ss_store_sk=[$7], ss_ticket_number=[$9], ss_sales_price=[$13])
                                  JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
                            JdbcProject(sr_item_sk=[$0], sr_ticket_number=[$1])
                              JdbcFilter(condition=[AND(IS NOT NULL($1), IS NOT NULL($0))])
                                JdbcProject(sr_item_sk=[$2], sr_ticket_number=[$9])
                                  JdbcHiveTableScan(table=[[default, store_returns]], table:alias=[store_returns])
                          JdbcProject(i_item_sk=[$0], i_current_price=[$1], i_size=[$2], i_units=[$4], i_manager_id=[$5])
                            JdbcFilter(condition=[AND(=($3, _UTF-16LE'orchid'), IS NOT NULL($0))])
                              JdbcProject(i_item_sk=[$0], i_current_price=[$5], i_size=[$15], i_color=[$17], i_units=[$18], i_manager_id=[$20])
                                JdbcHiveTableScan(table=[[default, item]], table:alias=[item])
                    HiveJoin(condition=[=($7, $2)], joinType=[inner], algorithm=[none], cost=[not available])
                      HiveProject(ca_address_sk=[$0], ca_state=[$1], ca_zip=[$2], UPPER=[UPPER($3)])
                        HiveProject(ca_address_sk=[$0], ca_state=[$1], ca_zip=[$2], ca_country=[$3])
                          HiveProject(ca_address_sk=[$0], ca_state=[$1], ca_zip=[$2], ca_country=[$3])
                            HiveJdbcConverter(convention=[JDBC.POSTGRES])
                              JdbcFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($2))])
                                JdbcProject(ca_address_sk=[$0], ca_state=[$8], ca_zip=[$9], ca_country=[$10])
                                  JdbcHiveTableScan(table=[[default, customer_address]], table:alias=[customer_address])
                      HiveProject(s_store_sk=[$0], s_store_name=[$1], s_state=[$2], s_zip=[$3])
                        HiveProject(s_store_sk=[$0], s_store_name=[$1], s_state=[$2], s_zip=[$3])
                          HiveJdbcConverter(convention=[JDBC.POSTGRES])
                            JdbcProject(s_store_sk=[$0], s_store_name=[$1], s_state=[$3], s_zip=[$4])
                              JdbcFilter(condition=[AND(=($2, 7), IS NOT NULL($0), IS NOT NULL($4))])
                                JdbcProject(s_store_sk=[$0], s_store_name=[$5], s_market_id=[$10], s_state=[$24], s_zip=[$25])
                                  JdbcHiveTableScan(table=[[default, store]], table:alias=[store])
                  HiveProject(c_customer_sk=[$0], c_current_addr_sk=[$1], c_first_name=[$2], c_last_name=[$3], c_birth_country=[$4])
                    HiveJdbcConverter(convention=[JDBC.POSTGRES])
                      JdbcFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($1))])
                        JdbcProject(c_customer_sk=[$0], c_current_addr_sk=[$4], c_first_name=[$8], c_last_name=[$9], c_birth_country=[$14])
                          JdbcHiveTableScan(table=[[default, customer]], table:alias=[customer])
    HiveProject(_o__c0=[*(0.05:DECIMAL(2, 2), CAST(/($0, $1)):DECIMAL(21, 6))])
      HiveFilter(condition=[IS NOT NULL(CAST(/($0, $1)):DECIMAL(21, 6))])
        HiveProject($f0=[$0], $f1=[$1])
          HiveAggregate(group=[{}], agg#0=[sum($10)], agg#1=[count($10)])
            HiveProject(i_current_price=[$0], i_size=[$1], i_color=[$2], i_units=[$3], i_manager_id=[$4], ca_state=[$5], s_store_name=[$6], s_state=[$7], c_first_name=[$8], c_last_name=[$9], $f10=[$10])
              HiveAggregate(group=[{8, 9, 10, 11, 12, 14, 18, 19, 23, 24}], agg#0=[sum($4)])
                HiveJoin(condition=[AND(=($22, $13), <>($25, $16), =($1, $21))], joinType=[inner], algorithm=[none], cost=[not available])
                  HiveJoin(condition=[=($2, $17)], joinType=[inner], algorithm=[none], cost=[not available])
                    HiveProject(ss_item_sk=[$0], ss_customer_sk=[$1], ss_store_sk=[$2], ss_ticket_number=[$3], ss_sales_price=[$4], sr_item_sk=[$5], sr_ticket_number=[$6], i_item_sk=[$7], i_current_price=[$8], i_size=[$9], i_color=[$10], i_units=[$11], i_manager_id=[$12])
                      HiveJdbcConverter(convention=[JDBC.POSTGRES])
                        JdbcJoin(condition=[=($0, $7)], joinType=[inner])
                          JdbcJoin(condition=[AND(=($3, $6), =($0, $5))], joinType=[inner])
                            JdbcProject(ss_item_sk=[$0], ss_customer_sk=[$1], ss_store_sk=[$2], ss_ticket_number=[$3], ss_sales_price=[$4])
                              JdbcFilter(condition=[AND(IS NOT NULL($3), IS NOT NULL($0), IS NOT NULL($2), IS NOT NULL($1))])
                                JdbcProject(ss_item_sk=[$2], ss_customer_sk=[$3], ss_store_sk=[$7], ss_ticket_number=[$9], ss_sales_price=[$13])
                                  JdbcHiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
                            JdbcProject(sr_item_sk=[$0], sr_ticket_number=[$1])
                              JdbcFilter(condition=[AND(IS NOT NULL($1), IS NOT NULL($0))])
                                JdbcProject(sr_item_sk=[$2], sr_ticket_number=[$9])
                                  JdbcHiveTableScan(table=[[default, store_returns]], table:alias=[store_returns])
                          JdbcProject(i_item_sk=[$0], i_current_price=[$1], i_size=[$2], i_color=[$3], i_units=[$4], i_manager_id=[$5])
                            JdbcFilter(condition=[IS NOT NULL($0)])
                              JdbcProject(i_item_sk=[$0], i_current_price=[$5], i_size=[$15], i_color=[$17], i_units=[$18], i_manager_id=[$20])
                                JdbcHiveTableScan(table=[[default, item]], table:alias=[item])
                    HiveJoin(condition=[=($7, $2)], joinType=[inner], algorithm=[none], cost=[not available])
                      HiveProject(ca_address_sk=[$0], ca_state=[$1], ca_zip=[$2], UPPER=[UPPER($3)])
                        HiveProject(ca_address_sk=[$0], ca_state=[$1], ca_zip=[$2], ca_country=[$3])
                          HiveProject(ca_address_sk=[$0], ca_state=[$1], ca_zip=[$2], ca_country=[$3])
                            HiveJdbcConverter(convention=[JDBC.POSTGRES])
                              JdbcFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($2))])
                                JdbcProject(ca_address_sk=[$0], ca_state=[$8], ca_zip=[$9], ca_country=[$10])
                                  JdbcHiveTableScan(table=[[default, customer_address]], table:alias=[customer_address])
                      HiveProject(s_store_sk=[$0], s_store_name=[$1], s_state=[$2], s_zip=[$3])
                        HiveProject(s_store_sk=[$0], s_store_name=[$1], s_state=[$2], s_zip=[$3])
                          HiveJdbcConverter(convention=[JDBC.POSTGRES])
                            JdbcProject(s_store_sk=[$0], s_store_name=[$1], s_state=[$3], s_zip=[$4])
                              JdbcFilter(condition=[AND(=($2, 7), IS NOT NULL($0), IS NOT NULL($4))])
                                JdbcProject(s_store_sk=[$0], s_store_name=[$5], s_market_id=[$10], s_state=[$24], s_zip=[$25])
                                  JdbcHiveTableScan(table=[[default, store]], table:alias=[store])
                  HiveProject(c_customer_sk=[$0], c_current_addr_sk=[$1], c_first_name=[$2], c_last_name=[$3], c_birth_country=[$4])
                    HiveJdbcConverter(convention=[JDBC.POSTGRES])
                      JdbcFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($1))])
                        JdbcProject(c_customer_sk=[$0], c_current_addr_sk=[$4], c_first_name=[$8], c_last_name=[$9], c_birth_country=[$14])
                          JdbcHiveTableScan(table=[[default, customer]], table:alias=[customer])

