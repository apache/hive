PREHOOK: query: explain
with ss as (
 select
          i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 cs as (
 select
          i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 ws as (
 select
          i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6
 group by i_item_id)
  select   
  i_item_id
,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by i_item_id
      ,total_sales
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
with ss as (
 select
          i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 cs as (
 select
          i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 ws as (
 select
          i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6
 group by i_item_id)
  select   
  i_item_id
,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by i_item_id
      ,total_sales
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 10 <- Map 13 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
        Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Union 4 (CONTAINS)
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Union 4 (CONTAINS)
        Reducer 5 <- Union 4 (SIMPLE_EDGE)
        Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
        Reducer 8 <- Map 12 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
        Reducer 9 <- Reducer 8 (SIMPLE_EDGE), Union 4 (CONTAINS)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "t1"."ss_sold_date_sk", "t1"."ss_item_sk", "t1"."ss_addr_sk", "t1"."ss_ext_sales_price", "t10"."d_date_sk", "t10"."d_year", "t10"."d_moy", "t4"."ca_address_sk", "t4"."ca_gmt_offset", "t7"."i_item_sk", "t7"."i_item_id"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk", "ss_addr_sk", "ss_ext_sales_price"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk", "ss_addr_sk", "ss_ext_sales_price"
FROM "store_sales") AS "t"
WHERE "ss_sold_date_sk" IS NOT NULL AND ("ss_addr_sk" IS NOT NULL AND "ss_item_sk" IS NOT NULL)) AS "t1"
INNER JOIN (SELECT "ca_address_sk", "ca_gmt_offset"
FROM (SELECT "ca_address_sk", "ca_gmt_offset"
FROM "customer_address") AS "t2"
WHERE "ca_gmt_offset" = -6 AND "ca_address_sk" IS NOT NULL) AS "t4" ON "t1"."ss_addr_sk" = "t4"."ca_address_sk"
INNER JOIN (SELECT "i_item_sk", "i_item_id"
FROM (SELECT "i_item_sk", "i_item_id"
FROM "item") AS "t5"
WHERE "i_item_id" IS NOT NULL AND "i_item_sk" IS NOT NULL) AS "t7" ON "t1"."ss_item_sk" = "t7"."i_item_sk"
INNER JOIN (SELECT "d_date_sk", "d_year", "d_moy"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "date_dim") AS "t8"
WHERE "d_year" = 1999 AND ("d_moy" = 9 AND "d_date_sk" IS NOT NULL)) AS "t10" ON "t1"."ss_sold_date_sk" = "t10"."d_date_sk"
                    hive.sql.query.fieldNames ss_sold_date_sk,ss_item_sk,ss_addr_sk,ss_ext_sales_price,d_date_sk,d_year,d_moy,ca_address_sk,ca_gmt_offset,i_item_sk,i_item_id
                    hive.sql.query.fieldTypes int,bigint,int,decimal(7,2),int,int,int,int,decimal(5,2),bigint,string
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ss_ext_sales_price (type: decimal(7,2)), i_item_id (type: string)
                    outputColumnNames: _col3, _col10
                    Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col10 (type: string)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col10 (type: string)
                      Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col3 (type: decimal(7,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 12 
            Map Operator Tree:
                TableScan
                  alias: catalog_sales
                  properties:
                    hive.sql.query SELECT "t1"."cs_sold_date_sk", "t1"."cs_bill_addr_sk", "t1"."cs_item_sk", "t1"."cs_ext_sales_price", "t10"."d_date_sk", "t10"."d_year", "t10"."d_moy", "t4"."ca_address_sk", "t4"."ca_gmt_offset", "t7"."i_item_sk", "t7"."i_item_id"
FROM (SELECT "cs_sold_date_sk", "cs_bill_addr_sk", "cs_item_sk", "cs_ext_sales_price"
FROM (SELECT "cs_sold_date_sk", "cs_bill_addr_sk", "cs_item_sk", "cs_ext_sales_price"
FROM "catalog_sales") AS "t"
WHERE "cs_sold_date_sk" IS NOT NULL AND ("cs_bill_addr_sk" IS NOT NULL AND "cs_item_sk" IS NOT NULL)) AS "t1"
INNER JOIN (SELECT "ca_address_sk", "ca_gmt_offset"
FROM (SELECT "ca_address_sk", "ca_gmt_offset"
FROM "customer_address") AS "t2"
WHERE "ca_gmt_offset" = -6 AND "ca_address_sk" IS NOT NULL) AS "t4" ON "t1"."cs_bill_addr_sk" = "t4"."ca_address_sk"
INNER JOIN (SELECT "i_item_sk", "i_item_id"
FROM (SELECT "i_item_sk", "i_item_id"
FROM "item") AS "t5"
WHERE "i_item_id" IS NOT NULL AND "i_item_sk" IS NOT NULL) AS "t7" ON "t1"."cs_item_sk" = "t7"."i_item_sk"
INNER JOIN (SELECT "d_date_sk", "d_year", "d_moy"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "date_dim") AS "t8"
WHERE "d_year" = 1999 AND ("d_moy" = 9 AND "d_date_sk" IS NOT NULL)) AS "t10" ON "t1"."cs_sold_date_sk" = "t10"."d_date_sk"
                    hive.sql.query.fieldNames cs_sold_date_sk,cs_bill_addr_sk,cs_item_sk,cs_ext_sales_price,d_date_sk,d_year,d_moy,ca_address_sk,ca_gmt_offset,i_item_sk,i_item_id
                    hive.sql.query.fieldTypes int,int,bigint,decimal(7,2),int,int,int,int,decimal(5,2),bigint,string
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: cs_ext_sales_price (type: decimal(7,2)), i_item_id (type: string)
                    outputColumnNames: _col3, _col10
                    Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col10 (type: string)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col10 (type: string)
                      Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col3 (type: decimal(7,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 13 
            Map Operator Tree:
                TableScan
                  alias: web_sales
                  properties:
                    hive.sql.query SELECT "t1"."ws_sold_date_sk", "t1"."ws_item_sk", "t1"."ws_bill_addr_sk", "t1"."ws_ext_sales_price", "t10"."d_date_sk", "t10"."d_year", "t10"."d_moy", "t4"."ca_address_sk", "t4"."ca_gmt_offset", "t7"."i_item_sk", "t7"."i_item_id"
FROM (SELECT "ws_sold_date_sk", "ws_item_sk", "ws_bill_addr_sk", "ws_ext_sales_price"
FROM (SELECT "ws_sold_date_sk", "ws_item_sk", "ws_bill_addr_sk", "ws_ext_sales_price"
FROM "web_sales") AS "t"
WHERE "ws_sold_date_sk" IS NOT NULL AND ("ws_bill_addr_sk" IS NOT NULL AND "ws_item_sk" IS NOT NULL)) AS "t1"
INNER JOIN (SELECT "ca_address_sk", "ca_gmt_offset"
FROM (SELECT "ca_address_sk", "ca_gmt_offset"
FROM "customer_address") AS "t2"
WHERE "ca_gmt_offset" = -6 AND "ca_address_sk" IS NOT NULL) AS "t4" ON "t1"."ws_bill_addr_sk" = "t4"."ca_address_sk"
INNER JOIN (SELECT "i_item_sk", "i_item_id"
FROM (SELECT "i_item_sk", "i_item_id"
FROM "item") AS "t5"
WHERE "i_item_id" IS NOT NULL AND "i_item_sk" IS NOT NULL) AS "t7" ON "t1"."ws_item_sk" = "t7"."i_item_sk"
INNER JOIN (SELECT "d_date_sk", "d_year", "d_moy"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "date_dim") AS "t8"
WHERE "d_year" = 1999 AND ("d_moy" = 9 AND "d_date_sk" IS NOT NULL)) AS "t10" ON "t1"."ws_sold_date_sk" = "t10"."d_date_sk"
                    hive.sql.query.fieldNames ws_sold_date_sk,ws_item_sk,ws_bill_addr_sk,ws_ext_sales_price,d_date_sk,d_year,d_moy,ca_address_sk,ca_gmt_offset,i_item_sk,i_item_id
                    hive.sql.query.fieldTypes int,bigint,int,decimal(7,2),int,int,int,int,decimal(5,2),bigint,string
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ws_ext_sales_price (type: decimal(7,2)), i_item_id (type: string)
                    outputColumnNames: _col3, _col10
                    Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col10 (type: string)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col10 (type: string)
                      Statistics: Num rows: 1 Data size: 296 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col3 (type: decimal(7,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: item
                  properties:
                    hive.sql.query SELECT "i_item_id"
FROM (SELECT "i_item_id", "i_category"
FROM "item") AS "t"
WHERE "i_category" = 'Children' AND "i_item_id" IS NOT NULL
                    hive.sql.query.fieldNames i_item_id
                    hive.sql.query.fieldTypes string
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 184 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: i_item_id (type: string)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 184 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      keys: _col0 (type: string)
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 184 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 1 Data size: 184 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 1 Data size: 184 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 1 Data size: 184 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 10 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col10 (type: string)
                  1 _col0 (type: string)
                outputColumnNames: _col3, _col10
                Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col3)
                  keys: _col10 (type: string)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: string)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: string)
                    Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: decimal(17,2))
        Reducer 11 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
                Top N Key Operator
                  sort order: +
                  keys: _col0 (type: string)
                  null sort order: z
                  Statistics: Num rows: 3 Data size: 975 Basic stats: COMPLETE Column stats: NONE
                  top n: 100
                  Group By Operator
                    aggregations: sum(_col1)
                    keys: _col0 (type: string)
                    minReductionHashAggr: 0.99
                    mode: hash
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 3 Data size: 975 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: string)
                      Statistics: Num rows: 3 Data size: 975 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: decimal(27,2))
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col10 (type: string)
                  1 _col0 (type: string)
                outputColumnNames: _col3, _col10
                Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col3)
                  keys: _col10 (type: string)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: string)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: string)
                    Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: decimal(17,2))
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
                Top N Key Operator
                  sort order: +
                  keys: _col0 (type: string)
                  null sort order: z
                  Statistics: Num rows: 3 Data size: 975 Basic stats: COMPLETE Column stats: NONE
                  top n: 100
                  Group By Operator
                    aggregations: sum(_col1)
                    keys: _col0 (type: string)
                    minReductionHashAggr: 0.99
                    mode: hash
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 3 Data size: 975 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: string)
                      Statistics: Num rows: 3 Data size: 975 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: decimal(27,2))
        Reducer 5 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
                Top N Key Operator
                  sort order: ++
                  keys: _col0 (type: string), _col1 (type: decimal(27,2))
                  null sort order: zz
                  Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
                  top n: 100
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: decimal(27,2))
                    null sort order: zz
                    sort order: ++
                    Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: decimal(27,2))
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 8 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col10 (type: string)
                  1 _col0 (type: string)
                outputColumnNames: _col3, _col10
                Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col3)
                  keys: _col10 (type: string)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: string)
                    null sort order: z
                    sort order: +
                    Map-reduce partition columns: _col0 (type: string)
                    Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: decimal(17,2))
        Reducer 9 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 325 Basic stats: COMPLETE Column stats: NONE
                Top N Key Operator
                  sort order: +
                  keys: _col0 (type: string)
                  null sort order: z
                  Statistics: Num rows: 3 Data size: 975 Basic stats: COMPLETE Column stats: NONE
                  top n: 100
                  Group By Operator
                    aggregations: sum(_col1)
                    keys: _col0 (type: string)
                    minReductionHashAggr: 0.99
                    mode: hash
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 3 Data size: 975 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: string)
                      Statistics: Num rows: 3 Data size: 975 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: decimal(27,2))
        Union 4 
            Vertex: Union 4

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

