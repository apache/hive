Warning: Map Join MAPJOIN[51][bigTable=?] in task 'Map 2' is a cross product
PREHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 2 <- Map 1 (BROADCAST_EDGE), Map 5 (BROADCAST_EDGE), Map 6 (BROADCAST_EDGE), Map 7 (BROADCAST_EDGE)
        Reducer 3 <- Map 2 (SIMPLE_EDGE)
        Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: d
                  properties:
                    hive.sql.query SELECT "t1"."d_date_sk", "t1"."d_month_seq", "t4"."d_month_seq" AS "d_month_seq0"
FROM (SELECT "d_date_sk", "d_month_seq"
FROM (SELECT "d_date_sk", "d_month_seq"
FROM "date_dim") AS "t"
WHERE "d_date_sk" IS NOT NULL AND "d_month_seq" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "d_month_seq"
FROM (SELECT "d_month_seq", "d_year", "d_moy"
FROM "date_dim") AS "t2"
WHERE "d_year" = 2000 AND ("d_moy" = 2 AND "d_month_seq" IS NOT NULL)
GROUP BY "d_month_seq") AS "t4" ON "t1"."d_month_seq" = "t4"."d_month_seq"
                    hive.sql.query.fieldNames d_date_sk,d_month_seq,d_month_seq0
                    hive.sql.query.fieldTypes int,int,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: d_date_sk (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: date_dim
                  properties:
                    hive.sql.query SELECT COUNT(*) AS "cnt"
FROM (SELECT "d_month_seq"
FROM (SELECT "d_month_seq", "d_year", "d_moy"
FROM "date_dim") AS "t"
WHERE "d_year" = 2000 AND "d_moy" = 2
GROUP BY "d_month_seq") AS "t1"
                    hive.sql.query.fieldNames cnt
                    hive.sql.query.fieldTypes bigint
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: cnt (type: bigint)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Filter Operator
                      predicate: sq_count_check(_col0) (type: boolean)
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      Select Operator
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                        Map Join Operator
                          condition map:
                               Inner Join 0 to 1
                          keys:
                            0 
                            1 
                          outputColumnNames: _col0
                          input vertices:
                            0 Map 1
                          Statistics: Num rows: 1 Data size: 13 Basic stats: COMPLETE Column stats: NONE
                          Map Join Operator
                            condition map:
                                 Inner Join 0 to 1
                            keys:
                              0 _col0 (type: int)
                              1 _col0 (type: int)
                            outputColumnNames: _col5, _col6
                            input vertices:
                              1 Map 5
                            Statistics: Num rows: 1 Data size: 14 Basic stats: COMPLETE Column stats: NONE
                            Map Join Operator
                              condition map:
                                   Inner Join 0 to 1
                              keys:
                                0 _col5 (type: bigint)
                                1 _col0 (type: bigint)
                              outputColumnNames: _col6
                              input vertices:
                                1 Map 6
                              Statistics: Num rows: 1 Data size: 15 Basic stats: COMPLETE Column stats: NONE
                              Map Join Operator
                                condition map:
                                     Inner Join 0 to 1
                                keys:
                                  0 _col6 (type: int)
                                  1 _col2 (type: int)
                                outputColumnNames: _col13
                                input vertices:
                                  1 Map 7
                                Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: NONE
                                Group By Operator
                                  aggregations: count()
                                  keys: _col13 (type: string)
                                  minReductionHashAggr: 0.99
                                  mode: hash
                                  outputColumnNames: _col0, _col1
                                  Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: NONE
                                  Reduce Output Operator
                                    key expressions: _col0 (type: string)
                                    null sort order: z
                                    sort order: +
                                    Map-reduce partition columns: _col0 (type: string)
                                    Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: NONE
                                    value expressions: _col1 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: s
                  properties:
                    hive.sql.query SELECT "ss_sold_date_sk", "ss_item_sk", "ss_customer_sk"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk", "ss_customer_sk"
FROM "store_sales") AS "t"
WHERE "ss_customer_sk" IS NOT NULL AND ("ss_sold_date_sk" IS NOT NULL AND "ss_item_sk" IS NOT NULL)
                    hive.sql.query.fieldNames ss_sold_date_sk,ss_item_sk,ss_customer_sk
                    hive.sql.query.fieldTypes int,bigint,int
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ss_sold_date_sk (type: int), ss_item_sk (type: bigint), ss_customer_sk (type: int)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: bigint), _col2 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: i
                  properties:
                    hive.sql.query SELECT "t1"."i_item_sk", "t1"."i_current_price", "t1"."i_category", "t6"."i_category" AS "i_category0", "t6"."""*""" AS "*"
FROM (SELECT "i_item_sk", "i_current_price", "i_category"
FROM (SELECT "i_item_sk", "i_current_price", "i_category"
FROM "item") AS "t"
WHERE "i_item_sk" IS NOT NULL AND ("i_category" IS NOT NULL AND "i_current_price" IS NOT NULL)) AS "t1"
INNER JOIN (SELECT "i_category", 1.2 * CAST(CAST(SUM("i_current_price") / COUNT("i_current_price") AS DECIMAL(11, 6)) AS DECIMAL(16, 6)) AS "*"
FROM (SELECT "i_current_price", "i_category"
FROM "item") AS "t2"
WHERE "i_category" IS NOT NULL
GROUP BY "i_category"
HAVING CAST(CAST(SUM("i_current_price") / COUNT("i_current_price") AS DECIMAL(11, 6)) AS DECIMAL(16, 6)) IS NOT NULL) AS "t6" ON "t1"."i_category" = "t6"."i_category" AND "t1"."i_current_price" > "t6"."""*"""
                    hive.sql.query.fieldNames i_item_sk,i_current_price,i_category,i_category0,*
                    hive.sql.query.fieldTypes bigint,decimal(7,2),string,string,decimal(14,7)
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: i_item_sk (type: bigint)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: bigint)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: bigint)
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: a
                  properties:
                    hive.sql.query SELECT "t1"."ca_address_sk", "t1"."ca_state", "t4"."c_customer_sk", "t4"."c_current_addr_sk"
FROM (SELECT "ca_address_sk", "ca_state"
FROM (SELECT "ca_address_sk", "ca_state"
FROM "customer_address") AS "t"
WHERE "ca_address_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "c_customer_sk", "c_current_addr_sk"
FROM (SELECT "c_customer_sk", "c_current_addr_sk"
FROM "customer") AS "t2"
WHERE "c_current_addr_sk" IS NOT NULL AND "c_customer_sk" IS NOT NULL) AS "t4" ON "t1"."ca_address_sk" = "t4"."c_current_addr_sk"
                    hive.sql.query.fieldNames ca_address_sk,ca_state,c_customer_sk,c_current_addr_sk
                    hive.sql.query.fieldTypes int,string,int,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ca_state (type: string), c_customer_sk (type: int)
                    outputColumnNames: _col1, _col2
                    Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col2 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col2 (type: int)
                      Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: NONE
                Filter Operator
                  predicate: (_col1 >= 10L) (type: boolean)
                  Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: NONE
                  Top N Key Operator
                    sort order: +
                    keys: _col1 (type: bigint)
                    null sort order: z
                    Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: NONE
                    top n: 100
                    Reduce Output Operator
                      key expressions: _col1 (type: bigint)
                      null sort order: z
                      sort order: +
                      Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: string)
        Reducer 4 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), KEY.reducesinkkey0 (type: bigint)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

