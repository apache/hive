PREHOOK: query: explain
select  i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
   and ss_item_sk = i_item_sk
   and i_manager_id=7
   and d_moy=11
   and d_year=1999
   and ss_customer_sk = c_customer_sk 
   and c_current_addr_sk = ca_address_sk
   and substr(ca_zip,1,5) <> substr(s_zip,1,5) 
   and ss_store_sk = s_store_sk 
 group by i_brand
      ,i_brand_id
      ,i_manufact_id
      ,i_manufact
 order by ext_price desc
         ,i_brand
         ,i_brand_id
         ,i_manufact_id
         ,i_manufact
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
select  i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
   and ss_item_sk = i_item_sk
   and i_manager_id=7
   and d_moy=11
   and d_year=1999
   and ss_customer_sk = c_customer_sk 
   and c_current_addr_sk = ca_address_sk
   and substr(ca_zip,1,5) <> substr(s_zip,1,5) 
   and ss_store_sk = s_store_sk 
 group by i_brand
      ,i_brand_id
      ,i_manufact_id
      ,i_manufact
 order by ext_price desc
         ,i_brand
         ,i_brand_id
         ,i_manufact_id
         ,i_manufact
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
        Reducer 3 <- Map 9 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Map 10 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
        Reducer 5 <- Map 11 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
        Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
        Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: customer
                  properties:
                    hive.sql.query SELECT "c_customer_sk", "c_current_addr_sk"
FROM (SELECT "c_customer_sk", "c_current_addr_sk"
FROM "customer") AS "t"
WHERE "c_customer_sk" IS NOT NULL AND "c_current_addr_sk" IS NOT NULL
                    hive.sql.query.fieldNames c_customer_sk,c_current_addr_sk
                    hive.sql.query.fieldTypes int,int
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: c_customer_sk (type: int), c_current_addr_sk (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 10 
            Map Operator Tree:
                TableScan
                  alias: store
                  properties:
                    hive.sql.query SELECT "s_store_sk", "s_zip"
FROM (SELECT "s_store_sk", "s_zip"
FROM "store") AS "t"
WHERE "s_store_sk" IS NOT NULL
                    hive.sql.query.fieldNames s_store_sk,s_zip
                    hive.sql.query.fieldTypes int,string
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: s_store_sk (type: int), substr(s_zip, 1, 5) (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 11 
            Map Operator Tree:
                TableScan
                  alias: item
                  properties:
                    hive.sql.query SELECT "i_item_sk", "i_brand_id", "i_brand", "i_manufact_id", "i_manufact"
FROM (SELECT "i_item_sk", "i_brand_id", "i_brand", "i_manufact_id", "i_manufact", "i_manager_id"
FROM "item") AS "t"
WHERE "i_manager_id" = 7 AND "i_item_sk" IS NOT NULL
                    hive.sql.query.fieldNames i_item_sk,i_brand_id,i_brand,i_manufact_id,i_manufact
                    hive.sql.query.fieldTypes bigint,int,string,int,string
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 384 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: i_item_sk (type: bigint), i_brand_id (type: int), i_brand (type: string), i_manufact_id (type: int), i_manufact (type: string)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4
                    Statistics: Num rows: 1 Data size: 384 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: bigint)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: bigint)
                      Statistics: Num rows: 1 Data size: 384 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: int), _col2 (type: string), _col3 (type: int), _col4 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 8 
            Map Operator Tree:
                TableScan
                  alias: customer_address
                  properties:
                    hive.sql.query SELECT "ca_address_sk", "ca_zip"
FROM (SELECT "ca_address_sk", "ca_zip"
FROM "customer_address") AS "t"
WHERE "ca_address_sk" IS NOT NULL
                    hive.sql.query.fieldNames ca_address_sk,ca_zip
                    hive.sql.query.fieldTypes int,string
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ca_address_sk (type: int), substr(ca_zip, 1, 5) (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 9 
            Map Operator Tree:
                TableScan
                  alias: store_sales
                  properties:
                    hive.sql.query SELECT "t1"."ss_sold_date_sk", "t1"."ss_item_sk", "t1"."ss_customer_sk", "t1"."ss_store_sk", "t1"."ss_ext_sales_price", "t4"."d_date_sk"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk", "ss_customer_sk", "ss_store_sk", "ss_ext_sales_price"
FROM (SELECT "ss_sold_date_sk", "ss_item_sk", "ss_customer_sk", "ss_store_sk", "ss_ext_sales_price"
FROM "store_sales") AS "t"
WHERE "ss_sold_date_sk" IS NOT NULL AND "ss_item_sk" IS NOT NULL AND ("ss_customer_sk" IS NOT NULL AND "ss_store_sk" IS NOT NULL)) AS "t1"
INNER JOIN (SELECT "d_date_sk"
FROM (SELECT "d_date_sk", "d_year", "d_moy"
FROM "date_dim") AS "t2"
WHERE "d_moy" = 11 AND ("d_year" = 1999 AND "d_date_sk" IS NOT NULL)) AS "t4" ON "t1"."ss_sold_date_sk" = "t4"."d_date_sk"
                    hive.sql.query.fieldNames ss_sold_date_sk,ss_item_sk,ss_customer_sk,ss_store_sk,ss_ext_sales_price,d_date_sk
                    hive.sql.query.fieldTypes int,bigint,int,int,decimal(7,2),int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ss_item_sk (type: bigint), ss_customer_sk (type: int), ss_store_sk (type: int), ss_ext_sales_price (type: decimal(7,2))
                    outputColumnNames: _col1, _col2, _col3, _col4
                    Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col2 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col2 (type: int)
                      Statistics: Num rows: 1 Data size: 128 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: bigint), _col3 (type: int), _col4 (type: decimal(7,2))
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col3
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col0 (type: int)
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col3 (type: string)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col2 (type: int)
                outputColumnNames: _col3, _col5, _col7, _col8
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col7 (type: int)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col7 (type: int)
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col3 (type: string), _col5 (type: bigint), _col8 (type: decimal(7,2))
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col7 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col3, _col5, _col8, _col11
                residual filter predicates: {(_col3 <> _col11)}
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col5 (type: bigint)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col5 (type: bigint)
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col8 (type: decimal(7,2))
        Reducer 5 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col5 (type: bigint)
                  1 _col0 (type: bigint)
                outputColumnNames: _col8, _col13, _col14, _col15, _col16
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: sum(_col8)
                  keys: _col14 (type: string), _col13 (type: int), _col15 (type: int), _col16 (type: string)
                  minReductionHashAggr: 0.99
                  mode: hash
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: string)
                    null sort order: zzzz
                    sort order: ++++
                    Map-reduce partition columns: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: string)
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col4 (type: decimal(17,2))
        Reducer 6 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: int), KEY._col2 (type: int), KEY._col3 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                Top N Key Operator
                  sort order: -++++
                  keys: _col4 (type: decimal(17,2)), _col0 (type: string), _col1 (type: int), _col2 (type: int), _col3 (type: string)
                  null sort order: azzzz
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  top n: 100
                  Select Operator
                    expressions: _col2 (type: int), _col3 (type: string), _col4 (type: decimal(17,2)), _col0 (type: string), _col1 (type: int)
                    outputColumnNames: _col2, _col3, _col4, _col5, _col6
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col4 (type: decimal(17,2)), _col5 (type: string), _col6 (type: int), _col2 (type: int), _col3 (type: string)
                      null sort order: azzzz
                      sort order: -++++
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
        Reducer 7 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey2 (type: int), KEY.reducesinkkey1 (type: string), KEY.reducesinkkey3 (type: int), KEY.reducesinkkey4 (type: string), KEY.reducesinkkey0 (type: decimal(17,2))
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

