PREHOOK: query: explain
select  c_customer_id as customer_id
       ,c_last_name || ', ' || c_first_name as customername
 from customer
     ,customer_address
     ,customer_demographics
     ,household_demographics
     ,income_band
     ,store_returns
 where ca_city	        =  'Hopewell'
   and c_current_addr_sk = ca_address_sk
   and ib_lower_bound   >=  32287
   and ib_upper_bound   <=  32287 + 50000
   and ib_income_band_sk = hd_income_band_sk
   and cd_demo_sk = c_current_cdemo_sk
   and hd_demo_sk = c_current_hdemo_sk
   and sr_cdemo_sk = cd_demo_sk
 order by c_customer_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@income_band
PREHOOK: Input: default@store_returns
#### A masked pattern was here ####
POSTHOOK: query: explain
select  c_customer_id as customer_id
       ,c_last_name || ', ' || c_first_name as customername
 from customer
     ,customer_address
     ,customer_demographics
     ,household_demographics
     ,income_band
     ,store_returns
 where ca_city	        =  'Hopewell'
   and c_current_addr_sk = ca_address_sk
   and ib_lower_bound   >=  32287
   and ib_upper_bound   <=  32287 + 50000
   and ib_income_band_sk = hd_income_band_sk
   and cd_demo_sk = c_current_cdemo_sk
   and hd_demo_sk = c_current_hdemo_sk
   and sr_cdemo_sk = cd_demo_sk
 order by c_customer_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@income_band
POSTHOOK: Input: default@store_returns
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
        Reducer 3 <- Map 7 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
        Reducer 4 <- Map 8 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
        Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: customer
                  properties:
                    hive.sql.query SELECT "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_name", "c_last_name"
FROM (SELECT "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_name", "c_last_name"
FROM "customer") AS "t"
WHERE "c_current_addr_sk" IS NOT NULL AND ("c_current_cdemo_sk" IS NOT NULL AND "c_current_hdemo_sk" IS NOT NULL)
                    hive.sql.query.fieldNames c_customer_id,c_current_cdemo_sk,c_current_hdemo_sk,c_current_addr_sk,c_first_name,c_last_name
                    hive.sql.query.fieldTypes string,int,int,int,string,string
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 564 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: c_customer_id (type: string), c_current_cdemo_sk (type: int), c_current_hdemo_sk (type: int), c_current_addr_sk (type: int), concat(concat(c_last_name, ', '), c_first_name) (type: string)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4
                    Statistics: Num rows: 1 Data size: 564 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col3 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col3 (type: int)
                      Statistics: Num rows: 1 Data size: 564 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: string), _col1 (type: int), _col2 (type: int), _col4 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: customer_address
                  properties:
                    hive.sql.query SELECT "ca_address_sk"
FROM (SELECT "ca_address_sk", "ca_city"
FROM "customer_address") AS "t"
WHERE "ca_city" = 'Hopewell' AND "ca_address_sk" IS NOT NULL
                    hive.sql.query.fieldNames ca_address_sk
                    hive.sql.query.fieldTypes int
                    hive.sql.query.split true
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ca_address_sk (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: customer_demographics
                  properties:
                    hive.sql.query SELECT "t1"."cd_demo_sk", "t4"."sr_cdemo_sk"
FROM (SELECT "cd_demo_sk"
FROM (SELECT "cd_demo_sk"
FROM "customer_demographics") AS "t"
WHERE "cd_demo_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "sr_cdemo_sk"
FROM (SELECT "sr_cdemo_sk"
FROM "store_returns") AS "t2"
WHERE "sr_cdemo_sk" IS NOT NULL) AS "t4" ON "t1"."cd_demo_sk" = "t4"."sr_cdemo_sk"
                    hive.sql.query.fieldNames cd_demo_sk,sr_cdemo_sk
                    hive.sql.query.fieldTypes int,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: cd_demo_sk (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 8 
            Map Operator Tree:
                TableScan
                  alias: household_demographics
                  properties:
                    hive.sql.query SELECT "t1"."hd_demo_sk", "t1"."hd_income_band_sk", "t3"."ib_income_band_sk"
FROM (SELECT "hd_demo_sk", "hd_income_band_sk"
FROM (SELECT "hd_demo_sk", "hd_income_band_sk"
FROM "household_demographics") AS "t"
WHERE "hd_demo_sk" IS NOT NULL AND "hd_income_band_sk" IS NOT NULL) AS "t1"
INNER JOIN (SELECT "ib_income_band_sk"
FROM "income_band"
WHERE "ib_lower_bound" >= 32287 AND ("ib_upper_bound" <= 82287 AND "ib_income_band_sk" IS NOT NULL)) AS "t3" ON "t1"."hd_income_band_sk" = "t3"."ib_income_band_sk"
                    hive.sql.query.fieldNames hd_demo_sk,hd_income_band_sk,ib_income_band_sk
                    hive.sql.query.fieldTypes int,int,int
                    hive.sql.query.split false
                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: hd_demo_sk (type: int)
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col3 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col4
                Statistics: Num rows: 1 Data size: 620 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col1 (type: int)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col1 (type: int)
                  Statistics: Num rows: 1 Data size: 620 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: string), _col2 (type: int), _col4 (type: string)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col2, _col4
                Statistics: Num rows: 1 Data size: 682 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col2 (type: int)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col2 (type: int)
                  Statistics: Num rows: 1 Data size: 682 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: string), _col4 (type: string)
        Reducer 4 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col2 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col4
                Statistics: Num rows: 1 Data size: 750 Basic stats: COMPLETE Column stats: NONE
                Top N Key Operator
                  sort order: +
                  keys: _col0 (type: string)
                  null sort order: z
                  Statistics: Num rows: 1 Data size: 750 Basic stats: COMPLETE Column stats: NONE
                  top n: 100
                  Select Operator
                    expressions: _col4 (type: string), _col0 (type: string)
                    outputColumnNames: _col1, _col2
                    Statistics: Num rows: 1 Data size: 750 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col2 (type: string)
                      null sort order: z
                      sort order: +
                      Statistics: Num rows: 1 Data size: 750 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: string)
        Reducer 5 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 750 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 1 Data size: 750 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 750 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

