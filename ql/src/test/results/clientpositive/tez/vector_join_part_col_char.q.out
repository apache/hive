PREHOOK: query: drop table if exists char_part_tbl1
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists char_part_tbl1
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists char_part_tbl2
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists char_part_tbl2
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table studenttab(name string, age int, gpa double) clustered by (age) into 2 buckets stored as orc tblproperties('transactional'='true')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@studenttab
POSTHOOK: query: create table studenttab(name string, age int, gpa double) clustered by (age) into 2 buckets stored as orc tblproperties('transactional'='true')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@studenttab
PREHOOK: query: insert into table studenttab values ('calvin garcia',56,2.50), ('oscar miller',66,3.00), ('(yuri xylophone',30,2.74),('alice underhill',46,3.50)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@studenttab
POSTHOOK: query: insert into table studenttab values ('calvin garcia',56,2.50), ('oscar miller',66,3.00), ('(yuri xylophone',30,2.74),('alice underhill',46,3.50)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@studenttab
POSTHOOK: Lineage: studenttab.age SCRIPT []
POSTHOOK: Lineage: studenttab.gpa SCRIPT []
POSTHOOK: Lineage: studenttab.name SCRIPT []
PREHOOK: query: create table char_tbl1(name string, age int) partitioned  by(gpa char(50)) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@char_tbl1
POSTHOOK: query: create table char_tbl1(name string, age int) partitioned  by(gpa char(50)) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@char_tbl1
PREHOOK: query: create table char_tbl2(name string, age int) partitioned by(gpa char(5)) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@char_tbl2
POSTHOOK: query: create table char_tbl2(name string, age int) partitioned by(gpa char(5)) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@char_tbl2
PREHOOK: query: insert into table char_tbl1 partition(gpa='3.5') select name, age from studenttab where gpa = 3.5
PREHOOK: type: QUERY
PREHOOK: Input: default@studenttab
PREHOOK: Output: default@char_tbl1@gpa=3.5                                               
POSTHOOK: query: insert into table char_tbl1 partition(gpa='3.5') select name, age from studenttab where gpa = 3.5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@studenttab
POSTHOOK: Output: default@char_tbl1@gpa=3.5                                               
POSTHOOK: Lineage: char_tbl1 PARTITION(gpa=3.5                                               ).age SIMPLE [(studenttab)studenttab.FieldSchema(name:age, type:int, comment:null), ]
POSTHOOK: Lineage: char_tbl1 PARTITION(gpa=3.5                                               ).name SIMPLE [(studenttab)studenttab.FieldSchema(name:name, type:string, comment:null), ]
PREHOOK: query: insert into table char_tbl1 partition(gpa='2.5') select name, age from studenttab where gpa = 2.5
PREHOOK: type: QUERY
PREHOOK: Input: default@studenttab
PREHOOK: Output: default@char_tbl1@gpa=2.5                                               
POSTHOOK: query: insert into table char_tbl1 partition(gpa='2.5') select name, age from studenttab where gpa = 2.5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@studenttab
POSTHOOK: Output: default@char_tbl1@gpa=2.5                                               
POSTHOOK: Lineage: char_tbl1 PARTITION(gpa=2.5                                               ).age SIMPLE [(studenttab)studenttab.FieldSchema(name:age, type:int, comment:null), ]
POSTHOOK: Lineage: char_tbl1 PARTITION(gpa=2.5                                               ).name SIMPLE [(studenttab)studenttab.FieldSchema(name:name, type:string, comment:null), ]
PREHOOK: query: insert into table char_tbl2 partition(gpa='3.5') select name, age from studenttab where gpa = 3.5
PREHOOK: type: QUERY
PREHOOK: Input: default@studenttab
PREHOOK: Output: default@char_tbl2@gpa=3.5  
POSTHOOK: query: insert into table char_tbl2 partition(gpa='3.5') select name, age from studenttab where gpa = 3.5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@studenttab
POSTHOOK: Output: default@char_tbl2@gpa=3.5  
POSTHOOK: Lineage: char_tbl2 PARTITION(gpa=3.5  ).age SIMPLE [(studenttab)studenttab.FieldSchema(name:age, type:int, comment:null), ]
POSTHOOK: Lineage: char_tbl2 PARTITION(gpa=3.5  ).name SIMPLE [(studenttab)studenttab.FieldSchema(name:name, type:string, comment:null), ]
PREHOOK: query: insert into table char_tbl2 partition(gpa='3') select name, age from studenttab where gpa = 3
PREHOOK: type: QUERY
PREHOOK: Input: default@studenttab
PREHOOK: Output: default@char_tbl2@gpa=3    
POSTHOOK: query: insert into table char_tbl2 partition(gpa='3') select name, age from studenttab where gpa = 3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@studenttab
POSTHOOK: Output: default@char_tbl2@gpa=3    
POSTHOOK: Lineage: char_tbl2 PARTITION(gpa=3    ).age SIMPLE [(studenttab)studenttab.FieldSchema(name:age, type:int, comment:null), ]
POSTHOOK: Lineage: char_tbl2 PARTITION(gpa=3    ).name SIMPLE [(studenttab)studenttab.FieldSchema(name:name, type:string, comment:null), ]
PREHOOK: query: show partitions char_tbl1
PREHOOK: type: SHOWPARTITIONS
PREHOOK: Input: default@char_tbl1
POSTHOOK: query: show partitions char_tbl1
POSTHOOK: type: SHOWPARTITIONS
POSTHOOK: Input: default@char_tbl1
gpa=2.5                                               
gpa=3.5                                               
PREHOOK: query: show partitions char_tbl2
PREHOOK: type: SHOWPARTITIONS
PREHOOK: Input: default@char_tbl2
POSTHOOK: query: show partitions char_tbl2
POSTHOOK: type: SHOWPARTITIONS
POSTHOOK: Input: default@char_tbl2
gpa=3    
gpa=3.5  
PREHOOK: query: explain vectorization select c1.name, c1.age, c1.gpa, c2.name, c2.age, c2.gpa from char_tbl1 c1 join char_tbl2 c2 on (c1.gpa = c2.gpa)
PREHOOK: type: QUERY
PREHOOK: Input: default@char_tbl1
PREHOOK: Input: default@char_tbl1@gpa=2.5                                               
PREHOOK: Input: default@char_tbl1@gpa=3.5                                               
PREHOOK: Input: default@char_tbl2
PREHOOK: Input: default@char_tbl2@gpa=3    
PREHOOK: Input: default@char_tbl2@gpa=3.5  
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain vectorization select c1.name, c1.age, c1.gpa, c2.name, c2.age, c2.gpa from char_tbl1 c1 join char_tbl2 c2 on (c1.gpa = c2.gpa)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@char_tbl1
POSTHOOK: Input: default@char_tbl1@gpa=2.5                                               
POSTHOOK: Input: default@char_tbl1@gpa=3.5                                               
POSTHOOK: Input: default@char_tbl2
POSTHOOK: Input: default@char_tbl2@gpa=3    
POSTHOOK: Input: default@char_tbl2@gpa=3.5  
POSTHOOK: Output: hdfs://### HDFS PATH ###
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: c1
                  filterExpr: gpa is not null (type: boolean)
                  Statistics: Num rows: 2 Data size: 474 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: name (type: string), age (type: int), gpa (type: char(50))
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 2 Data size: 474 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col2 (type: char(50))
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col2 (type: char(50))
                      Statistics: Num rows: 2 Data size: 474 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: int)
                    Select Operator
                      expressions: _col2 (type: char(50))
                      outputColumnNames: _col0
                      Statistics: Num rows: 2 Data size: 268 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        keys: _col0 (type: char(50))
                        minReductionHashAggr: 0.4
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 2 Data size: 268 Basic stats: COMPLETE Column stats: COMPLETE
                        Dynamic Partitioning Event Operator
                          Target column: gpa (char(5))
                          Target Input: c2
                          Partition key expr: gpa
                          Statistics: Num rows: 2 Data size: 268 Basic stats: COMPLETE Column stats: COMPLETE
                          Target Vertex: Map 3
            Execution mode: vectorized
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: c2
                  filterExpr: gpa is not null (type: boolean)
                  Statistics: Num rows: 2 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: name (type: string), age (type: int), gpa (type: char(5))
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 2 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col2 (type: char(50))
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col2 (type: char(50))
                      Statistics: Num rows: 2 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: string), _col1 (type: int)
            Execution mode: vectorized
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col2 (type: char(50))
                  1 _col2 (type: char(50))
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 2 Data size: 858 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 2 Data size: 858 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            MergeJoin Vectorization:
                enabled: false
                enableConditionsNotMet: Vectorizing MergeJoin Supported IS false

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select c1.name, c1.age, c1.gpa, c2.name, c2.age, c2.gpa from char_tbl1 c1 join char_tbl2 c2 on (c1.gpa = c2.gpa)
PREHOOK: type: QUERY
PREHOOK: Input: default@char_tbl1
PREHOOK: Input: default@char_tbl1@gpa=2.5                                               
PREHOOK: Input: default@char_tbl1@gpa=3.5                                               
PREHOOK: Input: default@char_tbl2
PREHOOK: Input: default@char_tbl2@gpa=3    
PREHOOK: Input: default@char_tbl2@gpa=3.5  
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select c1.name, c1.age, c1.gpa, c2.name, c2.age, c2.gpa from char_tbl1 c1 join char_tbl2 c2 on (c1.gpa = c2.gpa)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@char_tbl1
POSTHOOK: Input: default@char_tbl1@gpa=2.5                                               
POSTHOOK: Input: default@char_tbl1@gpa=3.5                                               
POSTHOOK: Input: default@char_tbl2
POSTHOOK: Input: default@char_tbl2@gpa=3    
POSTHOOK: Input: default@char_tbl2@gpa=3.5  
POSTHOOK: Output: hdfs://### HDFS PATH ###
alice underhill	46	3.5                                               	alice underhill	46	3.5  
PREHOOK: query: select c1.name, c1.age, c1.gpa, c2.name, c2.age, c2.gpa from char_tbl1 c1 join char_tbl2 c2 on (c1.gpa = c2.gpa)
PREHOOK: type: QUERY
PREHOOK: Input: default@char_tbl1
PREHOOK: Input: default@char_tbl1@gpa=2.5                                               
PREHOOK: Input: default@char_tbl1@gpa=3.5                                               
PREHOOK: Input: default@char_tbl2
PREHOOK: Input: default@char_tbl2@gpa=3    
PREHOOK: Input: default@char_tbl2@gpa=3.5  
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select c1.name, c1.age, c1.gpa, c2.name, c2.age, c2.gpa from char_tbl1 c1 join char_tbl2 c2 on (c1.gpa = c2.gpa)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@char_tbl1
POSTHOOK: Input: default@char_tbl1@gpa=2.5                                               
POSTHOOK: Input: default@char_tbl1@gpa=3.5                                               
POSTHOOK: Input: default@char_tbl2
POSTHOOK: Input: default@char_tbl2@gpa=3    
POSTHOOK: Input: default@char_tbl2@gpa=3.5  
POSTHOOK: Output: hdfs://### HDFS PATH ###
alice underhill	46	3.5                                               	alice underhill	46	3.5  
