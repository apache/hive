PREHOOK: query: drop table if exists char_join1_vc1
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists char_join1_vc1
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists char_join1_vc2
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists char_join1_vc2
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists char_join1_str
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists char_join1_str
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists char_join1_vc1_orc
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists char_join1_vc1_orc
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists char_join1_vc2_orc
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists char_join1_vc2_orc
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists char_join1_str_orc
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists char_join1_str_orc
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table  char_join1_vc1 (
  c1 int,
  c2 char(10)
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@char_join1_vc1
POSTHOOK: query: create table  char_join1_vc1 (
  c1 int,
  c2 char(10)
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@char_join1_vc1
PREHOOK: query: create table  char_join1_vc2 (
  c1 int,
  c2 char(20)
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@char_join1_vc2
POSTHOOK: query: create table  char_join1_vc2 (
  c1 int,
  c2 char(20)
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@char_join1_vc2
PREHOOK: query: create table  char_join1_str (
  c1 int,
  c2 string
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@char_join1_str
POSTHOOK: query: create table  char_join1_str (
  c1 int,
  c2 string
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@char_join1_str
PREHOOK: query: load data local inpath '../../data/files/vc1.txt' into table char_join1_vc1
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@char_join1_vc1
POSTHOOK: query: load data local inpath '../../data/files/vc1.txt' into table char_join1_vc1
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@char_join1_vc1
PREHOOK: query: load data local inpath '../../data/files/vc1.txt' into table char_join1_vc2
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@char_join1_vc2
POSTHOOK: query: load data local inpath '../../data/files/vc1.txt' into table char_join1_vc2
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@char_join1_vc2
PREHOOK: query: load data local inpath '../../data/files/vc1.txt' into table char_join1_str
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@char_join1_str
POSTHOOK: query: load data local inpath '../../data/files/vc1.txt' into table char_join1_str
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@char_join1_str
PREHOOK: query: create table char_join1_vc1_orc stored as orc as select * from char_join1_vc1
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@char_join1_vc1
PREHOOK: Output: database:default
PREHOOK: Output: default@char_join1_vc1_orc
POSTHOOK: query: create table char_join1_vc1_orc stored as orc as select * from char_join1_vc1
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@char_join1_vc1
POSTHOOK: Output: database:default
POSTHOOK: Output: default@char_join1_vc1_orc
POSTHOOK: Lineage: char_join1_vc1_orc.c1 SIMPLE [(char_join1_vc1)char_join1_vc1.FieldSchema(name:c1, type:int, comment:null), ]
POSTHOOK: Lineage: char_join1_vc1_orc.c2 SIMPLE [(char_join1_vc1)char_join1_vc1.FieldSchema(name:c2, type:char(10), comment:null), ]
PREHOOK: query: create table char_join1_vc2_orc stored as orc as select * from char_join1_vc2
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@char_join1_vc2
PREHOOK: Output: database:default
PREHOOK: Output: default@char_join1_vc2_orc
POSTHOOK: query: create table char_join1_vc2_orc stored as orc as select * from char_join1_vc2
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@char_join1_vc2
POSTHOOK: Output: database:default
POSTHOOK: Output: default@char_join1_vc2_orc
POSTHOOK: Lineage: char_join1_vc2_orc.c1 SIMPLE [(char_join1_vc2)char_join1_vc2.FieldSchema(name:c1, type:int, comment:null), ]
POSTHOOK: Lineage: char_join1_vc2_orc.c2 SIMPLE [(char_join1_vc2)char_join1_vc2.FieldSchema(name:c2, type:char(20), comment:null), ]
PREHOOK: query: create table char_join1_str_orc stored as orc as select * from char_join1_str
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@char_join1_str
PREHOOK: Output: database:default
PREHOOK: Output: default@char_join1_str_orc
POSTHOOK: query: create table char_join1_str_orc stored as orc as select * from char_join1_str
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@char_join1_str
POSTHOOK: Output: database:default
POSTHOOK: Output: default@char_join1_str_orc
POSTHOOK: Lineage: char_join1_str_orc.c1 SIMPLE [(char_join1_str)char_join1_str.FieldSchema(name:c1, type:int, comment:null), ]
POSTHOOK: Lineage: char_join1_str_orc.c2 SIMPLE [(char_join1_str)char_join1_str.FieldSchema(name:c2, type:string, comment:null), ]
PREHOOK: query: explain vectorization expression select * from char_join1_vc1_orc a join char_join1_vc1_orc b on (a.c2 = b.c2) order by a.c1
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression select * from char_join1_vc1_orc a join char_join1_vc1_orc b on (a.c2 = b.c2) order by a.c1
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 3 (BROADCAST_EDGE)
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                      projectedOutputColumns: [0, 1]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: SelectColumnIsNotNull(col 1) -> boolean
                    predicate: c2 is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: c1 (type: int), c2 (type: char(10))
                      outputColumnNames: _col0, _col1
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumns: [0, 1]
                      Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                      Map Join Operator
                        condition map:
                             Inner Join 0 to 1
                        keys:
                          0 _col1 (type: char(10))
                          1 _col1 (type: char(10))
                        Map Join Vectorization:
                            className: VectorMapJoinInnerStringOperator
                            native: true
                            nativeConditionsMet: hive.mapjoin.optimized.hashtable IS true, hive.vectorized.execution.mapjoin.native.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, One MapJoin Condition IS true, No nullsafe IS true, Small table vectorizes IS true, Optimized Table and Supports Key Types IS true
                        outputColumnNames: _col0, _col1, _col2, _col3
                        input vertices:
                          1 Map 3
                        Statistics: Num rows: 3 Data size: 323 Basic stats: COMPLETE Column stats: NONE
                        HybridGraceHashJoin: true
                        Reduce Output Operator
                          key expressions: _col0 (type: int)
                          sort order: +
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkObjectHashOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, Not ACID UPDATE or DELETE IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          Statistics: Num rows: 3 Data size: 323 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col1 (type: char(10)), _col2 (type: int), _col3 (type: char(10))
            Execution mode: vectorized
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                groupByVectorOutput: true
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                      projectedOutputColumns: [0, 1]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: SelectColumnIsNotNull(col 1) -> boolean
                    predicate: c2 is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: c1 (type: int), c2 (type: char(10))
                      outputColumnNames: _col0, _col1
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumns: [0, 1]
                      Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col1 (type: char(10))
                        sort order: +
                        Map-reduce partition columns: _col1 (type: char(10))
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkStringOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, Not ACID UPDATE or DELETE IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: int)
            Execution mode: vectorized
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                groupByVectorOutput: true
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                groupByVectorOutput: true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: char(10)), VALUE._col1 (type: int), VALUE._col2 (type: char(10))
                outputColumnNames: _col0, _col1, _col2, _col3
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumns: [0, 1, 2, 3]
                Statistics: Num rows: 3 Data size: 323 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 3 Data size: 323 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from char_join1_vc1_orc a join char_join1_vc1_orc b on (a.c2 = b.c2) order by a.c1
PREHOOK: type: QUERY
PREHOOK: Input: default@char_join1_vc1_orc
#### A masked pattern was here ####
POSTHOOK: query: select * from char_join1_vc1_orc a join char_join1_vc1_orc b on (a.c2 = b.c2) order by a.c1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@char_join1_vc1_orc
#### A masked pattern was here ####
1	abc       	1	abc       
1	abc       	2	abc       
2	abc       	1	abc       
2	abc       	2	abc       
3	 abc      	3	 abc      
PREHOOK: query: explain vectorization expression select * from char_join1_vc1_orc a join char_join1_vc2_orc b on (a.c2 = b.c2) order by a.c1
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression select * from char_join1_vc1_orc a join char_join1_vc2_orc b on (a.c2 = b.c2) order by a.c1
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 2 <- Map 1 (BROADCAST_EDGE)
        Reducer 3 <- Map 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                      projectedOutputColumns: [0, 1]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: SelectColumnIsNotNull(col 1) -> boolean
                    predicate: c2 is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: c1 (type: int), c2 (type: char(10))
                      outputColumnNames: _col0, _col1
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumns: [0, 1]
                      Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col1 (type: char(20))
                        sort order: +
                        Map-reduce partition columns: _col1 (type: char(20))
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkStringOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, Not ACID UPDATE or DELETE IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: int)
            Execution mode: vectorized
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                groupByVectorOutput: true
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 3 Data size: 324 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                      projectedOutputColumns: [0, 1]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: SelectColumnIsNotNull(col 1) -> boolean
                    predicate: c2 is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 324 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: c1 (type: int), c2 (type: char(20))
                      outputColumnNames: _col0, _col1
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumns: [0, 1]
                      Statistics: Num rows: 3 Data size: 324 Basic stats: COMPLETE Column stats: NONE
                      Map Join Operator
                        condition map:
                             Inner Join 0 to 1
                        keys:
                          0 _col1 (type: char(20))
                          1 _col1 (type: char(20))
                        Map Join Vectorization:
                            className: VectorMapJoinInnerStringOperator
                            native: true
                            nativeConditionsMet: hive.mapjoin.optimized.hashtable IS true, hive.vectorized.execution.mapjoin.native.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, One MapJoin Condition IS true, No nullsafe IS true, Small table vectorizes IS true, Optimized Table and Supports Key Types IS true
                        outputColumnNames: _col0, _col1, _col2, _col3
                        input vertices:
                          0 Map 1
                        Statistics: Num rows: 3 Data size: 323 Basic stats: COMPLETE Column stats: NONE
                        HybridGraceHashJoin: true
                        Reduce Output Operator
                          key expressions: _col0 (type: int)
                          sort order: +
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkObjectHashOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, Not ACID UPDATE or DELETE IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          Statistics: Num rows: 3 Data size: 323 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col1 (type: char(10)), _col2 (type: int), _col3 (type: char(20))
            Execution mode: vectorized
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                groupByVectorOutput: true
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 3 
            Execution mode: vectorized
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                groupByVectorOutput: true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: char(10)), VALUE._col1 (type: int), VALUE._col2 (type: char(20))
                outputColumnNames: _col0, _col1, _col2, _col3
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumns: [0, 1, 2, 3]
                Statistics: Num rows: 3 Data size: 323 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 3 Data size: 323 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from char_join1_vc1_orc a join char_join1_vc2_orc b on (a.c2 = b.c2) order by a.c1
PREHOOK: type: QUERY
PREHOOK: Input: default@char_join1_vc1_orc
PREHOOK: Input: default@char_join1_vc2_orc
#### A masked pattern was here ####
POSTHOOK: query: select * from char_join1_vc1_orc a join char_join1_vc2_orc b on (a.c2 = b.c2) order by a.c1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@char_join1_vc1_orc
POSTHOOK: Input: default@char_join1_vc2_orc
#### A masked pattern was here ####
1	abc       	1	abc                 
1	abc       	2	abc                 
2	abc       	1	abc                 
2	abc       	2	abc                 
3	 abc      	3	 abc                
PREHOOK: query: explain vectorization expression select * from char_join1_vc1_orc a join char_join1_str_orc b on (a.c2 = b.c2) order by a.c1
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression select * from char_join1_vc1_orc a join char_join1_str_orc b on (a.c2 = b.c2) order by a.c1
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 3 (BROADCAST_EDGE)
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                      projectedOutputColumns: [0, 1]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: SelectColumnIsNotNull(col 1) -> boolean
                    predicate: c2 is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: c1 (type: int), c2 (type: char(10))
                      outputColumnNames: _col0, _col1
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumns: [0, 1]
                      Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                      Map Join Operator
                        condition map:
                             Inner Join 0 to 1
                        keys:
                          0 UDFToString(_col1) (type: string)
                          1 _col1 (type: string)
                        Map Join Vectorization:
                            bigTableKeyExpressions: CastStringGroupToString(col 1) -> 2:String
                            className: VectorMapJoinInnerStringOperator
                            native: true
                            nativeConditionsMet: hive.mapjoin.optimized.hashtable IS true, hive.vectorized.execution.mapjoin.native.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, One MapJoin Condition IS true, No nullsafe IS true, Small table vectorizes IS true, Optimized Table and Supports Key Types IS true
                        outputColumnNames: _col0, _col1, _col2, _col3
                        input vertices:
                          1 Map 3
                        Statistics: Num rows: 3 Data size: 323 Basic stats: COMPLETE Column stats: NONE
                        HybridGraceHashJoin: true
                        Reduce Output Operator
                          key expressions: _col0 (type: int)
                          sort order: +
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkObjectHashOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, Not ACID UPDATE or DELETE IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          Statistics: Num rows: 3 Data size: 323 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col1 (type: char(10)), _col2 (type: int), _col3 (type: string)
            Execution mode: vectorized
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                groupByVectorOutput: true
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                      projectedOutputColumns: [0, 1]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: SelectColumnIsNotNull(col 1) -> boolean
                    predicate: c2 is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: c1 (type: int), c2 (type: string)
                      outputColumnNames: _col0, _col1
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumns: [0, 1]
                      Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col1 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col1 (type: string)
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkStringOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true, Not ACID UPDATE or DELETE IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 3 Data size: 273 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: int)
            Execution mode: vectorized
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                groupByVectorOutput: true
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                groupByVectorOutput: true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: char(10)), VALUE._col1 (type: int), VALUE._col2 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumns: [0, 1, 2, 3]
                Statistics: Num rows: 3 Data size: 323 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 3 Data size: 323 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from char_join1_vc1_orc a join char_join1_str_orc b on (a.c2 = b.c2) order by a.c1
PREHOOK: type: QUERY
PREHOOK: Input: default@char_join1_str_orc
PREHOOK: Input: default@char_join1_vc1_orc
#### A masked pattern was here ####
POSTHOOK: query: select * from char_join1_vc1_orc a join char_join1_str_orc b on (a.c2 = b.c2) order by a.c1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@char_join1_str_orc
POSTHOOK: Input: default@char_join1_vc1_orc
#### A masked pattern was here ####
1	abc       	1	abc
2	abc       	1	abc
3	 abc      	3	 abc
PREHOOK: query: drop table char_join1_vc1
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@char_join1_vc1
PREHOOK: Output: default@char_join1_vc1
POSTHOOK: query: drop table char_join1_vc1
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@char_join1_vc1
POSTHOOK: Output: default@char_join1_vc1
PREHOOK: query: drop table char_join1_vc2
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@char_join1_vc2
PREHOOK: Output: default@char_join1_vc2
POSTHOOK: query: drop table char_join1_vc2
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@char_join1_vc2
POSTHOOK: Output: default@char_join1_vc2
PREHOOK: query: drop table char_join1_str
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@char_join1_str
PREHOOK: Output: default@char_join1_str
POSTHOOK: query: drop table char_join1_str
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@char_join1_str
POSTHOOK: Output: default@char_join1_str
PREHOOK: query: drop table char_join1_vc1_orc
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@char_join1_vc1_orc
PREHOOK: Output: default@char_join1_vc1_orc
POSTHOOK: query: drop table char_join1_vc1_orc
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@char_join1_vc1_orc
POSTHOOK: Output: default@char_join1_vc1_orc
PREHOOK: query: drop table char_join1_vc2_orc
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@char_join1_vc2_orc
PREHOOK: Output: default@char_join1_vc2_orc
POSTHOOK: query: drop table char_join1_vc2_orc
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@char_join1_vc2_orc
POSTHOOK: Output: default@char_join1_vc2_orc
PREHOOK: query: drop table char_join1_str_orc
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@char_join1_str_orc
PREHOOK: Output: default@char_join1_str_orc
POSTHOOK: query: drop table char_join1_str_orc
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@char_join1_str_orc
POSTHOOK: Output: default@char_join1_str_orc
