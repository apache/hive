PREHOOK: query: CREATE TABLE non_orc_table(a INT, b STRING) CLUSTERED BY(a) INTO 2 BUCKETS STORED AS sequencefile
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@non_orc_table
POSTHOOK: query: CREATE TABLE non_orc_table(a INT, b STRING) CLUSTERED BY(a) INTO 2 BUCKETS STORED AS sequencefile
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@non_orc_table
PREHOOK: query: explain vectorization expression
insert into table non_orc_table values(1, 'one'),(1, 'one'), (2, 'two'),(3, 'three')
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization expression
insert into table non_orc_table values(1, 'one'),(1, 'one'), (2, 'two'),(3, 'three')
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: values__tmp__table__1
                  Statistics: Num rows: 1 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: tmp_values_col1 (type: string), tmp_values_col2 (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      sort order: 
                      Map-reduce partition columns: UDFToInteger(_col0) (type: int)
                      Statistics: Num rows: 1 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: string), _col1 (type: string)
            Map Vectorization:
                enabled: false
                enabledConditionsNotMet: hive.vectorized.use.vector.serde.deserialize IS false
                inputFileFormats: org.apache.hadoop.mapred.TextInputFormat
        Reducer 2 
            Execution mode: vectorized
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez, spark] IS true
                groupByVectorOutput: true
                allNative: false
                usesVectorUDFAdaptor: true
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: UDFToInteger(VALUE._col0) (type: int), VALUE._col1 (type: string)
                outputColumnNames: _col0, _col1
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumns: [2, 1]
                    selectExpressions: VectorUDFAdaptor(UDFToInteger(VALUE._col0)) -> 2:int
                Statistics: Num rows: 1 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.non_orc_table

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          replace: false
          table:
              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.non_orc_table

  Stage: Stage-3
    Stats-Aggr Operator

PREHOOK: query: select a, b from non_orc_table order by a
PREHOOK: type: QUERY
PREHOOK: Input: default@non_orc_table
#### A masked pattern was here ####
POSTHOOK: query: select a, b from non_orc_table order by a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@non_orc_table
#### A masked pattern was here ####
PREHOOK: query: insert into table non_orc_table values(1, 'one'),(1, 'one'), (2, 'two'),(3, 'three')
PREHOOK: type: QUERY
PREHOOK: Output: default@non_orc_table
POSTHOOK: query: insert into table non_orc_table values(1, 'one'),(1, 'one'), (2, 'two'),(3, 'three')
POSTHOOK: type: QUERY
POSTHOOK: Output: default@non_orc_table
POSTHOOK: Lineage: non_orc_table.a EXPRESSION [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: non_orc_table.b SIMPLE [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
PREHOOK: query: select a, b from non_orc_table order by a
PREHOOK: type: QUERY
PREHOOK: Input: default@non_orc_table
#### A masked pattern was here ####
POSTHOOK: query: select a, b from non_orc_table order by a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@non_orc_table
#### A masked pattern was here ####
1	one
1	one
2	two
3	three
