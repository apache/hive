PREHOOK: query: drop table employee
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table employee
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table employee (department_id int, gender varchar(10), education_level int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@employee
POSTHOOK: query: create table employee (department_id int, gender varchar(10), education_level int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@employee
PREHOOK: query: insert into employee values (1, 'M', 1),(1, 'M', 1),(2, 'F', 1),(1, 'F', 3),(1, 'M', 2),(4, 'M', 1),(2, 'F', 1),(2, 'F', 3),(3, 'M', 2)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@employee
POSTHOOK: query: insert into employee values (1, 'M', 1),(1, 'M', 1),(2, 'F', 1),(1, 'F', 3),(1, 'M', 2),(4, 'M', 1),(2, 'F', 1),(2, 'F', 3),(3, 'M', 2)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@employee
POSTHOOK: Lineage: employee.department_id SCRIPT []
POSTHOOK: Lineage: employee.education_level SCRIPT []
POSTHOOK: Lineage: employee.gender SCRIPT []
PREHOOK: query: explain select count(distinct department_id), count(distinct gender), count(distinct education_level) from employee
PREHOOK: type: QUERY
POSTHOOK: query: explain select count(distinct department_id), count(distinct gender), count(distinct education_level) from employee
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3
      File Output Operator [FS_12]
        Group By Operator [GBY_10] (rows=1 width=24)
          Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)","count(VALUE._col1)","count(VALUE._col2)"]
        <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
          PARTITION_ONLY_SHUFFLE [RS_9]
            Group By Operator [GBY_8] (rows=1 width=24)
              Output:["_col0","_col1","_col2"],aggregations:["count(_col0)","count(_col1)","count(_col2)"]
              Select Operator [SEL_6] (rows=13 width=101)
                Output:["_col0","_col1","_col2"]
                Group By Operator [GBY_5] (rows=13 width=101)
                  Output:["_col0","_col1","_col2","_col3"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                <-Map 1 [SIMPLE_EDGE]
                  SHUFFLE [RS_4]
                    PartitionCols:_col0, _col1, _col2, _col3
                    Group By Operator [GBY_3] (rows=13 width=101)
                      Output:["_col0","_col1","_col2","_col3"],keys:_col0, _col1, _col2, 0
                      Select Operator [SEL_1] (rows=9 width=93)
                        Output:["_col0","_col1","_col2"]
                        TableScan [TS_0] (rows=9 width=93)
                          default@employee,employee,Tbl:COMPLETE,Col:COMPLETE,Output:["department_id","gender","education_level"]

PREHOOK: query: select count(distinct department_id), count(distinct gender), count(distinct education_level) from employee
PREHOOK: type: QUERY
PREHOOK: Input: default@employee
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select count(distinct department_id), count(distinct gender), count(distinct education_level) from employee
POSTHOOK: type: QUERY
POSTHOOK: Input: default@employee
POSTHOOK: Output: hdfs://### HDFS PATH ###
4	2	3
PREHOOK: query: select count(distinct department_id), count(distinct gender), count(distinct education_level), count(distinct education_level) from employee
PREHOOK: type: QUERY
PREHOOK: Input: default@employee
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select count(distinct department_id), count(distinct gender), count(distinct education_level), count(distinct education_level) from employee
POSTHOOK: type: QUERY
POSTHOOK: Input: default@employee
POSTHOOK: Output: hdfs://### HDFS PATH ###
4	2	3	3
PREHOOK: query: select count(distinct department_id), count(distinct gender), count(distinct education_level), 
count(distinct education_level, department_id) from employee
PREHOOK: type: QUERY
PREHOOK: Input: default@employee
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select count(distinct department_id), count(distinct gender), count(distinct education_level), 
count(distinct education_level, department_id) from employee
POSTHOOK: type: QUERY
POSTHOOK: Input: default@employee
POSTHOOK: Output: hdfs://### HDFS PATH ###
4	2	3	7
PREHOOK: query: select count(distinct gender), count(distinct department_id), count(distinct gender), count(distinct education_level),
count(distinct education_level, department_id), count(distinct department_id, education_level) from employee
PREHOOK: type: QUERY
PREHOOK: Input: default@employee
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select count(distinct gender), count(distinct department_id), count(distinct gender), count(distinct education_level),
count(distinct education_level, department_id), count(distinct department_id, education_level) from employee
POSTHOOK: type: QUERY
POSTHOOK: Input: default@employee
POSTHOOK: Output: hdfs://### HDFS PATH ###
2	4	2	3	7	7
PREHOOK: query: explain select count(distinct gender), count(distinct department_id), count(distinct gender), count(distinct education_level),
count(distinct education_level, department_id), count(distinct department_id, education_level), count(distinct department_id, education_level, gender) from employee
PREHOOK: type: QUERY
POSTHOOK: query: explain select count(distinct gender), count(distinct department_id), count(distinct gender), count(distinct education_level),
count(distinct education_level, department_id), count(distinct department_id, education_level), count(distinct department_id, education_level, gender) from employee
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3
      File Output Operator [FS_12]
        Select Operator [SEL_11] (rows=1 width=56)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          Group By Operator [GBY_10] (rows=1 width=40)
            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count(VALUE._col0)","count(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","count(VALUE._col4)"]
          <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_9]
              Group By Operator [GBY_8] (rows=1 width=40)
                Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count(_col0)","count(_col1)","count(_col2)","count(_col3)","count(_col4)"]
                Select Operator [SEL_6] (rows=22 width=101)
                  Output:["_col0","_col1","_col2","_col3","_col4"]
                  Group By Operator [GBY_5] (rows=22 width=101)
                    Output:["_col0","_col1","_col2","_col3"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                  <-Map 1 [SIMPLE_EDGE]
                    SHUFFLE [RS_4]
                      PartitionCols:_col0, _col1, _col2, _col3
                      Group By Operator [GBY_3] (rows=22 width=101)
                        Output:["_col0","_col1","_col2","_col3"],keys:_col0, _col1, _col2, 0
                        Select Operator [SEL_1] (rows=9 width=93)
                          Output:["_col0","_col1","_col2"]
                          TableScan [TS_0] (rows=9 width=93)
                            default@employee,employee,Tbl:COMPLETE,Col:COMPLETE,Output:["gender","department_id","education_level"]

PREHOOK: query: select count(distinct gender), count(distinct department_id), count(distinct gender), count(distinct education_level),
count(distinct education_level, department_id), count(distinct department_id, education_level), count(distinct department_id, education_level, gender) from employee
PREHOOK: type: QUERY
PREHOOK: Input: default@employee
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select count(distinct gender), count(distinct department_id), count(distinct gender), count(distinct education_level),
count(distinct education_level, department_id), count(distinct department_id, education_level), count(distinct department_id, education_level, gender) from employee
POSTHOOK: type: QUERY
POSTHOOK: Input: default@employee
POSTHOOK: Output: hdfs://### HDFS PATH ###
2	4	2	3	7	7	7
PREHOOK: query: select count(case i when 3 then 1 else null end) as c0, count(case i when 5 then 1 else null end) as c1, 
count(case i when 6 then 1 else null end) as c2 from (select grouping__id as i, department_id, gender, 
education_level from employee group by department_id, gender, education_level grouping sets 
(department_id, gender, education_level))subq
PREHOOK: type: QUERY
PREHOOK: Input: default@employee
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select count(case i when 3 then 1 else null end) as c0, count(case i when 5 then 1 else null end) as c1, 
count(case i when 6 then 1 else null end) as c2 from (select grouping__id as i, department_id, gender, 
education_level from employee group by department_id, gender, education_level grouping sets 
(department_id, gender, education_level))subq
POSTHOOK: type: QUERY
POSTHOOK: Input: default@employee
POSTHOOK: Output: hdfs://### HDFS PATH ###
4	2	3
PREHOOK: query: select grouping__id as i, department_id, gender, education_level from employee 
group by department_id, gender, education_level grouping sets 
(department_id, gender, education_level, (education_level, department_id))
PREHOOK: type: QUERY
PREHOOK: Input: default@employee
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select grouping__id as i, department_id, gender, education_level from employee 
group by department_id, gender, education_level grouping sets 
(department_id, gender, education_level, (education_level, department_id))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@employee
POSTHOOK: Output: hdfs://### HDFS PATH ###
6	NULL	NULL	1
6	NULL	NULL	2
6	NULL	NULL	3
5	NULL	F	NULL
5	NULL	M	NULL
3	1	NULL	NULL
2	1	NULL	1
2	1	NULL	2
2	1	NULL	3
3	2	NULL	NULL
2	2	NULL	1
2	2	NULL	3
3	3	NULL	NULL
2	3	NULL	2
3	4	NULL	NULL
2	4	NULL	1
