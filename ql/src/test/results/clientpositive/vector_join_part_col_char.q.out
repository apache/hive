PREHOOK: query: drop table if exists char_part_tbl1
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists char_part_tbl1
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists char_part_tbl2
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists char_part_tbl2
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table studenttab(name string, age int, gpa double) clustered by (age) into 2 buckets stored as orc tblproperties('transactional'='true')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@studenttab
POSTHOOK: query: create table studenttab(name string, age int, gpa double) clustered by (age) into 2 buckets stored as orc tblproperties('transactional'='true')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@studenttab
PREHOOK: query: insert into table studenttab values ('calvin garcia',56,2.50), ('oscar miller',66,3.00), ('(yuri xylophone',30,2.74),('alice underhill',46,3.50)
PREHOOK: type: QUERY
PREHOOK: Output: default@studenttab
POSTHOOK: query: insert into table studenttab values ('calvin garcia',56,2.50), ('oscar miller',66,3.00), ('(yuri xylophone',30,2.74),('alice underhill',46,3.50)
POSTHOOK: type: QUERY
POSTHOOK: Output: default@studenttab
POSTHOOK: Lineage: studenttab.age EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
POSTHOOK: Lineage: studenttab.gpa EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col3, type:string, comment:), ]
POSTHOOK: Lineage: studenttab.name SIMPLE [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
PREHOOK: query: create table char_tbl1(name string, age int) partitioned  by(gpa char(50)) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@char_tbl1
POSTHOOK: query: create table char_tbl1(name string, age int) partitioned  by(gpa char(50)) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@char_tbl1
PREHOOK: query: create table char_tbl2(name string, age int) partitioned by(gpa char(5)) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@char_tbl2
POSTHOOK: query: create table char_tbl2(name string, age int) partitioned by(gpa char(5)) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@char_tbl2
PREHOOK: query: insert into table char_tbl1 partition(gpa='3.5') select name, age from studenttab where gpa = 3.5
PREHOOK: type: QUERY
PREHOOK: Input: default@studenttab
PREHOOK: Output: default@char_tbl1@gpa=3.5                                               
POSTHOOK: query: insert into table char_tbl1 partition(gpa='3.5') select name, age from studenttab where gpa = 3.5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@studenttab
POSTHOOK: Output: default@char_tbl1@gpa=3.5                                               
POSTHOOK: Lineage: char_tbl1 PARTITION(gpa=3.5                                               ).age SIMPLE [(studenttab)studenttab.FieldSchema(name:age, type:int, comment:null), ]
POSTHOOK: Lineage: char_tbl1 PARTITION(gpa=3.5                                               ).name SIMPLE [(studenttab)studenttab.FieldSchema(name:name, type:string, comment:null), ]
PREHOOK: query: insert into table char_tbl1 partition(gpa='2.5') select name, age from studenttab where gpa = 2.5
PREHOOK: type: QUERY
PREHOOK: Input: default@studenttab
PREHOOK: Output: default@char_tbl1@gpa=2.5                                               
POSTHOOK: query: insert into table char_tbl1 partition(gpa='2.5') select name, age from studenttab where gpa = 2.5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@studenttab
POSTHOOK: Output: default@char_tbl1@gpa=2.5                                               
POSTHOOK: Lineage: char_tbl1 PARTITION(gpa=2.5                                               ).age SIMPLE [(studenttab)studenttab.FieldSchema(name:age, type:int, comment:null), ]
POSTHOOK: Lineage: char_tbl1 PARTITION(gpa=2.5                                               ).name SIMPLE [(studenttab)studenttab.FieldSchema(name:name, type:string, comment:null), ]
PREHOOK: query: insert into table char_tbl2 partition(gpa='3.5') select name, age from studenttab where gpa = 3.5
PREHOOK: type: QUERY
PREHOOK: Input: default@studenttab
PREHOOK: Output: default@char_tbl2@gpa=3.5  
POSTHOOK: query: insert into table char_tbl2 partition(gpa='3.5') select name, age from studenttab where gpa = 3.5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@studenttab
POSTHOOK: Output: default@char_tbl2@gpa=3.5  
POSTHOOK: Lineage: char_tbl2 PARTITION(gpa=3.5  ).age SIMPLE [(studenttab)studenttab.FieldSchema(name:age, type:int, comment:null), ]
POSTHOOK: Lineage: char_tbl2 PARTITION(gpa=3.5  ).name SIMPLE [(studenttab)studenttab.FieldSchema(name:name, type:string, comment:null), ]
PREHOOK: query: insert into table char_tbl2 partition(gpa='3') select name, age from studenttab where gpa = 3
PREHOOK: type: QUERY
PREHOOK: Input: default@studenttab
PREHOOK: Output: default@char_tbl2@gpa=3    
POSTHOOK: query: insert into table char_tbl2 partition(gpa='3') select name, age from studenttab where gpa = 3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@studenttab
POSTHOOK: Output: default@char_tbl2@gpa=3    
POSTHOOK: Lineage: char_tbl2 PARTITION(gpa=3    ).age SIMPLE [(studenttab)studenttab.FieldSchema(name:age, type:int, comment:null), ]
POSTHOOK: Lineage: char_tbl2 PARTITION(gpa=3    ).name SIMPLE [(studenttab)studenttab.FieldSchema(name:name, type:string, comment:null), ]
PREHOOK: query: show partitions char_tbl1
PREHOOK: type: SHOWPARTITIONS
PREHOOK: Input: default@char_tbl1
POSTHOOK: query: show partitions char_tbl1
POSTHOOK: type: SHOWPARTITIONS
POSTHOOK: Input: default@char_tbl1
gpa=2.5                                               
gpa=3.5                                               
PREHOOK: query: show partitions char_tbl2
PREHOOK: type: SHOWPARTITIONS
PREHOOK: Input: default@char_tbl2
POSTHOOK: query: show partitions char_tbl2
POSTHOOK: type: SHOWPARTITIONS
POSTHOOK: Input: default@char_tbl2
gpa=3    
gpa=3.5  
PREHOOK: query: explain vectorization select c1.name, c1.age, c1.gpa, c2.name, c2.age, c2.gpa from char_tbl1 c1 join char_tbl2 c2 on (c1.gpa = c2.gpa)
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization select c1.name, c1.age, c1.gpa, c2.name, c2.age, c2.gpa from char_tbl1 c1 join char_tbl2 c2 on (c1.gpa = c2.gpa)
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: c1
            Statistics: Num rows: 2 Data size: 204 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: name (type: string), age (type: int), gpa (type: char(50))
              outputColumnNames: _col0, _col1, _col2
              Statistics: Num rows: 2 Data size: 204 Basic stats: COMPLETE Column stats: NONE
              Reduce Output Operator
                key expressions: _col2 (type: char(50))
                sort order: +
                Map-reduce partition columns: _col2 (type: char(50))
                Statistics: Num rows: 2 Data size: 204 Basic stats: COMPLETE Column stats: NONE
                value expressions: _col0 (type: string), _col1 (type: int)
          TableScan
            alias: c2
            Statistics: Num rows: 2 Data size: 203 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: name (type: string), age (type: int), gpa (type: char(5))
              outputColumnNames: _col0, _col1, _col2
              Statistics: Num rows: 2 Data size: 203 Basic stats: COMPLETE Column stats: NONE
              Reduce Output Operator
                key expressions: _col2 (type: char(50))
                sort order: +
                Map-reduce partition columns: _col2 (type: char(50))
                Statistics: Num rows: 2 Data size: 203 Basic stats: COMPLETE Column stats: NONE
                value expressions: _col0 (type: string), _col1 (type: int)
      Map Vectorization:
          enabled: false
          enabledConditionsNotMet: Vectorized map work only works with 1 TableScanOperator IS false
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          keys:
            0 _col2 (type: char(50))
            1 _col2 (type: char(50))
          outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
          Statistics: Num rows: 2 Data size: 224 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 2 Data size: 224 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select c1.name, c1.age, c1.gpa, c2.name, c2.age, c2.gpa from char_tbl1 c1 join char_tbl2 c2 on (c1.gpa = c2.gpa)
PREHOOK: type: QUERY
PREHOOK: Input: default@char_tbl1
PREHOOK: Input: default@char_tbl1@gpa=2.5                                               
PREHOOK: Input: default@char_tbl1@gpa=3.5                                               
PREHOOK: Input: default@char_tbl2
PREHOOK: Input: default@char_tbl2@gpa=3    
PREHOOK: Input: default@char_tbl2@gpa=3.5  
#### A masked pattern was here ####
POSTHOOK: query: select c1.name, c1.age, c1.gpa, c2.name, c2.age, c2.gpa from char_tbl1 c1 join char_tbl2 c2 on (c1.gpa = c2.gpa)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@char_tbl1
POSTHOOK: Input: default@char_tbl1@gpa=2.5                                               
POSTHOOK: Input: default@char_tbl1@gpa=3.5                                               
POSTHOOK: Input: default@char_tbl2
POSTHOOK: Input: default@char_tbl2@gpa=3    
POSTHOOK: Input: default@char_tbl2@gpa=3.5  
#### A masked pattern was here ####
alice underhill	46	3.5                                               	alice underhill	46	3.5  
PREHOOK: query: select c1.name, c1.age, c1.gpa, c2.name, c2.age, c2.gpa from char_tbl1 c1 join char_tbl2 c2 on (c1.gpa = c2.gpa)
PREHOOK: type: QUERY
PREHOOK: Input: default@char_tbl1
PREHOOK: Input: default@char_tbl1@gpa=2.5                                               
PREHOOK: Input: default@char_tbl1@gpa=3.5                                               
PREHOOK: Input: default@char_tbl2
PREHOOK: Input: default@char_tbl2@gpa=3    
PREHOOK: Input: default@char_tbl2@gpa=3.5  
#### A masked pattern was here ####
POSTHOOK: query: select c1.name, c1.age, c1.gpa, c2.name, c2.age, c2.gpa from char_tbl1 c1 join char_tbl2 c2 on (c1.gpa = c2.gpa)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@char_tbl1
POSTHOOK: Input: default@char_tbl1@gpa=2.5                                               
POSTHOOK: Input: default@char_tbl1@gpa=3.5                                               
POSTHOOK: Input: default@char_tbl2
POSTHOOK: Input: default@char_tbl2@gpa=3    
POSTHOOK: Input: default@char_tbl2@gpa=3.5  
#### A masked pattern was here ####
alice underhill	46	3.5                                               	alice underhill	46	3.5  
