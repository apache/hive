PREHOOK: query: create table testvec(id int, dt int, greg_dt string) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@testvec
POSTHOOK: query: create table testvec(id int, dt int, greg_dt string) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@testvec
PREHOOK: query: insert into table testvec
values
(1,20150330, '2015-03-30'),
(2,20150301, '2015-03-01'),
(3,20150502, '2015-05-02'),
(4,20150401, '2015-04-01'),
(5,20150313, '2015-03-13'),
(6,20150314, '2015-03-14'),
(7,20150404, '2015-04-04')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@testvec
POSTHOOK: query: insert into table testvec
values
(1,20150330, '2015-03-30'),
(2,20150301, '2015-03-01'),
(3,20150502, '2015-05-02'),
(4,20150401, '2015-04-01'),
(5,20150313, '2015-03-13'),
(6,20150314, '2015-03-14'),
(7,20150404, '2015-04-04')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@testvec
POSTHOOK: Lineage: testvec.dt SCRIPT []
POSTHOOK: Lineage: testvec.greg_dt SCRIPT []
POSTHOOK: Lineage: testvec.id SCRIPT []
PREHOOK: query: explain vectorization detail
select max(dt), max(greg_dt) from testvec where id=5
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select max(dt), max(greg_dt) from testvec where id=5
POSTHOOK: type: QUERY
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: testvec
            Statistics: Num rows: 7 Data size: 714 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                vectorizationSchemaColumns: [0:id:int, 1:dt:int, 2:greg_dt:string, 3:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
            Filter Operator
              Filter Vectorization:
                  className: VectorFilterOperator
                  native: true
                  predicateExpression: FilterLongColEqualLongScalar(col 0:int, val 5)
              predicate: (id = 5) (type: boolean)
              Statistics: Num rows: 3 Data size: 306 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: dt (type: int), greg_dt (type: string)
                outputColumnNames: dt, greg_dt
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [1, 2]
                Statistics: Num rows: 3 Data size: 306 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: max(dt), max(greg_dt)
                  Group By Vectorization:
                      aggregators: VectorUDAFMaxLong(col 1:int) -> int, VectorUDAFMaxString(col 2:string) -> string
                      className: VectorGroupByOperator
                      groupByMode: HASH
                      native: false
                      vectorProcessingMode: HASH
                      projectedOutputColumnNums: [0, 1]
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    sort order: 
                    Reduce Sink Vectorization:
                        className: VectorReduceSinkOperator
                        native: false
                        nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
                    Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: int), _col1 (type: string)
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          inputFormatFeatureSupport: []
          featureSupportInUse: []
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 3
              includeColumns: [0, 1, 2]
              dataColumns: id:int, dt:int, greg_dt:string
              partitionColumnCount: 0
              scratchColumnTypeNames: []
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Group By Operator
          aggregations: max(VALUE._col0), max(VALUE._col1)
          mode: mergepartial
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select max(dt), max(greg_dt) from testvec where id=5
PREHOOK: type: QUERY
PREHOOK: Input: default@testvec
#### A masked pattern was here ####
POSTHOOK: query: select max(dt), max(greg_dt) from testvec where id=5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@testvec
#### A masked pattern was here ####
20150313	2015-03-13
