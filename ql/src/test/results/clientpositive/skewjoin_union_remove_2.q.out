PREHOOK: query: CREATE TABLE T1_n8(key STRING, val STRING)
SKEWED BY (key) ON ((2), (8)) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@T1_n8
POSTHOOK: query: CREATE TABLE T1_n8(key STRING, val STRING)
SKEWED BY (key) ON ((2), (8)) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@T1_n8
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/T1.txt' INTO TABLE T1_n8
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@t1_n8
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/T1.txt' INTO TABLE T1_n8
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@t1_n8
PREHOOK: query: CREATE TABLE T2_n4(key STRING, val STRING)
SKEWED BY (key) ON ((3), (8)) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@T2_n4
POSTHOOK: query: CREATE TABLE T2_n4(key STRING, val STRING)
SKEWED BY (key) ON ((3), (8)) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@T2_n4
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/T2.txt' INTO TABLE T2_n4
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@t2_n4
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/T2.txt' INTO TABLE T2_n4
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@t2_n4
PREHOOK: query: CREATE TABLE T3_n2(key STRING, val STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@T3_n2
POSTHOOK: query: CREATE TABLE T3_n2(key STRING, val STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@T3_n2
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/T3.txt' INTO TABLE T3_n2
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@t3_n2
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/T3.txt' INTO TABLE T3_n2
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@t3_n2
PREHOOK: query: EXPLAIN
SELECT a.*, b.*, c.* FROM T1_n8 a JOIN T2_n4 b ON a.key = b.key JOIN T3_n2 c on a.key = c.key
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT a.*, b.*, c.* FROM T1_n8 a JOIN T2_n4 b ON a.key = b.key JOIN T3_n2 c on a.key = c.key
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-4 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: a
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: ((((key = '2') or (key = '8')) or (key = '3')) and key is not null) (type: boolean)
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: key (type: string), val (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string)
                  sort order: +
                  Map-reduce partition columns: _col0 (type: string)
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: string)
          TableScan
            alias: b
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: ((((key = '2') or (key = '8')) or (key = '3')) and key is not null) (type: boolean)
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: key (type: string), val (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string)
                  sort order: +
                  Map-reduce partition columns: _col0 (type: string)
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: string)
          TableScan
            alias: c
            Statistics: Num rows: 1 Data size: 200 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: ((((key = '2') or (key = '8')) or (key = '3')) and key is not null) (type: boolean)
              Statistics: Num rows: 1 Data size: 200 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: key (type: string), val (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 200 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string)
                  sort order: +
                  Map-reduce partition columns: _col0 (type: string)
                  Statistics: Num rows: 1 Data size: 200 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: string)
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
               Inner Join 0 to 2
          keys:
            0 _col0 (type: string)
            1 _col0 (type: string)
            2 _col0 (type: string)
          outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
          Statistics: Num rows: 2 Data size: 660 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 2 Data size: 660 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-4
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: a
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: ((not (((key = '2') or (key = '8')) or (key = '3'))) and key is not null) (type: boolean)
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: key (type: string), val (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string)
                  sort order: +
                  Map-reduce partition columns: _col0 (type: string)
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: string)
          TableScan
            alias: b
            Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: ((not (((key = '2') or (key = '8')) or (key = '3'))) and key is not null) (type: boolean)
              Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: key (type: string), val (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string)
                  sort order: +
                  Map-reduce partition columns: _col0 (type: string)
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: string)
          TableScan
            alias: c
            Statistics: Num rows: 1 Data size: 200 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: ((not (((key = '2') or (key = '8')) or (key = '3'))) and key is not null) (type: boolean)
              Statistics: Num rows: 1 Data size: 200 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: key (type: string), val (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 200 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string)
                  sort order: +
                  Map-reduce partition columns: _col0 (type: string)
                  Statistics: Num rows: 1 Data size: 200 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: string)
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
               Inner Join 0 to 2
          outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
          Statistics: Num rows: 2 Data size: 660 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 2 Data size: 660 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT a.*, b.*, c.* FROM T1_n8 a JOIN T2_n4 b ON a.key = b.key JOIN T3_n2 c on a.key = c.key
ORDER BY a.key, b.key, c.key, a.val, b.val, c.val
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n8
PREHOOK: Input: default@t2_n4
PREHOOK: Input: default@t3_n2
#### A masked pattern was here ####
POSTHOOK: query: SELECT a.*, b.*, c.* FROM T1_n8 a JOIN T2_n4 b ON a.key = b.key JOIN T3_n2 c on a.key = c.key
ORDER BY a.key, b.key, c.key, a.val, b.val, c.val
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n8
POSTHOOK: Input: default@t2_n4
POSTHOOK: Input: default@t3_n2
#### A masked pattern was here ####
2	12	2	22	2	12
