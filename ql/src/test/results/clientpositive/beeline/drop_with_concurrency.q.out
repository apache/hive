>>>  !run !!{qFileDirectory}!!/drop_with_concurrency.q
>>>  set hive.lock.numretries=1;
No rows affected 
>>>  set hive.lock.sleep.between.retries=1;
No rows affected 
>>>  set hive.support.concurrency=true;
No rows affected 
>>>  set hive.lock.manager=org.apache.hadoop.hive.ql.lockmgr.EmbeddedLockManager;
No rows affected 
>>>  
>>>  drop table if exists drop_with_concurrency_1;
Acquired the compile lock.
Compiling commandqueryId=(!!{queryId}!!): drop table if exists drop_with_concurrency_1
Semantic Analysis Completed
Returning Hive schema: Schema(fieldSchemas:null, properties:null)
Completed compiling commandqueryId=(!!{queryId}!!); Time taken: !!ELIDED!! seconds
Executing commandqueryId=(!!{queryId}!!): drop table if exists drop_with_concurrency_1
PREHOOK: query: drop table if exists drop_with_concurrency_1
PREHOOK: type: DROPTABLE
Starting task [Stage-0:DDL] in serial mode
POSTHOOK: query: drop table if exists drop_with_concurrency_1
POSTHOOK: type: DROPTABLE
Completed executing commandqueryId=(!!{queryId}!!); Time taken: !!ELIDED!! seconds
OK
Shutting down query drop table if exists drop_with_concurrency_1
No rows affected 
>>>  create table drop_with_concurrency_1 (c1 int);
Acquired the compile lock.
Compiling commandqueryId=(!!{queryId}!!): create table drop_with_concurrency_1 (c1 int)
Semantic Analysis Completed
Returning Hive schema: Schema(fieldSchemas:null, properties:null)
Completed compiling commandqueryId=(!!{queryId}!!); Time taken: !!ELIDED!! seconds
Executing commandqueryId=(!!{queryId}!!): create table drop_with_concurrency_1 (c1 int)
PREHOOK: query: create table drop_with_concurrency_1 (c1 int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:drop_with_concurrency
PREHOOK: Output: drop_with_concurrency@drop_with_concurrency_1
Starting task [Stage-0:DDL] in serial mode
POSTHOOK: query: create table drop_with_concurrency_1 (c1 int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:drop_with_concurrency
POSTHOOK: Output: drop_with_concurrency@drop_with_concurrency_1
Completed executing commandqueryId=(!!{queryId}!!); Time taken: !!ELIDED!! seconds
OK
Shutting down query create table drop_with_concurrency_1 (c1 int)
No rows affected 
>>>  drop table drop_with_concurrency_1;
Acquired the compile lock.
Compiling commandqueryId=(!!{queryId}!!): drop table drop_with_concurrency_1
Semantic Analysis Completed
Returning Hive schema: Schema(fieldSchemas:null, properties:null)
Completed compiling commandqueryId=(!!{queryId}!!); Time taken: !!ELIDED!! seconds
Executing commandqueryId=(!!{queryId}!!): drop table drop_with_concurrency_1
PREHOOK: query: drop table drop_with_concurrency_1
PREHOOK: type: DROPTABLE
PREHOOK: Input: drop_with_concurrency@drop_with_concurrency_1
PREHOOK: Output: drop_with_concurrency@drop_with_concurrency_1
Starting task [Stage-0:DDL] in serial mode
POSTHOOK: query: drop table drop_with_concurrency_1
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: drop_with_concurrency@drop_with_concurrency_1
POSTHOOK: Output: drop_with_concurrency@drop_with_concurrency_1
Completed executing commandqueryId=(!!{queryId}!!); Time taken: !!ELIDED!! seconds
OK
Shutting down query drop table drop_with_concurrency_1
No rows affected 
>>>  !record
