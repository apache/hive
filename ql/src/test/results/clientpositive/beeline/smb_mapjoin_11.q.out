PREHOOK: query: CREATE TABLE test_table1 (key INT, value STRING) PARTITIONED BY (ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 16 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_table1
POSTHOOK: query: CREATE TABLE test_table1 (key INT, value STRING) PARTITIONED BY (ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 16 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_table1
PREHOOK: query: CREATE TABLE test_table2 (key INT, value STRING) PARTITIONED BY (ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 16 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_table2
POSTHOOK: query: CREATE TABLE test_table2 (key INT, value STRING) PARTITIONED BY (ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 16 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_table2
PREHOOK: query: FROM src
INSERT OVERWRITE TABLE test_table1 PARTITION (ds = '1') SELECT *
INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '1') SELECT *
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@test_table1@ds=1
PREHOOK: Output: default@test_table2@ds=1
POSTHOOK: query: FROM src
INSERT OVERWRITE TABLE test_table1 PARTITION (ds = '1') SELECT *
INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '1') SELECT *
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@test_table1@ds=1
POSTHOOK: Output: default@test_table2@ds=1
POSTHOOK: Lineage: test_table1 PARTITION(ds=1).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: test_table1 PARTITION(ds=1).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: test_table2 PARTITION(ds=1).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: test_table2 PARTITION(ds=1).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: CREATE TABLE test_table3 (key INT, value STRING) PARTITIONED BY (ds STRING) CLUSTERED BY (key) INTO 16 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_table3
POSTHOOK: query: CREATE TABLE test_table3 (key INT, value STRING) PARTITIONED BY (ds STRING) CLUSTERED BY (key) INTO 16 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_table3
PREHOOK: query: EXPLAIN EXTENDED
INSERT OVERWRITE TABLE test_table3 PARTITION (ds = '1') SELECT /*+ MAPJOIN(b) */ a.key, b.value FROM test_table1 a JOIN test_table2 b ON a.key = b.key AND a.ds = '1' AND b.ds = '1'
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN EXTENDED
INSERT OVERWRITE TABLE test_table3 PARTITION (ds = '1') SELECT /*+ MAPJOIN(b) */ a.key, b.value FROM test_table1 a JOIN test_table2 b ON a.key = b.key AND a.ds = '1' AND b.ds = '1'
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1
  Stage-2 depends on stages: Stage-0, Stage-3
  Stage-3 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: a
            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
            GatherStats: false
            Filter Operator
              isSamplingPred: false
              predicate: key is not null (type: boolean)
              Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
              Sorted Merge Bucket Map Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 key (type: int)
                  1 key (type: int)
                outputColumnNames: _col0, _col7
                Position of Big Table: 0
                BucketMapJoin: true
                Select Operator
                  expressions: _col0 (type: int), _col7 (type: string)
                  outputColumnNames: _col0, _col1
                  Reduce Output Operator
                    null sort order: 
                    sort order: 
                    Map-reduce partition columns: _col0 (type: int)
                    tag: -1
                    value expressions: _col0 (type: int), _col1 (type: string)
                    auto parallelism: false
      Path -> Alias:
#### A masked pattern was here ####
      Path -> Partition:
#### A masked pattern was here ####
          Partition
            base file name: ds=1
            input format: org.apache.hadoop.mapred.TextInputFormat
            output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            partition values:
              ds 1
            properties:
              COLUMN_STATS_ACCURATE {"BASIC_STATS":"true","COLUMN_STATS":{"key":"true","value":"true"}}
              bucket_count 16
              bucket_field_name key
              column.name.delimiter ,
              columns key,value
              columns.comments 
              columns.types int:string
#### A masked pattern was here ####
              name default.test_table1
              numFiles 16
              numRows 500
              partition_columns ds
              partition_columns.types string
              rawDataSize 5312
              serialization.ddl struct test_table1 { i32 key, string value}
              serialization.format 1
              serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              totalSize 5812
#### A masked pattern was here ####
            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
          
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              properties:
                SORTBUCKETCOLSPREFIX TRUE
                bucket_count 16
                bucket_field_name key
                bucketing_version 2
                column.name.delimiter ,
                columns key,value
                columns.comments 
                columns.types int:string
#### A masked pattern was here ####
                name default.test_table1
                partition_columns ds
                partition_columns.types string
                serialization.ddl struct test_table1 { i32 key, string value}
                serialization.format 1
                serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
#### A masked pattern was here ####
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.test_table1
            name: default.test_table1
      Truncated Path -> Alias:
        /test_table1/ds=1 [a]
      Needs Tagging: false
      Reduce Operator Tree:
        Select Operator
          expressions: VALUE._col0 (type: int), VALUE._col1 (type: string)
          outputColumnNames: _col0, _col1
          File Output Operator
            compressed: false
            GlobalTableId: 1
#### A masked pattern was here ####
            NumFilesPerFileSink: 16
            Static Partition Specification: ds=1/
#### A masked pattern was here ####
            table:
                input format: org.apache.hadoop.mapred.TextInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                properties:
                  bucket_count 16
                  bucket_field_name key
                  bucketing_version 2
                  column.name.delimiter ,
                  columns key,value
                  columns.comments 
                  columns.types int:string
#### A masked pattern was here ####
                  name default.test_table3
                  partition_columns ds
                  partition_columns.types string
                  serialization.ddl struct test_table3 { i32 key, string value}
                  serialization.format 1
                  serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
#### A masked pattern was here ####
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                name: default.test_table3
            TotalFiles: 16
            GatherStats: true
            MultiFileSpray: true
          Select Operator
            expressions: _col0 (type: int), _col1 (type: string)
            outputColumnNames: key, value
            Group By Operator
              aggregations: compute_stats(key, 'hll'), compute_stats(value, 'hll')
              keys: '1' (type: string)
              mode: hash
              outputColumnNames: _col0, _col1, _col2
              File Output Operator
                compressed: false
                GlobalTableId: 0
#### A masked pattern was here ####
                NumFilesPerFileSink: 1
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    properties:
                      column.name.delimiter ,
                      columns _col0,_col1,_col2
                      columns.types string,struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>,struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>
                      escape.delim \
                      serialization.lib org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe
                    serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe
                TotalFiles: 1
                GatherStats: false
                MultiFileSpray: false

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds 1
          replace: true
#### A masked pattern was here ####
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              properties:
                bucket_count 16
                bucket_field_name key
                bucketing_version 2
                column.name.delimiter ,
                columns key,value
                columns.comments 
                columns.types int:string
#### A masked pattern was here ####
                name default.test_table3
                partition_columns ds
                partition_columns.types string
                serialization.ddl struct test_table3 { i32 key, string value}
                serialization.format 1
                serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
#### A masked pattern was here ####
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.test_table3

  Stage: Stage-2
    Stats Work
      Basic Stats Work:
#### A masked pattern was here ####
      Column Stats Desc:
          Columns: key, value
          Column Types: int, string
          Table: test_db_smb_mapjoin_11.test_table3
          Is Table Level Stats: false

  Stage: Stage-3
    Map Reduce
      Map Operator Tree:
          TableScan
            GatherStats: false
            Reduce Output Operator
              key expressions: '1' (type: string)
              null sort order: a
              sort order: +
              Map-reduce partition columns: '1' (type: string)
              tag: -1
              value expressions: _col1 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col2 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>)
              auto parallelism: false
      Execution mode: vectorized
      Path -> Alias:
#### A masked pattern was here ####
      Path -> Partition:
#### A masked pattern was here ####
          Partition
            base file name: -mr-10002
            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
            properties:
              column.name.delimiter ,
              columns _col0,_col1,_col2
              columns.types string,struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>,struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>
              escape.delim \
              serialization.lib org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe
            serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe
          
              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
              properties:
                column.name.delimiter ,
                columns _col0,_col1,_col2
                columns.types string,struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>,struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>
                escape.delim \
                serialization.lib org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe
              serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe
      Truncated Path -> Alias:
#### A masked pattern was here ####
      Needs Tagging: false
      Reduce Operator Tree:
        Group By Operator
          aggregations: compute_stats(VALUE._col0), compute_stats(VALUE._col1)
          keys: '1' (type: string)
          mode: mergepartial
          outputColumnNames: _col0, _col1, _col2
          Select Operator
            expressions: _col1 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), _col2 (type: struct<columntype:string,maxlength:bigint,avglength:double,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), '1' (type: string)
            outputColumnNames: _col0, _col1, _col2
            File Output Operator
              compressed: false
              GlobalTableId: 0
#### A masked pattern was here ####
              NumFilesPerFileSink: 1
#### A masked pattern was here ####
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  properties:
                    columns _col0,_col1,_col2
                    columns.types struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>:struct<columntype:string,maxlength:bigint,avglength:double,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>:string
                    escape.delim \
                    hive.serialization.extend.additional.nesting.levels true
                    serialization.escape.crlf true
                    serialization.format 1
                    serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              TotalFiles: 1
              GatherStats: false
              MultiFileSpray: false

PREHOOK: query: INSERT OVERWRITE TABLE test_table3 PARTITION (ds = '1') SELECT /*+ MAPJOIN(b) */ a.key, b.value FROM test_table1 a JOIN test_table2 b ON a.key = b.key AND a.ds = '1' AND b.ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
PREHOOK: Input: default@test_table1@ds=1
PREHOOK: Input: default@test_table2
PREHOOK: Input: default@test_table2@ds=1
PREHOOK: Output: default@test_table3@ds=1
POSTHOOK: query: INSERT OVERWRITE TABLE test_table3 PARTITION (ds = '1') SELECT /*+ MAPJOIN(b) */ a.key, b.value FROM test_table1 a JOIN test_table2 b ON a.key = b.key AND a.ds = '1' AND b.ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
POSTHOOK: Input: default@test_table1@ds=1
POSTHOOK: Input: default@test_table2
POSTHOOK: Input: default@test_table2@ds=1
POSTHOOK: Output: default@test_table3@ds=1
POSTHOOK: Lineage: test_table3 PARTITION(ds=1).key SIMPLE [(test_table1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: test_table3 PARTITION(ds=1).value SIMPLE [(test_table2)b.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: SELECT * FROM test_table1 ORDER BY key
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
PREHOOK: Input: default@test_table1@ds=1
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM test_table1 ORDER BY key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
POSTHOOK: Input: default@test_table1@ds=1
#### A masked pattern was here ####
0	val_0	1
0	val_0	1
0	val_0	1
2	val_2	1
4	val_4	1
5	val_5	1
5	val_5	1
5	val_5	1
8	val_8	1
9	val_9	1
10	val_10	1
11	val_11	1
12	val_12	1
12	val_12	1
15	val_15	1
15	val_15	1
17	val_17	1
18	val_18	1
18	val_18	1
19	val_19	1
20	val_20	1
24	val_24	1
24	val_24	1
26	val_26	1
26	val_26	1
27	val_27	1
28	val_28	1
30	val_30	1
33	val_33	1
34	val_34	1
35	val_35	1
35	val_35	1
35	val_35	1
37	val_37	1
37	val_37	1
41	val_41	1
42	val_42	1
42	val_42	1
43	val_43	1
44	val_44	1
47	val_47	1
51	val_51	1
51	val_51	1
53	val_53	1
54	val_54	1
57	val_57	1
58	val_58	1
58	val_58	1
64	val_64	1
65	val_65	1
66	val_66	1
67	val_67	1
67	val_67	1
69	val_69	1
70	val_70	1
70	val_70	1
70	val_70	1
72	val_72	1
72	val_72	1
74	val_74	1
76	val_76	1
76	val_76	1
77	val_77	1
78	val_78	1
80	val_80	1
82	val_82	1
83	val_83	1
83	val_83	1
84	val_84	1
84	val_84	1
85	val_85	1
86	val_86	1
87	val_87	1
90	val_90	1
90	val_90	1
90	val_90	1
92	val_92	1
95	val_95	1
95	val_95	1
96	val_96	1
97	val_97	1
97	val_97	1
98	val_98	1
98	val_98	1
100	val_100	1
100	val_100	1
103	val_103	1
103	val_103	1
104	val_104	1
104	val_104	1
105	val_105	1
111	val_111	1
113	val_113	1
113	val_113	1
114	val_114	1
116	val_116	1
118	val_118	1
118	val_118	1
119	val_119	1
119	val_119	1
119	val_119	1
120	val_120	1
120	val_120	1
125	val_125	1
125	val_125	1
126	val_126	1
128	val_128	1
128	val_128	1
128	val_128	1
129	val_129	1
129	val_129	1
131	val_131	1
133	val_133	1
134	val_134	1
134	val_134	1
136	val_136	1
137	val_137	1
137	val_137	1
138	val_138	1
138	val_138	1
138	val_138	1
138	val_138	1
143	val_143	1
145	val_145	1
146	val_146	1
146	val_146	1
149	val_149	1
149	val_149	1
150	val_150	1
152	val_152	1
152	val_152	1
153	val_153	1
155	val_155	1
156	val_156	1
157	val_157	1
158	val_158	1
160	val_160	1
162	val_162	1
163	val_163	1
164	val_164	1
164	val_164	1
165	val_165	1
165	val_165	1
166	val_166	1
167	val_167	1
167	val_167	1
167	val_167	1
168	val_168	1
169	val_169	1
169	val_169	1
169	val_169	1
169	val_169	1
170	val_170	1
172	val_172	1
172	val_172	1
174	val_174	1
174	val_174	1
175	val_175	1
175	val_175	1
176	val_176	1
176	val_176	1
177	val_177	1
178	val_178	1
179	val_179	1
179	val_179	1
180	val_180	1
181	val_181	1
183	val_183	1
186	val_186	1
187	val_187	1
187	val_187	1
187	val_187	1
189	val_189	1
190	val_190	1
191	val_191	1
191	val_191	1
192	val_192	1
193	val_193	1
193	val_193	1
193	val_193	1
194	val_194	1
195	val_195	1
195	val_195	1
196	val_196	1
197	val_197	1
197	val_197	1
199	val_199	1
199	val_199	1
199	val_199	1
200	val_200	1
200	val_200	1
201	val_201	1
202	val_202	1
203	val_203	1
203	val_203	1
205	val_205	1
205	val_205	1
207	val_207	1
207	val_207	1
208	val_208	1
208	val_208	1
208	val_208	1
209	val_209	1
209	val_209	1
213	val_213	1
213	val_213	1
214	val_214	1
216	val_216	1
216	val_216	1
217	val_217	1
217	val_217	1
218	val_218	1
219	val_219	1
219	val_219	1
221	val_221	1
221	val_221	1
222	val_222	1
223	val_223	1
223	val_223	1
224	val_224	1
224	val_224	1
226	val_226	1
228	val_228	1
229	val_229	1
229	val_229	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
233	val_233	1
233	val_233	1
235	val_235	1
237	val_237	1
237	val_237	1
238	val_238	1
238	val_238	1
239	val_239	1
239	val_239	1
241	val_241	1
242	val_242	1
242	val_242	1
244	val_244	1
247	val_247	1
248	val_248	1
249	val_249	1
252	val_252	1
255	val_255	1
255	val_255	1
256	val_256	1
256	val_256	1
257	val_257	1
258	val_258	1
260	val_260	1
262	val_262	1
263	val_263	1
265	val_265	1
265	val_265	1
266	val_266	1
272	val_272	1
272	val_272	1
273	val_273	1
273	val_273	1
273	val_273	1
274	val_274	1
275	val_275	1
277	val_277	1
277	val_277	1
277	val_277	1
277	val_277	1
278	val_278	1
278	val_278	1
280	val_280	1
280	val_280	1
281	val_281	1
281	val_281	1
282	val_282	1
282	val_282	1
283	val_283	1
284	val_284	1
285	val_285	1
286	val_286	1
287	val_287	1
288	val_288	1
288	val_288	1
289	val_289	1
291	val_291	1
292	val_292	1
296	val_296	1
298	val_298	1
298	val_298	1
298	val_298	1
302	val_302	1
305	val_305	1
306	val_306	1
307	val_307	1
307	val_307	1
308	val_308	1
309	val_309	1
309	val_309	1
310	val_310	1
311	val_311	1
311	val_311	1
311	val_311	1
315	val_315	1
316	val_316	1
316	val_316	1
316	val_316	1
317	val_317	1
317	val_317	1
318	val_318	1
318	val_318	1
318	val_318	1
321	val_321	1
321	val_321	1
322	val_322	1
322	val_322	1
323	val_323	1
325	val_325	1
325	val_325	1
327	val_327	1
327	val_327	1
327	val_327	1
331	val_331	1
331	val_331	1
332	val_332	1
333	val_333	1
333	val_333	1
335	val_335	1
336	val_336	1
338	val_338	1
339	val_339	1
341	val_341	1
342	val_342	1
342	val_342	1
344	val_344	1
344	val_344	1
345	val_345	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
351	val_351	1
353	val_353	1
353	val_353	1
356	val_356	1
360	val_360	1
362	val_362	1
364	val_364	1
365	val_365	1
366	val_366	1
367	val_367	1
367	val_367	1
368	val_368	1
369	val_369	1
369	val_369	1
369	val_369	1
373	val_373	1
374	val_374	1
375	val_375	1
377	val_377	1
378	val_378	1
379	val_379	1
382	val_382	1
382	val_382	1
384	val_384	1
384	val_384	1
384	val_384	1
386	val_386	1
389	val_389	1
392	val_392	1
393	val_393	1
394	val_394	1
395	val_395	1
395	val_395	1
396	val_396	1
396	val_396	1
396	val_396	1
397	val_397	1
397	val_397	1
399	val_399	1
399	val_399	1
400	val_400	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
402	val_402	1
403	val_403	1
403	val_403	1
403	val_403	1
404	val_404	1
404	val_404	1
406	val_406	1
406	val_406	1
406	val_406	1
406	val_406	1
407	val_407	1
409	val_409	1
409	val_409	1
409	val_409	1
411	val_411	1
413	val_413	1
413	val_413	1
414	val_414	1
414	val_414	1
417	val_417	1
417	val_417	1
417	val_417	1
418	val_418	1
419	val_419	1
421	val_421	1
424	val_424	1
424	val_424	1
427	val_427	1
429	val_429	1
429	val_429	1
430	val_430	1
430	val_430	1
430	val_430	1
431	val_431	1
431	val_431	1
431	val_431	1
432	val_432	1
435	val_435	1
436	val_436	1
437	val_437	1
438	val_438	1
438	val_438	1
438	val_438	1
439	val_439	1
439	val_439	1
443	val_443	1
444	val_444	1
446	val_446	1
448	val_448	1
449	val_449	1
452	val_452	1
453	val_453	1
454	val_454	1
454	val_454	1
454	val_454	1
455	val_455	1
457	val_457	1
458	val_458	1
458	val_458	1
459	val_459	1
459	val_459	1
460	val_460	1
462	val_462	1
462	val_462	1
463	val_463	1
463	val_463	1
466	val_466	1
466	val_466	1
466	val_466	1
467	val_467	1
468	val_468	1
468	val_468	1
468	val_468	1
468	val_468	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
470	val_470	1
472	val_472	1
475	val_475	1
477	val_477	1
478	val_478	1
478	val_478	1
479	val_479	1
480	val_480	1
480	val_480	1
480	val_480	1
481	val_481	1
482	val_482	1
483	val_483	1
484	val_484	1
485	val_485	1
487	val_487	1
489	val_489	1
489	val_489	1
489	val_489	1
489	val_489	1
490	val_490	1
491	val_491	1
492	val_492	1
492	val_492	1
493	val_493	1
494	val_494	1
495	val_495	1
496	val_496	1
497	val_497	1
498	val_498	1
498	val_498	1
498	val_498	1
PREHOOK: query: SELECT * FROM test_table3 ORDER BY key
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table3
PREHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM test_table3 ORDER BY key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table3
POSTHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
0	val_0	1
0	val_0	1
0	val_0	1
0	val_0	1
0	val_0	1
0	val_0	1
0	val_0	1
0	val_0	1
0	val_0	1
2	val_2	1
4	val_4	1
5	val_5	1
5	val_5	1
5	val_5	1
5	val_5	1
5	val_5	1
5	val_5	1
5	val_5	1
5	val_5	1
5	val_5	1
8	val_8	1
9	val_9	1
10	val_10	1
11	val_11	1
12	val_12	1
12	val_12	1
12	val_12	1
12	val_12	1
15	val_15	1
15	val_15	1
15	val_15	1
15	val_15	1
17	val_17	1
18	val_18	1
18	val_18	1
18	val_18	1
18	val_18	1
19	val_19	1
20	val_20	1
24	val_24	1
24	val_24	1
24	val_24	1
24	val_24	1
26	val_26	1
26	val_26	1
26	val_26	1
26	val_26	1
27	val_27	1
28	val_28	1
30	val_30	1
33	val_33	1
34	val_34	1
35	val_35	1
35	val_35	1
35	val_35	1
35	val_35	1
35	val_35	1
35	val_35	1
35	val_35	1
35	val_35	1
35	val_35	1
37	val_37	1
37	val_37	1
37	val_37	1
37	val_37	1
41	val_41	1
42	val_42	1
42	val_42	1
42	val_42	1
42	val_42	1
43	val_43	1
44	val_44	1
47	val_47	1
51	val_51	1
51	val_51	1
51	val_51	1
51	val_51	1
53	val_53	1
54	val_54	1
57	val_57	1
58	val_58	1
58	val_58	1
58	val_58	1
58	val_58	1
64	val_64	1
65	val_65	1
66	val_66	1
67	val_67	1
67	val_67	1
67	val_67	1
67	val_67	1
69	val_69	1
70	val_70	1
70	val_70	1
70	val_70	1
70	val_70	1
70	val_70	1
70	val_70	1
70	val_70	1
70	val_70	1
70	val_70	1
72	val_72	1
72	val_72	1
72	val_72	1
72	val_72	1
74	val_74	1
76	val_76	1
76	val_76	1
76	val_76	1
76	val_76	1
77	val_77	1
78	val_78	1
80	val_80	1
82	val_82	1
83	val_83	1
83	val_83	1
83	val_83	1
83	val_83	1
84	val_84	1
84	val_84	1
84	val_84	1
84	val_84	1
85	val_85	1
86	val_86	1
87	val_87	1
90	val_90	1
90	val_90	1
90	val_90	1
90	val_90	1
90	val_90	1
90	val_90	1
90	val_90	1
90	val_90	1
90	val_90	1
92	val_92	1
95	val_95	1
95	val_95	1
95	val_95	1
95	val_95	1
96	val_96	1
97	val_97	1
97	val_97	1
97	val_97	1
97	val_97	1
98	val_98	1
98	val_98	1
98	val_98	1
98	val_98	1
100	val_100	1
100	val_100	1
100	val_100	1
100	val_100	1
103	val_103	1
103	val_103	1
103	val_103	1
103	val_103	1
104	val_104	1
104	val_104	1
104	val_104	1
104	val_104	1
105	val_105	1
111	val_111	1
113	val_113	1
113	val_113	1
113	val_113	1
113	val_113	1
114	val_114	1
116	val_116	1
118	val_118	1
118	val_118	1
118	val_118	1
118	val_118	1
119	val_119	1
119	val_119	1
119	val_119	1
119	val_119	1
119	val_119	1
119	val_119	1
119	val_119	1
119	val_119	1
119	val_119	1
120	val_120	1
120	val_120	1
120	val_120	1
120	val_120	1
125	val_125	1
125	val_125	1
125	val_125	1
125	val_125	1
126	val_126	1
128	val_128	1
128	val_128	1
128	val_128	1
128	val_128	1
128	val_128	1
128	val_128	1
128	val_128	1
128	val_128	1
128	val_128	1
129	val_129	1
129	val_129	1
129	val_129	1
129	val_129	1
131	val_131	1
133	val_133	1
134	val_134	1
134	val_134	1
134	val_134	1
134	val_134	1
136	val_136	1
137	val_137	1
137	val_137	1
137	val_137	1
137	val_137	1
138	val_138	1
138	val_138	1
138	val_138	1
138	val_138	1
138	val_138	1
138	val_138	1
138	val_138	1
138	val_138	1
138	val_138	1
138	val_138	1
138	val_138	1
138	val_138	1
138	val_138	1
138	val_138	1
138	val_138	1
138	val_138	1
143	val_143	1
145	val_145	1
146	val_146	1
146	val_146	1
146	val_146	1
146	val_146	1
149	val_149	1
149	val_149	1
149	val_149	1
149	val_149	1
150	val_150	1
152	val_152	1
152	val_152	1
152	val_152	1
152	val_152	1
153	val_153	1
155	val_155	1
156	val_156	1
157	val_157	1
158	val_158	1
160	val_160	1
162	val_162	1
163	val_163	1
164	val_164	1
164	val_164	1
164	val_164	1
164	val_164	1
165	val_165	1
165	val_165	1
165	val_165	1
165	val_165	1
166	val_166	1
167	val_167	1
167	val_167	1
167	val_167	1
167	val_167	1
167	val_167	1
167	val_167	1
167	val_167	1
167	val_167	1
167	val_167	1
168	val_168	1
169	val_169	1
169	val_169	1
169	val_169	1
169	val_169	1
169	val_169	1
169	val_169	1
169	val_169	1
169	val_169	1
169	val_169	1
169	val_169	1
169	val_169	1
169	val_169	1
169	val_169	1
169	val_169	1
169	val_169	1
169	val_169	1
170	val_170	1
172	val_172	1
172	val_172	1
172	val_172	1
172	val_172	1
174	val_174	1
174	val_174	1
174	val_174	1
174	val_174	1
175	val_175	1
175	val_175	1
175	val_175	1
175	val_175	1
176	val_176	1
176	val_176	1
176	val_176	1
176	val_176	1
177	val_177	1
178	val_178	1
179	val_179	1
179	val_179	1
179	val_179	1
179	val_179	1
180	val_180	1
181	val_181	1
183	val_183	1
186	val_186	1
187	val_187	1
187	val_187	1
187	val_187	1
187	val_187	1
187	val_187	1
187	val_187	1
187	val_187	1
187	val_187	1
187	val_187	1
189	val_189	1
190	val_190	1
191	val_191	1
191	val_191	1
191	val_191	1
191	val_191	1
192	val_192	1
193	val_193	1
193	val_193	1
193	val_193	1
193	val_193	1
193	val_193	1
193	val_193	1
193	val_193	1
193	val_193	1
193	val_193	1
194	val_194	1
195	val_195	1
195	val_195	1
195	val_195	1
195	val_195	1
196	val_196	1
197	val_197	1
197	val_197	1
197	val_197	1
197	val_197	1
199	val_199	1
199	val_199	1
199	val_199	1
199	val_199	1
199	val_199	1
199	val_199	1
199	val_199	1
199	val_199	1
199	val_199	1
200	val_200	1
200	val_200	1
200	val_200	1
200	val_200	1
201	val_201	1
202	val_202	1
203	val_203	1
203	val_203	1
203	val_203	1
203	val_203	1
205	val_205	1
205	val_205	1
205	val_205	1
205	val_205	1
207	val_207	1
207	val_207	1
207	val_207	1
207	val_207	1
208	val_208	1
208	val_208	1
208	val_208	1
208	val_208	1
208	val_208	1
208	val_208	1
208	val_208	1
208	val_208	1
208	val_208	1
209	val_209	1
209	val_209	1
209	val_209	1
209	val_209	1
213	val_213	1
213	val_213	1
213	val_213	1
213	val_213	1
214	val_214	1
216	val_216	1
216	val_216	1
216	val_216	1
216	val_216	1
217	val_217	1
217	val_217	1
217	val_217	1
217	val_217	1
218	val_218	1
219	val_219	1
219	val_219	1
219	val_219	1
219	val_219	1
221	val_221	1
221	val_221	1
221	val_221	1
221	val_221	1
222	val_222	1
223	val_223	1
223	val_223	1
223	val_223	1
223	val_223	1
224	val_224	1
224	val_224	1
224	val_224	1
224	val_224	1
226	val_226	1
228	val_228	1
229	val_229	1
229	val_229	1
229	val_229	1
229	val_229	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
230	val_230	1
233	val_233	1
233	val_233	1
233	val_233	1
233	val_233	1
235	val_235	1
237	val_237	1
237	val_237	1
237	val_237	1
237	val_237	1
238	val_238	1
238	val_238	1
238	val_238	1
238	val_238	1
239	val_239	1
239	val_239	1
239	val_239	1
239	val_239	1
241	val_241	1
242	val_242	1
242	val_242	1
242	val_242	1
242	val_242	1
244	val_244	1
247	val_247	1
248	val_248	1
249	val_249	1
252	val_252	1
255	val_255	1
255	val_255	1
255	val_255	1
255	val_255	1
256	val_256	1
256	val_256	1
256	val_256	1
256	val_256	1
257	val_257	1
258	val_258	1
260	val_260	1
262	val_262	1
263	val_263	1
265	val_265	1
265	val_265	1
265	val_265	1
265	val_265	1
266	val_266	1
272	val_272	1
272	val_272	1
272	val_272	1
272	val_272	1
273	val_273	1
273	val_273	1
273	val_273	1
273	val_273	1
273	val_273	1
273	val_273	1
273	val_273	1
273	val_273	1
273	val_273	1
274	val_274	1
275	val_275	1
277	val_277	1
277	val_277	1
277	val_277	1
277	val_277	1
277	val_277	1
277	val_277	1
277	val_277	1
277	val_277	1
277	val_277	1
277	val_277	1
277	val_277	1
277	val_277	1
277	val_277	1
277	val_277	1
277	val_277	1
277	val_277	1
278	val_278	1
278	val_278	1
278	val_278	1
278	val_278	1
280	val_280	1
280	val_280	1
280	val_280	1
280	val_280	1
281	val_281	1
281	val_281	1
281	val_281	1
281	val_281	1
282	val_282	1
282	val_282	1
282	val_282	1
282	val_282	1
283	val_283	1
284	val_284	1
285	val_285	1
286	val_286	1
287	val_287	1
288	val_288	1
288	val_288	1
288	val_288	1
288	val_288	1
289	val_289	1
291	val_291	1
292	val_292	1
296	val_296	1
298	val_298	1
298	val_298	1
298	val_298	1
298	val_298	1
298	val_298	1
298	val_298	1
298	val_298	1
298	val_298	1
298	val_298	1
302	val_302	1
305	val_305	1
306	val_306	1
307	val_307	1
307	val_307	1
307	val_307	1
307	val_307	1
308	val_308	1
309	val_309	1
309	val_309	1
309	val_309	1
309	val_309	1
310	val_310	1
311	val_311	1
311	val_311	1
311	val_311	1
311	val_311	1
311	val_311	1
311	val_311	1
311	val_311	1
311	val_311	1
311	val_311	1
315	val_315	1
316	val_316	1
316	val_316	1
316	val_316	1
316	val_316	1
316	val_316	1
316	val_316	1
316	val_316	1
316	val_316	1
316	val_316	1
317	val_317	1
317	val_317	1
317	val_317	1
317	val_317	1
318	val_318	1
318	val_318	1
318	val_318	1
318	val_318	1
318	val_318	1
318	val_318	1
318	val_318	1
318	val_318	1
318	val_318	1
321	val_321	1
321	val_321	1
321	val_321	1
321	val_321	1
322	val_322	1
322	val_322	1
322	val_322	1
322	val_322	1
323	val_323	1
325	val_325	1
325	val_325	1
325	val_325	1
325	val_325	1
327	val_327	1
327	val_327	1
327	val_327	1
327	val_327	1
327	val_327	1
327	val_327	1
327	val_327	1
327	val_327	1
327	val_327	1
331	val_331	1
331	val_331	1
331	val_331	1
331	val_331	1
332	val_332	1
333	val_333	1
333	val_333	1
333	val_333	1
333	val_333	1
335	val_335	1
336	val_336	1
338	val_338	1
339	val_339	1
341	val_341	1
342	val_342	1
342	val_342	1
342	val_342	1
342	val_342	1
344	val_344	1
344	val_344	1
344	val_344	1
344	val_344	1
345	val_345	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
348	val_348	1
351	val_351	1
353	val_353	1
353	val_353	1
353	val_353	1
353	val_353	1
356	val_356	1
360	val_360	1
362	val_362	1
364	val_364	1
365	val_365	1
366	val_366	1
367	val_367	1
367	val_367	1
367	val_367	1
367	val_367	1
368	val_368	1
369	val_369	1
369	val_369	1
369	val_369	1
369	val_369	1
369	val_369	1
369	val_369	1
369	val_369	1
369	val_369	1
369	val_369	1
373	val_373	1
374	val_374	1
375	val_375	1
377	val_377	1
378	val_378	1
379	val_379	1
382	val_382	1
382	val_382	1
382	val_382	1
382	val_382	1
384	val_384	1
384	val_384	1
384	val_384	1
384	val_384	1
384	val_384	1
384	val_384	1
384	val_384	1
384	val_384	1
384	val_384	1
386	val_386	1
389	val_389	1
392	val_392	1
393	val_393	1
394	val_394	1
395	val_395	1
395	val_395	1
395	val_395	1
395	val_395	1
396	val_396	1
396	val_396	1
396	val_396	1
396	val_396	1
396	val_396	1
396	val_396	1
396	val_396	1
396	val_396	1
396	val_396	1
397	val_397	1
397	val_397	1
397	val_397	1
397	val_397	1
399	val_399	1
399	val_399	1
399	val_399	1
399	val_399	1
400	val_400	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
401	val_401	1
402	val_402	1
403	val_403	1
403	val_403	1
403	val_403	1
403	val_403	1
403	val_403	1
403	val_403	1
403	val_403	1
403	val_403	1
403	val_403	1
404	val_404	1
404	val_404	1
404	val_404	1
404	val_404	1
406	val_406	1
406	val_406	1
406	val_406	1
406	val_406	1
406	val_406	1
406	val_406	1
406	val_406	1
406	val_406	1
406	val_406	1
406	val_406	1
406	val_406	1
406	val_406	1
406	val_406	1
406	val_406	1
406	val_406	1
406	val_406	1
407	val_407	1
409	val_409	1
409	val_409	1
409	val_409	1
409	val_409	1
409	val_409	1
409	val_409	1
409	val_409	1
409	val_409	1
409	val_409	1
411	val_411	1
413	val_413	1
413	val_413	1
413	val_413	1
413	val_413	1
414	val_414	1
414	val_414	1
414	val_414	1
414	val_414	1
417	val_417	1
417	val_417	1
417	val_417	1
417	val_417	1
417	val_417	1
417	val_417	1
417	val_417	1
417	val_417	1
417	val_417	1
418	val_418	1
419	val_419	1
421	val_421	1
424	val_424	1
424	val_424	1
424	val_424	1
424	val_424	1
427	val_427	1
429	val_429	1
429	val_429	1
429	val_429	1
429	val_429	1
430	val_430	1
430	val_430	1
430	val_430	1
430	val_430	1
430	val_430	1
430	val_430	1
430	val_430	1
430	val_430	1
430	val_430	1
431	val_431	1
431	val_431	1
431	val_431	1
431	val_431	1
431	val_431	1
431	val_431	1
431	val_431	1
431	val_431	1
431	val_431	1
432	val_432	1
435	val_435	1
436	val_436	1
437	val_437	1
438	val_438	1
438	val_438	1
438	val_438	1
438	val_438	1
438	val_438	1
438	val_438	1
438	val_438	1
438	val_438	1
438	val_438	1
439	val_439	1
439	val_439	1
439	val_439	1
439	val_439	1
443	val_443	1
444	val_444	1
446	val_446	1
448	val_448	1
449	val_449	1
452	val_452	1
453	val_453	1
454	val_454	1
454	val_454	1
454	val_454	1
454	val_454	1
454	val_454	1
454	val_454	1
454	val_454	1
454	val_454	1
454	val_454	1
455	val_455	1
457	val_457	1
458	val_458	1
458	val_458	1
458	val_458	1
458	val_458	1
459	val_459	1
459	val_459	1
459	val_459	1
459	val_459	1
460	val_460	1
462	val_462	1
462	val_462	1
462	val_462	1
462	val_462	1
463	val_463	1
463	val_463	1
463	val_463	1
463	val_463	1
466	val_466	1
466	val_466	1
466	val_466	1
466	val_466	1
466	val_466	1
466	val_466	1
466	val_466	1
466	val_466	1
466	val_466	1
467	val_467	1
468	val_468	1
468	val_468	1
468	val_468	1
468	val_468	1
468	val_468	1
468	val_468	1
468	val_468	1
468	val_468	1
468	val_468	1
468	val_468	1
468	val_468	1
468	val_468	1
468	val_468	1
468	val_468	1
468	val_468	1
468	val_468	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
469	val_469	1
470	val_470	1
472	val_472	1
475	val_475	1
477	val_477	1
478	val_478	1
478	val_478	1
478	val_478	1
478	val_478	1
479	val_479	1
480	val_480	1
480	val_480	1
480	val_480	1
480	val_480	1
480	val_480	1
480	val_480	1
480	val_480	1
480	val_480	1
480	val_480	1
481	val_481	1
482	val_482	1
483	val_483	1
484	val_484	1
485	val_485	1
487	val_487	1
489	val_489	1
489	val_489	1
489	val_489	1
489	val_489	1
489	val_489	1
489	val_489	1
489	val_489	1
489	val_489	1
489	val_489	1
489	val_489	1
489	val_489	1
489	val_489	1
489	val_489	1
489	val_489	1
489	val_489	1
489	val_489	1
490	val_490	1
491	val_491	1
492	val_492	1
492	val_492	1
492	val_492	1
492	val_492	1
493	val_493	1
494	val_494	1
495	val_495	1
496	val_496	1
497	val_497	1
498	val_498	1
498	val_498	1
498	val_498	1
498	val_498	1
498	val_498	1
498	val_498	1
498	val_498	1
498	val_498	1
498	val_498	1
PREHOOK: query: EXPLAIN EXTENDED SELECT * FROM test_table1 TABLESAMPLE(BUCKET 2 OUT OF 16)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN EXTENDED SELECT * FROM test_table1 TABLESAMPLE(BUCKET 2 OUT OF 16)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: test_table1
            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
            GatherStats: false
            Filter Operator
              isSamplingPred: true
              predicate: (((hash(key) & 2147483647) % 16) = 1) (type: boolean)
              sampleDesc: BUCKET 2 OUT OF 16
              Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: key (type: int), value (type: string), ds (type: string)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  GlobalTableId: 0
#### A masked pattern was here ####
                  NumFilesPerFileSink: 1
                  Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
#### A masked pattern was here ####
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      properties:
                        columns _col0,_col1,_col2
                        columns.types int:string:string
                        escape.delim \
                        hive.serialization.extend.additional.nesting.levels true
                        serialization.escape.crlf true
                        serialization.format 1
                        serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                  TotalFiles: 1
                  GatherStats: false
                  MultiFileSpray: false
      Execution mode: vectorized
      Path -> Alias:
#### A masked pattern was here ####
      Path -> Partition:
#### A masked pattern was here ####
          Partition
            base file name: 000001_0
            input format: org.apache.hadoop.mapred.TextInputFormat
            output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            partition values:
              ds 1
            properties:
              COLUMN_STATS_ACCURATE {"BASIC_STATS":"true","COLUMN_STATS":{"key":"true","value":"true"}}
              bucket_count 16
              bucket_field_name key
              column.name.delimiter ,
              columns key,value
              columns.comments 
              columns.types int:string
#### A masked pattern was here ####
              name default.test_table1
              numFiles 16
              numRows 500
              partition_columns ds
              partition_columns.types string
              rawDataSize 5312
              serialization.ddl struct test_table1 { i32 key, string value}
              serialization.format 1
              serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              totalSize 5812
#### A masked pattern was here ####
            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
          
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              properties:
                SORTBUCKETCOLSPREFIX TRUE
                bucket_count 16
                bucket_field_name key
                bucketing_version 2
                column.name.delimiter ,
                columns key,value
                columns.comments 
                columns.types int:string
#### A masked pattern was here ####
                name default.test_table1
                partition_columns ds
                partition_columns.types string
                serialization.ddl struct test_table1 { i32 key, string value}
                serialization.format 1
                serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
#### A masked pattern was here ####
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.test_table1
            name: default.test_table1
      Truncated Path -> Alias:
        /test_table1/ds=1/000001_0 [test_table1]

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: EXPLAIN EXTENDED SELECT * FROM test_table3 TABLESAMPLE(BUCKET 2 OUT OF 16)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN EXTENDED SELECT * FROM test_table3 TABLESAMPLE(BUCKET 2 OUT OF 16)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: test_table3
            Statistics: Num rows: 1028 Data size: 10968 Basic stats: COMPLETE Column stats: NONE
            GatherStats: false
            Filter Operator
              isSamplingPred: true
              predicate: (((hash(key) & 2147483647) % 16) = 1) (type: boolean)
              sampleDesc: BUCKET 2 OUT OF 16
              Statistics: Num rows: 514 Data size: 5484 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: key (type: int), value (type: string), ds (type: string)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 514 Data size: 5484 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  GlobalTableId: 0
#### A masked pattern was here ####
                  NumFilesPerFileSink: 1
                  Statistics: Num rows: 514 Data size: 5484 Basic stats: COMPLETE Column stats: NONE
#### A masked pattern was here ####
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      properties:
                        columns _col0,_col1,_col2
                        columns.types int:string:string
                        escape.delim \
                        hive.serialization.extend.additional.nesting.levels true
                        serialization.escape.crlf true
                        serialization.format 1
                        serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                  TotalFiles: 1
                  GatherStats: false
                  MultiFileSpray: false
      Execution mode: vectorized
      Path -> Alias:
#### A masked pattern was here ####
      Path -> Partition:
#### A masked pattern was here ####
          Partition
            base file name: 000001_0
            input format: org.apache.hadoop.mapred.TextInputFormat
            output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            partition values:
              ds 1
            properties:
              COLUMN_STATS_ACCURATE {"BASIC_STATS":"true","COLUMN_STATS":{"key":"true","value":"true"}}
              bucket_count 16
              bucket_field_name key
              column.name.delimiter ,
              columns key,value
              columns.comments 
              columns.types int:string
#### A masked pattern was here ####
              name default.test_table3
              numFiles 16
              numRows 1028
              partition_columns ds
              partition_columns.types string
              rawDataSize 10968
              serialization.ddl struct test_table3 { i32 key, string value}
              serialization.format 1
              serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              totalSize 11996
#### A masked pattern was here ####
            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
          
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              properties:
                bucket_count 16
                bucket_field_name key
                bucketing_version 2
                column.name.delimiter ,
                columns key,value
                columns.comments 
                columns.types int:string
#### A masked pattern was here ####
                name default.test_table3
                partition_columns ds
                partition_columns.types string
                serialization.ddl struct test_table3 { i32 key, string value}
                serialization.format 1
                serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
#### A masked pattern was here ####
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.test_table3
            name: default.test_table3
      Truncated Path -> Alias:
        /test_table3/ds=1/000001_0 [test_table3]

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT * FROM test_table1 TABLESAMPLE(BUCKET 2 OUT OF 16)
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
PREHOOK: Input: default@test_table1@ds=1
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM test_table1 TABLESAMPLE(BUCKET 2 OUT OF 16)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
POSTHOOK: Input: default@test_table1@ds=1
#### A masked pattern was here ####
8	val_8	1
26	val_26	1
26	val_26	1
82	val_82	1
103	val_103	1
103	val_103	1
118	val_118	1
118	val_118	1
128	val_128	1
128	val_128	1
128	val_128	1
176	val_176	1
176	val_176	1
194	val_194	1
275	val_275	1
280	val_280	1
280	val_280	1
282	val_282	1
282	val_282	1
309	val_309	1
309	val_309	1
321	val_321	1
321	val_321	1
400	val_400	1
438	val_438	1
438	val_438	1
438	val_438	1
439	val_439	1
439	val_439	1
455	val_455	1
462	val_462	1
462	val_462	1
PREHOOK: query: SELECT * FROM test_table3 TABLESAMPLE(BUCKET 2 OUT OF 16)
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table3
PREHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM test_table3 TABLESAMPLE(BUCKET 2 OUT OF 16)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table3
POSTHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
462	val_462	1
462	val_462	1
462	val_462	1
462	val_462	1
455	val_455	1
439	val_439	1
439	val_439	1
439	val_439	1
439	val_439	1
438	val_438	1
438	val_438	1
438	val_438	1
438	val_438	1
438	val_438	1
438	val_438	1
438	val_438	1
438	val_438	1
438	val_438	1
400	val_400	1
321	val_321	1
321	val_321	1
321	val_321	1
321	val_321	1
309	val_309	1
309	val_309	1
309	val_309	1
309	val_309	1
282	val_282	1
282	val_282	1
282	val_282	1
282	val_282	1
280	val_280	1
280	val_280	1
280	val_280	1
280	val_280	1
275	val_275	1
194	val_194	1
176	val_176	1
176	val_176	1
176	val_176	1
176	val_176	1
128	val_128	1
128	val_128	1
128	val_128	1
128	val_128	1
128	val_128	1
128	val_128	1
128	val_128	1
128	val_128	1
128	val_128	1
118	val_118	1
118	val_118	1
118	val_118	1
118	val_118	1
103	val_103	1
103	val_103	1
103	val_103	1
103	val_103	1
82	val_82	1
26	val_26	1
26	val_26	1
26	val_26	1
26	val_26	1
8	val_8	1
PREHOOK: query: SELECT COUNT(*) FROM test_table3 TABLESAMPLE(BUCKET 2 OUT OF 16) a JOIN test_table1 TABLESAMPLE(BUCKET 2 OUT OF 16) b ON a.key = b.key AND a.ds = '1' AND b.ds='1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
PREHOOK: Input: default@test_table1@ds=1
PREHOOK: Input: default@test_table3
PREHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
POSTHOOK: query: SELECT COUNT(*) FROM test_table3 TABLESAMPLE(BUCKET 2 OUT OF 16) a JOIN test_table1 TABLESAMPLE(BUCKET 2 OUT OF 16) b ON a.key = b.key AND a.ds = '1' AND b.ds='1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
POSTHOOK: Input: default@test_table1@ds=1
POSTHOOK: Input: default@test_table3
POSTHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
140
