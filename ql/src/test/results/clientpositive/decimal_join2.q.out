PREHOOK: query: DROP TABLE IF EXISTS DECIMAL_3_txt
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS DECIMAL_3_txt
POSTHOOK: type: DROPTABLE
PREHOOK: query: DROP TABLE IF EXISTS DECIMAL_3_n0
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS DECIMAL_3_n0
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE TABLE DECIMAL_3_txt(key decimal(38,18), value int)
ROW FORMAT DELIMITED
   FIELDS TERMINATED BY ' '
STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@DECIMAL_3_txt
POSTHOOK: query: CREATE TABLE DECIMAL_3_txt(key decimal(38,18), value int)
ROW FORMAT DELIMITED
   FIELDS TERMINATED BY ' '
STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@DECIMAL_3_txt
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/kv7.txt' INTO TABLE DECIMAL_3_txt
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@decimal_3_txt
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/kv7.txt' INTO TABLE DECIMAL_3_txt
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@decimal_3_txt
PREHOOK: query: CREATE TABLE DECIMAL_3_n0 STORED AS ORC AS SELECT * FROM DECIMAL_3_txt
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@decimal_3_txt
PREHOOK: Output: database:default
PREHOOK: Output: default@DECIMAL_3_n0
POSTHOOK: query: CREATE TABLE DECIMAL_3_n0 STORED AS ORC AS SELECT * FROM DECIMAL_3_txt
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@decimal_3_txt
POSTHOOK: Output: database:default
POSTHOOK: Output: default@DECIMAL_3_n0
POSTHOOK: Lineage: decimal_3_n0.key SIMPLE [(decimal_3_txt)decimal_3_txt.FieldSchema(name:key, type:decimal(38,18), comment:null), ]
POSTHOOK: Lineage: decimal_3_n0.value SIMPLE [(decimal_3_txt)decimal_3_txt.FieldSchema(name:value, type:int, comment:null), ]
PREHOOK: query: EXPLAIN
SELECT * FROM DECIMAL_3_n0 a JOIN DECIMAL_3_n0 b ON (a.key = b.key) ORDER BY a.key, a.value, b.key, b.value
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT * FROM DECIMAL_3_n0 a JOIN DECIMAL_3_n0 b ON (a.key = b.key) ORDER BY a.key, a.value, b.key, b.value
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: a
            Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: key is not null (type: boolean)
              Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: key (type: decimal(38,18)), value (type: int)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: decimal(38,18))
                  sort order: +
                  Map-reduce partition columns: _col0 (type: decimal(38,18))
                  Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: int)
          TableScan
            alias: b
            Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: key is not null (type: boolean)
              Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: key (type: decimal(38,18)), value (type: int)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: decimal(38,18))
                  sort order: +
                  Map-reduce partition columns: _col0 (type: decimal(38,18))
                  Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: int)
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          keys:
            0 _col0 (type: decimal(38,18))
            1 _col0 (type: decimal(38,18))
          outputColumnNames: _col0, _col1, _col2, _col3
          Statistics: Num rows: 41 Data size: 4725 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              key expressions: _col0 (type: decimal(38,18)), _col1 (type: int), _col2 (type: decimal(38,18)), _col3 (type: int)
              sort order: ++++
              Statistics: Num rows: 41 Data size: 4725 Basic stats: COMPLETE Column stats: NONE
      Execution mode: vectorized
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: decimal(38,18)), KEY.reducesinkkey1 (type: int), KEY.reducesinkkey2 (type: decimal(38,18)), KEY.reducesinkkey3 (type: int)
          outputColumnNames: _col0, _col1, _col2, _col3
          Statistics: Num rows: 41 Data size: 4725 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 41 Data size: 4725 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT * FROM DECIMAL_3_n0 a JOIN DECIMAL_3_n0 b ON (a.key = b.key) ORDER BY a.key, a.value, b.key, b.value
PREHOOK: type: QUERY
PREHOOK: Input: default@decimal_3_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM DECIMAL_3_n0 a JOIN DECIMAL_3_n0 b ON (a.key = b.key) ORDER BY a.key, a.value, b.key, b.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@decimal_3_n0
#### A masked pattern was here ####
-1234567890.123456789000000000	-1234567890	-1234567890.123456789000000000	-1234567890
-4400.000000000000000000	4400	-4400.000000000000000000	4400
-1255.490000000000000000	-1255	-1255.490000000000000000	-1255
-1.122000000000000000	-11	-1.122000000000000000	-11
-1.120000000000000000	-1	-1.120000000000000000	-1
-1.120000000000000000	-1	-1.120000000000000000	-1
-1.120000000000000000	-1	-1.120000000000000000	-1
-1.120000000000000000	-1	-1.120000000000000000	-1
-0.333000000000000000	0	-0.333000000000000000	0
-0.330000000000000000	0	-0.330000000000000000	0
-0.300000000000000000	0	-0.300000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.010000000000000000	0	0.010000000000000000	0
0.020000000000000000	0	0.020000000000000000	0
0.100000000000000000	0	0.100000000000000000	0
0.200000000000000000	0	0.200000000000000000	0
0.300000000000000000	0	0.300000000000000000	0
0.330000000000000000	0	0.330000000000000000	0
0.333000000000000000	0	0.333000000000000000	0
1.000000000000000000	1	1.000000000000000000	1
1.000000000000000000	1	1.000000000000000000	1
1.000000000000000000	1	1.000000000000000000	1
1.000000000000000000	1	1.000000000000000000	1
1.000000000000000000	1	1.000000000000000000	1
1.000000000000000000	1	1.000000000000000000	1
1.000000000000000000	1	1.000000000000000000	1
1.000000000000000000	1	1.000000000000000000	1
1.000000000000000000	1	1.000000000000000000	1
1.120000000000000000	1	1.120000000000000000	1
1.122000000000000000	1	1.122000000000000000	1
2.000000000000000000	2	2.000000000000000000	2
2.000000000000000000	2	2.000000000000000000	2
2.000000000000000000	2	2.000000000000000000	2
2.000000000000000000	2	2.000000000000000000	2
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	4
3.140000000000000000	3	3.140000000000000000	4
3.140000000000000000	3	3.140000000000000000	4
3.140000000000000000	4	3.140000000000000000	3
3.140000000000000000	4	3.140000000000000000	3
3.140000000000000000	4	3.140000000000000000	3
3.140000000000000000	4	3.140000000000000000	4
10.000000000000000000	10	10.000000000000000000	10
20.000000000000000000	20	20.000000000000000000	20
100.000000000000000000	100	100.000000000000000000	100
124.000000000000000000	124	124.000000000000000000	124
125.200000000000000000	125	125.200000000000000000	125
200.000000000000000000	200	200.000000000000000000	200
1234567890.123456780000000000	1234567890	1234567890.123456780000000000	1234567890
PREHOOK: query: EXPLAIN
SELECT * FROM DECIMAL_3_n0 a JOIN DECIMAL_3_n0 b ON (a.key = b.key) ORDER BY a.key, a.value, b.key, b.value
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT * FROM DECIMAL_3_n0 a JOIN DECIMAL_3_n0 b ON (a.key = b.key) ORDER BY a.key, a.value, b.key, b.value
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-5 is a root stage
  Stage-2 depends on stages: Stage-5
  Stage-0 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-5
    Map Reduce Local Work
      Alias -> Map Local Tables:
        $hdt$_0:a 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        $hdt$_0:a 
          TableScan
            alias: a
            Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: key is not null (type: boolean)
              Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: key (type: decimal(38,18)), value (type: int)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
                HashTable Sink Operator
                  keys:
                    0 _col0 (type: decimal(38,18))
                    1 _col0 (type: decimal(38,18))

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: b
            Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: key is not null (type: boolean)
              Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: key (type: decimal(38,18)), value (type: int)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
                Map Join Operator
                  condition map:
                       Inner Join 0 to 1
                  keys:
                    0 _col0 (type: decimal(38,18))
                    1 _col0 (type: decimal(38,18))
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 41 Data size: 4725 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: decimal(38,18)), _col1 (type: int), _col2 (type: decimal(38,18)), _col3 (type: int)
                    sort order: ++++
                    Statistics: Num rows: 41 Data size: 4725 Basic stats: COMPLETE Column stats: NONE
      Execution mode: vectorized
      Local Work:
        Map Reduce Local Work
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: decimal(38,18)), KEY.reducesinkkey1 (type: int), KEY.reducesinkkey2 (type: decimal(38,18)), KEY.reducesinkkey3 (type: int)
          outputColumnNames: _col0, _col1, _col2, _col3
          Statistics: Num rows: 41 Data size: 4725 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 41 Data size: 4725 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT * FROM DECIMAL_3_n0 a JOIN DECIMAL_3_n0 b ON (a.key = b.key) ORDER BY a.key, a.value, b.key, b.value
PREHOOK: type: QUERY
PREHOOK: Input: default@decimal_3_n0
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM DECIMAL_3_n0 a JOIN DECIMAL_3_n0 b ON (a.key = b.key) ORDER BY a.key, a.value, b.key, b.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@decimal_3_n0
#### A masked pattern was here ####
-1234567890.123456789000000000	-1234567890	-1234567890.123456789000000000	-1234567890
-4400.000000000000000000	4400	-4400.000000000000000000	4400
-1255.490000000000000000	-1255	-1255.490000000000000000	-1255
-1.122000000000000000	-11	-1.122000000000000000	-11
-1.120000000000000000	-1	-1.120000000000000000	-1
-1.120000000000000000	-1	-1.120000000000000000	-1
-1.120000000000000000	-1	-1.120000000000000000	-1
-1.120000000000000000	-1	-1.120000000000000000	-1
-0.333000000000000000	0	-0.333000000000000000	0
-0.330000000000000000	0	-0.330000000000000000	0
-0.300000000000000000	0	-0.300000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.000000000000000000	0	0.000000000000000000	0
0.010000000000000000	0	0.010000000000000000	0
0.020000000000000000	0	0.020000000000000000	0
0.100000000000000000	0	0.100000000000000000	0
0.200000000000000000	0	0.200000000000000000	0
0.300000000000000000	0	0.300000000000000000	0
0.330000000000000000	0	0.330000000000000000	0
0.333000000000000000	0	0.333000000000000000	0
1.000000000000000000	1	1.000000000000000000	1
1.000000000000000000	1	1.000000000000000000	1
1.000000000000000000	1	1.000000000000000000	1
1.000000000000000000	1	1.000000000000000000	1
1.000000000000000000	1	1.000000000000000000	1
1.000000000000000000	1	1.000000000000000000	1
1.000000000000000000	1	1.000000000000000000	1
1.000000000000000000	1	1.000000000000000000	1
1.000000000000000000	1	1.000000000000000000	1
1.120000000000000000	1	1.120000000000000000	1
1.122000000000000000	1	1.122000000000000000	1
2.000000000000000000	2	2.000000000000000000	2
2.000000000000000000	2	2.000000000000000000	2
2.000000000000000000	2	2.000000000000000000	2
2.000000000000000000	2	2.000000000000000000	2
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	3
3.140000000000000000	3	3.140000000000000000	4
3.140000000000000000	3	3.140000000000000000	4
3.140000000000000000	3	3.140000000000000000	4
3.140000000000000000	4	3.140000000000000000	3
3.140000000000000000	4	3.140000000000000000	3
3.140000000000000000	4	3.140000000000000000	3
3.140000000000000000	4	3.140000000000000000	4
10.000000000000000000	10	10.000000000000000000	10
20.000000000000000000	20	20.000000000000000000	20
100.000000000000000000	100	100.000000000000000000	100
124.000000000000000000	124	124.000000000000000000	124
125.200000000000000000	125	125.200000000000000000	125
200.000000000000000000	200	200.000000000000000000	200
1234567890.123456780000000000	1234567890	1234567890.123456780000000000	1234567890
PREHOOK: query: DROP TABLE DECIMAL_3_txt
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@decimal_3_txt
PREHOOK: Output: default@decimal_3_txt
POSTHOOK: query: DROP TABLE DECIMAL_3_txt
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@decimal_3_txt
POSTHOOK: Output: default@decimal_3_txt
PREHOOK: query: DROP TABLE DECIMAL_3_n0
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@decimal_3_n0
PREHOOK: Output: default@decimal_3_n0
POSTHOOK: query: DROP TABLE DECIMAL_3_n0
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@decimal_3_n0
POSTHOOK: Output: default@decimal_3_n0
