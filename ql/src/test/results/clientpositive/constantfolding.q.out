PREHOOK: query: select * from (select 'k2' as key, '1 ' as value from src limit 2)b
union all 
select * from (select 'k3' as key, '' as value from src limit 2)b
union all 
select * from (select 'k4' as key, ' ' as value from src limit 2)c
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select * from (select 'k2' as key, '1 ' as value from src limit 2)b
union all 
select * from (select 'k3' as key, '' as value from src limit 2)b
union all 
select * from (select 'k4' as key, ' ' as value from src limit 2)c
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
k2	1 
k2	1 
k3	
k3	
k4	 
k4	 
PREHOOK: query: drop table if exists union_all_bug_test_1
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists union_all_bug_test_1
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists union_all_bug_test_2
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists union_all_bug_test_2
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table if not exists union_all_bug_test_1
(
f1 int,
f2 int
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@union_all_bug_test_1
POSTHOOK: query: create table if not exists union_all_bug_test_1
(
f1 int,
f2 int
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@union_all_bug_test_1
PREHOOK: query: create table if not exists union_all_bug_test_2
(
f1 int
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@union_all_bug_test_2
POSTHOOK: query: create table if not exists union_all_bug_test_2
(
f1 int
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@union_all_bug_test_2
PREHOOK: query: insert into table union_all_bug_test_1 values (1,1)
PREHOOK: type: QUERY
PREHOOK: Output: default@union_all_bug_test_1
POSTHOOK: query: insert into table union_all_bug_test_1 values (1,1)
POSTHOOK: type: QUERY
POSTHOOK: Output: default@union_all_bug_test_1
POSTHOOK: Lineage: union_all_bug_test_1.f1 EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: union_all_bug_test_1.f2 EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
PREHOOK: query: insert into table union_all_bug_test_2 values (1)
PREHOOK: type: QUERY
PREHOOK: Output: default@union_all_bug_test_2
POSTHOOK: query: insert into table union_all_bug_test_2 values (1)
POSTHOOK: type: QUERY
POSTHOOK: Output: default@union_all_bug_test_2
POSTHOOK: Lineage: union_all_bug_test_2.f1 EXPRESSION [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
PREHOOK: query: insert into table union_all_bug_test_1 values (0,0)
PREHOOK: type: QUERY
PREHOOK: Output: default@union_all_bug_test_1
POSTHOOK: query: insert into table union_all_bug_test_1 values (0,0)
POSTHOOK: type: QUERY
POSTHOOK: Output: default@union_all_bug_test_1
POSTHOOK: Lineage: union_all_bug_test_1.f1 EXPRESSION [(values__tmp__table__3)values__tmp__table__3.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: union_all_bug_test_1.f2 EXPRESSION [(values__tmp__table__3)values__tmp__table__3.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
PREHOOK: query: insert into table union_all_bug_test_2 values (0)
PREHOOK: type: QUERY
PREHOOK: Output: default@union_all_bug_test_2
POSTHOOK: query: insert into table union_all_bug_test_2 values (0)
POSTHOOK: type: QUERY
POSTHOOK: Output: default@union_all_bug_test_2
POSTHOOK: Lineage: union_all_bug_test_2.f1 EXPRESSION [(values__tmp__table__4)values__tmp__table__4.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
PREHOOK: query: SELECT f1
FROM (

SELECT
f1
, if('helloworld' like '%hello%' ,f1,f2) as filter
FROM union_all_bug_test_1

union all

select
f1
, 0 as filter
from union_all_bug_test_2
) A
WHERE (filter = 1 and f1 = 1)
PREHOOK: type: QUERY
PREHOOK: Input: default@union_all_bug_test_1
PREHOOK: Input: default@union_all_bug_test_2
#### A masked pattern was here ####
POSTHOOK: query: SELECT f1
FROM (

SELECT
f1
, if('helloworld' like '%hello%' ,f1,f2) as filter
FROM union_all_bug_test_1

union all

select
f1
, 0 as filter
from union_all_bug_test_2
) A
WHERE (filter = 1 and f1 = 1)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@union_all_bug_test_1
POSTHOOK: Input: default@union_all_bug_test_2
#### A masked pattern was here ####
1
PREHOOK: query: select percentile(cast(key as bigint), array()) from src where false
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select percentile(cast(key as bigint), array()) from src where false
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
NULL
PREHOOK: query: select unbase64("0xe23") from src limit 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select unbase64("0xe23") from src limit 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
��
PREHOOK: query: SELECT key,randum123, h4
FROM (SELECT *, cast(rand() as double) AS randum123, hex(4) AS h4 FROM src WHERE key = 100) a
WHERE a.h4 <= 3 limit 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: SELECT key,randum123, h4
FROM (SELECT *, cast(rand() as double) AS randum123, hex(4) AS h4 FROM src WHERE key = 100) a
WHERE a.h4 <= 3 limit 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
PREHOOK: query: select null from src limit 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select null from src limit 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
NULL
PREHOOK: query: explain select cast("1970-12-31 15:59:58.174" as TIMESTAMP) from src
PREHOOK: type: QUERY
POSTHOOK: query: explain select cast("1970-12-31 15:59:58.174" as TIMESTAMP) from src
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: src
          Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: COMPLETE
          Select Operator
            expressions: 1970-12-31 15:59:58.174 (type: timestamp)
            outputColumnNames: _col0
            Statistics: Num rows: 500 Data size: 20000 Basic stats: COMPLETE Column stats: COMPLETE
            ListSink

PREHOOK: query: explain select cast("1970-12-31 15:59:58.174" as DATE) from src
PREHOOK: type: QUERY
POSTHOOK: query: explain select cast("1970-12-31 15:59:58.174" as DATE) from src
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: src
          Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: COMPLETE
          Select Operator
            expressions: 1970-12-31 (type: date)
            outputColumnNames: _col0
            Statistics: Num rows: 500 Data size: 28000 Basic stats: COMPLETE Column stats: COMPLETE
            ListSink

PREHOOK: query: CREATE TABLE dest1(c1 STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@dest1
POSTHOOK: query: CREATE TABLE dest1(c1 STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@dest1
PREHOOK: query: FROM src INSERT OVERWRITE TABLE dest1 SELECT '  abc  ' WHERE src.key = 86
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1
POSTHOOK: query: FROM src INSERT OVERWRITE TABLE dest1 SELECT '  abc  ' WHERE src.key = 86
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1
POSTHOOK: Lineage: dest1.c1 SIMPLE []
PREHOOK: query: EXPLAIN
SELECT ROUND(LN(3.0),12), LN(0.0), LN(-1), ROUND(LOG(3.0),12), LOG(0.0),
       LOG(-1), ROUND(LOG2(3.0),12), LOG2(0.0), LOG2(-1),
       ROUND(LOG10(3.0),12), LOG10(0.0), LOG10(-1), ROUND(LOG(2, 3.0),12),
       LOG(2, 0.0), LOG(2, -1), LOG(0.5, 2), LOG(2, 0.5), ROUND(EXP(2.0),12),
       POW(2,3), POWER(2,3), POWER(2,-3), POWER(0.5, -3), POWER(4, 0.5),
       POWER(-1, 0.5), POWER(-1, 2), POWER(CAST (1 AS DECIMAL), CAST (0 AS INT)),
       POWER(CAST (2 AS DECIMAL), CAST (3 AS INT)), 
       POW(CAST (2 AS DECIMAL), CAST(3 AS INT)) FROM dest1
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT ROUND(LN(3.0),12), LN(0.0), LN(-1), ROUND(LOG(3.0),12), LOG(0.0),
       LOG(-1), ROUND(LOG2(3.0),12), LOG2(0.0), LOG2(-1),
       ROUND(LOG10(3.0),12), LOG10(0.0), LOG10(-1), ROUND(LOG(2, 3.0),12),
       LOG(2, 0.0), LOG(2, -1), LOG(0.5, 2), LOG(2, 0.5), ROUND(EXP(2.0),12),
       POW(2,3), POWER(2,3), POWER(2,-3), POWER(0.5, -3), POWER(4, 0.5),
       POWER(-1, 0.5), POWER(-1, 2), POWER(CAST (1 AS DECIMAL), CAST (0 AS INT)),
       POWER(CAST (2 AS DECIMAL), CAST (3 AS INT)), 
       POW(CAST (2 AS DECIMAL), CAST(3 AS INT)) FROM dest1
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: dest1
          Statistics: Num rows: 1 Data size: 7 Basic stats: COMPLETE Column stats: COMPLETE
          Select Operator
            expressions: 1.098612288668 (type: double), null (type: double), null (type: double), 1.098612288668 (type: double), null (type: double), null (type: double), 1.584962500721 (type: double), null (type: double), null (type: double), 0.47712125472 (type: double), null (type: double), null (type: double), 1.584962500721 (type: double), null (type: double), null (type: double), null (type: double), -1.0 (type: double), 7.389056098931 (type: double), 8.0 (type: double), 8.0 (type: double), 0.125 (type: double), 8.0 (type: double), 2.0 (type: double), NaN (type: double), 1.0 (type: double), 1.0 (type: double), 8.0 (type: double), 8.0 (type: double)
            outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27
            Statistics: Num rows: 1 Data size: 224 Basic stats: COMPLETE Column stats: COMPLETE
            ListSink

PREHOOK: query: SELECT ROUND(LN(3.0),12), LN(0.0), LN(-1), ROUND(LOG(3.0),12), LOG(0.0),
       LOG(-1), ROUND(LOG2(3.0),12), LOG2(0.0), LOG2(-1),
       ROUND(LOG10(3.0),12), LOG10(0.0), LOG10(-1), ROUND(LOG(2, 3.0),12),
       LOG(2, 0.0), LOG(2, -1), LOG(0.5, 2), LOG(2, 0.5), ROUND(EXP(2.0),12),
       POW(2,3), POWER(2,3), POWER(2,-3), POWER(0.5, -3), POWER(4, 0.5),
       POWER(-1, 0.5), POWER(-1, 2), POWER(CAST (1 AS DECIMAL), CAST (0 AS INT)),
       POWER(CAST (2 AS DECIMAL), CAST (3 AS INT)), 
       POW(CAST (2 AS DECIMAL), CAST(3 AS INT)) FROM dest1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest1
#### A masked pattern was here ####
POSTHOOK: query: SELECT ROUND(LN(3.0),12), LN(0.0), LN(-1), ROUND(LOG(3.0),12), LOG(0.0),
       LOG(-1), ROUND(LOG2(3.0),12), LOG2(0.0), LOG2(-1),
       ROUND(LOG10(3.0),12), LOG10(0.0), LOG10(-1), ROUND(LOG(2, 3.0),12),
       LOG(2, 0.0), LOG(2, -1), LOG(0.5, 2), LOG(2, 0.5), ROUND(EXP(2.0),12),
       POW(2,3), POWER(2,3), POWER(2,-3), POWER(0.5, -3), POWER(4, 0.5),
       POWER(-1, 0.5), POWER(-1, 2), POWER(CAST (1 AS DECIMAL), CAST (0 AS INT)),
       POWER(CAST (2 AS DECIMAL), CAST (3 AS INT)), 
       POW(CAST (2 AS DECIMAL), CAST(3 AS INT)) FROM dest1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest1
#### A masked pattern was here ####
1.098612288668	NULL	NULL	1.098612288668	NULL	NULL	1.584962500721	NULL	NULL	0.47712125472	NULL	NULL	1.584962500721	NULL	NULL	NULL	-1.0	7.389056098931	8.0	8.0	0.125	8.0	2.0	NaN	1.0	1.0	8.0	8.0
