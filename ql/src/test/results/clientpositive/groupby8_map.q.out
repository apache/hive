PREHOOK: query: CREATE TABLE DEST1_n136(key INT, value STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@DEST1_n136
POSTHOOK: query: CREATE TABLE DEST1_n136(key INT, value STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@DEST1_n136
PREHOOK: query: CREATE TABLE DEST2_n35(key INT, value STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@DEST2_n35
POSTHOOK: query: CREATE TABLE DEST2_n35(key INT, value STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@DEST2_n35
PREHOOK: query: EXPLAIN
FROM SRC
INSERT OVERWRITE TABLE DEST1_n136 SELECT SRC.key, COUNT(DISTINCT SUBSTR(SRC.value,5)) GROUP BY SRC.key
INSERT OVERWRITE TABLE DEST2_n35 SELECT SRC.key, COUNT(DISTINCT SUBSTR(SRC.value,5)) GROUP BY SRC.key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n136
PREHOOK: Output: default@dest2_n35
POSTHOOK: query: EXPLAIN
FROM SRC
INSERT OVERWRITE TABLE DEST1_n136 SELECT SRC.key, COUNT(DISTINCT SUBSTR(SRC.value,5)) GROUP BY SRC.key
INSERT OVERWRITE TABLE DEST2_n35 SELECT SRC.key, COUNT(DISTINCT SUBSTR(SRC.value,5)) GROUP BY SRC.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n136
POSTHOOK: Output: default@dest2_n35
STAGE DEPENDENCIES:
  Stage-2 is a root stage
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0, Stage-4, Stage-6
  Stage-4 depends on stages: Stage-2
  Stage-5 depends on stages: Stage-1, Stage-4, Stage-6
  Stage-1 depends on stages: Stage-2
  Stage-6 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: src
            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: string), value (type: string)
              outputColumnNames: key, value
              Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
              Reduce Output Operator
                key expressions: key (type: string), substr(value, 5) (type: string)
                sort order: ++
                Map-reduce partition columns: key (type: string)
                Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
      Execution mode: vectorized
      Reduce Operator Tree:
        Forward
          Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
          Group By Operator
            aggregations: count(DISTINCT KEY._col1:0._col0)
            keys: KEY._col0 (type: string)
            mode: complete
            outputColumnNames: _col0, _col1
            Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: UDFToInteger(_col0) (type: int), CAST( _col1 AS STRING) (type: string)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    name: default.dest1_n136
              Select Operator
                expressions: _col0 (type: int), _col1 (type: string)
                outputColumnNames: key, value
                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: compute_stats(key, 'hll'), compute_stats(value, 'hll')
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 864 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe
          Group By Operator
            aggregations: count(DISTINCT KEY._col1:0._col0)
            keys: KEY._col0 (type: string)
            mode: complete
            outputColumnNames: _col0, _col1
            Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: UDFToInteger(_col0) (type: int), CAST( _col1 AS STRING) (type: string)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    name: default.dest2_n35
              Select Operator
                expressions: _col0 (type: int), _col1 (type: string)
                outputColumnNames: key, value
                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: compute_stats(key, 'hll'), compute_stats(value, 'hll')
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 864 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.dest1_n136

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key, value
          Column Types: int, string
          Table: default.dest1_n136

  Stage: Stage-4
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              sort order: 
              Statistics: Num rows: 1 Data size: 864 Basic stats: COMPLETE Column stats: NONE
              value expressions: _col0 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col1 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>)
      Execution mode: vectorized
      Reduce Operator Tree:
        Group By Operator
          aggregations: compute_stats(VALUE._col0), compute_stats(VALUE._col1)
          mode: mergepartial
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 1 Data size: 880 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 1 Data size: 880 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-5
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: key, value
          Column Types: int, string
          Table: default.dest2_n35

  Stage: Stage-1
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.dest2_n35

  Stage: Stage-6
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              sort order: 
              Statistics: Num rows: 1 Data size: 864 Basic stats: COMPLETE Column stats: NONE
              value expressions: _col0 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col1 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>)
      Execution mode: vectorized
      Reduce Operator Tree:
        Group By Operator
          aggregations: compute_stats(VALUE._col0), compute_stats(VALUE._col1)
          mode: mergepartial
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 1 Data size: 880 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 1 Data size: 880 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

PREHOOK: query: FROM SRC
INSERT OVERWRITE TABLE DEST1_n136 SELECT SRC.key, COUNT(DISTINCT SUBSTR(SRC.value,5)) GROUP BY SRC.key
INSERT OVERWRITE TABLE DEST2_n35 SELECT SRC.key, COUNT(DISTINCT SUBSTR(SRC.value,5)) GROUP BY SRC.key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n136
PREHOOK: Output: default@dest2_n35
POSTHOOK: query: FROM SRC
INSERT OVERWRITE TABLE DEST1_n136 SELECT SRC.key, COUNT(DISTINCT SUBSTR(SRC.value,5)) GROUP BY SRC.key
INSERT OVERWRITE TABLE DEST2_n35 SELECT SRC.key, COUNT(DISTINCT SUBSTR(SRC.value,5)) GROUP BY SRC.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n136
POSTHOOK: Output: default@dest2_n35
POSTHOOK: Lineage: dest1_n136.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest1_n136.value EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: dest2_n35.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest2_n35.value EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: SELECT DEST1_n136.* FROM DEST1_n136
PREHOOK: type: QUERY
PREHOOK: Input: default@dest1_n136
#### A masked pattern was here ####
POSTHOOK: query: SELECT DEST1_n136.* FROM DEST1_n136
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest1_n136
#### A masked pattern was here ####
0	1
10	1
100	1
103	1
104	1
105	1
11	1
111	1
113	1
114	1
116	1
118	1
119	1
12	1
120	1
125	1
126	1
128	1
129	1
131	1
133	1
134	1
136	1
137	1
138	1
143	1
145	1
146	1
149	1
15	1
150	1
152	1
153	1
155	1
156	1
157	1
158	1
160	1
162	1
163	1
164	1
165	1
166	1
167	1
168	1
169	1
17	1
170	1
172	1
174	1
175	1
176	1
177	1
178	1
179	1
18	1
180	1
181	1
183	1
186	1
187	1
189	1
19	1
190	1
191	1
192	1
193	1
194	1
195	1
196	1
197	1
199	1
2	1
20	1
200	1
201	1
202	1
203	1
205	1
207	1
208	1
209	1
213	1
214	1
216	1
217	1
218	1
219	1
221	1
222	1
223	1
224	1
226	1
228	1
229	1
230	1
233	1
235	1
237	1
238	1
239	1
24	1
241	1
242	1
244	1
247	1
248	1
249	1
252	1
255	1
256	1
257	1
258	1
26	1
260	1
262	1
263	1
265	1
266	1
27	1
272	1
273	1
274	1
275	1
277	1
278	1
28	1
280	1
281	1
282	1
283	1
284	1
285	1
286	1
287	1
288	1
289	1
291	1
292	1
296	1
298	1
30	1
302	1
305	1
306	1
307	1
308	1
309	1
310	1
311	1
315	1
316	1
317	1
318	1
321	1
322	1
323	1
325	1
327	1
33	1
331	1
332	1
333	1
335	1
336	1
338	1
339	1
34	1
341	1
342	1
344	1
345	1
348	1
35	1
351	1
353	1
356	1
360	1
362	1
364	1
365	1
366	1
367	1
368	1
369	1
37	1
373	1
374	1
375	1
377	1
378	1
379	1
382	1
384	1
386	1
389	1
392	1
393	1
394	1
395	1
396	1
397	1
399	1
4	1
400	1
401	1
402	1
403	1
404	1
406	1
407	1
409	1
41	1
411	1
413	1
414	1
417	1
418	1
419	1
42	1
421	1
424	1
427	1
429	1
43	1
430	1
431	1
432	1
435	1
436	1
437	1
438	1
439	1
44	1
443	1
444	1
446	1
448	1
449	1
452	1
453	1
454	1
455	1
457	1
458	1
459	1
460	1
462	1
463	1
466	1
467	1
468	1
469	1
47	1
470	1
472	1
475	1
477	1
478	1
479	1
480	1
481	1
482	1
483	1
484	1
485	1
487	1
489	1
490	1
491	1
492	1
493	1
494	1
495	1
496	1
497	1
498	1
5	1
51	1
53	1
54	1
57	1
58	1
64	1
65	1
66	1
67	1
69	1
70	1
72	1
74	1
76	1
77	1
78	1
8	1
80	1
82	1
83	1
84	1
85	1
86	1
87	1
9	1
90	1
92	1
95	1
96	1
97	1
98	1
PREHOOK: query: SELECT DEST2_n35.* FROM DEST2_n35
PREHOOK: type: QUERY
PREHOOK: Input: default@dest2_n35
#### A masked pattern was here ####
POSTHOOK: query: SELECT DEST2_n35.* FROM DEST2_n35
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest2_n35
#### A masked pattern was here ####
0	1
10	1
100	1
103	1
104	1
105	1
11	1
111	1
113	1
114	1
116	1
118	1
119	1
12	1
120	1
125	1
126	1
128	1
129	1
131	1
133	1
134	1
136	1
137	1
138	1
143	1
145	1
146	1
149	1
15	1
150	1
152	1
153	1
155	1
156	1
157	1
158	1
160	1
162	1
163	1
164	1
165	1
166	1
167	1
168	1
169	1
17	1
170	1
172	1
174	1
175	1
176	1
177	1
178	1
179	1
18	1
180	1
181	1
183	1
186	1
187	1
189	1
19	1
190	1
191	1
192	1
193	1
194	1
195	1
196	1
197	1
199	1
2	1
20	1
200	1
201	1
202	1
203	1
205	1
207	1
208	1
209	1
213	1
214	1
216	1
217	1
218	1
219	1
221	1
222	1
223	1
224	1
226	1
228	1
229	1
230	1
233	1
235	1
237	1
238	1
239	1
24	1
241	1
242	1
244	1
247	1
248	1
249	1
252	1
255	1
256	1
257	1
258	1
26	1
260	1
262	1
263	1
265	1
266	1
27	1
272	1
273	1
274	1
275	1
277	1
278	1
28	1
280	1
281	1
282	1
283	1
284	1
285	1
286	1
287	1
288	1
289	1
291	1
292	1
296	1
298	1
30	1
302	1
305	1
306	1
307	1
308	1
309	1
310	1
311	1
315	1
316	1
317	1
318	1
321	1
322	1
323	1
325	1
327	1
33	1
331	1
332	1
333	1
335	1
336	1
338	1
339	1
34	1
341	1
342	1
344	1
345	1
348	1
35	1
351	1
353	1
356	1
360	1
362	1
364	1
365	1
366	1
367	1
368	1
369	1
37	1
373	1
374	1
375	1
377	1
378	1
379	1
382	1
384	1
386	1
389	1
392	1
393	1
394	1
395	1
396	1
397	1
399	1
4	1
400	1
401	1
402	1
403	1
404	1
406	1
407	1
409	1
41	1
411	1
413	1
414	1
417	1
418	1
419	1
42	1
421	1
424	1
427	1
429	1
43	1
430	1
431	1
432	1
435	1
436	1
437	1
438	1
439	1
44	1
443	1
444	1
446	1
448	1
449	1
452	1
453	1
454	1
455	1
457	1
458	1
459	1
460	1
462	1
463	1
466	1
467	1
468	1
469	1
47	1
470	1
472	1
475	1
477	1
478	1
479	1
480	1
481	1
482	1
483	1
484	1
485	1
487	1
489	1
490	1
491	1
492	1
493	1
494	1
495	1
496	1
497	1
498	1
5	1
51	1
53	1
54	1
57	1
58	1
64	1
65	1
66	1
67	1
69	1
70	1
72	1
74	1
76	1
77	1
78	1
8	1
80	1
82	1
83	1
84	1
85	1
86	1
87	1
9	1
90	1
92	1
95	1
96	1
97	1
98	1
