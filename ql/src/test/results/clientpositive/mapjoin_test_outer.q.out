PREHOOK: query: --HIVE-2101 mapjoin sometimes gives wrong results if there is a filter in the on condition

create table dest_1 (key STRING, value STRING) stored as textfile
PREHOOK: type: CREATETABLE
POSTHOOK: query: --HIVE-2101 mapjoin sometimes gives wrong results if there is a filter in the on condition

create table dest_1 (key STRING, value STRING) stored as textfile
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@dest_1
PREHOOK: query: insert overwrite table dest_1 select * from src1 order by src1.value limit 8
PREHOOK: type: QUERY
PREHOOK: Input: default@src1
PREHOOK: Output: default@dest_1
POSTHOOK: query: insert overwrite table dest_1 select * from src1 order by src1.value limit 8
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src1
POSTHOOK: Output: default@dest_1
POSTHOOK: Lineage: dest_1.key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: insert into table dest_1 select "333444","555666" from src1 limit 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src1
PREHOOK: Output: default@dest_1
POSTHOOK: query: insert into table dest_1 select "333444","555666" from src1 limit 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src1
POSTHOOK: Output: default@dest_1
POSTHOOK: Lineage: dest_1.key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.key SIMPLE []
POSTHOOK: Lineage: dest_1.value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.value SIMPLE []
PREHOOK: query: create table dest_2 (key STRING, value STRING) stored as textfile
PREHOOK: type: CREATETABLE
POSTHOOK: query: create table dest_2 (key STRING, value STRING) stored as textfile
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@dest_2
POSTHOOK: Lineage: dest_1.key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.key SIMPLE []
POSTHOOK: Lineage: dest_1.value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.value SIMPLE []
PREHOOK: query: insert into table dest_2 select * from dest_1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_1
PREHOOK: Output: default@dest_2
POSTHOOK: query: insert into table dest_2 select * from dest_1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_1
POSTHOOK: Output: default@dest_2
POSTHOOK: Lineage: dest_1.key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.key SIMPLE []
POSTHOOK: Lineage: dest_1.value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.value SIMPLE []
POSTHOOK: Lineage: dest_2.key SIMPLE [(dest_1)dest_1.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: dest_2.value SIMPLE [(dest_1)dest_1.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: SELECT * FROM src1
  RIGHT OUTER JOIN dest_1 src2 ON (src1.key = src2.key)
  JOIN dest_2 src3 ON (src2.key = src3.key)
  SORT BY src1.key, src1.value, src2.key, src2.value, src3.key, src3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_1
PREHOOK: Input: default@dest_2
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM src1
  RIGHT OUTER JOIN dest_1 src2 ON (src1.key = src2.key)
  JOIN dest_2 src3 ON (src2.key = src3.key)
  SORT BY src1.key, src1.value, src2.key, src2.value, src3.key, src3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_1
POSTHOOK: Input: default@dest_2
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: Lineage: dest_1.key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.key SIMPLE []
POSTHOOK: Lineage: dest_1.value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.value SIMPLE []
POSTHOOK: Lineage: dest_2.key SIMPLE [(dest_1)dest_1.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: dest_2.value SIMPLE [(dest_1)dest_1.FieldSchema(name:value, type:string, comment:null), ]
NULL	NULL	333444	555666	333444	555666
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
128		128		128	
146	val_146	146	val_146	146	val_146
224		224		224	
369		369		369	
PREHOOK: query: explain
SELECT /*+ mapjoin(src1, src2) */ * FROM src1
  RIGHT OUTER JOIN dest_1 src2 ON (src1.key = src2.key)
  JOIN dest_2 src3 ON (src2.key = src3.key)
  SORT BY src1.key, src1.value, src2.key, src2.value, src3.key, src3.value
PREHOOK: type: QUERY
POSTHOOK: query: explain
SELECT /*+ mapjoin(src1, src2) */ * FROM src1
  RIGHT OUTER JOIN dest_1 src2 ON (src1.key = src2.key)
  JOIN dest_2 src3 ON (src2.key = src3.key)
  SORT BY src1.key, src1.value, src2.key, src2.value, src3.key, src3.value
POSTHOOK: type: QUERY
POSTHOOK: Lineage: dest_1.key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.key SIMPLE []
POSTHOOK: Lineage: dest_1.value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.value SIMPLE []
POSTHOOK: Lineage: dest_2.key SIMPLE [(dest_1)dest_1.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: dest_2.value SIMPLE [(dest_1)dest_1.FieldSchema(name:value, type:string, comment:null), ]
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_RIGHTOUTERJOIN (TOK_TABREF (TOK_TABNAME src1)) (TOK_TABREF (TOK_TABNAME dest_1) src2) (= (. (TOK_TABLE_OR_COL src1) key) (. (TOK_TABLE_OR_COL src2) key))) (TOK_TABREF (TOK_TABNAME dest_2) src3) (= (. (TOK_TABLE_OR_COL src2) key) (. (TOK_TABLE_OR_COL src3) key)))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_HINTLIST (TOK_HINT TOK_MAPJOIN (TOK_HINTARGLIST src1 src2))) (TOK_SELEXPR TOK_ALLCOLREF)) (TOK_SORTBY (TOK_TABSORTCOLNAMEASC (. (TOK_TABLE_OR_COL src1) key)) (TOK_TABSORTCOLNAMEASC (. (TOK_TABLE_OR_COL src1) value)) (TOK_TABSORTCOLNAMEASC (. (TOK_TABLE_OR_COL src2) key)) (TOK_TABSORTCOLNAMEASC (. (TOK_TABLE_OR_COL src2) value)) (TOK_TABSORTCOLNAMEASC (. (TOK_TABLE_OR_COL src3) key)) (TOK_TABSORTCOLNAMEASC (. (TOK_TABLE_OR_COL src3) value)))))

STAGE DEPENDENCIES:
  Stage-4 is a root stage
  Stage-1 depends on stages: Stage-4
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-4
    Map Reduce Local Work
      Alias -> Map Local Tables:
        src1 
          Fetch Operator
            limit: -1
        src2 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        src1 
          TableScan
            alias: src1
            HashTable Sink Operator
              condition expressions:
                0 {key} {value}
                1 {key} {value}
                2 {key} {value}
              handleSkewJoin: false
              keys:
                0 [Column[key]]
                1 [Column[key]]
                2 [Column[key]]
              Position of Big Table: 2
        src2 
          TableScan
            alias: src2
            HashTable Sink Operator
              condition expressions:
                0 {key} {value}
                1 {key} {value}
                2 {key} {value}
              handleSkewJoin: false
              keys:
                0 [Column[key]]
                1 [Column[key]]
                2 [Column[key]]
              Position of Big Table: 2

  Stage: Stage-1
    Map Reduce
      Alias -> Map Operator Tree:
        src3 
          TableScan
            alias: src3
            Map Join Operator
              condition map:
                   Right Outer Join0 to 1
                   Inner Join 1 to 2
              condition expressions:
                0 {key} {value}
                1 {key} {value}
                2 {key} {value}
              handleSkewJoin: false
              keys:
                0 [Column[key]]
                1 [Column[key]]
                2 [Column[key]]
              outputColumnNames: _col0, _col1, _col4, _col5, _col8, _col9
              Position of Big Table: 2
              Select Operator
                expressions:
                      expr: _col0
                      type: string
                      expr: _col1
                      type: string
                      expr: _col4
                      type: string
                      expr: _col5
                      type: string
                      expr: _col8
                      type: string
                      expr: _col9
                      type: string
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Reduce Output Operator
                  key expressions:
                        expr: _col0
                        type: string
                        expr: _col1
                        type: string
                        expr: _col2
                        type: string
                        expr: _col3
                        type: string
                        expr: _col4
                        type: string
                        expr: _col5
                        type: string
                  sort order: ++++++
                  tag: -1
                  value expressions:
                        expr: _col0
                        type: string
                        expr: _col1
                        type: string
                        expr: _col2
                        type: string
                        expr: _col3
                        type: string
                        expr: _col4
                        type: string
                        expr: _col5
                        type: string
      Local Work:
        Map Reduce Local Work
      Reduce Operator Tree:
        Extract
          File Output Operator
            compressed: false
            GlobalTableId: 0
            table:
                input format: org.apache.hadoop.mapred.TextInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat

  Stage: Stage-0
    Fetch Operator
      limit: -1


PREHOOK: query: SELECT /*+ mapjoin(src1, src2) */ * FROM src1
  RIGHT OUTER JOIN dest_1 src2 ON (src1.key = src2.key)
  JOIN dest_2 src3 ON (src2.key = src3.key)
  SORT BY src1.key, src1.value, src2.key, src2.value, src3.key, src3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_1
PREHOOK: Input: default@dest_2
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT /*+ mapjoin(src1, src2) */ * FROM src1
  RIGHT OUTER JOIN dest_1 src2 ON (src1.key = src2.key)
  JOIN dest_2 src3 ON (src2.key = src3.key)
  SORT BY src1.key, src1.value, src2.key, src2.value, src3.key, src3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_1
POSTHOOK: Input: default@dest_2
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: Lineage: dest_1.key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.key SIMPLE []
POSTHOOK: Lineage: dest_1.value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.value SIMPLE []
POSTHOOK: Lineage: dest_2.key SIMPLE [(dest_1)dest_1.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: dest_2.value SIMPLE [(dest_1)dest_1.FieldSchema(name:value, type:string, comment:null), ]
NULL	NULL	333444	555666	333444	555666
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
128		128		128	
146	val_146	146	val_146	146	val_146
224		224		224	
369		369		369	
PREHOOK: query: SELECT /*+ mapjoin(src1, src2) */ * FROM src1
  RIGHT OUTER JOIN dest_1 src2 ON (src1.key = src2.key)
  JOIN dest_2 src3 ON (src1.key = src3.key)
  SORT BY src1.key, src1.value, src2.key, src2.value, src3.key, src3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_1
PREHOOK: Input: default@dest_2
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT /*+ mapjoin(src1, src2) */ * FROM src1
  RIGHT OUTER JOIN dest_1 src2 ON (src1.key = src2.key)
  JOIN dest_2 src3 ON (src1.key = src3.key)
  SORT BY src1.key, src1.value, src2.key, src2.value, src3.key, src3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_1
POSTHOOK: Input: default@dest_2
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: Lineage: dest_1.key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.key SIMPLE []
POSTHOOK: Lineage: dest_1.value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.value SIMPLE []
POSTHOOK: Lineage: dest_2.key SIMPLE [(dest_1)dest_1.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: dest_2.value SIMPLE [(dest_1)dest_1.FieldSchema(name:value, type:string, comment:null), ]
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
128		128		128	
146	val_146	146	val_146	146	val_146
224		224		224	
369		369		369	
PREHOOK: query: SELECT * FROM src1
  LEFT OUTER JOIN dest_1 src2 ON (src1.key = src2.key)
  JOIN dest_2 src3 ON (src1.key = src3.key)
  SORT BY src1.key, src1.value, src2.key, src2.value, src3.key, src3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_1
PREHOOK: Input: default@dest_2
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM src1
  LEFT OUTER JOIN dest_1 src2 ON (src1.key = src2.key)
  JOIN dest_2 src3 ON (src1.key = src3.key)
  SORT BY src1.key, src1.value, src2.key, src2.value, src3.key, src3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_1
POSTHOOK: Input: default@dest_2
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: Lineage: dest_1.key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.key SIMPLE []
POSTHOOK: Lineage: dest_1.value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.value SIMPLE []
POSTHOOK: Lineage: dest_2.key SIMPLE [(dest_1)dest_1.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: dest_2.value SIMPLE [(dest_1)dest_1.FieldSchema(name:value, type:string, comment:null), ]
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
128		128		128	
146	val_146	146	val_146	146	val_146
224		224		224	
369		369		369	
PREHOOK: query: SELECT * FROM src1
  LEFT OUTER JOIN dest_1 src2 ON (src1.key = src2.key)
  JOIN dest_2 src3 ON (src2.key = src3.key)
  SORT BY src1.key, src1.value, src2.key, src2.value, src3.key, src3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_1
PREHOOK: Input: default@dest_2
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM src1
  LEFT OUTER JOIN dest_1 src2 ON (src1.key = src2.key)
  JOIN dest_2 src3 ON (src2.key = src3.key)
  SORT BY src1.key, src1.value, src2.key, src2.value, src3.key, src3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_1
POSTHOOK: Input: default@dest_2
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: Lineage: dest_1.key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.key SIMPLE []
POSTHOOK: Lineage: dest_1.value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.value SIMPLE []
POSTHOOK: Lineage: dest_2.key SIMPLE [(dest_1)dest_1.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: dest_2.value SIMPLE [(dest_1)dest_1.FieldSchema(name:value, type:string, comment:null), ]
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
128		128		128	
146	val_146	146	val_146	146	val_146
224		224		224	
369		369		369	
PREHOOK: query: explain
SELECT * FROM src1
  RIGHT OUTER JOIN dest_1 src2 ON (src1.key = src2.key)
  JOIN dest_2 src3 ON (src2.key = src3.key)
  SORT BY src1.key, src1.value, src2.key, src2.value, src3.key, src3.value
PREHOOK: type: QUERY
POSTHOOK: query: explain
SELECT * FROM src1
  RIGHT OUTER JOIN dest_1 src2 ON (src1.key = src2.key)
  JOIN dest_2 src3 ON (src2.key = src3.key)
  SORT BY src1.key, src1.value, src2.key, src2.value, src3.key, src3.value
POSTHOOK: type: QUERY
POSTHOOK: Lineage: dest_1.key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.key SIMPLE []
POSTHOOK: Lineage: dest_1.value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.value SIMPLE []
POSTHOOK: Lineage: dest_2.key SIMPLE [(dest_1)dest_1.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: dest_2.value SIMPLE [(dest_1)dest_1.FieldSchema(name:value, type:string, comment:null), ]
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_RIGHTOUTERJOIN (TOK_TABREF (TOK_TABNAME src1)) (TOK_TABREF (TOK_TABNAME dest_1) src2) (= (. (TOK_TABLE_OR_COL src1) key) (. (TOK_TABLE_OR_COL src2) key))) (TOK_TABREF (TOK_TABNAME dest_2) src3) (= (. (TOK_TABLE_OR_COL src2) key) (. (TOK_TABLE_OR_COL src3) key)))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR TOK_ALLCOLREF)) (TOK_SORTBY (TOK_TABSORTCOLNAMEASC (. (TOK_TABLE_OR_COL src1) key)) (TOK_TABSORTCOLNAMEASC (. (TOK_TABLE_OR_COL src1) value)) (TOK_TABSORTCOLNAMEASC (. (TOK_TABLE_OR_COL src2) key)) (TOK_TABSORTCOLNAMEASC (. (TOK_TABLE_OR_COL src2) value)) (TOK_TABSORTCOLNAMEASC (. (TOK_TABLE_OR_COL src3) key)) (TOK_TABSORTCOLNAMEASC (. (TOK_TABLE_OR_COL src3) value)))))

STAGE DEPENDENCIES:
  Stage-6 is a root stage
  Stage-5 depends on stages: Stage-6
  Stage-2 depends on stages: Stage-5
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-6
    Map Reduce Local Work
      Alias -> Map Local Tables:
        src1 
          Fetch Operator
            limit: -1
        src3 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        src1 
          TableScan
            alias: src1
            HashTable Sink Operator
              condition expressions:
                0 {key} {value}
                1 {key} {value}
                2 {key} {value}
              handleSkewJoin: false
              keys:
                0 [Column[key]]
                1 [Column[key]]
                2 [Column[key]]
              Position of Big Table: 1
        src3 
          TableScan
            alias: src3
            HashTable Sink Operator
              condition expressions:
                0 {key} {value}
                1 {key} {value}
                2 {key} {value}
              handleSkewJoin: false
              keys:
                0 [Column[key]]
                1 [Column[key]]
                2 [Column[key]]
              Position of Big Table: 1

  Stage: Stage-5
    Map Reduce
      Alias -> Map Operator Tree:
        src2 
          TableScan
            alias: src2
            Map Join Operator
              condition map:
                   Right Outer Join0 to 1
                   Inner Join 1 to 2
              condition expressions:
                0 {key} {value}
                1 {key} {value}
                2 {key} {value}
              handleSkewJoin: false
              keys:
                0 [Column[key]]
                1 [Column[key]]
                2 [Column[key]]
              outputColumnNames: _col0, _col1, _col4, _col5, _col8, _col9
              Position of Big Table: 1
              Select Operator
                expressions:
                      expr: _col0
                      type: string
                      expr: _col1
                      type: string
                      expr: _col4
                      type: string
                      expr: _col5
                      type: string
                      expr: _col8
                      type: string
                      expr: _col9
                      type: string
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                File Output Operator
                  compressed: false
                  GlobalTableId: 0
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
      Local Work:
        Map Reduce Local Work

  Stage: Stage-2
    Map Reduce
      Alias -> Map Operator Tree:
#### A masked pattern was here ####
            Reduce Output Operator
              key expressions:
                    expr: _col0
                    type: string
                    expr: _col1
                    type: string
                    expr: _col2
                    type: string
                    expr: _col3
                    type: string
                    expr: _col4
                    type: string
                    expr: _col5
                    type: string
              sort order: ++++++
              tag: -1
              value expressions:
                    expr: _col0
                    type: string
                    expr: _col1
                    type: string
                    expr: _col2
                    type: string
                    expr: _col3
                    type: string
                    expr: _col4
                    type: string
                    expr: _col5
                    type: string
      Reduce Operator Tree:
        Extract
          File Output Operator
            compressed: false
            GlobalTableId: 0
            table:
                input format: org.apache.hadoop.mapred.TextInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat

  Stage: Stage-0
    Fetch Operator
      limit: -1


PREHOOK: query: SELECT * FROM src1
  RIGHT OUTER JOIN dest_1 src2 ON (src1.key = src2.key)
  JOIN dest_2 src3 ON (src2.key = src3.key)
  SORT BY src1.key, src1.value, src2.key, src2.value, src3.key, src3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_1
PREHOOK: Input: default@dest_2
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM src1
  RIGHT OUTER JOIN dest_1 src2 ON (src1.key = src2.key)
  JOIN dest_2 src3 ON (src2.key = src3.key)
  SORT BY src1.key, src1.value, src2.key, src2.value, src3.key, src3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_1
POSTHOOK: Input: default@dest_2
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: Lineage: dest_1.key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.key SIMPLE []
POSTHOOK: Lineage: dest_1.value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: dest_1.value SIMPLE []
POSTHOOK: Lineage: dest_2.key SIMPLE [(dest_1)dest_1.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: dest_2.value SIMPLE [(dest_1)dest_1.FieldSchema(name:value, type:string, comment:null), ]
NULL	NULL	333444	555666	333444	555666
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_165				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_193				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_265				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_27				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_409				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
	val_484				
128		128		128	
146	val_146	146	val_146	146	val_146
224		224		224	
369		369		369	
