PREHOOK: query: CREATE TABLE test_table1 (key int, value STRING) PARTITIONED BY (ds STRING)
CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_table1
POSTHOOK: query: CREATE TABLE test_table1 (key int, value STRING) PARTITIONED BY (ds STRING)
CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_table1
PREHOOK: query: CREATE TABLE test_table2 (key STRING, value1 STRING, value2 string) PARTITIONED BY (ds STRING)
CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_table2
POSTHOOK: query: CREATE TABLE test_table2 (key STRING, value1 STRING, value2 string) PARTITIONED BY (ds STRING)
CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_table2
PREHOOK: query: FROM src
INSERT OVERWRITE TABLE test_table1 PARTITION (ds = '1') SELECT *
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@test_table1@ds=1
POSTHOOK: query: FROM src
INSERT OVERWRITE TABLE test_table1 PARTITION (ds = '1') SELECT *
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@test_table1@ds=1
POSTHOOK: Lineage: test_table1 PARTITION(ds=1).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: test_table1 PARTITION(ds=1).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '1')
SELECT a.key, a.value, a.value FROM test_table1 a WHERE a.ds = '1'
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '1')
SELECT a.key, a.value, a.value FROM test_table1 a WHERE a.ds = '1'
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1
  Stage-2 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (PARTITION-LEVEL SORT, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: int), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: UDFToString(_col0) (type: string)
                      sort order: +
                      Map-reduce partition columns: UDFToString(_col0) (type: string)
                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: int), _col1 (type: string)
            Execution mode: vectorized
        Reducer 2 
            Execution mode: vectorized
            Reduce Operator Tree:
              Select Operator
                expressions: UDFToString(VALUE._col0) (type: string), VALUE._col1 (type: string), VALUE._col1 (type: string)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.test_table2

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds 1
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.test_table2

  Stage: Stage-2
    Stats Work
      Basic Stats Work:

PREHOOK: query: INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '1')
SELECT a.key, a.value, a.value FROM test_table1 a WHERE a.ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
PREHOOK: Input: default@test_table1@ds=1
PREHOOK: Output: default@test_table2@ds=1
POSTHOOK: query: INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '1')
SELECT a.key, a.value, a.value FROM test_table1 a WHERE a.ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
POSTHOOK: Input: default@test_table1@ds=1
POSTHOOK: Output: default@test_table2@ds=1
POSTHOOK: Lineage: test_table2 PARTITION(ds=1).key EXPRESSION [(test_table1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: test_table2 PARTITION(ds=1).value1 SIMPLE [(test_table1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: test_table2 PARTITION(ds=1).value2 SIMPLE [(test_table1)a.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: select count(*) from test_table2 where ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 where ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
#### A masked pattern was here ####
500
PREHOOK: query: select count(*) from test_table2 where ds = '1' and hash(key) % 2 = 0
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
PREHOOK: Input: default@test_table2@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 where ds = '1' and hash(key) % 2 = 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
POSTHOOK: Input: default@test_table2@ds=1
#### A masked pattern was here ####
242
PREHOOK: query: select count(*) from test_table2 where ds = '1' and hash(key) % 2 = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table2
PREHOOK: Input: default@test_table2@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table2 where ds = '1' and hash(key) % 2 = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table2
POSTHOOK: Input: default@test_table2@ds=1
#### A masked pattern was here ####
258
PREHOOK: query: CREATE TABLE test_table3 (key STRING, value1 int, value2 string) PARTITIONED BY (ds STRING)
CLUSTERED BY (value1) SORTED BY (value1) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_table3
POSTHOOK: query: CREATE TABLE test_table3 (key STRING, value1 int, value2 string) PARTITIONED BY (ds STRING)
CLUSTERED BY (value1) SORTED BY (value1) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_table3
PREHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE test_table3 PARTITION (ds = '1')
SELECT a.value, a.key, a.value FROM test_table1 a WHERE a.ds = '1'
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE test_table3 PARTITION (ds = '1')
SELECT a.value, a.key, a.value FROM test_table1 a WHERE a.ds = '1'
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1
  Stage-2 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (PARTITION-LEVEL SORT, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: value (type: string), key (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: string)
            Execution mode: vectorized
        Reducer 2 
            Execution mode: vectorized
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), KEY.reducesinkkey0 (type: int), VALUE._col0 (type: string)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.test_table3

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds 1
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.test_table3

  Stage: Stage-2
    Stats Work
      Basic Stats Work:

PREHOOK: query: INSERT OVERWRITE TABLE test_table3 PARTITION (ds = '1')
SELECT a.value, a.key, a.value FROM test_table1 a WHERE a.ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
PREHOOK: Input: default@test_table1@ds=1
PREHOOK: Output: default@test_table3@ds=1
POSTHOOK: query: INSERT OVERWRITE TABLE test_table3 PARTITION (ds = '1')
SELECT a.value, a.key, a.value FROM test_table1 a WHERE a.ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
POSTHOOK: Input: default@test_table1@ds=1
POSTHOOK: Output: default@test_table3@ds=1
POSTHOOK: Lineage: test_table3 PARTITION(ds=1).key SIMPLE [(test_table1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: test_table3 PARTITION(ds=1).value1 SIMPLE [(test_table1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: test_table3 PARTITION(ds=1).value2 SIMPLE [(test_table1)a.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: select count(*) from test_table3 where ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table3
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table3 where ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table3
#### A masked pattern was here ####
500
PREHOOK: query: select count(*) from test_table3 where ds = '1' and hash(value1) % 2 = 0
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table3
PREHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table3 where ds = '1' and hash(value1) % 2 = 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table3
POSTHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
247
PREHOOK: query: select count(*) from test_table3 where ds = '1' and hash(value1) % 2 = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table3
PREHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table3 where ds = '1' and hash(value1) % 2 = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table3
POSTHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
253
PREHOOK: query: select count(*) from test_table3 tablesample (bucket 1 out of 2) s where ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table3
PREHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table3 tablesample (bucket 1 out of 2) s where ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table3
POSTHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
243
PREHOOK: query: select count(*) from test_table3 tablesample (bucket 2 out of 2) s where ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table3
PREHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from test_table3 tablesample (bucket 2 out of 2) s where ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table3
POSTHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
257
PREHOOK: query: select * from test_table3
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table3
PREHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select * from test_table3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table3
POSTHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
val_2	2	val_2	1
val_10	10	val_10	1
val_17	17	val_17	1
val_19	19	val_19	1
val_20	20	val_20	1
val_27	27	val_27	1
val_30	30	val_30	1
val_41	41	val_41	1
val_43	43	val_43	1
val_51	51	val_51	1
val_51	51	val_51	1
val_54	54	val_54	1
val_57	57	val_57	1
val_58	58	val_58	1
val_58	58	val_58	1
val_64	64	val_64	1
val_65	65	val_65	1
val_67	67	val_67	1
val_67	67	val_67	1
val_69	69	val_69	1
val_70	70	val_70	1
val_70	70	val_70	1
val_70	70	val_70	1
val_77	77	val_77	1
val_80	80	val_80	1
val_83	83	val_83	1
val_83	83	val_83	1
val_84	84	val_84	1
val_84	84	val_84	1
val_85	85	val_85	1
val_86	86	val_86	1
val_90	90	val_90	1
val_90	90	val_90	1
val_90	90	val_90	1
val_96	96	val_96	1
val_97	97	val_97	1
val_97	97	val_97	1
val_98	98	val_98	1
val_98	98	val_98	1
val_105	105	val_105	1
val_113	113	val_113	1
val_113	113	val_113	1
val_116	116	val_116	1
val_119	119	val_119	1
val_119	119	val_119	1
val_119	119	val_119	1
val_126	126	val_126	1
val_133	133	val_133	1
val_134	134	val_134	1
val_134	134	val_134	1
val_137	137	val_137	1
val_137	137	val_137	1
val_146	146	val_146	1
val_146	146	val_146	1
val_149	149	val_149	1
val_149	149	val_149	1
val_153	153	val_153	1
val_156	156	val_156	1
val_157	157	val_157	1
val_158	158	val_158	1
val_162	162	val_162	1
val_163	163	val_163	1
val_164	164	val_164	1
val_164	164	val_164	1
val_165	165	val_165	1
val_165	165	val_165	1
val_169	169	val_169	1
val_169	169	val_169	1
val_169	169	val_169	1
val_169	169	val_169	1
val_177	177	val_177	1
val_178	178	val_178	1
val_181	181	val_181	1
val_187	187	val_187	1
val_187	187	val_187	1
val_187	187	val_187	1
val_190	190	val_190	1
val_191	191	val_191	1
val_191	191	val_191	1
val_195	195	val_195	1
val_195	195	val_195	1
val_197	197	val_197	1
val_197	197	val_197	1
val_199	199	val_199	1
val_199	199	val_199	1
val_199	199	val_199	1
val_201	201	val_201	1
val_202	202	val_202	1
val_208	208	val_208	1
val_208	208	val_208	1
val_208	208	val_208	1
val_214	214	val_214	1
val_216	216	val_216	1
val_216	216	val_216	1
val_221	221	val_221	1
val_221	221	val_221	1
val_226	226	val_226	1
val_229	229	val_229	1
val_229	229	val_229	1
val_233	233	val_233	1
val_233	233	val_233	1
val_237	237	val_237	1
val_237	237	val_237	1
val_238	238	val_238	1
val_238	238	val_238	1
val_239	239	val_239	1
val_239	239	val_239	1
val_244	244	val_244	1
val_248	248	val_248	1
val_249	249	val_249	1
val_252	252	val_252	1
val_255	255	val_255	1
val_255	255	val_255	1
val_256	256	val_256	1
val_256	256	val_256	1
val_260	260	val_260	1
val_266	266	val_266	1
val_272	272	val_272	1
val_272	272	val_272	1
val_284	284	val_284	1
val_286	286	val_286	1
val_287	287	val_287	1
val_289	289	val_289	1
val_291	291	val_291	1
val_292	292	val_292	1
val_307	307	val_307	1
val_307	307	val_307	1
val_308	308	val_308	1
val_310	310	val_310	1
val_311	311	val_311	1
val_311	311	val_311	1
val_311	311	val_311	1
val_315	315	val_315	1
val_316	316	val_316	1
val_316	316	val_316	1
val_316	316	val_316	1
val_317	317	val_317	1
val_317	317	val_317	1
val_325	325	val_325	1
val_325	325	val_325	1
val_327	327	val_327	1
val_327	327	val_327	1
val_327	327	val_327	1
val_332	332	val_332	1
val_336	336	val_336	1
val_338	338	val_338	1
val_339	339	val_339	1
val_341	341	val_341	1
val_342	342	val_342	1
val_342	342	val_342	1
val_344	344	val_344	1
val_344	344	val_344	1
val_348	348	val_348	1
val_348	348	val_348	1
val_348	348	val_348	1
val_348	348	val_348	1
val_348	348	val_348	1
val_351	351	val_351	1
val_353	353	val_353	1
val_353	353	val_353	1
val_360	360	val_360	1
val_362	362	val_362	1
val_364	364	val_364	1
val_365	365	val_365	1
val_368	368	val_368	1
val_369	369	val_369	1
val_369	369	val_369	1
val_369	369	val_369	1
val_377	377	val_377	1
val_378	378	val_378	1
val_384	384	val_384	1
val_384	384	val_384	1
val_384	384	val_384	1
val_386	386	val_386	1
val_392	392	val_392	1
val_393	393	val_393	1
val_394	394	val_394	1
val_396	396	val_396	1
val_396	396	val_396	1
val_396	396	val_396	1
val_397	397	val_397	1
val_397	397	val_397	1
val_399	399	val_399	1
val_399	399	val_399	1
val_402	402	val_402	1
val_404	404	val_404	1
val_404	404	val_404	1
val_407	407	val_407	1
val_409	409	val_409	1
val_409	409	val_409	1
val_409	409	val_409	1
val_411	411	val_411	1
val_414	414	val_414	1
val_414	414	val_414	1
val_417	417	val_417	1
val_417	417	val_417	1
val_417	417	val_417	1
val_419	419	val_419	1
val_421	421	val_421	1
val_427	427	val_427	1
val_430	430	val_430	1
val_430	430	val_430	1
val_430	430	val_430	1
val_432	432	val_432	1
val_435	435	val_435	1
val_437	437	val_437	1
val_443	443	val_443	1
val_444	444	val_444	1
val_446	446	val_446	1
val_449	449	val_449	1
val_452	452	val_452	1
val_453	453	val_453	1
val_454	454	val_454	1
val_454	454	val_454	1
val_454	454	val_454	1
val_458	458	val_458	1
val_458	458	val_458	1
val_459	459	val_459	1
val_459	459	val_459	1
val_463	463	val_463	1
val_463	463	val_463	1
val_466	466	val_466	1
val_466	466	val_466	1
val_466	466	val_466	1
val_467	467	val_467	1
val_472	472	val_472	1
val_478	478	val_478	1
val_478	478	val_478	1
val_479	479	val_479	1
val_480	480	val_480	1
val_480	480	val_480	1
val_480	480	val_480	1
val_482	482	val_482	1
val_483	483	val_483	1
val_484	484	val_484	1
val_485	485	val_485	1
val_490	490	val_490	1
val_491	491	val_491	1
val_495	495	val_495	1
val_497	497	val_497	1
val_498	498	val_498	1
val_498	498	val_498	1
val_498	498	val_498	1
val_0	0	val_0	1
val_0	0	val_0	1
val_0	0	val_0	1
val_4	4	val_4	1
val_5	5	val_5	1
val_5	5	val_5	1
val_5	5	val_5	1
val_8	8	val_8	1
val_9	9	val_9	1
val_11	11	val_11	1
val_12	12	val_12	1
val_12	12	val_12	1
val_15	15	val_15	1
val_15	15	val_15	1
val_18	18	val_18	1
val_18	18	val_18	1
val_24	24	val_24	1
val_24	24	val_24	1
val_26	26	val_26	1
val_26	26	val_26	1
val_28	28	val_28	1
val_33	33	val_33	1
val_34	34	val_34	1
val_35	35	val_35	1
val_35	35	val_35	1
val_35	35	val_35	1
val_37	37	val_37	1
val_37	37	val_37	1
val_42	42	val_42	1
val_42	42	val_42	1
val_44	44	val_44	1
val_47	47	val_47	1
val_53	53	val_53	1
val_66	66	val_66	1
val_72	72	val_72	1
val_72	72	val_72	1
val_74	74	val_74	1
val_76	76	val_76	1
val_76	76	val_76	1
val_78	78	val_78	1
val_82	82	val_82	1
val_87	87	val_87	1
val_92	92	val_92	1
val_95	95	val_95	1
val_95	95	val_95	1
val_100	100	val_100	1
val_100	100	val_100	1
val_103	103	val_103	1
val_103	103	val_103	1
val_104	104	val_104	1
val_104	104	val_104	1
val_111	111	val_111	1
val_114	114	val_114	1
val_118	118	val_118	1
val_118	118	val_118	1
val_120	120	val_120	1
val_120	120	val_120	1
val_125	125	val_125	1
val_125	125	val_125	1
val_128	128	val_128	1
val_128	128	val_128	1
val_128	128	val_128	1
val_129	129	val_129	1
val_129	129	val_129	1
val_131	131	val_131	1
val_136	136	val_136	1
val_138	138	val_138	1
val_138	138	val_138	1
val_138	138	val_138	1
val_138	138	val_138	1
val_143	143	val_143	1
val_145	145	val_145	1
val_150	150	val_150	1
val_152	152	val_152	1
val_152	152	val_152	1
val_155	155	val_155	1
val_160	160	val_160	1
val_166	166	val_166	1
val_167	167	val_167	1
val_167	167	val_167	1
val_167	167	val_167	1
val_168	168	val_168	1
val_170	170	val_170	1
val_172	172	val_172	1
val_172	172	val_172	1
val_174	174	val_174	1
val_174	174	val_174	1
val_175	175	val_175	1
val_175	175	val_175	1
val_176	176	val_176	1
val_176	176	val_176	1
val_179	179	val_179	1
val_179	179	val_179	1
val_180	180	val_180	1
val_183	183	val_183	1
val_186	186	val_186	1
val_189	189	val_189	1
val_192	192	val_192	1
val_193	193	val_193	1
val_193	193	val_193	1
val_193	193	val_193	1
val_194	194	val_194	1
val_196	196	val_196	1
val_200	200	val_200	1
val_200	200	val_200	1
val_203	203	val_203	1
val_203	203	val_203	1
val_205	205	val_205	1
val_205	205	val_205	1
val_207	207	val_207	1
val_207	207	val_207	1
val_209	209	val_209	1
val_209	209	val_209	1
val_213	213	val_213	1
val_213	213	val_213	1
val_217	217	val_217	1
val_217	217	val_217	1
val_218	218	val_218	1
val_219	219	val_219	1
val_219	219	val_219	1
val_222	222	val_222	1
val_223	223	val_223	1
val_223	223	val_223	1
val_224	224	val_224	1
val_224	224	val_224	1
val_228	228	val_228	1
val_230	230	val_230	1
val_230	230	val_230	1
val_230	230	val_230	1
val_230	230	val_230	1
val_230	230	val_230	1
val_235	235	val_235	1
val_241	241	val_241	1
val_242	242	val_242	1
val_242	242	val_242	1
val_247	247	val_247	1
val_257	257	val_257	1
val_258	258	val_258	1
val_262	262	val_262	1
val_263	263	val_263	1
val_265	265	val_265	1
val_265	265	val_265	1
val_273	273	val_273	1
val_273	273	val_273	1
val_273	273	val_273	1
val_274	274	val_274	1
val_275	275	val_275	1
val_277	277	val_277	1
val_277	277	val_277	1
val_277	277	val_277	1
val_277	277	val_277	1
val_278	278	val_278	1
val_278	278	val_278	1
val_280	280	val_280	1
val_280	280	val_280	1
val_281	281	val_281	1
val_281	281	val_281	1
val_282	282	val_282	1
val_282	282	val_282	1
val_283	283	val_283	1
val_285	285	val_285	1
val_288	288	val_288	1
val_288	288	val_288	1
val_296	296	val_296	1
val_298	298	val_298	1
val_298	298	val_298	1
val_298	298	val_298	1
val_302	302	val_302	1
val_305	305	val_305	1
val_306	306	val_306	1
val_309	309	val_309	1
val_309	309	val_309	1
val_318	318	val_318	1
val_318	318	val_318	1
val_318	318	val_318	1
val_321	321	val_321	1
val_321	321	val_321	1
val_322	322	val_322	1
val_322	322	val_322	1
val_323	323	val_323	1
val_331	331	val_331	1
val_331	331	val_331	1
val_333	333	val_333	1
val_333	333	val_333	1
val_335	335	val_335	1
val_345	345	val_345	1
val_356	356	val_356	1
val_366	366	val_366	1
val_367	367	val_367	1
val_367	367	val_367	1
val_373	373	val_373	1
val_374	374	val_374	1
val_375	375	val_375	1
val_379	379	val_379	1
val_382	382	val_382	1
val_382	382	val_382	1
val_389	389	val_389	1
val_395	395	val_395	1
val_395	395	val_395	1
val_400	400	val_400	1
val_401	401	val_401	1
val_401	401	val_401	1
val_401	401	val_401	1
val_401	401	val_401	1
val_401	401	val_401	1
val_403	403	val_403	1
val_403	403	val_403	1
val_403	403	val_403	1
val_406	406	val_406	1
val_406	406	val_406	1
val_406	406	val_406	1
val_406	406	val_406	1
val_413	413	val_413	1
val_413	413	val_413	1
val_418	418	val_418	1
val_424	424	val_424	1
val_424	424	val_424	1
val_429	429	val_429	1
val_429	429	val_429	1
val_431	431	val_431	1
val_431	431	val_431	1
val_431	431	val_431	1
val_436	436	val_436	1
val_438	438	val_438	1
val_438	438	val_438	1
val_438	438	val_438	1
val_439	439	val_439	1
val_439	439	val_439	1
val_448	448	val_448	1
val_455	455	val_455	1
val_457	457	val_457	1
val_460	460	val_460	1
val_462	462	val_462	1
val_462	462	val_462	1
val_468	468	val_468	1
val_468	468	val_468	1
val_468	468	val_468	1
val_468	468	val_468	1
val_469	469	val_469	1
val_469	469	val_469	1
val_469	469	val_469	1
val_469	469	val_469	1
val_469	469	val_469	1
val_470	470	val_470	1
val_475	475	val_475	1
val_477	477	val_477	1
val_481	481	val_481	1
val_487	487	val_487	1
val_489	489	val_489	1
val_489	489	val_489	1
val_489	489	val_489	1
val_489	489	val_489	1
val_492	492	val_492	1
val_492	492	val_492	1
val_493	493	val_493	1
val_494	494	val_494	1
val_496	496	val_496	1
PREHOOK: query: INSERT OVERWRITE TABLE test_table3 PARTITION (ds = '1')
SELECT a.value, a.key, a.value FROM test_table1 a WHERE a.ds = '1'
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
PREHOOK: Input: default@test_table1@ds=1
PREHOOK: Output: default@test_table3@ds=1
POSTHOOK: query: INSERT OVERWRITE TABLE test_table3 PARTITION (ds = '1')
SELECT a.value, a.key, a.value FROM test_table1 a WHERE a.ds = '1'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
POSTHOOK: Input: default@test_table1@ds=1
POSTHOOK: Output: default@test_table3@ds=1
POSTHOOK: Lineage: test_table3 PARTITION(ds=1).key SIMPLE [(test_table1)a.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: test_table3 PARTITION(ds=1).value1 SIMPLE [(test_table1)a.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: test_table3 PARTITION(ds=1).value2 SIMPLE [(test_table1)a.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: select * from test_table3
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table3
PREHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
POSTHOOK: query: select * from test_table3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table3
POSTHOOK: Input: default@test_table3@ds=1
#### A masked pattern was here ####
val_2	2	val_2	1
val_10	10	val_10	1
val_17	17	val_17	1
val_19	19	val_19	1
val_20	20	val_20	1
val_27	27	val_27	1
val_30	30	val_30	1
val_41	41	val_41	1
val_43	43	val_43	1
val_51	51	val_51	1
val_51	51	val_51	1
val_54	54	val_54	1
val_57	57	val_57	1
val_58	58	val_58	1
val_58	58	val_58	1
val_64	64	val_64	1
val_65	65	val_65	1
val_67	67	val_67	1
val_67	67	val_67	1
val_69	69	val_69	1
val_70	70	val_70	1
val_70	70	val_70	1
val_70	70	val_70	1
val_77	77	val_77	1
val_80	80	val_80	1
val_83	83	val_83	1
val_83	83	val_83	1
val_84	84	val_84	1
val_84	84	val_84	1
val_85	85	val_85	1
val_86	86	val_86	1
val_90	90	val_90	1
val_90	90	val_90	1
val_90	90	val_90	1
val_96	96	val_96	1
val_97	97	val_97	1
val_97	97	val_97	1
val_98	98	val_98	1
val_98	98	val_98	1
val_105	105	val_105	1
val_113	113	val_113	1
val_113	113	val_113	1
val_116	116	val_116	1
val_119	119	val_119	1
val_119	119	val_119	1
val_119	119	val_119	1
val_126	126	val_126	1
val_133	133	val_133	1
val_134	134	val_134	1
val_134	134	val_134	1
val_137	137	val_137	1
val_137	137	val_137	1
val_146	146	val_146	1
val_146	146	val_146	1
val_149	149	val_149	1
val_149	149	val_149	1
val_153	153	val_153	1
val_156	156	val_156	1
val_157	157	val_157	1
val_158	158	val_158	1
val_162	162	val_162	1
val_163	163	val_163	1
val_164	164	val_164	1
val_164	164	val_164	1
val_165	165	val_165	1
val_165	165	val_165	1
val_169	169	val_169	1
val_169	169	val_169	1
val_169	169	val_169	1
val_169	169	val_169	1
val_177	177	val_177	1
val_178	178	val_178	1
val_181	181	val_181	1
val_187	187	val_187	1
val_187	187	val_187	1
val_187	187	val_187	1
val_190	190	val_190	1
val_191	191	val_191	1
val_191	191	val_191	1
val_195	195	val_195	1
val_195	195	val_195	1
val_197	197	val_197	1
val_197	197	val_197	1
val_199	199	val_199	1
val_199	199	val_199	1
val_199	199	val_199	1
val_201	201	val_201	1
val_202	202	val_202	1
val_208	208	val_208	1
val_208	208	val_208	1
val_208	208	val_208	1
val_214	214	val_214	1
val_216	216	val_216	1
val_216	216	val_216	1
val_221	221	val_221	1
val_221	221	val_221	1
val_226	226	val_226	1
val_229	229	val_229	1
val_229	229	val_229	1
val_233	233	val_233	1
val_233	233	val_233	1
val_237	237	val_237	1
val_237	237	val_237	1
val_238	238	val_238	1
val_238	238	val_238	1
val_239	239	val_239	1
val_239	239	val_239	1
val_244	244	val_244	1
val_248	248	val_248	1
val_249	249	val_249	1
val_252	252	val_252	1
val_255	255	val_255	1
val_255	255	val_255	1
val_256	256	val_256	1
val_256	256	val_256	1
val_260	260	val_260	1
val_266	266	val_266	1
val_272	272	val_272	1
val_272	272	val_272	1
val_284	284	val_284	1
val_286	286	val_286	1
val_287	287	val_287	1
val_289	289	val_289	1
val_291	291	val_291	1
val_292	292	val_292	1
val_307	307	val_307	1
val_307	307	val_307	1
val_308	308	val_308	1
val_310	310	val_310	1
val_311	311	val_311	1
val_311	311	val_311	1
val_311	311	val_311	1
val_315	315	val_315	1
val_316	316	val_316	1
val_316	316	val_316	1
val_316	316	val_316	1
val_317	317	val_317	1
val_317	317	val_317	1
val_325	325	val_325	1
val_325	325	val_325	1
val_327	327	val_327	1
val_327	327	val_327	1
val_327	327	val_327	1
val_332	332	val_332	1
val_336	336	val_336	1
val_338	338	val_338	1
val_339	339	val_339	1
val_341	341	val_341	1
val_342	342	val_342	1
val_342	342	val_342	1
val_344	344	val_344	1
val_344	344	val_344	1
val_348	348	val_348	1
val_348	348	val_348	1
val_348	348	val_348	1
val_348	348	val_348	1
val_348	348	val_348	1
val_351	351	val_351	1
val_353	353	val_353	1
val_353	353	val_353	1
val_360	360	val_360	1
val_362	362	val_362	1
val_364	364	val_364	1
val_365	365	val_365	1
val_368	368	val_368	1
val_369	369	val_369	1
val_369	369	val_369	1
val_369	369	val_369	1
val_377	377	val_377	1
val_378	378	val_378	1
val_384	384	val_384	1
val_384	384	val_384	1
val_384	384	val_384	1
val_386	386	val_386	1
val_392	392	val_392	1
val_393	393	val_393	1
val_394	394	val_394	1
val_396	396	val_396	1
val_396	396	val_396	1
val_396	396	val_396	1
val_397	397	val_397	1
val_397	397	val_397	1
val_399	399	val_399	1
val_399	399	val_399	1
val_402	402	val_402	1
val_404	404	val_404	1
val_404	404	val_404	1
val_407	407	val_407	1
val_409	409	val_409	1
val_409	409	val_409	1
val_409	409	val_409	1
val_411	411	val_411	1
val_414	414	val_414	1
val_414	414	val_414	1
val_417	417	val_417	1
val_417	417	val_417	1
val_417	417	val_417	1
val_419	419	val_419	1
val_421	421	val_421	1
val_427	427	val_427	1
val_430	430	val_430	1
val_430	430	val_430	1
val_430	430	val_430	1
val_432	432	val_432	1
val_435	435	val_435	1
val_437	437	val_437	1
val_443	443	val_443	1
val_444	444	val_444	1
val_446	446	val_446	1
val_449	449	val_449	1
val_452	452	val_452	1
val_453	453	val_453	1
val_454	454	val_454	1
val_454	454	val_454	1
val_454	454	val_454	1
val_458	458	val_458	1
val_458	458	val_458	1
val_459	459	val_459	1
val_459	459	val_459	1
val_463	463	val_463	1
val_463	463	val_463	1
val_466	466	val_466	1
val_466	466	val_466	1
val_466	466	val_466	1
val_467	467	val_467	1
val_472	472	val_472	1
val_478	478	val_478	1
val_478	478	val_478	1
val_479	479	val_479	1
val_480	480	val_480	1
val_480	480	val_480	1
val_480	480	val_480	1
val_482	482	val_482	1
val_483	483	val_483	1
val_484	484	val_484	1
val_485	485	val_485	1
val_490	490	val_490	1
val_491	491	val_491	1
val_495	495	val_495	1
val_497	497	val_497	1
val_498	498	val_498	1
val_498	498	val_498	1
val_498	498	val_498	1
val_0	0	val_0	1
val_0	0	val_0	1
val_0	0	val_0	1
val_4	4	val_4	1
val_5	5	val_5	1
val_5	5	val_5	1
val_5	5	val_5	1
val_8	8	val_8	1
val_9	9	val_9	1
val_11	11	val_11	1
val_12	12	val_12	1
val_12	12	val_12	1
val_15	15	val_15	1
val_15	15	val_15	1
val_18	18	val_18	1
val_18	18	val_18	1
val_24	24	val_24	1
val_24	24	val_24	1
val_26	26	val_26	1
val_26	26	val_26	1
val_28	28	val_28	1
val_33	33	val_33	1
val_34	34	val_34	1
val_35	35	val_35	1
val_35	35	val_35	1
val_35	35	val_35	1
val_37	37	val_37	1
val_37	37	val_37	1
val_42	42	val_42	1
val_42	42	val_42	1
val_44	44	val_44	1
val_47	47	val_47	1
val_53	53	val_53	1
val_66	66	val_66	1
val_72	72	val_72	1
val_72	72	val_72	1
val_74	74	val_74	1
val_76	76	val_76	1
val_76	76	val_76	1
val_78	78	val_78	1
val_82	82	val_82	1
val_87	87	val_87	1
val_92	92	val_92	1
val_95	95	val_95	1
val_95	95	val_95	1
val_100	100	val_100	1
val_100	100	val_100	1
val_103	103	val_103	1
val_103	103	val_103	1
val_104	104	val_104	1
val_104	104	val_104	1
val_111	111	val_111	1
val_114	114	val_114	1
val_118	118	val_118	1
val_118	118	val_118	1
val_120	120	val_120	1
val_120	120	val_120	1
val_125	125	val_125	1
val_125	125	val_125	1
val_128	128	val_128	1
val_128	128	val_128	1
val_128	128	val_128	1
val_129	129	val_129	1
val_129	129	val_129	1
val_131	131	val_131	1
val_136	136	val_136	1
val_138	138	val_138	1
val_138	138	val_138	1
val_138	138	val_138	1
val_138	138	val_138	1
val_143	143	val_143	1
val_145	145	val_145	1
val_150	150	val_150	1
val_152	152	val_152	1
val_152	152	val_152	1
val_155	155	val_155	1
val_160	160	val_160	1
val_166	166	val_166	1
val_167	167	val_167	1
val_167	167	val_167	1
val_167	167	val_167	1
val_168	168	val_168	1
val_170	170	val_170	1
val_172	172	val_172	1
val_172	172	val_172	1
val_174	174	val_174	1
val_174	174	val_174	1
val_175	175	val_175	1
val_175	175	val_175	1
val_176	176	val_176	1
val_176	176	val_176	1
val_179	179	val_179	1
val_179	179	val_179	1
val_180	180	val_180	1
val_183	183	val_183	1
val_186	186	val_186	1
val_189	189	val_189	1
val_192	192	val_192	1
val_193	193	val_193	1
val_193	193	val_193	1
val_193	193	val_193	1
val_194	194	val_194	1
val_196	196	val_196	1
val_200	200	val_200	1
val_200	200	val_200	1
val_203	203	val_203	1
val_203	203	val_203	1
val_205	205	val_205	1
val_205	205	val_205	1
val_207	207	val_207	1
val_207	207	val_207	1
val_209	209	val_209	1
val_209	209	val_209	1
val_213	213	val_213	1
val_213	213	val_213	1
val_217	217	val_217	1
val_217	217	val_217	1
val_218	218	val_218	1
val_219	219	val_219	1
val_219	219	val_219	1
val_222	222	val_222	1
val_223	223	val_223	1
val_223	223	val_223	1
val_224	224	val_224	1
val_224	224	val_224	1
val_228	228	val_228	1
val_230	230	val_230	1
val_230	230	val_230	1
val_230	230	val_230	1
val_230	230	val_230	1
val_230	230	val_230	1
val_235	235	val_235	1
val_241	241	val_241	1
val_242	242	val_242	1
val_242	242	val_242	1
val_247	247	val_247	1
val_257	257	val_257	1
val_258	258	val_258	1
val_262	262	val_262	1
val_263	263	val_263	1
val_265	265	val_265	1
val_265	265	val_265	1
val_273	273	val_273	1
val_273	273	val_273	1
val_273	273	val_273	1
val_274	274	val_274	1
val_275	275	val_275	1
val_277	277	val_277	1
val_277	277	val_277	1
val_277	277	val_277	1
val_277	277	val_277	1
val_278	278	val_278	1
val_278	278	val_278	1
val_280	280	val_280	1
val_280	280	val_280	1
val_281	281	val_281	1
val_281	281	val_281	1
val_282	282	val_282	1
val_282	282	val_282	1
val_283	283	val_283	1
val_285	285	val_285	1
val_288	288	val_288	1
val_288	288	val_288	1
val_296	296	val_296	1
val_298	298	val_298	1
val_298	298	val_298	1
val_298	298	val_298	1
val_302	302	val_302	1
val_305	305	val_305	1
val_306	306	val_306	1
val_309	309	val_309	1
val_309	309	val_309	1
val_318	318	val_318	1
val_318	318	val_318	1
val_318	318	val_318	1
val_321	321	val_321	1
val_321	321	val_321	1
val_322	322	val_322	1
val_322	322	val_322	1
val_323	323	val_323	1
val_331	331	val_331	1
val_331	331	val_331	1
val_333	333	val_333	1
val_333	333	val_333	1
val_335	335	val_335	1
val_345	345	val_345	1
val_356	356	val_356	1
val_366	366	val_366	1
val_367	367	val_367	1
val_367	367	val_367	1
val_373	373	val_373	1
val_374	374	val_374	1
val_375	375	val_375	1
val_379	379	val_379	1
val_382	382	val_382	1
val_382	382	val_382	1
val_389	389	val_389	1
val_395	395	val_395	1
val_395	395	val_395	1
val_400	400	val_400	1
val_401	401	val_401	1
val_401	401	val_401	1
val_401	401	val_401	1
val_401	401	val_401	1
val_401	401	val_401	1
val_403	403	val_403	1
val_403	403	val_403	1
val_403	403	val_403	1
val_406	406	val_406	1
val_406	406	val_406	1
val_406	406	val_406	1
val_406	406	val_406	1
val_413	413	val_413	1
val_413	413	val_413	1
val_418	418	val_418	1
val_424	424	val_424	1
val_424	424	val_424	1
val_429	429	val_429	1
val_429	429	val_429	1
val_431	431	val_431	1
val_431	431	val_431	1
val_431	431	val_431	1
val_436	436	val_436	1
val_438	438	val_438	1
val_438	438	val_438	1
val_438	438	val_438	1
val_439	439	val_439	1
val_439	439	val_439	1
val_448	448	val_448	1
val_455	455	val_455	1
val_457	457	val_457	1
val_460	460	val_460	1
val_462	462	val_462	1
val_462	462	val_462	1
val_468	468	val_468	1
val_468	468	val_468	1
val_468	468	val_468	1
val_468	468	val_468	1
val_469	469	val_469	1
val_469	469	val_469	1
val_469	469	val_469	1
val_469	469	val_469	1
val_469	469	val_469	1
val_470	470	val_470	1
val_475	475	val_475	1
val_477	477	val_477	1
val_481	481	val_481	1
val_487	487	val_487	1
val_489	489	val_489	1
val_489	489	val_489	1
val_489	489	val_489	1
val_489	489	val_489	1
val_492	492	val_492	1
val_492	492	val_492	1
val_493	493	val_493	1
val_494	494	val_494	1
val_496	496	val_496	1
PREHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '2')
SELECT a.key+a.key, a.value, a.value FROM test_table1 a WHERE a.ds = '1'
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE test_table2 PARTITION (ds = '2')
SELECT a.key+a.key, a.value, a.value FROM test_table1 a WHERE a.ds = '1'
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1
  Stage-2 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (PARTITION-LEVEL SORT, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: (key + key) (type: int), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: UDFToString(_col0) (type: string)
                      sort order: +
                      Map-reduce partition columns: UDFToString(_col0) (type: string)
                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: int), _col1 (type: string)
            Execution mode: vectorized
        Reducer 2 
            Execution mode: vectorized
            Reduce Operator Tree:
              Select Operator
                expressions: UDFToString(VALUE._col0) (type: string), VALUE._col1 (type: string), VALUE._col1 (type: string)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.test_table2

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds 2
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.test_table2

  Stage: Stage-2
    Stats Work
      Basic Stats Work:

