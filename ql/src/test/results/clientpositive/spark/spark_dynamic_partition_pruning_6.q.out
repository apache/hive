PREHOOK: query: create table part_table_1 (col int) partitioned by (part_col int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@part_table_1
POSTHOOK: query: create table part_table_1 (col int) partitioned by (part_col int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@part_table_1
PREHOOK: query: create table part_table_2 (col int) partitioned by (part_col int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@part_table_2
POSTHOOK: query: create table part_table_2 (col int) partitioned by (part_col int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@part_table_2
PREHOOK: query: create table part_table_3 (col int) partitioned by (part_col1 int, part_col2 int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@part_table_3
POSTHOOK: query: create table part_table_3 (col int) partitioned by (part_col1 int, part_col2 int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@part_table_3
PREHOOK: query: create table regular_table (col int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@regular_table
POSTHOOK: query: create table regular_table (col int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@regular_table
PREHOOK: query: insert into table regular_table values (1)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@regular_table
POSTHOOK: query: insert into table regular_table values (1)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@regular_table
POSTHOOK: Lineage: regular_table.col SCRIPT []
PREHOOK: query: alter table part_table_1 add partition (part_col=1)
PREHOOK: type: ALTERTABLE_ADDPARTS
PREHOOK: Output: default@part_table_1
POSTHOOK: query: alter table part_table_1 add partition (part_col=1)
POSTHOOK: type: ALTERTABLE_ADDPARTS
POSTHOOK: Output: default@part_table_1
POSTHOOK: Output: default@part_table_1@part_col=1
PREHOOK: query: insert into table part_table_1 partition (part_col=1) values (1), (2), (3), (4)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@part_table_1@part_col=1
POSTHOOK: query: insert into table part_table_1 partition (part_col=1) values (1), (2), (3), (4)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@part_table_1@part_col=1
POSTHOOK: Lineage: part_table_1 PARTITION(part_col=1).col SCRIPT []
PREHOOK: query: alter table part_table_1 add partition (part_col=2)
PREHOOK: type: ALTERTABLE_ADDPARTS
PREHOOK: Output: default@part_table_1
POSTHOOK: query: alter table part_table_1 add partition (part_col=2)
POSTHOOK: type: ALTERTABLE_ADDPARTS
POSTHOOK: Output: default@part_table_1
POSTHOOK: Output: default@part_table_1@part_col=2
PREHOOK: query: insert into table part_table_1 partition (part_col=2) values (1), (2), (3), (4)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@part_table_1@part_col=2
POSTHOOK: query: insert into table part_table_1 partition (part_col=2) values (1), (2), (3), (4)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@part_table_1@part_col=2
POSTHOOK: Lineage: part_table_1 PARTITION(part_col=2).col SCRIPT []
PREHOOK: query: alter table part_table_1 add partition (part_col=3)
PREHOOK: type: ALTERTABLE_ADDPARTS
PREHOOK: Output: default@part_table_1
POSTHOOK: query: alter table part_table_1 add partition (part_col=3)
POSTHOOK: type: ALTERTABLE_ADDPARTS
POSTHOOK: Output: default@part_table_1
POSTHOOK: Output: default@part_table_1@part_col=3
PREHOOK: query: insert into table part_table_1 partition (part_col=3) values (1), (2), (3), (4)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@part_table_1@part_col=3
POSTHOOK: query: insert into table part_table_1 partition (part_col=3) values (1), (2), (3), (4)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@part_table_1@part_col=3
POSTHOOK: Lineage: part_table_1 PARTITION(part_col=3).col SCRIPT []
PREHOOK: query: alter table part_table_2 add partition (part_col=1)
PREHOOK: type: ALTERTABLE_ADDPARTS
PREHOOK: Output: default@part_table_2
POSTHOOK: query: alter table part_table_2 add partition (part_col=1)
POSTHOOK: type: ALTERTABLE_ADDPARTS
POSTHOOK: Output: default@part_table_2
POSTHOOK: Output: default@part_table_2@part_col=1
PREHOOK: query: insert into table part_table_2 partition (part_col=1) values (1), (2), (3), (4)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@part_table_2@part_col=1
POSTHOOK: query: insert into table part_table_2 partition (part_col=1) values (1), (2), (3), (4)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@part_table_2@part_col=1
POSTHOOK: Lineage: part_table_2 PARTITION(part_col=1).col SCRIPT []
PREHOOK: query: alter table part_table_2 add partition (part_col=2)
PREHOOK: type: ALTERTABLE_ADDPARTS
PREHOOK: Output: default@part_table_2
POSTHOOK: query: alter table part_table_2 add partition (part_col=2)
POSTHOOK: type: ALTERTABLE_ADDPARTS
POSTHOOK: Output: default@part_table_2
POSTHOOK: Output: default@part_table_2@part_col=2
PREHOOK: query: insert into table part_table_2 partition (part_col=2) values (1), (2), (3), (4)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@part_table_2@part_col=2
POSTHOOK: query: insert into table part_table_2 partition (part_col=2) values (1), (2), (3), (4)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@part_table_2@part_col=2
POSTHOOK: Lineage: part_table_2 PARTITION(part_col=2).col SCRIPT []
PREHOOK: query: alter table part_table_3 add partition (part_col1=1, part_col2=1)
PREHOOK: type: ALTERTABLE_ADDPARTS
PREHOOK: Output: default@part_table_3
POSTHOOK: query: alter table part_table_3 add partition (part_col1=1, part_col2=1)
POSTHOOK: type: ALTERTABLE_ADDPARTS
POSTHOOK: Output: default@part_table_3
POSTHOOK: Output: default@part_table_3@part_col1=1/part_col2=1
PREHOOK: query: insert into table part_table_3 partition (part_col1=1, part_col2=1) values (1), (2), (3), (4)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@part_table_3@part_col1=1/part_col2=1
POSTHOOK: query: insert into table part_table_3 partition (part_col1=1, part_col2=1) values (1), (2), (3), (4)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@part_table_3@part_col1=1/part_col2=1
POSTHOOK: Lineage: part_table_3 PARTITION(part_col1=1,part_col2=1).col SCRIPT []
PREHOOK: query: explain
select * from regular_table, part_table_1, part_table_2
where regular_table.col = part_table_1.part_col and regular_table.col = part_table_2.part_col
PREHOOK: type: QUERY
PREHOOK: Input: default@part_table_1
PREHOOK: Input: default@part_table_1@part_col=1
PREHOOK: Input: default@part_table_1@part_col=2
PREHOOK: Input: default@part_table_1@part_col=3
PREHOOK: Input: default@part_table_2
PREHOOK: Input: default@part_table_2@part_col=1
PREHOOK: Input: default@part_table_2@part_col=2
PREHOOK: Input: default@regular_table
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select * from regular_table, part_table_1, part_table_2
where regular_table.col = part_table_1.part_col and regular_table.col = part_table_2.part_col
POSTHOOK: type: QUERY
POSTHOOK: Input: default@part_table_1
POSTHOOK: Input: default@part_table_1@part_col=1
POSTHOOK: Input: default@part_table_1@part_col=2
POSTHOOK: Input: default@part_table_1@part_col=3
POSTHOOK: Input: default@part_table_2
POSTHOOK: Input: default@part_table_2@part_col=1
POSTHOOK: Input: default@part_table_2@part_col=2
POSTHOOK: Input: default@regular_table
POSTHOOK: Output: hdfs://### HDFS PATH ###
STAGE DEPENDENCIES:
  Stage-2 is a root stage
  Stage-1 depends on stages: Stage-2
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-2
    Spark
#### A masked pattern was here ####
      Vertices:
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: part_table_2
                  Statistics: Num rows: 8 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: col (type: int), part_col (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 8 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: _col1 (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 8 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        keys: _col0 (type: int)
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 8 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                        Spark Partition Pruning Sink Operator
                          Target Columns: [Map 4 -> [part_col:int (part_col)]]
                          Statistics: Num rows: 8 Data size: 8 Basic stats: COMPLETE Column stats: NONE
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: regular_table
                  Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: col is not null (type: boolean)
                    Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: col (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                      Select Operator
                        expressions: _col0 (type: int)
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                        Group By Operator
                          keys: _col0 (type: int)
                          mode: hash
                          outputColumnNames: _col0
                          Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                          Spark Partition Pruning Sink Operator
                            Target Columns: [Map 1 -> [part_col:int (part_col)], Map 4 -> [part_col:int (part_col)]]
                            Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE

  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (PARTITION-LEVEL SORT, 4), Map 3 (PARTITION-LEVEL SORT, 4), Map 4 (PARTITION-LEVEL SORT, 4)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: part_table_2
                  Statistics: Num rows: 8 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: col (type: int), part_col (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 8 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 8 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: int)
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: regular_table
                  Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: col is not null (type: boolean)
                    Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: col (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: part_table_1
                  Statistics: Num rows: 12 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: col (type: int), part_col (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 12 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 12 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: int)
        Reducer 2 
            Reduce Operator Tree:
              Join Operator
                condition map:
                     Inner Join 0 to 1
                     Inner Join 1 to 2
                keys:
                  0 _col1 (type: int)
                  1 _col0 (type: int)
                  2 _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 26 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col2 (type: int), _col3 (type: int), _col4 (type: int), _col0 (type: int), _col1 (type: int)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4
                  Statistics: Num rows: 26 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 26 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from regular_table, part_table_1, part_table_2
where regular_table.col = part_table_1.part_col and regular_table.col = part_table_2.part_col
PREHOOK: type: QUERY
PREHOOK: Input: default@part_table_1
PREHOOK: Input: default@part_table_1@part_col=1
PREHOOK: Input: default@part_table_1@part_col=2
PREHOOK: Input: default@part_table_1@part_col=3
PREHOOK: Input: default@part_table_2
PREHOOK: Input: default@part_table_2@part_col=1
PREHOOK: Input: default@part_table_2@part_col=2
PREHOOK: Input: default@regular_table
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from regular_table, part_table_1, part_table_2
where regular_table.col = part_table_1.part_col and regular_table.col = part_table_2.part_col
POSTHOOK: type: QUERY
POSTHOOK: Input: default@part_table_1
POSTHOOK: Input: default@part_table_1@part_col=1
POSTHOOK: Input: default@part_table_1@part_col=2
POSTHOOK: Input: default@part_table_1@part_col=3
POSTHOOK: Input: default@part_table_2
POSTHOOK: Input: default@part_table_2@part_col=1
POSTHOOK: Input: default@part_table_2@part_col=2
POSTHOOK: Input: default@regular_table
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	1	1	1	1
1	1	1	2	1
1	1	1	3	1
1	1	1	4	1
1	2	1	1	1
1	2	1	2	1
1	2	1	3	1
1	2	1	4	1
1	3	1	1	1
1	3	1	2	1
1	3	1	3	1
1	3	1	4	1
1	4	1	1	1
1	4	1	2	1
1	4	1	3	1
1	4	1	4	1
PREHOOK: query: explain
select * from regular_table, part_table_1, part_table_2
where regular_table.col = part_table_1.part_col and regular_table.col = part_table_2.part_col
PREHOOK: type: QUERY
PREHOOK: Input: default@part_table_1
PREHOOK: Input: default@part_table_1@part_col=1
PREHOOK: Input: default@part_table_1@part_col=2
PREHOOK: Input: default@part_table_1@part_col=3
PREHOOK: Input: default@part_table_2
PREHOOK: Input: default@part_table_2@part_col=1
PREHOOK: Input: default@part_table_2@part_col=2
PREHOOK: Input: default@regular_table
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select * from regular_table, part_table_1, part_table_2
where regular_table.col = part_table_1.part_col and regular_table.col = part_table_2.part_col
POSTHOOK: type: QUERY
POSTHOOK: Input: default@part_table_1
POSTHOOK: Input: default@part_table_1@part_col=1
POSTHOOK: Input: default@part_table_1@part_col=2
POSTHOOK: Input: default@part_table_1@part_col=3
POSTHOOK: Input: default@part_table_2
POSTHOOK: Input: default@part_table_2@part_col=1
POSTHOOK: Input: default@part_table_2@part_col=2
POSTHOOK: Input: default@regular_table
POSTHOOK: Output: hdfs://### HDFS PATH ###
STAGE DEPENDENCIES:
  Stage-2 is a root stage
  Stage-1 depends on stages: Stage-2
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-2
    Spark
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: part_table_2
                  Statistics: Num rows: 8 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: col (type: int), part_col (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 8 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Spark HashTable Sink Operator
                      keys:
                        0 _col1 (type: int)
                        1 _col0 (type: int)
                        2 _col1 (type: int)
                    Select Operator
                      expressions: _col1 (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 8 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        keys: _col0 (type: int)
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 8 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                        Spark Partition Pruning Sink Operator
                          Target Columns: [Map 3 -> [part_col:int (part_col)]]
                          Statistics: Num rows: 8 Data size: 8 Basic stats: COMPLETE Column stats: NONE
            Local Work:
              Map Reduce Local Work
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: regular_table
                  Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: col is not null (type: boolean)
                    Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: col (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                      Spark HashTable Sink Operator
                        keys:
                          0 _col1 (type: int)
                          1 _col0 (type: int)
                          2 _col1 (type: int)
                      Select Operator
                        expressions: _col0 (type: int)
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                        Group By Operator
                          keys: _col0 (type: int)
                          mode: hash
                          outputColumnNames: _col0
                          Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                          Spark Partition Pruning Sink Operator
                            Target Columns: [Map 3 -> [part_col:int (part_col)]]
                            Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
            Local Work:
              Map Reduce Local Work

  Stage: Stage-1
    Spark
#### A masked pattern was here ####
      Vertices:
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: part_table_1
                  Statistics: Num rows: 12 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: col (type: int), part_col (type: int)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 12 Data size: 12 Basic stats: COMPLETE Column stats: NONE
                    Map Join Operator
                      condition map:
                           Inner Join 0 to 1
                           Inner Join 1 to 2
                      keys:
                        0 _col1 (type: int)
                        1 _col0 (type: int)
                        2 _col1 (type: int)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      input vertices:
                        0 Map 1
                        1 Map 2
                      Statistics: Num rows: 26 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                      Select Operator
                        expressions: _col2 (type: int), _col3 (type: int), _col4 (type: int), _col0 (type: int), _col1 (type: int)
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4
                        Statistics: Num rows: 26 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                        File Output Operator
                          compressed: false
                          Statistics: Num rows: 26 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                          table:
                              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Local Work:
              Map Reduce Local Work

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from regular_table, part_table_1, part_table_2
where regular_table.col = part_table_1.part_col and regular_table.col = part_table_2.part_col
PREHOOK: type: QUERY
PREHOOK: Input: default@part_table_1
PREHOOK: Input: default@part_table_1@part_col=1
PREHOOK: Input: default@part_table_1@part_col=2
PREHOOK: Input: default@part_table_1@part_col=3
PREHOOK: Input: default@part_table_2
PREHOOK: Input: default@part_table_2@part_col=1
PREHOOK: Input: default@part_table_2@part_col=2
PREHOOK: Input: default@regular_table
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from regular_table, part_table_1, part_table_2
where regular_table.col = part_table_1.part_col and regular_table.col = part_table_2.part_col
POSTHOOK: type: QUERY
POSTHOOK: Input: default@part_table_1
POSTHOOK: Input: default@part_table_1@part_col=1
POSTHOOK: Input: default@part_table_1@part_col=2
POSTHOOK: Input: default@part_table_1@part_col=3
POSTHOOK: Input: default@part_table_2
POSTHOOK: Input: default@part_table_2@part_col=1
POSTHOOK: Input: default@part_table_2@part_col=2
POSTHOOK: Input: default@regular_table
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	1	1	1	1
1	1	1	2	1
1	1	1	3	1
1	1	1	4	1
1	2	1	1	1
1	2	1	2	1
1	2	1	3	1
1	2	1	4	1
1	3	1	1	1
1	3	1	2	1
1	3	1	3	1
1	3	1	4	1
1	4	1	1	1
1	4	1	2	1
1	4	1	3	1
1	4	1	4	1
PREHOOK: query: explain
select * from regular_table, part_table_3
where regular_table.col=part_table_3.part_col1 and regular_table.col=part_table_3.part_col2
PREHOOK: type: QUERY
PREHOOK: Input: default@part_table_3
PREHOOK: Input: default@part_table_3@part_col1=1/part_col2=1
PREHOOK: Input: default@regular_table
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select * from regular_table, part_table_3
where regular_table.col=part_table_3.part_col1 and regular_table.col=part_table_3.part_col2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@part_table_3
POSTHOOK: Input: default@part_table_3@part_col1=1/part_col2=1
POSTHOOK: Input: default@regular_table
POSTHOOK: Output: hdfs://### HDFS PATH ###
STAGE DEPENDENCIES:
  Stage-2 is a root stage
  Stage-1 depends on stages: Stage-2
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-2
    Spark
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: regular_table
                  Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: col is not null (type: boolean)
                    Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: col (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                      Spark HashTable Sink Operator
                        keys:
                          0 _col0 (type: int), _col0 (type: int)
                          1 _col2 (type: int), _col1 (type: int)
                      Select Operator
                        expressions: _col0 (type: int)
                        outputColumnNames: _col0
                        Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                        Group By Operator
                          keys: _col0 (type: int)
                          mode: hash
                          outputColumnNames: _col0
                          Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
                          Spark Partition Pruning Sink Operator
                            Target Columns: [Map 2 -> [part_col2:int (part_col2), part_col1:int (part_col1)]]
                            Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: NONE
            Local Work:
              Map Reduce Local Work

  Stage: Stage-1
    Spark
#### A masked pattern was here ####
      Vertices:
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: part_table_3
                  Statistics: Num rows: 4 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: col (type: int), part_col1 (type: int), part_col2 (type: int)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                    Map Join Operator
                      condition map:
                           Inner Join 0 to 1
                      keys:
                        0 _col0 (type: int), _col0 (type: int)
                        1 _col2 (type: int), _col1 (type: int)
                      outputColumnNames: _col0, _col1, _col2, _col3
                      input vertices:
                        0 Map 1
                      Statistics: Num rows: 4 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 4 Data size: 4 Basic stats: COMPLETE Column stats: NONE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Local Work:
              Map Reduce Local Work

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from regular_table, part_table_3
where regular_table.col=part_table_3.part_col1 and regular_table.col=part_table_3.part_col2
PREHOOK: type: QUERY
PREHOOK: Input: default@part_table_3
PREHOOK: Input: default@part_table_3@part_col1=1/part_col2=1
PREHOOK: Input: default@regular_table
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from regular_table, part_table_3
where regular_table.col=part_table_3.part_col1 and regular_table.col=part_table_3.part_col2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@part_table_3
POSTHOOK: Input: default@part_table_3@part_col1=1/part_col2=1
POSTHOOK: Input: default@regular_table
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	1	1	1
1	2	1	1
1	3	1	1
1	4	1	1
