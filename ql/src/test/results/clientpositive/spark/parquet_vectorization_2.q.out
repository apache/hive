PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT AVG(csmallint),
       (AVG(csmallint) % -563),
       (AVG(csmallint) + 762),
       SUM(cfloat),
       VAR_POP(cbigint),
       (-(VAR_POP(cbigint))),
       (SUM(cfloat) - AVG(csmallint)),
       COUNT(*),
       (-((SUM(cfloat) - AVG(csmallint)))),
       (VAR_POP(cbigint) - 762),
       MIN(ctinyint),
       ((-(VAR_POP(cbigint))) + MIN(ctinyint)),
       AVG(cdouble),
       (((-(VAR_POP(cbigint))) + MIN(ctinyint)) - SUM(cfloat))
FROM   alltypesparquet
WHERE  (((ctimestamp1 < ctimestamp2)
         AND ((cstring2 LIKE 'b%')
              AND (cfloat <= -5638.15)))
        OR ((cdouble < ctinyint)
            AND ((-10669 != ctimestamp2)
                 OR (359 > cint))))
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesparquet
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
SELECT AVG(csmallint),
       (AVG(csmallint) % -563),
       (AVG(csmallint) + 762),
       SUM(cfloat),
       VAR_POP(cbigint),
       (-(VAR_POP(cbigint))),
       (SUM(cfloat) - AVG(csmallint)),
       COUNT(*),
       (-((SUM(cfloat) - AVG(csmallint)))),
       (VAR_POP(cbigint) - 762),
       MIN(ctinyint),
       ((-(VAR_POP(cbigint))) + MIN(ctinyint)),
       AVG(cdouble),
       (((-(VAR_POP(cbigint))) + MIN(ctinyint)) - SUM(cfloat))
FROM   alltypesparquet
WHERE  (((ctimestamp1 < ctimestamp2)
         AND ((cstring2 LIKE 'b%')
              AND (cfloat <= -5638.15)))
        OR ((cdouble < ctinyint)
            AND ((-10669 != ctimestamp2)
                 OR (359 > cint))))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesparquet
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (GROUP, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesparquet
                  filterExpr: (((ctimestamp1 < ctimestamp2) and (cstring2 like 'b%') and (cfloat <= -5638.15)) or ((cdouble < UDFToDouble(ctinyint)) and ((UDFToDouble(ctimestamp2) <> -10669.0D) or (cint < 359)))) (type: boolean)
                  Statistics: Num rows: 12288 Data size: 147456 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterExprOrExpr(children: FilterExprAndExpr(children: FilterTimestampColLessTimestampColumn(col 8:timestamp, col 9:timestamp), FilterStringColLikeStringScalar(col 7:string, pattern b%), FilterDoubleColLessEqualDoubleScalar(col 4:float, val -5638.14990234375)), FilterExprAndExpr(children: FilterDoubleColLessDoubleColumn(col 5:double, col 13:double)(children: CastLongToDouble(col 0:tinyint) -> 13:double), FilterExprOrExpr(children: FilterDoubleColNotEqualDoubleScalar(col 13:double, val -10669.0)(children: CastTimestampToDouble(col 9:timestamp) -> 13:double), FilterLongColLessLongScalar(col 2:int, val 359))))
                    predicate: (((cdouble < UDFToDouble(ctinyint)) and ((UDFToDouble(ctimestamp2) <> -10669.0D) or (cint < 359))) or ((ctimestamp1 < ctimestamp2) and (cstring2 like 'b%') and (cfloat <= -5638.15))) (type: boolean)
                    Statistics: Num rows: 4778 Data size: 57336 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: csmallint (type: smallint), cfloat (type: float), cbigint (type: bigint), ctinyint (type: tinyint), cdouble (type: double), UDFToDouble(cbigint) (type: double), (UDFToDouble(cbigint) * UDFToDouble(cbigint)) (type: double)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [1, 4, 3, 0, 5, 13, 16]
                          selectExpressions: CastLongToDouble(col 3:bigint) -> 13:double, DoubleColMultiplyDoubleColumn(col 14:double, col 15:double)(children: CastLongToDouble(col 3:bigint) -> 14:double, CastLongToDouble(col 3:bigint) -> 15:double) -> 16:double
                      Statistics: Num rows: 4778 Data size: 57336 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        aggregations: sum(_col0), count(_col0), sum(_col1), sum(_col6), sum(_col5), count(_col2), count(), min(_col3), sum(_col4), count(_col4)
                        Group By Vectorization:
                            aggregators: VectorUDAFSumLong(col 1:smallint) -> bigint, VectorUDAFCount(col 1:smallint) -> bigint, VectorUDAFSumDouble(col 4:float) -> double, VectorUDAFSumDouble(col 16:double) -> double, VectorUDAFSumDouble(col 13:double) -> double, VectorUDAFCount(col 3:bigint) -> bigint, VectorUDAFCountStar(*) -> bigint, VectorUDAFMinLong(col 0:tinyint) -> tinyint, VectorUDAFSumDouble(col 5:double) -> double, VectorUDAFCount(col 5:double) -> bigint
                            className: VectorGroupByOperator
                            groupByMode: HASH
                            native: false
                            vectorProcessingMode: HASH
                            projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                        Statistics: Num rows: 1 Data size: 76 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          sort order: 
                          Reduce Sink Vectorization:
                              className: VectorReduceSinkEmptyKeyOperator
                              native: true
                              nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                          Statistics: Num rows: 1 Data size: 76 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col0 (type: bigint), _col1 (type: bigint), _col2 (type: double), _col3 (type: double), _col4 (type: double), _col5 (type: bigint), _col6 (type: bigint), _col7 (type: tinyint), _col8 (type: double), _col9 (type: bigint)
            Execution mode: vectorized
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: []
                featureSupportInUse: []
                inputFileFormats: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1), sum(VALUE._col2), sum(VALUE._col3), sum(VALUE._col4), count(VALUE._col5), count(VALUE._col6), min(VALUE._col7), sum(VALUE._col8), count(VALUE._col9)
                Group By Vectorization:
                    aggregators: VectorUDAFSumLong(col 0:bigint) -> bigint, VectorUDAFCountMerge(col 1:bigint) -> bigint, VectorUDAFSumDouble(col 2:double) -> double, VectorUDAFSumDouble(col 3:double) -> double, VectorUDAFSumDouble(col 4:double) -> double, VectorUDAFCountMerge(col 5:bigint) -> bigint, VectorUDAFCountMerge(col 6:bigint) -> bigint, VectorUDAFMinLong(col 7:tinyint) -> tinyint, VectorUDAFSumDouble(col 8:double) -> double, VectorUDAFCountMerge(col 9:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                Statistics: Num rows: 1 Data size: 76 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: (UDFToDouble(_col0) / _col1) (type: double), ((UDFToDouble(_col0) / _col1) % -563.0D) (type: double), ((UDFToDouble(_col0) / _col1) + 762.0D) (type: double), _col2 (type: double), ((_col3 - ((_col4 * _col4) / _col5)) / _col5) (type: double), (- ((_col3 - ((_col4 * _col4) / _col5)) / _col5)) (type: double), (_col2 - (UDFToDouble(_col0) / _col1)) (type: double), _col6 (type: bigint), (- (_col2 - (UDFToDouble(_col0) / _col1))) (type: double), (((_col3 - ((_col4 * _col4) / _col5)) / _col5) - 762.0D) (type: double), _col7 (type: tinyint), ((- ((_col3 - ((_col4 * _col4) / _col5)) / _col5)) + UDFToDouble(_col7)) (type: double), (_col8 / _col9) (type: double), (((- ((_col3 - ((_col4 * _col4) / _col5)) / _col5)) + UDFToDouble(_col7)) - _col2) (type: double)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [11, 10, 12, 2, 14, 13, 15, 6, 17, 16, 7, 20, 18, 19]
                      selectExpressions: DoubleColDivideLongColumn(col 10:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 10:double) -> 11:double, DoubleColModuloDoubleScalar(col 12:double, val -563.0)(children: DoubleColDivideLongColumn(col 10:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 10:double) -> 12:double) -> 10:double, DoubleColAddDoubleScalar(col 13:double, val 762.0)(children: DoubleColDivideLongColumn(col 12:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 12:double) -> 13:double) -> 12:double, DoubleColDivideLongColumn(col 13:double, col 5:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 14:double)(children: DoubleColDivideLongColumn(col 13:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 13:double) -> 14:double) -> 13:double) -> 14:double, DoubleColUnaryMinus(col 15:double)(children: DoubleColDivideLongColumn(col 13:double, col 5:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 15:double)(children: DoubleColDivideLongColumn(col 13:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 13:double) -> 15:double) -> 13:double) -> 15:double) -> 13:double, DoubleColSubtractDoubleColumn(col 2:double, col 16:double)(children: DoubleColDivideLongColumn(col 15:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 15:double) -> 16:double) -> 15:double, DoubleColUnaryMinus(col 16:double)(children: DoubleColSubtractDoubleColumn(col 2:double, col 17:double)(children: DoubleColDivideLongColumn(col 16:double, col 1:bigint)(children: CastLongToDouble(col 0:bigint) -> 16:double) -> 17:double) -> 16:double) -> 17:double, DoubleColSubtractDoubleScalar(col 18:double, val 762.0)(children: DoubleColDivideLongColumn(col 16:double, col 5:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 18:double)(children: DoubleColDivideLongColumn(col 16:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 16:double) -> 18:double) -> 16:double) -> 18:double) -> 16:double, DoubleColAddDoubleColumn(col 18:double, col 19:double)(children: DoubleColUnaryMinus(col 19:double)(children: DoubleColDivideLongColumn(col 18:double, col 5:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 19:double)(children: DoubleColDivideLongColumn(col 18:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 18:double) -> 19:double) -> 18:double) -> 19:double) -> 18:double, CastLongToDouble(col 7:tinyint) -> 19:double) -> 20:double, DoubleColDivideLongColumn(col 8:double, col 9:bigint) -> 18:double, DoubleColSubtractDoubleColumn(col 22:double, col 2:double)(children: DoubleColAddDoubleColumn(col 19:double, col 21:double)(children: DoubleColUnaryMinus(col 21:double)(children: DoubleColDivideLongColumn(col 19:double, col 5:bigint)(children: DoubleColSubtractDoubleColumn(col 3:double, col 21:double)(children: DoubleColDivideLongColumn(col 19:double, col 5:bigint)(children: DoubleColMultiplyDoubleColumn(col 4:double, col 4:double) -> 19:double) -> 21:double) -> 19:double) -> 21:double) -> 19:double, CastLongToDouble(col 7:tinyint) -> 21:double) -> 22:double) -> 19:double
                  Statistics: Num rows: 1 Data size: 76 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 1 Data size: 76 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT AVG(csmallint),
       (AVG(csmallint) % -563),
       (AVG(csmallint) + 762),
       SUM(cfloat),
       VAR_POP(cbigint),
       (-(VAR_POP(cbigint))),
       (SUM(cfloat) - AVG(csmallint)),
       COUNT(*),
       (-((SUM(cfloat) - AVG(csmallint)))),
       (VAR_POP(cbigint) - 762),
       MIN(ctinyint),
       ((-(VAR_POP(cbigint))) + MIN(ctinyint)),
       AVG(cdouble),
       (((-(VAR_POP(cbigint))) + MIN(ctinyint)) - SUM(cfloat))
FROM   alltypesparquet
WHERE  (((ctimestamp1 < ctimestamp2)
         AND ((cstring2 LIKE 'b%')
              AND (cfloat <= -5638.15)))
        OR ((cdouble < ctinyint)
            AND ((-10669 != ctimestamp2)
                 OR (359 > cint))))
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesparquet
#### A masked pattern was here ####
POSTHOOK: query: SELECT AVG(csmallint),
       (AVG(csmallint) % -563),
       (AVG(csmallint) + 762),
       SUM(cfloat),
       VAR_POP(cbigint),
       (-(VAR_POP(cbigint))),
       (SUM(cfloat) - AVG(csmallint)),
       COUNT(*),
       (-((SUM(cfloat) - AVG(csmallint)))),
       (VAR_POP(cbigint) - 762),
       MIN(ctinyint),
       ((-(VAR_POP(cbigint))) + MIN(ctinyint)),
       AVG(cdouble),
       (((-(VAR_POP(cbigint))) + MIN(ctinyint)) - SUM(cfloat))
FROM   alltypesparquet
WHERE  (((ctimestamp1 < ctimestamp2)
         AND ((cstring2 LIKE 'b%')
              AND (cfloat <= -5638.15)))
        OR ((cdouble < ctinyint)
            AND ((-10669 != ctimestamp2)
                 OR (359 > cint))))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesparquet
#### A masked pattern was here ####
-5646.467075892857	-16.467075892856883	-4884.467075892857	-2839.634998679161	1.49936299222378906E18	-1.49936299222378906E18	2806.832077213696	3584	-2806.832077213696	1.49936299222378829E18	-64	-1.49936299222378906E18	-5650.1297631138395	-1.49936299222378624E18
