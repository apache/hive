PREHOOK: query: CREATE TABLE T1_n82(key STRING, val STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@T1_n82
POSTHOOK: query: CREATE TABLE T1_n82(key STRING, val STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@T1_n82
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/T1.txt' INTO TABLE T1_n82
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@t1_n82
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/T1.txt' INTO TABLE T1_n82
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@t1_n82
PREHOOK: query: EXPLAIN
SELECT key, val, count(1) FROM T1_n82 GROUP BY key, val with cube
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT key, val, count(1) FROM T1_n82 GROUP BY key, val with cube
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (GROUP, 2)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1_n82
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), val (type: string)
                    outputColumnNames: key, val
                    Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), val (type: string), 0L (type: bigint)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                        Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: bigint)
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col3
                Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), _col3 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: EXPLAIN
SELECT key, val, count(1) FROM T1_n82 GROUP BY CUBE(key, val)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT key, val, count(1) FROM T1_n82 GROUP BY CUBE(key, val)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (GROUP, 2)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1_n82
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), val (type: string)
                    outputColumnNames: key, val
                    Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), val (type: string), 0L (type: bigint)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                        Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: bigint)
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col3
                Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), _col3 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT key, val, count(1) FROM T1_n82 GROUP BY key, val with cube
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n82
#### A masked pattern was here ####
POSTHOOK: query: SELECT key, val, count(1) FROM T1_n82 GROUP BY key, val with cube
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n82
#### A masked pattern was here ####
1	11	1
1	NULL	1
2	12	1
2	NULL	1
3	13	1
3	NULL	1
7	17	1
7	NULL	1
8	18	1
8	28	1
8	NULL	2
NULL	11	1
NULL	12	1
NULL	13	1
NULL	17	1
NULL	18	1
NULL	28	1
NULL	NULL	6
PREHOOK: query: EXPLAIN
SELECT key, val, GROUPING__ID, count(1) FROM T1_n82 GROUP BY key, val with cube
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT key, val, GROUPING__ID, count(1) FROM T1_n82 GROUP BY key, val with cube
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (GROUP, 2)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1_n82
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), val (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count()
                      keys: _col0 (type: string), _col1 (type: string), 0L (type: bigint)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                        Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: bigint)
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint), _col3 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT key, val, GROUPING__ID, count(1) FROM T1_n82 GROUP BY key, val with cube
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n82
#### A masked pattern was here ####
POSTHOOK: query: SELECT key, val, GROUPING__ID, count(1) FROM T1_n82 GROUP BY key, val with cube
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n82
#### A masked pattern was here ####
1	11	0	1
1	NULL	1	1
2	12	0	1
2	NULL	1	1
3	13	0	1
3	NULL	1	1
7	17	0	1
7	NULL	1	1
8	18	0	1
8	28	0	1
8	NULL	1	2
NULL	11	2	1
NULL	12	2	1
NULL	13	2	1
NULL	17	2	1
NULL	18	2	1
NULL	28	2	1
NULL	NULL	3	6
PREHOOK: query: EXPLAIN
SELECT key, count(distinct val) FROM T1_n82 GROUP BY key with cube
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT key, count(distinct val) FROM T1_n82 GROUP BY key with cube
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (GROUP PARTITION-LEVEL SORT, 2)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1_n82
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), val (type: string)
                    outputColumnNames: key, val
                    Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(DISTINCT val)
                      keys: key (type: string), 0L (type: bigint), val (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string)
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: bigint)
                        Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(DISTINCT KEY._col2:0._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: bigint)
                mode: mergepartial
                outputColumnNames: _col0, _col2
                Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Select Operator
                  expressions: _col0 (type: string), _col2 (type: bigint)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT key, count(distinct val) FROM T1_n82 GROUP BY key with cube
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n82
#### A masked pattern was here ####
POSTHOOK: query: SELECT key, count(distinct val) FROM T1_n82 GROUP BY key with cube
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n82
#### A masked pattern was here ####
1	1
2	1
3	1
7	1
8	2
NULL	6
PREHOOK: query: EXPLAIN
SELECT key, val, count(1) FROM T1_n82 GROUP BY key, val with cube
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT key, val, count(1) FROM T1_n82 GROUP BY key, val with cube
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (GROUP PARTITION-LEVEL SORT, 2)
        Reducer 3 <- Reducer 2 (GROUP PARTITION-LEVEL SORT, 2)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1_n82
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), val (type: string)
                    outputColumnNames: key, val
                    Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string), val (type: string), 0L (type: bigint)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                        sort order: +++
                        Map-reduce partition columns: rand() (type: double)
                        Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: bigint)
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: partials
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                  sort order: +++
                  Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                  Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col3 (type: bigint)
        Reducer 3 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: final
                outputColumnNames: _col0, _col1, _col3
                Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), _col3 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT key, val, count(1) FROM T1_n82 GROUP BY key, val with cube
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n82
#### A masked pattern was here ####
POSTHOOK: query: SELECT key, val, count(1) FROM T1_n82 GROUP BY key, val with cube
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n82
#### A masked pattern was here ####
1	11	1
1	NULL	1
2	12	1
2	NULL	1
3	13	1
3	NULL	1
7	17	1
7	NULL	1
8	18	1
8	28	1
8	NULL	2
NULL	11	1
NULL	12	1
NULL	13	1
NULL	17	1
NULL	18	1
NULL	28	1
NULL	NULL	6
PREHOOK: query: EXPLAIN
SELECT key, count(distinct val) FROM T1_n82 GROUP BY key with cube
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT key, count(distinct val) FROM T1_n82 GROUP BY key with cube
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (GROUP PARTITION-LEVEL SORT, 2)
        Reducer 3 <- Reducer 2 (GROUP PARTITION-LEVEL SORT, 2)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1_n82
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), val (type: string)
                    outputColumnNames: key, val
                    Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(DISTINCT val)
                      keys: key (type: string), 0L (type: bigint), val (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string)
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(DISTINCT KEY._col2:0._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: bigint)
                mode: partials
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string), _col1 (type: bigint)
                  sort order: ++
                  Map-reduce partition columns: _col0 (type: string)
                  Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col2 (type: bigint)
        Reducer 3 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: bigint)
                mode: final
                outputColumnNames: _col0, _col2
                Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Select Operator
                  expressions: _col0 (type: string), _col2 (type: bigint)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT key, count(distinct val) FROM T1_n82 GROUP BY key with cube
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n82
#### A masked pattern was here ####
POSTHOOK: query: SELECT key, count(distinct val) FROM T1_n82 GROUP BY key with cube
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n82
#### A masked pattern was here ####
1	1
2	1
3	1
7	1
8	2
NULL	6
PREHOOK: query: CREATE TABLE T2_n51(key1 STRING, key2 STRING, val INT) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@T2_n51
POSTHOOK: query: CREATE TABLE T2_n51(key1 STRING, key2 STRING, val INT) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@T2_n51
PREHOOK: query: CREATE TABLE T3_n16(key1 STRING, key2 STRING, val INT) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@T3_n16
POSTHOOK: query: CREATE TABLE T3_n16(key1 STRING, key2 STRING, val INT) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@T3_n16
PREHOOK: query: EXPLAIN
FROM T1_n82
INSERT OVERWRITE TABLE T2_n51 SELECT key, val, count(1) group by key, val with cube
INSERT OVERWRITE TABLE T3_n16 SELECT key, val, sum(1) group by key, val with cube
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
FROM T1_n82
INSERT OVERWRITE TABLE T2_n51 SELECT key, val, count(1) group by key, val with cube
INSERT OVERWRITE TABLE T3_n16 SELECT key, val, sum(1) group by key, val with cube
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-2 is a root stage
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0
  Stage-1 depends on stages: Stage-2
  Stage-4 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-2
    Spark
      Edges:
        Reducer 2 <- Map 6 (GROUP PARTITION-LEVEL SORT, 2)
        Reducer 3 <- Reducer 2 (GROUP PARTITION-LEVEL SORT, 2)
        Reducer 4 <- Map 7 (GROUP PARTITION-LEVEL SORT, 2)
        Reducer 5 <- Reducer 4 (GROUP PARTITION-LEVEL SORT, 2)
#### A masked pattern was here ####
      Vertices:
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: t1_n82
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), val (type: string)
                    outputColumnNames: key, val
                    Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(1)
                      keys: key (type: string), val (type: string), 0L (type: bigint)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                        sort order: +++
                        Map-reduce partition columns: rand() (type: double)
                        Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: bigint)
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: t1_n82
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), val (type: string)
                    outputColumnNames: key, val
                    Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: sum(1)
                      keys: key (type: string), val (type: string), 0L (type: bigint)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                        sort order: +++
                        Map-reduce partition columns: rand() (type: double)
                        Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: bigint)
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: partials
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                  sort order: +++
                  Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                  Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col3 (type: bigint)
        Reducer 3 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: final
                outputColumnNames: _col0, _col1, _col3
                Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), UDFToInteger(_col3) (type: int)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        name: default.t2_n51
        Reducer 4 
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: partials
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint)
                  sort order: +++
                  Map-reduce partition columns: _col0 (type: string), _col1 (type: string)
                  Statistics: Num rows: 4 Data size: 1200 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col3 (type: bigint)
        Reducer 5 
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: bigint)
                mode: final
                outputColumnNames: _col0, _col1, _col3
                Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                pruneGroupingSetId: true
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), UDFToInteger(_col3) (type: int)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        name: default.t3_n16

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.t2_n51

  Stage: Stage-3
    Stats Work
      Basic Stats Work:

  Stage: Stage-1
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.t3_n16

  Stage: Stage-4
    Stats Work
      Basic Stats Work:

PREHOOK: query: FROM T1_n82
INSERT OVERWRITE TABLE T2_n51 SELECT key, val, count(1) group by key, val with cube
INSERT OVERWRITE TABLE T3_n16 SELECT key, val, sum(1) group by key, val with cube
PREHOOK: type: QUERY
PREHOOK: Input: default@t1_n82
PREHOOK: Output: default@t2_n51
PREHOOK: Output: default@t3_n16
POSTHOOK: query: FROM T1_n82
INSERT OVERWRITE TABLE T2_n51 SELECT key, val, count(1) group by key, val with cube
INSERT OVERWRITE TABLE T3_n16 SELECT key, val, sum(1) group by key, val with cube
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1_n82
POSTHOOK: Output: default@t2_n51
POSTHOOK: Output: default@t3_n16
POSTHOOK: Lineage: t2_n51.key1 SIMPLE [(t1_n82)t1_n82.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: t2_n51.key2 SIMPLE [(t1_n82)t1_n82.FieldSchema(name:val, type:string, comment:null), ]
POSTHOOK: Lineage: t2_n51.val EXPRESSION [(t1_n82)t1_n82.null, ]
POSTHOOK: Lineage: t3_n16.key1 SIMPLE [(t1_n82)t1_n82.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: t3_n16.key2 SIMPLE [(t1_n82)t1_n82.FieldSchema(name:val, type:string, comment:null), ]
POSTHOOK: Lineage: t3_n16.val EXPRESSION [(t1_n82)t1_n82.null, ]
