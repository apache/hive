PREHOOK: query: create table src_multi1_n2 like src
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@src_multi1_n2
POSTHOOK: query: create table src_multi1_n2 like src
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@src_multi1_n2
PREHOOK: query: create table src_multi2_n3 like src
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@src_multi2_n3
POSTHOOK: query: create table src_multi2_n3 like src
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@src_multi2_n3
PREHOOK: query: create table src_multi3 like src
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@src_multi3
POSTHOOK: query: create table src_multi3 like src
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@src_multi3
PREHOOK: query: explain
from src
insert overwrite table src_multi1_n2 select key, count(1) group by key order by key
insert overwrite table src_multi2_n3 select value, count(1) group by value order by value
insert overwrite table src_multi3 select * where key < 10
PREHOOK: type: QUERY
POSTHOOK: query: explain
from src
insert overwrite table src_multi1_n2 select key, count(1) group by key order by key
insert overwrite table src_multi2_n3 select value, count(1) group by value order by value
insert overwrite table src_multi3 select * where key < 10
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-3 is a root stage
  Stage-0 depends on stages: Stage-3
  Stage-4 depends on stages: Stage-0
  Stage-1 depends on stages: Stage-3
  Stage-5 depends on stages: Stage-1
  Stage-2 depends on stages: Stage-3
  Stage-6 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-3
    Spark
      Edges:
        Reducer 2 <- Map 6 (GROUP, 2)
        Reducer 3 <- Reducer 2 (SORT, 1)
        Reducer 4 <- Map 7 (GROUP, 2)
        Reducer 5 <- Reducer 4 (SORT, 1)
#### A masked pattern was here ####
      Vertices:
        Map 6 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string)
                    outputColumnNames: key
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(1)
                      keys: key (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col1 (type: bigint)
                  Filter Operator
                    predicate: (key < 10) (type: boolean)
                    Statistics: Num rows: 166 Data size: 1763 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: string), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 166 Data size: 1763 Basic stats: COMPLETE Column stats: NONE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 166 Data size: 1763 Basic stats: COMPLETE Column stats: NONE
                        table:
                            input format: org.apache.hadoop.mapred.TextInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                            name: default.src_multi3
            Execution mode: vectorized
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: value (type: string)
                    outputColumnNames: value
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(1)
                      keys: value (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col1 (type: bigint)
            Execution mode: vectorized
        Reducer 2 
            Execution mode: vectorized
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string)
                  sort order: +
                  Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: bigint)
        Reducer 3 
            Execution mode: vectorized
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), CAST( VALUE._col0 AS STRING) (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.src_multi1_n2
        Reducer 4 
            Execution mode: vectorized
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string)
                  sort order: +
                  Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: bigint)
        Reducer 5 
            Execution mode: vectorized
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), CAST( VALUE._col0 AS STRING) (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.src_multi2_n3

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.src_multi1_n2

  Stage: Stage-4
    Stats Work
      Basic Stats Work:

  Stage: Stage-1
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.src_multi2_n3

  Stage: Stage-5
    Stats Work
      Basic Stats Work:

  Stage: Stage-2
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.src_multi3

  Stage: Stage-6
    Stats Work
      Basic Stats Work:

PREHOOK: query: from src
insert overwrite table src_multi1_n2 select key, count(1) group by key order by key
insert overwrite table src_multi2_n3 select value, count(1) group by value order by value
insert overwrite table src_multi3 select * where key < 10
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@src_multi1_n2
PREHOOK: Output: default@src_multi2_n3
PREHOOK: Output: default@src_multi3
POSTHOOK: query: from src
insert overwrite table src_multi1_n2 select key, count(1) group by key order by key
insert overwrite table src_multi2_n3 select value, count(1) group by value order by value
insert overwrite table src_multi3 select * where key < 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@src_multi1_n2
POSTHOOK: Output: default@src_multi2_n3
POSTHOOK: Output: default@src_multi3
POSTHOOK: Lineage: src_multi1_n2.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: src_multi1_n2.value EXPRESSION [(src)src.null, ]
POSTHOOK: Lineage: src_multi2_n3.key SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: src_multi2_n3.value EXPRESSION [(src)src.null, ]
POSTHOOK: Lineage: src_multi3.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: src_multi3.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: select * from src_multi1_n2
PREHOOK: type: QUERY
PREHOOK: Input: default@src_multi1_n2
#### A masked pattern was here ####
POSTHOOK: query: select * from src_multi1_n2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src_multi1_n2
#### A masked pattern was here ####
0	3
10	1
100	2
103	2
104	2
105	1
11	1
111	1
113	2
114	1
116	1
118	2
119	3
12	2
120	2
125	2
126	1
128	3
129	2
131	1
133	1
134	2
136	1
137	2
138	4
143	1
145	1
146	2
149	2
15	2
150	1
152	2
153	1
155	1
156	1
157	1
158	1
160	1
162	1
163	1
164	2
165	2
166	1
167	3
168	1
169	4
17	1
170	1
172	2
174	2
175	2
176	2
177	1
178	1
179	2
18	2
180	1
181	1
183	1
186	1
187	3
189	1
19	1
190	1
191	2
192	1
193	3
194	1
195	2
196	1
197	2
199	3
2	1
20	1
200	2
201	1
202	1
203	2
205	2
207	2
208	3
209	2
213	2
214	1
216	2
217	2
218	1
219	2
221	2
222	1
223	2
224	2
226	1
228	1
229	2
230	5
233	2
235	1
237	2
238	2
239	2
24	2
241	1
242	2
244	1
247	1
248	1
249	1
252	1
255	2
256	2
257	1
258	1
26	2
260	1
262	1
263	1
265	2
266	1
27	1
272	2
273	3
274	1
275	1
277	4
278	2
28	1
280	2
281	2
282	2
283	1
284	1
285	1
286	1
287	1
288	2
289	1
291	1
292	1
296	1
298	3
30	1
302	1
305	1
306	1
307	2
308	1
309	2
310	1
311	3
315	1
316	3
317	2
318	3
321	2
322	2
323	1
325	2
327	3
33	1
331	2
332	1
333	2
335	1
336	1
338	1
339	1
34	1
341	1
342	2
344	2
345	1
348	5
35	3
351	1
353	2
356	1
360	1
362	1
364	1
365	1
366	1
367	2
368	1
369	3
37	2
373	1
374	1
375	1
377	1
378	1
379	1
382	2
384	3
386	1
389	1
392	1
393	1
394	1
395	2
396	3
397	2
399	2
4	1
400	1
401	5
402	1
403	3
404	2
406	4
407	1
409	3
41	1
411	1
413	2
414	2
417	3
418	1
419	1
42	2
421	1
424	2
427	1
429	2
43	1
430	3
431	3
432	1
435	1
436	1
437	1
438	3
439	2
44	1
443	1
444	1
446	1
448	1
449	1
452	1
453	1
454	3
455	1
457	1
458	2
459	2
460	1
462	2
463	2
466	3
467	1
468	4
469	5
47	1
470	1
472	1
475	1
477	1
478	2
479	1
480	3
481	1
482	1
483	1
484	1
485	1
487	1
489	4
490	1
491	1
492	2
493	1
494	1
495	1
496	1
497	1
498	3
5	3
51	2
53	1
54	1
57	1
58	2
64	1
65	1
66	1
67	2
69	1
70	3
72	2
74	1
76	2
77	1
78	1
8	1
80	1
82	1
83	2
84	2
85	1
86	1
87	1
9	1
90	3
92	1
95	2
96	1
97	2
98	2
PREHOOK: query: select * from src_multi2_n3
PREHOOK: type: QUERY
PREHOOK: Input: default@src_multi2_n3
#### A masked pattern was here ####
POSTHOOK: query: select * from src_multi2_n3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src_multi2_n3
#### A masked pattern was here ####
val_0	3
val_10	1
val_100	2
val_103	2
val_104	2
val_105	1
val_11	1
val_111	1
val_113	2
val_114	1
val_116	1
val_118	2
val_119	3
val_12	2
val_120	2
val_125	2
val_126	1
val_128	3
val_129	2
val_131	1
val_133	1
val_134	2
val_136	1
val_137	2
val_138	4
val_143	1
val_145	1
val_146	2
val_149	2
val_15	2
val_150	1
val_152	2
val_153	1
val_155	1
val_156	1
val_157	1
val_158	1
val_160	1
val_162	1
val_163	1
val_164	2
val_165	2
val_166	1
val_167	3
val_168	1
val_169	4
val_17	1
val_170	1
val_172	2
val_174	2
val_175	2
val_176	2
val_177	1
val_178	1
val_179	2
val_18	2
val_180	1
val_181	1
val_183	1
val_186	1
val_187	3
val_189	1
val_19	1
val_190	1
val_191	2
val_192	1
val_193	3
val_194	1
val_195	2
val_196	1
val_197	2
val_199	3
val_2	1
val_20	1
val_200	2
val_201	1
val_202	1
val_203	2
val_205	2
val_207	2
val_208	3
val_209	2
val_213	2
val_214	1
val_216	2
val_217	2
val_218	1
val_219	2
val_221	2
val_222	1
val_223	2
val_224	2
val_226	1
val_228	1
val_229	2
val_230	5
val_233	2
val_235	1
val_237	2
val_238	2
val_239	2
val_24	2
val_241	1
val_242	2
val_244	1
val_247	1
val_248	1
val_249	1
val_252	1
val_255	2
val_256	2
val_257	1
val_258	1
val_26	2
val_260	1
val_262	1
val_263	1
val_265	2
val_266	1
val_27	1
val_272	2
val_273	3
val_274	1
val_275	1
val_277	4
val_278	2
val_28	1
val_280	2
val_281	2
val_282	2
val_283	1
val_284	1
val_285	1
val_286	1
val_287	1
val_288	2
val_289	1
val_291	1
val_292	1
val_296	1
val_298	3
val_30	1
val_302	1
val_305	1
val_306	1
val_307	2
val_308	1
val_309	2
val_310	1
val_311	3
val_315	1
val_316	3
val_317	2
val_318	3
val_321	2
val_322	2
val_323	1
val_325	2
val_327	3
val_33	1
val_331	2
val_332	1
val_333	2
val_335	1
val_336	1
val_338	1
val_339	1
val_34	1
val_341	1
val_342	2
val_344	2
val_345	1
val_348	5
val_35	3
val_351	1
val_353	2
val_356	1
val_360	1
val_362	1
val_364	1
val_365	1
val_366	1
val_367	2
val_368	1
val_369	3
val_37	2
val_373	1
val_374	1
val_375	1
val_377	1
val_378	1
val_379	1
val_382	2
val_384	3
val_386	1
val_389	1
val_392	1
val_393	1
val_394	1
val_395	2
val_396	3
val_397	2
val_399	2
val_4	1
val_400	1
val_401	5
val_402	1
val_403	3
val_404	2
val_406	4
val_407	1
val_409	3
val_41	1
val_411	1
val_413	2
val_414	2
val_417	3
val_418	1
val_419	1
val_42	2
val_421	1
val_424	2
val_427	1
val_429	2
val_43	1
val_430	3
val_431	3
val_432	1
val_435	1
val_436	1
val_437	1
val_438	3
val_439	2
val_44	1
val_443	1
val_444	1
val_446	1
val_448	1
val_449	1
val_452	1
val_453	1
val_454	3
val_455	1
val_457	1
val_458	2
val_459	2
val_460	1
val_462	2
val_463	2
val_466	3
val_467	1
val_468	4
val_469	5
val_47	1
val_470	1
val_472	1
val_475	1
val_477	1
val_478	2
val_479	1
val_480	3
val_481	1
val_482	1
val_483	1
val_484	1
val_485	1
val_487	1
val_489	4
val_490	1
val_491	1
val_492	2
val_493	1
val_494	1
val_495	1
val_496	1
val_497	1
val_498	3
val_5	3
val_51	2
val_53	1
val_54	1
val_57	1
val_58	2
val_64	1
val_65	1
val_66	1
val_67	2
val_69	1
val_70	3
val_72	2
val_74	1
val_76	2
val_77	1
val_78	1
val_8	1
val_80	1
val_82	1
val_83	2
val_84	2
val_85	1
val_86	1
val_87	1
val_9	1
val_90	3
val_92	1
val_95	2
val_96	1
val_97	2
val_98	2
PREHOOK: query: select * from src_multi3
PREHOOK: type: QUERY
PREHOOK: Input: default@src_multi3
#### A masked pattern was here ####
POSTHOOK: query: select * from src_multi3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src_multi3
#### A masked pattern was here ####
0	val_0
4	val_4
8	val_8
0	val_0
0	val_0
5	val_5
5	val_5
2	val_2
5	val_5
9	val_9
