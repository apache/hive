PREHOOK: query: SELECT * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
NULL	NULL	128		128	val_128
NULL	NULL	128		128	val_128
NULL	NULL	128		128	val_128
NULL	NULL	146	val_146	146	val_146
NULL	NULL	146	val_146	146	val_146
NULL	NULL	150	val_150	150	val_150
NULL	NULL	213	val_213	213	val_213
NULL	NULL	213	val_213	213	val_213
NULL	NULL	224		224	val_224
NULL	NULL	224		224	val_224
NULL	NULL	238	val_238	238	val_238
NULL	NULL	238	val_238	238	val_238
NULL	NULL	255	val_255	255	val_255
NULL	NULL	255	val_255	255	val_255
NULL	NULL	273	val_273	273	val_273
NULL	NULL	273	val_273	273	val_273
NULL	NULL	273	val_273	273	val_273
NULL	NULL	278	val_278	278	val_278
NULL	NULL	278	val_278	278	val_278
NULL	NULL	66	val_66	66	val_66
NULL	NULL	98	val_98	98	val_98
NULL	NULL	98	val_98	98	val_98
PREHOOK: query: explain
SELECT /*+ mapjoin(src1, src2) */ * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
PREHOOK: type: QUERY
POSTHOOK: query: explain
SELECT /*+ mapjoin(src1, src2) */ * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-2 is a root stage
  Stage-1 depends on stages: Stage-2
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-2
    Spark
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src1
                  Statistics: Num rows: 25 Data size: 191 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: ((key < 300) and (key < 10)) (type: boolean)
                    Statistics: Num rows: 2 Data size: 15 Basic stats: COMPLETE Column stats: NONE
                    Spark HashTable Sink Operator
                      filter predicates:
                        0 
                        1 {(key > 10)}
                        2 
                      keys:
                        0 key (type: string)
                        1 key (type: string)
                        2 key (type: string)
            Local Work:
              Map Reduce Local Work
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: src2
                  Statistics: Num rows: 25 Data size: 191 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (key < 300) (type: boolean)
                    Statistics: Num rows: 8 Data size: 61 Basic stats: COMPLETE Column stats: NONE
                    Spark HashTable Sink Operator
                      filter predicates:
                        0 
                        1 {(key > 10)}
                        2 
                      keys:
                        0 key (type: string)
                        1 key (type: string)
                        2 key (type: string)
            Local Work:
              Map Reduce Local Work

  Stage: Stage-1
    Spark
      Edges:
        Reducer 4 <- Map 3 (PARTITION-LEVEL SORT, 2)
#### A masked pattern was here ####
      Vertices:
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: src3
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (key < 300) (type: boolean)
                    Statistics: Num rows: 166 Data size: 1763 Basic stats: COMPLETE Column stats: NONE
                    Map Join Operator
                      condition map:
                           Right Outer Join 0 to 1
                           Inner Join 1 to 2
                      filter predicates:
                        0 
                        1 {(key > 10)}
                        2 
                      keys:
                        0 key (type: string)
                        1 key (type: string)
                        2 key (type: string)
                      outputColumnNames: _col0, _col1, _col5, _col6, _col10, _col11
                      input vertices:
                        0 Map 1
                        1 Map 2
                      Statistics: Num rows: 365 Data size: 3878 Basic stats: COMPLETE Column stats: NONE
                      Select Operator
                        expressions: _col0 (type: string), _col1 (type: string), _col5 (type: string), _col6 (type: string), _col10 (type: string), _col11 (type: string)
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                        Statistics: Num rows: 365 Data size: 3878 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: string), _col2 (type: string), _col4 (type: string)
                          sort order: +++
                          Statistics: Num rows: 365 Data size: 3878 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col1 (type: string), _col3 (type: string), _col5 (type: string)
            Local Work:
              Map Reduce Local Work
        Reducer 4 
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col1 (type: string), KEY.reducesinkkey2 (type: string), VALUE._col2 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 365 Data size: 3878 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 365 Data size: 3878 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT /*+ mapjoin(src1, src2) */ * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT /*+ mapjoin(src1, src2) */ * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
NULL	NULL	128		128	val_128
NULL	NULL	128		128	val_128
NULL	NULL	128		128	val_128
NULL	NULL	146	val_146	146	val_146
NULL	NULL	146	val_146	146	val_146
NULL	NULL	150	val_150	150	val_150
NULL	NULL	213	val_213	213	val_213
NULL	NULL	213	val_213	213	val_213
NULL	NULL	224		224	val_224
NULL	NULL	224		224	val_224
NULL	NULL	238	val_238	238	val_238
NULL	NULL	238	val_238	238	val_238
NULL	NULL	255	val_255	255	val_255
NULL	NULL	255	val_255	255	val_255
NULL	NULL	273	val_273	273	val_273
NULL	NULL	273	val_273	273	val_273
NULL	NULL	273	val_273	273	val_273
NULL	NULL	278	val_278	278	val_278
NULL	NULL	278	val_278	278	val_278
NULL	NULL	66	val_66	66	val_66
NULL	NULL	98	val_98	98	val_98
NULL	NULL	98	val_98	98	val_98
PREHOOK: query: explain
SELECT * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
PREHOOK: type: QUERY
POSTHOOK: query: explain
SELECT * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-2 is a root stage
  Stage-1 depends on stages: Stage-2
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-2
    Spark
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src1
                  Statistics: Num rows: 25 Data size: 191 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: ((key < 300) and (key < 10)) (type: boolean)
                    Statistics: Num rows: 2 Data size: 15 Basic stats: COMPLETE Column stats: NONE
                    Spark HashTable Sink Operator
                      filter predicates:
                        0 
                        1 {(key > 10)}
                        2 
                      keys:
                        0 key (type: string)
                        1 key (type: string)
                        2 key (type: string)
            Local Work:
              Map Reduce Local Work
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: src2
                  Statistics: Num rows: 25 Data size: 191 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (key < 300) (type: boolean)
                    Statistics: Num rows: 8 Data size: 61 Basic stats: COMPLETE Column stats: NONE
                    Spark HashTable Sink Operator
                      filter predicates:
                        0 
                        1 {(key > 10)}
                        2 
                      keys:
                        0 key (type: string)
                        1 key (type: string)
                        2 key (type: string)
            Local Work:
              Map Reduce Local Work

  Stage: Stage-1
    Spark
      Edges:
        Reducer 4 <- Map 3 (PARTITION-LEVEL SORT, 2)
#### A masked pattern was here ####
      Vertices:
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: src3
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (key < 300) (type: boolean)
                    Statistics: Num rows: 166 Data size: 1763 Basic stats: COMPLETE Column stats: NONE
                    Map Join Operator
                      condition map:
                           Right Outer Join 0 to 1
                           Inner Join 1 to 2
                      filter predicates:
                        0 
                        1 {(key > 10)}
                        2 
                      keys:
                        0 key (type: string)
                        1 key (type: string)
                        2 key (type: string)
                      outputColumnNames: _col0, _col1, _col5, _col6, _col10, _col11
                      input vertices:
                        0 Map 1
                        1 Map 2
                      Statistics: Num rows: 365 Data size: 3878 Basic stats: COMPLETE Column stats: NONE
                      Select Operator
                        expressions: _col0 (type: string), _col1 (type: string), _col5 (type: string), _col6 (type: string), _col10 (type: string), _col11 (type: string)
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                        Statistics: Num rows: 365 Data size: 3878 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: string), _col2 (type: string), _col4 (type: string)
                          sort order: +++
                          Statistics: Num rows: 365 Data size: 3878 Basic stats: COMPLETE Column stats: NONE
                          value expressions: _col1 (type: string), _col3 (type: string), _col5 (type: string)
            Local Work:
              Map Reduce Local Work
        Reducer 4 
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col1 (type: string), KEY.reducesinkkey2 (type: string), VALUE._col2 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 365 Data size: 3878 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 365 Data size: 3878 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
NULL	NULL	128		128	val_128
NULL	NULL	128		128	val_128
NULL	NULL	128		128	val_128
NULL	NULL	146	val_146	146	val_146
NULL	NULL	146	val_146	146	val_146
NULL	NULL	150	val_150	150	val_150
NULL	NULL	213	val_213	213	val_213
NULL	NULL	213	val_213	213	val_213
NULL	NULL	224		224	val_224
NULL	NULL	224		224	val_224
NULL	NULL	238	val_238	238	val_238
NULL	NULL	238	val_238	238	val_238
NULL	NULL	255	val_255	255	val_255
NULL	NULL	255	val_255	255	val_255
NULL	NULL	273	val_273	273	val_273
NULL	NULL	273	val_273	273	val_273
NULL	NULL	273	val_273	273	val_273
NULL	NULL	278	val_278	278	val_278
NULL	NULL	278	val_278	278	val_278
NULL	NULL	66	val_66	66	val_66
NULL	NULL	98	val_98	98	val_98
NULL	NULL	98	val_98	98	val_98
