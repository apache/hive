PREHOOK: query: create table inputTbl1_n20(key string, val string) stored as textfile
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@inputTbl1_n20
POSTHOOK: query: create table inputTbl1_n20(key string, val string) stored as textfile
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@inputTbl1_n20
PREHOOK: query: create table outputTbl1_n28(key double, `values` bigint) stored as textfile
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@outputTbl1_n28
POSTHOOK: query: create table outputTbl1_n28(key double, `values` bigint) stored as textfile
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@outputTbl1_n28
PREHOOK: query: load data local inpath '../../data/files/T1.txt' into table inputTbl1_n20
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@inputtbl1_n20
POSTHOOK: query: load data local inpath '../../data/files/T1.txt' into table inputTbl1_n20
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@inputtbl1_n20
PREHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE outputTbl1_n28
SELECT * FROM
(
  SELECT CAST(key AS DOUBLE) AS key, count(1) as `values` FROM inputTbl1_n20 group by key
  UNION ALL
  SELECT CAST(key AS BIGINT) AS key, count(1) as `values` FROM inputTbl1_n20 group by key
) a
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
INSERT OVERWRITE TABLE outputTbl1_n28
SELECT * FROM
(
  SELECT CAST(key AS DOUBLE) AS key, count(1) as `values` FROM inputTbl1_n20 group by key
  UNION ALL
  SELECT CAST(key AS BIGINT) AS key, count(1) as `values` FROM inputTbl1_n20 group by key
) a
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (GROUP, 2)
        Reducer 4 <- Map 1 (GROUP, 2)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: inputtbl1_n20
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string)
                    outputColumnNames: key
                    Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count()
                      keys: key (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col1 (type: bigint)
            Execution mode: vectorized
        Reducer 2 
            Execution mode: vectorized
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: UDFToDouble(_col0) (type: double), _col1 (type: bigint)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        name: default.outputtbl1_n28
        Reducer 4 
            Execution mode: vectorized
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: UDFToDouble(UDFToLong(_col0)) (type: double), _col1 (type: bigint)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 600 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        name: default.outputtbl1_n28

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.outputtbl1_n28

PREHOOK: query: INSERT OVERWRITE TABLE outputTbl1_n28
SELECT * FROM
(
  SELECT CAST(key AS DOUBLE) AS key, count(1) as `values` FROM inputTbl1_n20 group by key
  UNION ALL
  SELECT CAST(key AS BIGINT) AS key, count(1) as `values` FROM inputTbl1_n20 group by key
) a
PREHOOK: type: QUERY
PREHOOK: Input: default@inputtbl1_n20
PREHOOK: Output: default@outputtbl1_n28
POSTHOOK: query: INSERT OVERWRITE TABLE outputTbl1_n28
SELECT * FROM
(
  SELECT CAST(key AS DOUBLE) AS key, count(1) as `values` FROM inputTbl1_n20 group by key
  UNION ALL
  SELECT CAST(key AS BIGINT) AS key, count(1) as `values` FROM inputTbl1_n20 group by key
) a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@inputtbl1_n20
POSTHOOK: Output: default@outputtbl1_n28
POSTHOOK: Lineage: outputtbl1_n28.key EXPRESSION [(inputtbl1_n20)inputtbl1_n20.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: outputtbl1_n28.values EXPRESSION [(inputtbl1_n20)inputtbl1_n20.null, ]
PREHOOK: query: desc formatted outputTbl1_n28
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@outputtbl1_n28
POSTHOOK: query: desc formatted outputTbl1_n28
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@outputtbl1_n28
# col_name            	data_type           	comment             
key                 	double              	                    
values              	bigint              	                    
	 	 
# Detailed Table Information	 	 
Database:           	default             	 
#### A masked pattern was here ####
Retention:          	0                   	 
#### A masked pattern was here ####
Table Type:         	MANAGED_TABLE       	 
Table Parameters:	 	 
	bucketing_version   	2                   
	numFiles            	4                   
	totalSize           	60                  
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe	 
InputFormat:        	org.apache.hadoop.mapred.TextInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	-1                  	 
Bucket Columns:     	[]                  	 
Sort Columns:       	[]                  	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: select * from outputTbl1_n28
PREHOOK: type: QUERY
PREHOOK: Input: default@outputtbl1_n28
#### A masked pattern was here ####
POSTHOOK: query: select * from outputTbl1_n28
POSTHOOK: type: QUERY
POSTHOOK: Input: default@outputtbl1_n28
#### A masked pattern was here ####
1.0	1
1.0	1
2.0	1
2.0	1
3.0	1
3.0	1
7.0	1
7.0	1
8.0	2
8.0	2
