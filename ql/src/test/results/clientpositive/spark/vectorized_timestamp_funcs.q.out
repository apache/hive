PREHOOK: query: CREATE TABLE alltypesorc_string(cboolean1 boolean, ctimestamp1 timestamp, stimestamp1 string,
    ctimestamp2 timestamp) STORED AS ORC
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@alltypesorc_string
POSTHOOK: query: CREATE TABLE alltypesorc_string(cboolean1 boolean, ctimestamp1 timestamp, stimestamp1 string,
    ctimestamp2 timestamp) STORED AS ORC
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@alltypesorc_string
PREHOOK: query: INSERT OVERWRITE TABLE alltypesorc_string
SELECT
  cboolean1,
  to_utc_timestamp(ctimestamp1, 'America/Los_Angeles') AS toutc,
  CAST(to_utc_timestamp(ctimestamp1, 'America/Los_Angeles') AS STRING) as cst,
  ctimestamp2
FROM alltypesorc
ORDER BY toutc, cst
LIMIT 40
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
PREHOOK: Output: default@alltypesorc_string
POSTHOOK: query: INSERT OVERWRITE TABLE alltypesorc_string
SELECT
  cboolean1,
  to_utc_timestamp(ctimestamp1, 'America/Los_Angeles') AS toutc,
  CAST(to_utc_timestamp(ctimestamp1, 'America/Los_Angeles') AS STRING) as cst,
  ctimestamp2
FROM alltypesorc
ORDER BY toutc, cst
LIMIT 40
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
POSTHOOK: Output: default@alltypesorc_string
POSTHOOK: Lineage: alltypesorc_string.cboolean1 SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cboolean1, type:boolean, comment:null), ]
POSTHOOK: Lineage: alltypesorc_string.ctimestamp1 EXPRESSION [(alltypesorc)alltypesorc.FieldSchema(name:ctimestamp1, type:timestamp, comment:null), ]
POSTHOOK: Lineage: alltypesorc_string.ctimestamp2 SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:ctimestamp2, type:timestamp, comment:null), ]
POSTHOOK: Lineage: alltypesorc_string.stimestamp1 EXPRESSION [(alltypesorc)alltypesorc.FieldSchema(name:ctimestamp1, type:timestamp, comment:null), ]
PREHOOK: query: INSERT INTO TABLE alltypesorc_string values (false, '2021-09-24 03:18:32.4', '1978-08-05 14:41:05.501', '1999-10-03 16:59:10.396903939')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@alltypesorc_string
POSTHOOK: query: INSERT INTO TABLE alltypesorc_string values (false, '2021-09-24 03:18:32.4', '1978-08-05 14:41:05.501', '1999-10-03 16:59:10.396903939')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@alltypesorc_string
POSTHOOK: Lineage: alltypesorc_string.cboolean1 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp1 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp2 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.stimestamp1 SCRIPT []
PREHOOK: query: INSERT INTO TABLE alltypesorc_string values (false, null, '2013-04-10 00:43:46.8547315', null)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@alltypesorc_string
POSTHOOK: query: INSERT INTO TABLE alltypesorc_string values (false, null, '2013-04-10 00:43:46.8547315', null)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@alltypesorc_string
POSTHOOK: Lineage: alltypesorc_string.cboolean1 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp1 EXPRESSION []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp2 EXPRESSION []
POSTHOOK: Lineage: alltypesorc_string.stimestamp1 SCRIPT []
PREHOOK: query: INSERT INTO TABLE alltypesorc_string values (false, '2021-09-24 03:18:32.4', null, null)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@alltypesorc_string
POSTHOOK: query: INSERT INTO TABLE alltypesorc_string values (false, '2021-09-24 03:18:32.4', null, null)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@alltypesorc_string
POSTHOOK: Lineage: alltypesorc_string.cboolean1 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp1 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp2 EXPRESSION []
POSTHOOK: Lineage: alltypesorc_string.stimestamp1 EXPRESSION []
PREHOOK: query: INSERT INTO TABLE alltypesorc_string values (null, '7160-12-02 06:00:24.81200852', '0004-09-22 18:26:29.519542222', '1966-08-16 13:36:50.183')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@alltypesorc_string
POSTHOOK: query: INSERT INTO TABLE alltypesorc_string values (null, '7160-12-02 06:00:24.81200852', '0004-09-22 18:26:29.519542222', '1966-08-16 13:36:50.183')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@alltypesorc_string
POSTHOOK: Lineage: alltypesorc_string.cboolean1 EXPRESSION []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp1 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp2 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.stimestamp1 SCRIPT []
PREHOOK: query: INSERT INTO TABLE alltypesorc_string values (null, null, '4966-12-04 09:30:55.202', null)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@alltypesorc_string
POSTHOOK: query: INSERT INTO TABLE alltypesorc_string values (null, null, '4966-12-04 09:30:55.202', null)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@alltypesorc_string
POSTHOOK: Lineage: alltypesorc_string.cboolean1 EXPRESSION []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp1 EXPRESSION []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp2 EXPRESSION []
POSTHOOK: Lineage: alltypesorc_string.stimestamp1 SCRIPT []
PREHOOK: query: INSERT INTO TABLE alltypesorc_string values (null, '7160-12-02 06:00:24.81200852', null, null)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@alltypesorc_string
POSTHOOK: query: INSERT INTO TABLE alltypesorc_string values (null, '7160-12-02 06:00:24.81200852', null, null)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@alltypesorc_string
POSTHOOK: Lineage: alltypesorc_string.cboolean1 EXPRESSION []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp1 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp2 EXPRESSION []
POSTHOOK: Lineage: alltypesorc_string.stimestamp1 EXPRESSION []
PREHOOK: query: INSERT INTO TABLE alltypesorc_string values (true, '1985-07-20 09:30:11.0', '8521-01-16 20:42:05.668832', '1319-02-02 16:31:57.778')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@alltypesorc_string
POSTHOOK: query: INSERT INTO TABLE alltypesorc_string values (true, '1985-07-20 09:30:11.0', '8521-01-16 20:42:05.668832', '1319-02-02 16:31:57.778')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@alltypesorc_string
POSTHOOK: Lineage: alltypesorc_string.cboolean1 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp1 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp2 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.stimestamp1 SCRIPT []
PREHOOK: query: INSERT INTO TABLE alltypesorc_string values (true, null, '1883-04-17 04:14:34.64776', '2024-11-11 16:42:41.101')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@alltypesorc_string
POSTHOOK: query: INSERT INTO TABLE alltypesorc_string values (true, null, '1883-04-17 04:14:34.64776', '2024-11-11 16:42:41.101')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@alltypesorc_string
POSTHOOK: Lineage: alltypesorc_string.cboolean1 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp1 EXPRESSION []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp2 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.stimestamp1 SCRIPT []
PREHOOK: query: INSERT INTO TABLE alltypesorc_string values (true, '0528-10-27 08:15:18.941718273', null, null)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@alltypesorc_string
POSTHOOK: query: INSERT INTO TABLE alltypesorc_string values (true, '0528-10-27 08:15:18.941718273', null, null)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@alltypesorc_string
POSTHOOK: Lineage: alltypesorc_string.cboolean1 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp1 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp2 EXPRESSION []
POSTHOOK: Lineage: alltypesorc_string.stimestamp1 EXPRESSION []
PREHOOK: query: INSERT INTO TABLE alltypesorc_string values
     (false, '2021-09-24 03:18:32.4', '1985-11-18 16:37:54.0', '2010-04-08 02:43:35.861742727'),
     (true, null, '1985-11-18 16:37:54.0', null),
     (null, '2021-09-24 03:18:32.4', null, '1974-10-04 17:21:03.989')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@alltypesorc_string
POSTHOOK: query: INSERT INTO TABLE alltypesorc_string values
     (false, '2021-09-24 03:18:32.4', '1985-11-18 16:37:54.0', '2010-04-08 02:43:35.861742727'),
     (true, null, '1985-11-18 16:37:54.0', null),
     (null, '2021-09-24 03:18:32.4', null, '1974-10-04 17:21:03.989')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@alltypesorc_string
POSTHOOK: Lineage: alltypesorc_string.cboolean1 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp1 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.ctimestamp2 SCRIPT []
POSTHOOK: Lineage: alltypesorc_string.stimestamp1 SCRIPT []
PREHOOK: query: CREATE TABLE alltypesorc_wrong(stimestamp1 string) STORED AS ORC
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@alltypesorc_wrong
POSTHOOK: query: CREATE TABLE alltypesorc_wrong(stimestamp1 string) STORED AS ORC
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@alltypesorc_wrong
PREHOOK: query: INSERT INTO TABLE alltypesorc_wrong SELECT 'abcd' FROM alltypesorc LIMIT 1
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
PREHOOK: Output: default@alltypesorc_wrong
POSTHOOK: query: INSERT INTO TABLE alltypesorc_wrong SELECT 'abcd' FROM alltypesorc LIMIT 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
POSTHOOK: Output: default@alltypesorc_wrong
POSTHOOK: Lineage: alltypesorc_wrong.stimestamp1 SIMPLE []
PREHOOK: query: INSERT INTO TABLE alltypesorc_wrong SELECT '2000:01:01 00-00-00' FROM alltypesorc LIMIT 1
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
PREHOOK: Output: default@alltypesorc_wrong
POSTHOOK: query: INSERT INTO TABLE alltypesorc_wrong SELECT '2000:01:01 00-00-00' FROM alltypesorc LIMIT 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
POSTHOOK: Output: default@alltypesorc_wrong
POSTHOOK: Lineage: alltypesorc_wrong.stimestamp1 SIMPLE []
PREHOOK: query: INSERT INTO TABLE alltypesorc_wrong SELECT '0000-00-00 99:99:99' FROM alltypesorc LIMIT 1
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
PREHOOK: Output: default@alltypesorc_wrong
POSTHOOK: query: INSERT INTO TABLE alltypesorc_wrong SELECT '0000-00-00 99:99:99' FROM alltypesorc LIMIT 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
POSTHOOK: Output: default@alltypesorc_wrong
POSTHOOK: Lineage: alltypesorc_wrong.stimestamp1 SIMPLE []
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION  SELECT
  to_unix_timestamp(ctimestamp1) AS c1,
  year(ctimestamp1),
  month(ctimestamp1),
  day(ctimestamp1),
  dayofmonth(ctimestamp1),
  weekofyear(ctimestamp1),
  hour(ctimestamp1),
  minute(ctimestamp1),
  second(ctimestamp1),
  cboolean1,
  ctimestamp1,
  ctimestamp2,
  if (cboolean1, ctimestamp1, timestamp '1319-02-02 16:31:57.778'),
  if (cboolean1, timestamp '2000-12-18 08:42:30.0005', ctimestamp1),
  if (cboolean1, ctimestamp1, ctimestamp2),
  if (cboolean1, ctimestamp1, null),
  if (cboolean1, null, ctimestamp2)
FROM alltypesorc_string
ORDER BY c1
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION  SELECT
  to_unix_timestamp(ctimestamp1) AS c1,
  year(ctimestamp1),
  month(ctimestamp1),
  day(ctimestamp1),
  dayofmonth(ctimestamp1),
  weekofyear(ctimestamp1),
  hour(ctimestamp1),
  minute(ctimestamp1),
  second(ctimestamp1),
  cboolean1,
  ctimestamp1,
  ctimestamp2,
  if (cboolean1, ctimestamp1, timestamp '1319-02-02 16:31:57.778'),
  if (cboolean1, timestamp '2000-12-18 08:42:30.0005', ctimestamp1),
  if (cboolean1, ctimestamp1, ctimestamp2),
  if (cboolean1, ctimestamp1, null),
  if (cboolean1, null, ctimestamp2)
FROM alltypesorc_string
ORDER BY c1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (SORT, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc_string
                  Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    expressions: to_unix_timestamp(ctimestamp1) (type: bigint), year(ctimestamp1) (type: int), month(ctimestamp1) (type: int), day(ctimestamp1) (type: int), weekofyear(ctimestamp1) (type: int), hour(ctimestamp1) (type: int), minute(ctimestamp1) (type: int), second(ctimestamp1) (type: int), cboolean1 (type: boolean), ctimestamp1 (type: timestamp), ctimestamp2 (type: timestamp), if(cboolean1, ctimestamp1, TIMESTAMP'1319-02-02 16:31:57.778') (type: timestamp), if(cboolean1, TIMESTAMP'2000-12-18 08:42:30.0005', ctimestamp1) (type: timestamp), if(cboolean1, ctimestamp1, ctimestamp2) (type: timestamp), if(cboolean1, ctimestamp1, null) (type: timestamp), if(cboolean1, null, ctimestamp2) (type: timestamp)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 3, 13, 14, 15, 16, 17]
                        selectExpressions: VectorUDFUnixTimeStampTimestamp(col 1:timestamp) -> 5:bigint, VectorUDFYearTimestamp(col 1:timestamp, field YEAR) -> 6:int, VectorUDFMonthTimestamp(col 1:timestamp, field MONTH) -> 7:int, VectorUDFDayOfMonthTimestamp(col 1:timestamp, field DAY_OF_MONTH) -> 8:int, VectorUDFWeekOfYearTimestamp(col 1:timestamp, field WEEK_OF_YEAR) -> 9:int, VectorUDFHourTimestamp(col 1:timestamp, field HOUR_OF_DAY) -> 10:int, VectorUDFMinuteTimestamp(col 1:timestamp, field MINUTE) -> 11:int, VectorUDFSecondTimestamp(col 1:timestamp, field SECOND) -> 12:int, IfExprTimestampColumnScalar(col 0:boolean, col 1:timestamp, val 1319-01-25 08:31:57.778) -> 13:timestamp, IfExprTimestampScalarColumn(col 0:boolean, val 2000-12-18 00:42:30.0005, col 1:timestamp) -> 14:timestamp, IfExprTimestampColumnColumn(col 0:boolean, col 1:timestampcol 3:timestamp) -> 15:timestamp, IfExprColumnNull(col 0:boolean, col 1:timestamp, null)(children: col 0:boolean, col 1:timestamp) -> 16:timestamp, IfExprNullColumn(col 0:boolean, null, col 3)(children: col 0:boolean, col 3:timestamp) -> 17:timestamp
                    Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: bigint)
                      null sort order: z
                      sort order: +
                      Reduce Sink Vectorization:
                          className: VectorReduceSinkObjectHashOperator
                          native: true
                          nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                      Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: int), _col2 (type: int), _col3 (type: int), _col5 (type: int), _col6 (type: int), _col7 (type: int), _col8 (type: int), _col9 (type: boolean), _col10 (type: timestamp), _col11 (type: timestamp), _col12 (type: timestamp), _col13 (type: timestamp), _col14 (type: timestamp), _col15 (type: timestamp), _col16 (type: timestamp)
            Execution mode: vectorized
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: bigint), VALUE._col0 (type: int), VALUE._col1 (type: int), VALUE._col2 (type: int), VALUE._col2 (type: int), VALUE._col3 (type: int), VALUE._col4 (type: int), VALUE._col5 (type: int), VALUE._col6 (type: int), VALUE._col7 (type: boolean), VALUE._col8 (type: timestamp), VALUE._col9 (type: timestamp), VALUE._col10 (type: timestamp), VALUE._col11 (type: timestamp), VALUE._col12 (type: timestamp), VALUE._col13 (type: timestamp), VALUE._col14 (type: timestamp)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
                Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT
  to_unix_timestamp(ctimestamp1) AS c1,
  year(ctimestamp1),
  month(ctimestamp1),
  day(ctimestamp1),
  dayofmonth(ctimestamp1),
  weekofyear(ctimestamp1),
  hour(ctimestamp1),
  minute(ctimestamp1),
  second(ctimestamp1),
  cboolean1,
  ctimestamp1,
  ctimestamp2,
  if (cboolean1, ctimestamp1, timestamp '1319-02-02 16:31:57.778'),
  if (cboolean1, timestamp '2000-12-18 08:42:30.0005', ctimestamp1),
  if (cboolean1, ctimestamp1, ctimestamp2),
  if (cboolean1, ctimestamp1, null),
  if (cboolean1, null, ctimestamp2)
FROM alltypesorc_string
ORDER BY c1
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
POSTHOOK: query: SELECT
  to_unix_timestamp(ctimestamp1) AS c1,
  year(ctimestamp1),
  month(ctimestamp1),
  day(ctimestamp1),
  dayofmonth(ctimestamp1),
  weekofyear(ctimestamp1),
  hour(ctimestamp1),
  minute(ctimestamp1),
  second(ctimestamp1),
  cboolean1,
  ctimestamp1,
  ctimestamp2,
  if (cboolean1, ctimestamp1, timestamp '1319-02-02 16:31:57.778'),
  if (cboolean1, timestamp '2000-12-18 08:42:30.0005', ctimestamp1),
  if (cboolean1, ctimestamp1, ctimestamp2),
  if (cboolean1, ctimestamp1, null),
  if (cboolean1, null, ctimestamp2)
FROM alltypesorc_string
ORDER BY c1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
-45479173904	528	10	27	27	44	8	15	18	true	0528-10-27 08:15:18.941718273	NULL	0528-10-27 08:15:18.941718273	2000-12-18 08:42:30.0005	0528-10-27 08:15:18.941718273	0528-10-27 08:15:18.941718273	NULL
1632478712	2021	9	24	24	38	3	18	32	NULL	2021-09-24 03:18:32.4	1974-10-04 17:21:03.989	1319-02-02 16:31:57.778	2021-09-24 03:18:32.4	1974-10-04 17:21:03.989	NULL	1974-10-04 17:21:03.989
1632478712	2021	9	24	24	38	3	18	32	false	2021-09-24 03:18:32.4	1999-10-03 16:59:10.396903939	1319-02-02 16:31:57.778	2021-09-24 03:18:32.4	1999-10-03 16:59:10.396903939	NULL	1999-10-03 16:59:10.396903939
1632478712	2021	9	24	24	38	3	18	32	false	2021-09-24 03:18:32.4	2010-04-08 02:43:35.861742727	1319-02-02 16:31:57.778	2021-09-24 03:18:32.4	2010-04-08 02:43:35.861742727	NULL	2010-04-08 02:43:35.861742727
1632478712	2021	9	24	24	38	3	18	32	false	2021-09-24 03:18:32.4	NULL	1319-02-02 16:31:57.778	2021-09-24 03:18:32.4	NULL	NULL	NULL
163809612024	7160	12	2	2	48	6	0	24	NULL	7160-12-02 06:00:24.81200852	1966-08-16 13:36:50.183	1319-02-02 16:31:57.778	7160-12-02 06:00:24.81200852	1966-08-16 13:36:50.183	NULL	1966-08-16 13:36:50.183
163809612024	7160	12	2	2	48	6	0	24	NULL	7160-12-02 06:00:24.81200852	NULL	1319-02-02 16:31:57.778	7160-12-02 06:00:24.81200852	NULL	NULL	NULL
28770	1969	12	31	31	1	23	59	30	NULL	1969-12-31 23:59:30.929	1969-12-31 15:59:55.451	1319-02-02 16:31:57.778	1969-12-31 23:59:30.929	1969-12-31 15:59:55.451	NULL	1969-12-31 15:59:55.451
28770	1969	12	31	31	1	23	59	30	NULL	1969-12-31 23:59:30.929	1969-12-31 15:59:55.451	1319-02-02 16:31:57.778	1969-12-31 23:59:30.929	1969-12-31 15:59:55.451	NULL	1969-12-31 15:59:55.451
28770	1969	12	31	31	1	23	59	30	NULL	1969-12-31 23:59:30.929	1969-12-31 15:59:58.174	1319-02-02 16:31:57.778	1969-12-31 23:59:30.929	1969-12-31 15:59:58.174	NULL	1969-12-31 15:59:58.174
28770	1969	12	31	31	1	23	59	30	NULL	1969-12-31 23:59:30.929	1969-12-31 15:59:58.456	1319-02-02 16:31:57.778	1969-12-31 23:59:30.929	1969-12-31 15:59:58.456	NULL	1969-12-31 15:59:58.456
28783	1969	12	31	31	1	23	59	43	NULL	1969-12-31 23:59:43.628	1969-12-31 15:59:55.451	1319-02-02 16:31:57.778	1969-12-31 23:59:43.628	1969-12-31 15:59:55.451	NULL	1969-12-31 15:59:55.451
28783	1969	12	31	31	1	23	59	43	NULL	1969-12-31 23:59:43.637	1969-12-31 15:59:58.174	1319-02-02 16:31:57.778	1969-12-31 23:59:43.637	1969-12-31 15:59:58.174	NULL	1969-12-31 15:59:58.174
28783	1969	12	31	31	1	23	59	43	NULL	1969-12-31 23:59:43.64	1969-12-31 15:59:58.174	1319-02-02 16:31:57.778	1969-12-31 23:59:43.64	1969-12-31 15:59:58.174	NULL	1969-12-31 15:59:58.174
28783	1969	12	31	31	1	23	59	43	NULL	1969-12-31 23:59:43.661	1969-12-31 15:59:55.451	1319-02-02 16:31:57.778	1969-12-31 23:59:43.661	1969-12-31 15:59:55.451	NULL	1969-12-31 15:59:55.451
28783	1969	12	31	31	1	23	59	43	NULL	1969-12-31 23:59:43.676	1969-12-31 15:59:55.451	1319-02-02 16:31:57.778	1969-12-31 23:59:43.676	1969-12-31 15:59:55.451	NULL	1969-12-31 15:59:55.451
28783	1969	12	31	31	1	23	59	43	NULL	1969-12-31 23:59:43.705	1969-12-31 15:59:58.456	1319-02-02 16:31:57.778	1969-12-31 23:59:43.705	1969-12-31 15:59:58.456	NULL	1969-12-31 15:59:58.456
28783	1969	12	31	31	1	23	59	43	NULL	1969-12-31 23:59:43.709	1969-12-31 15:59:58.456	1319-02-02 16:31:57.778	1969-12-31 23:59:43.709	1969-12-31 15:59:58.456	NULL	1969-12-31 15:59:58.456
28783	1969	12	31	31	1	23	59	43	NULL	1969-12-31 23:59:43.72	1969-12-31 15:59:55.451	1319-02-02 16:31:57.778	1969-12-31 23:59:43.72	1969-12-31 15:59:55.451	NULL	1969-12-31 15:59:55.451
28783	1969	12	31	31	1	23	59	43	NULL	1969-12-31 23:59:43.721	1969-12-31 15:59:58.456	1319-02-02 16:31:57.778	1969-12-31 23:59:43.721	1969-12-31 15:59:58.456	NULL	1969-12-31 15:59:58.456
28783	1969	12	31	31	1	23	59	43	NULL	1969-12-31 23:59:43.749	1969-12-31 15:59:58.174	1319-02-02 16:31:57.778	1969-12-31 23:59:43.749	1969-12-31 15:59:58.174	NULL	1969-12-31 15:59:58.174
28783	1969	12	31	31	1	23	59	43	NULL	1969-12-31 23:59:43.771	1969-12-31 15:59:58.456	1319-02-02 16:31:57.778	1969-12-31 23:59:43.771	1969-12-31 15:59:58.456	NULL	1969-12-31 15:59:58.456
28783	1969	12	31	31	1	23	59	43	NULL	1969-12-31 23:59:43.773	1969-12-31 15:59:55.451	1319-02-02 16:31:57.778	1969-12-31 23:59:43.773	1969-12-31 15:59:55.451	NULL	1969-12-31 15:59:55.451
28783	1969	12	31	31	1	23	59	43	NULL	1969-12-31 23:59:43.782	1969-12-31 15:59:58.174	1319-02-02 16:31:57.778	1969-12-31 23:59:43.782	1969-12-31 15:59:58.174	NULL	1969-12-31 15:59:58.174
28783	1969	12	31	31	1	23	59	43	NULL	1969-12-31 23:59:43.783	1969-12-31 15:59:55.451	1319-02-02 16:31:57.778	1969-12-31 23:59:43.783	1969-12-31 15:59:55.451	NULL	1969-12-31 15:59:55.451
28783	1969	12	31	31	1	23	59	43	NULL	1969-12-31 23:59:43.807	1969-12-31 15:59:58.174	1319-02-02 16:31:57.778	1969-12-31 23:59:43.807	1969-12-31 15:59:58.174	NULL	1969-12-31 15:59:58.174
28783	1969	12	31	31	1	23	59	43	NULL	1969-12-31 23:59:43.82	1969-12-31 15:59:58.174	1319-02-02 16:31:57.778	1969-12-31 23:59:43.82	1969-12-31 15:59:58.174	NULL	1969-12-31 15:59:58.174
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.619	1969-12-31 16:00:14.793	1969-12-31 23:59:43.619	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.619	1969-12-31 23:59:43.619	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.627	1969-12-31 16:00:03.679	1969-12-31 23:59:43.627	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.627	1969-12-31 23:59:43.627	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.631	1969-12-31 16:00:06.612	1969-12-31 23:59:43.631	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.631	1969-12-31 23:59:43.631	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.642	1969-12-31 16:00:04.424	1969-12-31 23:59:43.642	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.642	1969-12-31 23:59:43.642	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.643	1969-12-31 16:00:11.764	1969-12-31 23:59:43.643	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.643	1969-12-31 23:59:43.643	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.645	1969-12-31 16:00:00.077	1969-12-31 23:59:43.645	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.645	1969-12-31 23:59:43.645	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.661	1969-12-31 15:59:58.732	1969-12-31 23:59:43.661	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.661	1969-12-31 23:59:43.661	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.689	1969-12-31 15:59:46.848	1969-12-31 23:59:43.689	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.689	1969-12-31 23:59:43.689	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.695	1969-12-31 16:00:06.867	1969-12-31 23:59:43.695	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.695	1969-12-31 23:59:43.695	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.707	1969-12-31 15:59:56.965	1969-12-31 23:59:43.707	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.707	1969-12-31 23:59:43.707	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.71	1969-12-31 16:00:00.687	1969-12-31 23:59:43.71	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.71	1969-12-31 23:59:43.71	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.723	1969-12-31 16:00:03.375	1969-12-31 23:59:43.723	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.723	1969-12-31 23:59:43.723	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.745	1969-12-31 16:00:04.052	1969-12-31 23:59:43.745	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.745	1969-12-31 23:59:43.745	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.764	1969-12-31 16:00:10.52	1969-12-31 23:59:43.764	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.764	1969-12-31 23:59:43.764	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.775	1969-12-31 15:59:48.003	1969-12-31 23:59:43.775	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.775	1969-12-31 23:59:43.775	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.779	1969-12-31 15:59:53.274	1969-12-31 23:59:43.779	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.779	1969-12-31 23:59:43.779	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.785	1969-12-31 16:00:14.096	1969-12-31 23:59:43.785	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.785	1969-12-31 23:59:43.785	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.792	1969-12-31 15:59:52.041	1969-12-31 23:59:43.792	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.792	1969-12-31 23:59:43.792	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.793	1969-12-31 15:59:56.316	1969-12-31 23:59:43.793	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.793	1969-12-31 23:59:43.793	NULL
28783	1969	12	31	31	1	23	59	43	true	1969-12-31 23:59:43.811	1969-12-31 16:00:00.479	1969-12-31 23:59:43.811	2000-12-18 08:42:30.0005	1969-12-31 23:59:43.811	1969-12-31 23:59:43.811	NULL
490725011	1985	7	20	20	29	9	30	11	true	1985-07-20 09:30:11	1319-02-02 16:31:57.778	1985-07-20 09:30:11	2000-12-18 08:42:30.0005	1985-07-20 09:30:11	1985-07-20 09:30:11	NULL
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	1319-02-02 16:31:57.778	NULL	NULL	NULL	NULL
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	false	NULL	NULL	1319-02-02 16:31:57.778	NULL	NULL	NULL	NULL
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	true	NULL	2024-11-11 16:42:41.101	NULL	2000-12-18 08:42:30.0005	NULL	NULL	NULL
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	true	NULL	NULL	NULL	2000-12-18 08:42:30.0005	NULL	NULL	NULL
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION  SELECT
  to_unix_timestamp(stimestamp1) AS c1,
  year(stimestamp1),
  month(stimestamp1),
  day(stimestamp1),
  dayofmonth(stimestamp1),
  weekofyear(stimestamp1),
  hour(stimestamp1),
  minute(stimestamp1),
  second(stimestamp1)
FROM alltypesorc_string
ORDER BY c1
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION  SELECT
  to_unix_timestamp(stimestamp1) AS c1,
  year(stimestamp1),
  month(stimestamp1),
  day(stimestamp1),
  dayofmonth(stimestamp1),
  weekofyear(stimestamp1),
  hour(stimestamp1),
  minute(stimestamp1),
  second(stimestamp1)
FROM alltypesorc_string
ORDER BY c1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (SORT, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc_string
                  Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    expressions: to_unix_timestamp(stimestamp1) (type: bigint), year(CAST( stimestamp1 AS DATE)) (type: int), month(CAST( stimestamp1 AS DATE)) (type: int), day(CAST( stimestamp1 AS DATE)) (type: int), day(stimestamp1) (type: int), weekofyear(CAST( stimestamp1 AS DATE)) (type: int), hour(CAST( stimestamp1 AS TIMESTAMP)) (type: int), minute(CAST( stimestamp1 AS TIMESTAMP)) (type: int), second(CAST( stimestamp1 AS TIMESTAMP)) (type: int)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [5, 7, 9, 11, 12, 14, 16, 18, 20]
                        selectExpressions: VectorUDFUnixTimeStampString(col 2:string) -> 5:bigint, VectorUDFYearDate(col 6, field YEAR)(children: CastStringToDate(col 2:string) -> 6:date) -> 7:int, VectorUDFMonthDate(col 8, field MONTH)(children: CastStringToDate(col 2:string) -> 8:date) -> 9:int, VectorUDFDayOfMonthDate(col 10, field DAY_OF_MONTH)(children: CastStringToDate(col 2:string) -> 10:date) -> 11:int, VectorUDFDayOfMonthString(col 2:string, fieldStart 8, fieldLength 2) -> 12:int, VectorUDFWeekOfYearDate(col 13, field WEEK_OF_YEAR)(children: CastStringToDate(col 2:string) -> 13:date) -> 14:int, VectorUDFHourTimestamp(col 15:timestamp, field HOUR_OF_DAY)(children: CastStringToTimestamp(col 2:string) -> 15:timestamp) -> 16:int, VectorUDFMinuteTimestamp(col 17:timestamp, field MINUTE)(children: CastStringToTimestamp(col 2:string) -> 17:timestamp) -> 18:int, VectorUDFSecondTimestamp(col 19:timestamp, field SECOND)(children: CastStringToTimestamp(col 2:string) -> 19:timestamp) -> 20:int
                    Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: bigint)
                      null sort order: z
                      sort order: +
                      Reduce Sink Vectorization:
                          className: VectorReduceSinkObjectHashOperator
                          native: true
                          nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                      Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: int), _col2 (type: int), _col3 (type: int), _col4 (type: int), _col5 (type: int), _col6 (type: int), _col7 (type: int), _col8 (type: int)
            Execution mode: vectorized
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: bigint), VALUE._col0 (type: int), VALUE._col1 (type: int), VALUE._col2 (type: int), VALUE._col3 (type: int), VALUE._col4 (type: int), VALUE._col5 (type: int), VALUE._col6 (type: int), VALUE._col7 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8]
                Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT
  to_unix_timestamp(stimestamp1) AS c1,
  year(stimestamp1),
  month(stimestamp1),
  day(stimestamp1),
  dayofmonth(stimestamp1),
  weekofyear(stimestamp1),
  hour(stimestamp1),
  minute(stimestamp1),
  second(stimestamp1)
FROM alltypesorc_string
ORDER BY c1
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
POSTHOOK: query: SELECT
  to_unix_timestamp(stimestamp1) AS c1,
  year(stimestamp1),
  month(stimestamp1),
  day(stimestamp1),
  dayofmonth(stimestamp1),
  weekofyear(stimestamp1),
  hour(stimestamp1),
  minute(stimestamp1),
  second(stimestamp1)
FROM alltypesorc_string
ORDER BY c1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
-2736243926	1883	4	17	17	16	4	14	34
-62018170411	4	9	22	22	39	18	26	29
1365579826	2013	4	10	10	15	0	43	46
206731024925	8521	1	16	16	3	20	42	5
271201265	1978	8	5	5	31	14	41	5
28770	1969	12	31	31	1	23	59	30
28770	1969	12	31	31	1	23	59	30
28770	1969	12	31	31	1	23	59	30
28770	1969	12	31	31	1	23	59	30
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
28783	1969	12	31	31	1	23	59	43
501208674	1985	11	18	18	47	16	37	54
501208674	1985	11	18	18	47	16	37	54
94573848655	4966	12	4	4	49	9	30	55
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION  SELECT
  to_unix_timestamp(ctimestamp1) = to_unix_timestamp(stimestamp1) AS c1,
  year(ctimestamp1) = year(stimestamp1),
  month(ctimestamp1) = month(stimestamp1),
  day(ctimestamp1) = day(stimestamp1),
  dayofmonth(ctimestamp1) = dayofmonth(stimestamp1),
  weekofyear(ctimestamp1) = weekofyear(stimestamp1),
  hour(ctimestamp1) = hour(stimestamp1),
  minute(ctimestamp1) = minute(stimestamp1),
  second(ctimestamp1) = second(stimestamp1)
FROM alltypesorc_string
ORDER BY c1
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION  SELECT
  to_unix_timestamp(ctimestamp1) = to_unix_timestamp(stimestamp1) AS c1,
  year(ctimestamp1) = year(stimestamp1),
  month(ctimestamp1) = month(stimestamp1),
  day(ctimestamp1) = day(stimestamp1),
  dayofmonth(ctimestamp1) = dayofmonth(stimestamp1),
  weekofyear(ctimestamp1) = weekofyear(stimestamp1),
  hour(ctimestamp1) = hour(stimestamp1),
  minute(ctimestamp1) = minute(stimestamp1),
  second(ctimestamp1) = second(stimestamp1)
FROM alltypesorc_string
ORDER BY c1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (SORT, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc_string
                  Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    expressions: (to_unix_timestamp(ctimestamp1) = to_unix_timestamp(stimestamp1)) (type: boolean), (year(ctimestamp1) = year(CAST( stimestamp1 AS DATE))) (type: boolean), (month(ctimestamp1) = month(CAST( stimestamp1 AS DATE))) (type: boolean), (day(ctimestamp1) = day(CAST( stimestamp1 AS DATE))) (type: boolean), (day(ctimestamp1) = day(stimestamp1)) (type: boolean), (weekofyear(ctimestamp1) = weekofyear(CAST( stimestamp1 AS DATE))) (type: boolean), (hour(ctimestamp1) = hour(CAST( stimestamp1 AS TIMESTAMP))) (type: boolean), (minute(ctimestamp1) = minute(CAST( stimestamp1 AS TIMESTAMP))) (type: boolean), (second(ctimestamp1) = second(CAST( stimestamp1 AS TIMESTAMP))) (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [7, 11, 15, 19, 22, 26, 30, 34, 38]
                        selectExpressions: LongColEqualLongColumn(col 5:bigint, col 6:bigint)(children: VectorUDFUnixTimeStampTimestamp(col 1:timestamp) -> 5:bigint, VectorUDFUnixTimeStampString(col 2:string) -> 6:bigint) -> 7:boolean, LongColEqualLongColumn(col 8:int, col 10:int)(children: VectorUDFYearTimestamp(col 1:timestamp, field YEAR) -> 8:int, VectorUDFYearDate(col 9, field YEAR)(children: CastStringToDate(col 2:string) -> 9:date) -> 10:int) -> 11:boolean, LongColEqualLongColumn(col 12:int, col 14:int)(children: VectorUDFMonthTimestamp(col 1:timestamp, field MONTH) -> 12:int, VectorUDFMonthDate(col 13, field MONTH)(children: CastStringToDate(col 2:string) -> 13:date) -> 14:int) -> 15:boolean, LongColEqualLongColumn(col 16:int, col 18:int)(children: VectorUDFDayOfMonthTimestamp(col 1:timestamp, field DAY_OF_MONTH) -> 16:int, VectorUDFDayOfMonthDate(col 17, field DAY_OF_MONTH)(children: CastStringToDate(col 2:string) -> 17:date) -> 18:int) -> 19:boolean, LongColEqualLongColumn(col 20:int, col 21:int)(children: VectorUDFDayOfMonthTimestamp(col 1:timestamp, field DAY_OF_MONTH) -> 20:int, VectorUDFDayOfMonthString(col 2:string, fieldStart 8, fieldLength 2) -> 21:int) -> 22:boolean, LongColEqualLongColumn(col 23:int, col 25:int)(children: VectorUDFWeekOfYearTimestamp(col 1:timestamp, field WEEK_OF_YEAR) -> 23:int, VectorUDFWeekOfYearDate(col 24, field WEEK_OF_YEAR)(children: CastStringToDate(col 2:string) -> 24:date) -> 25:int) -> 26:boolean, LongColEqualLongColumn(col 27:int, col 29:int)(children: VectorUDFHourTimestamp(col 1:timestamp, field HOUR_OF_DAY) -> 27:int, VectorUDFHourTimestamp(col 28:timestamp, field HOUR_OF_DAY)(children: CastStringToTimestamp(col 2:string) -> 28:timestamp) -> 29:int) -> 30:boolean, LongColEqualLongColumn(col 31:int, col 33:int)(children: VectorUDFMinuteTimestamp(col 1:timestamp, field MINUTE) -> 31:int, VectorUDFMinuteTimestamp(col 32:timestamp, field MINUTE)(children: CastStringToTimestamp(col 2:string) -> 32:timestamp) -> 33:int) -> 34:boolean, LongColEqualLongColumn(col 35:int, col 37:int)(children: VectorUDFSecondTimestamp(col 1:timestamp, field SECOND) -> 35:int, VectorUDFSecondTimestamp(col 36:timestamp, field SECOND)(children: CastStringToTimestamp(col 2:string) -> 36:timestamp) -> 37:int) -> 38:boolean
                    Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: boolean)
                      null sort order: z
                      sort order: +
                      Reduce Sink Vectorization:
                          className: VectorReduceSinkObjectHashOperator
                          native: true
                          nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                      Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: boolean), _col2 (type: boolean), _col3 (type: boolean), _col4 (type: boolean), _col5 (type: boolean), _col6 (type: boolean), _col7 (type: boolean), _col8 (type: boolean)
            Execution mode: vectorized
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: boolean), VALUE._col0 (type: boolean), VALUE._col1 (type: boolean), VALUE._col2 (type: boolean), VALUE._col3 (type: boolean), VALUE._col4 (type: boolean), VALUE._col5 (type: boolean), VALUE._col6 (type: boolean), VALUE._col7 (type: boolean)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8]
                Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT
  to_unix_timestamp(ctimestamp1) = to_unix_timestamp(stimestamp1) AS c1,
  year(ctimestamp1) = year(stimestamp1),
  month(ctimestamp1) = month(stimestamp1),
  day(ctimestamp1) = day(stimestamp1),
  dayofmonth(ctimestamp1) = dayofmonth(stimestamp1),
  weekofyear(ctimestamp1) = weekofyear(stimestamp1),
  hour(ctimestamp1) = hour(stimestamp1),
  minute(ctimestamp1) = minute(stimestamp1),
  second(ctimestamp1) = second(stimestamp1)
FROM alltypesorc_string
ORDER BY c1
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
POSTHOOK: query: SELECT
  to_unix_timestamp(ctimestamp1) = to_unix_timestamp(stimestamp1) AS c1,
  year(ctimestamp1) = year(stimestamp1),
  month(ctimestamp1) = month(stimestamp1),
  day(ctimestamp1) = day(stimestamp1),
  dayofmonth(ctimestamp1) = dayofmonth(stimestamp1),
  weekofyear(ctimestamp1) = weekofyear(stimestamp1),
  hour(ctimestamp1) = hour(stimestamp1),
  minute(ctimestamp1) = minute(stimestamp1),
  second(ctimestamp1) = second(stimestamp1)
FROM alltypesorc_string
ORDER BY c1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
false	false	false	false	false	false	false	false	false
false	false	false	false	false	false	false	false	false
false	false	false	false	false	false	false	false	false
false	false	false	false	false	false	false	false	false
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
true	true	true	true	true	true	true	true	true
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION  SELECT
  to_unix_timestamp(stimestamp1) AS c1,
  year(stimestamp1),
  month(stimestamp1),
  day(stimestamp1),
  dayofmonth(stimestamp1),
  weekofyear(stimestamp1),
  hour(stimestamp1),
  minute(stimestamp1),
  second(stimestamp1)
FROM alltypesorc_wrong
ORDER BY c1
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc_wrong
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION  SELECT
  to_unix_timestamp(stimestamp1) AS c1,
  year(stimestamp1),
  month(stimestamp1),
  day(stimestamp1),
  dayofmonth(stimestamp1),
  weekofyear(stimestamp1),
  hour(stimestamp1),
  minute(stimestamp1),
  second(stimestamp1)
FROM alltypesorc_wrong
ORDER BY c1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc_wrong
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (SORT, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc_wrong
                  Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    expressions: to_unix_timestamp(stimestamp1) (type: bigint), year(CAST( stimestamp1 AS DATE)) (type: int), month(CAST( stimestamp1 AS DATE)) (type: int), day(CAST( stimestamp1 AS DATE)) (type: int), day(stimestamp1) (type: int), weekofyear(CAST( stimestamp1 AS DATE)) (type: int), hour(CAST( stimestamp1 AS TIMESTAMP)) (type: int), minute(CAST( stimestamp1 AS TIMESTAMP)) (type: int), second(CAST( stimestamp1 AS TIMESTAMP)) (type: int)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [2, 4, 6, 8, 9, 11, 13, 15, 17]
                        selectExpressions: VectorUDFUnixTimeStampString(col 0:string) -> 2:bigint, VectorUDFYearDate(col 3, field YEAR)(children: CastStringToDate(col 0:string) -> 3:date) -> 4:int, VectorUDFMonthDate(col 5, field MONTH)(children: CastStringToDate(col 0:string) -> 5:date) -> 6:int, VectorUDFDayOfMonthDate(col 7, field DAY_OF_MONTH)(children: CastStringToDate(col 0:string) -> 7:date) -> 8:int, VectorUDFDayOfMonthString(col 0:string, fieldStart 8, fieldLength 2) -> 9:int, VectorUDFWeekOfYearDate(col 10, field WEEK_OF_YEAR)(children: CastStringToDate(col 0:string) -> 10:date) -> 11:int, VectorUDFHourTimestamp(col 12:timestamp, field HOUR_OF_DAY)(children: CastStringToTimestamp(col 0:string) -> 12:timestamp) -> 13:int, VectorUDFMinuteTimestamp(col 14:timestamp, field MINUTE)(children: CastStringToTimestamp(col 0:string) -> 14:timestamp) -> 15:int, VectorUDFSecondTimestamp(col 16:timestamp, field SECOND)(children: CastStringToTimestamp(col 0:string) -> 16:timestamp) -> 17:int
                    Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: bigint)
                      null sort order: z
                      sort order: +
                      Reduce Sink Vectorization:
                          className: VectorReduceSinkObjectHashOperator
                          native: true
                          nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                      Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col1 (type: int), _col2 (type: int), _col3 (type: int), _col4 (type: int), _col5 (type: int), _col6 (type: int), _col7 (type: int), _col8 (type: int)
            Execution mode: vectorized
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: true
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: bigint), VALUE._col0 (type: int), VALUE._col1 (type: int), VALUE._col2 (type: int), VALUE._col3 (type: int), VALUE._col4 (type: int), VALUE._col5 (type: int), VALUE._col6 (type: int), VALUE._col7 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                Select Vectorization:
                    className: VectorSelectOperator
                    native: true
                    projectedOutputColumnNums: [0, 1, 2, 3, 4, 5, 6, 7, 8]
                Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 3 Data size: 294 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT
  to_unix_timestamp(stimestamp1) AS c1,
  year(stimestamp1),
  month(stimestamp1),
  day(stimestamp1),
  dayofmonth(stimestamp1),
  weekofyear(stimestamp1),
  hour(stimestamp1),
  minute(stimestamp1),
  second(stimestamp1)
FROM alltypesorc_wrong
ORDER BY c1
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc_wrong
#### A masked pattern was here ####
POSTHOOK: query: SELECT
  to_unix_timestamp(stimestamp1) AS c1,
  year(stimestamp1),
  month(stimestamp1),
  day(stimestamp1),
  dayofmonth(stimestamp1),
  weekofyear(stimestamp1),
  hour(stimestamp1),
  minute(stimestamp1),
  second(stimestamp1)
FROM alltypesorc_wrong
ORDER BY c1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc_wrong
#### A masked pattern was here ####
NULL	2	11	30	NULL	48	4	40	39
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION  SELECT
  min(ctimestamp1),
  max(ctimestamp1),
  count(ctimestamp1),
  count(*)
FROM alltypesorc_string
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION  SELECT
  min(ctimestamp1),
  max(ctimestamp1),
  count(ctimestamp1),
  count(*)
FROM alltypesorc_string
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (GROUP, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc_string
                  Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    expressions: ctimestamp1 (type: timestamp)
                    outputColumnNames: ctimestamp1
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [1]
                    Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: min(ctimestamp1), max(ctimestamp1), count(ctimestamp1), count()
                      Group By Vectorization:
                          aggregators: VectorUDAFMinTimestamp(col 1:timestamp) -> timestamp, VectorUDAFMaxTimestamp(col 1:timestamp) -> timestamp, VectorUDAFCount(col 1:timestamp) -> bigint, VectorUDAFCountStar(*) -> bigint
                          className: VectorGroupByOperator
                          groupByMode: HASH
                          native: false
                          vectorProcessingMode: HASH
                          projectedOutputColumnNums: [0, 1, 2, 3]
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkEmptyKeyOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: timestamp), _col1 (type: timestamp), _col2 (type: bigint), _col3 (type: bigint)
            Execution mode: vectorized
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: min(VALUE._col0), max(VALUE._col1), count(VALUE._col2), count(VALUE._col3)
                Group By Vectorization:
                    aggregators: VectorUDAFMinTimestamp(col 0:timestamp) -> timestamp, VectorUDAFMaxTimestamp(col 1:timestamp) -> timestamp, VectorUDAFCountMerge(col 2:bigint) -> bigint, VectorUDAFCountMerge(col 3:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1, 2, 3]
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  File Sink Vectorization:
                      className: VectorFileSinkOperator
                      native: false
                  Statistics: Num rows: 1 Data size: 96 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT
  min(ctimestamp1),
  max(ctimestamp1),
  count(ctimestamp1),
  count(*)
FROM alltypesorc_string
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
POSTHOOK: query: SELECT
  min(ctimestamp1),
  max(ctimestamp1),
  count(ctimestamp1),
  count(*)
FROM alltypesorc_string
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
0528-10-27 08:15:18.941718273	7160-12-02 06:00:24.81200852	48	52
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION  SELECT
  round(sum(ctimestamp1), 3)
FROM alltypesorc_string
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION  SELECT
  round(sum(ctimestamp1), 3)
FROM alltypesorc_string
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (GROUP, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc_string
                  Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    expressions: ctimestamp1 (type: timestamp)
                    outputColumnNames: ctimestamp1
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [1]
                    Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: sum(ctimestamp1)
                      Group By Vectorization:
                          aggregators: VectorUDAFSumTimestamp(col 1:timestamp) -> double
                          className: VectorGroupByOperator
                          groupByMode: HASH
                          native: false
                          vectorProcessingMode: HASH
                          projectedOutputColumnNums: [0]
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkEmptyKeyOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: double)
            Execution mode: vectorized
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                Group By Vectorization:
                    aggregators: VectorUDAFSumDouble(col 0:double) -> double
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0]
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: round(_col0, 3) (type: double)
                  outputColumnNames: _col0
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [1]
                      selectExpressions: RoundWithNumDigitsDoubleToDouble(col 0, decimalPlaces 3) -> 1:double
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT
 round(sum(ctimestamp1), 3)
FROM alltypesorc_string
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
POSTHOOK: query: SELECT
 round(sum(ctimestamp1), 3)
FROM alltypesorc_string
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
2.891604773267E11
PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION  SELECT
  round(avg(ctimestamp1), 0),
  variance(ctimestamp1) between 8.97077295279421E19 and 8.97077295279422E19,
  var_pop(ctimestamp1) between 8.97077295279421E19 and 8.97077295279422E19,
  var_samp(ctimestamp1) between 9.20684592523616E19 and 9.20684592523617E19,
  round(std(ctimestamp1), 3),
  round(stddev(ctimestamp1), 3),
  round(stddev_pop(ctimestamp1), 3),
  round(stddev_samp(ctimestamp1), 3)
FROM alltypesorc_string
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION EXPRESSION  SELECT
  round(avg(ctimestamp1), 0),
  variance(ctimestamp1) between 8.97077295279421E19 and 8.97077295279422E19,
  var_pop(ctimestamp1) between 8.97077295279421E19 and 8.97077295279422E19,
  var_samp(ctimestamp1) between 9.20684592523616E19 and 9.20684592523617E19,
  round(std(ctimestamp1), 3),
  round(stddev(ctimestamp1), 3),
  round(stddev_pop(ctimestamp1), 3),
  round(stddev_samp(ctimestamp1), 3)
FROM alltypesorc_string
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (GROUP, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc_string
                  Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                  TableScan Vectorization:
                      native: true
                  Select Operator
                    expressions: ctimestamp1 (type: timestamp), UDFToDouble(ctimestamp1) (type: double), (UDFToDouble(ctimestamp1) * UDFToDouble(ctimestamp1)) (type: double)
                    outputColumnNames: _col0, _col1, _col2
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [1, 5, 8]
                        selectExpressions: CastTimestampToDouble(col 1:timestamp) -> 5:double, DoubleColMultiplyDoubleColumn(col 6:double, col 7:double)(children: CastTimestampToDouble(col 1:timestamp) -> 6:double, CastTimestampToDouble(col 1:timestamp) -> 7:double) -> 8:double
                    Statistics: Num rows: 52 Data size: 8979 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: sum(_col0), count(_col0), sum(_col2), sum(_col1)
                      Group By Vectorization:
                          aggregators: VectorUDAFSumTimestamp(col 1:timestamp) -> double, VectorUDAFCount(col 1:timestamp) -> bigint, VectorUDAFSumDouble(col 8:double) -> double, VectorUDAFSumDouble(col 5:double) -> double
                          className: VectorGroupByOperator
                          groupByMode: HASH
                          native: false
                          vectorProcessingMode: HASH
                          projectedOutputColumnNums: [0, 1, 2, 3]
                      minReductionHashAggr: 0.99
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 1 Data size: 32 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkEmptyKeyOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                        Statistics: Num rows: 1 Data size: 32 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: double), _col1 (type: bigint), _col2 (type: double), _col3 (type: double)
            Execution mode: vectorized
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
        Reducer 2 
            Execution mode: vectorized
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1), sum(VALUE._col2), sum(VALUE._col3)
                Group By Vectorization:
                    aggregators: VectorUDAFSumDouble(col 0:double) -> double, VectorUDAFCountMerge(col 1:bigint) -> bigint, VectorUDAFSumDouble(col 2:double) -> double, VectorUDAFSumDouble(col 3:double) -> double
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1, 2, 3]
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 1 Data size: 32 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: round((_col0 / _col1), 0) (type: double), ((_col2 - ((_col3 * _col3) / _col1)) / _col1) BETWEEN 8.97077295279421E19D AND 8.97077295279422E19D (type: boolean), ((_col2 - ((_col3 * _col3) / _col1)) / _col1) BETWEEN 8.97077295279421E19D AND 8.97077295279422E19D (type: boolean), ((_col2 - ((_col3 * _col3) / _col1)) / CASE WHEN ((_col1 = 1L)) THEN (null) ELSE ((_col1 - 1)) END) BETWEEN 9.20684592523616E19D AND 9.20684592523617E19D (type: boolean), round(power(((_col2 - ((_col3 * _col3) / _col1)) / _col1), 0.5), 3) (type: double), round(power(((_col2 - ((_col3 * _col3) / _col1)) / _col1), 0.5), 3) (type: double), round(power(((_col2 - ((_col3 * _col3) / _col1)) / _col1), 0.5), 3) (type: double), round(power(((_col2 - ((_col3 * _col3) / _col1)) / CASE WHEN ((_col1 = 1L)) THEN (null) ELSE ((_col1 - 1)) END), 0.5), 3) (type: double)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [5, 10, 15, 23, 29, 35, 41, 50]
                      selectExpressions: RoundWithNumDigitsDoubleToDouble(col 4, decimalPlaces 0)(children: DoubleColDivideLongColumn(col 0:double, col 1:bigint) -> 4:double) -> 5:double, DoubleColumnBetween(col 9:double, left 8.97077295279421E19, right 8.97077295279422E19)(children: DoubleColDivideLongColumn(col 8:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 7:double)(children: DoubleColDivideLongColumn(col 6:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 6:double) -> 7:double) -> 8:double) -> 9:double) -> 10:boolean, DoubleColumnBetween(col 14:double, left 8.97077295279421E19, right 8.97077295279422E19)(children: DoubleColDivideLongColumn(col 13:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 12:double)(children: DoubleColDivideLongColumn(col 11:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 11:double) -> 12:double) -> 13:double) -> 14:double) -> 15:boolean, DoubleColumnBetween(col 22:double, left 9.20684592523616E19, right 9.20684592523617E19)(children: DoubleColDivideLongColumn(col 18:double, col 21:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 17:double)(children: DoubleColDivideLongColumn(col 16:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 16:double) -> 17:double) -> 18:double, IfExprNullCondExpr(col 19:boolean, null, col 20:bigint)(children: LongColEqualLongScalar(col 1:bigint, val 1) -> 19:boolean, LongColSubtractLongScalar(col 1:bigint, val 1) -> 20:bigint) -> 21:bigint) -> 22:double) -> 23:boolean, RoundWithNumDigitsDoubleToDouble(col 28, decimalPlaces 3)(children: FuncPowerDoubleToDouble(col 27:double)(children: DoubleColDivideLongColumn(col 26:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 25:double)(children: DoubleColDivideLongColumn(col 24:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 24:double) -> 25:double) -> 26:double) -> 27:double) -> 28:double) -> 29:double, RoundWithNumDigitsDoubleToDouble(col 34, decimalPlaces 3)(children: FuncPowerDoubleToDouble(col 33:double)(children: DoubleColDivideLongColumn(col 32:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 31:double)(children: DoubleColDivideLongColumn(col 30:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 30:double) -> 31:double) -> 32:double) -> 33:double) -> 34:double) -> 35:double, RoundWithNumDigitsDoubleToDouble(col 40, decimalPlaces 3)(children: FuncPowerDoubleToDouble(col 39:double)(children: DoubleColDivideLongColumn(col 38:double, col 1:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 37:double)(children: DoubleColDivideLongColumn(col 36:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 36:double) -> 37:double) -> 38:double) -> 39:double) -> 40:double) -> 41:double, RoundWithNumDigitsDoubleToDouble(col 49, decimalPlaces 3)(children: FuncPowerDoubleToDouble(col 48:double)(children: DoubleColDivideLongColumn(col 44:double, col 47:bigint)(children: DoubleColSubtractDoubleColumn(col 2:double, col 43:double)(children: DoubleColDivideLongColumn(col 42:double, col 1:bigint)(children: DoubleColMultiplyDoubleColumn(col 3:double, col 3:double) -> 42:double) -> 43:double) -> 44:double, IfExprNullCondExpr(col 45:boolean, null, col 46:bigint)(children: LongColEqualLongScalar(col 1:bigint, val 1) -> 45:boolean, LongColSubtractLongScalar(col 1:bigint, val 1) -> 46:bigint) -> 47:bigint) -> 48:double) -> 49:double) -> 50:double
                  Statistics: Num rows: 1 Data size: 32 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 1 Data size: 32 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT
  round(avg(ctimestamp1), 0),
  variance(ctimestamp1) between 8.97077295279421E19 and 8.97077295279422E19,
  var_pop(ctimestamp1) between 8.97077295279421E19 and 8.97077295279422E19,
  var_samp(ctimestamp1) between 9.20684592523616E19 and 9.20684592523617E19,
  round(std(ctimestamp1), 3),
  round(stddev(ctimestamp1), 3),
  round(stddev_pop(ctimestamp1), 3),
  round(stddev_samp(ctimestamp1), 3)
FROM alltypesorc_string
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
POSTHOOK: query: SELECT
  round(avg(ctimestamp1), 0),
  variance(ctimestamp1) between 8.97077295279421E19 and 8.97077295279422E19,
  var_pop(ctimestamp1) between 8.97077295279421E19 and 8.97077295279422E19,
  var_samp(ctimestamp1) between 9.20684592523616E19 and 9.20684592523617E19,
  round(std(ctimestamp1), 3),
  round(stddev(ctimestamp1), 3),
  round(stddev_pop(ctimestamp1), 3),
  round(stddev_samp(ctimestamp1), 3)
FROM alltypesorc_string
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc_string
#### A masked pattern was here ####
6.024176611E9	false	false	false	3.3542405863247E10	3.3542405863247E10	3.3542405863247E10	3.3897361841912E10
