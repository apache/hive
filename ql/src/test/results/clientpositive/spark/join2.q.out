PREHOOK: query: CREATE TABLE dest_j2(key INT, value STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@dest_j2
POSTHOOK: query: CREATE TABLE dest_j2(key INT, value STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@dest_j2
PREHOOK: query: EXPLAIN
FROM src src1 JOIN src src2 ON (src1.key = src2.key) JOIN src src3 ON (src1.key + src2.key = src3.key)
INSERT OVERWRITE TABLE dest_j2 SELECT src1.key, src3.value
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
FROM src src1 JOIN src src2 ON (src1.key = src2.key) JOIN src src3 ON (src1.key + src2.key = src3.key)
INSERT OVERWRITE TABLE dest_j2 SELECT src1.key, src3.value
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1
  Stage-2 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (PARTITION-LEVEL SORT, 2), Map 4 (PARTITION-LEVEL SORT, 2)
        Reducer 3 <- Map 5 (PARTITION-LEVEL SORT, 2), Reducer 2 (PARTITION-LEVEL SORT, 2)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src1
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: key is not null (type: boolean)
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: string)
                      outputColumnNames: _col0
                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: src2
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: key is not null (type: boolean)
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: string)
                      outputColumnNames: _col0
                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: src3
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: key is not null (type: boolean)
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: string), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: UDFToDouble(_col0) (type: double)
                        sort order: +
                        Map-reduce partition columns: UDFToDouble(_col0) (type: double)
                        Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col1 (type: string)
        Reducer 2 
            Reduce Operator Tree:
              Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: string)
                  1 _col0 (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 550 Data size: 5843 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: (UDFToDouble(_col0) + UDFToDouble(_col1)) (type: double)
                  sort order: +
                  Map-reduce partition columns: (UDFToDouble(_col0) + UDFToDouble(_col1)) (type: double)
                  Statistics: Num rows: 550 Data size: 5843 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: string)
        Reducer 3 
            Reduce Operator Tree:
              Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 (UDFToDouble(_col0) + UDFToDouble(_col1)) (type: double)
                  1 UDFToDouble(_col0) (type: double)
                outputColumnNames: _col0, _col3
                Statistics: Num rows: 605 Data size: 6427 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: UDFToInteger(_col0) (type: int), _col3 (type: string)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 605 Data size: 6427 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 605 Data size: 6427 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        name: default.dest_j2

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.dest_j2

  Stage: Stage-2
    Stats-Aggr Operator

PREHOOK: query: FROM src src1 JOIN src src2 ON (src1.key = src2.key) JOIN src src3 ON (src1.key + src2.key = src3.key)
INSERT OVERWRITE TABLE dest_j2 SELECT src1.key, src3.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest_j2
POSTHOOK: query: FROM src src1 JOIN src src2 ON (src1.key = src2.key) JOIN src src3 ON (src1.key + src2.key = src3.key)
INSERT OVERWRITE TABLE dest_j2 SELECT src1.key, src3.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest_j2
POSTHOOK: Lineage: dest_j2.key EXPRESSION [(src)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest_j2.value SIMPLE [(src)src3.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: SELECT dest_j2.* FROM dest_j2
PREHOOK: type: QUERY
PREHOOK: Input: default@dest_j2
#### A masked pattern was here ####
POSTHOOK: query: SELECT dest_j2.* FROM dest_j2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest_j2
#### A masked pattern was here ####
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
10	val_20
100	val_200
100	val_200
100	val_200
100	val_200
100	val_200
100	val_200
100	val_200
100	val_200
104	val_208
104	val_208
104	val_208
104	val_208
104	val_208
104	val_208
104	val_208
104	val_208
104	val_208
104	val_208
104	val_208
104	val_208
111	val_222
113	val_226
113	val_226
113	val_226
113	val_226
114	val_228
119	val_238
119	val_238
119	val_238
119	val_238
119	val_238
119	val_238
119	val_238
119	val_238
119	val_238
119	val_238
119	val_238
119	val_238
119	val_238
119	val_238
119	val_238
119	val_238
119	val_238
119	val_238
12	val_24
12	val_24
12	val_24
12	val_24
12	val_24
12	val_24
12	val_24
12	val_24
126	val_252
128	val_256
128	val_256
128	val_256
128	val_256
128	val_256
128	val_256
128	val_256
128	val_256
128	val_256
128	val_256
128	val_256
128	val_256
128	val_256
128	val_256
128	val_256
128	val_256
128	val_256
128	val_256
129	val_258
129	val_258
129	val_258
129	val_258
131	val_262
133	val_266
136	val_272
136	val_272
137	val_274
137	val_274
137	val_274
137	val_274
143	val_286
146	val_292
146	val_292
146	val_292
146	val_292
149	val_298
149	val_298
149	val_298
149	val_298
149	val_298
149	val_298
149	val_298
149	val_298
149	val_298
149	val_298
149	val_298
149	val_298
15	val_30
15	val_30
15	val_30
15	val_30
153	val_306
155	val_310
158	val_316
158	val_316
158	val_316
166	val_332
168	val_336
169	val_338
169	val_338
169	val_338
169	val_338
169	val_338
169	val_338
169	val_338
169	val_338
169	val_338
169	val_338
169	val_338
169	val_338
169	val_338
169	val_338
169	val_338
169	val_338
17	val_34
172	val_344
172	val_344
172	val_344
172	val_344
172	val_344
172	val_344
172	val_344
172	val_344
174	val_348
174	val_348
174	val_348
174	val_348
174	val_348
174	val_348
174	val_348
174	val_348
174	val_348
174	val_348
174	val_348
174	val_348
174	val_348
174	val_348
174	val_348
174	val_348
174	val_348
174	val_348
174	val_348
174	val_348
178	val_356
180	val_360
181	val_362
183	val_366
187	val_374
187	val_374
187	val_374
187	val_374
187	val_374
187	val_374
187	val_374
187	val_374
187	val_374
189	val_378
191	val_382
191	val_382
191	val_382
191	val_382
191	val_382
191	val_382
191	val_382
191	val_382
192	val_384
192	val_384
192	val_384
193	val_386
193	val_386
193	val_386
193	val_386
193	val_386
193	val_386
193	val_386
193	val_386
193	val_386
196	val_392
197	val_394
197	val_394
197	val_394
197	val_394
2	val_4
200	val_400
200	val_400
200	val_400
200	val_400
201	val_402
202	val_404
202	val_404
203	val_406
203	val_406
203	val_406
203	val_406
203	val_406
203	val_406
203	val_406
203	val_406
203	val_406
203	val_406
203	val_406
203	val_406
203	val_406
203	val_406
203	val_406
203	val_406
207	val_414
207	val_414
207	val_414
207	val_414
207	val_414
207	val_414
207	val_414
207	val_414
209	val_418
209	val_418
209	val_418
209	val_418
216	val_432
216	val_432
216	val_432
216	val_432
218	val_436
219	val_438
219	val_438
219	val_438
219	val_438
219	val_438
219	val_438
219	val_438
219	val_438
219	val_438
219	val_438
219	val_438
219	val_438
222	val_444
223	val_446
223	val_446
223	val_446
223	val_446
224	val_448
224	val_448
224	val_448
224	val_448
226	val_452
229	val_458
229	val_458
229	val_458
229	val_458
229	val_458
229	val_458
229	val_458
229	val_458
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
230	val_460
233	val_466
233	val_466
233	val_466
233	val_466
233	val_466
233	val_466
233	val_466
233	val_466
233	val_466
233	val_466
233	val_466
233	val_466
235	val_470
239	val_478
239	val_478
239	val_478
239	val_478
239	val_478
239	val_478
239	val_478
239	val_478
241	val_482
242	val_484
242	val_484
242	val_484
242	val_484
247	val_494
248	val_496
249	val_498
249	val_498
249	val_498
27	val_54
33	val_66
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
35	val_70
37	val_74
37	val_74
37	val_74
37	val_74
4	val_8
41	val_82
42	val_84
42	val_84
42	val_84
42	val_84
42	val_84
42	val_84
42	val_84
42	val_84
43	val_86
5	val_10
5	val_10
5	val_10
5	val_10
5	val_10
5	val_10
5	val_10
5	val_10
5	val_10
57	val_114
58	val_116
58	val_116
58	val_116
58	val_116
64	val_128
64	val_128
64	val_128
67	val_134
67	val_134
67	val_134
67	val_134
67	val_134
67	val_134
67	val_134
67	val_134
69	val_138
69	val_138
69	val_138
69	val_138
76	val_152
76	val_152
76	val_152
76	val_152
76	val_152
76	val_152
76	val_152
76	val_152
78	val_156
80	val_160
82	val_164
82	val_164
83	val_166
83	val_166
83	val_166
83	val_166
84	val_168
84	val_168
84	val_168
84	val_168
85	val_170
86	val_172
86	val_172
87	val_174
87	val_174
9	val_18
9	val_18
90	val_180
90	val_180
90	val_180
90	val_180
90	val_180
90	val_180
90	val_180
90	val_180
90	val_180
95	val_190
95	val_190
95	val_190
95	val_190
96	val_192
97	val_194
97	val_194
97	val_194
97	val_194
98	val_196
98	val_196
98	val_196
98	val_196
