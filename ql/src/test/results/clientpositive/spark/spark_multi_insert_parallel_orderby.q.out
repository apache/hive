PREHOOK: query: create table e1_n3 (key string, value string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@e1_n3
POSTHOOK: query: create table e1_n3 (key string, value string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@e1_n3
PREHOOK: query: create table e2_n4 (key string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@e2_n4
POSTHOOK: query: create table e2_n4 (key string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@e2_n4
PREHOOK: query: explain
select key,value from src order by key limit 10
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select key,value from src order by key limit 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: hdfs://### HDFS PATH ###
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (SORT, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                      TopN Hash Memory Usage: 0.1
                      value expressions: _col1 (type: string)
            Execution mode: vectorized
        Reducer 2 
            Execution mode: vectorized
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

PREHOOK: query: select key,value from src order by key limit 10
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select key,value from src order by key limit 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: hdfs://### HDFS PATH ###
0	val_0
0	val_0
0	val_0
10	val_10
100	val_100
100	val_100
103	val_103
103	val_103
104	val_104
104	val_104
PREHOOK: query: explain FROM (select key,value from src order by key limit 10) a
INSERT OVERWRITE TABLE e1_n3
    SELECT key, value
INSERT OVERWRITE TABLE e2_n4
    SELECT key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@e1_n3
PREHOOK: Output: default@e2_n4
POSTHOOK: query: explain FROM (select key,value from src order by key limit 10) a
INSERT OVERWRITE TABLE e1_n3
    SELECT key, value
INSERT OVERWRITE TABLE e2_n4
    SELECT key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@e1_n3
POSTHOOK: Output: default@e2_n4
STAGE DEPENDENCIES:
  Stage-2 is a root stage
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0
  Stage-1 depends on stages: Stage-2
  Stage-4 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-2
    Spark
      Edges:
        Reducer 2 <- Map 1 (SORT, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                      TopN Hash Memory Usage: 0.1
                      value expressions: _col1 (type: string)
            Execution mode: vectorized
        Reducer 2 
            Execution mode: vectorized
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        name: default.e1_n3
                  Select Operator
                    expressions: _col0 (type: string)
                    outputColumnNames: _col0
                    Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                          name: default.e2_n4

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.e1_n3

  Stage: Stage-3
    Stats Work
      Basic Stats Work:

  Stage: Stage-1
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.e2_n4

  Stage: Stage-4
    Stats Work
      Basic Stats Work:

PREHOOK: query: FROM (select key,value from src order by key limit 10) a
INSERT OVERWRITE TABLE e1_n3
    SELECT key, value
INSERT OVERWRITE TABLE e2_n4
    SELECT key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@e1_n3
PREHOOK: Output: default@e2_n4
POSTHOOK: query: FROM (select key,value from src order by key limit 10) a
INSERT OVERWRITE TABLE e1_n3
    SELECT key, value
INSERT OVERWRITE TABLE e2_n4
    SELECT key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@e1_n3
POSTHOOK: Output: default@e2_n4
POSTHOOK: Lineage: e1_n3.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: e1_n3.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: e2_n4.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: select * from e1_n3
PREHOOK: type: QUERY
PREHOOK: Input: default@e1_n3
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from e1_n3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@e1_n3
POSTHOOK: Output: hdfs://### HDFS PATH ###
0	val_0
0	val_0
0	val_0
10	val_10
100	val_100
100	val_100
103	val_103
103	val_103
104	val_104
104	val_104
PREHOOK: query: select * from e2_n4
PREHOOK: type: QUERY
PREHOOK: Input: default@e2_n4
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from e2_n4
POSTHOOK: type: QUERY
POSTHOOK: Input: default@e2_n4
POSTHOOK: Output: hdfs://### HDFS PATH ###
0
0
0
10
100
100
103
103
104
104
PREHOOK: query: explain FROM (select key,value from src order by key) a
INSERT OVERWRITE TABLE e1_n3
    select key,value
INSERT OVERWRITE TABLE e2_n4
    select key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@e1_n3
PREHOOK: Output: default@e2_n4
POSTHOOK: query: explain FROM (select key,value from src order by key) a
INSERT OVERWRITE TABLE e1_n3
    select key,value
INSERT OVERWRITE TABLE e2_n4
    select key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@e1_n3
POSTHOOK: Output: default@e2_n4
STAGE DEPENDENCIES:
  Stage-2 is a root stage
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0
  Stage-1 depends on stages: Stage-2
  Stage-4 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-2
    Spark
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                          name: default.e1_n3
                    Select Operator
                      expressions: _col0 (type: string)
                      outputColumnNames: _col0
                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                        table:
                            input format: org.apache.hadoop.mapred.TextInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                            name: default.e2_n4
            Execution mode: vectorized

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.e1_n3

  Stage: Stage-3
    Stats Work
      Basic Stats Work:

  Stage: Stage-1
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.e2_n4

  Stage: Stage-4
    Stats Work
      Basic Stats Work:

PREHOOK: query: FROM (select key,value from src order by key) a
INSERT OVERWRITE TABLE e1_n3 
    select key,value
INSERT OVERWRITE TABLE e2_n4 
    select key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@e1_n3
PREHOOK: Output: default@e2_n4
POSTHOOK: query: FROM (select key,value from src order by key) a
INSERT OVERWRITE TABLE e1_n3 
    select key,value
INSERT OVERWRITE TABLE e2_n4 
    select key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@e1_n3
POSTHOOK: Output: default@e2_n4
POSTHOOK: Lineage: e1_n3.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: e1_n3.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: e2_n4.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: select * from e1_n3
PREHOOK: type: QUERY
PREHOOK: Input: default@e1_n3
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from e1_n3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@e1_n3
POSTHOOK: Output: hdfs://### HDFS PATH ###
0	val_0
0	val_0
0	val_0
10	val_10
100	val_100
100	val_100
103	val_103
103	val_103
104	val_104
104	val_104
105	val_105
11	val_11
111	val_111
113	val_113
113	val_113
114	val_114
116	val_116
118	val_118
118	val_118
119	val_119
119	val_119
119	val_119
12	val_12
12	val_12
120	val_120
120	val_120
125	val_125
125	val_125
126	val_126
128	val_128
128	val_128
128	val_128
129	val_129
129	val_129
131	val_131
133	val_133
134	val_134
134	val_134
136	val_136
137	val_137
137	val_137
138	val_138
138	val_138
138	val_138
138	val_138
143	val_143
145	val_145
146	val_146
146	val_146
149	val_149
149	val_149
15	val_15
15	val_15
150	val_150
152	val_152
152	val_152
153	val_153
155	val_155
156	val_156
157	val_157
158	val_158
160	val_160
162	val_162
163	val_163
164	val_164
164	val_164
165	val_165
165	val_165
166	val_166
167	val_167
167	val_167
167	val_167
168	val_168
169	val_169
169	val_169
169	val_169
169	val_169
17	val_17
170	val_170
172	val_172
172	val_172
174	val_174
174	val_174
175	val_175
175	val_175
176	val_176
176	val_176
177	val_177
178	val_178
179	val_179
179	val_179
18	val_18
18	val_18
180	val_180
181	val_181
183	val_183
186	val_186
187	val_187
187	val_187
187	val_187
189	val_189
19	val_19
190	val_190
191	val_191
191	val_191
192	val_192
193	val_193
193	val_193
193	val_193
194	val_194
195	val_195
195	val_195
196	val_196
197	val_197
197	val_197
199	val_199
199	val_199
199	val_199
2	val_2
20	val_20
200	val_200
200	val_200
201	val_201
202	val_202
203	val_203
203	val_203
205	val_205
205	val_205
207	val_207
207	val_207
208	val_208
208	val_208
208	val_208
209	val_209
209	val_209
213	val_213
213	val_213
214	val_214
216	val_216
216	val_216
217	val_217
217	val_217
218	val_218
219	val_219
219	val_219
221	val_221
221	val_221
222	val_222
223	val_223
223	val_223
224	val_224
224	val_224
226	val_226
228	val_228
229	val_229
229	val_229
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
233	val_233
233	val_233
235	val_235
237	val_237
237	val_237
238	val_238
238	val_238
239	val_239
239	val_239
24	val_24
24	val_24
241	val_241
242	val_242
242	val_242
244	val_244
247	val_247
248	val_248
249	val_249
252	val_252
255	val_255
255	val_255
256	val_256
256	val_256
257	val_257
258	val_258
26	val_26
26	val_26
260	val_260
262	val_262
263	val_263
265	val_265
265	val_265
266	val_266
27	val_27
272	val_272
272	val_272
273	val_273
273	val_273
273	val_273
274	val_274
275	val_275
277	val_277
277	val_277
277	val_277
277	val_277
278	val_278
278	val_278
28	val_28
280	val_280
280	val_280
281	val_281
281	val_281
282	val_282
282	val_282
283	val_283
284	val_284
285	val_285
286	val_286
287	val_287
288	val_288
288	val_288
289	val_289
291	val_291
292	val_292
296	val_296
298	val_298
298	val_298
298	val_298
30	val_30
302	val_302
305	val_305
306	val_306
307	val_307
307	val_307
308	val_308
309	val_309
309	val_309
310	val_310
311	val_311
311	val_311
311	val_311
315	val_315
316	val_316
316	val_316
316	val_316
317	val_317
317	val_317
318	val_318
318	val_318
318	val_318
321	val_321
321	val_321
322	val_322
322	val_322
323	val_323
325	val_325
325	val_325
327	val_327
327	val_327
327	val_327
33	val_33
331	val_331
331	val_331
332	val_332
333	val_333
333	val_333
335	val_335
336	val_336
338	val_338
339	val_339
34	val_34
341	val_341
342	val_342
342	val_342
344	val_344
344	val_344
345	val_345
348	val_348
348	val_348
348	val_348
348	val_348
348	val_348
35	val_35
35	val_35
35	val_35
351	val_351
353	val_353
353	val_353
356	val_356
360	val_360
362	val_362
364	val_364
365	val_365
366	val_366
367	val_367
367	val_367
368	val_368
369	val_369
369	val_369
369	val_369
37	val_37
37	val_37
373	val_373
374	val_374
375	val_375
377	val_377
378	val_378
379	val_379
382	val_382
382	val_382
384	val_384
384	val_384
384	val_384
386	val_386
389	val_389
392	val_392
393	val_393
394	val_394
395	val_395
395	val_395
396	val_396
396	val_396
396	val_396
397	val_397
397	val_397
399	val_399
399	val_399
4	val_4
400	val_400
401	val_401
401	val_401
401	val_401
401	val_401
401	val_401
402	val_402
403	val_403
403	val_403
403	val_403
404	val_404
404	val_404
406	val_406
406	val_406
406	val_406
406	val_406
407	val_407
409	val_409
409	val_409
409	val_409
41	val_41
411	val_411
413	val_413
413	val_413
414	val_414
414	val_414
417	val_417
417	val_417
417	val_417
418	val_418
419	val_419
42	val_42
42	val_42
421	val_421
424	val_424
424	val_424
427	val_427
429	val_429
429	val_429
43	val_43
430	val_430
430	val_430
430	val_430
431	val_431
431	val_431
431	val_431
432	val_432
435	val_435
436	val_436
437	val_437
438	val_438
438	val_438
438	val_438
439	val_439
439	val_439
44	val_44
443	val_443
444	val_444
446	val_446
448	val_448
449	val_449
452	val_452
453	val_453
454	val_454
454	val_454
454	val_454
455	val_455
457	val_457
458	val_458
458	val_458
459	val_459
459	val_459
460	val_460
462	val_462
462	val_462
463	val_463
463	val_463
466	val_466
466	val_466
466	val_466
467	val_467
468	val_468
468	val_468
468	val_468
468	val_468
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
47	val_47
470	val_470
472	val_472
475	val_475
477	val_477
478	val_478
478	val_478
479	val_479
480	val_480
480	val_480
480	val_480
481	val_481
482	val_482
483	val_483
484	val_484
485	val_485
487	val_487
489	val_489
489	val_489
489	val_489
489	val_489
490	val_490
491	val_491
492	val_492
492	val_492
493	val_493
494	val_494
495	val_495
496	val_496
497	val_497
498	val_498
498	val_498
498	val_498
5	val_5
5	val_5
5	val_5
51	val_51
51	val_51
53	val_53
54	val_54
57	val_57
58	val_58
58	val_58
64	val_64
65	val_65
66	val_66
67	val_67
67	val_67
69	val_69
70	val_70
70	val_70
70	val_70
72	val_72
72	val_72
74	val_74
76	val_76
76	val_76
77	val_77
78	val_78
8	val_8
80	val_80
82	val_82
83	val_83
83	val_83
84	val_84
84	val_84
85	val_85
86	val_86
87	val_87
9	val_9
90	val_90
90	val_90
90	val_90
92	val_92
95	val_95
95	val_95
96	val_96
97	val_97
97	val_97
98	val_98
98	val_98
PREHOOK: query: select * from e2_n4
PREHOOK: type: QUERY
PREHOOK: Input: default@e2_n4
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from e2_n4
POSTHOOK: type: QUERY
POSTHOOK: Input: default@e2_n4
POSTHOOK: Output: hdfs://### HDFS PATH ###
0
0
0
10
100
100
103
103
104
104
105
11
111
113
113
114
116
118
118
119
119
119
12
12
120
120
125
125
126
128
128
128
129
129
131
133
134
134
136
137
137
138
138
138
138
143
145
146
146
149
149
15
15
150
152
152
153
155
156
157
158
160
162
163
164
164
165
165
166
167
167
167
168
169
169
169
169
17
170
172
172
174
174
175
175
176
176
177
178
179
179
18
18
180
181
183
186
187
187
187
189
19
190
191
191
192
193
193
193
194
195
195
196
197
197
199
199
199
2
20
200
200
201
202
203
203
205
205
207
207
208
208
208
209
209
213
213
214
216
216
217
217
218
219
219
221
221
222
223
223
224
224
226
228
229
229
230
230
230
230
230
233
233
235
237
237
238
238
239
239
24
24
241
242
242
244
247
248
249
252
255
255
256
256
257
258
26
26
260
262
263
265
265
266
27
272
272
273
273
273
274
275
277
277
277
277
278
278
28
280
280
281
281
282
282
283
284
285
286
287
288
288
289
291
292
296
298
298
298
30
302
305
306
307
307
308
309
309
310
311
311
311
315
316
316
316
317
317
318
318
318
321
321
322
322
323
325
325
327
327
327
33
331
331
332
333
333
335
336
338
339
34
341
342
342
344
344
345
348
348
348
348
348
35
35
35
351
353
353
356
360
362
364
365
366
367
367
368
369
369
369
37
37
373
374
375
377
378
379
382
382
384
384
384
386
389
392
393
394
395
395
396
396
396
397
397
399
399
4
400
401
401
401
401
401
402
403
403
403
404
404
406
406
406
406
407
409
409
409
41
411
413
413
414
414
417
417
417
418
419
42
42
421
424
424
427
429
429
43
430
430
430
431
431
431
432
435
436
437
438
438
438
439
439
44
443
444
446
448
449
452
453
454
454
454
455
457
458
458
459
459
460
462
462
463
463
466
466
466
467
468
468
468
468
469
469
469
469
469
47
470
472
475
477
478
478
479
480
480
480
481
482
483
484
485
487
489
489
489
489
490
491
492
492
493
494
495
496
497
498
498
498
5
5
5
51
51
53
54
57
58
58
64
65
66
67
67
69
70
70
70
72
72
74
76
76
77
78
8
80
82
83
83
84
84
85
86
87
9
90
90
90
92
95
95
96
97
97
98
98
PREHOOK: query: explain FROM (select key,value from src order by key) a
INSERT OVERWRITE TABLE e1_n3
    select key,value limit 10
INSERT OVERWRITE TABLE e2_n4
    select key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@e1_n3
PREHOOK: Output: default@e2_n4
POSTHOOK: query: explain FROM (select key,value from src order by key) a
INSERT OVERWRITE TABLE e1_n3
    select key,value limit 10
INSERT OVERWRITE TABLE e2_n4
    select key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@e1_n3
POSTHOOK: Output: default@e2_n4
STAGE DEPENDENCIES:
  Stage-2 is a root stage
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0
  Stage-1 depends on stages: Stage-2
  Stage-4 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-2
    Spark
      Edges:
        Reducer 2 <- Map 1 (GROUP, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                    Limit
                      Number of rows: 10
                      Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        sort order: 
                        Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                        TopN Hash Memory Usage: 0.1
                        value expressions: _col0 (type: string), _col1 (type: string)
                    Select Operator
                      expressions: _col0 (type: string)
                      outputColumnNames: _col0
                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                        table:
                            input format: org.apache.hadoop.mapred.TextInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                            name: default.e2_n4
            Execution mode: vectorized
        Reducer 2 
            Execution mode: vectorized
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), VALUE._col1 (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        name: default.e1_n3

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.e1_n3

  Stage: Stage-3
    Stats Work
      Basic Stats Work:

  Stage: Stage-1
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.e2_n4

  Stage: Stage-4
    Stats Work
      Basic Stats Work:

PREHOOK: query: FROM (select key,value from src order by key) a
INSERT OVERWRITE TABLE e1_n3 
    select key,value limit 10
INSERT OVERWRITE TABLE e2_n4 
    select key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@e1_n3
PREHOOK: Output: default@e2_n4
POSTHOOK: query: FROM (select key,value from src order by key) a
INSERT OVERWRITE TABLE e1_n3 
    select key,value limit 10
INSERT OVERWRITE TABLE e2_n4 
    select key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@e1_n3
POSTHOOK: Output: default@e2_n4
POSTHOOK: Lineage: e1_n3.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: e1_n3.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: e2_n4.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
PREHOOK: query: select count(*) from e1_n3
PREHOOK: type: QUERY
PREHOOK: Input: default@e1_n3
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select count(*) from e1_n3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@e1_n3
POSTHOOK: Output: hdfs://### HDFS PATH ###
10
PREHOOK: query: select * from e2_n4
PREHOOK: type: QUERY
PREHOOK: Input: default@e2_n4
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from e2_n4
POSTHOOK: type: QUERY
POSTHOOK: Input: default@e2_n4
POSTHOOK: Output: hdfs://### HDFS PATH ###
0
0
0
10
100
100
103
103
104
104
105
11
111
113
113
114
116
118
118
119
119
119
12
12
120
120
125
125
126
128
128
128
129
129
131
133
134
134
136
137
137
138
138
138
138
143
145
146
146
149
149
15
15
150
152
152
153
155
156
157
158
160
162
163
164
164
165
165
166
167
167
167
168
169
169
169
169
17
170
172
172
174
174
175
175
176
176
177
178
179
179
18
18
180
181
183
186
187
187
187
189
19
190
191
191
192
193
193
193
194
195
195
196
197
197
199
199
199
2
20
200
200
201
202
203
203
205
205
207
207
208
208
208
209
209
213
213
214
216
216
217
217
218
219
219
221
221
222
223
223
224
224
226
228
229
229
230
230
230
230
230
233
233
235
237
237
238
238
239
239
24
24
241
242
242
244
247
248
249
252
255
255
256
256
257
258
26
26
260
262
263
265
265
266
27
272
272
273
273
273
274
275
277
277
277
277
278
278
28
280
280
281
281
282
282
283
284
285
286
287
288
288
289
291
292
296
298
298
298
30
302
305
306
307
307
308
309
309
310
311
311
311
315
316
316
316
317
317
318
318
318
321
321
322
322
323
325
325
327
327
327
33
331
331
332
333
333
335
336
338
339
34
341
342
342
344
344
345
348
348
348
348
348
35
35
35
351
353
353
356
360
362
364
365
366
367
367
368
369
369
369
37
37
373
374
375
377
378
379
382
382
384
384
384
386
389
392
393
394
395
395
396
396
396
397
397
399
399
4
400
401
401
401
401
401
402
403
403
403
404
404
406
406
406
406
407
409
409
409
41
411
413
413
414
414
417
417
417
418
419
42
42
421
424
424
427
429
429
43
430
430
430
431
431
431
432
435
436
437
438
438
438
439
439
44
443
444
446
448
449
452
453
454
454
454
455
457
458
458
459
459
460
462
462
463
463
466
466
466
467
468
468
468
468
469
469
469
469
469
47
470
472
475
477
478
478
479
480
480
480
481
482
483
484
485
487
489
489
489
489
490
491
492
492
493
494
495
496
497
498
498
498
5
5
5
51
51
53
54
57
58
58
64
65
66
67
67
69
70
70
70
72
72
74
76
76
77
78
8
80
82
83
83
84
84
85
86
87
9
90
90
90
92
95
95
96
97
97
98
98
PREHOOK: query: drop table e1_n3
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@e1_n3
PREHOOK: Output: default@e1_n3
POSTHOOK: query: drop table e1_n3
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@e1_n3
POSTHOOK: Output: default@e1_n3
PREHOOK: query: drop table e2_n4
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@e2_n4
PREHOOK: Output: default@e2_n4
POSTHOOK: query: drop table e2_n4
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@e2_n4
POSTHOOK: Output: default@e2_n4
