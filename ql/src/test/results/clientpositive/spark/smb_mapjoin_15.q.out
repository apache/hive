PREHOOK: query: CREATE TABLE test_table1 (key INT, value STRING) CLUSTERED BY (key) SORTED BY (key ASC, value ASC) INTO 16 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_table1
POSTHOOK: query: CREATE TABLE test_table1 (key INT, value STRING) CLUSTERED BY (key) SORTED BY (key ASC, value ASC) INTO 16 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_table1
PREHOOK: query: CREATE TABLE test_table2 (key INT, value STRING) CLUSTERED BY (key) SORTED BY (key ASC, value ASC) INTO 16 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_table2
POSTHOOK: query: CREATE TABLE test_table2 (key INT, value STRING) CLUSTERED BY (key) SORTED BY (key ASC, value ASC) INTO 16 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_table2
PREHOOK: query: FROM src
INSERT OVERWRITE TABLE test_table1 SELECT *
INSERT OVERWRITE TABLE test_table2 SELECT *
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@test_table1
PREHOOK: Output: default@test_table2
POSTHOOK: query: FROM src
INSERT OVERWRITE TABLE test_table1 SELECT *
INSERT OVERWRITE TABLE test_table2 SELECT *
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@test_table1
POSTHOOK: Output: default@test_table2
POSTHOOK: Lineage: test_table1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: test_table1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: test_table2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: test_table2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: EXPLAIN EXTENDED
SELECT /*+mapjoin(b)*/ * FROM test_table1 a JOIN test_table2 b ON a.key = b.key ORDER BY a.key LIMIT 10
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN EXTENDED
SELECT /*+mapjoin(b)*/ * FROM test_table1 a JOIN test_table2 b ON a.key = b.key ORDER BY a.key LIMIT 10
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (PARTITION-LEVEL SORT, 1), Map 4 (PARTITION-LEVEL SORT, 1)
        Reducer 3 <- Reducer 2 (SORT, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  GatherStats: false
                  Filter Operator
                    isSamplingPred: false
                    predicate: key is not null (type: boolean)
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: int), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: a
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                        tag: 0
                        value expressions: _col1 (type: string)
                        auto parallelism: false
            Execution mode: vectorized
            Path -> Alias:
#### A masked pattern was here ####
            Path -> Partition:
#### A masked pattern was here ####
                Partition
                  base file name: test_table1
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  properties:
                    COLUMN_STATS_ACCURATE {"BASIC_STATS":"true"}
                    SORTBUCKETCOLSPREFIX TRUE
                    bucket_count 16
                    bucket_field_name key
                    bucketing_version 2
                    column.name.delimiter ,
                    columns key,value
                    columns.comments 
                    columns.types int:string
#### A masked pattern was here ####
                    name default.test_table1
                    numFiles 16
                    numRows 500
                    rawDataSize 5312
                    serialization.ddl struct test_table1 { i32 key, string value}
                    serialization.format 1
                    serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    totalSize 5812
#### A masked pattern was here ####
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    properties:
                      COLUMN_STATS_ACCURATE {"BASIC_STATS":"true"}
                      SORTBUCKETCOLSPREFIX TRUE
                      bucket_count 16
                      bucket_field_name key
                      bucketing_version 2
                      column.name.delimiter ,
                      columns key,value
                      columns.comments 
                      columns.types int:string
#### A masked pattern was here ####
                      name default.test_table1
                      numFiles 16
                      numRows 500
                      rawDataSize 5312
                      serialization.ddl struct test_table1 { i32 key, string value}
                      serialization.format 1
                      serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      totalSize 5812
#### A masked pattern was here ####
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    name: default.test_table1
                  name: default.test_table1
            Truncated Path -> Alias:
              /test_table1 [$hdt$_0:a]
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  GatherStats: false
                  Filter Operator
                    isSamplingPred: false
                    predicate: key is not null (type: boolean)
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: int), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        null sort order: a
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                        tag: 1
                        value expressions: _col1 (type: string)
                        auto parallelism: false
            Execution mode: vectorized
            Path -> Alias:
#### A masked pattern was here ####
            Path -> Partition:
#### A masked pattern was here ####
                Partition
                  base file name: test_table2
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  properties:
                    COLUMN_STATS_ACCURATE {"BASIC_STATS":"true"}
                    SORTBUCKETCOLSPREFIX TRUE
                    bucket_count 16
                    bucket_field_name key
                    bucketing_version 2
                    column.name.delimiter ,
                    columns key,value
                    columns.comments 
                    columns.types int:string
#### A masked pattern was here ####
                    name default.test_table2
                    numFiles 16
                    numRows 500
                    rawDataSize 5312
                    serialization.ddl struct test_table2 { i32 key, string value}
                    serialization.format 1
                    serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    totalSize 5812
#### A masked pattern was here ####
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    properties:
                      COLUMN_STATS_ACCURATE {"BASIC_STATS":"true"}
                      SORTBUCKETCOLSPREFIX TRUE
                      bucket_count 16
                      bucket_field_name key
                      bucketing_version 2
                      column.name.delimiter ,
                      columns key,value
                      columns.comments 
                      columns.types int:string
#### A masked pattern was here ####
                      name default.test_table2
                      numFiles 16
                      numRows 500
                      rawDataSize 5312
                      serialization.ddl struct test_table2 { i32 key, string value}
                      serialization.format 1
                      serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      totalSize 5812
#### A masked pattern was here ####
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    name: default.test_table2
                  name: default.test_table2
            Truncated Path -> Alias:
              /test_table2 [$hdt$_1:b]
        Reducer 2 
            Needs Tagging: true
            Reduce Operator Tree:
              Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 550 Data size: 5843 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  null sort order: a
                  sort order: +
                  Statistics: Num rows: 550 Data size: 5843 Basic stats: COMPLETE Column stats: NONE
                  tag: -1
                  TopN: 10
                  TopN Hash Memory Usage: 0.1
                  value expressions: _col1 (type: string), _col2 (type: int), _col3 (type: string)
                  auto parallelism: false
        Reducer 3 
            Execution mode: vectorized
            Needs Tagging: false
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: string), VALUE._col1 (type: int), VALUE._col2 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 550 Data size: 5843 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    GlobalTableId: 0
#### A masked pattern was here ####
                    NumFilesPerFileSink: 1
                    Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
#### A masked pattern was here ####
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        properties:
                          columns _col0,_col1,_col2,_col3
                          columns.types int:string:int:string
                          escape.delim \
                          hive.serialization.extend.additional.nesting.levels true
                          serialization.escape.crlf true
                          serialization.format 1
                          serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    TotalFiles: 1
                    GatherStats: false
                    MultiFileSpray: false

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

PREHOOK: query: SELECT /*+mapjoin(b)*/ * FROM test_table1 a JOIN test_table2 b ON a.key = b.key ORDER BY a.key LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
PREHOOK: Input: default@test_table2
#### A masked pattern was here ####
POSTHOOK: query: SELECT /*+mapjoin(b)*/ * FROM test_table1 a JOIN test_table2 b ON a.key = b.key ORDER BY a.key LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
POSTHOOK: Input: default@test_table2
#### A masked pattern was here ####
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
2	val_2	2	val_2
PREHOOK: query: DROP TABLE test_table1
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@test_table1
PREHOOK: Output: default@test_table1
POSTHOOK: query: DROP TABLE test_table1
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@test_table1
POSTHOOK: Output: default@test_table1
PREHOOK: query: DROP TABLE test_table2
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@test_table2
PREHOOK: Output: default@test_table2
POSTHOOK: query: DROP TABLE test_table2
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@test_table2
POSTHOOK: Output: default@test_table2
PREHOOK: query: CREATE TABLE test_table1 (key INT, key2 INT, value STRING) CLUSTERED BY (key) SORTED BY (key ASC, key2 ASC, value ASC) INTO 16 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_table1
POSTHOOK: query: CREATE TABLE test_table1 (key INT, key2 INT, value STRING) CLUSTERED BY (key) SORTED BY (key ASC, key2 ASC, value ASC) INTO 16 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_table1
PREHOOK: query: CREATE TABLE test_table2 (key INT, key2 INT, value STRING) CLUSTERED BY (key) SORTED BY (key ASC, key2 ASC, value ASC) INTO 16 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_table2
POSTHOOK: query: CREATE TABLE test_table2 (key INT, key2 INT, value STRING) CLUSTERED BY (key) SORTED BY (key ASC, key2 ASC, value ASC) INTO 16 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_table2
PREHOOK: query: FROM src
INSERT OVERWRITE TABLE test_table1 SELECT key, key, value
INSERT OVERWRITE TABLE test_table2 SELECT key, key, value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@test_table1
PREHOOK: Output: default@test_table2
POSTHOOK: query: FROM src
INSERT OVERWRITE TABLE test_table1 SELECT key, key, value
INSERT OVERWRITE TABLE test_table2 SELECT key, key, value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@test_table1
POSTHOOK: Output: default@test_table2
POSTHOOK: Lineage: test_table1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: test_table1.key2 EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: test_table1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: test_table2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: test_table2.key2 EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: test_table2.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: EXPLAIN EXTENDED
SELECT /*+mapjoin(b)*/ * FROM test_table1 a JOIN test_table2 b ON a.key = b.key and a.key2 = b.key2 ORDER BY a.key LIMIT 10
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN EXTENDED
SELECT /*+mapjoin(b)*/ * FROM test_table1 a JOIN test_table2 b ON a.key = b.key and a.key2 = b.key2 ORDER BY a.key LIMIT 10
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (PARTITION-LEVEL SORT, 1), Map 4 (PARTITION-LEVEL SORT, 1)
        Reducer 3 <- Reducer 2 (SORT, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                  GatherStats: false
                  Filter Operator
                    isSamplingPred: false
                    predicate: (key is not null and key2 is not null) (type: boolean)
                    Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: int), key2 (type: int), value (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: int)
                        null sort order: aa
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: int), _col1 (type: int)
                        Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                        tag: 0
                        value expressions: _col2 (type: string)
                        auto parallelism: false
            Execution mode: vectorized
            Path -> Alias:
#### A masked pattern was here ####
            Path -> Partition:
#### A masked pattern was here ####
                Partition
                  base file name: test_table1
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  properties:
                    COLUMN_STATS_ACCURATE {"BASIC_STATS":"true"}
                    SORTBUCKETCOLSPREFIX TRUE
                    bucket_count 16
                    bucket_field_name key
                    bucketing_version 2
                    column.name.delimiter ,
                    columns key,key2,value
                    columns.comments 
                    columns.types int:int:string
#### A masked pattern was here ####
                    name default.test_table1
                    numFiles 16
                    numRows 500
                    rawDataSize 7218
                    serialization.ddl struct test_table1 { i32 key, i32 key2, string value}
                    serialization.format 1
                    serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    totalSize 7718
#### A masked pattern was here ####
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    properties:
                      COLUMN_STATS_ACCURATE {"BASIC_STATS":"true"}
                      SORTBUCKETCOLSPREFIX TRUE
                      bucket_count 16
                      bucket_field_name key
                      bucketing_version 2
                      column.name.delimiter ,
                      columns key,key2,value
                      columns.comments 
                      columns.types int:int:string
#### A masked pattern was here ####
                      name default.test_table1
                      numFiles 16
                      numRows 500
                      rawDataSize 7218
                      serialization.ddl struct test_table1 { i32 key, i32 key2, string value}
                      serialization.format 1
                      serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      totalSize 7718
#### A masked pattern was here ####
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    name: default.test_table1
                  name: default.test_table1
            Truncated Path -> Alias:
              /test_table1 [$hdt$_0:a]
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                  GatherStats: false
                  Filter Operator
                    isSamplingPred: false
                    predicate: (key is not null and key2 is not null) (type: boolean)
                    Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: int), key2 (type: int), value (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: int)
                        null sort order: aa
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: int), _col1 (type: int)
                        Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                        tag: 1
                        value expressions: _col2 (type: string)
                        auto parallelism: false
            Execution mode: vectorized
            Path -> Alias:
#### A masked pattern was here ####
            Path -> Partition:
#### A masked pattern was here ####
                Partition
                  base file name: test_table2
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  properties:
                    COLUMN_STATS_ACCURATE {"BASIC_STATS":"true"}
                    SORTBUCKETCOLSPREFIX TRUE
                    bucket_count 16
                    bucket_field_name key
                    bucketing_version 2
                    column.name.delimiter ,
                    columns key,key2,value
                    columns.comments 
                    columns.types int:int:string
#### A masked pattern was here ####
                    name default.test_table2
                    numFiles 16
                    numRows 500
                    rawDataSize 7218
                    serialization.ddl struct test_table2 { i32 key, i32 key2, string value}
                    serialization.format 1
                    serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    totalSize 7718
#### A masked pattern was here ####
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    properties:
                      COLUMN_STATS_ACCURATE {"BASIC_STATS":"true"}
                      SORTBUCKETCOLSPREFIX TRUE
                      bucket_count 16
                      bucket_field_name key
                      bucketing_version 2
                      column.name.delimiter ,
                      columns key,key2,value
                      columns.comments 
                      columns.types int:int:string
#### A masked pattern was here ####
                      name default.test_table2
                      numFiles 16
                      numRows 500
                      rawDataSize 7218
                      serialization.ddl struct test_table2 { i32 key, i32 key2, string value}
                      serialization.format 1
                      serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      totalSize 7718
#### A masked pattern was here ####
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    name: default.test_table2
                  name: default.test_table2
            Truncated Path -> Alias:
              /test_table2 [$hdt$_1:b]
        Reducer 2 
            Needs Tagging: true
            Reduce Operator Tree:
              Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int), _col1 (type: int)
                  1 _col0 (type: int), _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 550 Data size: 7939 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  null sort order: a
                  sort order: +
                  Statistics: Num rows: 550 Data size: 7939 Basic stats: COMPLETE Column stats: NONE
                  tag: -1
                  TopN: 10
                  TopN Hash Memory Usage: 0.1
                  value expressions: _col1 (type: int), _col2 (type: string), _col3 (type: int), _col4 (type: int), _col5 (type: string)
                  auto parallelism: false
        Reducer 3 
            Execution mode: vectorized
            Needs Tagging: false
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: int), VALUE._col1 (type: string), VALUE._col2 (type: int), VALUE._col3 (type: int), VALUE._col4 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 550 Data size: 7939 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 10 Data size: 140 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    GlobalTableId: 0
#### A masked pattern was here ####
                    NumFilesPerFileSink: 1
                    Statistics: Num rows: 10 Data size: 140 Basic stats: COMPLETE Column stats: NONE
#### A masked pattern was here ####
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        properties:
                          columns _col0,_col1,_col2,_col3,_col4,_col5
                          columns.types int:int:string:int:int:string
                          escape.delim \
                          hive.serialization.extend.additional.nesting.levels true
                          serialization.escape.crlf true
                          serialization.format 1
                          serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    TotalFiles: 1
                    GatherStats: false
                    MultiFileSpray: false

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

PREHOOK: query: SELECT /*+mapjoin(b)*/ * FROM test_table1 a JOIN test_table2 b ON a.key = b.key and a.key2 = b.key2 ORDER BY a.key LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
PREHOOK: Input: default@test_table2
#### A masked pattern was here ####
POSTHOOK: query: SELECT /*+mapjoin(b)*/ * FROM test_table1 a JOIN test_table2 b ON a.key = b.key and a.key2 = b.key2 ORDER BY a.key LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
POSTHOOK: Input: default@test_table2
#### A masked pattern was here ####
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
2	2	val_2	2	2	val_2
PREHOOK: query: EXPLAIN EXTENDED
SELECT /*+mapjoin(b)*/ * FROM test_table1 a JOIN test_table2 b ON a.key2 = b.key2 and a.key = b.key ORDER BY a.key LIMIT 10
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN EXTENDED
SELECT /*+mapjoin(b)*/ * FROM test_table1 a JOIN test_table2 b ON a.key2 = b.key2 and a.key = b.key ORDER BY a.key LIMIT 10
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (PARTITION-LEVEL SORT, 1), Map 4 (PARTITION-LEVEL SORT, 1)
        Reducer 3 <- Reducer 2 (SORT, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                  GatherStats: false
                  Filter Operator
                    isSamplingPred: false
                    predicate: (key is not null and key2 is not null) (type: boolean)
                    Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: int), key2 (type: int), value (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: int)
                        null sort order: aa
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: int), _col1 (type: int)
                        Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                        tag: 0
                        value expressions: _col2 (type: string)
                        auto parallelism: false
            Execution mode: vectorized
            Path -> Alias:
#### A masked pattern was here ####
            Path -> Partition:
#### A masked pattern was here ####
                Partition
                  base file name: test_table1
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  properties:
                    COLUMN_STATS_ACCURATE {"BASIC_STATS":"true"}
                    SORTBUCKETCOLSPREFIX TRUE
                    bucket_count 16
                    bucket_field_name key
                    bucketing_version 2
                    column.name.delimiter ,
                    columns key,key2,value
                    columns.comments 
                    columns.types int:int:string
#### A masked pattern was here ####
                    name default.test_table1
                    numFiles 16
                    numRows 500
                    rawDataSize 7218
                    serialization.ddl struct test_table1 { i32 key, i32 key2, string value}
                    serialization.format 1
                    serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    totalSize 7718
#### A masked pattern was here ####
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    properties:
                      COLUMN_STATS_ACCURATE {"BASIC_STATS":"true"}
                      SORTBUCKETCOLSPREFIX TRUE
                      bucket_count 16
                      bucket_field_name key
                      bucketing_version 2
                      column.name.delimiter ,
                      columns key,key2,value
                      columns.comments 
                      columns.types int:int:string
#### A masked pattern was here ####
                      name default.test_table1
                      numFiles 16
                      numRows 500
                      rawDataSize 7218
                      serialization.ddl struct test_table1 { i32 key, i32 key2, string value}
                      serialization.format 1
                      serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      totalSize 7718
#### A masked pattern was here ####
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    name: default.test_table1
                  name: default.test_table1
            Truncated Path -> Alias:
              /test_table1 [$hdt$_0:a]
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                  GatherStats: false
                  Filter Operator
                    isSamplingPred: false
                    predicate: (key is not null and key2 is not null) (type: boolean)
                    Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: int), key2 (type: int), value (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: int)
                        null sort order: aa
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: int), _col1 (type: int)
                        Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                        tag: 1
                        value expressions: _col2 (type: string)
                        auto parallelism: false
            Execution mode: vectorized
            Path -> Alias:
#### A masked pattern was here ####
            Path -> Partition:
#### A masked pattern was here ####
                Partition
                  base file name: test_table2
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  properties:
                    COLUMN_STATS_ACCURATE {"BASIC_STATS":"true"}
                    SORTBUCKETCOLSPREFIX TRUE
                    bucket_count 16
                    bucket_field_name key
                    bucketing_version 2
                    column.name.delimiter ,
                    columns key,key2,value
                    columns.comments 
                    columns.types int:int:string
#### A masked pattern was here ####
                    name default.test_table2
                    numFiles 16
                    numRows 500
                    rawDataSize 7218
                    serialization.ddl struct test_table2 { i32 key, i32 key2, string value}
                    serialization.format 1
                    serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    totalSize 7718
#### A masked pattern was here ####
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    properties:
                      COLUMN_STATS_ACCURATE {"BASIC_STATS":"true"}
                      SORTBUCKETCOLSPREFIX TRUE
                      bucket_count 16
                      bucket_field_name key
                      bucketing_version 2
                      column.name.delimiter ,
                      columns key,key2,value
                      columns.comments 
                      columns.types int:int:string
#### A masked pattern was here ####
                      name default.test_table2
                      numFiles 16
                      numRows 500
                      rawDataSize 7218
                      serialization.ddl struct test_table2 { i32 key, i32 key2, string value}
                      serialization.format 1
                      serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      totalSize 7718
#### A masked pattern was here ####
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    name: default.test_table2
                  name: default.test_table2
            Truncated Path -> Alias:
              /test_table2 [$hdt$_1:b]
        Reducer 2 
            Needs Tagging: true
            Reduce Operator Tree:
              Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int), _col1 (type: int)
                  1 _col0 (type: int), _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 550 Data size: 7939 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  null sort order: a
                  sort order: +
                  Statistics: Num rows: 550 Data size: 7939 Basic stats: COMPLETE Column stats: NONE
                  tag: -1
                  TopN: 10
                  TopN Hash Memory Usage: 0.1
                  value expressions: _col1 (type: int), _col2 (type: string), _col3 (type: int), _col4 (type: int), _col5 (type: string)
                  auto parallelism: false
        Reducer 3 
            Execution mode: vectorized
            Needs Tagging: false
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: int), VALUE._col1 (type: string), VALUE._col2 (type: int), VALUE._col3 (type: int), VALUE._col4 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 550 Data size: 7939 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 10 Data size: 140 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    GlobalTableId: 0
#### A masked pattern was here ####
                    NumFilesPerFileSink: 1
                    Statistics: Num rows: 10 Data size: 140 Basic stats: COMPLETE Column stats: NONE
#### A masked pattern was here ####
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        properties:
                          columns _col0,_col1,_col2,_col3,_col4,_col5
                          columns.types int:int:string:int:int:string
                          escape.delim \
                          hive.serialization.extend.additional.nesting.levels true
                          serialization.escape.crlf true
                          serialization.format 1
                          serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    TotalFiles: 1
                    GatherStats: false
                    MultiFileSpray: false

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

PREHOOK: query: SELECT /*+mapjoin(b)*/ * FROM test_table1 a JOIN test_table2 b ON a.key2 = b.key2 and a.key = b.key ORDER BY a.key LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
PREHOOK: Input: default@test_table2
#### A masked pattern was here ####
POSTHOOK: query: SELECT /*+mapjoin(b)*/ * FROM test_table1 a JOIN test_table2 b ON a.key2 = b.key2 and a.key = b.key ORDER BY a.key LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
POSTHOOK: Input: default@test_table2
#### A masked pattern was here ####
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
2	2	val_2	2	2	val_2
PREHOOK: query: EXPLAIN EXTENDED
SELECT /*+mapjoin(b)*/ * FROM test_table1 a JOIN test_table2 b ON a.key = b.key and a.value = b.value ORDER BY a.key LIMIT 10
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN EXTENDED
SELECT /*+mapjoin(b)*/ * FROM test_table1 a JOIN test_table2 b ON a.key = b.key and a.value = b.value ORDER BY a.key LIMIT 10
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (PARTITION-LEVEL SORT, 1), Map 4 (PARTITION-LEVEL SORT, 1)
        Reducer 3 <- Reducer 2 (SORT, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                  GatherStats: false
                  Filter Operator
                    isSamplingPred: false
                    predicate: (key is not null and value is not null) (type: boolean)
                    Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: int), key2 (type: int), value (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col2 (type: string)
                        null sort order: aa
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: int), _col2 (type: string)
                        Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                        tag: 0
                        value expressions: _col1 (type: int)
                        auto parallelism: false
            Execution mode: vectorized
            Path -> Alias:
#### A masked pattern was here ####
            Path -> Partition:
#### A masked pattern was here ####
                Partition
                  base file name: test_table1
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  properties:
                    COLUMN_STATS_ACCURATE {"BASIC_STATS":"true"}
                    SORTBUCKETCOLSPREFIX TRUE
                    bucket_count 16
                    bucket_field_name key
                    bucketing_version 2
                    column.name.delimiter ,
                    columns key,key2,value
                    columns.comments 
                    columns.types int:int:string
#### A masked pattern was here ####
                    name default.test_table1
                    numFiles 16
                    numRows 500
                    rawDataSize 7218
                    serialization.ddl struct test_table1 { i32 key, i32 key2, string value}
                    serialization.format 1
                    serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    totalSize 7718
#### A masked pattern was here ####
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    properties:
                      COLUMN_STATS_ACCURATE {"BASIC_STATS":"true"}
                      SORTBUCKETCOLSPREFIX TRUE
                      bucket_count 16
                      bucket_field_name key
                      bucketing_version 2
                      column.name.delimiter ,
                      columns key,key2,value
                      columns.comments 
                      columns.types int:int:string
#### A masked pattern was here ####
                      name default.test_table1
                      numFiles 16
                      numRows 500
                      rawDataSize 7218
                      serialization.ddl struct test_table1 { i32 key, i32 key2, string value}
                      serialization.format 1
                      serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      totalSize 7718
#### A masked pattern was here ####
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    name: default.test_table1
                  name: default.test_table1
            Truncated Path -> Alias:
              /test_table1 [$hdt$_0:a]
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                  GatherStats: false
                  Filter Operator
                    isSamplingPred: false
                    predicate: (key is not null and value is not null) (type: boolean)
                    Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: int), key2 (type: int), value (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col2 (type: string)
                        null sort order: aa
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: int), _col2 (type: string)
                        Statistics: Num rows: 500 Data size: 7218 Basic stats: COMPLETE Column stats: NONE
                        tag: 1
                        value expressions: _col1 (type: int)
                        auto parallelism: false
            Execution mode: vectorized
            Path -> Alias:
#### A masked pattern was here ####
            Path -> Partition:
#### A masked pattern was here ####
                Partition
                  base file name: test_table2
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  properties:
                    COLUMN_STATS_ACCURATE {"BASIC_STATS":"true"}
                    SORTBUCKETCOLSPREFIX TRUE
                    bucket_count 16
                    bucket_field_name key
                    bucketing_version 2
                    column.name.delimiter ,
                    columns key,key2,value
                    columns.comments 
                    columns.types int:int:string
#### A masked pattern was here ####
                    name default.test_table2
                    numFiles 16
                    numRows 500
                    rawDataSize 7218
                    serialization.ddl struct test_table2 { i32 key, i32 key2, string value}
                    serialization.format 1
                    serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    totalSize 7718
#### A masked pattern was here ####
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    properties:
                      COLUMN_STATS_ACCURATE {"BASIC_STATS":"true"}
                      SORTBUCKETCOLSPREFIX TRUE
                      bucket_count 16
                      bucket_field_name key
                      bucketing_version 2
                      column.name.delimiter ,
                      columns key,key2,value
                      columns.comments 
                      columns.types int:int:string
#### A masked pattern was here ####
                      name default.test_table2
                      numFiles 16
                      numRows 500
                      rawDataSize 7218
                      serialization.ddl struct test_table2 { i32 key, i32 key2, string value}
                      serialization.format 1
                      serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      totalSize 7718
#### A masked pattern was here ####
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    name: default.test_table2
                  name: default.test_table2
            Truncated Path -> Alias:
              /test_table2 [$hdt$_1:b]
        Reducer 2 
            Needs Tagging: true
            Reduce Operator Tree:
              Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int), _col2 (type: string)
                  1 _col0 (type: int), _col2 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 550 Data size: 7939 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  null sort order: a
                  sort order: +
                  Statistics: Num rows: 550 Data size: 7939 Basic stats: COMPLETE Column stats: NONE
                  tag: -1
                  TopN: 10
                  TopN Hash Memory Usage: 0.1
                  value expressions: _col1 (type: int), _col2 (type: string), _col3 (type: int), _col4 (type: int), _col5 (type: string)
                  auto parallelism: false
        Reducer 3 
            Execution mode: vectorized
            Needs Tagging: false
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: int), VALUE._col1 (type: string), VALUE._col2 (type: int), VALUE._col3 (type: int), VALUE._col4 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 550 Data size: 7939 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 10 Data size: 140 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    GlobalTableId: 0
#### A masked pattern was here ####
                    NumFilesPerFileSink: 1
                    Statistics: Num rows: 10 Data size: 140 Basic stats: COMPLETE Column stats: NONE
#### A masked pattern was here ####
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        properties:
                          columns _col0,_col1,_col2,_col3,_col4,_col5
                          columns.types int:int:string:int:int:string
                          escape.delim \
                          hive.serialization.extend.additional.nesting.levels true
                          serialization.escape.crlf true
                          serialization.format 1
                          serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    TotalFiles: 1
                    GatherStats: false
                    MultiFileSpray: false

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

PREHOOK: query: SELECT /*+mapjoin(b)*/ * FROM test_table1 a JOIN test_table2 b ON a.key = b.key and a.value = b.value ORDER BY a.key LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test_table1
PREHOOK: Input: default@test_table2
#### A masked pattern was here ####
POSTHOOK: query: SELECT /*+mapjoin(b)*/ * FROM test_table1 a JOIN test_table2 b ON a.key = b.key and a.value = b.value ORDER BY a.key LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_table1
POSTHOOK: Input: default@test_table2
#### A masked pattern was here ####
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
0	0	val_0	0	0	val_0
2	2	val_2	2	2	val_2
PREHOOK: query: DROP TABLE test_table1
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@test_table1
PREHOOK: Output: default@test_table1
POSTHOOK: query: DROP TABLE test_table1
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@test_table1
POSTHOOK: Output: default@test_table1
PREHOOK: query: DROP TABLE test_table2
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@test_table2
PREHOOK: Output: default@test_table2
POSTHOOK: query: DROP TABLE test_table2
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@test_table2
POSTHOOK: Output: default@test_table2
