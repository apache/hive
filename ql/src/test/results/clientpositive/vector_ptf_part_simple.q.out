PREHOOK: query: create table vector_ptf_part_simple_text(p_mfgr string, p_name string, p_retailprice double)
        ROW FORMAT DELIMITED
        FIELDS TERMINATED BY '\t'
        STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@vector_ptf_part_simple_text
POSTHOOK: query: create table vector_ptf_part_simple_text(p_mfgr string, p_name string, p_retailprice double)
        ROW FORMAT DELIMITED
        FIELDS TERMINATED BY '\t'
        STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@vector_ptf_part_simple_text
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/vector_ptf_part_simple.txt' OVERWRITE INTO TABLE vector_ptf_part_simple_text
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@vector_ptf_part_simple_text
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/vector_ptf_part_simple.txt' OVERWRITE INTO TABLE vector_ptf_part_simple_text
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@vector_ptf_part_simple_text
PREHOOK: query: create table vector_ptf_part_simple_orc(p_mfgr string, p_name string, p_retailprice double) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@vector_ptf_part_simple_orc
POSTHOOK: query: create table vector_ptf_part_simple_orc(p_mfgr string, p_name string, p_retailprice double) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@vector_ptf_part_simple_orc
PREHOOK: query: INSERT INTO TABLE vector_ptf_part_simple_orc SELECT * FROM vector_ptf_part_simple_text
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_text
PREHOOK: Output: default@vector_ptf_part_simple_orc
POSTHOOK: query: INSERT INTO TABLE vector_ptf_part_simple_orc SELECT * FROM vector_ptf_part_simple_text
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_text
POSTHOOK: Output: default@vector_ptf_part_simple_orc
POSTHOOK: Lineage: vector_ptf_part_simple_orc.p_mfgr SIMPLE [(vector_ptf_part_simple_text)vector_ptf_part_simple_text.FieldSchema(name:p_mfgr, type:string, comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc.p_name SIMPLE [(vector_ptf_part_simple_text)vector_ptf_part_simple_text.FieldSchema(name:p_name, type:string, comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc.p_retailprice SIMPLE [(vector_ptf_part_simple_text)vector_ptf_part_simple_text.FieldSchema(name:p_retailprice, type:double, comment:null), ]
vector_ptf_part_simple_text.p_mfgr	vector_ptf_part_simple_text.p_name	vector_ptf_part_simple_text.p_retailprice
PREHOOK: query: select * from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select * from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
vector_ptf_part_simple_orc.p_mfgr	vector_ptf_part_simple_orc.p_name	vector_ptf_part_simple_orc.p_retailprice
Manufacturer#2	almond aquamarine rose maroon antique	900.66
Manufacturer#1	almond aquamarine burnished black steel	1414.42
Manufacturer#2	almond aquamarine rose maroon antique	1698.66
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76
Manufacturer#5	almond antique medium spring khaki	1611.66
Manufacturer#5	almond antique blue firebrick mint	1789.69
Manufacturer#1	almond antique burnished rose metallic	1173.15
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66
Manufacturer#3	almond antique forest lavender goldenrod	1190.27
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76
Manufacturer#2	almond antique violet turquoise frosted	1800.7
Manufacturer#3	almond antique forest lavender goldenrod	NULL
Manufacturer#2	almond antique violet chocolate turquoise	1690.68
Manufacturer#4	almond antique violet mint lemon	1375.42
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66
Manufacturer#5	almond azure blanched chiffon midnight	1464.48
Manufacturer#3	almond antique forest lavender goldenrod	590.27
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76
Manufacturer#2	almond antique violet turquoise frosted	1800.7
Manufacturer#5	almond antique sky peru orange	1788.73
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66
Manufacturer#3	almond antique chartreuse khaki white	99.68
Manufacturer#4	almond antique gainsboro frosted violet	NULL
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76
Manufacturer#2	almond antique violet turquoise frosted	1800.7
Manufacturer#3	almond antique olive coral navajo	1337.29
Manufacturer#5	almond antique medium spring khaki	1611.66
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59
Manufacturer#3	almond antique misty red olive	1922.98
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6
Manufacturer#3	almond antique forest lavender goldenrod	1190.27
Manufacturer#2	almond aquamarine midnight light salmon	2031.98
Manufacturer#4	almond aquamarine floral ivory bisque	NULL
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1
Manufacturer#4	almond azure aquamarine papaya violet	1290.35
Manufacturer#3	almond antique metallic orange dim	55.39
Manufacturer#1	almond antique burnished rose metallic	1173.15
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv,
count(p_retailprice) over(partition by p_mfgr) as c,
count(*) over(partition by p_mfgr) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv,
count(p_retailprice) over(partition by p_mfgr) as c,
count(*) over(partition by p_mfgr) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: vector_ptf_part_simple_orc
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2]
            Reduce Output Operator
              key expressions: p_mfgr (type: string)
              sort order: +
              Map-reduce partition columns: p_mfgr (type: string)
              Reduce Sink Vectorization:
                  className: VectorReduceSinkOperator
                  native: false
                  nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                  nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              value expressions: p_name (type: string), p_retailprice (type: double)
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 3
              includeColumns: [0, 1, 2]
              dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
              partitionColumnCount: 0
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: double)
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Function definitions:
                Input definition
                  input alias: ptf_0
                  output shape: _col0: string, _col1: string, _col2: double
                  type: WINDOWING
                Windowing table definition
                  input alias: ptf_1
                  name: windowingtablefunction
                  order by: _col0 ASC NULLS FIRST
                  partition by: _col0
                  raw input shape:
                  window functions:
                      window function definition
                        alias: row_number_window_0
                        name: row_number
                        window function: GenericUDAFRowNumberEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                        isPivotResult: true
                      window function definition
                        alias: rank_window_1
                        arguments: _col0
                        name: rank
                        window function: GenericUDAFRankEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                        isPivotResult: true
                      window function definition
                        alias: dense_rank_window_2
                        arguments: _col0
                        name: dense_rank
                        window function: GenericUDAFDenseRankEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                        isPivotResult: true
                      window function definition
                        alias: first_value_window_3
                        arguments: _col2
                        name: first_value
                        window function: GenericUDAFFirstValueEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                      window function definition
                        alias: last_value_window_4
                        arguments: _col2
                        name: last_value
                        window function: GenericUDAFLastValueEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                      window function definition
                        alias: count_window_5
                        arguments: _col2
                        name: count
                        window function: GenericUDAFCountEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                      window function definition
                        alias: count_window_6
                        name: count
                        window function: GenericUDAFCountEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                        isStar: true
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), row_number_window_0 (type: int), rank_window_1 (type: int), dense_rank_window_2 (type: int), first_value_window_3 (type: double), last_value_window_4 (type: double), count_window_5 (type: bigint), count_window_6 (type: bigint)
              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv,
count(p_retailprice) over(partition by p_mfgr) as c,
count(*) over(partition by p_mfgr) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr) as rn,
rank() over(partition by p_mfgr) as r,
dense_rank() over(partition by p_mfgr) as dr,
first_value(p_retailprice) over(partition by p_mfgr) as fv,
last_value(p_retailprice) over(partition by p_mfgr) as lv,
count(p_retailprice) over(partition by p_mfgr) as c,
count(*) over(partition by p_mfgr) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	rn	r	dr	fv	lv	c	cs
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	2	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	4	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	5	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique burnished rose metallic	1173.15	6	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique burnished rose metallic	1173.15	7	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	8	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine burnished black steel	1414.42	9	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	10	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	11	1	1	1753.76	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	12	1	1	1753.76	1632.66	11	12
Manufacturer#2	almond aquamarine rose maroon antique	900.66	1	1	1	900.66	1698.66	8	8
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	2	1	1	900.66	1698.66	8	8
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	3	1	1	900.66	1698.66	8	8
Manufacturer#2	almond antique violet turquoise frosted	1800.7	4	1	1	900.66	1698.66	8	8
Manufacturer#2	almond antique violet turquoise frosted	1800.7	5	1	1	900.66	1698.66	8	8
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	6	1	1	900.66	1698.66	8	8
Manufacturer#2	almond antique violet turquoise frosted	1800.7	7	1	1	900.66	1698.66	8	8
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	8	1	1	900.66	1698.66	8	8
Manufacturer#3	almond antique olive coral navajo	1337.29	1	1	1	1337.29	99.68	7	8
Manufacturer#3	almond antique forest lavender goldenrod	590.27	2	1	1	1337.29	99.68	7	8
Manufacturer#3	almond antique forest lavender goldenrod	NULL	3	1	1	1337.29	99.68	7	8
Manufacturer#3	almond antique metallic orange dim	55.39	4	1	1	1337.29	99.68	7	8
Manufacturer#3	almond antique misty red olive	1922.98	5	1	1	1337.29	99.68	7	8
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	6	1	1	1337.29	99.68	7	8
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	7	1	1	1337.29	99.68	7	8
Manufacturer#3	almond antique chartreuse khaki white	99.68	8	1	1	1337.29	99.68	7	8
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	1	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	2	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond antique gainsboro frosted violet	NULL	3	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	4	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond antique violet mint lemon	1375.42	5	1	1	1290.35	1206.26	4	6
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	6	1	1	1290.35	1206.26	4	6
Manufacturer#5	almond antique sky peru orange	1788.73	1	1	1	1788.73	1018.1	6	6
Manufacturer#5	almond antique blue firebrick mint	1789.69	2	1	1	1788.73	1018.1	6	6
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	3	1	1	1788.73	1018.1	6	6
Manufacturer#5	almond antique medium spring khaki	1611.66	4	1	1	1788.73	1018.1	6	6
Manufacturer#5	almond antique medium spring khaki	1611.66	5	1	1	1788.73	1018.1	6	6
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	6	1	1	1788.73	1018.1	6	6
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name) as rn,
rank() over(partition by p_mfgr order by p_name) as r,
dense_rank() over(partition by p_mfgr order by p_name) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name) as c,
count(*) over(partition by p_mfgr order by p_name) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name) as rn,
rank() over(partition by p_mfgr order by p_name) as r,
dense_rank() over(partition by p_mfgr order by p_name) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name) as c,
count(*) over(partition by p_mfgr order by p_name) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: vector_ptf_part_simple_orc
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2]
            Reduce Output Operator
              key expressions: p_mfgr (type: string), p_name (type: string)
              sort order: ++
              Map-reduce partition columns: p_mfgr (type: string)
              Reduce Sink Vectorization:
                  className: VectorReduceSinkOperator
                  native: false
                  nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                  nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              value expressions: p_retailprice (type: double)
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 3
              includeColumns: [0, 1, 2]
              dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
              partitionColumnCount: 0
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: double)
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Function definitions:
                Input definition
                  input alias: ptf_0
                  output shape: _col0: string, _col1: string, _col2: double
                  type: WINDOWING
                Windowing table definition
                  input alias: ptf_1
                  name: windowingtablefunction
                  order by: _col1 ASC NULLS FIRST
                  partition by: _col0
                  raw input shape:
                  window functions:
                      window function definition
                        alias: row_number_window_0
                        name: row_number
                        window function: GenericUDAFRowNumberEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                        isPivotResult: true
                      window function definition
                        alias: rank_window_1
                        arguments: _col1
                        name: rank
                        window function: GenericUDAFRankEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                        isPivotResult: true
                      window function definition
                        alias: dense_rank_window_2
                        arguments: _col1
                        name: dense_rank
                        window function: GenericUDAFDenseRankEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                        isPivotResult: true
                      window function definition
                        alias: first_value_window_3
                        arguments: _col2
                        name: first_value
                        window function: GenericUDAFFirstValueEvaluator
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: last_value_window_4
                        arguments: _col2
                        name: last_value
                        window function: GenericUDAFLastValueEvaluator
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: count_window_5
                        arguments: _col2
                        name: count
                        window function: GenericUDAFCountEvaluator
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: count_window_6
                        name: count
                        window function: GenericUDAFCountEvaluator
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                        isStar: true
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), row_number_window_0 (type: int), rank_window_1 (type: int), dense_rank_window_2 (type: int), first_value_window_3 (type: double), last_value_window_4 (type: double), count_window_5 (type: bigint), count_window_6 (type: bigint)
              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name) as rn,
rank() over(partition by p_mfgr order by p_name) as r,
dense_rank() over(partition by p_mfgr order by p_name) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name) as c,
count(*) over(partition by p_mfgr order by p_name) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name) as rn,
rank() over(partition by p_mfgr order by p_name) as r,
dense_rank() over(partition by p_mfgr order by p_name) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name) as c,
count(*) over(partition by p_mfgr order by p_name) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	rn	r	dr	fv	lv	c	cs
Manufacturer#1	almond antique burnished rose metallic	1173.15	1	1	1	1173.15	1173.15	2	2
Manufacturer#1	almond antique burnished rose metallic	1173.15	2	1	1	1173.15	1173.15	2	2
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	4	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	5	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	6	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	7	7	3	1173.15	1602.59	7	7
Manufacturer#1	almond aquamarine burnished black steel	1414.42	8	8	4	1173.15	1414.42	8	8
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	9	9	5	1173.15	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	10	9	5	1173.15	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	11	9	5	1173.15	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	12	9	5	1173.15	1632.66	11	12
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1	1	1	1690.68	1690.68	1	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	2	2	2	1690.68	1800.7	4	4
Manufacturer#2	almond antique violet turquoise frosted	1800.7	3	2	2	1690.68	1800.7	4	4
Manufacturer#2	almond antique violet turquoise frosted	1800.7	4	2	2	1690.68	1800.7	4	4
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	5	5	3	1690.68	2031.98	5	5
Manufacturer#2	almond aquamarine rose maroon antique	900.66	6	6	4	1690.68	1698.66	7	7
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	7	6	4	1690.68	1698.66	7	7
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	8	8	5	1690.68	1000.6	8	8
Manufacturer#3	almond antique chartreuse khaki white	99.68	1	1	1	99.68	99.68	1	1
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	2	2	2	99.68	NULL	4	5
Manufacturer#3	almond antique forest lavender goldenrod	590.27	3	2	2	99.68	NULL	4	5
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	4	2	2	99.68	NULL	4	5
Manufacturer#3	almond antique forest lavender goldenrod	NULL	5	2	2	99.68	NULL	4	5
Manufacturer#3	almond antique metallic orange dim	55.39	6	6	3	99.68	55.39	5	6
Manufacturer#3	almond antique misty red olive	1922.98	7	7	4	99.68	1922.98	6	7
Manufacturer#3	almond antique olive coral navajo	1337.29	8	8	5	99.68	1337.29	7	8
Manufacturer#4	almond antique gainsboro frosted violet	NULL	1	1	1	NULL	NULL	0	1
Manufacturer#4	almond antique violet mint lemon	1375.42	2	2	2	NULL	1375.42	1	2
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	3	3	3	NULL	1206.26	2	4
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	4	3	3	NULL	1206.26	2	4
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	5	5	4	NULL	1844.92	3	5
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	6	6	5	NULL	1290.35	4	6
Manufacturer#5	almond antique blue firebrick mint	1789.69	1	1	1	1789.69	1789.69	1	1
Manufacturer#5	almond antique medium spring khaki	1611.66	2	2	2	1789.69	1611.66	3	3
Manufacturer#5	almond antique medium spring khaki	1611.66	3	2	2	1789.69	1611.66	3	3
Manufacturer#5	almond antique sky peru orange	1788.73	4	4	3	1789.69	1788.73	4	4
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	5	5	4	1789.69	1018.1	5	5
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	6	6	5	1789.69	1464.48	6	6
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: vector_ptf_part_simple_orc
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2]
            Reduce Output Operator
              key expressions: p_mfgr (type: string), p_name (type: string)
              sort order: ++
              Map-reduce partition columns: p_mfgr (type: string)
              Reduce Sink Vectorization:
                  className: VectorReduceSinkOperator
                  native: false
                  nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                  nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              value expressions: p_retailprice (type: double)
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 3
              includeColumns: [0, 1, 2]
              dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
              partitionColumnCount: 0
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: double)
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Function definitions:
                Input definition
                  input alias: ptf_0
                  output shape: _col0: string, _col1: string, _col2: double
                  type: WINDOWING
                Windowing table definition
                  input alias: ptf_1
                  name: windowingtablefunction
                  order by: _col1 ASC NULLS FIRST
                  partition by: _col0
                  raw input shape:
                  window functions:
                      window function definition
                        alias: row_number_window_0
                        name: row_number
                        window function: GenericUDAFRowNumberEvaluator
                        window frame: RANGE PRECEDING(MAX)~FOLLOWING(MAX)
                        isPivotResult: true
                      window function definition
                        alias: rank_window_1
                        arguments: _col1
                        name: rank
                        window function: GenericUDAFRankEvaluator
                        window frame: RANGE PRECEDING(MAX)~FOLLOWING(MAX)
                        isPivotResult: true
                      window function definition
                        alias: dense_rank_window_2
                        arguments: _col1
                        name: dense_rank
                        window function: GenericUDAFDenseRankEvaluator
                        window frame: RANGE PRECEDING(MAX)~FOLLOWING(MAX)
                        isPivotResult: true
                      window function definition
                        alias: first_value_window_3
                        arguments: _col2
                        name: first_value
                        window function: GenericUDAFFirstValueEvaluator
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: last_value_window_4
                        arguments: _col2
                        name: last_value
                        window function: GenericUDAFLastValueEvaluator
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: count_window_5
                        arguments: _col2
                        name: count
                        window function: GenericUDAFCountEvaluator
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: count_window_6
                        name: count
                        window function: GenericUDAFCountEvaluator
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                        isStar: true
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), row_number_window_0 (type: int), rank_window_1 (type: int), dense_rank_window_2 (type: int), first_value_window_3 (type: double), last_value_window_4 (type: double), count_window_5 (type: bigint), count_window_6 (type: bigint)
              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
row_number() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as rn,
rank() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as r,
dense_rank() over(partition by p_mfgr order by p_name range between unbounded preceding and unbounded following) as dr,
first_value(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as fv,
last_value(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as lv,
count(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as c,
count(*) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as cs
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	rn	r	dr	fv	lv	c	cs
Manufacturer#1	almond antique burnished rose metallic	1173.15	1	1	1	1173.15	1173.15	2	2
Manufacturer#1	almond antique burnished rose metallic	1173.15	2	1	1	1173.15	1173.15	2	2
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	4	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	5	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	6	3	2	1173.15	1753.76	6	6
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	7	7	3	1173.15	1602.59	7	7
Manufacturer#1	almond aquamarine burnished black steel	1414.42	8	8	4	1173.15	1414.42	8	8
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	9	9	5	1173.15	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	10	9	5	1173.15	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	11	9	5	1173.15	1632.66	11	12
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	12	9	5	1173.15	1632.66	11	12
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1	1	1	1690.68	1690.68	1	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	2	2	2	1690.68	1800.7	4	4
Manufacturer#2	almond antique violet turquoise frosted	1800.7	3	2	2	1690.68	1800.7	4	4
Manufacturer#2	almond antique violet turquoise frosted	1800.7	4	2	2	1690.68	1800.7	4	4
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	5	5	3	1690.68	2031.98	5	5
Manufacturer#2	almond aquamarine rose maroon antique	900.66	6	6	4	1690.68	1698.66	7	7
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	7	6	4	1690.68	1698.66	7	7
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	8	8	5	1690.68	1000.6	8	8
Manufacturer#3	almond antique chartreuse khaki white	99.68	1	1	1	99.68	99.68	1	1
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	2	2	2	99.68	NULL	4	5
Manufacturer#3	almond antique forest lavender goldenrod	590.27	3	2	2	99.68	NULL	4	5
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	4	2	2	99.68	NULL	4	5
Manufacturer#3	almond antique forest lavender goldenrod	NULL	5	2	2	99.68	NULL	4	5
Manufacturer#3	almond antique metallic orange dim	55.39	6	6	3	99.68	55.39	5	6
Manufacturer#3	almond antique misty red olive	1922.98	7	7	4	99.68	1922.98	6	7
Manufacturer#3	almond antique olive coral navajo	1337.29	8	8	5	99.68	1337.29	7	8
Manufacturer#4	almond antique gainsboro frosted violet	NULL	1	1	1	NULL	NULL	0	1
Manufacturer#4	almond antique violet mint lemon	1375.42	2	2	2	NULL	1375.42	1	2
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	3	3	3	NULL	1206.26	2	4
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	4	3	3	NULL	1206.26	2	4
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	5	5	4	NULL	1844.92	3	5
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	6	6	5	NULL	1290.35	4	6
Manufacturer#5	almond antique blue firebrick mint	1789.69	1	1	1	1789.69	1789.69	1	1
Manufacturer#5	almond antique medium spring khaki	1611.66	2	2	2	1789.69	1611.66	3	3
Manufacturer#5	almond antique medium spring khaki	1611.66	3	2	2	1789.69	1611.66	3	3
Manufacturer#5	almond antique sky peru orange	1788.73	4	4	3	1789.69	1788.73	4	4
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	5	5	4	1789.69	1018.1	5	5
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	6	6	5	1789.69	1464.48	6	6
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr) as s,
min(p_retailprice) over(partition by p_mfgr) as mi,
max(p_retailprice) over(partition by p_mfgr) as ma,
avg(p_retailprice) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr) as s,
min(p_retailprice) over(partition by p_mfgr) as mi,
max(p_retailprice) over(partition by p_mfgr) as ma,
avg(p_retailprice) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: vector_ptf_part_simple_orc
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2]
            Reduce Output Operator
              key expressions: p_mfgr (type: string)
              sort order: +
              Map-reduce partition columns: p_mfgr (type: string)
              Reduce Sink Vectorization:
                  className: VectorReduceSinkOperator
                  native: false
                  nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                  nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              value expressions: p_name (type: string), p_retailprice (type: double)
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 3
              includeColumns: [0, 1, 2]
              dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
              partitionColumnCount: 0
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: double)
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Function definitions:
                Input definition
                  input alias: ptf_0
                  output shape: _col0: string, _col1: string, _col2: double
                  type: WINDOWING
                Windowing table definition
                  input alias: ptf_1
                  name: windowingtablefunction
                  order by: _col0 ASC NULLS FIRST
                  partition by: _col0
                  raw input shape:
                  window functions:
                      window function definition
                        alias: sum_window_0
                        arguments: _col2
                        name: sum
                        window function: GenericUDAFSumDouble
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                      window function definition
                        alias: min_window_1
                        arguments: _col2
                        name: min
                        window function: GenericUDAFMinEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                      window function definition
                        alias: max_window_2
                        arguments: _col2
                        name: max
                        window function: GenericUDAFMaxEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                      window function definition
                        alias: avg_window_3
                        arguments: _col2
                        name: avg
                        window function: GenericUDAFAverageEvaluatorDouble
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), sum_window_0 (type: double), min_window_1 (type: double), max_window_2 (type: double), avg_window_3 (type: double)
              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr) as s,
min(p_retailprice) over(partition by p_mfgr) as mi,
max(p_retailprice) over(partition by p_mfgr) as ma,
avg(p_retailprice) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr) as s,
min(p_retailprice) over(partition by p_mfgr) as mi,
max(p_retailprice) over(partition by p_mfgr) as ma,
avg(p_retailprice) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	s	mi	ma	av
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique burnished rose metallic	1173.15	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique burnished rose metallic	1173.15	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine burnished black steel	1414.42	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#2	almond aquamarine rose maroon antique	900.66	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond antique violet turquoise frosted	1800.7	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond antique violet turquoise frosted	1800.7	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond antique violet turquoise frosted	1800.7	12724.68	900.66	2031.98	1590.585
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	12724.68	900.66	2031.98	1590.585
Manufacturer#3	almond antique olive coral navajo	1337.29	6386.1500000000015	55.39	1922.98	912.307142857143
Manufacturer#3	almond antique forest lavender goldenrod	590.27	6386.1500000000015	55.39	1922.98	912.307142857143
Manufacturer#3	almond antique forest lavender goldenrod	NULL	6386.1500000000015	55.39	1922.98	912.307142857143
Manufacturer#3	almond antique metallic orange dim	55.39	6386.1500000000015	55.39	1922.98	912.307142857143
Manufacturer#3	almond antique misty red olive	1922.98	6386.1500000000015	55.39	1922.98	912.307142857143
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	6386.1500000000015	55.39	1922.98	912.307142857143
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	6386.1500000000015	55.39	1922.98	912.307142857143
Manufacturer#3	almond antique chartreuse khaki white	99.68	6386.1500000000015	55.39	1922.98	912.307142857143
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#4	almond antique gainsboro frosted violet	NULL	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#4	almond antique violet mint lemon	1375.42	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#5	almond antique sky peru orange	1788.73	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#5	almond antique blue firebrick mint	1789.69	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#5	almond antique medium spring khaki	1611.66	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#5	almond antique medium spring khaki	1611.66	9284.32	1018.1	1789.69	1547.3866666666665
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	9284.32	1018.1	1789.69	1547.3866666666665
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: vector_ptf_part_simple_orc
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2]
            Reduce Output Operator
              key expressions: p_mfgr (type: string), p_name (type: string)
              sort order: ++
              Map-reduce partition columns: p_mfgr (type: string)
              Reduce Sink Vectorization:
                  className: VectorReduceSinkOperator
                  native: false
                  nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                  nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              value expressions: p_retailprice (type: double)
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 3
              includeColumns: [0, 1, 2]
              dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
              partitionColumnCount: 0
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: double)
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Function definitions:
                Input definition
                  input alias: ptf_0
                  output shape: _col0: string, _col1: string, _col2: double
                  type: WINDOWING
                Windowing table definition
                  input alias: ptf_1
                  name: windowingtablefunction
                  order by: _col1 ASC NULLS FIRST
                  partition by: _col0
                  raw input shape:
                  window functions:
                      window function definition
                        alias: sum_window_0
                        arguments: _col2
                        name: sum
                        window function: GenericUDAFSumDouble
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: min_window_1
                        arguments: _col2
                        name: min
                        window function: GenericUDAFMinEvaluator
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: max_window_2
                        arguments: _col2
                        name: max
                        window function: GenericUDAFMaxEvaluator
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: avg_window_3
                        arguments: _col2
                        name: avg
                        window function: GenericUDAFAverageEvaluatorDouble
                        window frame: RANGE PRECEDING(MAX)~CURRENT
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), sum_window_0 (type: double), min_window_1 (type: double), max_window_2 (type: double), avg_window_3 (type: double)
              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	s	mi	ma	av
Manufacturer#1	almond antique burnished rose metallic	1173.15	2346.3	1173.15	1173.15	1173.15
Manufacturer#1	almond antique burnished rose metallic	1173.15	2346.3	1173.15	1173.15	1173.15
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	10963.93	1173.15	1753.76	1566.2757142857142
Manufacturer#1	almond aquamarine burnished black steel	1414.42	12378.35	1173.15	1753.76	1547.29375
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1690.68	1690.68	1690.68	1690.68
Manufacturer#2	almond antique violet turquoise frosted	1800.7	7092.780000000001	1690.68	1800.7	1773.1950000000002
Manufacturer#2	almond antique violet turquoise frosted	1800.7	7092.780000000001	1690.68	1800.7	1773.1950000000002
Manufacturer#2	almond antique violet turquoise frosted	1800.7	7092.780000000001	1690.68	1800.7	1773.1950000000002
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	9124.76	1690.68	2031.98	1824.952
Manufacturer#2	almond aquamarine rose maroon antique	900.66	11724.08	900.66	2031.98	1674.8685714285714
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	11724.08	900.66	2031.98	1674.8685714285714
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	12724.68	900.66	2031.98	1590.585
Manufacturer#3	almond antique chartreuse khaki white	99.68	99.68	99.68	99.68	99.68
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique forest lavender goldenrod	590.27	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique forest lavender goldenrod	NULL	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique metallic orange dim	55.39	3125.8799999999997	55.39	1190.27	625.1759999999999
Manufacturer#3	almond antique misty red olive	1922.98	5048.86	55.39	1922.98	841.4766666666666
Manufacturer#3	almond antique olive coral navajo	1337.29	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#4	almond antique gainsboro frosted violet	NULL	NULL	NULL	NULL	NULL
Manufacturer#4	almond antique violet mint lemon	1375.42	1375.42	1375.42	1375.42	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	2581.6800000000003	1206.26	1375.42	1290.8400000000001
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	2581.6800000000003	1206.26	1375.42	1290.8400000000001
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	4426.6	1206.26	1844.92	1475.5333333333335
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#5	almond antique blue firebrick mint	1789.69	1789.69	1789.69	1789.69	1789.69
Manufacturer#5	almond antique medium spring khaki	1611.66	5013.01	1611.66	1789.69	1671.0033333333333
Manufacturer#5	almond antique medium spring khaki	1611.66	5013.01	1611.66	1789.69	1671.0033333333333
Manufacturer#5	almond antique sky peru orange	1788.73	6801.74	1611.66	1789.69	1700.435
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	7819.84	1018.1	1789.69	1563.968
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	9284.32	1018.1	1789.69	1547.3866666666665
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: vector_ptf_part_simple_orc
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2]
            Reduce Output Operator
              key expressions: p_mfgr (type: string), p_name (type: string)
              sort order: ++
              Map-reduce partition columns: p_mfgr (type: string)
              Reduce Sink Vectorization:
                  className: VectorReduceSinkOperator
                  native: false
                  nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                  nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              value expressions: p_retailprice (type: double)
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 3
              includeColumns: [0, 1, 2]
              dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
              partitionColumnCount: 0
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: double)
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Function definitions:
                Input definition
                  input alias: ptf_0
                  output shape: _col0: string, _col1: string, _col2: double
                  type: WINDOWING
                Windowing table definition
                  input alias: ptf_1
                  name: windowingtablefunction
                  order by: _col1 ASC NULLS FIRST
                  partition by: _col0
                  raw input shape:
                  window functions:
                      window function definition
                        alias: sum_window_0
                        arguments: _col2
                        name: sum
                        window function: GenericUDAFSumDouble
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: min_window_1
                        arguments: _col2
                        name: min
                        window function: GenericUDAFMinEvaluator
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: max_window_2
                        arguments: _col2
                        name: max
                        window function: GenericUDAFMaxEvaluator
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: avg_window_3
                        arguments: _col2
                        name: avg
                        window function: GenericUDAFAverageEvaluatorDouble
                        window frame: RANGE PRECEDING(MAX)~CURRENT
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), sum_window_0 (type: double), min_window_1 (type: double), max_window_2 (type: double), avg_window_3 (type: double)
              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name range between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	s	mi	ma	av
Manufacturer#1	almond antique burnished rose metallic	1173.15	2346.3	1173.15	1173.15	1173.15
Manufacturer#1	almond antique burnished rose metallic	1173.15	2346.3	1173.15	1173.15	1173.15
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	10963.93	1173.15	1753.76	1566.2757142857142
Manufacturer#1	almond aquamarine burnished black steel	1414.42	12378.35	1173.15	1753.76	1547.29375
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1690.68	1690.68	1690.68	1690.68
Manufacturer#2	almond antique violet turquoise frosted	1800.7	7092.780000000001	1690.68	1800.7	1773.1950000000002
Manufacturer#2	almond antique violet turquoise frosted	1800.7	7092.780000000001	1690.68	1800.7	1773.1950000000002
Manufacturer#2	almond antique violet turquoise frosted	1800.7	7092.780000000001	1690.68	1800.7	1773.1950000000002
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	9124.76	1690.68	2031.98	1824.952
Manufacturer#2	almond aquamarine rose maroon antique	900.66	11724.08	900.66	2031.98	1674.8685714285714
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	11724.08	900.66	2031.98	1674.8685714285714
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	12724.68	900.66	2031.98	1590.585
Manufacturer#3	almond antique chartreuse khaki white	99.68	99.68	99.68	99.68	99.68
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique forest lavender goldenrod	590.27	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique forest lavender goldenrod	NULL	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique metallic orange dim	55.39	3125.8799999999997	55.39	1190.27	625.1759999999999
Manufacturer#3	almond antique misty red olive	1922.98	5048.86	55.39	1922.98	841.4766666666666
Manufacturer#3	almond antique olive coral navajo	1337.29	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#4	almond antique gainsboro frosted violet	NULL	NULL	NULL	NULL	NULL
Manufacturer#4	almond antique violet mint lemon	1375.42	1375.42	1375.42	1375.42	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	2581.6800000000003	1206.26	1375.42	1290.8400000000001
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	2581.6800000000003	1206.26	1375.42	1290.8400000000001
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	4426.6	1206.26	1844.92	1475.5333333333335
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#5	almond antique blue firebrick mint	1789.69	1789.69	1789.69	1789.69	1789.69
Manufacturer#5	almond antique medium spring khaki	1611.66	5013.01	1611.66	1789.69	1671.0033333333333
Manufacturer#5	almond antique medium spring khaki	1611.66	5013.01	1611.66	1789.69	1671.0033333333333
Manufacturer#5	almond antique sky peru orange	1788.73	6801.74	1611.66	1789.69	1700.435
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	7819.84	1018.1	1789.69	1563.968
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	9284.32	1018.1	1789.69	1547.3866666666665
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: vector_ptf_part_simple_orc
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2]
            Reduce Output Operator
              key expressions: p_mfgr (type: string), p_name (type: string)
              sort order: ++
              Map-reduce partition columns: p_mfgr (type: string)
              Reduce Sink Vectorization:
                  className: VectorReduceSinkOperator
                  native: false
                  nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                  nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              value expressions: p_retailprice (type: double)
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 3
              includeColumns: [0, 1, 2]
              dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
              partitionColumnCount: 0
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: double)
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Function definitions:
                Input definition
                  input alias: ptf_0
                  output shape: _col0: string, _col1: string, _col2: double
                  type: WINDOWING
                Windowing table definition
                  input alias: ptf_1
                  name: windowingtablefunction
                  order by: _col1 ASC NULLS FIRST
                  partition by: _col0
                  raw input shape:
                  window functions:
                      window function definition
                        alias: sum_window_0
                        arguments: _col2
                        name: sum
                        window function: GenericUDAFSumDouble
                        window frame: ROWS PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: min_window_1
                        arguments: _col2
                        name: min
                        window function: GenericUDAFMinEvaluator
                        window frame: ROWS PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: max_window_2
                        arguments: _col2
                        name: max
                        window function: GenericUDAFMaxEvaluator
                        window frame: ROWS PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: avg_window_3
                        arguments: _col2
                        name: avg
                        window function: GenericUDAFAverageEvaluatorDouble
                        window frame: ROWS PRECEDING(MAX)~CURRENT
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), sum_window_0 (type: double), min_window_1 (type: double), max_window_2 (type: double), avg_window_3 (type: double)
              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name rows between unbounded preceding and current row) as av 
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	s	mi	ma	av
Manufacturer#1	almond antique burnished rose metallic	1173.15	1173.15	1173.15	1173.15	1173.15
Manufacturer#1	almond antique burnished rose metallic	1173.15	2346.3	1173.15	1173.15	1173.15
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	4100.06	1173.15	1753.76	1366.6866666666667
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	5853.820000000001	1173.15	1753.76	1463.4550000000002
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	7607.580000000001	1173.15	1753.76	1521.516
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	9361.34	1173.15	1753.76	1560.2233333333334
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	10963.93	1173.15	1753.76	1566.2757142857142
Manufacturer#1	almond aquamarine burnished black steel	1414.42	12378.35	1173.15	1753.76	1547.29375
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	14011.01	1173.15	1753.76	1556.778888888889
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	14011.01	1173.15	1753.76	1556.778888888889
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	15643.67	1173.15	1753.76	1564.367
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	17276.33	1173.15	1753.76	1570.5754545454547
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1690.68	1690.68	1690.68	1690.68
Manufacturer#2	almond antique violet turquoise frosted	1800.7	3491.38	1690.68	1800.7	1745.69
Manufacturer#2	almond antique violet turquoise frosted	1800.7	5292.08	1690.68	1800.7	1764.0266666666666
Manufacturer#2	almond antique violet turquoise frosted	1800.7	7092.78	1690.68	1800.7	1773.195
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	9124.76	1690.68	2031.98	1824.952
Manufacturer#2	almond aquamarine rose maroon antique	900.66	10025.42	900.66	2031.98	1670.9033333333334
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	11724.08	900.66	2031.98	1674.8685714285714
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	12724.68	900.66	2031.98	1590.585
Manufacturer#3	almond antique chartreuse khaki white	99.68	99.68	99.68	99.68	99.68
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	1289.95	99.68	1190.27	644.975
Manufacturer#3	almond antique forest lavender goldenrod	590.27	1880.22	99.68	1190.27	626.74
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique forest lavender goldenrod	NULL	3070.49	99.68	1190.27	767.6225
Manufacturer#3	almond antique metallic orange dim	55.39	3125.8799999999997	55.39	1190.27	625.1759999999999
Manufacturer#3	almond antique misty red olive	1922.98	5048.86	55.39	1922.98	841.4766666666666
Manufacturer#3	almond antique olive coral navajo	1337.29	6386.15	55.39	1922.98	912.3071428571428
Manufacturer#4	almond antique gainsboro frosted violet	NULL	NULL	NULL	NULL	NULL
Manufacturer#4	almond antique violet mint lemon	1375.42	1375.42	1375.42	1375.42	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	1375.42	1375.42	1375.42	1375.42
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	2581.6800000000003	1206.26	1375.42	1290.8400000000001
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	4426.6	1206.26	1844.92	1475.5333333333335
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	5716.950000000001	1206.26	1844.92	1429.2375000000002
Manufacturer#5	almond antique blue firebrick mint	1789.69	1789.69	1789.69	1789.69	1789.69
Manufacturer#5	almond antique medium spring khaki	1611.66	3401.3500000000004	1611.66	1789.69	1700.6750000000002
Manufacturer#5	almond antique medium spring khaki	1611.66	5013.01	1611.66	1789.69	1671.0033333333333
Manufacturer#5	almond antique sky peru orange	1788.73	6801.74	1611.66	1789.69	1700.435
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	7819.84	1018.1	1789.69	1563.968
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	9284.32	1018.1	1789.69	1547.3866666666665
PREHOOK: query: create table vector_ptf_part_simple_text_decimal(p_mfgr string, p_name string, p_retailprice decimal(38,18))
        ROW FORMAT DELIMITED
        FIELDS TERMINATED BY '\t'
        STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@vector_ptf_part_simple_text_decimal
POSTHOOK: query: create table vector_ptf_part_simple_text_decimal(p_mfgr string, p_name string, p_retailprice decimal(38,18))
        ROW FORMAT DELIMITED
        FIELDS TERMINATED BY '\t'
        STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@vector_ptf_part_simple_text_decimal
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/vector_ptf_part_simple.txt' OVERWRITE INTO TABLE vector_ptf_part_simple_text_decimal
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@vector_ptf_part_simple_text_decimal
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/vector_ptf_part_simple.txt' OVERWRITE INTO TABLE vector_ptf_part_simple_text_decimal
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@vector_ptf_part_simple_text_decimal
PREHOOK: query: create table vector_ptf_part_simple_orc_decimal(p_mfgr string, p_name string, p_retailprice decimal(38,18)) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@vector_ptf_part_simple_orc_decimal
POSTHOOK: query: create table vector_ptf_part_simple_orc_decimal(p_mfgr string, p_name string, p_retailprice decimal(38,18)) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@vector_ptf_part_simple_orc_decimal
PREHOOK: query: INSERT INTO TABLE vector_ptf_part_simple_orc_decimal SELECT * FROM vector_ptf_part_simple_text_decimal
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_text_decimal
PREHOOK: Output: default@vector_ptf_part_simple_orc_decimal
POSTHOOK: query: INSERT INTO TABLE vector_ptf_part_simple_orc_decimal SELECT * FROM vector_ptf_part_simple_text_decimal
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_text_decimal
POSTHOOK: Output: default@vector_ptf_part_simple_orc_decimal
POSTHOOK: Lineage: vector_ptf_part_simple_orc_decimal.p_mfgr SIMPLE [(vector_ptf_part_simple_text_decimal)vector_ptf_part_simple_text_decimal.FieldSchema(name:p_mfgr, type:string, comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc_decimal.p_name SIMPLE [(vector_ptf_part_simple_text_decimal)vector_ptf_part_simple_text_decimal.FieldSchema(name:p_name, type:string, comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc_decimal.p_retailprice SIMPLE [(vector_ptf_part_simple_text_decimal)vector_ptf_part_simple_text_decimal.FieldSchema(name:p_retailprice, type:decimal(38,18), comment:null), ]
vector_ptf_part_simple_text_decimal.p_mfgr	vector_ptf_part_simple_text_decimal.p_name	vector_ptf_part_simple_text_decimal.p_retailprice
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr) as s,
min(p_retailprice) over(partition by p_mfgr) as mi,
max(p_retailprice) over(partition by p_mfgr) as ma,
avg(p_retailprice) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc_decimal
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr) as s,
min(p_retailprice) over(partition by p_mfgr) as mi,
max(p_retailprice) over(partition by p_mfgr) as ma,
avg(p_retailprice) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc_decimal
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: vector_ptf_part_simple_orc_decimal
            Statistics: Num rows: 40 Data size: 12792 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2]
            Reduce Output Operator
              key expressions: p_mfgr (type: string)
              sort order: +
              Map-reduce partition columns: p_mfgr (type: string)
              Reduce Sink Vectorization:
                  className: VectorReduceSinkOperator
                  native: false
                  nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                  nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
              Statistics: Num rows: 40 Data size: 12792 Basic stats: COMPLETE Column stats: NONE
              value expressions: p_name (type: string), p_retailprice (type: decimal(38,18))
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 3
              includeColumns: [0, 1, 2]
              dataColumns: p_mfgr:string, p_name:string, p_retailprice:decimal(38,18)
              partitionColumnCount: 0
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: decimal(38,18))
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 40 Data size: 12792 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Function definitions:
                Input definition
                  input alias: ptf_0
                  output shape: _col0: string, _col1: string, _col2: decimal(38,18)
                  type: WINDOWING
                Windowing table definition
                  input alias: ptf_1
                  name: windowingtablefunction
                  order by: _col0 ASC NULLS FIRST
                  partition by: _col0
                  raw input shape:
                  window functions:
                      window function definition
                        alias: sum_window_0
                        arguments: _col2
                        name: sum
                        window function: GenericUDAFSumHiveDecimal
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                      window function definition
                        alias: min_window_1
                        arguments: _col2
                        name: min
                        window function: GenericUDAFMinEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                      window function definition
                        alias: max_window_2
                        arguments: _col2
                        name: max
                        window function: GenericUDAFMaxEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                      window function definition
                        alias: avg_window_3
                        arguments: _col2
                        name: avg
                        window function: GenericUDAFAverageEvaluatorDecimal
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
            Statistics: Num rows: 40 Data size: 12792 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: string), _col1 (type: string), _col2 (type: decimal(38,18)), sum_window_0 (type: decimal(38,18)), min_window_1 (type: decimal(38,18)), max_window_2 (type: decimal(38,18)), avg_window_3 (type: decimal(38,18))
              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
              Statistics: Num rows: 40 Data size: 12792 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 40 Data size: 12792 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr) as s,
min(p_retailprice) over(partition by p_mfgr) as mi,
max(p_retailprice) over(partition by p_mfgr) as ma,
avg(p_retailprice) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc_decimal
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc_decimal
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr) as s,
min(p_retailprice) over(partition by p_mfgr) as mi,
max(p_retailprice) over(partition by p_mfgr) as ma,
avg(p_retailprice) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc_decimal
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc_decimal
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	s	mi	ma	av
Manufacturer#1	almond antique chartreuse lavender yellow	1753.760000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond antique chartreuse lavender yellow	1753.760000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.660000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond antique chartreuse lavender yellow	1753.760000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond antique burnished rose metallic	1173.150000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond antique burnished rose metallic	1173.150000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.660000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond aquamarine burnished black steel	1414.420000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond antique chartreuse lavender yellow	1753.760000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.590000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.660000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#2	almond aquamarine rose maroon antique	900.660000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#2	almond aquamarine midnight light salmon	2031.980000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.600000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#2	almond antique violet turquoise frosted	1800.700000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#2	almond antique violet turquoise frosted	1800.700000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#2	almond antique violet chocolate turquoise	1690.680000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#2	almond antique violet turquoise frosted	1800.700000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#2	almond aquamarine rose maroon antique	1698.660000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#3	almond antique olive coral navajo	1337.290000000000000000	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
Manufacturer#3	almond antique forest lavender goldenrod	590.270000000000000000	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
Manufacturer#3	almond antique forest lavender goldenrod	NULL	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
Manufacturer#3	almond antique metallic orange dim	55.390000000000000000	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
Manufacturer#3	almond antique misty red olive	1922.980000000000000000	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
Manufacturer#3	almond antique forest lavender goldenrod	1190.270000000000000000	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
Manufacturer#3	almond antique forest lavender goldenrod	1190.270000000000000000	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
Manufacturer#3	almond antique chartreuse khaki white	99.680000000000000000	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
Manufacturer#4	almond azure aquamarine papaya violet	1290.350000000000000000	5716.950000000000000000	1206.260000000000000000	1844.920000000000000000	1429.237500000000000000
Manufacturer#4	almond aquamarine yellow dodger mint	1844.920000000000000000	5716.950000000000000000	1206.260000000000000000	1844.920000000000000000	1429.237500000000000000
Manufacturer#4	almond antique gainsboro frosted violet	NULL	5716.950000000000000000	1206.260000000000000000	1844.920000000000000000	1429.237500000000000000
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	5716.950000000000000000	1206.260000000000000000	1844.920000000000000000	1429.237500000000000000
Manufacturer#4	almond antique violet mint lemon	1375.420000000000000000	5716.950000000000000000	1206.260000000000000000	1844.920000000000000000	1429.237500000000000000
Manufacturer#4	almond aquamarine floral ivory bisque	1206.260000000000000000	5716.950000000000000000	1206.260000000000000000	1844.920000000000000000	1429.237500000000000000
Manufacturer#5	almond antique sky peru orange	1788.730000000000000000	9284.320000000000000000	1018.100000000000000000	1789.690000000000000000	1547.386666666666666667
Manufacturer#5	almond antique blue firebrick mint	1789.690000000000000000	9284.320000000000000000	1018.100000000000000000	1789.690000000000000000	1547.386666666666666667
Manufacturer#5	almond azure blanched chiffon midnight	1464.480000000000000000	9284.320000000000000000	1018.100000000000000000	1789.690000000000000000	1547.386666666666666667
Manufacturer#5	almond antique medium spring khaki	1611.660000000000000000	9284.320000000000000000	1018.100000000000000000	1789.690000000000000000	1547.386666666666666667
Manufacturer#5	almond antique medium spring khaki	1611.660000000000000000	9284.320000000000000000	1018.100000000000000000	1789.690000000000000000	1547.386666666666666667
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.100000000000000000	9284.320000000000000000	1018.100000000000000000	1789.690000000000000000	1547.386666666666666667
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc_decimal
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc_decimal
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: vector_ptf_part_simple_orc_decimal
            Statistics: Num rows: 40 Data size: 12792 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2]
            Reduce Output Operator
              key expressions: p_mfgr (type: string), p_name (type: string)
              sort order: ++
              Map-reduce partition columns: p_mfgr (type: string)
              Reduce Sink Vectorization:
                  className: VectorReduceSinkOperator
                  native: false
                  nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                  nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
              Statistics: Num rows: 40 Data size: 12792 Basic stats: COMPLETE Column stats: NONE
              value expressions: p_retailprice (type: decimal(38,18))
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 3
              includeColumns: [0, 1, 2]
              dataColumns: p_mfgr:string, p_name:string, p_retailprice:decimal(38,18)
              partitionColumnCount: 0
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: decimal(38,18))
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 40 Data size: 12792 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Function definitions:
                Input definition
                  input alias: ptf_0
                  output shape: _col0: string, _col1: string, _col2: decimal(38,18)
                  type: WINDOWING
                Windowing table definition
                  input alias: ptf_1
                  name: windowingtablefunction
                  order by: _col1 ASC NULLS FIRST
                  partition by: _col0
                  raw input shape:
                  window functions:
                      window function definition
                        alias: sum_window_0
                        arguments: _col2
                        name: sum
                        window function: GenericUDAFSumHiveDecimal
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: min_window_1
                        arguments: _col2
                        name: min
                        window function: GenericUDAFMinEvaluator
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: max_window_2
                        arguments: _col2
                        name: max
                        window function: GenericUDAFMaxEvaluator
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: avg_window_3
                        arguments: _col2
                        name: avg
                        window function: GenericUDAFAverageEvaluatorDecimal
                        window frame: RANGE PRECEDING(MAX)~CURRENT
            Statistics: Num rows: 40 Data size: 12792 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: string), _col1 (type: string), _col2 (type: decimal(38,18)), sum_window_0 (type: decimal(38,18)), min_window_1 (type: decimal(38,18)), max_window_2 (type: decimal(38,18)), avg_window_3 (type: decimal(38,18))
              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
              Statistics: Num rows: 40 Data size: 12792 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 40 Data size: 12792 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc_decimal
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc_decimal
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_retailprice,
sum(p_retailprice) over(partition by p_mfgr order by p_name) as s,
min(p_retailprice) over(partition by p_mfgr order by p_name) as mi,
max(p_retailprice) over(partition by p_mfgr order by p_name) as ma,
avg(p_retailprice) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc_decimal
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc_decimal
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	s	mi	ma	av
Manufacturer#1	almond antique burnished rose metallic	1173.150000000000000000	2346.300000000000000000	1173.150000000000000000	1173.150000000000000000	1173.150000000000000000
Manufacturer#1	almond antique burnished rose metallic	1173.150000000000000000	2346.300000000000000000	1173.150000000000000000	1173.150000000000000000	1173.150000000000000000
Manufacturer#1	almond antique chartreuse lavender yellow	1753.760000000000000000	9361.340000000000000000	1173.150000000000000000	1753.760000000000000000	1560.223333333333333333
Manufacturer#1	almond antique chartreuse lavender yellow	1753.760000000000000000	9361.340000000000000000	1173.150000000000000000	1753.760000000000000000	1560.223333333333333333
Manufacturer#1	almond antique chartreuse lavender yellow	1753.760000000000000000	9361.340000000000000000	1173.150000000000000000	1753.760000000000000000	1560.223333333333333333
Manufacturer#1	almond antique chartreuse lavender yellow	1753.760000000000000000	9361.340000000000000000	1173.150000000000000000	1753.760000000000000000	1560.223333333333333333
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.590000000000000000	10963.930000000000000000	1173.150000000000000000	1753.760000000000000000	1566.275714285714285714
Manufacturer#1	almond aquamarine burnished black steel	1414.420000000000000000	12378.350000000000000000	1173.150000000000000000	1753.760000000000000000	1547.293750000000000000
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.660000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.660000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.660000000000000000	17276.330000000000000000	1173.150000000000000000	1753.760000000000000000	1570.575454545454545455
Manufacturer#2	almond antique violet chocolate turquoise	1690.680000000000000000	1690.680000000000000000	1690.680000000000000000	1690.680000000000000000	1690.680000000000000000
Manufacturer#2	almond antique violet turquoise frosted	1800.700000000000000000	7092.780000000000000000	1690.680000000000000000	1800.700000000000000000	1773.195000000000000000
Manufacturer#2	almond antique violet turquoise frosted	1800.700000000000000000	7092.780000000000000000	1690.680000000000000000	1800.700000000000000000	1773.195000000000000000
Manufacturer#2	almond antique violet turquoise frosted	1800.700000000000000000	7092.780000000000000000	1690.680000000000000000	1800.700000000000000000	1773.195000000000000000
Manufacturer#2	almond aquamarine midnight light salmon	2031.980000000000000000	9124.760000000000000000	1690.680000000000000000	2031.980000000000000000	1824.952000000000000000
Manufacturer#2	almond aquamarine rose maroon antique	900.660000000000000000	11724.080000000000000000	900.660000000000000000	2031.980000000000000000	1674.868571428571428571
Manufacturer#2	almond aquamarine rose maroon antique	1698.660000000000000000	11724.080000000000000000	900.660000000000000000	2031.980000000000000000	1674.868571428571428571
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.600000000000000000	12724.680000000000000000	900.660000000000000000	2031.980000000000000000	1590.585000000000000000
Manufacturer#3	almond antique chartreuse khaki white	99.680000000000000000	99.680000000000000000	99.680000000000000000	99.680000000000000000	99.680000000000000000
Manufacturer#3	almond antique forest lavender goldenrod	1190.270000000000000000	3070.490000000000000000	99.680000000000000000	1190.270000000000000000	767.622500000000000000
Manufacturer#3	almond antique forest lavender goldenrod	590.270000000000000000	3070.490000000000000000	99.680000000000000000	1190.270000000000000000	767.622500000000000000
Manufacturer#3	almond antique forest lavender goldenrod	1190.270000000000000000	3070.490000000000000000	99.680000000000000000	1190.270000000000000000	767.622500000000000000
Manufacturer#3	almond antique forest lavender goldenrod	NULL	3070.490000000000000000	99.680000000000000000	1190.270000000000000000	767.622500000000000000
Manufacturer#3	almond antique metallic orange dim	55.390000000000000000	3125.880000000000000000	55.390000000000000000	1190.270000000000000000	625.176000000000000000
Manufacturer#3	almond antique misty red olive	1922.980000000000000000	5048.860000000000000000	55.390000000000000000	1922.980000000000000000	841.476666666666666667
Manufacturer#3	almond antique olive coral navajo	1337.290000000000000000	6386.150000000000000000	55.390000000000000000	1922.980000000000000000	912.307142857142857143
Manufacturer#4	almond antique gainsboro frosted violet	NULL	NULL	NULL	NULL	NULL
Manufacturer#4	almond antique violet mint lemon	1375.420000000000000000	1375.420000000000000000	1375.420000000000000000	1375.420000000000000000	1375.420000000000000000
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	2581.680000000000000000	1206.260000000000000000	1375.420000000000000000	1290.840000000000000000
Manufacturer#4	almond aquamarine floral ivory bisque	1206.260000000000000000	2581.680000000000000000	1206.260000000000000000	1375.420000000000000000	1290.840000000000000000
Manufacturer#4	almond aquamarine yellow dodger mint	1844.920000000000000000	4426.600000000000000000	1206.260000000000000000	1844.920000000000000000	1475.533333333333333333
Manufacturer#4	almond azure aquamarine papaya violet	1290.350000000000000000	5716.950000000000000000	1206.260000000000000000	1844.920000000000000000	1429.237500000000000000
Manufacturer#5	almond antique blue firebrick mint	1789.690000000000000000	1789.690000000000000000	1789.690000000000000000	1789.690000000000000000	1789.690000000000000000
Manufacturer#5	almond antique medium spring khaki	1611.660000000000000000	5013.010000000000000000	1611.660000000000000000	1789.690000000000000000	1671.003333333333333333
Manufacturer#5	almond antique medium spring khaki	1611.660000000000000000	5013.010000000000000000	1611.660000000000000000	1789.690000000000000000	1671.003333333333333333
Manufacturer#5	almond antique sky peru orange	1788.730000000000000000	6801.740000000000000000	1611.660000000000000000	1789.690000000000000000	1700.435000000000000000
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.100000000000000000	7819.840000000000000000	1018.100000000000000000	1789.690000000000000000	1563.968000000000000000
Manufacturer#5	almond azure blanched chiffon midnight	1464.480000000000000000	9284.320000000000000000	1018.100000000000000000	1789.690000000000000000	1547.386666666666666667
PREHOOK: query: create table vector_ptf_part_simple_orc_long(p_mfgr string, p_name string, p_bigint bigint) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@vector_ptf_part_simple_orc_long
POSTHOOK: query: create table vector_ptf_part_simple_orc_long(p_mfgr string, p_name string, p_bigint bigint) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@vector_ptf_part_simple_orc_long
PREHOOK: query: INSERT INTO TABLE vector_ptf_part_simple_orc_long SELECT p_mfgr, p_name, cast(p_retailprice * 100 as bigint) FROM vector_ptf_part_simple_text_decimal
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_text_decimal
PREHOOK: Output: default@vector_ptf_part_simple_orc_long
POSTHOOK: query: INSERT INTO TABLE vector_ptf_part_simple_orc_long SELECT p_mfgr, p_name, cast(p_retailprice * 100 as bigint) FROM vector_ptf_part_simple_text_decimal
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_text_decimal
POSTHOOK: Output: default@vector_ptf_part_simple_orc_long
POSTHOOK: Lineage: vector_ptf_part_simple_orc_long.p_bigint EXPRESSION [(vector_ptf_part_simple_text_decimal)vector_ptf_part_simple_text_decimal.FieldSchema(name:p_retailprice, type:decimal(38,18), comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc_long.p_mfgr SIMPLE [(vector_ptf_part_simple_text_decimal)vector_ptf_part_simple_text_decimal.FieldSchema(name:p_mfgr, type:string, comment:null), ]
POSTHOOK: Lineage: vector_ptf_part_simple_orc_long.p_name SIMPLE [(vector_ptf_part_simple_text_decimal)vector_ptf_part_simple_text_decimal.FieldSchema(name:p_name, type:string, comment:null), ]
p_mfgr	p_name	_c2
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_bigint,
sum(p_bigint) over(partition by p_mfgr) as s,
min(p_bigint) over(partition by p_mfgr) as mi,
max(p_bigint) over(partition by p_mfgr) as ma,
avg(p_bigint) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc_long
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_bigint,
sum(p_bigint) over(partition by p_mfgr) as s,
min(p_bigint) over(partition by p_mfgr) as mi,
max(p_bigint) over(partition by p_mfgr) as ma,
avg(p_bigint) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc_long
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: vector_ptf_part_simple_orc_long
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2]
            Reduce Output Operator
              key expressions: p_mfgr (type: string)
              sort order: +
              Map-reduce partition columns: p_mfgr (type: string)
              Reduce Sink Vectorization:
                  className: VectorReduceSinkOperator
                  native: false
                  nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                  nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              value expressions: p_name (type: string), p_bigint (type: bigint)
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 3
              includeColumns: [0, 1, 2]
              dataColumns: p_mfgr:string, p_name:string, p_bigint:bigint
              partitionColumnCount: 0
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: bigint)
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Function definitions:
                Input definition
                  input alias: ptf_0
                  output shape: _col0: string, _col1: string, _col2: bigint
                  type: WINDOWING
                Windowing table definition
                  input alias: ptf_1
                  name: windowingtablefunction
                  order by: _col0 ASC NULLS FIRST
                  partition by: _col0
                  raw input shape:
                  window functions:
                      window function definition
                        alias: sum_window_0
                        arguments: _col2
                        name: sum
                        window function: GenericUDAFSumLong
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                      window function definition
                        alias: min_window_1
                        arguments: _col2
                        name: min
                        window function: GenericUDAFMinEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                      window function definition
                        alias: max_window_2
                        arguments: _col2
                        name: max
                        window function: GenericUDAFMaxEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                      window function definition
                        alias: avg_window_3
                        arguments: _col2
                        name: avg
                        window function: GenericUDAFAverageEvaluatorDouble
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint), sum_window_0 (type: bigint), min_window_1 (type: bigint), max_window_2 (type: bigint), avg_window_3 (type: double)
              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_bigint,
sum(p_bigint) over(partition by p_mfgr) as s,
min(p_bigint) over(partition by p_mfgr) as mi,
max(p_bigint) over(partition by p_mfgr) as ma,
avg(p_bigint) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc_long
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc_long
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_bigint,
sum(p_bigint) over(partition by p_mfgr) as s,
min(p_bigint) over(partition by p_mfgr) as mi,
max(p_bigint) over(partition by p_mfgr) as ma,
avg(p_bigint) over(partition by p_mfgr) as av 
from vector_ptf_part_simple_orc_long
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc_long
#### A masked pattern was here ####
p_mfgr	p_name	p_bigint	s	mi	ma	av
Manufacturer#1	almond antique chartreuse lavender yellow	175376	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond antique chartreuse lavender yellow	175376	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond aquamarine pink moccasin thistle	163266	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond antique chartreuse lavender yellow	175376	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond antique burnished rose metallic	117315	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond antique burnished rose metallic	117315	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond aquamarine pink moccasin thistle	163266	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond aquamarine burnished black steel	141442	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond antique chartreuse lavender yellow	175376	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond antique salmon chartreuse burlywood	160259	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond aquamarine pink moccasin thistle	163266	1727633	117315	175376	157057.54545454544
Manufacturer#2	almond aquamarine rose maroon antique	90066	1272468	90066	203198	159058.5
Manufacturer#2	almond aquamarine midnight light salmon	203198	1272468	90066	203198	159058.5
Manufacturer#2	almond aquamarine sandy cyan gainsboro	100060	1272468	90066	203198	159058.5
Manufacturer#2	almond antique violet turquoise frosted	180070	1272468	90066	203198	159058.5
Manufacturer#2	almond antique violet turquoise frosted	180070	1272468	90066	203198	159058.5
Manufacturer#2	almond antique violet chocolate turquoise	169068	1272468	90066	203198	159058.5
Manufacturer#2	almond antique violet turquoise frosted	180070	1272468	90066	203198	159058.5
Manufacturer#2	almond aquamarine rose maroon antique	169866	1272468	90066	203198	159058.5
Manufacturer#3	almond antique olive coral navajo	133729	638615	5539	192298	91230.71428571429
Manufacturer#3	almond antique forest lavender goldenrod	59027	638615	5539	192298	91230.71428571429
Manufacturer#3	almond antique forest lavender goldenrod	NULL	638615	5539	192298	91230.71428571429
Manufacturer#3	almond antique metallic orange dim	5539	638615	5539	192298	91230.71428571429
Manufacturer#3	almond antique misty red olive	192298	638615	5539	192298	91230.71428571429
Manufacturer#3	almond antique forest lavender goldenrod	119027	638615	5539	192298	91230.71428571429
Manufacturer#3	almond antique forest lavender goldenrod	119027	638615	5539	192298	91230.71428571429
Manufacturer#3	almond antique chartreuse khaki white	9968	638615	5539	192298	91230.71428571429
Manufacturer#4	almond azure aquamarine papaya violet	129035	571695	120626	184492	142923.75
Manufacturer#4	almond aquamarine yellow dodger mint	184492	571695	120626	184492	142923.75
Manufacturer#4	almond antique gainsboro frosted violet	NULL	571695	120626	184492	142923.75
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	571695	120626	184492	142923.75
Manufacturer#4	almond antique violet mint lemon	137542	571695	120626	184492	142923.75
Manufacturer#4	almond aquamarine floral ivory bisque	120626	571695	120626	184492	142923.75
Manufacturer#5	almond antique sky peru orange	178873	928432	101810	178969	154738.66666666666
Manufacturer#5	almond antique blue firebrick mint	178969	928432	101810	178969	154738.66666666666
Manufacturer#5	almond azure blanched chiffon midnight	146448	928432	101810	178969	154738.66666666666
Manufacturer#5	almond antique medium spring khaki	161166	928432	101810	178969	154738.66666666666
Manufacturer#5	almond antique medium spring khaki	161166	928432	101810	178969	154738.66666666666
Manufacturer#5	almond aquamarine dodger light gainsboro	101810	928432	101810	178969	154738.66666666666
PREHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_bigint,
sum(p_bigint) over(partition by p_mfgr order by p_name) as s,
min(p_bigint) over(partition by p_mfgr order by p_name) as mi,
max(p_bigint) over(partition by p_mfgr order by p_name) as ma,
avg(p_bigint) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc_long
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr,p_name, p_bigint,
sum(p_bigint) over(partition by p_mfgr order by p_name) as s,
min(p_bigint) over(partition by p_mfgr order by p_name) as mi,
max(p_bigint) over(partition by p_mfgr order by p_name) as ma,
avg(p_bigint) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc_long
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: vector_ptf_part_simple_orc_long
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2]
            Reduce Output Operator
              key expressions: p_mfgr (type: string), p_name (type: string)
              sort order: ++
              Map-reduce partition columns: p_mfgr (type: string)
              Reduce Sink Vectorization:
                  className: VectorReduceSinkOperator
                  native: false
                  nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                  nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              value expressions: p_bigint (type: bigint)
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 3
              includeColumns: [0, 1, 2]
              dataColumns: p_mfgr:string, p_name:string, p_bigint:bigint
              partitionColumnCount: 0
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: bigint)
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Function definitions:
                Input definition
                  input alias: ptf_0
                  output shape: _col0: string, _col1: string, _col2: bigint
                  type: WINDOWING
                Windowing table definition
                  input alias: ptf_1
                  name: windowingtablefunction
                  order by: _col1 ASC NULLS FIRST
                  partition by: _col0
                  raw input shape:
                  window functions:
                      window function definition
                        alias: sum_window_0
                        arguments: _col2
                        name: sum
                        window function: GenericUDAFSumLong
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: min_window_1
                        arguments: _col2
                        name: min
                        window function: GenericUDAFMinEvaluator
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: max_window_2
                        arguments: _col2
                        name: max
                        window function: GenericUDAFMaxEvaluator
                        window frame: RANGE PRECEDING(MAX)~CURRENT
                      window function definition
                        alias: avg_window_3
                        arguments: _col2
                        name: avg
                        window function: GenericUDAFAverageEvaluatorDouble
                        window frame: RANGE PRECEDING(MAX)~CURRENT
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: string), _col1 (type: string), _col2 (type: bigint), sum_window_0 (type: bigint), min_window_1 (type: bigint), max_window_2 (type: bigint), avg_window_3 (type: double)
              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr,p_name, p_bigint,
sum(p_bigint) over(partition by p_mfgr order by p_name) as s,
min(p_bigint) over(partition by p_mfgr order by p_name) as mi,
max(p_bigint) over(partition by p_mfgr order by p_name) as ma,
avg(p_bigint) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc_long
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc_long
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr,p_name, p_bigint,
sum(p_bigint) over(partition by p_mfgr order by p_name) as s,
min(p_bigint) over(partition by p_mfgr order by p_name) as mi,
max(p_bigint) over(partition by p_mfgr order by p_name) as ma,
avg(p_bigint) over(partition by p_mfgr order by p_name) as av 
from vector_ptf_part_simple_orc_long
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc_long
#### A masked pattern was here ####
p_mfgr	p_name	p_bigint	s	mi	ma	av
Manufacturer#1	almond antique burnished rose metallic	117315	234630	117315	117315	117315.0
Manufacturer#1	almond antique burnished rose metallic	117315	234630	117315	117315	117315.0
Manufacturer#1	almond antique chartreuse lavender yellow	175376	936134	117315	175376	156022.33333333334
Manufacturer#1	almond antique chartreuse lavender yellow	175376	936134	117315	175376	156022.33333333334
Manufacturer#1	almond antique chartreuse lavender yellow	175376	936134	117315	175376	156022.33333333334
Manufacturer#1	almond antique chartreuse lavender yellow	175376	936134	117315	175376	156022.33333333334
Manufacturer#1	almond antique salmon chartreuse burlywood	160259	1096393	117315	175376	156627.57142857142
Manufacturer#1	almond aquamarine burnished black steel	141442	1237835	117315	175376	154729.375
Manufacturer#1	almond aquamarine pink moccasin thistle	163266	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond aquamarine pink moccasin thistle	163266	1727633	117315	175376	157057.54545454544
Manufacturer#1	almond aquamarine pink moccasin thistle	163266	1727633	117315	175376	157057.54545454544
Manufacturer#2	almond antique violet chocolate turquoise	169068	169068	169068	169068	169068.0
Manufacturer#2	almond antique violet turquoise frosted	180070	709278	169068	180070	177319.5
Manufacturer#2	almond antique violet turquoise frosted	180070	709278	169068	180070	177319.5
Manufacturer#2	almond antique violet turquoise frosted	180070	709278	169068	180070	177319.5
Manufacturer#2	almond aquamarine midnight light salmon	203198	912476	169068	203198	182495.2
Manufacturer#2	almond aquamarine rose maroon antique	90066	1172408	90066	203198	167486.85714285713
Manufacturer#2	almond aquamarine rose maroon antique	169866	1172408	90066	203198	167486.85714285713
Manufacturer#2	almond aquamarine sandy cyan gainsboro	100060	1272468	90066	203198	159058.5
Manufacturer#3	almond antique chartreuse khaki white	9968	9968	9968	9968	9968.0
Manufacturer#3	almond antique forest lavender goldenrod	119027	307049	9968	119027	76762.25
Manufacturer#3	almond antique forest lavender goldenrod	59027	307049	9968	119027	76762.25
Manufacturer#3	almond antique forest lavender goldenrod	119027	307049	9968	119027	76762.25
Manufacturer#3	almond antique forest lavender goldenrod	NULL	307049	9968	119027	76762.25
Manufacturer#3	almond antique metallic orange dim	5539	312588	5539	119027	62517.6
Manufacturer#3	almond antique misty red olive	192298	504886	5539	192298	84147.66666666667
Manufacturer#3	almond antique olive coral navajo	133729	638615	5539	192298	91230.71428571429
Manufacturer#4	almond antique gainsboro frosted violet	NULL	NULL	NULL	NULL	NULL
Manufacturer#4	almond antique violet mint lemon	137542	137542	137542	137542	137542.0
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	258168	120626	137542	129084.0
Manufacturer#4	almond aquamarine floral ivory bisque	120626	258168	120626	137542	129084.0
Manufacturer#4	almond aquamarine yellow dodger mint	184492	442660	120626	184492	147553.33333333334
Manufacturer#4	almond azure aquamarine papaya violet	129035	571695	120626	184492	142923.75
Manufacturer#5	almond antique blue firebrick mint	178969	178969	178969	178969	178969.0
Manufacturer#5	almond antique medium spring khaki	161166	501301	161166	178969	167100.33333333334
Manufacturer#5	almond antique medium spring khaki	161166	501301	161166	178969	167100.33333333334
Manufacturer#5	almond antique sky peru orange	178873	680174	161166	178969	170043.5
Manufacturer#5	almond aquamarine dodger light gainsboro	101810	781984	101810	178969	156396.8
Manufacturer#5	almond azure blanched chiffon midnight	146448	928432	101810	178969	154738.66666666666
PREHOOK: query: explain vectorization detail
select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: vector_ptf_part_simple_orc
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2]
            Reduce Output Operator
              key expressions: p_mfgr (type: string)
              sort order: +
              Map-reduce partition columns: p_mfgr (type: string)
              Reduce Sink Vectorization:
                  className: VectorReduceSinkOperator
                  native: false
                  nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                  nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              value expressions: p_retailprice (type: double)
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 3
              includeColumns: [0, 2]
              dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
              partitionColumnCount: 0
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), VALUE._col1 (type: double)
          outputColumnNames: _col0, _col2
          Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Function definitions:
                Input definition
                  input alias: ptf_0
                  output shape: _col0: string, _col2: double
                  type: WINDOWING
                Windowing table definition
                  input alias: ptf_1
                  name: windowingtablefunction
                  order by: _col0 ASC NULLS FIRST
                  partition by: _col0
                  raw input shape:
                  window functions:
                      window function definition
                        alias: rank_window_0
                        arguments: _col0
                        name: rank
                        window function: GenericUDAFRankEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                        isPivotResult: true
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: string), _col2 (type: double), rank_window_0 (type: int)
              outputColumnNames: _col0, _col1, _col2
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_retailprice	r
Manufacturer#1	1753.76	1
Manufacturer#1	NULL	1
Manufacturer#1	1753.76	1
Manufacturer#1	1632.66	1
Manufacturer#1	1753.76	1
Manufacturer#1	1173.15	1
Manufacturer#1	1173.15	1
Manufacturer#1	1632.66	1
Manufacturer#1	1414.42	1
Manufacturer#1	1753.76	1
Manufacturer#1	1602.59	1
Manufacturer#1	1632.66	1
Manufacturer#2	900.66	1
Manufacturer#2	2031.98	1
Manufacturer#2	1000.6	1
Manufacturer#2	1800.7	1
Manufacturer#2	1800.7	1
Manufacturer#2	1690.68	1
Manufacturer#2	1800.7	1
Manufacturer#2	1698.66	1
Manufacturer#3	1337.29	1
Manufacturer#3	590.27	1
Manufacturer#3	NULL	1
Manufacturer#3	55.39	1
Manufacturer#3	1922.98	1
Manufacturer#3	1190.27	1
Manufacturer#3	1190.27	1
Manufacturer#3	99.68	1
Manufacturer#4	1290.35	1
Manufacturer#4	1844.92	1
Manufacturer#4	NULL	1
Manufacturer#4	NULL	1
Manufacturer#4	1375.42	1
Manufacturer#4	1206.26	1
Manufacturer#5	1788.73	1
Manufacturer#5	1789.69	1
Manufacturer#5	1464.48	1
Manufacturer#5	1611.66	1
Manufacturer#5	1611.66	1
Manufacturer#5	1018.1	1
PREHOOK: query: explain vectorization detail
select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr order by p_name) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr order by p_name) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: vector_ptf_part_simple_orc
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2]
            Reduce Output Operator
              key expressions: p_mfgr (type: string), p_name (type: string)
              sort order: ++
              Map-reduce partition columns: p_mfgr (type: string)
              Reduce Sink Vectorization:
                  className: VectorReduceSinkOperator
                  native: false
                  nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                  nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              value expressions: p_retailprice (type: double)
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 3
              includeColumns: [0, 1, 2]
              dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
              partitionColumnCount: 0
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: double)
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Function definitions:
                Input definition
                  input alias: ptf_0
                  output shape: _col0: string, _col1: string, _col2: double
                  type: WINDOWING
                Windowing table definition
                  input alias: ptf_1
                  name: windowingtablefunction
                  order by: _col1 ASC NULLS FIRST
                  partition by: _col0
                  raw input shape:
                  window functions:
                      window function definition
                        alias: rank_window_0
                        arguments: _col1
                        name: rank
                        window function: GenericUDAFRankEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                        isPivotResult: true
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: string), _col2 (type: double), rank_window_0 (type: int)
              outputColumnNames: _col0, _col1, _col2
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr order by p_name) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_retailprice,
rank() over(partition by p_mfgr order by p_name) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_retailprice	r
Manufacturer#1	1173.15	1
Manufacturer#1	1173.15	1
Manufacturer#1	1753.76	3
Manufacturer#1	1753.76	3
Manufacturer#1	1753.76	3
Manufacturer#1	1753.76	3
Manufacturer#1	1602.59	7
Manufacturer#1	1414.42	8
Manufacturer#1	1632.66	9
Manufacturer#1	NULL	9
Manufacturer#1	1632.66	9
Manufacturer#1	1632.66	9
Manufacturer#2	1690.68	1
Manufacturer#2	1800.7	2
Manufacturer#2	1800.7	2
Manufacturer#2	1800.7	2
Manufacturer#2	2031.98	5
Manufacturer#2	900.66	6
Manufacturer#2	1698.66	6
Manufacturer#2	1000.6	8
Manufacturer#3	99.68	1
Manufacturer#3	1190.27	2
Manufacturer#3	590.27	2
Manufacturer#3	1190.27	2
Manufacturer#3	NULL	2
Manufacturer#3	55.39	6
Manufacturer#3	1922.98	7
Manufacturer#3	1337.29	8
Manufacturer#4	NULL	1
Manufacturer#4	1375.42	2
Manufacturer#4	NULL	3
Manufacturer#4	1206.26	3
Manufacturer#4	1844.92	5
Manufacturer#4	1290.35	6
Manufacturer#5	1789.69	1
Manufacturer#5	1611.66	2
Manufacturer#5	1611.66	2
Manufacturer#5	1788.73	4
Manufacturer#5	1018.1	5
Manufacturer#5	1464.48	6
PREHOOK: query: explain vectorization detail
select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: vector_ptf_part_simple_orc
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2]
            Reduce Output Operator
              key expressions: p_mfgr (type: string), CASE WHEN ((p_mfgr = 'Manufacturer#2')) THEN (2000-01-01 00:00:00.0) ELSE (null) END (type: timestamp)
              sort order: ++
              Map-reduce partition columns: p_mfgr (type: string), CASE WHEN ((p_mfgr = 'Manufacturer#2')) THEN (2000-01-01 00:00:00.0) ELSE (null) END (type: timestamp)
              Reduce Sink Vectorization:
                  className: VectorReduceSinkOperator
                  native: false
                  nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                  nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              value expressions: p_name (type: string), p_retailprice (type: double)
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 3
              includeColumns: [0, 1, 2]
              dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
              partitionColumnCount: 0
              scratchColumnTypeNames: bigint, timestamp, timestamp
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), VALUE._col1 (type: double)
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Function definitions:
                Input definition
                  input alias: ptf_0
                  output shape: _col0: string, _col1: string, _col2: double
                  type: WINDOWING
                Windowing table definition
                  input alias: ptf_1
                  name: windowingtablefunction
                  order by: _col0 ASC NULLS FIRST, CASE WHEN ((_col0 = 'Manufacturer#2')) THEN (2000-01-01 00:00:00.0) ELSE (null) END ASC NULLS FIRST
                  partition by: _col0, CASE WHEN ((_col0 = 'Manufacturer#2')) THEN (2000-01-01 00:00:00.0) ELSE (null) END
                  raw input shape:
                  window functions:
                      window function definition
                        alias: rank_window_0
                        arguments: _col0, CASE WHEN ((_col0 = 'Manufacturer#2')) THEN (2000-01-01 00:00:00.0) ELSE (null) END
                        name: rank
                        window function: GenericUDAFRankEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                        isPivotResult: true
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), rank_window_0 (type: int)
              outputColumnNames: _col0, _col1, _col2, _col3
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	r
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	1
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	1
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1
Manufacturer#1	almond antique burnished rose metallic	1173.15	1
Manufacturer#1	almond antique burnished rose metallic	1173.15	1
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	1
Manufacturer#1	almond aquamarine burnished black steel	1414.42	1
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	1
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	1
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	1
Manufacturer#2	almond aquamarine rose maroon antique	900.66	1
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	1
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	1
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	1
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	1
Manufacturer#3	almond antique olive coral navajo	1337.29	1
Manufacturer#3	almond antique forest lavender goldenrod	590.27	1
Manufacturer#3	almond antique forest lavender goldenrod	NULL	1
Manufacturer#3	almond antique metallic orange dim	55.39	1
Manufacturer#3	almond antique misty red olive	1922.98	1
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	1
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	1
Manufacturer#3	almond antique chartreuse khaki white	99.68	1
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	1
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	1
Manufacturer#4	almond antique gainsboro frosted violet	NULL	1
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	1
Manufacturer#4	almond antique violet mint lemon	1375.42	1
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	1
Manufacturer#5	almond antique sky peru orange	1788.73	1
Manufacturer#5	almond antique blue firebrick mint	1789.69	1
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	1
Manufacturer#5	almond antique medium spring khaki	1611.66	1
Manufacturer#5	almond antique medium spring khaki	1611.66	1
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	1
PREHOOK: query: explain vectorization detail
select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end order by p_name) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end order by p_name) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: vector_ptf_part_simple_orc
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2]
            Reduce Output Operator
              key expressions: p_mfgr (type: string), CASE WHEN ((p_mfgr = 'Manufacturer#2')) THEN (2000-01-01 00:00:00.0) ELSE (null) END (type: timestamp), p_name (type: string)
              sort order: +++
              Map-reduce partition columns: p_mfgr (type: string), CASE WHEN ((p_mfgr = 'Manufacturer#2')) THEN (2000-01-01 00:00:00.0) ELSE (null) END (type: timestamp)
              Reduce Sink Vectorization:
                  className: VectorReduceSinkOperator
                  native: false
                  nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                  nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              value expressions: p_retailprice (type: double)
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: false
          vectorized: true
          rowBatchContext:
              dataColumnCount: 3
              includeColumns: [0, 1, 2]
              dataColumns: p_mfgr:string, p_name:string, p_retailprice:double
              partitionColumnCount: 0
              scratchColumnTypeNames: bigint, timestamp, timestamp
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey2 (type: string), VALUE._col0 (type: double)
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Function definitions:
                Input definition
                  input alias: ptf_0
                  output shape: _col0: string, _col1: string, _col2: double
                  type: WINDOWING
                Windowing table definition
                  input alias: ptf_1
                  name: windowingtablefunction
                  order by: _col1 ASC NULLS FIRST
                  partition by: _col0, CASE WHEN ((_col0 = 'Manufacturer#2')) THEN (2000-01-01 00:00:00.0) ELSE (null) END
                  raw input shape:
                  window functions:
                      window function definition
                        alias: rank_window_0
                        arguments: _col1
                        name: rank
                        window function: GenericUDAFRankEvaluator
                        window frame: ROWS PRECEDING(MAX)~FOLLOWING(MAX)
                        isPivotResult: true
            Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double), rank_window_0 (type: int)
              outputColumnNames: _col0, _col1, _col2, _col3
              Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 40 Data size: 9048 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end order by p_name) as r
from vector_ptf_part_simple_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
POSTHOOK: query: select p_mfgr, p_name, p_retailprice,
rank() over(partition by p_mfgr, case when p_mfgr == "Manufacturer#2" then timestamp "2000-01-01 00:00:00" end order by p_name) as r
from vector_ptf_part_simple_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@vector_ptf_part_simple_orc
#### A masked pattern was here ####
p_mfgr	p_name	p_retailprice	r
Manufacturer#1	almond antique burnished rose metallic	1173.15	1
Manufacturer#1	almond antique burnished rose metallic	1173.15	1
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3
Manufacturer#1	almond antique chartreuse lavender yellow	1753.76	3
Manufacturer#1	almond antique salmon chartreuse burlywood	1602.59	7
Manufacturer#1	almond aquamarine burnished black steel	1414.42	8
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	9
Manufacturer#1	almond aquamarine pink moccasin thistle	NULL	9
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	9
Manufacturer#1	almond aquamarine pink moccasin thistle	1632.66	9
Manufacturer#2	almond antique violet chocolate turquoise	1690.68	1
Manufacturer#2	almond antique violet turquoise frosted	1800.7	2
Manufacturer#2	almond antique violet turquoise frosted	1800.7	2
Manufacturer#2	almond antique violet turquoise frosted	1800.7	2
Manufacturer#2	almond aquamarine midnight light salmon	2031.98	5
Manufacturer#2	almond aquamarine rose maroon antique	900.66	6
Manufacturer#2	almond aquamarine rose maroon antique	1698.66	6
Manufacturer#2	almond aquamarine sandy cyan gainsboro	1000.6	8
Manufacturer#3	almond antique chartreuse khaki white	99.68	1
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	2
Manufacturer#3	almond antique forest lavender goldenrod	590.27	2
Manufacturer#3	almond antique forest lavender goldenrod	1190.27	2
Manufacturer#3	almond antique forest lavender goldenrod	NULL	2
Manufacturer#3	almond antique metallic orange dim	55.39	6
Manufacturer#3	almond antique misty red olive	1922.98	7
Manufacturer#3	almond antique olive coral navajo	1337.29	8
Manufacturer#4	almond antique gainsboro frosted violet	NULL	1
Manufacturer#4	almond antique violet mint lemon	1375.42	2
Manufacturer#4	almond aquamarine floral ivory bisque	NULL	3
Manufacturer#4	almond aquamarine floral ivory bisque	1206.26	3
Manufacturer#4	almond aquamarine yellow dodger mint	1844.92	5
Manufacturer#4	almond azure aquamarine papaya violet	1290.35	6
Manufacturer#5	almond antique blue firebrick mint	1789.69	1
Manufacturer#5	almond antique medium spring khaki	1611.66	2
Manufacturer#5	almond antique medium spring khaki	1611.66	2
Manufacturer#5	almond antique sky peru orange	1788.73	4
Manufacturer#5	almond aquamarine dodger light gainsboro	1018.1	5
Manufacturer#5	almond azure blanched chiffon midnight	1464.48	6
