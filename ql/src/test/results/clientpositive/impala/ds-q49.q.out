PREHOOK: query: explain cbo select  
 'web' as channel
 ,web.item
 ,web.return_ratio
 ,web.return_rank
 ,web.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select ws.ws_item_sk as item
 		,(cast(sum(coalesce(wr.wr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(wr.wr_return_amt,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		 impala_tpcds_web_sales ws left outer join impala_tpcds_web_returns wr 
 			on (ws.ws_order_number = wr.wr_order_number and 
 			ws.ws_item_sk = wr.wr_item_sk)
                 ,impala_tpcds_date_dim
 		where 
 			wr.wr_return_amt > 10000 
 			and ws.ws_net_profit > 1
                         and ws.ws_net_paid > 0
                         and ws.ws_quantity > 0
                         and ws_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by ws.ws_item_sk
 	) in_web
 ) web
 where 
 (
 web.return_rank <= 10
 or
 web.currency_rank <= 10
 )
 union
 select 
 'catalog' as channel
 ,catalog.item
 ,catalog.return_ratio
 ,catalog.return_rank
 ,catalog.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select 
 		cs.cs_item_sk as item
 		,(cast(sum(coalesce(cr.cr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(cr.cr_return_amount,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		impala_tpcds_catalog_sales cs left outer join impala_tpcds_catalog_returns cr
 			on (cs.cs_order_number = cr.cr_order_number and 
 			cs.cs_item_sk = cr.cr_item_sk)
                ,impala_tpcds_date_dim
 		where 
 			cr.cr_return_amount > 10000 
 			and cs.cs_net_profit > 1
                         and cs.cs_net_paid > 0
                         and cs.cs_quantity > 0
                         and cs_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
                 group by cs.cs_item_sk
 	) in_cat
 ) catalog
 where 
 (
 catalog.return_rank <= 10
 or
 catalog.currency_rank <=10
 )
 union
 select 
 'store' as channel
 ,store.item
 ,store.return_ratio
 ,store.return_rank
 ,store.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select sts.ss_item_sk as item
 		,(cast(sum(coalesce(sr.sr_return_quantity,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(sr.sr_return_amt,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		impala_tpcds_store_sales sts left outer join impala_tpcds_store_returns sr
 			on (sts.ss_ticket_number = sr.sr_ticket_number and sts.ss_item_sk = sr.sr_item_sk)
                ,impala_tpcds_date_dim
 		where 
 			sr.sr_return_amt > 10000 
 			and sts.ss_net_profit > 1
                         and sts.ss_net_paid > 0 
                         and sts.ss_quantity > 0
                         and ss_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by sts.ss_item_sk
 	) in_store
 ) store
 where  (
 store.return_rank <= 10
 or 
 store.currency_rank <= 10
 )
 order by 1,4,5
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@impala_tpcds_catalog_returns
PREHOOK: Input: default@impala_tpcds_catalog_sales
PREHOOK: Input: default@impala_tpcds_date_dim
PREHOOK: Input: default@impala_tpcds_store_returns
PREHOOK: Input: default@impala_tpcds_store_sales
PREHOOK: Input: default@impala_tpcds_web_returns
PREHOOK: Input: default@impala_tpcds_web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain cbo select  
 'web' as channel
 ,web.item
 ,web.return_ratio
 ,web.return_rank
 ,web.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select ws.ws_item_sk as item
 		,(cast(sum(coalesce(wr.wr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(wr.wr_return_amt,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		 impala_tpcds_web_sales ws left outer join impala_tpcds_web_returns wr 
 			on (ws.ws_order_number = wr.wr_order_number and 
 			ws.ws_item_sk = wr.wr_item_sk)
                 ,impala_tpcds_date_dim
 		where 
 			wr.wr_return_amt > 10000 
 			and ws.ws_net_profit > 1
                         and ws.ws_net_paid > 0
                         and ws.ws_quantity > 0
                         and ws_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by ws.ws_item_sk
 	) in_web
 ) web
 where 
 (
 web.return_rank <= 10
 or
 web.currency_rank <= 10
 )
 union
 select 
 'catalog' as channel
 ,catalog.item
 ,catalog.return_ratio
 ,catalog.return_rank
 ,catalog.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select 
 		cs.cs_item_sk as item
 		,(cast(sum(coalesce(cr.cr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(cr.cr_return_amount,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		impala_tpcds_catalog_sales cs left outer join impala_tpcds_catalog_returns cr
 			on (cs.cs_order_number = cr.cr_order_number and 
 			cs.cs_item_sk = cr.cr_item_sk)
                ,impala_tpcds_date_dim
 		where 
 			cr.cr_return_amount > 10000 
 			and cs.cs_net_profit > 1
                         and cs.cs_net_paid > 0
                         and cs.cs_quantity > 0
                         and cs_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
                 group by cs.cs_item_sk
 	) in_cat
 ) catalog
 where 
 (
 catalog.return_rank <= 10
 or
 catalog.currency_rank <=10
 )
 union
 select 
 'store' as channel
 ,store.item
 ,store.return_ratio
 ,store.return_rank
 ,store.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select sts.ss_item_sk as item
 		,(cast(sum(coalesce(sr.sr_return_quantity,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(sr.sr_return_amt,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		impala_tpcds_store_sales sts left outer join impala_tpcds_store_returns sr
 			on (sts.ss_ticket_number = sr.sr_ticket_number and sts.ss_item_sk = sr.sr_item_sk)
                ,impala_tpcds_date_dim
 		where 
 			sr.sr_return_amt > 10000 
 			and sts.ss_net_profit > 1
                         and sts.ss_net_paid > 0 
                         and sts.ss_quantity > 0
                         and ss_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by sts.ss_item_sk
 	) in_store
 ) store
 where  (
 store.return_rank <= 10
 or 
 store.currency_rank <= 10
 )
 order by 1,4,5
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@impala_tpcds_catalog_returns
POSTHOOK: Input: default@impala_tpcds_catalog_sales
POSTHOOK: Input: default@impala_tpcds_date_dim
POSTHOOK: Input: default@impala_tpcds_store_returns
POSTHOOK: Input: default@impala_tpcds_store_sales
POSTHOOK: Input: default@impala_tpcds_web_returns
POSTHOOK: Input: default@impala_tpcds_web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
CBO PLAN:
ImpalaSortRel(sort0=[$0], sort1=[$3], sort2=[$4], dir0=[ASC], dir1=[ASC], dir2=[ASC], fetch=[100])
  ImpalaAggregateRel(group=[{0, 1, 2, 3, 4}])
    ImpalaUnionRel(all=[true])
      ImpalaAggregateRel(group=[{0, 1, 2, 3, 4}])
        ImpalaUnionRel(all=[true])
          ImpalaProjectPassthroughRel(channel=[_UTF-16LE'web':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"], item=[$0], return_ratio=[$1], return_rank=[$2], currency_rank=[$3])
            ImpalaProjectRel(item=[$0], return_ratio=[$5], rank_window_0=[rank() OVER (PARTITION BY 0 ORDER BY $5 NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], rank_window_1=[rank() OVER (PARTITION BY 0 ORDER BY $6 NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
              ImpalaProjectRel(ws_item_sk=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $func_0=[/(CAST($1):DECIMAL(15, 4), CAST($2):DECIMAL(15, 4))], $func_1=[/(CAST($3):DECIMAL(15, 4), CAST($4):DECIMAL(15, 4))])
                ImpalaAggregateRel(group=[{1}], agg#0=[sum($8)], agg#1=[sum($3)], agg#2=[sum($9)], agg#3=[sum($4)])
                  ImpalaJoinRel(condition=[AND(=($2, $7), =($1, $6))], joinType=[inner])
                    ImpalaJoinRel(condition=[=($0, $5)], joinType=[inner])
                      ImpalaProjectPassthroughRel(ws_sold_date_sk=[$0], ws_item_sk=[$3], ws_order_number=[$17], CAST=[CAST(COALESCE($18, 0)):BIGINT], COALESCE=[COALESCE($29, 0:DECIMAL(10, 0))])
                        ImpalaHdfsScanRel(table=[[default, impala_tpcds_web_sales]], condition=[AND(>($18, 0), >($33, 1), >($29, 0), IS NOT NULL($17), IS NOT NULL($3), IS NOT NULL($0))])
                      ImpalaProjectPassthroughRel(d_date_sk=[$0])
                        ImpalaHdfsScanRel(table=[[default, impala_tpcds_date_dim]], condition=[AND(=($6, 2000), =($8, 12), IS NOT NULL($0))])
                    ImpalaProjectPassthroughRel(wr_item_sk=[$2], wr_order_number=[$13], CAST=[CAST(COALESCE($14, 0)):BIGINT], COALESCE=[COALESCE($15, 0:DECIMAL(10, 0))])
                      ImpalaHdfsScanRel(table=[[default, impala_tpcds_web_returns]], condition=[AND(>($15, 10000), IS NOT NULL($13), IS NOT NULL($2))])
          ImpalaProjectPassthroughRel(channel=[_UTF-16LE'catalog':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"], item=[$0], return_ratio=[$1], return_rank=[$2], currency_rank=[$3])
            ImpalaProjectRel(item=[$0], return_ratio=[$5], rank_window_0=[rank() OVER (PARTITION BY 0 ORDER BY $5 NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], rank_window_1=[rank() OVER (PARTITION BY 0 ORDER BY $6 NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
              ImpalaProjectRel(cs_item_sk=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $func_0=[/(CAST($1):DECIMAL(15, 4), CAST($2):DECIMAL(15, 4))], $func_1=[/(CAST($3):DECIMAL(15, 4), CAST($4):DECIMAL(15, 4))])
                ImpalaAggregateRel(group=[{1}], agg#0=[sum($8)], agg#1=[sum($3)], agg#2=[sum($9)], agg#3=[sum($4)])
                  ImpalaJoinRel(condition=[AND(=($2, $7), =($1, $6))], joinType=[inner])
                    ImpalaJoinRel(condition=[=($0, $5)], joinType=[inner])
                      ImpalaProjectPassthroughRel(cs_sold_date_sk=[$0], cs_item_sk=[$15], cs_order_number=[$17], CAST=[CAST(COALESCE($18, 0)):BIGINT], COALESCE=[COALESCE($29, 0:DECIMAL(10, 0))])
                        ImpalaHdfsScanRel(table=[[default, impala_tpcds_catalog_sales]], condition=[AND(>($18, 0), >($33, 1), >($29, 0), IS NOT NULL($17), IS NOT NULL($15), IS NOT NULL($0))])
                      ImpalaProjectPassthroughRel(d_date_sk=[$0])
                        ImpalaHdfsScanRel(table=[[default, impala_tpcds_date_dim]], condition=[AND(=($6, 2000), =($8, 12), IS NOT NULL($0))])
                    ImpalaProjectPassthroughRel(cr_item_sk=[$2], cr_order_number=[$16], CAST=[CAST(COALESCE($17, 0)):BIGINT], COALESCE=[COALESCE($18, 0:DECIMAL(10, 0))])
                      ImpalaHdfsScanRel(table=[[default, impala_tpcds_catalog_returns]], condition=[AND(>($18, 10000), IS NOT NULL($16), IS NOT NULL($2))])
      ImpalaProjectPassthroughRel(channel=[_UTF-16LE'store':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"], item=[$0], return_ratio=[$1], return_rank=[$2], currency_rank=[$3])
        ImpalaProjectRel(item=[$0], return_ratio=[$5], rank_window_0=[rank() OVER (PARTITION BY 0 ORDER BY $5 NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], rank_window_1=[rank() OVER (PARTITION BY 0 ORDER BY $6 NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
          ImpalaProjectRel(ss_item_sk=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $func_0=[/(CAST($1):DECIMAL(15, 4), CAST($2):DECIMAL(15, 4))], $func_1=[/(CAST($3):DECIMAL(15, 4), CAST($4):DECIMAL(15, 4))])
            ImpalaAggregateRel(group=[{0}], agg#0=[sum($8)], agg#1=[sum($3)], agg#2=[sum($9)], agg#3=[sum($4)])
              ImpalaJoinRel(condition=[AND(=($1, $7), =($0, $6))], joinType=[inner])
                ImpalaJoinRel(condition=[=($2, $5)], joinType=[inner])
                  ImpalaProjectPassthroughRel(ss_item_sk=[$1], ss_ticket_number=[$8], ss_sold_date_sk=[$22], CAST=[CAST(COALESCE($9, 0)):BIGINT], COALESCE=[COALESCE($19, 0:DECIMAL(10, 0))])
                    ImpalaHdfsScanRel(table=[[default, impala_tpcds_store_sales]], condition=[AND(>($9, 0), >($21, 1), >($19, 0), IS NOT NULL($8), IS NOT NULL($1), IS NOT NULL($22))])
                  ImpalaProjectPassthroughRel(d_date_sk=[$0])
                    ImpalaHdfsScanRel(table=[[default, impala_tpcds_date_dim]], condition=[AND(=($6, 2000), =($8, 12), IS NOT NULL($0))])
                ImpalaProjectPassthroughRel(sr_item_sk=[$2], sr_ticket_number=[$9], CAST=[CAST(COALESCE($10, 0)):BIGINT], COALESCE=[COALESCE($11, 0:DECIMAL(10, 0))])
                  ImpalaHdfsScanRel(table=[[default, impala_tpcds_store_returns]], condition=[AND(>($11, 10000), IS NOT NULL($9), IS NOT NULL($2))])

PREHOOK: query: explain select  
 'web' as channel
 ,web.item
 ,web.return_ratio
 ,web.return_rank
 ,web.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select ws.ws_item_sk as item
 		,(cast(sum(coalesce(wr.wr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(wr.wr_return_amt,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		 impala_tpcds_web_sales ws left outer join impala_tpcds_web_returns wr 
 			on (ws.ws_order_number = wr.wr_order_number and 
 			ws.ws_item_sk = wr.wr_item_sk)
                 ,impala_tpcds_date_dim
 		where 
 			wr.wr_return_amt > 10000 
 			and ws.ws_net_profit > 1
                         and ws.ws_net_paid > 0
                         and ws.ws_quantity > 0
                         and ws_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by ws.ws_item_sk
 	) in_web
 ) web
 where 
 (
 web.return_rank <= 10
 or
 web.currency_rank <= 10
 )
 union
 select 
 'catalog' as channel
 ,catalog.item
 ,catalog.return_ratio
 ,catalog.return_rank
 ,catalog.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select 
 		cs.cs_item_sk as item
 		,(cast(sum(coalesce(cr.cr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(cr.cr_return_amount,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		impala_tpcds_catalog_sales cs left outer join impala_tpcds_catalog_returns cr
 			on (cs.cs_order_number = cr.cr_order_number and 
 			cs.cs_item_sk = cr.cr_item_sk)
                ,impala_tpcds_date_dim
 		where 
 			cr.cr_return_amount > 10000 
 			and cs.cs_net_profit > 1
                         and cs.cs_net_paid > 0
                         and cs.cs_quantity > 0
                         and cs_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
                 group by cs.cs_item_sk
 	) in_cat
 ) catalog
 where 
 (
 catalog.return_rank <= 10
 or
 catalog.currency_rank <=10
 )
 union
 select 
 'store' as channel
 ,store.item
 ,store.return_ratio
 ,store.return_rank
 ,store.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select sts.ss_item_sk as item
 		,(cast(sum(coalesce(sr.sr_return_quantity,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(sr.sr_return_amt,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		impala_tpcds_store_sales sts left outer join impala_tpcds_store_returns sr
 			on (sts.ss_ticket_number = sr.sr_ticket_number and sts.ss_item_sk = sr.sr_item_sk)
                ,impala_tpcds_date_dim
 		where 
 			sr.sr_return_amt > 10000 
 			and sts.ss_net_profit > 1
                         and sts.ss_net_paid > 0 
                         and sts.ss_quantity > 0
                         and ss_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by sts.ss_item_sk
 	) in_store
 ) store
 where  (
 store.return_rank <= 10
 or 
 store.currency_rank <= 10
 )
 order by 1,4,5
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@impala_tpcds_catalog_returns
PREHOOK: Input: default@impala_tpcds_catalog_sales
PREHOOK: Input: default@impala_tpcds_date_dim
PREHOOK: Input: default@impala_tpcds_store_returns
PREHOOK: Input: default@impala_tpcds_store_sales
PREHOOK: Input: default@impala_tpcds_web_returns
PREHOOK: Input: default@impala_tpcds_web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain select  
 'web' as channel
 ,web.item
 ,web.return_ratio
 ,web.return_rank
 ,web.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select ws.ws_item_sk as item
 		,(cast(sum(coalesce(wr.wr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(wr.wr_return_amt,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		 impala_tpcds_web_sales ws left outer join impala_tpcds_web_returns wr 
 			on (ws.ws_order_number = wr.wr_order_number and 
 			ws.ws_item_sk = wr.wr_item_sk)
                 ,impala_tpcds_date_dim
 		where 
 			wr.wr_return_amt > 10000 
 			and ws.ws_net_profit > 1
                         and ws.ws_net_paid > 0
                         and ws.ws_quantity > 0
                         and ws_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by ws.ws_item_sk
 	) in_web
 ) web
 where 
 (
 web.return_rank <= 10
 or
 web.currency_rank <= 10
 )
 union
 select 
 'catalog' as channel
 ,catalog.item
 ,catalog.return_ratio
 ,catalog.return_rank
 ,catalog.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select 
 		cs.cs_item_sk as item
 		,(cast(sum(coalesce(cr.cr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(cr.cr_return_amount,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		impala_tpcds_catalog_sales cs left outer join impala_tpcds_catalog_returns cr
 			on (cs.cs_order_number = cr.cr_order_number and 
 			cs.cs_item_sk = cr.cr_item_sk)
                ,impala_tpcds_date_dim
 		where 
 			cr.cr_return_amount > 10000 
 			and cs.cs_net_profit > 1
                         and cs.cs_net_paid > 0
                         and cs.cs_quantity > 0
                         and cs_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
                 group by cs.cs_item_sk
 	) in_cat
 ) catalog
 where 
 (
 catalog.return_rank <= 10
 or
 catalog.currency_rank <=10
 )
 union
 select 
 'store' as channel
 ,store.item
 ,store.return_ratio
 ,store.return_rank
 ,store.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select sts.ss_item_sk as item
 		,(cast(sum(coalesce(sr.sr_return_quantity,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(sr.sr_return_amt,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		impala_tpcds_store_sales sts left outer join impala_tpcds_store_returns sr
 			on (sts.ss_ticket_number = sr.sr_ticket_number and sts.ss_item_sk = sr.sr_item_sk)
                ,impala_tpcds_date_dim
 		where 
 			sr.sr_return_amt > 10000 
 			and sts.ss_net_profit > 1
                         and sts.ss_net_paid > 0 
                         and sts.ss_quantity > 0
                         and ss_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by sts.ss_item_sk
 	) in_store
 ) store
 where  (
 store.return_rank <= 10
 or 
 store.currency_rank <= 10
 )
 order by 1,4,5
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@impala_tpcds_catalog_returns
POSTHOOK: Input: default@impala_tpcds_catalog_sales
POSTHOOK: Input: default@impala_tpcds_date_dim
POSTHOOK: Input: default@impala_tpcds_store_returns
POSTHOOK: Input: default@impala_tpcds_store_sales
POSTHOOK: Input: default@impala_tpcds_web_returns
POSTHOOK: Input: default@impala_tpcds_web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Impala
      Impala Plan: 
F22:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=270.09MB mem-reservation=82.00MB thread-reservation=1
  PLAN-ROOT SINK
  |  output exprs: channel, item, return_ratio, return_rank, currency_rank
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |
  43:TOP-N [LIMIT=100]
  |  order by: channel ASC NULLS LAST, return_rank ASC NULLS LAST, currency_rank ASC NULLS LAST
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=60 row-size=52B cardinality=0
  |  in pipelines: 43(GETNEXT), 42(OPEN)
  |
  42:AGGREGATE [FINALIZE]
  |  group by: channel, item, return_ratio, return_rank, currency_rank
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=59 row-size=52B cardinality=0
  |  in pipelines: 42(GETNEXT), 28(OPEN), 39(OPEN)
  |
  00:UNION
  |  pass-through-operands: 28
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=0 row-size=52B cardinality=0
  |  in pipelines: 28(GETNEXT), 39(GETNEXT)
  |
  |--41:SELECT
  |  |  predicates: rank_window_0 <= CAST(10 AS BIGINT) OR rank_window_1 <= CAST(10 AS BIGINT)
  |  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  |  tuple-ids=48 row-size=40B cardinality=0
  |  |  in pipelines: 39(GETNEXT)
  |  |
  |  29:UNION
  |  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  |  tuple-ids=48 row-size=40B cardinality=0
  |  |  in pipelines: 39(GETNEXT)
  |  |
  |  40:ANALYTIC
  |  |  functions: _impala_builtins.rank()
  |  |  partition by: 0
  |  |  order by: $func_1 ASC
  |  |  window: ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
  |  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |  |  tuple-ids=57,54 row-size=104B cardinality=0
  |  |  in pipelines: 39(GETNEXT)
  |  |
  |  39:SORT
  |  |  order by: 0 ASC NULLS FIRST, $func_1 ASC NULLS LAST
  |  |  mem-estimate=6.00MB mem-reservation=6.00MB spill-buffer=2.00MB thread-reservation=0
  |  |  tuple-ids=57 row-size=96B cardinality=0
  |  |  in pipelines: 39(GETNEXT), 37(OPEN)
  |  |
  |  38:ANALYTIC
  |  |  functions: _impala_builtins.rank()
  |  |  partition by: 0
  |  |  order by: $func_0 ASC
  |  |  window: ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
  |  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |  |  tuple-ids=55,52 row-size=96B cardinality=0
  |  |  in pipelines: 37(GETNEXT)
  |  |
  |  58:MERGING-EXCHANGE [UNPARTITIONED]
  |     order by: 0 ASC NULLS FIRST, $func_0 ASC NULLS LAST
  |     mem-estimate=92.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=55 row-size=88B cardinality=0
  |     in pipelines: 37(GETNEXT)
  |
  28:AGGREGATE [FINALIZE]
  |  group by: channel, item, return_ratio, return_rank, currency_rank
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=40 row-size=52B cardinality=0
  |  in pipelines: 28(GETNEXT), 12(OPEN), 25(OPEN)
  |
  01:UNION
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=1 row-size=52B cardinality=0
  |  in pipelines: 12(GETNEXT), 25(GETNEXT)
  |
  |--27:SELECT
  |  |  predicates: rank_window_0 <= CAST(10 AS BIGINT) OR rank_window_1 <= CAST(10 AS BIGINT)
  |  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  |  tuple-ids=29 row-size=40B cardinality=0
  |  |  in pipelines: 25(GETNEXT)
  |  |
  |  15:UNION
  |  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  |  tuple-ids=29 row-size=40B cardinality=0
  |  |  in pipelines: 25(GETNEXT)
  |  |
  |  26:ANALYTIC
  |  |  functions: _impala_builtins.rank()
  |  |  partition by: 0
  |  |  order by: $func_1 ASC
  |  |  window: ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
  |  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |  |  tuple-ids=38,35 row-size=104B cardinality=0
  |  |  in pipelines: 25(GETNEXT)
  |  |
  |  25:SORT
  |  |  order by: 0 ASC NULLS FIRST, $func_1 ASC NULLS LAST
  |  |  mem-estimate=6.00MB mem-reservation=6.00MB spill-buffer=2.00MB thread-reservation=0
  |  |  tuple-ids=38 row-size=96B cardinality=0
  |  |  in pipelines: 25(GETNEXT), 23(OPEN)
  |  |
  |  24:ANALYTIC
  |  |  functions: _impala_builtins.rank()
  |  |  partition by: 0
  |  |  order by: $func_0 ASC
  |  |  window: ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
  |  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |  |  tuple-ids=36,33 row-size=96B cardinality=0
  |  |  in pipelines: 23(GETNEXT)
  |  |
  |  53:MERGING-EXCHANGE [UNPARTITIONED]
  |     order by: 0 ASC NULLS FIRST, $func_0 ASC NULLS LAST
  |     mem-estimate=92.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=36 row-size=88B cardinality=0
  |     in pipelines: 23(GETNEXT)
  |
  14:SELECT
  |  predicates: rank_window_0 <= CAST(10 AS BIGINT) OR rank_window_1 <= CAST(10 AS BIGINT)
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=10 row-size=40B cardinality=0
  |  in pipelines: 12(GETNEXT)
  |
  02:UNION
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=10 row-size=40B cardinality=0
  |  in pipelines: 12(GETNEXT)
  |
  13:ANALYTIC
  |  functions: _impala_builtins.rank()
  |  partition by: 0
  |  order by: $func_1 ASC
  |  window: ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=19,16 row-size=104B cardinality=0
  |  in pipelines: 12(GETNEXT)
  |
  12:SORT
  |  order by: 0 ASC NULLS FIRST, $func_1 ASC NULLS LAST
  |  mem-estimate=6.00MB mem-reservation=6.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=19 row-size=96B cardinality=0
  |  in pipelines: 12(GETNEXT), 10(OPEN)
  |
  11:ANALYTIC
  |  functions: _impala_builtins.rank()
  |  partition by: 0
  |  order by: $func_0 ASC
  |  window: ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=17,14 row-size=96B cardinality=0
  |  in pipelines: 10(GETNEXT)
  |
  48:MERGING-EXCHANGE [UNPARTITIONED]
     order by: 0 ASC NULLS FIRST, $func_0 ASC NULLS LAST
     mem-estimate=92.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=17 row-size=88B cardinality=0
     in pipelines: 10(GETNEXT)

F04:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=134.06MB mem-reservation=40.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F22, EXCHANGE=48, UNPARTITIONED]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  10:SORT
  |  order by: 0 ASC NULLS FIRST, $func_0 ASC NULLS LAST
  |  mem-estimate=6.00MB mem-reservation=6.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=17 row-size=88B cardinality=0
  |  in pipelines: 10(GETNEXT), 47(OPEN)
  |
  03:UNION
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=9 row-size=88B cardinality=0
  |  in pipelines: 47(GETNEXT)
  |
  47:AGGREGATE [FINALIZE]
  |  output: _impala_builtins.sum:merge(_impala_builtins.casttobigint(_impala_builtins.coalesce(wr.wr_return_quantity, 0))), _impala_builtins.sum:merge(_impala_builtins.casttobigint(_impala_builtins.coalesce(ws.ws_quantity, 0))), _impala_builtins.sum:merge(_impala_builtins.coalesce(wr.wr_return_amt, 0)), _impala_builtins.sum:merge(_impala_builtins.coalesce(ws.ws_net_paid, 0))
  |  group by: ws.ws_item_sk
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=8 row-size=56B cardinality=0
  |  in pipelines: 47(GETNEXT), 04(OPEN)
  |
  46:EXCHANGE [HASH(ws.ws_item_sk)]
     mem-estimate=60.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=8 row-size=56B cardinality=0
     in pipelines: 04(GETNEXT)

F00:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=131.92MB mem-reservation=37.88MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F04, EXCHANGE=46, HASH(ws.ws_item_sk)]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  09:AGGREGATE [STREAMING]
  |  output: sum(_impala_builtins.casttobigint(_impala_builtins.coalesce(wr.wr_return_quantity, CAST(0 AS INT)))), sum(_impala_builtins.casttobigint(_impala_builtins.coalesce(ws.ws_quantity, CAST(0 AS INT)))), sum(_impala_builtins.coalesce(wr.wr_return_amt, CAST(0 AS DECIMAL(10,0)))), sum(_impala_builtins.coalesce(ws.ws_net_paid, CAST(0 AS DECIMAL(10,0))))
  |  group by: ws.ws_item_sk
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=8 row-size=56B cardinality=0
  |  in pipelines: 04(GETNEXT)
  |
  08:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: ws.ws_item_sk = wr.wr_item_sk, ws.ws_order_number = wr.wr_order_number
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=2,4,6 row-size=68B cardinality=0
  |  in pipelines: 04(GETNEXT), 07(OPEN)
  |
  |--45:EXCHANGE [BROADCAST]
  |     mem-estimate=28.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=6 row-size=24B cardinality=0
  |     in pipelines: 07(GETNEXT)
  |
  06:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: ws.ws_sold_date_sk = default.impala_tpcds_date_dim.d_date_sk
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=2,4 row-size=44B cardinality=0
  |  in pipelines: 04(GETNEXT), 05(OPEN)
  |
  |--44:EXCHANGE [BROADCAST]
  |     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=4 row-size=12B cardinality=0
  |     in pipelines: 05(GETNEXT)
  |
  04:SCAN HDFS [default.impala_tpcds_web_sales ws, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: ws.ws_item_sk IS NOT NULL, ws.ws_order_number IS NOT NULL, ws.ws_sold_date_sk IS NOT NULL, ws.ws_net_paid > CAST(0 AS DECIMAL(7,2)), ws.ws_net_profit > CAST(1 AS DECIMAL(7,2)), ws.ws_quantity > CAST(0 AS INT)
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: ws.ws_net_paid > CAST(0 AS DECIMAL(7,2)), ws.ws_net_profit > CAST(1 AS DECIMAL(7,2)), ws.ws_quantity > CAST(0 AS INT)
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=2 row-size=32B cardinality=0
     in pipelines: 04(GETNEXT)

F01:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F00, EXCHANGE=44, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  05:SCAN HDFS [default.impala_tpcds_date_dim, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_date_dim.d_date_sk IS NOT NULL, default.impala_tpcds_date_dim.d_moy = CAST(12 AS INT), default.impala_tpcds_date_dim.d_year = CAST(2000 AS INT)
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: default.impala_tpcds_date_dim.d_moy = CAST(12 AS INT), default.impala_tpcds_date_dim.d_year = CAST(2000 AS INT)
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=4 row-size=12B cardinality=0
     in pipelines: 05(GETNEXT)

F02:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F00, EXCHANGE=45, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  07:SCAN HDFS [default.impala_tpcds_web_returns wr, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: wr.wr_item_sk IS NOT NULL, wr.wr_order_number IS NOT NULL, wr.wr_return_amt > CAST(10000 AS DECIMAL(7,2))
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: wr.wr_return_amt > CAST(10000 AS DECIMAL(7,2))
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=6 row-size=24B cardinality=0
     in pipelines: 07(GETNEXT)

F11:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=134.06MB mem-reservation=40.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F22, EXCHANGE=53, UNPARTITIONED]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  23:SORT
  |  order by: 0 ASC NULLS FIRST, $func_0 ASC NULLS LAST
  |  mem-estimate=6.00MB mem-reservation=6.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=36 row-size=88B cardinality=0
  |  in pipelines: 23(GETNEXT), 52(OPEN)
  |
  16:UNION
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=28 row-size=88B cardinality=0
  |  in pipelines: 52(GETNEXT)
  |
  52:AGGREGATE [FINALIZE]
  |  output: _impala_builtins.sum:merge(_impala_builtins.casttobigint(_impala_builtins.coalesce(cr.cr_return_quantity, 0))), _impala_builtins.sum:merge(_impala_builtins.casttobigint(_impala_builtins.coalesce(cs.cs_quantity, 0))), _impala_builtins.sum:merge(_impala_builtins.coalesce(cr.cr_return_amount, 0)), _impala_builtins.sum:merge(_impala_builtins.coalesce(cs.cs_net_paid, 0))
  |  group by: cs.cs_item_sk
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=27 row-size=56B cardinality=0
  |  in pipelines: 52(GETNEXT), 17(OPEN)
  |
  51:EXCHANGE [HASH(cs.cs_item_sk)]
     mem-estimate=60.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=27 row-size=56B cardinality=0
     in pipelines: 17(GETNEXT)

F07:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=131.92MB mem-reservation=37.88MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F11, EXCHANGE=51, HASH(cs.cs_item_sk)]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  22:AGGREGATE [STREAMING]
  |  output: sum(_impala_builtins.casttobigint(_impala_builtins.coalesce(cr.cr_return_quantity, CAST(0 AS INT)))), sum(_impala_builtins.casttobigint(_impala_builtins.coalesce(cs.cs_quantity, CAST(0 AS INT)))), sum(_impala_builtins.coalesce(cr.cr_return_amount, CAST(0 AS DECIMAL(10,0)))), sum(_impala_builtins.coalesce(cs.cs_net_paid, CAST(0 AS DECIMAL(10,0))))
  |  group by: cs.cs_item_sk
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=27 row-size=56B cardinality=0
  |  in pipelines: 17(GETNEXT)
  |
  21:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: cs.cs_item_sk = cr.cr_item_sk, cs.cs_order_number = cr.cr_order_number
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=21,23,25 row-size=68B cardinality=0
  |  in pipelines: 17(GETNEXT), 20(OPEN)
  |
  |--50:EXCHANGE [BROADCAST]
  |     mem-estimate=28.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=25 row-size=24B cardinality=0
  |     in pipelines: 20(GETNEXT)
  |
  19:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: cs.cs_sold_date_sk = default.impala_tpcds_date_dim_0.d_date_sk
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=21,23 row-size=44B cardinality=0
  |  in pipelines: 17(GETNEXT), 18(OPEN)
  |
  |--49:EXCHANGE [BROADCAST]
  |     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=23 row-size=12B cardinality=0
  |     in pipelines: 18(GETNEXT)
  |
  17:SCAN HDFS [default.impala_tpcds_catalog_sales cs, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: cs.cs_item_sk IS NOT NULL, cs.cs_order_number IS NOT NULL, cs.cs_sold_date_sk IS NOT NULL, cs.cs_net_paid > CAST(0 AS DECIMAL(7,2)), cs.cs_net_profit > CAST(1 AS DECIMAL(7,2)), cs.cs_quantity > CAST(0 AS INT)
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: cs.cs_net_paid > CAST(0 AS DECIMAL(7,2)), cs.cs_net_profit > CAST(1 AS DECIMAL(7,2)), cs.cs_quantity > CAST(0 AS INT)
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=21 row-size=32B cardinality=0
     in pipelines: 17(GETNEXT)

F08:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F07, EXCHANGE=49, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  18:SCAN HDFS [default.impala_tpcds_date_dim, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_date_dim_0.d_date_sk IS NOT NULL, default.impala_tpcds_date_dim_0.d_moy = CAST(12 AS INT), default.impala_tpcds_date_dim_0.d_year = CAST(2000 AS INT)
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: default.impala_tpcds_date_dim_0.d_moy = CAST(12 AS INT), default.impala_tpcds_date_dim_0.d_year = CAST(2000 AS INT)
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=23 row-size=12B cardinality=0
     in pipelines: 18(GETNEXT)

F09:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F07, EXCHANGE=50, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  20:SCAN HDFS [default.impala_tpcds_catalog_returns cr, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: cr.cr_item_sk IS NOT NULL, cr.cr_order_number IS NOT NULL, cr.cr_return_amount > CAST(10000 AS DECIMAL(7,2))
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: cr.cr_return_amount > CAST(10000 AS DECIMAL(7,2))
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=25 row-size=24B cardinality=0
     in pipelines: 20(GETNEXT)

F19:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=134.06MB mem-reservation=40.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F22, EXCHANGE=58, UNPARTITIONED]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  37:SORT
  |  order by: 0 ASC NULLS FIRST, $func_0 ASC NULLS LAST
  |  mem-estimate=6.00MB mem-reservation=6.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=55 row-size=88B cardinality=0
  |  in pipelines: 37(GETNEXT), 57(OPEN)
  |
  30:UNION
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=47 row-size=88B cardinality=0
  |  in pipelines: 57(GETNEXT)
  |
  57:AGGREGATE [FINALIZE]
  |  output: _impala_builtins.sum:merge(_impala_builtins.casttobigint(_impala_builtins.coalesce(sr.sr_return_quantity, 0))), _impala_builtins.sum:merge(_impala_builtins.casttobigint(_impala_builtins.coalesce(sts.ss_quantity, 0))), _impala_builtins.sum:merge(_impala_builtins.coalesce(sr.sr_return_amt, 0)), _impala_builtins.sum:merge(_impala_builtins.coalesce(sts.ss_net_paid, 0))
  |  group by: sts.ss_item_sk
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=46 row-size=56B cardinality=0
  |  in pipelines: 57(GETNEXT), 31(OPEN)
  |
  56:EXCHANGE [HASH(sts.ss_item_sk)]
     mem-estimate=60.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=46 row-size=56B cardinality=0
     in pipelines: 31(GETNEXT)

F15:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=131.92MB mem-reservation=37.88MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F19, EXCHANGE=56, HASH(sts.ss_item_sk)]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  36:AGGREGATE [STREAMING]
  |  output: sum(_impala_builtins.casttobigint(_impala_builtins.coalesce(sr.sr_return_quantity, CAST(0 AS INT)))), sum(_impala_builtins.casttobigint(_impala_builtins.coalesce(sts.ss_quantity, CAST(0 AS INT)))), sum(_impala_builtins.coalesce(sr.sr_return_amt, CAST(0 AS DECIMAL(10,0)))), sum(_impala_builtins.coalesce(sts.ss_net_paid, CAST(0 AS DECIMAL(10,0))))
  |  group by: sts.ss_item_sk
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=46 row-size=56B cardinality=0
  |  in pipelines: 31(GETNEXT)
  |
  35:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: sts.ss_item_sk = sr.sr_item_sk, sts.ss_ticket_number = sr.sr_ticket_number
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=41,42,44 row-size=68B cardinality=0
  |  in pipelines: 31(GETNEXT), 34(OPEN)
  |
  |--55:EXCHANGE [BROADCAST]
  |     mem-estimate=28.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=44 row-size=24B cardinality=0
  |     in pipelines: 34(GETNEXT)
  |
  33:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: sts.ss_sold_date_sk = default.impala_tpcds_date_dim_1.d_date_sk
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=41,42 row-size=44B cardinality=0
  |  in pipelines: 31(GETNEXT), 32(OPEN)
  |
  |--54:EXCHANGE [BROADCAST]
  |     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=42 row-size=12B cardinality=0
  |     in pipelines: 32(GETNEXT)
  |
  31:SCAN HDFS [default.impala_tpcds_store_sales sts, RANDOM]
     partition predicates: sts.ss_sold_date_sk IS NOT NULL
     partitions=0/0 files=0 size=0B
     predicates: sts.ss_item_sk IS NOT NULL, sts.ss_ticket_number IS NOT NULL, sts.ss_net_paid > CAST(0 AS DECIMAL(7,2)), sts.ss_net_profit > CAST(1 AS DECIMAL(7,2)), sts.ss_quantity > CAST(0 AS INT)
     stored statistics:
       table: rows=unavailable size=unavailable
       partitions: 0/0 rows=unavailable
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=41 row-size=32B cardinality=0
     in pipelines: 31(GETNEXT)

F16:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F15, EXCHANGE=54, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  32:SCAN HDFS [default.impala_tpcds_date_dim, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_date_dim_1.d_date_sk IS NOT NULL, default.impala_tpcds_date_dim_1.d_moy = CAST(12 AS INT), default.impala_tpcds_date_dim_1.d_year = CAST(2000 AS INT)
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: default.impala_tpcds_date_dim_1.d_moy = CAST(12 AS INT), default.impala_tpcds_date_dim_1.d_year = CAST(2000 AS INT)
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=42 row-size=12B cardinality=0
     in pipelines: 32(GETNEXT)

F17:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F15, EXCHANGE=55, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  34:SCAN HDFS [default.impala_tpcds_store_returns sr, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: sr.sr_item_sk IS NOT NULL, sr.sr_ticket_number IS NOT NULL, sr.sr_return_amt > CAST(10000 AS DECIMAL(7,2))
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: sr.sr_return_amt > CAST(10000 AS DECIMAL(7,2))
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=44 row-size=24B cardinality=0
     in pipelines: 34(GETNEXT)


  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

