PREHOOK: query: explain cbo with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   impala_tpcds_catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   impala_tpcds_web_sales
         ) cs_or_ws_sales,
         impala_tpcds_item,
         impala_tpcds_date_dim,
         impala_tpcds_customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Books'
         and i_class = 'business'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 2
         and d_year = 2000
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        impala_tpcds_store_sales,
        impala_tpcds_customer_address,
        impala_tpcds_store,
        impala_tpcds_date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   impala_tpcds_date_dim where d_year = 2000 and d_moy = 2)
                           and  (select distinct d_month_seq+3
                                 from   impala_tpcds_date_dim where d_year = 2000 and d_moy = 2)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@impala_tpcds_catalog_sales
PREHOOK: Input: default@impala_tpcds_customer
PREHOOK: Input: default@impala_tpcds_customer_address
PREHOOK: Input: default@impala_tpcds_date_dim
PREHOOK: Input: default@impala_tpcds_item
PREHOOK: Input: default@impala_tpcds_store
PREHOOK: Input: default@impala_tpcds_store_sales
PREHOOK: Input: default@impala_tpcds_web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain cbo with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   impala_tpcds_catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   impala_tpcds_web_sales
         ) cs_or_ws_sales,
         impala_tpcds_item,
         impala_tpcds_date_dim,
         impala_tpcds_customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Books'
         and i_class = 'business'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 2
         and d_year = 2000
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        impala_tpcds_store_sales,
        impala_tpcds_customer_address,
        impala_tpcds_store,
        impala_tpcds_date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   impala_tpcds_date_dim where d_year = 2000 and d_moy = 2)
                           and  (select distinct d_month_seq+3
                                 from   impala_tpcds_date_dim where d_year = 2000 and d_moy = 2)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@impala_tpcds_catalog_sales
POSTHOOK: Input: default@impala_tpcds_customer
POSTHOOK: Input: default@impala_tpcds_customer_address
POSTHOOK: Input: default@impala_tpcds_date_dim
POSTHOOK: Input: default@impala_tpcds_item
POSTHOOK: Input: default@impala_tpcds_store
POSTHOOK: Input: default@impala_tpcds_store_sales
POSTHOOK: Input: default@impala_tpcds_web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
CBO PLAN:
ImpalaSortRel(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC], fetch=[100])
  ImpalaProjectRel(segment=[$0], num_customers=[$1], segment_base=[*(CAST($0):BIGINT, 50)])
    ImpalaAggregateRel(group=[{0}], agg#0=[count()])
      ImpalaProjectPassthroughRel(segment=[CAST(/($1, 50:DECIMAL(10, 0))):INTEGER NOT NULL])
        ImpalaAggregateRel(group=[{0}], agg#0=[sum($3)])
          ImpalaJoinRel(condition=[true], joinType=[inner])
            ImpalaProjectPassthroughRel($f0=[$7], $f1=[$8], ss_customer_sk=[$0], ss_ext_sales_price=[$1], ss_sold_date_sk=[$2], ca_address_sk=[$9], ca_county=[$10], ca_state=[$11], s_county=[$12], s_state=[$13], d_date_sk=[$5], d_month_seq=[$6], cnt=[$4], $f00=[$3])
              ImpalaJoinRel(condition=[=($8, $9)], joinType=[inner])
                ImpalaJoinRel(condition=[=($7, $0)], joinType=[inner])
                  ImpalaJoinRel(condition=[=($2, $5)], joinType=[inner])
                    ImpalaJoinRel(condition=[true], joinType=[inner])
                      ImpalaJoinRel(condition=[true], joinType=[left])
                        ImpalaProjectPassthroughRel(ss_customer_sk=[$2], ss_ext_sales_price=[$14], ss_sold_date_sk=[$22])
                          ImpalaHdfsScanRel(table=[[default, impala_tpcds_store_sales]], condition=[AND(IS NOT NULL($2), IS NOT NULL($22))])
                        ImpalaAggregateRel(group=[{0}])
                          ImpalaProjectPassthroughRel($f0=[+(CAST($3):BIGINT, 1)])
                            ImpalaHdfsScanRel(table=[[default, impala_tpcds_date_dim]], condition=[AND(=($6, 2000), =($8, 2))])
                      ImpalaAggregateRel(group=[{}], cnt=[COUNT()], condition=[<=(sq_count_check($0), 1)])
                        ImpalaAggregateRel(group=[{0}])
                          ImpalaProjectPassthroughRel($f0=[+(CAST($3):BIGINT, 1)])
                            ImpalaHdfsScanRel(table=[[default, impala_tpcds_date_dim]], condition=[AND(=($6, 2000), =($8, 2))])
                    ImpalaProjectPassthroughRel(d_date_sk=[$0], d_month_seq=[$3])
                      ImpalaHdfsScanRel(table=[[default, impala_tpcds_date_dim]], condition=[IS NOT NULL($0)])
                  ImpalaAggregateRel(group=[{5, 6}])
                    ImpalaJoinRel(condition=[=($5, $1)], joinType=[inner])
                      ImpalaJoinRel(condition=[=($0, $4)], joinType=[inner])
                        ImpalaJoinRel(condition=[=($2, $3)], joinType=[inner])
                          ImpalaUnionRel(all=[true])
                            ImpalaProjectPassthroughRel(cs_sold_date_sk=[$0], cs_bill_customer_sk=[$3], cs_item_sk=[$15])
                              ImpalaHdfsScanRel(table=[[default, impala_tpcds_catalog_sales]], condition=[AND(IS NOT NULL($15), IS NOT NULL($0), IS NOT NULL($3))])
                            ImpalaProjectPassthroughRel(sold_date_sk=[$0], customer_sk=[$4], item_sk=[$3])
                              ImpalaHdfsScanRel(table=[[default, impala_tpcds_web_sales]], condition=[AND(IS NOT NULL($3), IS NOT NULL($0), IS NOT NULL($4))])
                          ImpalaProjectPassthroughRel(i_item_sk=[$0])
                            ImpalaHdfsScanRel(table=[[default, impala_tpcds_item]], condition=[AND(=($12, _UTF-16LE'Books'), =($10, _UTF-16LE'business'), IS NOT NULL($0))])
                        ImpalaProjectPassthroughRel(d_date_sk=[$0])
                          ImpalaHdfsScanRel(table=[[default, impala_tpcds_date_dim]], condition=[AND(=($8, 2), =($6, 2000), IS NOT NULL($0))])
                      ImpalaProjectPassthroughRel(c_customer_sk=[$0], c_current_addr_sk=[$4])
                        ImpalaHdfsScanRel(table=[[default, impala_tpcds_customer]], condition=[AND(IS NOT NULL($0), IS NOT NULL($4))])
                ImpalaJoinRel(condition=[AND(=($1, $3), =($2, $4))], joinType=[inner])
                  ImpalaProjectPassthroughRel(ca_address_sk=[$0], ca_county=[$7], ca_state=[$8])
                    ImpalaHdfsScanRel(table=[[default, impala_tpcds_customer_address]], condition=[AND(IS NOT NULL($0), IS NOT NULL($7), IS NOT NULL($8))])
                  ImpalaProjectPassthroughRel(s_county=[$23], s_state=[$24])
                    ImpalaHdfsScanRel(table=[[default, impala_tpcds_store]], condition=[AND(IS NOT NULL($23), IS NOT NULL($24))])
            ImpalaJoinRel(condition=[true], joinType=[left])
              ImpalaAggregateRel(group=[{}], cnt=[COUNT()], condition=[<=(sq_count_check($0), 1)])
                ImpalaAggregateRel(group=[{0}])
                  ImpalaProjectPassthroughRel($f0=[+(CAST($3):BIGINT, 3)])
                    ImpalaHdfsScanRel(table=[[default, impala_tpcds_date_dim]], condition=[AND(=($6, 2000), =($8, 2))])
              ImpalaAggregateRel(group=[{0}])
                ImpalaProjectPassthroughRel($f0=[+(CAST($3):BIGINT, 3)])
                  ImpalaHdfsScanRel(table=[[default, impala_tpcds_date_dim]], condition=[AND(=($6, 2000), =($8, 2))])

PREHOOK: query: explain with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   impala_tpcds_catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   impala_tpcds_web_sales
         ) cs_or_ws_sales,
         impala_tpcds_item,
         impala_tpcds_date_dim,
         impala_tpcds_customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Books'
         and i_class = 'business'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 2
         and d_year = 2000
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        impala_tpcds_store_sales,
        impala_tpcds_customer_address,
        impala_tpcds_store,
        impala_tpcds_date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   impala_tpcds_date_dim where d_year = 2000 and d_moy = 2)
                           and  (select distinct d_month_seq+3
                                 from   impala_tpcds_date_dim where d_year = 2000 and d_moy = 2)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@impala_tpcds_catalog_sales
PREHOOK: Input: default@impala_tpcds_customer
PREHOOK: Input: default@impala_tpcds_customer_address
PREHOOK: Input: default@impala_tpcds_date_dim
PREHOOK: Input: default@impala_tpcds_item
PREHOOK: Input: default@impala_tpcds_store
PREHOOK: Input: default@impala_tpcds_store_sales
PREHOOK: Input: default@impala_tpcds_web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   impala_tpcds_catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   impala_tpcds_web_sales
         ) cs_or_ws_sales,
         impala_tpcds_item,
         impala_tpcds_date_dim,
         impala_tpcds_customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Books'
         and i_class = 'business'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 2
         and d_year = 2000
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        impala_tpcds_store_sales,
        impala_tpcds_customer_address,
        impala_tpcds_store,
        impala_tpcds_date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   impala_tpcds_date_dim where d_year = 2000 and d_moy = 2)
                           and  (select distinct d_month_seq+3
                                 from   impala_tpcds_date_dim where d_year = 2000 and d_moy = 2)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@impala_tpcds_catalog_sales
POSTHOOK: Input: default@impala_tpcds_customer
POSTHOOK: Input: default@impala_tpcds_customer_address
POSTHOOK: Input: default@impala_tpcds_date_dim
POSTHOOK: Input: default@impala_tpcds_item
POSTHOOK: Input: default@impala_tpcds_store
POSTHOOK: Input: default@impala_tpcds_store_sales
POSTHOOK: Input: default@impala_tpcds_web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Impala
      Impala Plan: 
F24:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=24.00KB mem-reservation=0B thread-reservation=1
  PLAN-ROOT SINK
  |  output exprs: segment, num_customers, segment_base
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |
  65:MERGING-EXCHANGE [UNPARTITIONED]
     order by: segment ASC NULLS LAST, num_customers ASC NULLS LAST
     limit: 100
     mem-estimate=24.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=36 row-size=20B cardinality=0
     in pipelines: 35(GETNEXT)

F23:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=128.02MB mem-reservation=34.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F24, EXCHANGE=65, UNPARTITIONED]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  35:TOP-N [LIMIT=100]
  |  order by: segment ASC NULLS LAST, num_customers ASC NULLS LAST
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=36 row-size=20B cardinality=0
  |  in pipelines: 35(GETNEXT), 64(OPEN)
  |
  00:UNION
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=35 row-size=20B cardinality=0
  |  in pipelines: 64(GETNEXT)
  |
  64:AGGREGATE [FINALIZE]
  |  output: _impala_builtins.count:merge()
  |  group by: _impala_builtins.casttoint(_impala_builtins.divide(_impala_builtins.sum(default.impala_tpcds_store_sales.ss_ext_sales_price), 50))
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=34 row-size=12B cardinality=0
  |  in pipelines: 64(GETNEXT), 62(OPEN)
  |
  63:EXCHANGE [HASH(_impala_builtins.casttoint(_impala_builtins.divide(_impala_builtins.sum(default.impala_tpcds_store_sales.ss_ext_sales_price), 50)))]
     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=34 row-size=12B cardinality=0
     in pipelines: 62(GETNEXT)

F21:PLAN FRAGMENT [HASH(default.impala_tpcds_customer.c_customer_sk)] hosts=1 instances=1
Per-Host Resources: mem-estimate=256.02MB mem-reservation=68.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F23, EXCHANGE=63, HASH(_impala_builtins.casttoint(_impala_builtins.divide(_impala_builtins.sum(default.impala_tpcds_store_sales.ss_ext_sales_price), 50)))]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  34:AGGREGATE [STREAMING]
  |  output: count()
  |  group by: _impala_builtins.casttoint(_impala_builtins.divide(_impala_builtins.sum(default.impala_tpcds_store_sales.ss_ext_sales_price), CAST(50 AS DECIMAL(10,0))))
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=34 row-size=12B cardinality=0
  |  in pipelines: 62(GETNEXT)
  |
  62:AGGREGATE [FINALIZE]
  |  output: _impala_builtins.sum:merge(default.impala_tpcds_store_sales.ss_ext_sales_price)
  |  group by: default.impala_tpcds_customer.c_customer_sk
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=33 row-size=20B cardinality=0
  |  in pipelines: 62(GETNEXT), 01(OPEN)
  |
  61:EXCHANGE [HASH(default.impala_tpcds_customer.c_customer_sk)]
     mem-estimate=24.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=33 row-size=20B cardinality=0
     in pipelines: 01(GETNEXT)

F00:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=133.95MB mem-reservation=39.81MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F21, EXCHANGE=61, HASH(default.impala_tpcds_customer.c_customer_sk)]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  33:AGGREGATE [STREAMING]
  |  output: sum(default.impala_tpcds_store_sales.ss_ext_sales_price)
  |  group by: default.impala_tpcds_customer.c_customer_sk
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=33 row-size=20B cardinality=0
  |  in pipelines: 01(GETNEXT)
  |
  32:NESTED LOOP JOIN [INNER JOIN, BROADCAST]
  |  predicates: _impala_builtins.casttobigint(default.impala_tpcds_date_dim_1.d_month_seq) >= _impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim.d_month_seq), 1) AND _impala_builtins.casttobigint(default.impala_tpcds_date_dim_1.d_month_seq) <= _impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim_4.d_month_seq), 3)
  |  mem-estimate=16B mem-reservation=0B thread-reservation=0
  |  tuple-ids=0,3N,7,8,21,22,24,29,32N row-size=112B cardinality=0
  |  in pipelines: 01(GETNEXT), 56(OPEN)
  |
  |--60:EXCHANGE [BROADCAST]
  |     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=29,32N row-size=16B cardinality=1
  |     in pipelines: 56(GETNEXT)
  |
  25:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: default.impala_tpcds_customer.c_current_addr_sk = default.impala_tpcds_customer_address.ca_address_sk
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=0,3N,7,8,21,22,24 row-size=96B cardinality=0
  |  in pipelines: 01(GETNEXT), 22(OPEN)
  |
  |--52:EXCHANGE [BROADCAST]
  |     mem-estimate=60.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=22,24 row-size=52B cardinality=0
  |     in pipelines: 22(GETNEXT)
  |
  21:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: default.impala_tpcds_store_sales.ss_customer_sk = default.impala_tpcds_customer.c_customer_sk
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=0,3N,7,8,21 row-size=44B cardinality=0
  |  in pipelines: 01(GETNEXT), 49(OPEN)
  |
  |--50:EXCHANGE [BROADCAST]
  |     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=21 row-size=8B cardinality=0
  |     in pipelines: 49(GETNEXT)
  |
  10:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: default.impala_tpcds_store_sales.ss_sold_date_sk = default.impala_tpcds_date_dim_1.d_date_sk
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=0,3N,7,8 row-size=36B cardinality=0
  |  in pipelines: 01(GETNEXT), 09(OPEN)
  |
  |--44:EXCHANGE [BROADCAST]
  |     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=8 row-size=8B cardinality=0
  |     in pipelines: 09(GETNEXT)
  |
  08:NESTED LOOP JOIN [CROSS JOIN, BROADCAST]
  |  mem-estimate=8B mem-reservation=0B thread-reservation=0
  |  tuple-ids=0,3N,7 row-size=28B cardinality=0
  |  in pipelines: 01(GETNEXT), 42(OPEN)
  |
  |--43:EXCHANGE [BROADCAST]
  |     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=7 row-size=8B cardinality=1
  |     in pipelines: 42(GETNEXT)
  |
  04:NESTED LOOP JOIN [LEFT OUTER JOIN, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=0,3N row-size=20B cardinality=0
  |  in pipelines: 01(GETNEXT), 37(OPEN)
  |
  |--38:EXCHANGE [BROADCAST]
  |     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=3 row-size=8B cardinality=0
  |     in pipelines: 37(GETNEXT)
  |
  01:SCAN HDFS [default.impala_tpcds_store_sales, RANDOM]
     partition predicates: default.impala_tpcds_store_sales.ss_sold_date_sk IS NOT NULL
     partitions=0/0 files=0 size=0B
     predicates: default.impala_tpcds_store_sales.ss_customer_sk IS NOT NULL
     stored statistics:
       table: rows=unavailable size=unavailable
       partitions: 0/0 rows=unavailable
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=0 row-size=12B cardinality=0
     in pipelines: 01(GETNEXT)

F02:PLAN FRAGMENT [HASH(_impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim.d_month_seq), 1))] hosts=1 instances=1
Per-Host Resources: mem-estimate=128.02MB mem-reservation=34.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F00, EXCHANGE=38, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  37:AGGREGATE [FINALIZE]
  |  group by: _impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim.d_month_seq), 1)
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=3 row-size=8B cardinality=0
  |  in pipelines: 37(GETNEXT), 02(OPEN)
  |
  36:EXCHANGE [HASH(_impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim.d_month_seq), 1))]
     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=3 row-size=8B cardinality=0
     in pipelines: 02(GETNEXT)

F01:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=128.00MB mem-reservation=34.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F02, EXCHANGE=36, HASH(_impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim.d_month_seq), 1))]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  03:AGGREGATE [STREAMING]
  |  group by: _impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim.d_month_seq), CAST(1 AS BIGINT))
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=3 row-size=8B cardinality=0
  |  in pipelines: 02(GETNEXT)
  |
  02:SCAN HDFS [default.impala_tpcds_date_dim, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_date_dim.d_moy = CAST(2 AS INT), default.impala_tpcds_date_dim.d_year = CAST(2000 AS INT)
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: default.impala_tpcds_date_dim.d_moy = CAST(2 AS INT), default.impala_tpcds_date_dim.d_year = CAST(2000 AS INT)
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=1 row-size=12B cardinality=0
     in pipelines: 02(GETNEXT)

F05:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=10.02MB mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F00, EXCHANGE=43, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  42:AGGREGATE [FINALIZE]
  |  output: _impala_builtins.count:merge()
  |  having: _impala_builtins.sq_count_check(_impala_builtins.count()) <= CAST(1 AS BIGINT)
  |  mem-estimate=10.00MB mem-reservation=0B spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=7 row-size=8B cardinality=1
  |  in pipelines: 42(GETNEXT), 07(OPEN)
  |
  41:EXCHANGE [UNPARTITIONED]
     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=7 row-size=8B cardinality=1
     in pipelines: 07(GETNEXT)

F04:PLAN FRAGMENT [HASH(_impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim_0.d_month_seq), 1))] hosts=1 instances=1
Per-Host Resources: mem-estimate=138.00MB mem-reservation=34.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F05, EXCHANGE=41, UNPARTITIONED]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  07:AGGREGATE
  |  output: count()
  |  mem-estimate=10.00MB mem-reservation=0B spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=7 row-size=8B cardinality=1
  |  in pipelines: 07(GETNEXT), 40(OPEN)
  |
  40:AGGREGATE [FINALIZE]
  |  group by: _impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim_0.d_month_seq), 1)
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=6 row-size=8B cardinality=0
  |  in pipelines: 40(GETNEXT), 05(OPEN)
  |
  39:EXCHANGE [HASH(_impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim_0.d_month_seq), 1))]
     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=6 row-size=8B cardinality=0
     in pipelines: 05(GETNEXT)

F03:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=128.00MB mem-reservation=34.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F04, EXCHANGE=39, HASH(_impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim_0.d_month_seq), 1))]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  06:AGGREGATE [STREAMING]
  |  group by: _impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim_0.d_month_seq), CAST(1 AS BIGINT))
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=6 row-size=8B cardinality=0
  |  in pipelines: 05(GETNEXT)
  |
  05:SCAN HDFS [default.impala_tpcds_date_dim, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_date_dim_0.d_moy = CAST(2 AS INT), default.impala_tpcds_date_dim_0.d_year = CAST(2000 AS INT)
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: default.impala_tpcds_date_dim_0.d_moy = CAST(2 AS INT), default.impala_tpcds_date_dim_0.d_year = CAST(2000 AS INT)
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=4 row-size=12B cardinality=0
     in pipelines: 05(GETNEXT)

F06:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F00, EXCHANGE=44, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  09:SCAN HDFS [default.impala_tpcds_date_dim, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_date_dim_1.d_date_sk IS NOT NULL
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=8 row-size=8B cardinality=0
     in pipelines: 09(GETNEXT)

F13:PLAN FRAGMENT [HASH(default.impala_tpcds_customer.c_customer_sk,default.impala_tpcds_customer.c_current_addr_sk)] hosts=1 instances=1
Per-Host Resources: mem-estimate=128.02MB mem-reservation=34.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F00, EXCHANGE=50, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  49:AGGREGATE [FINALIZE]
  |  group by: default.impala_tpcds_customer.c_customer_sk, default.impala_tpcds_customer.c_current_addr_sk
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=21 row-size=8B cardinality=0
  |  in pipelines: 49(GETNEXT), 12(OPEN), 13(OPEN)
  |
  48:EXCHANGE [HASH(default.impala_tpcds_customer.c_customer_sk,default.impala_tpcds_customer.c_current_addr_sk)]
     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=21 row-size=8B cardinality=0
     in pipelines: 12(GETNEXT), 13(GETNEXT)

F09:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=133.88MB mem-reservation=39.81MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F13, EXCHANGE=48, HASH(default.impala_tpcds_customer.c_customer_sk,default.impala_tpcds_customer.c_current_addr_sk)]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  20:AGGREGATE [STREAMING]
  |  group by: default.impala_tpcds_customer.c_customer_sk, default.impala_tpcds_customer.c_current_addr_sk
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=21 row-size=8B cardinality=0
  |  in pipelines: 12(GETNEXT), 13(GETNEXT)
  |
  19:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: cs_bill_customer_sk = default.impala_tpcds_customer.c_customer_sk
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=10,15,17,19 row-size=68B cardinality=0
  |  in pipelines: 12(GETNEXT), 13(GETNEXT), 18(OPEN)
  |
  |--47:EXCHANGE [BROADCAST]
  |     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=19 row-size=8B cardinality=0
  |     in pipelines: 18(GETNEXT)
  |
  17:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: cs_sold_date_sk = default.impala_tpcds_date_dim_2.d_date_sk
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=10,15,17 row-size=60B cardinality=0
  |  in pipelines: 12(GETNEXT), 13(GETNEXT), 16(OPEN)
  |
  |--46:EXCHANGE [BROADCAST]
  |     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=17 row-size=12B cardinality=0
  |     in pipelines: 16(GETNEXT)
  |
  15:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: cs_item_sk = default.impala_tpcds_item.i_item_sk
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=10,15 row-size=48B cardinality=0
  |  in pipelines: 12(GETNEXT), 13(GETNEXT), 14(OPEN)
  |
  |--45:EXCHANGE [BROADCAST]
  |     mem-estimate=36.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=15 row-size=32B cardinality=0
  |     in pipelines: 14(GETNEXT)
  |
  11:UNION
  |  pass-through-operands: all
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=10 row-size=16B cardinality=0
  |  in pipelines: 12(GETNEXT), 13(GETNEXT)
  |
  |--13:SCAN HDFS [default.impala_tpcds_web_sales, RANDOM]
  |     HDFS partitions=1/1 files=0 size=0B
  |     predicates: default.impala_tpcds_web_sales.ws_bill_customer_sk IS NOT NULL, default.impala_tpcds_web_sales.ws_item_sk IS NOT NULL, default.impala_tpcds_web_sales.ws_sold_date_sk IS NOT NULL
  |     stored statistics:
  |       table: rows=0 size=0B
  |       columns: unavailable
  |     extrapolated-rows=disabled max-scan-range-rows=0
  |     mem-estimate=0B mem-reservation=0B thread-reservation=0
  |     tuple-ids=13 row-size=16B cardinality=0
  |     in pipelines: 13(GETNEXT)
  |
  12:SCAN HDFS [default.impala_tpcds_catalog_sales, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_catalog_sales.cs_bill_customer_sk IS NOT NULL, default.impala_tpcds_catalog_sales.cs_item_sk IS NOT NULL, default.impala_tpcds_catalog_sales.cs_sold_date_sk IS NOT NULL
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=11 row-size=16B cardinality=0
     in pipelines: 12(GETNEXT)

F10:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F09, EXCHANGE=45, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  14:SCAN HDFS [default.impala_tpcds_item, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_item.i_item_sk IS NOT NULL, default.impala_tpcds_item.i_category = 'Books', default.impala_tpcds_item.i_class = 'business'
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: default.impala_tpcds_item.i_category = 'Books', default.impala_tpcds_item.i_class = 'business'
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=15 row-size=32B cardinality=0
     in pipelines: 14(GETNEXT)

F11:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F09, EXCHANGE=46, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  16:SCAN HDFS [default.impala_tpcds_date_dim, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_date_dim_2.d_date_sk IS NOT NULL, default.impala_tpcds_date_dim_2.d_moy = CAST(2 AS INT), default.impala_tpcds_date_dim_2.d_year = CAST(2000 AS INT)
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: default.impala_tpcds_date_dim_2.d_moy = CAST(2 AS INT), default.impala_tpcds_date_dim_2.d_year = CAST(2000 AS INT)
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=17 row-size=12B cardinality=0
     in pipelines: 16(GETNEXT)

F12:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F09, EXCHANGE=47, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  18:SCAN HDFS [default.impala_tpcds_customer, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_customer.c_current_addr_sk IS NOT NULL, default.impala_tpcds_customer.c_customer_sk IS NOT NULL
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=19 row-size=8B cardinality=0
     in pipelines: 18(GETNEXT)

F14:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=1.96MB mem-reservation=1.94MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F00, EXCHANGE=52, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  24:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: default.impala_tpcds_customer_address.ca_county = default.impala_tpcds_store.s_county, default.impala_tpcds_customer_address.ca_state = default.impala_tpcds_store.s_state
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=22,24 row-size=52B cardinality=0
  |  in pipelines: 22(GETNEXT), 23(OPEN)
  |
  |--51:EXCHANGE [BROADCAST]
  |     mem-estimate=28.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=24 row-size=24B cardinality=0
  |     in pipelines: 23(GETNEXT)
  |
  22:SCAN HDFS [default.impala_tpcds_customer_address, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_customer_address.ca_address_sk IS NOT NULL, default.impala_tpcds_customer_address.ca_county IS NOT NULL, default.impala_tpcds_customer_address.ca_state IS NOT NULL
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=22 row-size=28B cardinality=0
     in pipelines: 22(GETNEXT)

F15:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F14, EXCHANGE=51, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  23:SCAN HDFS [default.impala_tpcds_store, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_store.s_county IS NOT NULL, default.impala_tpcds_store.s_state IS NOT NULL
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=24 row-size=24B cardinality=0
     in pipelines: 23(GETNEXT)

F18:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=10.03MB mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F00, EXCHANGE=60, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  31:NESTED LOOP JOIN [LEFT OUTER JOIN, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=29,32N row-size=16B cardinality=1
  |  in pipelines: 56(GETNEXT), 58(OPEN)
  |
  |--59:EXCHANGE [UNPARTITIONED]
  |     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=32 row-size=8B cardinality=0
  |     in pipelines: 58(GETNEXT)
  |
  56:AGGREGATE [FINALIZE]
  |  output: _impala_builtins.count:merge()
  |  having: _impala_builtins.sq_count_check(_impala_builtins.count()) <= CAST(1 AS BIGINT)
  |  mem-estimate=10.00MB mem-reservation=0B spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=29 row-size=8B cardinality=1
  |  in pipelines: 56(GETNEXT), 28(OPEN)
  |
  55:EXCHANGE [UNPARTITIONED]
     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=29 row-size=8B cardinality=1
     in pipelines: 28(GETNEXT)

F17:PLAN FRAGMENT [HASH(_impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim_3.d_month_seq), 3))] hosts=1 instances=1
Per-Host Resources: mem-estimate=138.00MB mem-reservation=34.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F18, EXCHANGE=55, UNPARTITIONED]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  28:AGGREGATE
  |  output: count()
  |  mem-estimate=10.00MB mem-reservation=0B spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=29 row-size=8B cardinality=1
  |  in pipelines: 28(GETNEXT), 54(OPEN)
  |
  54:AGGREGATE [FINALIZE]
  |  group by: _impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim_3.d_month_seq), 3)
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=28 row-size=8B cardinality=0
  |  in pipelines: 54(GETNEXT), 26(OPEN)
  |
  53:EXCHANGE [HASH(_impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim_3.d_month_seq), 3))]
     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=28 row-size=8B cardinality=0
     in pipelines: 26(GETNEXT)

F16:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=128.00MB mem-reservation=34.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F17, EXCHANGE=53, HASH(_impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim_3.d_month_seq), 3))]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  27:AGGREGATE [STREAMING]
  |  group by: _impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim_3.d_month_seq), CAST(3 AS BIGINT))
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=28 row-size=8B cardinality=0
  |  in pipelines: 26(GETNEXT)
  |
  26:SCAN HDFS [default.impala_tpcds_date_dim, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_date_dim_3.d_moy = CAST(2 AS INT), default.impala_tpcds_date_dim_3.d_year = CAST(2000 AS INT)
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: default.impala_tpcds_date_dim_3.d_moy = CAST(2 AS INT), default.impala_tpcds_date_dim_3.d_year = CAST(2000 AS INT)
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=26 row-size=12B cardinality=0
     in pipelines: 26(GETNEXT)

F20:PLAN FRAGMENT [HASH(_impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim_4.d_month_seq), 3))] hosts=1 instances=1
Per-Host Resources: mem-estimate=128.02MB mem-reservation=34.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F18, EXCHANGE=59, UNPARTITIONED]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  58:AGGREGATE [FINALIZE]
  |  group by: _impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim_4.d_month_seq), 3)
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=32 row-size=8B cardinality=0
  |  in pipelines: 58(GETNEXT), 29(OPEN)
  |
  57:EXCHANGE [HASH(_impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim_4.d_month_seq), 3))]
     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=32 row-size=8B cardinality=0
     in pipelines: 29(GETNEXT)

F19:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=128.00MB mem-reservation=34.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F20, EXCHANGE=57, HASH(_impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim_4.d_month_seq), 3))]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  30:AGGREGATE [STREAMING]
  |  group by: _impala_builtins.add(_impala_builtins.casttobigint(default.impala_tpcds_date_dim_4.d_month_seq), CAST(3 AS BIGINT))
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=32 row-size=8B cardinality=0
  |  in pipelines: 29(GETNEXT)
  |
  29:SCAN HDFS [default.impala_tpcds_date_dim, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_date_dim_4.d_moy = CAST(2 AS INT), default.impala_tpcds_date_dim_4.d_year = CAST(2000 AS INT)
     stored statistics:
       table: rows=0 size=0B
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: default.impala_tpcds_date_dim_4.d_moy = CAST(2 AS INT), default.impala_tpcds_date_dim_4.d_year = CAST(2000 AS INT)
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=30 row-size=12B cardinality=0
     in pipelines: 29(GETNEXT)


  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

