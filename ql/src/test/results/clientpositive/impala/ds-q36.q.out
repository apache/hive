HMS CALL get_table_req FOR impala_tpcds_store_sales
HMS CALL get_table_req FOR impala_tpcds_date_dim
HMS CALL get_table_req FOR impala_tpcds_item
HMS CALL get_table_req FOR impala_tpcds_store
HMS CALL get_foreign_keys FOR impala_tpcds_store_sales
HMS CALL get_foreign_keys FOR impala_tpcds_date_dim
HMS CALL get_foreign_keys FOR impala_tpcds_item
HMS CALL get_foreign_keys FOR impala_tpcds_store
PREHOOK: query: explain cbo physical select  
    sum(ss_net_profit)/sum(ss_ext_sales_price) as gross_margin
   ,i_category
   ,i_class
   ,grouping(i_category)+grouping(i_class) as lochierarchy
   ,rank() over (
      partition by grouping(i_category)+grouping(i_class),
      case when grouping(i_class) = 0 then i_category end 
      order by sum(ss_net_profit)/sum(ss_ext_sales_price) asc) as rank_within_parent
 from
    impala_tpcds_store_sales
   ,impala_tpcds_date_dim       d1
   ,impala_tpcds_item
   ,impala_tpcds_store
 where
    d1.d_year = 1999 
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk  = ss_item_sk 
 and s_store_sk  = ss_store_sk
 and s_state in ('IN','AL','MI','MN',
                 'TN','LA','FL','NM')
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then i_category end
  ,rank_within_parent
  limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@impala_tpcds_date_dim
PREHOOK: Input: default@impala_tpcds_item
PREHOOK: Input: default@impala_tpcds_store
PREHOOK: Input: default@impala_tpcds_store_sales
PREHOOK: Output: streaming
POSTHOOK: query: explain cbo physical select  
    sum(ss_net_profit)/sum(ss_ext_sales_price) as gross_margin
   ,i_category
   ,i_class
   ,grouping(i_category)+grouping(i_class) as lochierarchy
   ,rank() over (
      partition by grouping(i_category)+grouping(i_class),
      case when grouping(i_class) = 0 then i_category end 
      order by sum(ss_net_profit)/sum(ss_ext_sales_price) asc) as rank_within_parent
 from
    impala_tpcds_store_sales
   ,impala_tpcds_date_dim       d1
   ,impala_tpcds_item
   ,impala_tpcds_store
 where
    d1.d_year = 1999 
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk  = ss_item_sk 
 and s_store_sk  = ss_store_sk
 and s_state in ('IN','AL','MI','MN',
                 'TN','LA','FL','NM')
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then i_category end
  ,rank_within_parent
  limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@impala_tpcds_date_dim
POSTHOOK: Input: default@impala_tpcds_item
POSTHOOK: Input: default@impala_tpcds_store
POSTHOOK: Input: default@impala_tpcds_store_sales
CBO PLAN:
ImpalaProjectPassthroughRel(gross_margin=[$0], i_category=[$1], i_class=[$2], lochierarchy=[$3], rank_within_parent=[$4])
  ImpalaSortRel(sort0=[$3], sort1=[$5], sort2=[$4], dir0=[DESC], dir1=[ASC], dir2=[ASC], fetch=[100])
    ImpalaProjectRel(gross_margin=[$7], i_category=[$2], i_class=[$3], lochierarchy=[$5], rank_within_parent=[rank() OVER (PARTITION BY $5, $6 ORDER BY $7 NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], (tok_function when (= (tok_table_or_col lochierarchy) 0) (tok_table_or_col i_category))=[CASE(=($5, 0), $2, null:VARCHAR(2147483647))])
      ImpalaProjectRel($f2=[$2], $f3=[$3], $f0=[$0], $f1=[$1], GROUPING__ID=[$4], $func_0=[+(GROUPING($4, 1:BIGINT), GROUPING($4, 0:BIGINT))], $func_1=[CASE(=(GROUPING($4, 0:BIGINT), 0), $0, null:VARCHAR(2147483647))], $func_2=[/($2, $3)])
        ImpalaAggregateRel(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], agg#0=[sum($2)], agg#1=[sum($3)], GROUPING__ID=[GROUPING__ID()])
          ImpalaProjectPassthroughRel($f0=[$9], $f1=[$8], $f2=[$3], $f3=[$2])
            ImpalaJoinRel(condition=[=($7, $0)], joinType=[inner])
              ImpalaJoinRel(condition=[=($6, $1)], joinType=[inner])
                ImpalaJoinRel(condition=[=($5, $4)], joinType=[inner])
                  ImpalaProjectPassthroughRel(ss_item_sk=[$1], ss_store_sk=[$6], ss_ext_sales_price=[$14], ss_net_profit=[$21], ss_sold_date_sk=[$22])
                    ImpalaHdfsScanRel(table=[[default, impala_tpcds_store_sales]], condition=[AND(IS NOT NULL($6), IS NOT NULL($1), IS NOT NULL($22))])
                  ImpalaProjectPassthroughRel(d_date_sk=[$0])
                    ImpalaHdfsScanRel(table=[[default, impala_tpcds_date_dim]], condition=[AND(=($6, 1999), IS NOT NULL($0))])
                ImpalaProjectPassthroughRel(s_store_sk=[$0])
                  ImpalaHdfsScanRel(table=[[default, impala_tpcds_store]], condition=[AND(IN($24, _UTF-16LE'IN':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'AL':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'MI':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'MN':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'TN':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'LA':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'FL':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'NM':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"), IS NOT NULL($0))])
              ImpalaProjectPassthroughRel(i_item_sk=[$0], i_class=[$10], i_category=[$12])
                ImpalaHdfsScanRel(table=[[default, impala_tpcds_item]], condition=[IS NOT NULL($0)])

HMS CALL get_table_req FOR impala_tpcds_store_sales
HMS CALL get_table_req FOR impala_tpcds_date_dim
HMS CALL get_table_req FOR impala_tpcds_item
HMS CALL get_table_req FOR impala_tpcds_store
HMS CALL get_foreign_keys FOR impala_tpcds_store_sales
HMS CALL get_foreign_keys FOR impala_tpcds_date_dim
HMS CALL get_foreign_keys FOR impala_tpcds_item
HMS CALL get_foreign_keys FOR impala_tpcds_store
PREHOOK: query: explain select  
    sum(ss_net_profit)/sum(ss_ext_sales_price) as gross_margin
   ,i_category
   ,i_class
   ,grouping(i_category)+grouping(i_class) as lochierarchy
   ,rank() over (
      partition by grouping(i_category)+grouping(i_class),
      case when grouping(i_class) = 0 then i_category end 
      order by sum(ss_net_profit)/sum(ss_ext_sales_price) asc) as rank_within_parent
 from
    impala_tpcds_store_sales
   ,impala_tpcds_date_dim       d1
   ,impala_tpcds_item
   ,impala_tpcds_store
 where
    d1.d_year = 1999 
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk  = ss_item_sk 
 and s_store_sk  = ss_store_sk
 and s_state in ('IN','AL','MI','MN',
                 'TN','LA','FL','NM')
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then i_category end
  ,rank_within_parent
  limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@impala_tpcds_date_dim
PREHOOK: Input: default@impala_tpcds_item
PREHOOK: Input: default@impala_tpcds_store
PREHOOK: Input: default@impala_tpcds_store_sales
PREHOOK: Output: streaming
POSTHOOK: query: explain select  
    sum(ss_net_profit)/sum(ss_ext_sales_price) as gross_margin
   ,i_category
   ,i_class
   ,grouping(i_category)+grouping(i_class) as lochierarchy
   ,rank() over (
      partition by grouping(i_category)+grouping(i_class),
      case when grouping(i_class) = 0 then i_category end 
      order by sum(ss_net_profit)/sum(ss_ext_sales_price) asc) as rank_within_parent
 from
    impala_tpcds_store_sales
   ,impala_tpcds_date_dim       d1
   ,impala_tpcds_item
   ,impala_tpcds_store
 where
    d1.d_year = 1999 
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk  = ss_item_sk 
 and s_store_sk  = ss_store_sk
 and s_state in ('IN','AL','MI','MN',
                 'TN','LA','FL','NM')
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then i_category end
  ,rank_within_parent
  limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@impala_tpcds_date_dim
POSTHOOK: Input: default@impala_tpcds_item
POSTHOOK: Input: default@impala_tpcds_store
POSTHOOK: Input: default@impala_tpcds_store_sales
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Impala
      Impala Plan: 
F08:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=72.00KB mem-reservation=0B thread-reservation=1
  PLAN-ROOT SINK
  |  output exprs: divide(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN sum(default.impala_tpcds_store_sales.ss_net_profit) WHEN 8 THEN sum(default.impala_tpcds_store_sales.ss_net_profit) WHEN 9 THEN sum(default.impala_tpcds_store_sales.ss_net_profit) END), aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN sum(default.impala_tpcds_store_sales.ss_ext_sales_price) WHEN 8 THEN sum(default.impala_tpcds_store_sales.ss_ext_sales_price) WHEN 9 THEN sum(default.impala_tpcds_store_sales.ss_ext_sales_price) END)), CASE valid_tid(7,8,9) WHEN 7 THEN default.impala_tpcds_item.i_category WHEN 8 THEN default.impala_tpcds_item.i_category WHEN 9 THEN NULL END, CASE valid_tid(7,8,9) WHEN 7 THEN default.impala_tpcds_item.i_class WHEN 8 THEN NULL WHEN 9 THEN NULL END, add(bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 1), 1), bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 0), 1)), rank()
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |
  20:MERGING-EXCHANGE [UNPARTITIONED]
     order by: add(bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 1), 1), bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 0), 1)) DESC NULLS FIRST, CASE WHEN add(bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 1), 1), bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 0), 1)) = 0 THEN CASE valid_tid(7,8,9) WHEN 7 THEN default.impala_tpcds_item.i_category WHEN 8 THEN default.impala_tpcds_item.i_category WHEN 9 THEN NULL END ELSE NULL END ASC NULLS LAST, rank() ASC NULLS LAST
     limit: 100
     mem-estimate=72.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=19 row-size=68B cardinality=0
     in pipelines: 13(GETNEXT)

F07:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=16.10MB mem-reservation=16.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F08, EXCHANGE=20, UNPARTITIONED]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  13:TOP-N [LIMIT=100]
  |  order by: add(bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 1), 1), bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 0), 1)) DESC NULLS FIRST, CASE WHEN add(bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 1), 1), bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 0), 1)) = 0 THEN CASE valid_tid(7,8,9) WHEN 7 THEN default.impala_tpcds_item.i_category WHEN 8 THEN default.impala_tpcds_item.i_category WHEN 9 THEN NULL END ELSE NULL END ASC NULLS LAST, rank() ASC NULLS LAST
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=19 row-size=68B cardinality=0
  |  in pipelines: 13(GETNEXT), 11(OPEN)
  |
  00:UNION
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=18 row-size=68B cardinality=0
  |  in pipelines: 11(GETNEXT)
  |
  12:ANALYTIC
  |  functions: rank()
  |  partition by: add(bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 1), 1), bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 0), 1)), CASE WHEN bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 0), 1) = 0 THEN CASE valid_tid(7,8,9) WHEN 7 THEN default.impala_tpcds_item.i_category WHEN 8 THEN default.impala_tpcds_item.i_category WHEN 9 THEN NULL END ELSE NULL END
  |  order by: divide(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN sum(default.impala_tpcds_store_sales.ss_net_profit) WHEN 8 THEN sum(default.impala_tpcds_store_sales.ss_net_profit) WHEN 9 THEN sum(default.impala_tpcds_store_sales.ss_net_profit) END), aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN sum(default.impala_tpcds_store_sales.ss_ext_sales_price) WHEN 8 THEN sum(default.impala_tpcds_store_sales.ss_ext_sales_price) WHEN 9 THEN sum(default.impala_tpcds_store_sales.ss_ext_sales_price) END)) ASC
  |  window: RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=16,15 row-size=108B cardinality=0
  |  in pipelines: 11(GETNEXT)
  |
  11:SORT
  |  order by: add(bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 1), 1), bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 0), 1)) ASC NULLS LAST, CASE WHEN bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 0), 1) = 0 THEN CASE valid_tid(7,8,9) WHEN 7 THEN default.impala_tpcds_item.i_category WHEN 8 THEN default.impala_tpcds_item.i_category WHEN 9 THEN NULL END ELSE NULL END ASC NULLS LAST, divide(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN sum(default.impala_tpcds_store_sales.ss_net_profit) WHEN 8 THEN sum(default.impala_tpcds_store_sales.ss_net_profit) WHEN 9 THEN sum(default.impala_tpcds_store_sales.ss_net_profit) END), aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN sum(default.impala_tpcds_store_sales.ss_ext_sales_price) WHEN 8 THEN sum(default.impala_tpcds_store_sales.ss_ext_sales_price) WHEN 9 THEN sum(default.impala_tpcds_store_sales.ss_ext_sales_price) END)) ASC NULLS LAST
  |  mem-estimate=12.00MB mem-reservation=12.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=16 row-size=100B cardinality=0
  |  in pipelines: 11(GETNEXT), 10(OPEN)
  |
  19:EXCHANGE [HASH(add(bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 1), 1), bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 0), 1)),CASE WHEN bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 0), 1) = 0 THEN CASE valid_tid(7,8,9) WHEN 7 THEN default.impala_tpcds_item.i_category WHEN 8 THEN default.impala_tpcds_item.i_category WHEN 9 THEN NULL END ELSE NULL END)]
     mem-estimate=104.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=11 row-size=100B cardinality=0
     in pipelines: 10(GETNEXT)

F05:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=394.00MB mem-reservation=103.94MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F07, EXCHANGE=19, HASH(add(bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 1), 1), bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 0), 1)),CASE WHEN bitand(shiftright(aggif(valid_tid(7,8,9) IN (7, 8, 9), CASE valid_tid(7,8,9) WHEN 7 THEN 0 WHEN 8 THEN 1 WHEN 9 THEN 3 END), 0), 1) = 0 THEN CASE valid_tid(7,8,9) WHEN 7 THEN default.impala_tpcds_item.i_category WHEN 8 THEN default.impala_tpcds_item.i_category WHEN 9 THEN NULL END ELSE NULL END)]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  01:UNION
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=11 row-size=100B cardinality=0
  |  in pipelines: 10(GETNEXT)
  |
  10:AGGREGATE [FINALIZE]
  |  output: aggif(valid_tid(7,8,9) IN (CAST(7 AS INT), CAST(8 AS INT), CAST(9 AS INT)), CASE valid_tid(7,8,9) WHEN CAST(7 AS INT) THEN sum(default.impala_tpcds_store_sales.ss_net_profit) WHEN CAST(8 AS INT) THEN sum(default.impala_tpcds_store_sales.ss_net_profit) WHEN CAST(9 AS INT) THEN sum(default.impala_tpcds_store_sales.ss_net_profit) END), aggif(valid_tid(7,8,9) IN (CAST(7 AS INT), CAST(8 AS INT), CAST(9 AS INT)), CASE valid_tid(7,8,9) WHEN CAST(7 AS INT) THEN sum(default.impala_tpcds_store_sales.ss_ext_sales_price) WHEN CAST(8 AS INT) THEN sum(default.impala_tpcds_store_sales.ss_ext_sales_price) WHEN CAST(9 AS INT) THEN sum(default.impala_tpcds_store_sales.ss_ext_sales_price) END), aggif(valid_tid(7,8,9) IN (CAST(7 AS INT), CAST(8 AS INT), CAST(9 AS INT)), CASE valid_tid(7,8,9) WHEN CAST(7 AS INT) THEN CAST(0 AS BIGINT) WHEN CAST(8 AS INT) THEN CAST(1 AS BIGINT) WHEN CAST(9 AS INT) THEN CAST(3 AS BIGINT) END)
  |  group by: CASE valid_tid(7,8,9) WHEN CAST(7 AS INT) THEN default.impala_tpcds_item.i_category WHEN CAST(8 AS INT) THEN default.impala_tpcds_item.i_category WHEN CAST(9 AS INT) THEN NULL END, CASE valid_tid(7,8,9) WHEN CAST(7 AS INT) THEN default.impala_tpcds_item.i_class WHEN CAST(8 AS INT) THEN NULL WHEN CAST(9 AS INT) THEN NULL END, CASE valid_tid(7,8,9) WHEN CAST(7 AS INT) THEN CAST(7 AS INT) WHEN CAST(8 AS INT) THEN CAST(8 AS INT) WHEN CAST(9 AS INT) THEN CAST(9 AS INT) END
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=10 row-size=68B cardinality=0
  |  in pipelines: 10(GETNEXT), 18(OPEN)
  |
  18:AGGREGATE [FINALIZE]
  |  Class 0
  |    output: sum:merge(default.impala_tpcds_store_sales.ss_net_profit), sum:merge(default.impala_tpcds_store_sales.ss_ext_sales_price)
  |    group by: default.impala_tpcds_item.i_category, default.impala_tpcds_item.i_class
  |  Class 1
  |    output: sum:merge(default.impala_tpcds_store_sales.ss_net_profit), sum:merge(default.impala_tpcds_store_sales.ss_ext_sales_price)
  |    group by: default.impala_tpcds_item.i_category, NULL
  |  Class 2
  |    output: sum:merge(default.impala_tpcds_store_sales.ss_net_profit), sum:merge(default.impala_tpcds_store_sales.ss_ext_sales_price)
  |    group by: NULL, NULL
  |  mem-estimate=266.00MB mem-reservation=69.94MB thread-reservation=0
  |  tuple-ids=7N,8N,9N row-size=168B cardinality=0
  |  in pipelines: 18(GETNEXT), 02(OPEN)
  |
  17:EXCHANGE [HASH(CASE valid_tid(7,8,9) WHEN 7 THEN murmur_hash(default.impala_tpcds_item.i_category) WHEN 8 THEN murmur_hash(default.impala_tpcds_item.i_category) WHEN 9 THEN murmur_hash(NULL) END,CASE valid_tid(7,8,9) WHEN 7 THEN murmur_hash(default.impala_tpcds_item.i_class) WHEN 8 THEN murmur_hash(NULL) WHEN 9 THEN murmur_hash(NULL) END)]
     mem-estimate=180.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=7N,8N,9N row-size=168B cardinality=0
     in pipelines: 02(GETNEXT)

F00:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=271.88MB mem-reservation=75.81MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F05, EXCHANGE=17, HASH(CASE valid_tid(7,8,9) WHEN 7 THEN murmur_hash(default.impala_tpcds_item.i_category) WHEN 8 THEN murmur_hash(default.impala_tpcds_item.i_category) WHEN 9 THEN murmur_hash(NULL) END,CASE valid_tid(7,8,9) WHEN 7 THEN murmur_hash(default.impala_tpcds_item.i_class) WHEN 8 THEN murmur_hash(NULL) WHEN 9 THEN murmur_hash(NULL) END)]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  09:AGGREGATE [STREAMING]
  |  Class 0
  |    output: sum(default.impala_tpcds_store_sales.ss_net_profit), sum(default.impala_tpcds_store_sales.ss_ext_sales_price)
  |    group by: default.impala_tpcds_item.i_category, default.impala_tpcds_item.i_class
  |  Class 1
  |    output: sum(default.impala_tpcds_store_sales.ss_net_profit), sum(default.impala_tpcds_store_sales.ss_ext_sales_price)
  |    group by: default.impala_tpcds_item.i_category, NULL
  |  Class 2
  |    output: sum(default.impala_tpcds_store_sales.ss_net_profit), sum(default.impala_tpcds_store_sales.ss_ext_sales_price)
  |    group by: NULL, NULL
  |  mem-estimate=266.00MB mem-reservation=70.00MB thread-reservation=0
  |  tuple-ids=7N,8N,9N row-size=168B cardinality=0
  |  in pipelines: 02(GETNEXT)
  |
  08:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: default.impala_tpcds_store_sales.ss_item_sk = default.impala_tpcds_item.i_item_sk
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=0,1,3,5 row-size=80B cardinality=0
  |  in pipelines: 02(GETNEXT), 07(OPEN)
  |
  |--16:EXCHANGE [BROADCAST]
  |     mem-estimate=36.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=5 row-size=32B cardinality=0
  |     in pipelines: 07(GETNEXT)
  |
  06:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: default.impala_tpcds_store_sales.ss_store_sk = default.impala_tpcds_store.s_store_sk
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=0,1,3 row-size=48B cardinality=0
  |  in pipelines: 02(GETNEXT), 05(OPEN)
  |
  |--15:EXCHANGE [BROADCAST]
  |     mem-estimate=20.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=3 row-size=16B cardinality=0
  |     in pipelines: 05(GETNEXT)
  |
  04:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: default.impala_tpcds_store_sales.ss_sold_date_sk = d1.d_date_sk
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=0,1 row-size=32B cardinality=0
  |  in pipelines: 02(GETNEXT), 03(OPEN)
  |
  |--14:EXCHANGE [BROADCAST]
  |     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=1 row-size=8B cardinality=0
  |     in pipelines: 03(GETNEXT)
  |
  02:SCAN HDFS [default.impala_tpcds_store_sales, RANDOM]
     partition predicates: default.impala_tpcds_store_sales.ss_sold_date_sk IS NOT NULL
     partitions=0/0 files=0 size=0B
     predicates: default.impala_tpcds_store_sales.ss_item_sk IS NOT NULL, default.impala_tpcds_store_sales.ss_store_sk IS NOT NULL
     stored statistics:
       table: rows=unavailable size=unavailable
       partitions: 0/0 rows=0
       columns missing stats: ss_item_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit
     extrapolated-rows=disabled max-scan-range-rows=0
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=0 row-size=24B cardinality=0
     in pipelines: 02(GETNEXT)

F01:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F00, EXCHANGE=14, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  03:SCAN HDFS [default.impala_tpcds_date_dim d1, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: d1.d_date_sk IS NOT NULL, d1.d_year = CAST(1999 AS INT)
     stored statistics:
       table: rows=unavailable size=unavailable
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: d1.d_year = CAST(1999 AS INT)
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=1 row-size=8B cardinality=0
     in pipelines: 03(GETNEXT)

F02:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F00, EXCHANGE=15, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  05:SCAN HDFS [default.impala_tpcds_store, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_store.s_store_sk IS NOT NULL, default.impala_tpcds_store.s_state IN ('IN', 'AL', 'MI', 'MN', 'TN', 'LA', 'FL', 'NM')
     stored statistics:
       table: rows=unavailable size=unavailable
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: default.impala_tpcds_store.s_state IN ('IN', 'AL', 'MI', 'MN', 'TN', 'LA', 'FL', 'NM')
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=3 row-size=16B cardinality=0
     in pipelines: 05(GETNEXT)

F03:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F00, EXCHANGE=16, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  07:SCAN HDFS [default.impala_tpcds_item, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_item.i_item_sk IS NOT NULL
     stored statistics:
       table: rows=unavailable size=unavailable
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=5 row-size=32B cardinality=0
     in pipelines: 07(GETNEXT)


  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

