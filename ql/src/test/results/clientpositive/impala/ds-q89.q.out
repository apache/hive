HMS CALL get_table_req FOR impala_tpcds_item
HMS CALL get_table_req FOR impala_tpcds_store_sales
HMS CALL get_table_req FOR impala_tpcds_date_dim
HMS CALL get_table_req FOR impala_tpcds_store
HMS CALL get_foreign_keys FOR impala_tpcds_item
HMS CALL get_foreign_keys FOR impala_tpcds_store_sales
HMS CALL get_foreign_keys FOR impala_tpcds_date_dim
HMS CALL get_foreign_keys FOR impala_tpcds_store
PREHOOK: query: explain cbo physical select  *
from(
select i_category, i_class, i_brand,
       s_store_name, s_company_name,
       d_moy,
       sum(ss_sales_price) sum_sales,
       avg(sum(ss_sales_price)) over
         (partition by i_category, i_brand, s_store_name, s_company_name)
         avg_monthly_sales
from impala_tpcds_item, impala_tpcds_store_sales, impala_tpcds_date_dim, impala_tpcds_store
where ss_item_sk = i_item_sk and
      ss_sold_date_sk = d_date_sk and
      ss_store_sk = s_store_sk and
      d_year in (2000) and
        ((i_category in ('Home','Music','Books') and
          i_class in ('glassware','classical','fiction')
         )
      or (i_category in ('Jewelry','Sports','Women') and
          i_class in ('semi-precious','baseball','dresses') 
        ))
group by i_category, i_class, i_brand,
         s_store_name, s_company_name, d_moy) tmp1
where case when (avg_monthly_sales <> 0) then (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales) else null end > 0.1
order by sum_sales - avg_monthly_sales, s_store_name
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@impala_tpcds_date_dim
PREHOOK: Input: default@impala_tpcds_item
PREHOOK: Input: default@impala_tpcds_store
PREHOOK: Input: default@impala_tpcds_store_sales
PREHOOK: Output: streaming
POSTHOOK: query: explain cbo physical select  *
from(
select i_category, i_class, i_brand,
       s_store_name, s_company_name,
       d_moy,
       sum(ss_sales_price) sum_sales,
       avg(sum(ss_sales_price)) over
         (partition by i_category, i_brand, s_store_name, s_company_name)
         avg_monthly_sales
from impala_tpcds_item, impala_tpcds_store_sales, impala_tpcds_date_dim, impala_tpcds_store
where ss_item_sk = i_item_sk and
      ss_sold_date_sk = d_date_sk and
      ss_store_sk = s_store_sk and
      d_year in (2000) and
        ((i_category in ('Home','Music','Books') and
          i_class in ('glassware','classical','fiction')
         )
      or (i_category in ('Jewelry','Sports','Women') and
          i_class in ('semi-precious','baseball','dresses') 
        ))
group by i_category, i_class, i_brand,
         s_store_name, s_company_name, d_moy) tmp1
where case when (avg_monthly_sales <> 0) then (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales) else null end > 0.1
order by sum_sales - avg_monthly_sales, s_store_name
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@impala_tpcds_date_dim
POSTHOOK: Input: default@impala_tpcds_item
POSTHOOK: Input: default@impala_tpcds_store
POSTHOOK: Input: default@impala_tpcds_store_sales
CBO PLAN:
ImpalaProjectPassthroughRel(i_category=[$0], i_class=[$1], i_brand=[$2], s_store_name=[$3], s_company_name=[$4], d_moy=[$5], sum_sales=[$6], avg_monthly_sales=[$7])
  ImpalaSortRel(sort0=[$8], sort1=[$3], dir0=[ASC], dir1=[ASC], fetch=[100])
    ImpalaProjectRel(i_category=[$0], i_class=[$1], i_brand=[$2], s_store_name=[$3], s_company_name=[$4], d_moy=[$5], sum_sales=[$6], avg_monthly_sales=[$7], (- (tok_table_or_col sum_sales) (tok_table_or_col avg_monthly_sales))=[-($6, $7)])
      ImpalaProjectRel((tok_table_or_col i_category)=[$5], (tok_table_or_col i_class)=[$4], (tok_table_or_col i_brand)=[$3], (tok_table_or_col s_store_name)=[$1], (tok_table_or_col s_company_name)=[$2], (tok_table_or_col d_moy)=[$0], (tok_function sum (tok_table_or_col ss_sales_price))=[$6], avg_window_0=[avg($6) OVER (PARTITION BY $5, $3, $1, $2 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], condition=[CASE(<>($7, 0), >(/(ABS(-($6, $7)), $7), 0.1:DECIMAL(1, 1)), false)])
        ImpalaAggregateRel(group=[{5, 7, 8, 10, 11, 12}], agg#0=[sum($2)])
          ImpalaJoinRel(condition=[=($0, $9)], joinType=[inner])
            ImpalaJoinRel(condition=[=($1, $6)], joinType=[inner])
              ImpalaJoinRel(condition=[=($3, $4)], joinType=[inner])
                ImpalaProjectPassthroughRel(ss_item_sk=[$1], ss_store_sk=[$6], ss_sales_price=[$12], ss_sold_date_sk=[$22])
                  ImpalaHdfsScanRel(table=[[default, impala_tpcds_store_sales]], condition=[AND(IS NOT NULL($6), IS NOT NULL($22), IS NOT NULL($1))])
                ImpalaProjectPassthroughRel(d_date_sk=[$0], d_moy=[$8])
                  ImpalaHdfsScanRel(table=[[default, impala_tpcds_date_dim]], condition=[AND(=($6, 2000), IS NOT NULL($0))])
              ImpalaProjectPassthroughRel(s_store_sk=[$0], s_store_name=[$5], s_company_name=[$17])
                ImpalaHdfsScanRel(table=[[default, impala_tpcds_store]], condition=[IS NOT NULL($0)])
            ImpalaProjectPassthroughRel(i_item_sk=[$0], i_brand=[$8], i_class=[$10], i_category=[$12])
              ImpalaHdfsScanRel(table=[[default, impala_tpcds_item]], condition=[AND(OR(IN($12, _UTF-16LE'Home':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'Music':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'Books':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"), IN($12, _UTF-16LE'Jewelry':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'Sports':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'Women':VARCHAR(2147483647) CHARACTER SET "UTF-16LE")), OR(IN($10, _UTF-16LE'glassware':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'classical':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'fiction':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"), IN($10, _UTF-16LE'semi-precious':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'baseball':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'dresses':VARCHAR(2147483647) CHARACTER SET "UTF-16LE")), OR(AND(IN($12, _UTF-16LE'Home':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'Music':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'Books':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"), IN($10, _UTF-16LE'glassware':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'classical':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'fiction':VARCHAR(2147483647) CHARACTER SET "UTF-16LE")), AND(IN($12, _UTF-16LE'Jewelry':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'Sports':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'Women':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"), IN($10, _UTF-16LE'semi-precious':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'baseball':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", _UTF-16LE'dresses':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"))), IS NOT NULL($0))])

HMS CALL get_table_req FOR impala_tpcds_item
HMS CALL get_table_req FOR impala_tpcds_store_sales
HMS CALL get_table_req FOR impala_tpcds_date_dim
HMS CALL get_table_req FOR impala_tpcds_store
HMS CALL get_foreign_keys FOR impala_tpcds_item
HMS CALL get_foreign_keys FOR impala_tpcds_store_sales
HMS CALL get_foreign_keys FOR impala_tpcds_date_dim
HMS CALL get_foreign_keys FOR impala_tpcds_store
PREHOOK: query: explain select  *
from(
select i_category, i_class, i_brand,
       s_store_name, s_company_name,
       d_moy,
       sum(ss_sales_price) sum_sales,
       avg(sum(ss_sales_price)) over
         (partition by i_category, i_brand, s_store_name, s_company_name)
         avg_monthly_sales
from impala_tpcds_item, impala_tpcds_store_sales, impala_tpcds_date_dim, impala_tpcds_store
where ss_item_sk = i_item_sk and
      ss_sold_date_sk = d_date_sk and
      ss_store_sk = s_store_sk and
      d_year in (2000) and
        ((i_category in ('Home','Music','Books') and
          i_class in ('glassware','classical','fiction')
         )
      or (i_category in ('Jewelry','Sports','Women') and
          i_class in ('semi-precious','baseball','dresses') 
        ))
group by i_category, i_class, i_brand,
         s_store_name, s_company_name, d_moy) tmp1
where case when (avg_monthly_sales <> 0) then (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales) else null end > 0.1
order by sum_sales - avg_monthly_sales, s_store_name
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@impala_tpcds_date_dim
PREHOOK: Input: default@impala_tpcds_item
PREHOOK: Input: default@impala_tpcds_store
PREHOOK: Input: default@impala_tpcds_store_sales
PREHOOK: Output: streaming
POSTHOOK: query: explain select  *
from(
select i_category, i_class, i_brand,
       s_store_name, s_company_name,
       d_moy,
       sum(ss_sales_price) sum_sales,
       avg(sum(ss_sales_price)) over
         (partition by i_category, i_brand, s_store_name, s_company_name)
         avg_monthly_sales
from impala_tpcds_item, impala_tpcds_store_sales, impala_tpcds_date_dim, impala_tpcds_store
where ss_item_sk = i_item_sk and
      ss_sold_date_sk = d_date_sk and
      ss_store_sk = s_store_sk and
      d_year in (2000) and
        ((i_category in ('Home','Music','Books') and
          i_class in ('glassware','classical','fiction')
         )
      or (i_category in ('Jewelry','Sports','Women') and
          i_class in ('semi-precious','baseball','dresses') 
        ))
group by i_category, i_class, i_brand,
         s_store_name, s_company_name, d_moy) tmp1
where case when (avg_monthly_sales <> 0) then (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales) else null end > 0.1
order by sum_sales - avg_monthly_sales, s_store_name
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@impala_tpcds_date_dim
POSTHOOK: Input: default@impala_tpcds_item
POSTHOOK: Input: default@impala_tpcds_store
POSTHOOK: Input: default@impala_tpcds_store_sales
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Impala
      Impala Plan: 
F08:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=116.00KB mem-reservation=0B thread-reservation=1
  PLAN-ROOT SINK
  |  output exprs: default.impala_tpcds_item.i_category, default.impala_tpcds_item.i_class, default.impala_tpcds_item.i_brand, default.impala_tpcds_store.s_store_name, default.impala_tpcds_store.s_company_name, default.impala_tpcds_date_dim.d_moy, sum(default.impala_tpcds_store_sales.ss_sales_price), avg(sum(default.impala_tpcds_store_sales.ss_sales_price))
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |
  20:MERGING-EXCHANGE [UNPARTITIONED]
     order by: subtract(sum(default.impala_tpcds_store_sales.ss_sales_price), avg(sum(default.impala_tpcds_store_sales.ss_sales_price))) ASC NULLS LAST, default.impala_tpcds_store.s_store_name ASC NULLS LAST
     limit: 100
     mem-estimate=116.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=16 row-size=112B cardinality=0
     in pipelines: 13(GETNEXT)

F07:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=16.08MB mem-reservation=16.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F08, EXCHANGE=20, UNPARTITIONED]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  13:TOP-N [LIMIT=100]
  |  order by: subtract(sum(default.impala_tpcds_store_sales.ss_sales_price), avg(sum(default.impala_tpcds_store_sales.ss_sales_price))) ASC NULLS LAST, default.impala_tpcds_store.s_store_name ASC NULLS LAST
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=16 row-size=112B cardinality=0
  |  in pipelines: 13(GETNEXT), 10(OPEN)
  |
  00:UNION
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=15 row-size=112B cardinality=0
  |  in pipelines: 10(GETNEXT)
  |
  12:SELECT
  |  predicates: CASE WHEN avg(sum(default.impala_tpcds_store_sales.ss_sales_price)) != CAST(0 AS DECIMAL(38,6)) THEN divide(abs(subtract(sum(default.impala_tpcds_store_sales.ss_sales_price), avg(sum(default.impala_tpcds_store_sales.ss_sales_price)))), avg(sum(default.impala_tpcds_store_sales.ss_sales_price))) > CAST(0.1 AS DECIMAL(1,1)) ELSE FALSE END
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=14 row-size=96B cardinality=0
  |  in pipelines: 10(GETNEXT)
  |
  01:UNION
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=14 row-size=96B cardinality=0
  |  in pipelines: 10(GETNEXT)
  |
  11:ANALYTIC
  |  functions: avg(sum(default.impala_tpcds_store_sales.ss_sales_price))
  |  partition by: default.impala_tpcds_item.i_category, default.impala_tpcds_item.i_brand, default.impala_tpcds_store.s_store_name, default.impala_tpcds_store.s_company_name
  |  window: ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=12,11 row-size=96B cardinality=0
  |  in pipelines: 10(GETNEXT)
  |
  10:SORT
  |  order by: default.impala_tpcds_item.i_category ASC NULLS LAST, default.impala_tpcds_item.i_brand ASC NULLS LAST, default.impala_tpcds_store.s_store_name ASC NULLS LAST, default.impala_tpcds_store.s_company_name ASC NULLS LAST
  |  mem-estimate=12.00MB mem-reservation=12.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=12 row-size=80B cardinality=0
  |  in pipelines: 10(GETNEXT), 18(OPEN)
  |
  19:EXCHANGE [HASH(default.impala_tpcds_item.i_category,default.impala_tpcds_item.i_brand,default.impala_tpcds_store.s_store_name,default.impala_tpcds_store.s_company_name)]
     mem-estimate=84.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=7 row-size=80B cardinality=0
     in pipelines: 18(GETNEXT)

F04:PLAN FRAGMENT [HASH(default.impala_tpcds_date_dim.d_moy,default.impala_tpcds_store.s_store_name,default.impala_tpcds_store.s_company_name,default.impala_tpcds_item.i_brand,default.impala_tpcds_item.i_class,default.impala_tpcds_item.i_category)] hosts=1 instances=1
Per-Host Resources: mem-estimate=128.08MB mem-reservation=34.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F07, EXCHANGE=19, HASH(default.impala_tpcds_item.i_category,default.impala_tpcds_item.i_brand,default.impala_tpcds_store.s_store_name,default.impala_tpcds_store.s_company_name)]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  18:AGGREGATE [FINALIZE]
  |  output: sum:merge(default.impala_tpcds_store_sales.ss_sales_price)
  |  group by: default.impala_tpcds_date_dim.d_moy, default.impala_tpcds_store.s_store_name, default.impala_tpcds_store.s_company_name, default.impala_tpcds_item.i_brand, default.impala_tpcds_item.i_class, default.impala_tpcds_item.i_category
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=7 row-size=80B cardinality=0
  |  in pipelines: 18(GETNEXT), 02(OPEN)
  |
  17:EXCHANGE [HASH(default.impala_tpcds_date_dim.d_moy,default.impala_tpcds_store.s_store_name,default.impala_tpcds_store.s_company_name,default.impala_tpcds_item.i_brand,default.impala_tpcds_item.i_class,default.impala_tpcds_item.i_category)]
     mem-estimate=84.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=7 row-size=80B cardinality=0
     in pipelines: 02(GETNEXT)

F00:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=133.91MB mem-reservation=39.81MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F04, EXCHANGE=17, HASH(default.impala_tpcds_date_dim.d_moy,default.impala_tpcds_store.s_store_name,default.impala_tpcds_store.s_company_name,default.impala_tpcds_item.i_brand,default.impala_tpcds_item.i_class,default.impala_tpcds_item.i_category)]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  09:AGGREGATE [STREAMING]
  |  output: sum(default.impala_tpcds_store_sales.ss_sales_price)
  |  group by: default.impala_tpcds_date_dim.d_moy, default.impala_tpcds_store.s_store_name, default.impala_tpcds_store.s_company_name, default.impala_tpcds_item.i_brand, default.impala_tpcds_item.i_class, default.impala_tpcds_item.i_category
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=7 row-size=80B cardinality=0
  |  in pipelines: 02(GETNEXT)
  |
  08:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: default.impala_tpcds_store_sales.ss_item_sk = default.impala_tpcds_item.i_item_sk
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=0,1,3,5 row-size=104B cardinality=0
  |  in pipelines: 02(GETNEXT), 07(OPEN)
  |
  |--16:EXCHANGE [BROADCAST]
  |     mem-estimate=48.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=5 row-size=44B cardinality=0
  |     in pipelines: 07(GETNEXT)
  |
  06:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: default.impala_tpcds_store_sales.ss_store_sk = default.impala_tpcds_store.s_store_sk
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=0,1,3 row-size=60B cardinality=0
  |  in pipelines: 02(GETNEXT), 05(OPEN)
  |
  |--15:EXCHANGE [BROADCAST]
  |     mem-estimate=32.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=3 row-size=28B cardinality=0
  |     in pipelines: 05(GETNEXT)
  |
  04:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: default.impala_tpcds_store_sales.ss_sold_date_sk = default.impala_tpcds_date_dim.d_date_sk
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=0,1 row-size=32B cardinality=0
  |  in pipelines: 02(GETNEXT), 03(OPEN)
  |
  |--14:EXCHANGE [BROADCAST]
  |     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=1 row-size=12B cardinality=0
  |     in pipelines: 03(GETNEXT)
  |
  02:SCAN HDFS [default.impala_tpcds_store_sales, RANDOM]
     partition predicates: default.impala_tpcds_store_sales.ss_sold_date_sk IS NOT NULL
     partitions=0/0 files=0 size=0B
     predicates: default.impala_tpcds_store_sales.ss_item_sk IS NOT NULL, default.impala_tpcds_store_sales.ss_store_sk IS NOT NULL
     stored statistics:
       table: rows=unavailable size=unavailable
       partitions: 0/0 rows=0
       columns missing stats: ss_item_sk, ss_store_sk, ss_sales_price
     extrapolated-rows=disabled max-scan-range-rows=0
     file formats: []
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=0 row-size=20B cardinality=0
     in pipelines: 02(GETNEXT)

F01:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F00, EXCHANGE=14, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  03:SCAN HDFS [default.impala_tpcds_date_dim, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_date_dim.d_date_sk IS NOT NULL, default.impala_tpcds_date_dim.d_year = CAST(2000 AS INT)
     stored statistics:
       table: rows=unavailable size=unavailable
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: default.impala_tpcds_date_dim.d_year = CAST(2000 AS INT)
     file formats: [PARQUET]
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=1 row-size=12B cardinality=0
     in pipelines: 03(GETNEXT)

F02:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F00, EXCHANGE=15, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  05:SCAN HDFS [default.impala_tpcds_store, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_store.s_store_sk IS NOT NULL
     stored statistics:
       table: rows=unavailable size=unavailable
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     file formats: [PARQUET]
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=3 row-size=28B cardinality=0
     in pipelines: 05(GETNEXT)

F03:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F00, EXCHANGE=16, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  07:SCAN HDFS [default.impala_tpcds_item, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_item.i_item_sk IS NOT NULL, default.impala_tpcds_item.i_category IN ('Home', 'Music', 'Books') OR default.impala_tpcds_item.i_category IN ('Jewelry', 'Sports', 'Women'), default.impala_tpcds_item.i_class IN ('glassware', 'classical', 'fiction') OR default.impala_tpcds_item.i_class IN ('semi-precious', 'baseball', 'dresses'), default.impala_tpcds_item.i_category IN ('Home', 'Music', 'Books') AND default.impala_tpcds_item.i_class IN ('glassware', 'classical', 'fiction') OR default.impala_tpcds_item.i_category IN ('Jewelry', 'Sports', 'Women') AND default.impala_tpcds_item.i_class IN ('semi-precious', 'baseball', 'dresses')
     stored statistics:
       table: rows=unavailable size=unavailable
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     file formats: [PARQUET]
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=5 row-size=44B cardinality=0
     in pipelines: 07(GETNEXT)


  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

