HMS CALL get_table_req FOR impala_tpcds_store_sales
HMS CALL get_table_req FOR impala_tpcds_store_returns
HMS CALL get_table_req FOR impala_tpcds_reason
HMS CALL get_foreign_keys FOR impala_tpcds_store_sales
HMS CALL get_foreign_keys FOR impala_tpcds_store_returns
HMS CALL get_foreign_keys FOR impala_tpcds_reason
PREHOOK: query: explain cbo physical select  ss_customer_sk
            ,sum(act_sales) sumsales
      from (select ss_item_sk
                  ,ss_ticket_number
                  ,ss_customer_sk
                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                            else (ss_quantity*ss_sales_price) end act_sales
            from impala_tpcds_store_sales left outer join impala_tpcds_store_returns on (sr_item_sk = ss_item_sk
                                                               and sr_ticket_number = ss_ticket_number)
                ,impala_tpcds_reason
            where sr_reason_sk = r_reason_sk
              and r_reason_desc = 'reason 66') t
      group by ss_customer_sk
      order by sumsales, ss_customer_sk
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@impala_tpcds_reason
PREHOOK: Input: default@impala_tpcds_store_returns
PREHOOK: Input: default@impala_tpcds_store_sales
PREHOOK: Output: streaming
POSTHOOK: query: explain cbo physical select  ss_customer_sk
            ,sum(act_sales) sumsales
      from (select ss_item_sk
                  ,ss_ticket_number
                  ,ss_customer_sk
                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                            else (ss_quantity*ss_sales_price) end act_sales
            from impala_tpcds_store_sales left outer join impala_tpcds_store_returns on (sr_item_sk = ss_item_sk
                                                               and sr_ticket_number = ss_ticket_number)
                ,impala_tpcds_reason
            where sr_reason_sk = r_reason_sk
              and r_reason_desc = 'reason 66') t
      group by ss_customer_sk
      order by sumsales, ss_customer_sk
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@impala_tpcds_reason
POSTHOOK: Input: default@impala_tpcds_store_returns
POSTHOOK: Input: default@impala_tpcds_store_sales
CBO PLAN:
ImpalaSortRel(sort0=[$1], sort1=[$0], dir0=[ASC], dir1=[ASC], fetch=[100])
  ImpalaAggregateRel(group=[{0}], agg#0=[sum($1)])
    ImpalaProjectPassthroughRel(ss_customer_sk=[$7], act_sales=[CASE($2, *(CAST(-($10, $3)):DECIMAL(19, 0), $9), $11)])
      ImpalaJoinRel(condition=[AND(=($0, $6), =($1, $8))], joinType=[inner])
        ImpalaJoinRel(condition=[=($4, $5)], joinType=[inner])
          ImpalaProjectPassthroughRel(sr_item_sk=[$2], sr_ticket_number=[$9], IS NOT NULL=[IS NOT NULL($10)], CAST=[CAST($10):BIGINT], CAST4=[CAST($8):BIGINT])
            ImpalaHdfsScanRel(table=[[default, impala_tpcds_store_returns]], condition=[AND(IS NOT NULL(CAST($8):BIGINT), IS NOT NULL($2), IS NOT NULL($9))])
          ImpalaProjectPassthroughRel(r_reason_sk=[$0])
            ImpalaHdfsScanRel(table=[[default, impala_tpcds_reason]], condition=[AND(=($2, _UTF-16LE'reason 66'), IS NOT NULL($0))])
        ImpalaProjectPassthroughRel(ss_item_sk=[$1], ss_customer_sk=[$2], ss_ticket_number=[$8], ss_sales_price=[$12], CAST=[CAST($9):BIGINT], *=[*(CAST($9):DECIMAL(10, 0), $12)])
          ImpalaHdfsScanRel(table=[[default, impala_tpcds_store_sales]], condition=[AND(IS NOT NULL($1), IS NOT NULL($8))])

HMS CALL get_table_req FOR impala_tpcds_store_sales
HMS CALL get_table_req FOR impala_tpcds_store_returns
HMS CALL get_table_req FOR impala_tpcds_reason
HMS CALL get_foreign_keys FOR impala_tpcds_store_sales
HMS CALL get_foreign_keys FOR impala_tpcds_store_returns
HMS CALL get_foreign_keys FOR impala_tpcds_reason
PREHOOK: query: explain select  ss_customer_sk
            ,sum(act_sales) sumsales
      from (select ss_item_sk
                  ,ss_ticket_number
                  ,ss_customer_sk
                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                            else (ss_quantity*ss_sales_price) end act_sales
            from impala_tpcds_store_sales left outer join impala_tpcds_store_returns on (sr_item_sk = ss_item_sk
                                                               and sr_ticket_number = ss_ticket_number)
                ,impala_tpcds_reason
            where sr_reason_sk = r_reason_sk
              and r_reason_desc = 'reason 66') t
      group by ss_customer_sk
      order by sumsales, ss_customer_sk
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@impala_tpcds_reason
PREHOOK: Input: default@impala_tpcds_store_returns
PREHOOK: Input: default@impala_tpcds_store_sales
PREHOOK: Output: streaming
POSTHOOK: query: explain select  ss_customer_sk
            ,sum(act_sales) sumsales
      from (select ss_item_sk
                  ,ss_ticket_number
                  ,ss_customer_sk
                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                            else (ss_quantity*ss_sales_price) end act_sales
            from impala_tpcds_store_sales left outer join impala_tpcds_store_returns on (sr_item_sk = ss_item_sk
                                                               and sr_ticket_number = ss_ticket_number)
                ,impala_tpcds_reason
            where sr_reason_sk = r_reason_sk
              and r_reason_desc = 'reason 66') t
      group by ss_customer_sk
      order by sumsales, ss_customer_sk
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@impala_tpcds_reason
POSTHOOK: Input: default@impala_tpcds_store_returns
POSTHOOK: Input: default@impala_tpcds_store_sales
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Impala
      Impala Plan: 
F04:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=24.00KB mem-reservation=0B thread-reservation=1
  PLAN-ROOT SINK
  |  output exprs: default.impala_tpcds_store_sales.ss_customer_sk, sum(CASE WHEN default.impala_tpcds_store_returns.sr_return_quantity IS NOT NULL THEN multiply(casttodecimal(subtract(casttobigint(default.impala_tpcds_store_sales.ss_quantity), casttobigint(default.impala_tpcds_store_returns.sr_return_quantity))), default.impala_tpcds_store_sales.ss_sales_price) ELSE multiply(casttodecimal(default.impala_tpcds_store_sales.ss_quantity), default.impala_tpcds_store_sales.ss_sales_price) END)
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |
  11:MERGING-EXCHANGE [UNPARTITIONED]
     order by: sum(CASE WHEN default.impala_tpcds_store_returns.sr_return_quantity IS NOT NULL THEN multiply(casttodecimal(subtract(casttobigint(default.impala_tpcds_store_sales.ss_quantity), casttobigint(default.impala_tpcds_store_returns.sr_return_quantity))), default.impala_tpcds_store_sales.ss_sales_price) ELSE multiply(casttodecimal(default.impala_tpcds_store_sales.ss_quantity), default.impala_tpcds_store_sales.ss_sales_price) END) ASC NULLS LAST, default.impala_tpcds_store_sales.ss_customer_sk ASC NULLS LAST
     limit: 100
     mem-estimate=24.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=6 row-size=20B cardinality=0
     in pipelines: 06(GETNEXT)

F03:PLAN FRAGMENT [HASH(default.impala_tpcds_store_sales.ss_customer_sk)] hosts=1 instances=1
Per-Host Resources: mem-estimate=128.02MB mem-reservation=34.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F04, EXCHANGE=11, UNPARTITIONED]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  06:TOP-N [LIMIT=100]
  |  order by: sum(CASE WHEN default.impala_tpcds_store_returns.sr_return_quantity IS NOT NULL THEN multiply(casttodecimal(subtract(casttobigint(default.impala_tpcds_store_sales.ss_quantity), casttobigint(default.impala_tpcds_store_returns.sr_return_quantity))), default.impala_tpcds_store_sales.ss_sales_price) ELSE multiply(casttodecimal(default.impala_tpcds_store_sales.ss_quantity), default.impala_tpcds_store_sales.ss_sales_price) END) ASC NULLS LAST, default.impala_tpcds_store_sales.ss_customer_sk ASC NULLS LAST
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |  tuple-ids=6 row-size=20B cardinality=0
  |  in pipelines: 06(GETNEXT), 10(OPEN)
  |
  10:AGGREGATE [FINALIZE]
  |  output: sum:merge(CASE WHEN default.impala_tpcds_store_returns.sr_return_quantity IS NOT NULL THEN multiply(casttodecimal(subtract(casttobigint(default.impala_tpcds_store_sales.ss_quantity), casttobigint(default.impala_tpcds_store_returns.sr_return_quantity))), default.impala_tpcds_store_sales.ss_sales_price) ELSE multiply(casttodecimal(default.impala_tpcds_store_sales.ss_quantity), default.impala_tpcds_store_sales.ss_sales_price) END)
  |  group by: default.impala_tpcds_store_sales.ss_customer_sk
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=5 row-size=20B cardinality=0
  |  in pipelines: 10(GETNEXT), 00(OPEN)
  |
  09:EXCHANGE [HASH(default.impala_tpcds_store_sales.ss_customer_sk)]
     mem-estimate=24.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=5 row-size=20B cardinality=0
     in pipelines: 00(GETNEXT)

F00:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=131.93MB mem-reservation=37.88MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F03, EXCHANGE=09, HASH(default.impala_tpcds_store_sales.ss_customer_sk)]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  05:AGGREGATE [STREAMING]
  |  output: sum(CASE WHEN default.impala_tpcds_store_returns.sr_return_quantity IS NOT NULL THEN multiply(casttodecimal(subtract(casttobigint(default.impala_tpcds_store_sales.ss_quantity), casttobigint(default.impala_tpcds_store_returns.sr_return_quantity))), default.impala_tpcds_store_sales.ss_sales_price) ELSE multiply(casttodecimal(default.impala_tpcds_store_sales.ss_quantity), default.impala_tpcds_store_sales.ss_sales_price) END)
  |  group by: default.impala_tpcds_store_sales.ss_customer_sk
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=5 row-size=20B cardinality=0
  |  in pipelines: 00(GETNEXT)
  |
  04:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: default.impala_tpcds_store_returns.sr_item_sk = default.impala_tpcds_store_sales.ss_item_sk, default.impala_tpcds_store_returns.sr_ticket_number = default.impala_tpcds_store_sales.ss_ticket_number
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=0,2,4 row-size=72B cardinality=0
  |  in pipelines: 00(GETNEXT), 03(OPEN)
  |
  |--08:EXCHANGE [BROADCAST]
  |     mem-estimate=32.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=4 row-size=28B cardinality=0
  |     in pipelines: 03(GETNEXT)
  |
  02:HASH JOIN [INNER JOIN, BROADCAST]
  |  hash predicates: casttobigint(default.impala_tpcds_store_returns.sr_reason_sk) = default.impala_tpcds_reason.r_reason_sk
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=0,2 row-size=44B cardinality=0
  |  in pipelines: 00(GETNEXT), 01(OPEN)
  |
  |--07:EXCHANGE [BROADCAST]
  |     mem-estimate=24.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=2 row-size=20B cardinality=0
  |     in pipelines: 01(GETNEXT)
  |
  00:SCAN HDFS [default.impala_tpcds_store_returns, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_store_returns.sr_item_sk IS NOT NULL, default.impala_tpcds_store_returns.sr_ticket_number IS NOT NULL, casttobigint(default.impala_tpcds_store_returns.sr_reason_sk) IS NOT NULL
     stored statistics:
       table: rows=unavailable size=unavailable
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     file formats: [PARQUET]
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=0 row-size=24B cardinality=0
     in pipelines: 00(GETNEXT)

F01:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F00, EXCHANGE=07, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  01:SCAN HDFS [default.impala_tpcds_reason, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpcds_reason.r_reason_sk IS NOT NULL, default.impala_tpcds_reason.r_reason_desc = 'reason 66'
     stored statistics:
       table: rows=unavailable size=unavailable
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     parquet statistics predicates: default.impala_tpcds_reason.r_reason_desc = 'reason 66'
     file formats: [PARQUET]
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=2 row-size=20B cardinality=0
     in pipelines: 01(GETNEXT)

F02:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F00, EXCHANGE=08, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  03:SCAN HDFS [default.impala_tpcds_store_sales, RANDOM]
     partitions=0/0 files=0 size=0B
     predicates: default.impala_tpcds_store_sales.ss_item_sk IS NOT NULL, default.impala_tpcds_store_sales.ss_ticket_number IS NOT NULL
     stored statistics:
       table: rows=unavailable size=unavailable
       partitions: 0/0 rows=0
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     file formats: []
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=4 row-size=28B cardinality=0
     in pipelines: 03(GETNEXT)


  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

