PREHOOK: query: explain cbo select
  c_count,
  count(*) as custdist
from (
  select 
    c_custkey,
    count(o_orderkey) as c_count
  from 
    impala_tpch_customer left outer join impala_tpch_orders on (
      c_custkey = o_custkey 
      and o_comment not like '%special%requests%'
    )
  group by
    c_custkey
  ) as c_orders
group by
  c_count
order by
  custdist desc,
  c_count desc
PREHOOK: type: QUERY
PREHOOK: Input: default@impala_tpch_customer
PREHOOK: Input: default@impala_tpch_orders
PREHOOK: Output: streaming
POSTHOOK: query: explain cbo select
  c_count,
  count(*) as custdist
from (
  select 
    c_custkey,
    count(o_orderkey) as c_count
  from 
    impala_tpch_customer left outer join impala_tpch_orders on (
      c_custkey = o_custkey 
      and o_comment not like '%special%requests%'
    )
  group by
    c_custkey
  ) as c_orders
group by
  c_count
order by
  custdist desc,
  c_count desc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@impala_tpch_customer
POSTHOOK: Input: default@impala_tpch_orders
CBO PLAN:
ImpalaSortRel(sort0=[$1], sort1=[$0], dir0=[DESC], dir1=[DESC])
  ImpalaAggregateRel(group=[{1}], agg#0=[count()])
    ImpalaAggregateRel(group=[{0}], agg#0=[count($1)])
      ImpalaJoinRel(condition=[=($0, $2)], joinType=[left])
        ImpalaProjectPassthroughRel(c_custkey=[$0])
          ImpalaHdfsScanRel(table=[[default, impala_tpch_customer]])
        ImpalaProjectPassthroughRel(o_orderkey=[$0], o_custkey=[$1])
          ImpalaHdfsScanRel(table=[[default, impala_tpch_orders]], condition=[AND(IS NOT NULL($1), NOT(LIKE($8, _UTF-16LE'%special%requests%':VARCHAR(2147483647) CHARACTER SET "UTF-16LE")))])

PREHOOK: query: explain select
  c_count,
  count(*) as custdist
from (
  select 
    c_custkey,
    count(o_orderkey) as c_count
  from 
    impala_tpch_customer left outer join impala_tpch_orders on (
      c_custkey = o_custkey 
      and o_comment not like '%special%requests%'
    )
  group by
    c_custkey
  ) as c_orders
group by
  c_count
order by
  custdist desc,
  c_count desc
PREHOOK: type: QUERY
PREHOOK: Input: default@impala_tpch_customer
PREHOOK: Input: default@impala_tpch_orders
PREHOOK: Output: streaming
POSTHOOK: query: explain select
  c_count,
  count(*) as custdist
from (
  select 
    c_custkey,
    count(o_orderkey) as c_count
  from 
    impala_tpch_customer left outer join impala_tpch_orders on (
      c_custkey = o_custkey 
      and o_comment not like '%special%requests%'
    )
  group by
    c_custkey
  ) as c_orders
group by
  c_count
order by
  custdist desc,
  c_count desc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@impala_tpch_customer
POSTHOOK: Input: default@impala_tpch_orders
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Impala
      Impala Plan: 
F04:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=20.00KB mem-reservation=0B thread-reservation=1
  PLAN-ROOT SINK
  |  output exprs: _impala_builtins.count(default.impala_tpch_orders.o_orderkey), _impala_builtins.count(*)
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  |
  11:MERGING-EXCHANGE [UNPARTITIONED]
     order by: _impala_builtins.count(*) DESC NULLS FIRST, _impala_builtins.count(default.impala_tpch_orders.o_orderkey) DESC NULLS FIRST
     mem-estimate=20.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=6 row-size=16B cardinality=0
     in pipelines: 05(GETNEXT)

F03:PLAN FRAGMENT [HASH(_impala_builtins.count(default.impala_tpch_orders.o_orderkey))] hosts=1 instances=1
Per-Host Resources: mem-estimate=134.00MB mem-reservation=40.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F04, EXCHANGE=11, UNPARTITIONED]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  05:SORT
  |  order by: _impala_builtins.count(*) DESC NULLS FIRST, _impala_builtins.count(default.impala_tpch_orders.o_orderkey) DESC NULLS FIRST
  |  mem-estimate=6.00MB mem-reservation=6.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=6 row-size=16B cardinality=0
  |  in pipelines: 05(GETNEXT), 10(OPEN)
  |
  10:AGGREGATE [FINALIZE]
  |  output: _impala_builtins.count:merge(*)
  |  group by: _impala_builtins.count(default.impala_tpch_orders.o_orderkey)
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=5 row-size=16B cardinality=0
  |  in pipelines: 10(GETNEXT), 08(OPEN)
  |
  09:EXCHANGE [HASH(_impala_builtins.count(default.impala_tpch_orders.o_orderkey))]
     mem-estimate=20.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=5 row-size=16B cardinality=0
     in pipelines: 08(GETNEXT)

F02:PLAN FRAGMENT [HASH(default.impala_tpch_customer.c_custkey)] hosts=1 instances=1
Per-Host Resources: mem-estimate=256.02MB mem-reservation=68.00MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F03, EXCHANGE=09, HASH(_impala_builtins.count(default.impala_tpch_orders.o_orderkey))]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  04:AGGREGATE [STREAMING]
  |  output: count(*)
  |  group by: _impala_builtins.count(default.impala_tpch_orders.o_orderkey)
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=5 row-size=16B cardinality=0
  |  in pipelines: 08(GETNEXT)
  |
  08:AGGREGATE [FINALIZE]
  |  output: _impala_builtins.count:merge(default.impala_tpch_orders.o_orderkey)
  |  group by: default.impala_tpch_customer.c_custkey
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=4 row-size=16B cardinality=0
  |  in pipelines: 08(GETNEXT), 00(OPEN)
  |
  07:EXCHANGE [HASH(default.impala_tpch_customer.c_custkey)]
     mem-estimate=20.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=4 row-size=16B cardinality=0
     in pipelines: 00(GETNEXT)

F00:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=129.97MB mem-reservation=35.94MB thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F02, EXCHANGE=07, HASH(default.impala_tpch_customer.c_custkey)]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  03:AGGREGATE [STREAMING]
  |  output: count(default.impala_tpch_orders.o_orderkey)
  |  group by: default.impala_tpch_customer.c_custkey
  |  mem-estimate=128.00MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
  |  tuple-ids=4 row-size=16B cardinality=0
  |  in pipelines: 00(GETNEXT)
  |
  02:HASH JOIN [LEFT OUTER JOIN, BROADCAST]
  |  hash predicates: default.impala_tpch_customer.c_custkey = default.impala_tpch_orders.o_custkey
  |  fk/pk conjuncts: assumed fk/pk
  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
  |  tuple-ids=0,2N row-size=36B cardinality=0
  |  in pipelines: 00(GETNEXT), 01(OPEN)
  |
  |--06:EXCHANGE [BROADCAST]
  |     mem-estimate=32.00KB mem-reservation=0B thread-reservation=0
  |     tuple-ids=2 row-size=28B cardinality=0
  |     in pipelines: 01(GETNEXT)
  |
  00:SCAN HDFS [default.impala_tpch_customer, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     stored statistics:
       table: rows=unavailable size=unavailable
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=0 row-size=8B cardinality=0
     in pipelines: 00(GETNEXT)

F01:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=0B mem-reservation=0B thread-reservation=1
  DATASTREAM SINK [FRAGMENT=F00, EXCHANGE=06, BROADCAST]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  01:SCAN HDFS [default.impala_tpch_orders, RANDOM]
     HDFS partitions=1/1 files=0 size=0B
     predicates: default.impala_tpch_orders.o_custkey IS NOT NULL, not(like(default.impala_tpch_orders.o_comment, '%special%requests%'))
     stored statistics:
       table: rows=unavailable size=unavailable
       columns: unavailable
     extrapolated-rows=disabled max-scan-range-rows=0
     mem-estimate=0B mem-reservation=0B thread-reservation=0
     tuple-ids=2 row-size=28B cardinality=0
     in pipelines: 01(GETNEXT)


  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

