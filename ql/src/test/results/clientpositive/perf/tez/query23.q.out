Warning: Shuffle Join MERGEJOIN[581][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 27' is a cross product
Warning: Shuffle Join MERGEJOIN[583][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 35' is a cross product
PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 17 (BROADCAST_EDGE), Reducer 8 (BROADCAST_EDGE)
Map 13 <- Reducer 19 (BROADCAST_EDGE), Reducer 21 (BROADCAST_EDGE)
Map 22 <- Reducer 30 (BROADCAST_EDGE)
Map 42 <- Reducer 12 (BROADCAST_EDGE)
Map 43 <- Reducer 37 (BROADCAST_EDGE)
Reducer 10 <- Reducer 16 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 35 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 12 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 15 <- Map 20 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 21 <- Map 20 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Map 22 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 24 <- Map 41 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (CUSTOM_SIMPLE_EDGE), Reducer 28 (CUSTOM_SIMPLE_EDGE), Reducer 40 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Reducer 25 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 16 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Map 29 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE)
Reducer 32 <- Map 41 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 33 <- Reducer 32 (SIMPLE_EDGE)
Reducer 34 <- Reducer 33 (CUSTOM_SIMPLE_EDGE)
Reducer 35 <- Reducer 34 (CUSTOM_SIMPLE_EDGE), Reducer 36 (CUSTOM_SIMPLE_EDGE), Reducer 40 (CUSTOM_SIMPLE_EDGE)
Reducer 36 <- Reducer 33 (CUSTOM_SIMPLE_EDGE)
Reducer 37 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 39 <- Map 38 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 4 <- Reducer 27 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 40 <- Reducer 39 (SIMPLE_EDGE)
Reducer 6 <- Union 5 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 42 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_684]
        Limit [LIM_683] (rows=1 width=112)
          Number of rows:100
          Group By Operator [GBY_682] (rows=1 width=112)
            Output:["_col0"],aggregations:["sum(VALUE._col0)"]
          <-Union 5 [CUSTOM_SIMPLE_EDGE]
            <-Reducer 11 [CONTAINS]
              Reduce Output Operator [RS_594]
                Group By Operator [GBY_593] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_591] (rows=191667562 width=135)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_590] (rows=191667562 width=135)
                      Conds:RS_244._col2=RS_245._col0(Inner),Output:["_col3","_col4"]
                    <-Reducer 10 [SIMPLE_EDGE]
                      SHUFFLE [RS_244]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_580] (rows=174243235 width=135)
                          Conds:RS_241._col1=RS_633._col0(Inner),Output:["_col2","_col3","_col4"]
                        <-Reducer 16 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_633]
                            PartitionCols:_col0
                            Group By Operator [GBY_630] (rows=58079562 width=88)
                              Output:["_col0"],keys:_col1
                              Select Operator [SEL_629] (rows=116159124 width=88)
                                Output:["_col1"]
                                Filter Operator [FIL_628] (rows=116159124 width=88)
                                  predicate:(_col3 > 4L)
                                  Select Operator [SEL_627] (rows=348477374 width=88)
                                    Output:["_col0","_col3"]
                                    Group By Operator [GBY_626] (rows=348477374 width=88)
                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 15 [SIMPLE_EDGE]
                                      SHUFFLE [RS_24]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_23] (rows=696954748 width=88)
                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                          Select Operator [SEL_21] (rows=696954748 width=88)
                                            Output:["_col0","_col1","_col2"]
                                            Merge Join Operator [MERGEJOIN_565] (rows=696954748 width=88)
                                              Conds:RS_18._col1=RS_617._col0(Inner),Output:["_col3","_col5","_col6"]
                                            <-Map 20 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_617]
                                                PartitionCols:_col0
                                                Select Operator [SEL_616] (rows=462000 width=1436)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_615] (rows=462000 width=1436)
                                                    predicate:i_item_sk is not null
                                                    TableScan [TS_12] (rows=462000 width=1436)
                                                      default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_desc"]
                                            <-Reducer 14 [SIMPLE_EDGE]
                                              SHUFFLE [RS_18]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_564] (rows=633595212 width=88)
                                                  Conds:RS_625._col0=RS_609._col0(Inner),Output:["_col1","_col3"]
                                                <-Map 18 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_609]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_608] (rows=36525 width=1119)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_607] (rows=36525 width=1119)
                                                        predicate:((d_year) IN (1999, 2000, 2001, 2002) and d_date_sk is not null)
                                                        TableScan [TS_9] (rows=73049 width=1119)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date","d_year"]
                                                <-Map 13 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_625]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_624] (rows=575995635 width=88)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_623] (rows=575995635 width=88)
                                                        predicate:((ss_item_sk BETWEEN DynamicValue(RS_19_item_i_item_sk_min) AND DynamicValue(RS_19_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_19_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_16_date_dim_d_date_sk_min) AND DynamicValue(RS_16_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_16_date_dim_d_date_sk_bloom_filter))) and ss_item_sk is not null and ss_sold_date_sk is not null)
                                                        TableScan [TS_6] (rows=575995635 width=88)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                        <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_614]
                                                            Group By Operator [GBY_613] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_612]
                                                                Group By Operator [GBY_611] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_610] (rows=36525 width=1119)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_608]
                                                        <-Reducer 21 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_622]
                                                            Group By Operator [GBY_621] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_620]
                                                                Group By Operator [GBY_619] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_618] (rows=462000 width=1436)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_616]
                        <-Reducer 9 [SIMPLE_EDGE]
                          SHUFFLE [RS_241]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_571] (rows=158402938 width=135)
                              Conds:RS_689._col0=RS_599._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_599]
                                PartitionCols:_col0
                                Select Operator [SEL_596] (rows=18262 width=1119)
                                  Output:["_col0"]
                                  Filter Operator [FIL_595] (rows=18262 width=1119)
                                    predicate:((d_moy = 1) and (d_year = 1999) and d_date_sk is not null)
                                    TableScan [TS_3] (rows=73049 width=1119)
                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                            <-Map 42 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_689]
                                PartitionCols:_col0
                                Select Operator [SEL_688] (rows=144002668 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_687] (rows=144002668 width=135)
                                    predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_239_date_dim_d_date_sk_min) AND DynamicValue(RS_239_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_239_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_item_sk is not null and ws_sold_date_sk is not null)
                                    TableScan [TS_124] (rows=144002668 width=135)
                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_quantity","ws_list_price"]
                                    <-Reducer 12 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_686]
                                        Group By Operator [GBY_685] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_604]
                                            Group By Operator [GBY_602] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_600] (rows=18262 width=1119)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_596]
                    <-Reducer 35 [SIMPLE_EDGE]
                      SHUFFLE [RS_245]
                        PartitionCols:_col0
                        Select Operator [SEL_237] (rows=105599202 width=433)
                          Output:["_col0"]
                          Filter Operator [FIL_236] (rows=105599202 width=433)
                            predicate:(_col3 > (0.95 * _col1))
                            Merge Join Operator [MERGEJOIN_583] (rows=316797606 width=433)
                              Conds:(Inner),(Inner),Output:["_col1","_col2","_col3"]
                            <-Reducer 40 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_681]
                                Group By Operator [GBY_679] (rows=316797606 width=88)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 39 [SIMPLE_EDGE]
                                  SHUFFLE [RS_105]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_104] (rows=633595212 width=88)
                                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                      Select Operator [SEL_102] (rows=633595212 width=88)
                                        Output:["_col0","_col1"]
                                        Merge Join Operator [MERGEJOIN_570] (rows=633595212 width=88)
                                          Conds:RS_678._col0=RS_658._col0(Inner),Output:["_col1","_col2","_col3"]
                                        <-Map 41 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_658]
                                            PartitionCols:_col0
                                            Select Operator [SEL_657] (rows=80000000 width=860)
                                              Output:["_col0"]
                                              Filter Operator [FIL_656] (rows=80000000 width=860)
                                                predicate:c_customer_sk is not null
                                                TableScan [TS_96] (rows=80000000 width=860)
                                                  default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk"]
                                        <-Map 38 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_678]
                                            PartitionCols:_col0
                                            Select Operator [SEL_677] (rows=575995635 width=88)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_676] (rows=575995635 width=88)
                                                predicate:ss_customer_sk is not null
                                                TableScan [TS_93] (rows=575995635 width=88)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                            <-Reducer 34 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_707]
                                Select Operator [SEL_706] (rows=1 width=120)
                                  Filter Operator [FIL_705] (rows=1 width=120)
                                    predicate:(sq_count_check(_col0) <= 1)
                                    Group By Operator [GBY_704] (rows=1 width=120)
                                      Output:["_col0"],aggregations:["count()"]
                                      Select Operator [SEL_703] (rows=1 width=120)
                                        Group By Operator [GBY_702] (rows=1 width=120)
                                          Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                        <-Reducer 33 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_700]
                                            Group By Operator [GBY_698] (rows=1 width=120)
                                              Output:["_col0"],aggregations:["count(_col0)"]
                                              Select Operator [SEL_696] (rows=348477374 width=88)
                                                Output:["_col0"]
                                                Group By Operator [GBY_695] (rows=348477374 width=88)
                                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                                <-Reducer 32 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_175]
                                                    PartitionCols:_col0
                                                    Group By Operator [GBY_174] (rows=696954748 width=88)
                                                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                                      Select Operator [SEL_172] (rows=696954748 width=88)
                                                        Output:["_col0","_col1"]
                                                        Merge Join Operator [MERGEJOIN_575] (rows=696954748 width=88)
                                                          Conds:RS_169._col1=RS_660._col0(Inner),Output:["_col2","_col3","_col6"]
                                                        <-Map 41 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_660]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_657]
                                                        <-Reducer 31 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_169]
                                                            PartitionCols:_col1
                                                            Merge Join Operator [MERGEJOIN_574] (rows=633595212 width=88)
                                                              Conds:RS_694._col0=RS_645._col0(Inner),Output:["_col1","_col2","_col3"]
                                                            <-Map 29 [SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_645]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_642] (rows=36525 width=1119)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_641] (rows=36525 width=1119)
                                                                    predicate:((d_year) IN (1999, 2000, 2001, 2002) and d_date_sk is not null)
                                                                    TableScan [TS_36] (rows=73049 width=1119)
                                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                                            <-Map 43 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_694]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_693] (rows=575995635 width=88)
                                                                  Output:["_col0","_col1","_col2","_col3"]
                                                                  Filter Operator [FIL_692] (rows=575995635 width=88)
                                                                    predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_167_date_dim_d_date_sk_min) AND DynamicValue(RS_167_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_167_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                                    TableScan [TS_157] (rows=575995635 width=88)
                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_quantity","ss_sales_price"]
                                                                    <-Reducer 37 [BROADCAST_EDGE] vectorized
                                                                      BROADCAST [RS_691]
                                                                        Group By Operator [GBY_690] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                        <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                          PARTITION_ONLY_SHUFFLE [RS_650]
                                                                            Group By Operator [GBY_648] (rows=1 width=12)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                              Select Operator [SEL_646] (rows=36525 width=1119)
                                                                                Output:["_col0"]
                                                                                 Please refer to the previous Select Operator [SEL_642]
                            <-Reducer 36 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_709]
                                Group By Operator [GBY_708] (rows=1 width=224)
                                  Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                <-Reducer 33 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_701]
                                    Group By Operator [GBY_699] (rows=1 width=224)
                                      Output:["_col0"],aggregations:["max(_col1)"]
                                      Select Operator [SEL_697] (rows=348477374 width=88)
                                        Output:["_col1"]
                                         Please refer to the previous Group By Operator [GBY_695]
            <-Reducer 4 [CONTAINS]
              Reduce Output Operator [RS_589]
                Group By Operator [GBY_588] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_586] (rows=383314495 width=135)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_585] (rows=383314495 width=135)
                      Conds:RS_120._col1=RS_121._col0(Inner),Output:["_col3","_col4"]
                    <-Reducer 27 [SIMPLE_EDGE]
                      SHUFFLE [RS_121]
                        PartitionCols:_col0
                        Select Operator [SEL_113] (rows=105599202 width=433)
                          Output:["_col0"]
                          Filter Operator [FIL_112] (rows=105599202 width=433)
                            predicate:(_col3 > (0.95 * _col1))
                            Merge Join Operator [MERGEJOIN_581] (rows=316797606 width=433)
                              Conds:(Inner),(Inner),Output:["_col1","_col2","_col3"]
                            <-Reducer 40 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_680]
                                 Please refer to the previous Group By Operator [GBY_679]
                            <-Reducer 26 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_673]
                                Select Operator [SEL_672] (rows=1 width=120)
                                  Filter Operator [FIL_671] (rows=1 width=120)
                                    predicate:(sq_count_check(_col0) <= 1)
                                    Group By Operator [GBY_670] (rows=1 width=120)
                                      Output:["_col0"],aggregations:["count()"]
                                      Select Operator [SEL_669] (rows=1 width=120)
                                        Group By Operator [GBY_668] (rows=1 width=120)
                                          Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                        <-Reducer 25 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_666]
                                            Group By Operator [GBY_664] (rows=1 width=120)
                                              Output:["_col0"],aggregations:["count(_col0)"]
                                              Select Operator [SEL_662] (rows=348477374 width=88)
                                                Output:["_col0"]
                                                Group By Operator [GBY_661] (rows=348477374 width=88)
                                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                                <-Reducer 24 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_51]
                                                    PartitionCols:_col0
                                                    Group By Operator [GBY_50] (rows=696954748 width=88)
                                                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                                      Select Operator [SEL_48] (rows=696954748 width=88)
                                                        Output:["_col0","_col1"]
                                                        Merge Join Operator [MERGEJOIN_567] (rows=696954748 width=88)
                                                          Conds:RS_45._col1=RS_659._col0(Inner),Output:["_col2","_col3","_col6"]
                                                        <-Map 41 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_659]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_657]
                                                        <-Reducer 23 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_45]
                                                            PartitionCols:_col1
                                                            Merge Join Operator [MERGEJOIN_566] (rows=633595212 width=88)
                                                              Conds:RS_655._col0=RS_643._col0(Inner),Output:["_col1","_col2","_col3"]
                                                            <-Map 29 [SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_643]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Select Operator [SEL_642]
                                                            <-Map 22 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_655]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_654] (rows=575995635 width=88)
                                                                  Output:["_col0","_col1","_col2","_col3"]
                                                                  Filter Operator [FIL_653] (rows=575995635 width=88)
                                                                    predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_43_date_dim_d_date_sk_min) AND DynamicValue(RS_43_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_43_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                                    TableScan [TS_33] (rows=575995635 width=88)
                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_quantity","ss_sales_price"]
                                                                    <-Reducer 30 [BROADCAST_EDGE] vectorized
                                                                      BROADCAST [RS_652]
                                                                        Group By Operator [GBY_651] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                        <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                          PARTITION_ONLY_SHUFFLE [RS_649]
                                                                            Group By Operator [GBY_647] (rows=1 width=12)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                              Select Operator [SEL_644] (rows=36525 width=1119)
                                                                                Output:["_col0"]
                                                                                 Please refer to the previous Select Operator [SEL_642]
                            <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_675]
                                Group By Operator [GBY_674] (rows=1 width=224)
                                  Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                <-Reducer 25 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_667]
                                    Group By Operator [GBY_665] (rows=1 width=224)
                                      Output:["_col0"],aggregations:["max(_col1)"]
                                      Select Operator [SEL_663] (rows=348477374 width=88)
                                        Output:["_col1"]
                                         Please refer to the previous Group By Operator [GBY_661]
                    <-Reducer 3 [SIMPLE_EDGE]
                      SHUFFLE [RS_120]
                        PartitionCols:_col1
                        Merge Join Operator [MERGEJOIN_579] (rows=348467716 width=135)
                          Conds:RS_117._col2=RS_631._col0(Inner),Output:["_col1","_col3","_col4"]
                        <-Reducer 16 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_631]
                            PartitionCols:_col0
                             Please refer to the previous Group By Operator [GBY_630]
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_117]
                            PartitionCols:_col2
                            Merge Join Operator [MERGEJOIN_563] (rows=316788826 width=135)
                              Conds:RS_640._col0=RS_597._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_597]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_596]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_640]
                                PartitionCols:_col0
                                Select Operator [SEL_639] (rows=287989836 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_638] (rows=287989836 width=135)
                                    predicate:((cs_item_sk BETWEEN DynamicValue(RS_118_item_i_item_sk_min) AND DynamicValue(RS_118_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_118_item_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_115_date_dim_d_date_sk_min) AND DynamicValue(RS_115_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_115_date_dim_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                    TableScan [TS_0] (rows=287989836 width=135)
                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                    <-Reducer 17 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_637]
                                        Group By Operator [GBY_636] (rows=1 width=20)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=58079560)"]
                                        <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_635]
                                            Group By Operator [GBY_634] (rows=1 width=20)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=58079560)"]
                                              Select Operator [SEL_632] (rows=58079562 width=88)
                                                Output:["_col0"]
                                                 Please refer to the previous Group By Operator [GBY_630]
                                    <-Reducer 8 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_606]
                                        Group By Operator [GBY_605] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_603]
                                            Group By Operator [GBY_601] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_598] (rows=18262 width=1119)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_596]

