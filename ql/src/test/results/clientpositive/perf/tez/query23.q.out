Warning: Shuffle Join MERGEJOIN[593][tables = [$hdt$_3, $hdt$_4]] in Stage 'Reducer 25' is a cross product
Warning: Shuffle Join MERGEJOIN[594][tables = [$hdt$_3, $hdt$_4, $hdt$_5]] in Stage 'Reducer 26' is a cross product
Warning: Shuffle Join MERGEJOIN[596][tables = [$hdt$_3, $hdt$_4]] in Stage 'Reducer 29' is a cross product
Warning: Shuffle Join MERGEJOIN[597][tables = [$hdt$_3, $hdt$_4, $hdt$_5]] in Stage 'Reducer 30' is a cross product
PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 8 (BROADCAST_EDGE)
Map 13 <- Reducer 18 (BROADCAST_EDGE)
Map 20 <- Reducer 33 (BROADCAST_EDGE)
Map 38 <- Reducer 12 (BROADCAST_EDGE)
Reducer 10 <- Reducer 16 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 12 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 15 <- Map 19 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 18 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 21 <- Map 20 (SIMPLE_EDGE), Map 32 (SIMPLE_EDGE)
Reducer 22 <- Map 34 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (CUSTOM_SIMPLE_EDGE), Reducer 27 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (CUSTOM_SIMPLE_EDGE), Reducer 36 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Reducer 23 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Reducer 23 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Reducer 28 (CUSTOM_SIMPLE_EDGE), Reducer 31 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 16 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (CUSTOM_SIMPLE_EDGE), Reducer 36 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Reducer 23 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 32 (CUSTOM_SIMPLE_EDGE)
Reducer 35 <- Map 34 (SIMPLE_EDGE), Map 37 (SIMPLE_EDGE)
Reducer 36 <- Reducer 35 (SIMPLE_EDGE)
Reducer 4 <- Reducer 26 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 38 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_692]
        Limit [LIM_691] (rows=1 width=112)
          Number of rows:100
          Group By Operator [GBY_690] (rows=1 width=112)
            Output:["_col0"],aggregations:["sum(VALUE._col0)"]
          <-Union 5 [CUSTOM_SIMPLE_EDGE]
            <-Reducer 11 [CONTAINS]
              Reduce Output Operator [RS_608]
                Group By Operator [GBY_607] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_605] (rows=143930993 width=112)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_604] (rows=143930993 width=115)
                      Conds:RS_250._col2=RS_251._col0(Left Semi),Output:["_col3","_col4"]
                    <-Reducer 10 [SIMPLE_EDGE]
                      SHUFFLE [RS_250]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_592] (rows=143930993 width=119)
                          Conds:RS_245._col1=RS_644._col0(Inner),Output:["_col2","_col3","_col4"]
                        <-Reducer 16 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_644]
                            PartitionCols:_col0
                            Group By Operator [GBY_642] (rows=62562 width=4)
                              Output:["_col0"],keys:_col1
                              Select Operator [SEL_641] (rows=183358851 width=290)
                                Output:["_col1"]
                                Filter Operator [FIL_640] (rows=183358851 width=290)
                                  predicate:(_col3 > 4L)
                                  Select Operator [SEL_639] (rows=550076554 width=290)
                                    Output:["_col1","_col3"]
                                    Group By Operator [GBY_638] (rows=550076554 width=290)
                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 15 [SIMPLE_EDGE]
                                      SHUFFLE [RS_23]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_22] (rows=550076554 width=290)
                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col3, _col5
                                          Merge Join Operator [MERGEJOIN_577] (rows=550076554 width=282)
                                            Conds:RS_18._col1=RS_637._col0(Inner),Output:["_col3","_col4","_col5"]
                                          <-Map 19 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_637]
                                              PartitionCols:_col0
                                              Select Operator [SEL_636] (rows=462000 width=188)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_635] (rows=462000 width=188)
                                                  predicate:i_item_sk is not null
                                                  TableScan [TS_12] (rows=462000 width=188)
                                                    default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_desc"]
                                          <-Reducer 14 [SIMPLE_EDGE]
                                            SHUFFLE [RS_18]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_576] (rows=550076554 width=98)
                                                Conds:RS_634._col0=RS_626._col0(Inner),Output:["_col1","_col3"]
                                              <-Map 17 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_626]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_625] (rows=2609 width=98)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_624] (rows=2609 width=102)
                                                      predicate:((d_year) IN (1999, 2000, 2001, 2002) and d_date_sk is not null)
                                                      TableScan [TS_9] (rows=73049 width=102)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_year"]
                                              <-Map 13 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_634]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_633] (rows=550076554 width=7)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_632] (rows=550076554 width=7)
                                                      predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_16_date_dim_d_date_sk_min) AND DynamicValue(RS_16_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_16_date_dim_d_date_sk_bloom_filter)))
                                                      TableScan [TS_6] (rows=575995635 width=7)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                      <-Reducer 18 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_631]
                                                          Group By Operator [GBY_630] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_629]
                                                              Group By Operator [GBY_628] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_627] (rows=2609 width=4)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_625]
                        <-Reducer 9 [SIMPLE_EDGE]
                          SHUFFLE [RS_245]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_583] (rows=143930993 width=123)
                              Conds:RS_697._col0=RS_613._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_613]
                                PartitionCols:_col0
                                Select Operator [SEL_610] (rows=50 width=4)
                                  Output:["_col0"]
                                  Filter Operator [FIL_609] (rows=50 width=12)
                                    predicate:((d_year = 1999) and (d_moy = 1) and d_date_sk is not null)
                                    TableScan [TS_3] (rows=73049 width=12)
                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                            <-Map 38 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_697]
                                PartitionCols:_col0
                                Select Operator [SEL_696] (rows=143930993 width=127)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_695] (rows=143930993 width=127)
                                    predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_243_date_dim_d_date_sk_min) AND DynamicValue(RS_243_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_243_date_dim_d_date_sk_bloom_filter)))
                                    TableScan [TS_127] (rows=144002668 width=127)
                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_quantity","ws_list_price"]
                                    <-Reducer 12 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_694]
                                        Group By Operator [GBY_693] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_618]
                                            Group By Operator [GBY_616] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_614] (rows=50 width=4)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_610]
                    <-Reducer 30 [SIMPLE_EDGE]
                      SHUFFLE [RS_251]
                        PartitionCols:_col0
                        Group By Operator [GBY_249] (rows=225322 width=4)
                          Output:["_col0"],keys:_col0
                          Select Operator [SEL_241] (rows=450644 width=4)
                            Output:["_col0"]
                            Filter Operator [FIL_240] (rows=450644 width=228)
                              predicate:(_col3 > _col1)
                              Merge Join Operator [MERGEJOIN_597] (rows=1351933 width=228)
                                Conds:(Inner),Output:["_col1","_col2","_col3"]
                              <-Reducer 36 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_689]
                                  Filter Operator [FIL_687] (rows=1351933 width=116)
                                    predicate:_col1 is not null
                                    Group By Operator [GBY_686] (rows=1351933 width=116)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                    <-Reducer 35 [SIMPLE_EDGE]
                                      SHUFFLE [RS_103]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_102] (rows=80000000 width=116)
                                          Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col2
                                          Merge Join Operator [MERGEJOIN_582] (rows=550080312 width=116)
                                            Conds:RS_685._col0=RS_659._col0(Inner),Output:["_col1","_col2"]
                                          <-Map 34 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_659]
                                              PartitionCols:_col0
                                              Select Operator [SEL_657] (rows=80000000 width=4)
                                                Output:["_col0"]
                                                Filter Operator [FIL_656] (rows=80000000 width=4)
                                                  predicate:c_customer_sk is not null
                                                  TableScan [TS_38] (rows=80000000 width=4)
                                                    default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk"]
                                          <-Map 37 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_685]
                                              PartitionCols:_col0
                                              Select Operator [SEL_684] (rows=550080312 width=115)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_683] (rows=550080312 width=114)
                                                  predicate:ss_customer_sk is not null
                                                  TableScan [TS_92] (rows=575995635 width=114)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                              <-Reducer 29 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_237]
                                  Merge Join Operator [MERGEJOIN_596] (rows=1 width=112)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_703]
                                      Select Operator [SEL_702] (rows=1 width=8)
                                        Filter Operator [FIL_701] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_700] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Select Operator [SEL_699] (rows=1 width=8)
                                              Group By Operator [GBY_698] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                              <-Reducer 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_671]
                                                  Group By Operator [GBY_667] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_663] (rows=1291098 width=116)
                                                      Output:["_col0"]
                                                      Group By Operator [GBY_660] (rows=1291098 width=116)
                                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                                      <-Reducer 22 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_49]
                                                          PartitionCols:_col0
                                                          Group By Operator [GBY_48] (rows=80000000 width=116)
                                                            Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col4
                                                            Merge Join Operator [MERGEJOIN_579] (rows=525327388 width=116)
                                                              Conds:RS_44._col1=RS_658._col0(Inner),Output:["_col2","_col4"]
                                                            <-Map 34 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_658]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Select Operator [SEL_657]
                                                            <-Reducer 21 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_44]
                                                                PartitionCols:_col1
                                                                Merge Join Operator [MERGEJOIN_578] (rows=525327388 width=115)
                                                                  Conds:RS_655._col0=RS_647._col0(Inner),Output:["_col1","_col2"]
                                                                <-Map 32 [SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_647]
                                                                    PartitionCols:_col0
                                                                    Select Operator [SEL_646] (rows=2609 width=4)
                                                                      Output:["_col0"]
                                                                      Filter Operator [FIL_645] (rows=2609 width=8)
                                                                        predicate:((d_year) IN (1999, 2000, 2001, 2002) and d_date_sk is not null)
                                                                        TableScan [TS_35] (rows=73049 width=8)
                                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                                <-Map 20 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_655]
                                                                    PartitionCols:_col0
                                                                    Select Operator [SEL_654] (rows=525327388 width=119)
                                                                      Output:["_col0","_col1","_col2"]
                                                                      Filter Operator [FIL_653] (rows=525327388 width=118)
                                                                        predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_42_date_dim_d_date_sk_min) AND DynamicValue(RS_42_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_42_date_dim_d_date_sk_bloom_filter)))
                                                                        TableScan [TS_32] (rows=575995635 width=118)
                                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_quantity","ss_sales_price"]
                                                                        <-Reducer 33 [BROADCAST_EDGE] vectorized
                                                                          BROADCAST [RS_652]
                                                                            Group By Operator [GBY_651] (rows=1 width=12)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                            <-Map 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_650]
                                                                                Group By Operator [GBY_649] (rows=1 width=12)
                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                  Select Operator [SEL_648] (rows=2609 width=4)
                                                                                    Output:["_col0"]
                                                                                     Please refer to the previous Select Operator [SEL_646]
                                  <-Reducer 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_707]
                                      Select Operator [SEL_706] (rows=1 width=112)
                                        Output:["_col0"]
                                        Filter Operator [FIL_705] (rows=1 width=112)
                                          predicate:_col0 is not null
                                          Group By Operator [GBY_704] (rows=1 width=112)
                                            Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                          <-Reducer 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_672]
                                              Group By Operator [GBY_668] (rows=1 width=112)
                                                Output:["_col0"],aggregations:["max(_col1)"]
                                                Select Operator [SEL_664] (rows=1291098 width=116)
                                                  Output:["_col1"]
                                                   Please refer to the previous Group By Operator [GBY_660]
            <-Reducer 4 [CONTAINS]
              Reduce Output Operator [RS_603]
                Group By Operator [GBY_602] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_600] (rows=285117831 width=112)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_599] (rows=285117831 width=115)
                      Conds:RS_123._col1=RS_124._col0(Left Semi),Output:["_col3","_col4"]
                    <-Reducer 26 [SIMPLE_EDGE]
                      SHUFFLE [RS_124]
                        PartitionCols:_col0
                        Group By Operator [GBY_122] (rows=225322 width=4)
                          Output:["_col0"],keys:_col0
                          Select Operator [SEL_114] (rows=450644 width=4)
                            Output:["_col0"]
                            Filter Operator [FIL_113] (rows=450644 width=228)
                              predicate:(_col3 > _col1)
                              Merge Join Operator [MERGEJOIN_594] (rows=1351933 width=228)
                                Conds:(Inner),Output:["_col1","_col2","_col3"]
                              <-Reducer 36 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_688]
                                   Please refer to the previous Filter Operator [FIL_687]
                              <-Reducer 25 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_110]
                                  Merge Join Operator [MERGEJOIN_593] (rows=1 width=112)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Reducer 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_678]
                                      Select Operator [SEL_677] (rows=1 width=8)
                                        Filter Operator [FIL_676] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_675] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Select Operator [SEL_674] (rows=1 width=8)
                                              Group By Operator [GBY_673] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                              <-Reducer 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_669]
                                                  Group By Operator [GBY_665] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_661] (rows=1291098 width=116)
                                                      Output:["_col0"]
                                                       Please refer to the previous Group By Operator [GBY_660]
                                  <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_682]
                                      Select Operator [SEL_681] (rows=1 width=112)
                                        Output:["_col0"]
                                        Filter Operator [FIL_680] (rows=1 width=112)
                                          predicate:_col0 is not null
                                          Group By Operator [GBY_679] (rows=1 width=112)
                                            Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                          <-Reducer 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_670]
                                              Group By Operator [GBY_666] (rows=1 width=112)
                                                Output:["_col0"],aggregations:["max(_col1)"]
                                                Select Operator [SEL_662] (rows=1291098 width=116)
                                                  Output:["_col1"]
                                                   Please refer to the previous Group By Operator [GBY_660]
                    <-Reducer 3 [SIMPLE_EDGE]
                      SHUFFLE [RS_123]
                        PartitionCols:_col1
                        Merge Join Operator [MERGEJOIN_591] (rows=285117831 width=119)
                          Conds:RS_118._col2=RS_643._col0(Inner),Output:["_col1","_col3","_col4"]
                        <-Reducer 16 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_643]
                            PartitionCols:_col0
                             Please refer to the previous Group By Operator [GBY_642]
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_118]
                            PartitionCols:_col2
                            Merge Join Operator [MERGEJOIN_575] (rows=285117831 width=123)
                              Conds:RS_623._col0=RS_611._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_611]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_610]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_623]
                                PartitionCols:_col0
                                Select Operator [SEL_622] (rows=285117831 width=127)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_621] (rows=285117831 width=127)
                                    predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_116_date_dim_d_date_sk_min) AND DynamicValue(RS_116_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_116_date_dim_d_date_sk_bloom_filter)))
                                    TableScan [TS_0] (rows=287989836 width=127)
                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                    <-Reducer 8 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_620]
                                        Group By Operator [GBY_619] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_617]
                                            Group By Operator [GBY_615] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_612] (rows=50 width=4)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_610]

