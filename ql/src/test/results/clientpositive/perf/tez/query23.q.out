Warning: Shuffle Join MERGEJOIN[377][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 22' is a cross product
Warning: Shuffle Join MERGEJOIN[379][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 25' is a cross product
PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 25 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 13 <- Map 16 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE)
Reducer 19 <- Map 31 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (CUSTOM_SIMPLE_EDGE), Reducer 23 (CUSTOM_SIMPLE_EDGE), Reducer 30 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Reducer 20 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Reducer 20 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (CUSTOM_SIMPLE_EDGE), Reducer 26 (CUSTOM_SIMPLE_EDGE), Reducer 30 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Reducer 20 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 28 (SIMPLE_EDGE), Map 31 (SIMPLE_EDGE)
Reducer 3 <- Reducer 14 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (SIMPLE_EDGE)
Reducer 4 <- Reducer 22 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 32 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 14 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_453]
        Limit [LIM_452] (rows=1 width=112)
          Number of rows:100
          Group By Operator [GBY_451] (rows=1 width=112)
            Output:["_col0"],aggregations:["sum(VALUE._col0)"]
          <-Union 5 [CUSTOM_SIMPLE_EDGE]
            <-Reducer 10 [CONTAINS]
              Reduce Output Operator [RS_390]
                Group By Operator [GBY_389] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_387] (rows=191667562 width=135)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_386] (rows=191667562 width=135)
                      Conds:RS_244._col2=RS_245._col0(Inner),Output:["_col3","_col4"]
                    <-Reducer 25 [SIMPLE_EDGE]
                      SHUFFLE [RS_245]
                        PartitionCols:_col0
                        Select Operator [SEL_237] (rows=105599202 width=433)
                          Output:["_col0"]
                          Filter Operator [FIL_236] (rows=105599202 width=433)
                            predicate:(_col3 > (0.95 * _col1))
                            Merge Join Operator [MERGEJOIN_379] (rows=316797606 width=433)
                              Conds:(Inner),(Inner),Output:["_col1","_col2","_col3"]
                            <-Reducer 30 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_450]
                                Group By Operator [GBY_448] (rows=316797606 width=88)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 29 [SIMPLE_EDGE]
                                  SHUFFLE [RS_105]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_104] (rows=633595212 width=88)
                                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                      Select Operator [SEL_102] (rows=633595212 width=88)
                                        Output:["_col0","_col1"]
                                        Merge Join Operator [MERGEJOIN_366] (rows=633595212 width=88)
                                          Conds:RS_447._col0=RS_422._col0(Inner),Output:["_col1","_col2","_col3"]
                                        <-Map 31 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_422]
                                            PartitionCols:_col0
                                            Select Operator [SEL_421] (rows=80000000 width=860)
                                              Output:["_col0"]
                                              Filter Operator [FIL_420] (rows=80000000 width=860)
                                                predicate:c_customer_sk is not null
                                                TableScan [TS_96] (rows=80000000 width=860)
                                                  default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk"]
                                        <-Map 28 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_447]
                                            PartitionCols:_col0
                                            Select Operator [SEL_446] (rows=575995635 width=88)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_445] (rows=575995635 width=88)
                                                predicate:ss_customer_sk is not null
                                                TableScan [TS_93] (rows=575995635 width=88)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                            <-Reducer 24 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_462]
                                Select Operator [SEL_461] (rows=1 width=120)
                                  Filter Operator [FIL_460] (rows=1 width=120)
                                    predicate:(sq_count_check(_col0) <= 1)
                                    Group By Operator [GBY_459] (rows=1 width=120)
                                      Output:["_col0"],aggregations:["count()"]
                                      Select Operator [SEL_458] (rows=1 width=120)
                                        Group By Operator [GBY_457] (rows=1 width=120)
                                          Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                        <-Reducer 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_435]
                                            Group By Operator [GBY_431] (rows=1 width=120)
                                              Output:["_col0"],aggregations:["count(_col0)"]
                                              Select Operator [SEL_427] (rows=348477374 width=88)
                                                Output:["_col0"]
                                                Group By Operator [GBY_424] (rows=348477374 width=88)
                                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                                <-Reducer 19 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_51]
                                                    PartitionCols:_col0
                                                    Group By Operator [GBY_50] (rows=696954748 width=88)
                                                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                                      Select Operator [SEL_48] (rows=696954748 width=88)
                                                        Output:["_col0","_col1"]
                                                        Merge Join Operator [MERGEJOIN_363] (rows=696954748 width=88)
                                                          Conds:RS_45._col1=RS_423._col0(Inner),Output:["_col2","_col3","_col6"]
                                                        <-Map 31 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_423]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_421]
                                                        <-Reducer 18 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_45]
                                                            PartitionCols:_col1
                                                            Merge Join Operator [MERGEJOIN_362] (rows=633595212 width=88)
                                                              Conds:RS_416._col0=RS_419._col0(Inner),Output:["_col1","_col2","_col3"]
                                                            <-Map 17 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_416]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_415] (rows=575995635 width=88)
                                                                  Output:["_col0","_col1","_col2","_col3"]
                                                                  Filter Operator [FIL_414] (rows=575995635 width=88)
                                                                    predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                                    TableScan [TS_33] (rows=575995635 width=88)
                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_quantity","ss_sales_price"]
                                                            <-Map 27 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_419]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_418] (rows=36525 width=1119)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_417] (rows=36525 width=1119)
                                                                    predicate:((d_year) IN (1999, 2000, 2001, 2002) and d_date_sk is not null)
                                                                    TableScan [TS_36] (rows=73049 width=1119)
                                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                            <-Reducer 26 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_464]
                                Group By Operator [GBY_463] (rows=1 width=224)
                                  Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                <-Reducer 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_436]
                                    Group By Operator [GBY_432] (rows=1 width=224)
                                      Output:["_col0"],aggregations:["max(_col1)"]
                                      Select Operator [SEL_428] (rows=348477374 width=88)
                                        Output:["_col1"]
                                         Please refer to the previous Group By Operator [GBY_424]
                    <-Reducer 9 [SIMPLE_EDGE]
                      SHUFFLE [RS_244]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_376] (rows=174243235 width=135)
                          Conds:RS_241._col1=RS_413._col0(Inner),Output:["_col2","_col3","_col4"]
                        <-Reducer 14 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_413]
                            PartitionCols:_col0
                            Group By Operator [GBY_411] (rows=58079562 width=88)
                              Output:["_col0"],keys:_col1
                              Select Operator [SEL_410] (rows=116159124 width=88)
                                Output:["_col1"]
                                Filter Operator [FIL_409] (rows=116159124 width=88)
                                  predicate:(_col3 > 4L)
                                  Select Operator [SEL_408] (rows=348477374 width=88)
                                    Output:["_col0","_col3"]
                                    Group By Operator [GBY_407] (rows=348477374 width=88)
                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 13 [SIMPLE_EDGE]
                                      SHUFFLE [RS_24]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_23] (rows=696954748 width=88)
                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                          Select Operator [SEL_21] (rows=696954748 width=88)
                                            Output:["_col0","_col1","_col2"]
                                            Merge Join Operator [MERGEJOIN_361] (rows=696954748 width=88)
                                              Conds:RS_18._col1=RS_406._col0(Inner),Output:["_col3","_col5","_col6"]
                                            <-Map 16 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_406]
                                                PartitionCols:_col0
                                                Select Operator [SEL_405] (rows=462000 width=1436)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_404] (rows=462000 width=1436)
                                                    predicate:i_item_sk is not null
                                                    TableScan [TS_12] (rows=462000 width=1436)
                                                      default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_desc"]
                                            <-Reducer 12 [SIMPLE_EDGE]
                                              SHUFFLE [RS_18]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_360] (rows=633595212 width=88)
                                                  Conds:RS_400._col0=RS_403._col0(Inner),Output:["_col1","_col3"]
                                                <-Map 11 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_400]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_399] (rows=575995635 width=88)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_398] (rows=575995635 width=88)
                                                        predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                                        TableScan [TS_6] (rows=575995635 width=88)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                <-Map 15 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_403]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_402] (rows=36525 width=1119)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_401] (rows=36525 width=1119)
                                                        predicate:((d_year) IN (1999, 2000, 2001, 2002) and d_date_sk is not null)
                                                        TableScan [TS_9] (rows=73049 width=1119)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date","d_year"]
                        <-Reducer 8 [SIMPLE_EDGE]
                          SHUFFLE [RS_241]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_367] (rows=158402938 width=135)
                              Conds:RS_456._col0=RS_397._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_397]
                                PartitionCols:_col0
                                Select Operator [SEL_395] (rows=18262 width=1119)
                                  Output:["_col0"]
                                  Filter Operator [FIL_394] (rows=18262 width=1119)
                                    predicate:((d_moy = 1) and (d_year = 1999) and d_date_sk is not null)
                                    TableScan [TS_3] (rows=73049 width=1119)
                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                            <-Map 32 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_456]
                                PartitionCols:_col0
                                Select Operator [SEL_455] (rows=144002668 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_454] (rows=144002668 width=135)
                                    predicate:(ws_bill_customer_sk is not null and ws_item_sk is not null and ws_sold_date_sk is not null)
                                    TableScan [TS_124] (rows=144002668 width=135)
                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_quantity","ws_list_price"]
            <-Reducer 4 [CONTAINS]
              Reduce Output Operator [RS_385]
                Group By Operator [GBY_384] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_382] (rows=383314495 width=135)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_381] (rows=383314495 width=135)
                      Conds:RS_120._col1=RS_121._col0(Inner),Output:["_col3","_col4"]
                    <-Reducer 22 [SIMPLE_EDGE]
                      SHUFFLE [RS_121]
                        PartitionCols:_col0
                        Select Operator [SEL_113] (rows=105599202 width=433)
                          Output:["_col0"]
                          Filter Operator [FIL_112] (rows=105599202 width=433)
                            predicate:(_col3 > (0.95 * _col1))
                            Merge Join Operator [MERGEJOIN_377] (rows=316797606 width=433)
                              Conds:(Inner),(Inner),Output:["_col1","_col2","_col3"]
                            <-Reducer 30 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_449]
                                 Please refer to the previous Group By Operator [GBY_448]
                            <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_442]
                                Select Operator [SEL_441] (rows=1 width=120)
                                  Filter Operator [FIL_440] (rows=1 width=120)
                                    predicate:(sq_count_check(_col0) <= 1)
                                    Group By Operator [GBY_439] (rows=1 width=120)
                                      Output:["_col0"],aggregations:["count()"]
                                      Select Operator [SEL_438] (rows=1 width=120)
                                        Group By Operator [GBY_437] (rows=1 width=120)
                                          Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                        <-Reducer 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_433]
                                            Group By Operator [GBY_429] (rows=1 width=120)
                                              Output:["_col0"],aggregations:["count(_col0)"]
                                              Select Operator [SEL_425] (rows=348477374 width=88)
                                                Output:["_col0"]
                                                 Please refer to the previous Group By Operator [GBY_424]
                            <-Reducer 23 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_444]
                                Group By Operator [GBY_443] (rows=1 width=224)
                                  Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                <-Reducer 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_434]
                                    Group By Operator [GBY_430] (rows=1 width=224)
                                      Output:["_col0"],aggregations:["max(_col1)"]
                                      Select Operator [SEL_426] (rows=348477374 width=88)
                                        Output:["_col1"]
                                         Please refer to the previous Group By Operator [GBY_424]
                    <-Reducer 3 [SIMPLE_EDGE]
                      SHUFFLE [RS_120]
                        PartitionCols:_col1
                        Merge Join Operator [MERGEJOIN_375] (rows=348467716 width=135)
                          Conds:RS_117._col2=RS_412._col0(Inner),Output:["_col1","_col3","_col4"]
                        <-Reducer 14 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_412]
                            PartitionCols:_col0
                             Please refer to the previous Group By Operator [GBY_411]
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_117]
                            PartitionCols:_col2
                            Merge Join Operator [MERGEJOIN_359] (rows=316788826 width=135)
                              Conds:RS_393._col0=RS_396._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_396]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_395]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_393]
                                PartitionCols:_col0
                                Select Operator [SEL_392] (rows=287989836 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_391] (rows=287989836 width=135)
                                    predicate:(cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                    TableScan [TS_0] (rows=287989836 width=135)
                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity","cs_list_price"]

