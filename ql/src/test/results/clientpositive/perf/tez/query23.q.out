Warning: Shuffle Join MERGEJOIN[454][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 23' is a cross product
Warning: Shuffle Join MERGEJOIN[456][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 24' is a cross product
PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Map 26 <- Reducer 18 (BROADCAST_EDGE)
Map 28 <- Reducer 7 (BROADCAST_EDGE)
Map 34 <- Reducer 25 (BROADCAST_EDGE)
Map 35 <- Reducer 14 (BROADCAST_EDGE)
Map 36 <- Reducer 13 (BROADCAST_EDGE)
Reducer 10 <- Map 35 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 13 <- Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 26 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 16 <- Map 27 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 34 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 20 <- Map 31 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (CUSTOM_SIMPLE_EDGE), Reducer 30 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Reducer 22 (CUSTOM_SIMPLE_EDGE), Reducer 33 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 28 (SIMPLE_EDGE), Map 31 (SIMPLE_EDGE)
Reducer 3 <- Reducer 17 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (SIMPLE_EDGE)
Reducer 32 <- Map 31 (SIMPLE_EDGE), Map 36 (SIMPLE_EDGE)
Reducer 33 <- Reducer 32 (SIMPLE_EDGE)
Reducer 4 <- Reducer 23 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_538]
        Group By Operator [GBY_537] (rows=1 width=112)
          Output:["_col0"],aggregations:["sum(VALUE._col0)"]
        <-Union 5 [CUSTOM_SIMPLE_EDGE]
          <-Reducer 12 [CONTAINS]
            Reduce Output Operator [RS_467]
              Group By Operator [GBY_466] (rows=1 width=112)
                Output:["_col0"],aggregations:["sum(_col0)"]
                Select Operator [SEL_464] (rows=3941102 width=112)
                  Output:["_col0"]
                  Merge Join Operator [MERGEJOIN_463] (rows=3941102 width=114)
                    Conds:RS_178._col0=RS_179._col0(Left Semi),Output:["_col1","_col2"]
                  <-Reducer 11 [SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_178]
                      PartitionCols:_col0
                      Select Operator [SEL_128] (rows=3941102 width=118)
                        Output:["_col0","_col1","_col2"]
                        Merge Join Operator [MERGEJOIN_453] (rows=3941102 width=118)
                          Conds:RS_125._col0=RS_509._col0(Left Semi),Output:["_col1","_col2","_col3"]
                        <-Reducer 17 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_509]
                            PartitionCols:_col0
                            Group By Operator [GBY_507] (rows=2235 width=4)
                              Output:["_col0"],keys:_col0
                              Select Operator [SEL_506] (rows=6548799 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_505] (rows=6548799 width=220)
                                  predicate:(_col3 > 4L)
                                  Select Operator [SEL_504] (rows=19646398 width=220)
                                    Output:["_col1","_col3"]
                                    Group By Operator [GBY_503] (rows=19646398 width=220)
                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 16 [SIMPLE_EDGE]
                                      SHUFFLE [RS_27]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_26] (rows=19646398 width=220)
                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col3, _col5
                                          Merge Join Operator [MERGEJOIN_442] (rows=19646398 width=212)
                                            Conds:RS_22._col1=RS_502._col0(Inner),Output:["_col3","_col4","_col5"]
                                          <-Map 27 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_502]
                                              PartitionCols:_col0
                                              Select Operator [SEL_501] (rows=462000 width=118)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_500] (rows=462000 width=188)
                                                  predicate:i_item_sk is not null
                                                  TableScan [TS_16] (rows=462000 width=188)
                                                    default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_desc"]
                                          <-Reducer 15 [SIMPLE_EDGE]
                                            SHUFFLE [RS_22]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_441] (rows=19646398 width=98)
                                                Conds:RS_499._col0=RS_478._col0(Inner),Output:["_col1","_col3"]
                                              <-Map 8 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_478]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_472] (rows=2609 width=98)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_469] (rows=2609 width=102)
                                                      predicate:((d_year) IN (1999, 2000, 2001, 2002) and d_date_sk is not null)
                                                      TableScan [TS_3] (rows=73049 width=12)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy","d_date"]
                                              <-Map 26 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_499]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_498] (rows=550076554 width=7)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_497] (rows=550076554 width=7)
                                                      predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_20_date_dim_d_date_sk_min) AND DynamicValue(RS_20_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_20_date_dim_d_date_sk_bloom_filter)))
                                                      TableScan [TS_10] (rows=575995635 width=7)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                      <-Reducer 18 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_496]
                                                          Group By Operator [GBY_495] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_488]
                                                              Group By Operator [GBY_484] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_479] (rows=2609 width=4)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_472]
                        <-Reducer 10 [SIMPLE_EDGE]
                          SHUFFLE [RS_125]
                            PartitionCols:_col0
                            Select Operator [SEL_100] (rows=3941102 width=122)
                              Output:["_col0","_col1","_col2","_col3"]
                              Merge Join Operator [MERGEJOIN_446] (rows=3941102 width=122)
                                Conds:RS_543._col0=RS_476._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                              <-Map 8 [SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_476]
                                  PartitionCols:_col0
                                  Select Operator [SEL_471] (rows=50 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_468] (rows=50 width=12)
                                      predicate:((d_year = 1999) and (d_moy = 1) and d_date_sk is not null)
                                       Please refer to the previous TableScan [TS_3]
                              <-Map 35 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_543]
                                  PartitionCols:_col0
                                  Select Operator [SEL_542] (rows=143930993 width=127)
                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                    Filter Operator [FIL_541] (rows=143930993 width=127)
                                      predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_98_date_dim_d_date_sk_min) AND DynamicValue(RS_98_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_98_date_dim_d_date_sk_bloom_filter)))
                                      TableScan [TS_91] (rows=144002668 width=127)
                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_quantity","ws_list_price"]
                                      <-Reducer 14 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_540]
                                          Group By Operator [GBY_539] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_487]
                                              Group By Operator [GBY_483] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_477] (rows=50 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_471]
                  <-Reducer 24 [SIMPLE_EDGE]
                    SHUFFLE [RS_179]
                      PartitionCols:_col0
                      Group By Operator [GBY_177] (rows=235937 width=4)
                        Output:["_col0"],keys:_col0
                        Select Operator [SEL_175] (rows=471875 width=4)
                          Output:["_col0"]
                          Filter Operator [FIL_174] (rows=471875 width=228)
                            predicate:(_col1 > _col2)
                            Merge Join Operator [MERGEJOIN_456] (rows=1415625 width=228)
                              Conds:(Inner),Output:["_col0","_col1","_col2"]
                            <-Reducer 22 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_528]
                                Select Operator [SEL_526] (rows=1 width=112)
                                  Output:["_col0"]
                                  Filter Operator [FIL_525] (rows=1 width=112)
                                    predicate:_col0 is not null
                                    Group By Operator [GBY_524] (rows=1 width=112)
                                      Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                    <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_523]
                                        Group By Operator [GBY_522] (rows=1 width=112)
                                          Output:["_col0"],aggregations:["max(_col1)"]
                                          Select Operator [SEL_521] (rows=11859 width=116)
                                            Output:["_col1"]
                                            Group By Operator [GBY_520] (rows=11859 width=116)
                                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                            <-Reducer 20 [SIMPLE_EDGE]
                                              SHUFFLE [RS_70]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_69] (rows=106731 width=116)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col4
                                                  Merge Join Operator [MERGEJOIN_445] (rows=18762463 width=116)
                                                    Conds:RS_65._col1=RS_518._col0(Inner),Output:["_col2","_col4"]
                                                  <-Map 31 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_518]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_516] (rows=80000000 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_515] (rows=80000000 width=4)
                                                          predicate:c_customer_sk is not null
                                                          TableScan [TS_41] (rows=80000000 width=4)
                                                            default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk"]
                                                  <-Reducer 19 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_65]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_444] (rows=18762463 width=112)
                                                        Conds:RS_514._col0=RS_480._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_480]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_473] (rows=2609 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_470] (rows=2609 width=8)
                                                              predicate:((d_year) IN (1999, 2000, 2001, 2002) and d_date_sk is not null)
                                                               Please refer to the previous TableScan [TS_3]
                                                      <-Map 34 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_514]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_513] (rows=525327388 width=119)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_512] (rows=525327388 width=118)
                                                              predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_63_date_dim_d_date_sk_min) AND DynamicValue(RS_63_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_63_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_53] (rows=575995635 width=118)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_quantity","ss_sales_price"]
                                                              <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_511]
                                                                  Group By Operator [GBY_510] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_489]
                                                                      Group By Operator [GBY_485] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_481] (rows=2609 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_473]
                            <-Reducer 33 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_551]
                                Filter Operator [FIL_550] (rows=1415625 width=116)
                                  predicate:_col1 is not null
                                  Group By Operator [GBY_549] (rows=1415625 width=116)
                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                  <-Reducer 32 [SIMPLE_EDGE]
                                    SHUFFLE [RS_140]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_139] (rows=80000000 width=116)
                                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col2
                                        Merge Join Operator [MERGEJOIN_449] (rows=550080312 width=116)
                                          Conds:RS_548._col0=RS_519._col0(Inner),Output:["_col1","_col2"]
                                        <-Map 31 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_519]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_516]
                                        <-Map 36 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_548]
                                            PartitionCols:_col0
                                            Select Operator [SEL_547] (rows=550080312 width=115)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_546] (rows=550080312 width=114)
                                                predicate:(ss_customer_sk is not null and ss_customer_sk BETWEEN DynamicValue(RS_178_web_sales_ws_bill_customer_sk_min) AND DynamicValue(RS_178_web_sales_ws_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_178_web_sales_ws_bill_customer_sk_bloom_filter)))
                                                TableScan [TS_129] (rows=575995635 width=114)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                                                <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_545]
                                                    Group By Operator [GBY_544] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Reducer 11 [CUSTOM_SIMPLE_EDGE]
                                                      PARTITION_ONLY_SHUFFLE [RS_415]
                                                        Group By Operator [GBY_414] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_413] (rows=3941102 width=3)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_128]
          <-Reducer 4 [CONTAINS]
            Reduce Output Operator [RS_462]
              Group By Operator [GBY_461] (rows=1 width=112)
                Output:["_col0"],aggregations:["sum(_col0)"]
                Select Operator [SEL_459] (rows=7751875 width=112)
                  Output:["_col0"]
                  Merge Join Operator [MERGEJOIN_458] (rows=7751875 width=94)
                    Conds:RS_87._col0=RS_88._col0(Left Semi),Output:["_col1","_col2"]
                  <-Reducer 3 [SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_87]
                      PartitionCols:_col0
                      Select Operator [SEL_37] (rows=7751875 width=97)
                        Output:["_col0","_col1","_col2"]
                        Merge Join Operator [MERGEJOIN_452] (rows=7751875 width=97)
                          Conds:RS_34._col1=RS_508._col0(Left Semi),Output:["_col0","_col2","_col3"]
                        <-Reducer 17 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_508]
                            PartitionCols:_col0
                             Please refer to the previous Group By Operator [GBY_507]
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_34]
                            PartitionCols:_col1
                            Select Operator [SEL_9] (rows=7751875 width=101)
                              Output:["_col0","_col1","_col2","_col3"]
                              Merge Join Operator [MERGEJOIN_440] (rows=7751875 width=101)
                                Conds:RS_494._col0=RS_474._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                              <-Map 8 [SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_474]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_471]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_494]
                                  PartitionCols:_col0
                                  Select Operator [SEL_493] (rows=285117831 width=127)
                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                    Filter Operator [FIL_492] (rows=285117831 width=127)
                                      predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_7_date_dim_d_date_sk_min) AND DynamicValue(RS_7_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_7_date_dim_d_date_sk_bloom_filter)))
                                      TableScan [TS_0] (rows=287989836 width=127)
                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                      <-Reducer 9 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_491]
                                          Group By Operator [GBY_490] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_486]
                                              Group By Operator [GBY_482] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_475] (rows=50 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_471]
                  <-Reducer 23 [SIMPLE_EDGE]
                    SHUFFLE [RS_88]
                      PartitionCols:_col0
                      Group By Operator [GBY_86] (rows=235937 width=4)
                        Output:["_col0"],keys:_col0
                        Select Operator [SEL_84] (rows=471875 width=4)
                          Output:["_col0"]
                          Filter Operator [FIL_83] (rows=471875 width=228)
                            predicate:(_col1 > _col2)
                            Merge Join Operator [MERGEJOIN_454] (rows=1415625 width=228)
                              Conds:(Inner),Output:["_col0","_col1","_col2"]
                            <-Reducer 22 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_527]
                                 Please refer to the previous Select Operator [SEL_526]
                            <-Reducer 30 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_536]
                                Filter Operator [FIL_535] (rows=1415625 width=116)
                                  predicate:_col1 is not null
                                  Group By Operator [GBY_534] (rows=1415625 width=116)
                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                  <-Reducer 29 [SIMPLE_EDGE]
                                    SHUFFLE [RS_49]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_48] (rows=80000000 width=116)
                                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col2
                                        Merge Join Operator [MERGEJOIN_443] (rows=550080312 width=116)
                                          Conds:RS_533._col0=RS_517._col0(Inner),Output:["_col1","_col2"]
                                        <-Map 31 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_517]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_516]
                                        <-Map 28 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_533]
                                            PartitionCols:_col0
                                            Select Operator [SEL_532] (rows=550080312 width=115)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_531] (rows=550080312 width=114)
                                                predicate:(ss_customer_sk is not null and ss_customer_sk BETWEEN DynamicValue(RS_87_catalog_sales_cs_bill_customer_sk_min) AND DynamicValue(RS_87_catalog_sales_cs_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_87_catalog_sales_cs_bill_customer_sk_bloom_filter)))
                                                TableScan [TS_38] (rows=575995635 width=114)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                                                <-Reducer 7 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_530]
                                                    Group By Operator [GBY_529] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Reducer 3 [CUSTOM_SIMPLE_EDGE]
                                                      PARTITION_ONLY_SHUFFLE [RS_329]
                                                        Group By Operator [GBY_328] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_327] (rows=7751875 width=3)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_37]

