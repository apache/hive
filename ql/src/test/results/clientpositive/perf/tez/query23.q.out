Warning: Shuffle Join MERGEJOIN[589][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 29' is a cross product
Warning: Shuffle Join MERGEJOIN[590][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 30' is a cross product
Warning: Shuffle Join MERGEJOIN[592][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 33' is a cross product
Warning: Shuffle Join MERGEJOIN[593][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 34' is a cross product
PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 19 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Map 15 <- Reducer 22 (BROADCAST_EDGE)
Map 24 <- Reducer 37 (BROADCAST_EDGE)
Map 38 <- Reducer 7 (BROADCAST_EDGE)
Map 44 <- Reducer 14 (BROADCAST_EDGE), Reducer 20 (BROADCAST_EDGE)
Map 45 <- Reducer 13 (BROADCAST_EDGE)
Reducer 10 <- Map 44 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Reducer 34 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 13 <- Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE)
Reducer 17 <- Map 23 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 20 <- Reducer 18 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 24 (SIMPLE_EDGE), Map 36 (SIMPLE_EDGE)
Reducer 26 <- Map 41 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (SIMPLE_EDGE)
Reducer 28 <- Reducer 27 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Reducer 28 (CUSTOM_SIMPLE_EDGE), Reducer 31 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 18 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (CUSTOM_SIMPLE_EDGE), Reducer 40 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Reducer 27 (CUSTOM_SIMPLE_EDGE)
Reducer 32 <- Reducer 27 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Reducer 32 (CUSTOM_SIMPLE_EDGE), Reducer 35 (CUSTOM_SIMPLE_EDGE)
Reducer 34 <- Reducer 33 (CUSTOM_SIMPLE_EDGE), Reducer 43 (CUSTOM_SIMPLE_EDGE)
Reducer 35 <- Reducer 27 (CUSTOM_SIMPLE_EDGE)
Reducer 37 <- Map 36 (CUSTOM_SIMPLE_EDGE)
Reducer 39 <- Map 38 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 40 <- Reducer 39 (SIMPLE_EDGE)
Reducer 42 <- Map 41 (SIMPLE_EDGE), Map 45 (SIMPLE_EDGE)
Reducer 43 <- Reducer 42 (SIMPLE_EDGE)
Reducer 6 <- Union 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_695]
        Limit [LIM_694] (rows=1 width=112)
          Number of rows:100
          Group By Operator [GBY_693] (rows=1 width=112)
            Output:["_col0"],aggregations:["sum(VALUE._col0)"]
          <-Union 5 [CUSTOM_SIMPLE_EDGE]
            <-Reducer 12 [CONTAINS]
              Reduce Output Operator [RS_604]
                Group By Operator [GBY_603] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_601] (rows=1 width=112)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_600] (rows=1 width=116)
                      Conds:RS_248._col2=RS_249._col0(Inner),Output:["_col3","_col4"]
                    <-Reducer 11 [SIMPLE_EDGE]
                      PARTITION_ONLY_SHUFFLE [RS_248]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_588] (rows=155 width=0)
                          Conds:RS_245._col1=RS_638._col0(Inner),Output:["_col2","_col3","_col4"]
                        <-Reducer 18 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_638]
                            PartitionCols:_col0
                            Group By Operator [GBY_635] (rows=2235 width=4)
                              Output:["_col0"],keys:_col1
                              Select Operator [SEL_634] (rows=6548799 width=12)
                                Output:["_col1"]
                                Filter Operator [FIL_633] (rows=6548799 width=12)
                                  predicate:(_col3 > 4L)
                                  Select Operator [SEL_632] (rows=19646398 width=12)
                                    Output:["_col0","_col3"]
                                    Group By Operator [GBY_631] (rows=19646398 width=290)
                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 17 [SIMPLE_EDGE]
                                      SHUFFLE [RS_24]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_23] (rows=19646398 width=290)
                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                          Select Operator [SEL_21] (rows=19646398 width=282)
                                            Output:["_col0","_col1","_col2"]
                                            Merge Join Operator [MERGEJOIN_573] (rows=19646398 width=282)
                                              Conds:RS_18._col1=RS_630._col0(Inner),Output:["_col3","_col5","_col6"]
                                            <-Map 23 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_630]
                                                PartitionCols:_col0
                                                Select Operator [SEL_629] (rows=462000 width=188)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_628] (rows=462000 width=188)
                                                    predicate:i_item_sk is not null
                                                    TableScan [TS_12] (rows=462000 width=188)
                                                      default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_desc"]
                                            <-Reducer 16 [SIMPLE_EDGE]
                                              SHUFFLE [RS_18]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_572] (rows=19646398 width=98)
                                                  Conds:RS_627._col0=RS_619._col0(Inner),Output:["_col1","_col3"]
                                                <-Map 21 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_619]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_618] (rows=2609 width=102)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_617] (rows=2609 width=102)
                                                        predicate:((d_year) IN (1999, 2000, 2001, 2002) and d_date_sk is not null)
                                                        TableScan [TS_9] (rows=73049 width=102)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_year"]
                                                <-Map 15 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_627]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_626] (rows=550076554 width=7)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_625] (rows=550076554 width=7)
                                                        predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_16_date_dim_d_date_sk_min) AND DynamicValue(RS_16_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_16_date_dim_d_date_sk_bloom_filter))) and ss_item_sk is not null and ss_sold_date_sk is not null)
                                                        TableScan [TS_6] (rows=575995635 width=7)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                        <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_624]
                                                            Group By Operator [GBY_623] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_622]
                                                                Group By Operator [GBY_621] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_620] (rows=2609 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_618]
                        <-Reducer 10 [SIMPLE_EDGE]
                          SHUFFLE [RS_245]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_579] (rows=3941102 width=122)
                              Conds:RS_702._col0=RS_609._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Map 8 [SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_609]
                                PartitionCols:_col0
                                Select Operator [SEL_606] (rows=50 width=12)
                                  Output:["_col0"]
                                  Filter Operator [FIL_605] (rows=50 width=12)
                                    predicate:((d_moy = 1) and (d_year = 1999) and d_date_sk is not null)
                                    TableScan [TS_3] (rows=73049 width=12)
                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                            <-Map 44 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_702]
                                PartitionCols:_col0
                                Select Operator [SEL_701] (rows=143930993 width=127)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_700] (rows=143930993 width=127)
                                    predicate:((ws_item_sk BETWEEN DynamicValue(RS_246_item_i_item_sk_min) AND DynamicValue(RS_246_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_246_item_i_item_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_243_date_dim_d_date_sk_min) AND DynamicValue(RS_243_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_243_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_item_sk is not null and ws_sold_date_sk is not null)
                                    TableScan [TS_126] (rows=144002668 width=127)
                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_quantity","ws_list_price"]
                                    <-Reducer 14 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_697]
                                        Group By Operator [GBY_696] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_614]
                                            Group By Operator [GBY_612] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_610] (rows=50 width=4)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_606]
                                    <-Reducer 20 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_699]
                                        Group By Operator [GBY_698] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Reducer 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_643]
                                            Group By Operator [GBY_641] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_639] (rows=2235 width=4)
                                                Output:["_col0"]
                                                 Please refer to the previous Group By Operator [GBY_635]
                    <-Reducer 34 [SIMPLE_EDGE]
                      SHUFFLE [RS_249]
                        PartitionCols:_col0
                        Select Operator [SEL_241] (rows=471875 width=4)
                          Output:["_col0"]
                          Filter Operator [FIL_240] (rows=471875 width=228)
                            predicate:(_col3 > (0.95 * _col1))
                            Merge Join Operator [MERGEJOIN_593] (rows=1415625 width=228)
                              Conds:(Inner),Output:["_col1","_col2","_col3"]
                            <-Reducer 33 [CUSTOM_SIMPLE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_237]
                                Merge Join Operator [MERGEJOIN_592] (rows=1 width=112)
                                  Conds:(Inner),Output:["_col1"]
                                <-Reducer 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_708]
                                    Select Operator [SEL_707] (rows=1 width=8)
                                      Filter Operator [FIL_706] (rows=1 width=8)
                                        predicate:(sq_count_check(_col0) <= 1)
                                        Group By Operator [GBY_705] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count()"]
                                          Select Operator [SEL_704] (rows=1 width=8)
                                            Group By Operator [GBY_703] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_676]
                                                Group By Operator [GBY_672] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_668] (rows=11859 width=116)
                                                    Output:["_col0"]
                                                    Group By Operator [GBY_665] (rows=11859 width=116)
                                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                                    <-Reducer 26 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_51]
                                                        PartitionCols:_col0
                                                        Group By Operator [GBY_50] (rows=11859 width=116)
                                                          Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                                          Select Operator [SEL_48] (rows=18762463 width=4)
                                                            Output:["_col0","_col1"]
                                                            Merge Join Operator [MERGEJOIN_575] (rows=18762463 width=4)
                                                              Conds:RS_45._col1=RS_663._col0(Inner),Output:["_col2","_col3","_col6"]
                                                            <-Map 41 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_663]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_661] (rows=80000000 width=4)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_660] (rows=80000000 width=4)
                                                                    predicate:c_customer_sk is not null
                                                                    TableScan [TS_96] (rows=80000000 width=4)
                                                                      default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk"]
                                                            <-Reducer 25 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_45]
                                                                PartitionCols:_col1
                                                                Merge Join Operator [MERGEJOIN_574] (rows=18762463 width=0)
                                                                  Conds:RS_659._col0=RS_651._col0(Inner),Output:["_col1","_col2","_col3"]
                                                                <-Map 36 [SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_651]
                                                                    PartitionCols:_col0
                                                                    Select Operator [SEL_650] (rows=2609 width=8)
                                                                      Output:["_col0"]
                                                                      Filter Operator [FIL_649] (rows=2609 width=8)
                                                                        predicate:((d_year) IN (1999, 2000, 2001, 2002) and d_date_sk is not null)
                                                                        TableScan [TS_36] (rows=73049 width=8)
                                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                                <-Map 24 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_659]
                                                                    PartitionCols:_col0
                                                                    Select Operator [SEL_658] (rows=525327388 width=118)
                                                                      Output:["_col0","_col1","_col2","_col3"]
                                                                      Filter Operator [FIL_657] (rows=525327388 width=118)
                                                                        predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_43_date_dim_d_date_sk_min) AND DynamicValue(RS_43_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_43_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                                        TableScan [TS_33] (rows=575995635 width=118)
                                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_quantity","ss_sales_price"]
                                                                        <-Reducer 37 [BROADCAST_EDGE] vectorized
                                                                          BROADCAST [RS_656]
                                                                            Group By Operator [GBY_655] (rows=1 width=12)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                            <-Map 36 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_654]
                                                                                Group By Operator [GBY_653] (rows=1 width=12)
                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                  Select Operator [SEL_652] (rows=2609 width=4)
                                                                                    Output:["_col0"]
                                                                                     Please refer to the previous Select Operator [SEL_650]
                                <-Reducer 35 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_710]
                                    Group By Operator [GBY_709] (rows=1 width=112)
                                      Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                    <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_677]
                                        Group By Operator [GBY_673] (rows=1 width=112)
                                          Output:["_col0"],aggregations:["max(_col1)"]
                                          Select Operator [SEL_669] (rows=11859 width=116)
                                            Output:["_col1"]
                                             Please refer to the previous Group By Operator [GBY_665]
                            <-Reducer 43 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_717]
                                Group By Operator [GBY_716] (rows=1415625 width=116)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 42 [SIMPLE_EDGE]
                                  SHUFFLE [RS_231]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_230] (rows=550080312 width=116)
                                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                      Select Operator [SEL_228] (rows=550080312 width=114)
                                        Output:["_col0","_col1"]
                                        Merge Join Operator [MERGEJOIN_586] (rows=550080312 width=114)
                                          Conds:RS_715._col0=RS_664._col0(Inner),Output:["_col1","_col2","_col3"]
                                        <-Map 41 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_664]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_661]
                                        <-Map 45 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_715]
                                            PartitionCols:_col0
                                            Select Operator [SEL_714] (rows=550080312 width=114)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_713] (rows=550080312 width=114)
                                                predicate:((ss_customer_sk BETWEEN DynamicValue(RS_248_web_sales_ws_bill_customer_sk_min) AND DynamicValue(RS_248_web_sales_ws_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_248_web_sales_ws_bill_customer_sk_bloom_filter))) and ss_customer_sk is not null)
                                                TableScan [TS_219] (rows=575995635 width=114)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                                                <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_712]
                                                    Group By Operator [GBY_711] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Reducer 11 [CUSTOM_SIMPLE_EDGE]
                                                      PARTITION_ONLY_SHUFFLE [RS_562]
                                                        Group By Operator [GBY_561] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_560] (rows=155 width=0)
                                                            Output:["_col0"]
                                                             Please refer to the previous Merge Join Operator [MERGEJOIN_588]
            <-Reducer 4 [CONTAINS]
              Reduce Output Operator [RS_599]
                Group By Operator [GBY_598] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_596] (rows=1 width=112)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_595] (rows=1 width=116)
                      Conds:RS_122._col1=RS_123._col0(Inner),Output:["_col3","_col4"]
                    <-Reducer 3 [SIMPLE_EDGE]
                      PARTITION_ONLY_SHUFFLE [RS_122]
                        PartitionCols:_col1
                        Merge Join Operator [MERGEJOIN_587] (rows=304 width=0)
                          Conds:RS_119._col2=RS_636._col0(Inner),Output:["_col1","_col3","_col4"]
                        <-Reducer 18 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_636]
                            PartitionCols:_col0
                             Please refer to the previous Group By Operator [GBY_635]
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_119]
                            PartitionCols:_col2
                            Merge Join Operator [MERGEJOIN_571] (rows=7751875 width=101)
                              Conds:RS_648._col0=RS_607._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Map 8 [SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_607]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_606]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_648]
                                PartitionCols:_col0
                                Select Operator [SEL_647] (rows=285117831 width=127)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_646] (rows=285117831 width=127)
                                    predicate:((cs_item_sk BETWEEN DynamicValue(RS_120_item_i_item_sk_min) AND DynamicValue(RS_120_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_120_item_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_117_date_dim_d_date_sk_min) AND DynamicValue(RS_117_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_117_date_dim_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                    TableScan [TS_0] (rows=287989836 width=127)
                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                    <-Reducer 19 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_645]
                                        Group By Operator [GBY_644] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Reducer 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_642]
                                            Group By Operator [GBY_640] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_637] (rows=2235 width=4)
                                                Output:["_col0"]
                                                 Please refer to the previous Group By Operator [GBY_635]
                                    <-Reducer 9 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_616]
                                        Group By Operator [GBY_615] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_613]
                                            Group By Operator [GBY_611] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_608] (rows=50 width=4)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_606]
                    <-Reducer 30 [SIMPLE_EDGE]
                      SHUFFLE [RS_123]
                        PartitionCols:_col0
                        Select Operator [SEL_115] (rows=471875 width=4)
                          Output:["_col0"]
                          Filter Operator [FIL_114] (rows=471875 width=228)
                            predicate:(_col3 > (0.95 * _col1))
                            Merge Join Operator [MERGEJOIN_590] (rows=1415625 width=228)
                              Conds:(Inner),Output:["_col1","_col2","_col3"]
                            <-Reducer 29 [CUSTOM_SIMPLE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_111]
                                Merge Join Operator [MERGEJOIN_589] (rows=1 width=112)
                                  Conds:(Inner),Output:["_col1"]
                                <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_683]
                                    Select Operator [SEL_682] (rows=1 width=8)
                                      Filter Operator [FIL_681] (rows=1 width=8)
                                        predicate:(sq_count_check(_col0) <= 1)
                                        Group By Operator [GBY_680] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count()"]
                                          Select Operator [SEL_679] (rows=1 width=8)
                                            Group By Operator [GBY_678] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_674]
                                                Group By Operator [GBY_670] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_666] (rows=11859 width=116)
                                                    Output:["_col0"]
                                                     Please refer to the previous Group By Operator [GBY_665]
                                <-Reducer 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_685]
                                    Group By Operator [GBY_684] (rows=1 width=112)
                                      Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                    <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_675]
                                        Group By Operator [GBY_671] (rows=1 width=112)
                                          Output:["_col0"],aggregations:["max(_col1)"]
                                          Select Operator [SEL_667] (rows=11859 width=116)
                                            Output:["_col1"]
                                             Please refer to the previous Group By Operator [GBY_665]
                            <-Reducer 40 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_692]
                                Group By Operator [GBY_691] (rows=1415625 width=116)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 39 [SIMPLE_EDGE]
                                  SHUFFLE [RS_105]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_104] (rows=550080312 width=116)
                                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                      Select Operator [SEL_102] (rows=550080312 width=114)
                                        Output:["_col0","_col1"]
                                        Merge Join Operator [MERGEJOIN_578] (rows=550080312 width=114)
                                          Conds:RS_690._col0=RS_662._col0(Inner),Output:["_col1","_col2","_col3"]
                                        <-Map 41 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_662]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_661]
                                        <-Map 38 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_690]
                                            PartitionCols:_col0
                                            Select Operator [SEL_689] (rows=550080312 width=114)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_688] (rows=550080312 width=114)
                                                predicate:((ss_customer_sk BETWEEN DynamicValue(RS_122_catalog_sales_cs_bill_customer_sk_min) AND DynamicValue(RS_122_catalog_sales_cs_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_122_catalog_sales_cs_bill_customer_sk_bloom_filter))) and ss_customer_sk is not null)
                                                TableScan [TS_93] (rows=575995635 width=114)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                                                <-Reducer 7 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_687]
                                                    Group By Operator [GBY_686] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Reducer 3 [CUSTOM_SIMPLE_EDGE]
                                                      PARTITION_ONLY_SHUFFLE [RS_458]
                                                        Group By Operator [GBY_457] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_456] (rows=304 width=0)
                                                            Output:["_col0"]
                                                             Please refer to the previous Merge Join Operator [MERGEJOIN_587]

