PREHOOK: query: explain
with ssr as
 (select s_store_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  ss_store_sk as store_sk,
            ss_sold_date_sk  as date_sk,
            ss_ext_sales_price as sales_price,
            ss_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from store_sales
    union all
    select sr_store_sk as store_sk,
           sr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           sr_return_amt as return_amt,
           sr_net_loss as net_loss
    from store_returns
   ) salesreturns,
     date_dim,
     store
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  14 days)
       and store_sk = s_store_sk
 group by s_store_id)
 ,
 csr as
 (select cp_catalog_page_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  cs_catalog_page_sk as page_sk,
            cs_sold_date_sk  as date_sk,
            cs_ext_sales_price as sales_price,
            cs_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from catalog_sales
    union all
    select cr_catalog_page_sk as page_sk,
           cr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           cr_return_amount as return_amt,
           cr_net_loss as net_loss
    from catalog_returns
   ) salesreturns,
     date_dim,
     catalog_page
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  14 days)
       and page_sk = cp_catalog_page_sk
 group by cp_catalog_page_id)
 ,
 wsr as
 (select web_site_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  ws_web_site_sk as wsr_web_site_sk,
            ws_sold_date_sk  as date_sk,
            ws_ext_sales_price as sales_price,
            ws_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from web_sales
    union all
    select ws_web_site_sk as wsr_web_site_sk,
           wr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           wr_return_amt as return_amt,
           wr_net_loss as net_loss
    from web_returns left outer join web_sales on
         ( wr_item_sk = ws_item_sk
           and wr_order_number = ws_order_number)
   ) salesreturns,
     date_dim,
     web_site
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  14 days)
       and wsr_web_site_sk = web_site_sk
 group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || s_store_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || cp_catalog_page_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with ssr as
 (select s_store_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  ss_store_sk as store_sk,
            ss_sold_date_sk  as date_sk,
            ss_ext_sales_price as sales_price,
            ss_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from store_sales
    union all
    select sr_store_sk as store_sk,
           sr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           sr_return_amt as return_amt,
           sr_net_loss as net_loss
    from store_returns
   ) salesreturns,
     date_dim,
     store
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  14 days)
       and store_sk = s_store_sk
 group by s_store_id)
 ,
 csr as
 (select cp_catalog_page_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  cs_catalog_page_sk as page_sk,
            cs_sold_date_sk  as date_sk,
            cs_ext_sales_price as sales_price,
            cs_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from catalog_sales
    union all
    select cr_catalog_page_sk as page_sk,
           cr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           cr_return_amount as return_amt,
           cr_net_loss as net_loss
    from catalog_returns
   ) salesreturns,
     date_dim,
     catalog_page
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  14 days)
       and page_sk = cp_catalog_page_sk
 group by cp_catalog_page_id)
 ,
 wsr as
 (select web_site_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  ws_web_site_sk as wsr_web_site_sk,
            ws_sold_date_sk  as date_sk,
            ws_ext_sales_price as sales_price,
            ws_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from web_sales
    union all
    select ws_web_site_sk as wsr_web_site_sk,
           wr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           wr_return_amt as return_amt,
           wr_net_loss as net_loss
    from web_returns left outer join web_sales on
         ( wr_item_sk = ws_item_sk
           and wr_order_number = ws_order_number)
   ) salesreturns,
     date_dim,
     web_site
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  14 days)
       and wsr_web_site_sk = web_site_sk
 group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || s_store_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || cp_catalog_page_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Union 2 (CONTAINS)
Map 18 <- Union 19 (CONTAINS)
Map 20 <- Union 19 (CONTAINS)
Map 22 <- Union 23 (CONTAINS)
Map 9 <- Union 2 (CONTAINS)
Reducer 11 <- Map 10 (SIMPLE_EDGE), Union 19 (SIMPLE_EDGE)
Reducer 12 <- Map 21 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 14 <- Map 10 (SIMPLE_EDGE), Union 23 (SIMPLE_EDGE)
Reducer 15 <- Map 27 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 25 <- Map 24 (SIMPLE_EDGE), Map 26 (SIMPLE_EDGE), Union 23 (CONTAINS)
Reducer 3 <- Map 10 (SIMPLE_EDGE), Union 2 (SIMPLE_EDGE)
Reducer 4 <- Map 17 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 7 <- Union 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_202]
        Limit [LIM_201] (rows=100 width=110)
          Number of rows:100
          Select Operator [SEL_200] (rows=1136898901 width=110)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 7 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_199]
              Select Operator [SEL_198] (rows=1136898901 width=110)
                Output:["_col0","_col1","_col2","_col3","_col4"]
                Group By Operator [GBY_197] (rows=1136898901 width=110)
                  Output:["_col0","_col1","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2
                <-Union 6 [SIMPLE_EDGE]
                  <-Reducer 13 [CONTAINS] vectorized
                    Reduce Output Operator [RS_212]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_211] (rows=2273797803 width=110)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Select Operator [SEL_210] (rows=191657181 width=132)
                          Output:["_col0","_col1","_col2","_col3","_col4"]
                          Group By Operator [GBY_209] (rows=191657181 width=132)
                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                          <-Reducer 12 [SIMPLE_EDGE]
                            SHUFFLE [RS_47]
                              PartitionCols:_col0
                              Group By Operator [GBY_46] (rows=383314363 width=132)
                                Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col2)","sum(_col4)","sum(_col3)","sum(_col5)"],keys:_col9
                                Merge Join Operator [MERGEJOIN_135] (rows=383314363 width=132)
                                  Conds:RS_42._col0=RS_208._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9"]
                                <-Map 21 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_208]
                                    PartitionCols:_col0
                                    Select Operator [SEL_207] (rows=46000 width=460)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_206] (rows=46000 width=460)
                                        predicate:cp_catalog_page_sk is not null
                                        TableScan [TS_36] (rows=46000 width=460)
                                          default@catalog_page,catalog_page,Tbl:COMPLETE,Col:NONE,Output:["cp_catalog_page_sk","cp_catalog_page_id"]
                                <-Reducer 11 [SIMPLE_EDGE]
                                  SHUFFLE [RS_42]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_134] (rows=348467596 width=132)
                                      Conds:Union 19._col1=RS_188._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5"]
                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_188]
                                        PartitionCols:_col0
                                        Select Operator [SEL_186] (rows=8116 width=1119)
                                          Output:["_col0"]
                                          Filter Operator [FIL_185] (rows=8116 width=1119)
                                            predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1998-08-04 00:00:00' AND TIMESTAMP'1998-08-18 00:00:00' and d_date_sk is not null)
                                            TableScan [TS_8] (rows=73049 width=1119)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date"]
                                    <-Union 19 [SIMPLE_EDGE]
                                      <-Map 18 [CONTAINS] vectorized
                                        Reduce Output Operator [RS_222]
                                          PartitionCols:_col1
                                          Select Operator [SEL_221] (rows=287989836 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_220] (rows=287989836 width=135)
                                              predicate:(cs_catalog_page_sk is not null and cs_sold_date_sk is not null)
                                              TableScan [TS_163] (rows=287989836 width=135)
                                                Output:["cs_sold_date_sk","cs_catalog_page_sk","cs_ext_sales_price","cs_net_profit"]
                                      <-Map 20 [CONTAINS] vectorized
                                        Reduce Output Operator [RS_225]
                                          PartitionCols:_col1
                                          Select Operator [SEL_224] (rows=28798881 width=106)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_223] (rows=28798881 width=106)
                                              predicate:(cr_catalog_page_sk is not null and cr_returned_date_sk is not null)
                                              TableScan [TS_168] (rows=28798881 width=106)
                                                Output:["cr_returned_date_sk","cr_catalog_page_sk","cr_return_amount","cr_net_loss"]
                  <-Reducer 16 [CONTAINS] vectorized
                    Reduce Output Operator [RS_219]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_218] (rows=2273797803 width=110)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Select Operator [SEL_217] (rows=182955399 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4"]
                          Group By Operator [GBY_216] (rows=182955399 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                          <-Reducer 15 [SIMPLE_EDGE]
                            SHUFFLE [RS_80]
                              PartitionCols:_col0
                              Group By Operator [GBY_79] (rows=365910798 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col2)","sum(_col4)","sum(_col3)","sum(_col5)"],keys:_col9
                                Merge Join Operator [MERGEJOIN_137] (rows=365910798 width=135)
                                  Conds:RS_75._col0=RS_215._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9"]
                                <-Map 27 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_215]
                                    PartitionCols:_col0
                                    Select Operator [SEL_214] (rows=84 width=1850)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_213] (rows=84 width=1850)
                                        predicate:web_site_sk is not null
                                        TableScan [TS_69] (rows=84 width=1850)
                                          default@web_site,web_site,Tbl:COMPLETE,Col:NONE,Output:["web_site_sk","web_site_id"]
                                <-Reducer 14 [SIMPLE_EDGE]
                                  SHUFFLE [RS_75]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_136] (rows=332646173 width=135)
                                      Conds:Union 23._col1=RS_189._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5"]
                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_189]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_186]
                                    <-Union 23 [SIMPLE_EDGE]
                                      <-Map 22 [CONTAINS] vectorized
                                        Reduce Output Operator [RS_228]
                                          PartitionCols:_col1
                                          Select Operator [SEL_227] (rows=144002668 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_226] (rows=144002668 width=135)
                                              predicate:(ws_sold_date_sk is not null and ws_web_site_sk is not null)
                                              TableScan [TS_173] (rows=144002668 width=135)
                                                Output:["ws_sold_date_sk","ws_web_site_sk","ws_ext_sales_price","ws_net_profit"]
                                      <-Reducer 25 [CONTAINS]
                                        Reduce Output Operator [RS_181]
                                          PartitionCols:_col1
                                          Select Operator [SEL_179] (rows=158402938 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Merge Join Operator [MERGEJOIN_178] (rows=158402938 width=135)
                                              Conds:RS_231._col0, _col2=RS_234._col1, _col2(Inner),Output:["_col1","_col3","_col6","_col7"]
                                            <-Map 24 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_231]
                                                PartitionCols:_col0, _col2
                                                Select Operator [SEL_230] (rows=144002668 width=135)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_229] (rows=144002668 width=135)
                                                    predicate:(ws_item_sk is not null and ws_order_number is not null and ws_web_site_sk is not null)
                                                    TableScan [TS_54] (rows=144002668 width=135)
                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_item_sk","ws_web_site_sk","ws_order_number"]
                                            <-Map 26 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_234]
                                                PartitionCols:_col1, _col2
                                                Select Operator [SEL_233] (rows=14398467 width=92)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  Filter Operator [FIL_232] (rows=14398467 width=92)
                                                    predicate:(wr_item_sk is not null and wr_order_number is not null and wr_returned_date_sk is not null)
                                                    TableScan [TS_57] (rows=14398467 width=92)
                                                      default@web_returns,web_returns,Tbl:COMPLETE,Col:NONE,Output:["wr_returned_date_sk","wr_item_sk","wr_order_number","wr_return_amt","wr_net_loss"]
                  <-Reducer 5 [CONTAINS] vectorized
                    Reduce Output Operator [RS_196]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_195] (rows=2273797803 width=110)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Select Operator [SEL_194] (rows=383320021 width=87)
                          Output:["_col0","_col1","_col2","_col3","_col4"]
                          Group By Operator [GBY_193] (rows=383320021 width=87)
                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                          <-Reducer 4 [SIMPLE_EDGE]
                            SHUFFLE [RS_22]
                              PartitionCols:_col0
                              Group By Operator [GBY_21] (rows=766640042 width=87)
                                Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col2)","sum(_col4)","sum(_col3)","sum(_col5)"],keys:_col9
                                Merge Join Operator [MERGEJOIN_133] (rows=766640042 width=87)
                                  Conds:RS_17._col0=RS_192._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9"]
                                <-Map 17 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_192]
                                    PartitionCols:_col0
                                    Select Operator [SEL_191] (rows=1704 width=1910)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_190] (rows=1704 width=1910)
                                        predicate:s_store_sk is not null
                                        TableScan [TS_11] (rows=1704 width=1910)
                                          default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_id"]
                                <-Reducer 3 [SIMPLE_EDGE]
                                  SHUFFLE [RS_17]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_132] (rows=696945478 width=87)
                                      Conds:Union 2._col1=RS_187._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5"]
                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_187]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_186]
                                    <-Union 2 [SIMPLE_EDGE]
                                      <-Map 1 [CONTAINS] vectorized
                                        Reduce Output Operator [RS_184]
                                          PartitionCols:_col1
                                          Select Operator [SEL_183] (rows=575995635 width=88)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_182] (rows=575995635 width=88)
                                              predicate:(ss_sold_date_sk is not null and ss_store_sk is not null)
                                              TableScan [TS_138] (rows=575995635 width=88)
                                                Output:["ss_sold_date_sk","ss_store_sk","ss_ext_sales_price","ss_net_profit"]
                                      <-Map 9 [CONTAINS] vectorized
                                        Reduce Output Operator [RS_205]
                                          PartitionCols:_col1
                                          Select Operator [SEL_204] (rows=57591150 width=77)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_203] (rows=57591150 width=77)
                                              predicate:(sr_returned_date_sk is not null and sr_store_sk is not null)
                                              TableScan [TS_148] (rows=57591150 width=77)
                                                Output:["sr_returned_date_sk","sr_store_sk","sr_return_amt","sr_net_loss"]

