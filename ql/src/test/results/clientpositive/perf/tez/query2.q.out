PREHOOK: query: explain
with wscs as
 (select sold_date_sk
        ,sales_price
  from (select ws_sold_date_sk sold_date_sk
              ,ws_ext_sales_price sales_price
        from web_sales) x
        union all
       (select cs_sold_date_sk sold_date_sk
              ,cs_ext_sales_price sales_price
        from catalog_sales)),
 wswscs as 
 (select d_week_seq,
        sum(case when (d_day_name='Sunday') then sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then sales_price else null end) sat_sales
 from wscs
     ,date_dim
 where d_date_sk = sold_date_sk
 group by d_week_seq)
 select d_week_seq1
       ,round(sun_sales1/sun_sales2,2)
       ,round(mon_sales1/mon_sales2,2)
       ,round(tue_sales1/tue_sales2,2)
       ,round(wed_sales1/wed_sales2,2)
       ,round(thu_sales1/thu_sales2,2)
       ,round(fri_sales1/fri_sales2,2)
       ,round(sat_sales1/sat_sales2,2)
 from
 (select wswscs.d_week_seq d_week_seq1
        ,sun_sales sun_sales1
        ,mon_sales mon_sales1
        ,tue_sales tue_sales1
        ,wed_sales wed_sales1
        ,thu_sales thu_sales1
        ,fri_sales fri_sales1
        ,sat_sales sat_sales1
  from wswscs,date_dim 
  where date_dim.d_week_seq = wswscs.d_week_seq and
        d_year = 2001) y,
 (select wswscs.d_week_seq d_week_seq2
        ,sun_sales sun_sales2
        ,mon_sales mon_sales2
        ,tue_sales tue_sales2
        ,wed_sales wed_sales2
        ,thu_sales thu_sales2
        ,fri_sales fri_sales2
        ,sat_sales sat_sales2
  from wswscs
      ,date_dim 
  where date_dim.d_week_seq = wswscs.d_week_seq and
        d_year = 2001+1) z
 where d_week_seq1=d_week_seq2-53
 order by d_week_seq1
PREHOOK: type: QUERY
POSTHOOK: query: explain
with wscs as
 (select sold_date_sk
        ,sales_price
  from (select ws_sold_date_sk sold_date_sk
              ,ws_ext_sales_price sales_price
        from web_sales) x
        union all
       (select cs_sold_date_sk sold_date_sk
              ,cs_ext_sales_price sales_price
        from catalog_sales)),
 wswscs as 
 (select d_week_seq,
        sum(case when (d_day_name='Sunday') then sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then sales_price else null end) sat_sales
 from wscs
     ,date_dim
 where d_date_sk = sold_date_sk
 group by d_week_seq)
 select d_week_seq1
       ,round(sun_sales1/sun_sales2,2)
       ,round(mon_sales1/mon_sales2,2)
       ,round(tue_sales1/tue_sales2,2)
       ,round(wed_sales1/wed_sales2,2)
       ,round(thu_sales1/thu_sales2,2)
       ,round(fri_sales1/fri_sales2,2)
       ,round(sat_sales1/sat_sales2,2)
 from
 (select wswscs.d_week_seq d_week_seq1
        ,sun_sales sun_sales1
        ,mon_sales mon_sales1
        ,tue_sales tue_sales1
        ,wed_sales wed_sales1
        ,thu_sales thu_sales1
        ,fri_sales fri_sales1
        ,sat_sales sat_sales1
  from wswscs,date_dim 
  where date_dim.d_week_seq = wswscs.d_week_seq and
        d_year = 2001) y,
 (select wswscs.d_week_seq d_week_seq2
        ,sun_sales sun_sales2
        ,mon_sales mon_sales2
        ,tue_sales tue_sales2
        ,wed_sales wed_sales2
        ,thu_sales thu_sales2
        ,fri_sales fri_sales2
        ,sat_sales sat_sales2
  from wswscs
      ,date_dim 
  where date_dim.d_week_seq = wswscs.d_week_seq and
        d_year = 2001+1) z
 where d_week_seq1=d_week_seq2-53
 order by d_week_seq1
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 10 (BROADCAST_EDGE), Union 2 (CONTAINS)
Map 16 <- Reducer 14 (BROADCAST_EDGE), Union 17 (CONTAINS)
Map 18 <- Reducer 14 (BROADCAST_EDGE), Union 17 (CONTAINS)
Map 8 <- Reducer 10 (BROADCAST_EDGE), Union 2 (CONTAINS)
Reducer 10 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Map 9 (SIMPLE_EDGE), Union 17 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Map 15 (SIMPLE_EDGE), Reducer 12 (ONE_TO_ONE_EDGE)
Reducer 14 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 9 (SIMPLE_EDGE), Union 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 15 (SIMPLE_EDGE), Reducer 4 (ONE_TO_ONE_EDGE)
Reducer 6 <- Reducer 13 (SIMPLE_EDGE), Reducer 5 (ONE_TO_ONE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_195]
        Select Operator [SEL_194] (rows=287491028 width=135)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
        <-Reducer 6 [SIMPLE_EDGE]
          SHUFFLE [RS_58]
            Select Operator [SEL_57] (rows=287491028 width=135)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
              Merge Join Operator [MERGEJOIN_147] (rows=287491028 width=135)
                Conds:RS_54._col0=RS_55.(_col0 - 53)(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
              <-Reducer 13 [SIMPLE_EDGE]
                SHUFFLE [RS_55]
                  PartitionCols:(_col0 - 53)
                  Merge Join Operator [MERGEJOIN_146] (rows=261355475 width=135)
                    Conds:RS_193._col0=RS_191._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                  <-Map 15 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_191]
                      PartitionCols:_col0
                      Select Operator [SEL_189] (rows=36524 width=1119)
                        Output:["_col0"]
                        Filter Operator [FIL_187] (rows=36524 width=1119)
                          predicate:((d_year = 2002) and d_week_seq is not null)
                          TableScan [TS_20] (rows=73049 width=1119)
                            default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_week_seq","d_year"]
                  <-Reducer 12 [ONE_TO_ONE_EDGE] vectorized
                    FORWARD [RS_193]
                      PartitionCols:_col0
                      Group By Operator [GBY_192] (rows=237595882 width=135)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)","sum(VALUE._col6)"],keys:KEY._col0
                      <-Reducer 11 [SIMPLE_EDGE]
                        SHUFFLE [RS_44]
                          PartitionCols:_col0
                          Group By Operator [GBY_43] (rows=475191764 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)","sum(_col6)","sum(_col7)"],keys:_col0
                            Select Operator [SEL_41] (rows=475191764 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                              Merge Join Operator [MERGEJOIN_145] (rows=475191764 width=135)
                                Conds:Union 17._col0=RS_172._col0(Inner),Output:["_col1","_col3","_col4"]
                              <-Map 9 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_172]
                                  PartitionCols:_col0
                                  Select Operator [SEL_169] (rows=73049 width=1119)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_168] (rows=73049 width=1119)
                                      predicate:(d_date_sk is not null and d_week_seq is not null)
                                      TableScan [TS_8] (rows=73049 width=1119)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_week_seq","d_day_name"]
                              <-Union 17 [SIMPLE_EDGE]
                                <-Map 16 [CONTAINS] vectorized
                                  Reduce Output Operator [RS_204]
                                    PartitionCols:_col0
                                    Select Operator [SEL_203] (rows=144002668 width=135)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_202] (rows=144002668 width=135)
                                        predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_39_date_dim_d_date_sk_min) AND DynamicValue(RS_39_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_39_date_dim_d_date_sk_bloom_filter))) and ws_sold_date_sk is not null)
                                        TableScan [TS_158] (rows=144002668 width=135)
                                          Output:["ws_sold_date_sk","ws_ext_sales_price"]
                                        <-Reducer 14 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_200]
                                            Group By Operator [GBY_199] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_177]
                                                Group By Operator [GBY_175] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_173] (rows=73049 width=1119)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_169]
                                <-Map 18 [CONTAINS] vectorized
                                  Reduce Output Operator [RS_207]
                                    PartitionCols:_col0
                                    Select Operator [SEL_206] (rows=287989836 width=135)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_205] (rows=287989836 width=135)
                                        predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_39_date_dim_d_date_sk_min) AND DynamicValue(RS_39_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_39_date_dim_d_date_sk_bloom_filter))) and cs_sold_date_sk is not null)
                                        TableScan [TS_163] (rows=287989836 width=135)
                                          Output:["cs_sold_date_sk","cs_ext_sales_price"]
                                        <-Reducer 14 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_201]
                                             Please refer to the previous Group By Operator [GBY_199]
              <-Reducer 5 [ONE_TO_ONE_EDGE]
                FORWARD [RS_54]
                  PartitionCols:_col0
                  Merge Join Operator [MERGEJOIN_144] (rows=261355475 width=135)
                    Conds:RS_185._col0=RS_190._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                  <-Map 15 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_190]
                      PartitionCols:_col0
                      Select Operator [SEL_188] (rows=36524 width=1119)
                        Output:["_col0"]
                        Filter Operator [FIL_186] (rows=36524 width=1119)
                          predicate:((d_year = 2001) and d_week_seq is not null)
                           Please refer to the previous TableScan [TS_20]
                  <-Reducer 4 [ONE_TO_ONE_EDGE] vectorized
                    FORWARD [RS_185]
                      PartitionCols:_col0
                      Group By Operator [GBY_184] (rows=237595882 width=135)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)","sum(VALUE._col6)"],keys:KEY._col0
                      <-Reducer 3 [SIMPLE_EDGE]
                        SHUFFLE [RS_17]
                          PartitionCols:_col0
                          Group By Operator [GBY_16] (rows=475191764 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)","sum(_col6)","sum(_col7)"],keys:_col0
                            Select Operator [SEL_14] (rows=475191764 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                              Merge Join Operator [MERGEJOIN_143] (rows=475191764 width=135)
                                Conds:Union 2._col0=RS_170._col0(Inner),Output:["_col1","_col3","_col4"]
                              <-Map 9 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_170]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_169]
                              <-Union 2 [SIMPLE_EDGE]
                                <-Map 1 [CONTAINS] vectorized
                                  Reduce Output Operator [RS_183]
                                    PartitionCols:_col0
                                    Select Operator [SEL_182] (rows=144002668 width=135)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_181] (rows=144002668 width=135)
                                        predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_12_date_dim_d_date_sk_min) AND DynamicValue(RS_12_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_12_date_dim_d_date_sk_bloom_filter))) and ws_sold_date_sk is not null)
                                        TableScan [TS_148] (rows=144002668 width=135)
                                          Output:["ws_sold_date_sk","ws_ext_sales_price"]
                                        <-Reducer 10 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_179]
                                            Group By Operator [GBY_178] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_176]
                                                Group By Operator [GBY_174] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_171] (rows=73049 width=1119)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_169]
                                <-Map 8 [CONTAINS] vectorized
                                  Reduce Output Operator [RS_198]
                                    PartitionCols:_col0
                                    Select Operator [SEL_197] (rows=287989836 width=135)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_196] (rows=287989836 width=135)
                                        predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_12_date_dim_d_date_sk_min) AND DynamicValue(RS_12_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_12_date_dim_d_date_sk_bloom_filter))) and cs_sold_date_sk is not null)
                                        TableScan [TS_153] (rows=287989836 width=135)
                                          Output:["cs_sold_date_sk","cs_ext_sales_price"]
                                        <-Reducer 10 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_180]
                                             Please refer to the previous Group By Operator [GBY_178]

