PREHOOK: query: explain
with wscs as
 (select sold_date_sk
        ,sales_price
  from (select ws_sold_date_sk sold_date_sk
              ,ws_ext_sales_price sales_price
        from web_sales) x
        union all
       (select cs_sold_date_sk sold_date_sk
              ,cs_ext_sales_price sales_price
        from catalog_sales)),
 wswscs as 
 (select d_week_seq,
        sum(case when (d_day_name='Sunday') then sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then sales_price else null end) sat_sales
 from wscs
     ,date_dim
 where d_date_sk = sold_date_sk
 group by d_week_seq)
 select d_week_seq1
       ,round(sun_sales1/sun_sales2,2)
       ,round(mon_sales1/mon_sales2,2)
       ,round(tue_sales1/tue_sales2,2)
       ,round(wed_sales1/wed_sales2,2)
       ,round(thu_sales1/thu_sales2,2)
       ,round(fri_sales1/fri_sales2,2)
       ,round(sat_sales1/sat_sales2,2)
 from
 (select wswscs.d_week_seq d_week_seq1
        ,sun_sales sun_sales1
        ,mon_sales mon_sales1
        ,tue_sales tue_sales1
        ,wed_sales wed_sales1
        ,thu_sales thu_sales1
        ,fri_sales fri_sales1
        ,sat_sales sat_sales1
  from wswscs,date_dim 
  where date_dim.d_week_seq = wswscs.d_week_seq and
        d_year = 2001) y,
 (select wswscs.d_week_seq d_week_seq2
        ,sun_sales sun_sales2
        ,mon_sales mon_sales2
        ,tue_sales tue_sales2
        ,wed_sales wed_sales2
        ,thu_sales thu_sales2
        ,fri_sales fri_sales2
        ,sat_sales sat_sales2
  from wswscs
      ,date_dim 
  where date_dim.d_week_seq = wswscs.d_week_seq and
        d_year = 2001+1) z
 where d_week_seq1=d_week_seq2-53
 order by d_week_seq1
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with wscs as
 (select sold_date_sk
        ,sales_price
  from (select ws_sold_date_sk sold_date_sk
              ,ws_ext_sales_price sales_price
        from web_sales) x
        union all
       (select cs_sold_date_sk sold_date_sk
              ,cs_ext_sales_price sales_price
        from catalog_sales)),
 wswscs as 
 (select d_week_seq,
        sum(case when (d_day_name='Sunday') then sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then sales_price else null end) sat_sales
 from wscs
     ,date_dim
 where d_date_sk = sold_date_sk
 group by d_week_seq)
 select d_week_seq1
       ,round(sun_sales1/sun_sales2,2)
       ,round(mon_sales1/mon_sales2,2)
       ,round(tue_sales1/tue_sales2,2)
       ,round(wed_sales1/wed_sales2,2)
       ,round(thu_sales1/thu_sales2,2)
       ,round(fri_sales1/fri_sales2,2)
       ,round(sat_sales1/sat_sales2,2)
 from
 (select wswscs.d_week_seq d_week_seq1
        ,sun_sales sun_sales1
        ,mon_sales mon_sales1
        ,tue_sales tue_sales1
        ,wed_sales wed_sales1
        ,thu_sales thu_sales1
        ,fri_sales fri_sales1
        ,sat_sales sat_sales1
  from wswscs,date_dim 
  where date_dim.d_week_seq = wswscs.d_week_seq and
        d_year = 2001) y,
 (select wswscs.d_week_seq d_week_seq2
        ,sun_sales sun_sales2
        ,mon_sales mon_sales2
        ,tue_sales tue_sales2
        ,wed_sales wed_sales2
        ,thu_sales thu_sales2
        ,fri_sales fri_sales2
        ,sat_sales sat_sales2
  from wswscs
      ,date_dim 
  where date_dim.d_week_seq = wswscs.d_week_seq and
        d_year = 2001+1) z
 where d_week_seq1=d_week_seq2-53
 order by d_week_seq1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE), Union 2 (CONTAINS)
Map 15 <- Reducer 13 (BROADCAST_EDGE), Union 16 (CONTAINS)
Map 17 <- Reducer 13 (BROADCAST_EDGE), Union 16 (CONTAINS)
Map 7 <- Reducer 9 (BROADCAST_EDGE), Union 2 (CONTAINS)
Reducer 10 <- Map 8 (SIMPLE_EDGE), Union 16 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Map 14 (SIMPLE_EDGE), Reducer 11 (ONE_TO_ONE_EDGE)
Reducer 13 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 8 (SIMPLE_EDGE), Union 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 14 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE), Reducer 4 (ONE_TO_ONE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_189]
        Select Operator [SEL_188] (rows=574982057 width=135)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
        <-Reducer 5 [SIMPLE_EDGE]
          SHUFFLE [RS_55]
            Select Operator [SEL_54] (rows=574982057 width=135)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
              Merge Join Operator [MERGEJOIN_141] (rows=574982057 width=135)
                Conds:RS_179._col0=RS_186._col0(Inner),RS_179._col0=RS_52.(_col0 - 53)(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
              <-Map 14 [SIMPLE_EDGE] vectorized
                SHUFFLE [RS_186]
                  PartitionCols:_col0
                  Select Operator [SEL_184] (rows=36524 width=1119)
                    Output:["_col0"]
                    Filter Operator [FIL_182] (rows=36524 width=1119)
                      predicate:((d_year = 2001) and d_week_seq is not null)
                      TableScan [TS_20] (rows=73049 width=1119)
                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_week_seq","d_year"]
              <-Reducer 12 [SIMPLE_EDGE]
                SHUFFLE [RS_52]
                  PartitionCols:(_col0 - 53)
                  Merge Join Operator [MERGEJOIN_140] (rows=261355475 width=135)
                    Conds:RS_181._col0=RS_187._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                  <-Map 14 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_187]
                      PartitionCols:_col0
                      Select Operator [SEL_185] (rows=36524 width=1119)
                        Output:["_col0"]
                        Filter Operator [FIL_183] (rows=36524 width=1119)
                          predicate:((d_year = 2002) and d_week_seq is not null)
                           Please refer to the previous TableScan [TS_20]
                  <-Reducer 11 [ONE_TO_ONE_EDGE] vectorized
                    FORWARD [RS_181]
                      PartitionCols:_col0
                      Group By Operator [GBY_180] (rows=237595882 width=135)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)","sum(VALUE._col6)"],keys:KEY._col0
                      <-Reducer 10 [SIMPLE_EDGE]
                        SHUFFLE [RS_40]
                          PartitionCols:_col0
                          Group By Operator [GBY_39] (rows=475191764 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)","sum(_col6)","sum(_col7)"],keys:_col0
                            Select Operator [SEL_37] (rows=475191764 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                              Merge Join Operator [MERGEJOIN_139] (rows=475191764 width=135)
                                Conds:Union 16._col0=RS_166._col0(Inner),Output:["_col1","_col3","_col4"]
                              <-Map 8 [SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_166]
                                  PartitionCols:_col0
                                  Select Operator [SEL_163] (rows=73049 width=1119)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_162] (rows=73049 width=1119)
                                      predicate:(d_date_sk is not null and d_week_seq is not null)
                                      TableScan [TS_8] (rows=73049 width=1119)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_week_seq","d_day_name"]
                              <-Union 16 [SIMPLE_EDGE]
                                <-Map 15 [CONTAINS] vectorized
                                  Reduce Output Operator [RS_198]
                                    PartitionCols:_col0
                                    Select Operator [SEL_197] (rows=144002668 width=135)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_196] (rows=144002668 width=135)
                                        predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_35_date_dim_d_date_sk_min) AND DynamicValue(RS_35_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_35_date_dim_d_date_sk_bloom_filter))) and ws_sold_date_sk is not null)
                                        TableScan [TS_152] (rows=144002668 width=135)
                                          Output:["ws_sold_date_sk","ws_ext_sales_price"]
                                        <-Reducer 13 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_194]
                                            Group By Operator [GBY_193] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_171]
                                                Group By Operator [GBY_169] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_167] (rows=73049 width=1119)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_163]
                                <-Map 17 [CONTAINS] vectorized
                                  Reduce Output Operator [RS_201]
                                    PartitionCols:_col0
                                    Select Operator [SEL_200] (rows=287989836 width=135)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_199] (rows=287989836 width=135)
                                        predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_35_date_dim_d_date_sk_min) AND DynamicValue(RS_35_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_35_date_dim_d_date_sk_bloom_filter))) and cs_sold_date_sk is not null)
                                        TableScan [TS_157] (rows=287989836 width=135)
                                          Output:["cs_sold_date_sk","cs_ext_sales_price"]
                                        <-Reducer 13 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_195]
                                             Please refer to the previous Group By Operator [GBY_193]
              <-Reducer 4 [ONE_TO_ONE_EDGE] vectorized
                FORWARD [RS_179]
                  PartitionCols:_col0
                  Group By Operator [GBY_178] (rows=237595882 width=135)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)","sum(VALUE._col6)"],keys:KEY._col0
                  <-Reducer 3 [SIMPLE_EDGE]
                    SHUFFLE [RS_17]
                      PartitionCols:_col0
                      Group By Operator [GBY_16] (rows=475191764 width=135)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)","sum(_col6)","sum(_col7)"],keys:_col0
                        Select Operator [SEL_14] (rows=475191764 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                          Merge Join Operator [MERGEJOIN_138] (rows=475191764 width=135)
                            Conds:Union 2._col0=RS_164._col0(Inner),Output:["_col1","_col3","_col4"]
                          <-Map 8 [SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_164]
                              PartitionCols:_col0
                               Please refer to the previous Select Operator [SEL_163]
                          <-Union 2 [SIMPLE_EDGE]
                            <-Map 1 [CONTAINS] vectorized
                              Reduce Output Operator [RS_177]
                                PartitionCols:_col0
                                Select Operator [SEL_176] (rows=144002668 width=135)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_175] (rows=144002668 width=135)
                                    predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_12_date_dim_d_date_sk_min) AND DynamicValue(RS_12_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_12_date_dim_d_date_sk_bloom_filter))) and ws_sold_date_sk is not null)
                                    TableScan [TS_142] (rows=144002668 width=135)
                                      Output:["ws_sold_date_sk","ws_ext_sales_price"]
                                    <-Reducer 9 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_173]
                                        Group By Operator [GBY_172] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_170]
                                            Group By Operator [GBY_168] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_165] (rows=73049 width=1119)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_163]
                            <-Map 7 [CONTAINS] vectorized
                              Reduce Output Operator [RS_192]
                                PartitionCols:_col0
                                Select Operator [SEL_191] (rows=287989836 width=135)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_190] (rows=287989836 width=135)
                                    predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_12_date_dim_d_date_sk_min) AND DynamicValue(RS_12_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_12_date_dim_d_date_sk_bloom_filter))) and cs_sold_date_sk is not null)
                                    TableScan [TS_147] (rows=287989836 width=135)
                                      Output:["cs_sold_date_sk","cs_ext_sales_price"]
                                    <-Reducer 9 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_174]
                                         Please refer to the previous Group By Operator [GBY_172]

