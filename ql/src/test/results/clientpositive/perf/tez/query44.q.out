Warning: Shuffle Join MERGEJOIN[151][tables = [$hdt$_2, $hdt$_3]] in Stage 'Reducer 9' is a cross product
Warning: Shuffle Join MERGEJOIN[152][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 10' is a cross product
PREHOOK: query: explain
select  asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing
from(select *
     from (select item_sk,rank() over (order by rank_col asc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col 
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V1)V11
     where rnk  < 11) asceding,
    (select *
     from (select item_sk,rank() over (order by rank_col desc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V2)V21
     where rnk  < 11) descending,
item i1,
item i2
where asceding.rnk = descending.rnk 
  and i1.i_item_sk=asceding.item_sk
  and i2.i_item_sk=descending.item_sk
order by asceding.rnk
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing
from(select *
     from (select item_sk,rank() over (order by rank_col asc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col 
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V1)V11
     where rnk  < 11) asceding,
    (select *
     from (select item_sk,rank() over (order by rank_col desc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V2)V21
     where rnk  < 11) descending,
item i1,
item i2
where asceding.rnk = descending.rnk 
  and i1.i_item_sk=asceding.item_sk
  and i2.i_item_sk=descending.item_sk
order by asceding.rnk
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 16 (CUSTOM_SIMPLE_EDGE), Reducer 9 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 10 (SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 1 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 7 <- Map 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Reducer 14 (CUSTOM_SIMPLE_EDGE), Reducer 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_203]
        Limit [LIM_202] (rows=100 width=218)
          Number of rows:100
          Select Operator [SEL_201] (rows=6951 width=218)
            Output:["_col0","_col1","_col2"]
          <-Reducer 3 [SIMPLE_EDGE]
            SHUFFLE [RS_109]
              Select Operator [SEL_108] (rows=6951 width=218)
                Output:["_col0","_col1","_col2"]
                Merge Join Operator [MERGEJOIN_157] (rows=6951 width=218)
                  Conds:RS_105._col3=RS_106._col3(Inner),Output:["_col1","_col3","_col5"]
                <-Reducer 2 [SIMPLE_EDGE]
                  SHUFFLE [RS_105]
                    PartitionCols:_col3
                    Merge Join Operator [MERGEJOIN_153] (rows=6951 width=111)
                      Conds:RS_160._col0=RS_195._col0(Inner),Output:["_col1","_col3"]
                    <-Map 1 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_160]
                        PartitionCols:_col0
                        Select Operator [SEL_159] (rows=462000 width=111)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_158] (rows=462000 width=111)
                            predicate:i_item_sk is not null
                            TableScan [TS_0] (rows=462000 width=111)
                              default@item,i1,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_product_name"]
                    <-Reducer 11 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_195]
                        PartitionCols:_col0
                        Select Operator [SEL_194] (rows=6951 width=8)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_193] (rows=6951 width=116)
                            predicate:((rank_window_0 < 11) and _col2 is not null)
                            PTF Operator [PTF_192] (rows=20854 width=116)
                              Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 ASC NULLS LAST","partition by:":"0"}]
                              Select Operator [SEL_191] (rows=20854 width=116)
                                Output:["_col2","_col3"]
                              <-Reducer 10 [SIMPLE_EDGE]
                                SHUFFLE [RS_42]
                                  PartitionCols:0
                                  Filter Operator [FIL_41] (rows=20854 width=228)
                                    predicate:(_col3 > _col1)
                                    Merge Join Operator [MERGEJOIN_152] (rows=62562 width=228)
                                      Conds:(Inner),Output:["_col1","_col2","_col3"]
                                    <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_190]
                                        Select Operator [SEL_189] (rows=62562 width=116)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_188] (rows=62562 width=124)
                                            predicate:(_col1 is not null and _col2 is not null)
                                            Group By Operator [GBY_187] (rows=62562 width=124)
                                              Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                                            <-Map 15 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_186]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_185] (rows=3199976 width=124)
                                                  Output:["_col0","_col1","_col2"],aggregations:["sum(ss_net_profit)","count(ss_net_profit)"],keys:ss_item_sk
                                                  Select Operator [SEL_184] (rows=6399952 width=114)
                                                    Output:["ss_item_sk","ss_net_profit"]
                                                    Filter Operator [FIL_183] (rows=6399952 width=114)
                                                      predicate:(ss_store_sk = 410)
                                                      TableScan [TS_27] (rows=575995635 width=114)
                                                        default@store_sales,ss1,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk","ss_store_sk","ss_net_profit"]
                                    <-Reducer 9 [CUSTOM_SIMPLE_EDGE]
                                      PARTITION_ONLY_SHUFFLE [RS_38]
                                        Merge Join Operator [MERGEJOIN_151] (rows=1 width=112)
                                          Conds:(Inner),Output:["_col1"]
                                        <-Reducer 14 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_182]
                                            Select Operator [SEL_181] (rows=1 width=112)
                                              Output:["_col0"]
                                              Filter Operator [FIL_180] (rows=1 width=120)
                                                predicate:(_col1 is not null and _col2 is not null)
                                                Select Operator [SEL_179] (rows=1 width=120)
                                                  Output:["_col1","_col2"]
                                                  Group By Operator [GBY_178] (rows=1 width=124)
                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                                                  <-Map 13 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_177]
                                                      PartitionCols:_col0
                                                      Group By Operator [GBY_176] (rows=258 width=124)
                                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","count(_col1)"],keys:true
                                                        Select Operator [SEL_175] (rows=287946 width=114)
                                                          Output:["_col1"]
                                                          Filter Operator [FIL_174] (rows=287946 width=114)
                                                            predicate:(ss_hdemo_sk is null and (ss_store_sk = 410))
                                                            TableScan [TS_18] (rows=575995635 width=114)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_hdemo_sk","ss_store_sk","ss_net_profit"]
                                        <-Reducer 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_173]
                                            Select Operator [SEL_172] (rows=1 width=8)
                                              Filter Operator [FIL_171] (rows=1 width=8)
                                                predicate:(sq_count_check(_col0) <= 1)
                                                Group By Operator [GBY_170] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                <-Reducer 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_169]
                                                    Group By Operator [GBY_168] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count()"]
                                                      Select Operator [SEL_167] (rows=1 width=4)
                                                        Group By Operator [GBY_166] (rows=1 width=4)
                                                          Output:["_col0"],keys:KEY._col0
                                                        <-Map 6 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_165]
                                                            PartitionCols:_col0
                                                            Group By Operator [GBY_164] (rows=18 width=4)
                                                              Output:["_col0"],keys:true
                                                              Select Operator [SEL_163] (rows=287946 width=7)
                                                                Filter Operator [FIL_162] (rows=287946 width=7)
                                                                  predicate:(ss_hdemo_sk is null and (ss_store_sk = 410))
                                                                  TableScan [TS_3] (rows=575995635 width=7)
                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_hdemo_sk","ss_store_sk"]
                <-Reducer 5 [SIMPLE_EDGE]
                  SHUFFLE [RS_106]
                    PartitionCols:_col3
                    Merge Join Operator [MERGEJOIN_156] (rows=6951 width=111)
                      Conds:RS_161._col0=RS_200._col0(Inner),Output:["_col1","_col3"]
                    <-Map 1 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_161]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_159]
                    <-Reducer 12 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_200]
                        PartitionCols:_col0
                        Select Operator [SEL_199] (rows=6951 width=8)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_198] (rows=6951 width=116)
                            predicate:((rank_window_0 < 11) and _col2 is not null)
                            PTF Operator [PTF_197] (rows=20854 width=116)
                              Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 DESC NULLS LAST","partition by:":"0"}]
                              Select Operator [SEL_196] (rows=20854 width=116)
                                Output:["_col2","_col3"]
                              <-Reducer 10 [SIMPLE_EDGE]
                                SHUFFLE [RS_91]
                                  PartitionCols:0
                                   Please refer to the previous Filter Operator [FIL_41]

