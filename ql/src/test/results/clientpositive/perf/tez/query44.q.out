Warning: Shuffle Join MERGEJOIN[131][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 9' is a cross product
PREHOOK: query: explain
select  asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing
from(select *
     from (select item_sk,rank() over (order by rank_col asc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col 
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V1)V11
     where rnk  < 11) asceding,
    (select *
     from (select item_sk,rank() over (order by rank_col desc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V2)V21
     where rnk  < 11) descending,
item i1,
item i2
where asceding.rnk = descending.rnk 
  and i1.i_item_sk=asceding.item_sk
  and i2.i_item_sk=descending.item_sk
order by asceding.rnk
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing
from(select *
     from (select item_sk,rank() over (order by rank_col asc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col 
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V1)V11
     where rnk  < 11) asceding,
    (select *
     from (select item_sk,rank() over (order by rank_col desc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V2)V21
     where rnk  < 11) descending,
item i1,
item i2
where asceding.rnk = descending.rnk 
  and i1.i_item_sk=asceding.item_sk
  and i2.i_item_sk=descending.item_sk
order by asceding.rnk
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 9 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 1 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 7 <- Map 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Reducer 13 (CUSTOM_SIMPLE_EDGE), Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_178]
        Limit [LIM_177] (rows=100 width=185)
          Number of rows:100
          Select Operator [SEL_176] (rows=1393898919384048 width=185)
            Output:["_col0","_col1","_col2"]
          <-Reducer 3 [SIMPLE_EDGE]
            SHUFFLE [RS_101]
              Select Operator [SEL_100] (rows=1393898919384048 width=185)
                Output:["_col0","_col1","_col2"]
                Merge Join Operator [MERGEJOIN_135] (rows=1393898919384048 width=185)
                  Conds:RS_97._col3=RS_98._col3(Inner),Output:["_col1","_col3","_col5"]
                <-Reducer 2 [SIMPLE_EDGE]
                  SHUFFLE [RS_97]
                    PartitionCols:_col3
                    Merge Join Operator [MERGEJOIN_132] (rows=1267180808338276 width=185)
                      Conds:RS_138._col0=RS_170._col0(Inner),Output:["_col1","_col3"]
                    <-Map 1 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_138]
                        PartitionCols:_col0
                        Select Operator [SEL_137] (rows=462000 width=1436)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_136] (rows=462000 width=1436)
                            predicate:i_item_sk is not null
                            TableScan [TS_0] (rows=462000 width=1436)
                              default@item,i1,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_product_name"]
                    <-Reducer 10 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_170]
                        PartitionCols:_col0
                        Select Operator [SEL_169] (rows=1151982528066248 width=185)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_168] (rows=1151982528066248 width=185)
                            predicate:((rank_window_0 < 11) and _col2 is not null)
                            PTF Operator [PTF_167] (rows=3455947584198744 width=185)
                              Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 ASC NULLS FIRST","partition by:":"0"}]
                              Select Operator [SEL_166] (rows=3455947584198744 width=185)
                                Output:["_col2","_col3"]
                              <-Reducer 9 [SIMPLE_EDGE]
                                SHUFFLE [RS_38]
                                  PartitionCols:0
                                  Filter Operator [FIL_37] (rows=3455947584198744 width=185)
                                    predicate:(_col3 > (0.9 * _col1))
                                    Merge Join Operator [MERGEJOIN_131] (rows=10367842752596232 width=185)
                                      Conds:(Inner),(Inner),Output:["_col1","_col2","_col3"]
                                    <-Reducer 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_158]
                                        Select Operator [SEL_157] (rows=71999454 width=88)
                                          Output:["_col0"]
                                          Group By Operator [GBY_156] (rows=71999454 width=88)
                                            Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                                          <-Map 12 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_155]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_154] (rows=143998908 width=88)
                                                Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","count(_col1)"],keys:410
                                                Select Operator [SEL_153] (rows=143998908 width=88)
                                                  Output:["_col1"]
                                                  Filter Operator [FIL_152] (rows=143998908 width=88)
                                                    predicate:((ss_store_sk = 410) and ss_hdemo_sk is null)
                                                    TableScan [TS_18] (rows=575995635 width=88)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_hdemo_sk","ss_store_sk","ss_net_profit"]
                                    <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_165]
                                        Select Operator [SEL_164] (rows=143998908 width=88)
                                          Output:["_col0","_col1"]
                                          Group By Operator [GBY_163] (rows=143998908 width=88)
                                            Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                                          <-Map 14 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_162]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_161] (rows=287997817 width=88)
                                                Output:["_col0","_col1","_col2"],aggregations:["sum(ss_net_profit)","count(ss_net_profit)"],keys:ss_item_sk
                                                Select Operator [SEL_160] (rows=287997817 width=88)
                                                  Output:["ss_item_sk","ss_net_profit"]
                                                  Filter Operator [FIL_159] (rows=287997817 width=88)
                                                    predicate:(ss_store_sk = 410)
                                                    TableScan [TS_26] (rows=575995635 width=88)
                                                      default@store_sales,ss1,Tbl:COMPLETE,Col:NONE,Output:["ss_item_sk","ss_store_sk","ss_net_profit"]
                                    <-Reducer 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_151]
                                        Select Operator [SEL_150] (rows=1 width=8)
                                          Filter Operator [FIL_149] (rows=1 width=8)
                                            predicate:(sq_count_check(_col0) <= 1)
                                            Group By Operator [GBY_148] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Reducer 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_147]
                                                Group By Operator [GBY_146] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count()"]
                                                  Select Operator [SEL_145] (rows=71999454 width=88)
                                                    Group By Operator [GBY_144] (rows=71999454 width=88)
                                                      Output:["_col0"],keys:KEY._col0
                                                    <-Map 6 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_143]
                                                        PartitionCols:_col0
                                                        Group By Operator [GBY_142] (rows=143998908 width=88)
                                                          Output:["_col0"],keys:410
                                                          Select Operator [SEL_141] (rows=143998908 width=88)
                                                            Filter Operator [FIL_140] (rows=143998908 width=88)
                                                              predicate:((ss_store_sk = 410) and ss_hdemo_sk is null)
                                                              TableScan [TS_3] (rows=575995635 width=88)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_hdemo_sk","ss_store_sk"]
                <-Reducer 5 [SIMPLE_EDGE]
                  SHUFFLE [RS_98]
                    PartitionCols:_col3
                    Merge Join Operator [MERGEJOIN_134] (rows=1267180808338276 width=185)
                      Conds:RS_139._col0=RS_175._col0(Inner),Output:["_col1","_col3"]
                    <-Map 1 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_139]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_137]
                    <-Reducer 11 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_175]
                        PartitionCols:_col0
                        Select Operator [SEL_174] (rows=1151982528066248 width=185)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_173] (rows=1151982528066248 width=185)
                            predicate:((rank_window_0 < 11) and _col2 is not null)
                            PTF Operator [PTF_172] (rows=3455947584198744 width=185)
                              Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 DESC NULLS LAST","partition by:":"0"}]
                              Select Operator [SEL_171] (rows=3455947584198744 width=185)
                                Output:["_col2","_col3"]
                              <-Reducer 9 [SIMPLE_EDGE]
                                SHUFFLE [RS_83]
                                  PartitionCols:0
                                   Please refer to the previous Filter Operator [FIL_37]

