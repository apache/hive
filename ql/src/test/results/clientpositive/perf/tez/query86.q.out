PREHOOK: query: explain
select   
    sum(ws_net_paid) as total_sum
   ,i_category
   ,i_class
   ,grouping(i_category)+grouping(i_class) as lochierarchy
   ,rank() over (
 	partition by grouping(i_category)+grouping(i_class),
 	case when grouping(i_class) = 0 then i_category end 
 	order by sum(ws_net_paid) desc) as rank_within_parent
 from
    web_sales
   ,date_dim       d1
   ,item
 where
    d1.d_month_seq between 1212 and 1212+11
 and d1.d_date_sk = ws_sold_date_sk
 and i_item_sk  = ws_item_sk
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc,
   case when lochierarchy = 0 then i_category end,
   rank_within_parent
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select   
    sum(ws_net_paid) as total_sum
   ,i_category
   ,i_class
   ,grouping(i_category)+grouping(i_class) as lochierarchy
   ,rank() over (
 	partition by grouping(i_category)+grouping(i_class),
 	case when grouping(i_class) = 0 then i_category end 
 	order by sum(ws_net_paid) desc) as rank_within_parent
 from
    web_sales
   ,date_dim       d1
   ,item
 where
    d1.d_month_seq between 1212 and 1212+11
 and d1.d_date_sk = ws_sold_date_sk
 and i_item_sk  = ws_item_sk
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc,
   case when lochierarchy = 0 then i_category end,
   rank_within_parent
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 6 <- Reducer 9 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 7 <- Map 6 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_87]
        Limit [LIM_86] (rows=100 width=490)
          Number of rows:100
          Select Operator [SEL_85] (rows=3060 width=490)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_84]
              Select Operator [SEL_83] (rows=3060 width=490)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Top N Key Operator [TNK_82] (rows=3060 width=302)
                  keys:(grouping(_col3, 1L) + grouping(_col3, 0L)), CASE WHEN (((grouping(_col3, 1L) + grouping(_col3, 0L)) = 0L)) THEN (_col0) ELSE (null) END, rank_window_0,top n:100
                  PTF Operator [PTF_81] (rows=3060 width=302)
                    Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col2 DESC NULLS LAST","partition by:":"(grouping(_col3, 1L) + grouping(_col3, 0L)), CASE WHEN ((grouping(_col3, 0L) = UDFToLong(0))) THEN (_col0) ELSE (CAST( null AS STRING)) END"}]
                    Select Operator [SEL_80] (rows=3060 width=302)
                      Output:["_col0","_col1","_col2","_col3"]
                    <-Reducer 3 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_79]
                        PartitionCols:(grouping(_col3, 1L) + grouping(_col3, 0L)), CASE WHEN ((grouping(_col3, 0L) = UDFToLong(0))) THEN (_col0) ELSE (CAST( null AS STRING)) END
                        Select Operator [SEL_78] (rows=3060 width=302)
                          Output:["_col0","_col1","_col2","_col3"]
                          Group By Operator [GBY_77] (rows=3060 width=302)
                            Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                          <-Reducer 2 [SIMPLE_EDGE]
                            SHUFFLE [RS_19]
                              PartitionCols:_col0, _col1, _col2
                              Group By Operator [GBY_18] (rows=88740 width=302)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col2)"],keys:_col0, _col1, 0L
                                Select Operator [SEL_16] (rows=24992810 width=293)
                                  Output:["_col0","_col1","_col2"]
                                  Merge Join Operator [MERGEJOIN_62] (rows=24992810 width=293)
                                    Conds:RS_65._col0=RS_14._col1(Inner),Output:["_col1","_col2","_col5"]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_65]
                                      PartitionCols:_col0
                                      Select Operator [SEL_64] (rows=462000 width=186)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_63] (rows=462000 width=186)
                                          predicate:i_item_sk is not null
                                          TableScan [TS_0] (rows=462000 width=186)
                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_class","i_category"]
                                  <-Reducer 7 [SIMPLE_EDGE]
                                    SHUFFLE [RS_14]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_61] (rows=24992810 width=115)
                                        Conds:RS_76._col0=RS_68._col0(Inner),Output:["_col1","_col2"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_68]
                                          PartitionCols:_col0
                                          Select Operator [SEL_67] (rows=317 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_66] (rows=317 width=8)
                                              predicate:(d_month_seq BETWEEN 1212 AND 1223 and d_date_sk is not null)
                                              TableScan [TS_6] (rows=73049 width=8)
                                                default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_month_seq"]
                                      <-Map 6 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_76]
                                          PartitionCols:_col0
                                          Select Operator [SEL_75] (rows=143966864 width=119)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_74] (rows=143966864 width=119)
                                              predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_10_d1_d_date_sk_min) AND DynamicValue(RS_10_d1_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_10_d1_d_date_sk_bloom_filter)))
                                              TableScan [TS_3] (rows=144002668 width=119)
                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_net_paid"]
                                              <-Reducer 9 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_73]
                                                  Group By Operator [GBY_72] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_71]
                                                      Group By Operator [GBY_70] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_69] (rows=317 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_67]

