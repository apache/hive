PREHOOK: query: explain
select  count(*) 
from store_sales
    ,household_demographics 
    ,time_dim, store
where ss_sold_time_sk = time_dim.t_time_sk   
    and ss_hdemo_sk = household_demographics.hd_demo_sk 
    and ss_store_sk = s_store_sk
    and time_dim.t_hour = 8
    and time_dim.t_minute >= 30
    and household_demographics.hd_dep_count = 5
    and store.s_store_name = 'ese'
order by count(*)
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@time_dim
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  count(*) 
from store_sales
    ,household_demographics 
    ,time_dim, store
where ss_sold_time_sk = time_dim.t_time_sk   
    and ss_hdemo_sk = household_demographics.hd_demo_sk 
    and ss_store_sk = s_store_sk
    and time_dim.t_hour = 8
    and time_dim.t_minute >= 30
    and household_demographics.hd_dep_count = 5
    and store.s_store_name = 'ese'
order by count(*)
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@time_dim
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 10 (BROADCAST_EDGE), Reducer 12 (BROADCAST_EDGE), Reducer 8 (BROADCAST_EDGE)
Reducer 10 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 3 <- Map 9 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 11 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 8 <- Map 7 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_109]
        Limit [LIM_108] (rows=1 width=8)
          Number of rows:100
          Select Operator [SEL_107] (rows=1 width=8)
            Output:["_col0"]
          <-Reducer 5 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_106]
              Select Operator [SEL_105] (rows=1 width=8)
                Output:["_col1"]
                Group By Operator [GBY_104] (rows=1 width=8)
                  Output:["_col0"],aggregations:["count(VALUE._col0)"]
                <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
                  PARTITION_ONLY_SHUFFLE [RS_23]
                    Group By Operator [GBY_22] (rows=1 width=8)
                      Output:["_col0"],aggregations:["count()"]
                      Merge Join Operator [MERGEJOIN_76] (rows=766650239 width=88)
                        Conds:RS_18._col2=RS_95._col0(Inner)
                      <-Map 11 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_95]
                          PartitionCols:_col0
                          Select Operator [SEL_94] (rows=852 width=1910)
                            Output:["_col0"]
                            Filter Operator [FIL_93] (rows=852 width=1910)
                              predicate:((s_store_name = 'ese') and s_store_sk is not null)
                              TableScan [TS_9] (rows=1704 width=1910)
                                default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_name"]
                      <-Reducer 3 [SIMPLE_EDGE]
                        SHUFFLE [RS_18]
                          PartitionCols:_col2
                          Merge Join Operator [MERGEJOIN_75] (rows=696954748 width=88)
                            Conds:RS_15._col1=RS_87._col0(Inner),Output:["_col2"]
                          <-Map 9 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_87]
                              PartitionCols:_col0
                              Select Operator [SEL_86] (rows=3600 width=107)
                                Output:["_col0"]
                                Filter Operator [FIL_85] (rows=3600 width=107)
                                  predicate:((hd_dep_count = 5) and hd_demo_sk is not null)
                                  TableScan [TS_6] (rows=7200 width=107)
                                    default@household_demographics,household_demographics,Tbl:COMPLETE,Col:NONE,Output:["hd_demo_sk","hd_dep_count"]
                          <-Reducer 2 [SIMPLE_EDGE]
                            SHUFFLE [RS_15]
                              PartitionCols:_col1
                              Merge Join Operator [MERGEJOIN_74] (rows=633595212 width=88)
                                Conds:RS_103._col0=RS_79._col0(Inner),Output:["_col1","_col2"]
                              <-Map 7 [SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_79]
                                  PartitionCols:_col0
                                  Select Operator [SEL_78] (rows=14400 width=471)
                                    Output:["_col0"]
                                    Filter Operator [FIL_77] (rows=14400 width=471)
                                      predicate:((t_hour = 8) and (t_minute >= 30) and t_time_sk is not null)
                                      TableScan [TS_3] (rows=86400 width=471)
                                        default@time_dim,time_dim,Tbl:COMPLETE,Col:NONE,Output:["t_time_sk","t_hour","t_minute"]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_103]
                                  PartitionCols:_col0
                                  Select Operator [SEL_102] (rows=575995635 width=88)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_101] (rows=575995635 width=88)
                                      predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_16_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_16_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_16_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_13_time_dim_t_time_sk_min) AND DynamicValue(RS_13_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_13_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_19_store_s_store_sk_min) AND DynamicValue(RS_19_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_19_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                      TableScan [TS_0] (rows=575995635 width=88)
                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                      <-Reducer 10 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_92]
                                          Group By Operator [GBY_91] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_90]
                                              Group By Operator [GBY_89] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_88] (rows=3600 width=107)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_86]
                                      <-Reducer 12 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_100]
                                          Group By Operator [GBY_99] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_98]
                                              Group By Operator [GBY_97] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_96] (rows=852 width=1910)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_94]
                                      <-Reducer 8 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_84]
                                          Group By Operator [GBY_83] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_82]
                                              Group By Operator [GBY_81] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_80] (rows=14400 width=471)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_78]

