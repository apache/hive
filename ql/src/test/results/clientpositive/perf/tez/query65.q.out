PREHOOK: query: explain
select 
	s_store_name,
	i_item_desc,
	sc.revenue,
	i_current_price,
	i_wholesale_cost,
	i_brand
 from store, item,
     (select ss_store_sk, avg(revenue) as ave
 	from
 	    (select  ss_store_sk, ss_item_sk, 
 		     sum(ss_sales_price) as revenue
 		from store_sales, date_dim
 		where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 		group by ss_store_sk, ss_item_sk) sa
 	group by ss_store_sk) sb,
     (select  ss_store_sk, ss_item_sk, sum(ss_sales_price) as revenue
 	from store_sales, date_dim
 	where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 	group by ss_store_sk, ss_item_sk) sc
 where sb.ss_store_sk = sc.ss_store_sk and 
       sc.revenue <= 0.1 * sb.ave and
       s_store_sk = sc.ss_store_sk and
       i_item_sk = sc.ss_item_sk
 order by s_store_name, i_item_desc
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select 
	s_store_name,
	i_item_desc,
	sc.revenue,
	i_current_price,
	i_wholesale_cost,
	i_brand
 from store, item,
     (select ss_store_sk, avg(revenue) as ave
 	from
 	    (select  ss_store_sk, ss_item_sk, 
 		     sum(ss_sales_price) as revenue
 		from store_sales, date_dim
 		where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 		group by ss_store_sk, ss_item_sk) sa
 	group by ss_store_sk) sb,
     (select  ss_store_sk, ss_item_sk, sum(ss_sales_price) as revenue
 	from store_sales, date_dim
 	where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 	group by ss_store_sk, ss_item_sk) sc
 where sb.ss_store_sk = sc.ss_store_sk and 
       sc.revenue <= 0.1 * sb.ave and
       s_store_sk = sc.ss_store_sk and
       i_item_sk = sc.ss_item_sk
 order by s_store_name, i_item_desc
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 10 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 5 <- Map 11 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_107]
        Limit [LIM_106] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_105] (rows=255550079 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 5 [SIMPLE_EDGE]
            SHUFFLE [RS_48]
              Select Operator [SEL_47] (rows=255550079 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Merge Join Operator [MERGEJOIN_81] (rows=255550079 width=88)
                  Conds:RS_44._col1=RS_104._col0(Inner),Output:["_col2","_col6","_col8","_col9","_col10","_col11"]
                <-Map 11 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_104]
                    PartitionCols:_col0
                    Select Operator [SEL_103] (rows=462000 width=1436)
                      Output:["_col0","_col1","_col2","_col3","_col4"]
                      Filter Operator [FIL_102] (rows=462000 width=1436)
                        predicate:i_item_sk is not null
                        TableScan [TS_36] (rows=462000 width=1436)
                          default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_desc","i_current_price","i_wholesale_cost","i_brand"]
                <-Reducer 4 [SIMPLE_EDGE]
                  SHUFFLE [RS_44]
                    PartitionCols:_col1
                    Filter Operator [FIL_43] (rows=232318249 width=88)
                      predicate:(_col2 <= (0.1 * _col4))
                      Merge Join Operator [MERGEJOIN_80] (rows=696954748 width=88)
                        Conds:RS_93._col0=RS_98._col0(Inner),RS_93._col0=RS_101._col0(Inner),Output:["_col1","_col2","_col4","_col6"]
                      <-Map 10 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_101]
                          PartitionCols:_col0
                          Select Operator [SEL_100] (rows=1704 width=1910)
                            Output:["_col0","_col1"]
                            Filter Operator [FIL_99] (rows=1704 width=1910)
                              predicate:s_store_sk is not null
                              TableScan [TS_33] (rows=1704 width=1910)
                                default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_name"]
                      <-Reducer 3 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_93]
                          PartitionCols:_col0
                          Group By Operator [GBY_92] (rows=316797606 width=88)
                            Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                          <-Reducer 2 [SIMPLE_EDGE]
                            SHUFFLE [RS_11]
                              PartitionCols:_col0, _col1
                              Group By Operator [GBY_10] (rows=633595212 width=88)
                                Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col2, _col1
                                Merge Join Operator [MERGEJOIN_78] (rows=633595212 width=88)
                                  Conds:RS_86._col0=RS_90._col0(Inner),Output:["_col1","_col2","_col3"]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_86]
                                    PartitionCols:_col0
                                    Select Operator [SEL_84] (rows=575995635 width=88)
                                      Output:["_col0","_col1","_col2","_col3"]
                                      Filter Operator [FIL_82] (rows=575995635 width=88)
                                        predicate:(ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                        TableScan [TS_0] (rows=575995635 width=88)
                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_sales_price"]
                                <-Map 9 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_90]
                                    PartitionCols:_col0
                                    Select Operator [SEL_89] (rows=8116 width=1119)
                                      Output:["_col0"]
                                      Filter Operator [FIL_88] (rows=8116 width=1119)
                                        predicate:(d_date_sk is not null and d_month_seq BETWEEN 1212 AND 1223)
                                        TableScan [TS_3] (rows=73049 width=1119)
                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_month_seq"]
                      <-Reducer 8 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_98]
                          PartitionCols:_col0
                          Select Operator [SEL_97] (rows=158398803 width=88)
                            Output:["_col0","_col1"]
                            Group By Operator [GBY_96] (rows=158398803 width=88)
                              Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","count(_col2)"],keys:_col1
                              Select Operator [SEL_95] (rows=316797606 width=88)
                                Output:["_col1","_col2"]
                                Group By Operator [GBY_94] (rows=316797606 width=88)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                <-Reducer 7 [SIMPLE_EDGE]
                                  SHUFFLE [RS_25]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_24] (rows=633595212 width=88)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col2, _col1
                                      Merge Join Operator [MERGEJOIN_79] (rows=633595212 width=88)
                                        Conds:RS_87._col0=RS_91._col0(Inner),Output:["_col1","_col2","_col3"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_87]
                                          PartitionCols:_col0
                                          Select Operator [SEL_85] (rows=575995635 width=88)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Filter Operator [FIL_83] (rows=575995635 width=88)
                                              predicate:(ss_sold_date_sk is not null and ss_store_sk is not null)
                                               Please refer to the previous TableScan [TS_0]
                                      <-Map 9 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_91]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_89]

