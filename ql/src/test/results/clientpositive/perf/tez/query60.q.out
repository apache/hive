PREHOOK: query: explain
with ss as (
 select
          i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 cs as (
 select
          i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 ws as (
 select
          i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6
 group by i_item_id)
  select   
  i_item_id
,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by i_item_id
      ,total_sales
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as (
 select
          i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 cs as (
 select
          i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 ws as (
 select
          i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6
 group by i_item_id)
  select   
  i_item_id
,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by i_item_id
      ,total_sales
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 13 <- Reducer 17 (BROADCAST_EDGE)
Map 25 <- Reducer 20 (BROADCAST_EDGE)
Map 26 <- Reducer 23 (BROADCAST_EDGE)
Reducer 10 <- Reducer 2 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 12 <- Map 1 (SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 16 (SIMPLE_EDGE)
Reducer 15 <- Map 24 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 17 <- Map 16 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 16 (SIMPLE_EDGE), Map 25 (SIMPLE_EDGE)
Reducer 19 <- Map 24 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 20 <- Map 16 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Map 16 (SIMPLE_EDGE), Map 26 (SIMPLE_EDGE)
Reducer 22 <- Map 24 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 16 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 15 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 19 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE), Union 5 (CONTAINS)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_368]
        Limit [LIM_367] (rows=100 width=212)
          Number of rows:100
          Select Operator [SEL_366] (rows=1717 width=212)
            Output:["_col0","_col1"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_365]
              Top N Key Operator [TNK_364] (rows=1717 width=212)
                keys:_col0, _col1,top n:100
                Group By Operator [GBY_363] (rows=1717 width=212)
                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                <-Union 5 [SIMPLE_EDGE]
                  <-Reducer 11 [CONTAINS] vectorized
                    Reduce Output Operator [RS_386]
                      PartitionCols:_col0
                      Group By Operator [GBY_385] (rows=1717 width=212)
                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                        Top N Key Operator [TNK_384] (rows=5151 width=212)
                          keys:_col0,top n:100
                          Group By Operator [GBY_383] (rows=1717 width=212)
                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 10 [SIMPLE_EDGE]
                            SHUFFLE [RS_109]
                              PartitionCols:_col0
                              Group By Operator [GBY_108] (rows=1717 width=212)
                                Output:["_col0","_col1"],aggregations:["sum(_col7)"],keys:_col1
                                Merge Join Operator [MERGEJOIN_310] (rows=379339 width=201)
                                  Conds:RS_104._col0=RS_105._col2(Inner),Output:["_col1","_col7"]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_104]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_299] (rows=34340 width=104)
                                      Conds:RS_330._col1=RS_334._col0(Inner),Output:["_col0","_col1"]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_330]
                                        PartitionCols:_col1
                                        Select Operator [SEL_328] (rows=462000 width=104)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_326] (rows=462000 width=104)
                                            predicate:(i_item_id is not null and i_item_sk is not null)
                                            TableScan [TS_0] (rows=462000 width=104)
                                              default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id","i_category"]
                                    <-Reducer 12 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_334]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_333] (rows=23100 width=100)
                                          Output:["_col0"],keys:KEY._col0
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_332]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_331] (rows=23100 width=100)
                                              Output:["_col0"],keys:i_item_id
                                              Select Operator [SEL_329] (rows=46200 width=190)
                                                Output:["i_item_id"]
                                                Filter Operator [FIL_327] (rows=46200 width=190)
                                                  predicate:((i_category = 'Children') and i_item_id is not null)
                                                   Please refer to the previous TableScan [TS_0]
                                <-Reducer 22 [SIMPLE_EDGE]
                                  SHUFFLE [RS_105]
                                    PartitionCols:_col2
                                    Select Operator [SEL_100] (rows=788222 width=110)
                                      Output:["_col2","_col4"]
                                      Merge Join Operator [MERGEJOIN_307] (rows=788222 width=110)
                                        Conds:RS_97._col2=RS_358._col0(Inner),Output:["_col1","_col3"]
                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_358]
                                          PartitionCols:_col0
                                          Select Operator [SEL_355] (rows=8000000 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_354] (rows=8000000 width=112)
                                              predicate:((ca_gmt_offset = -6) and ca_address_sk is not null)
                                              TableScan [TS_16] (rows=40000000 width=112)
                                                default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_gmt_offset"]
                                      <-Reducer 21 [SIMPLE_EDGE]
                                        SHUFFLE [RS_97]
                                          PartitionCols:_col2
                                          Merge Join Operator [MERGEJOIN_306] (rows=3941109 width=118)
                                            Conds:RS_382._col0=RS_341._col0(Inner),Output:["_col1","_col2","_col3"]
                                          <-Map 16 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_341]
                                              PartitionCols:_col0
                                              Select Operator [SEL_336] (rows=50 width=4)
                                                Output:["_col0"]
                                                Filter Operator [FIL_335] (rows=50 width=12)
                                                  predicate:((d_year = 1999) and (d_moy = 9) and d_date_sk is not null)
                                                  TableScan [TS_13] (rows=73049 width=12)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                          <-Map 26 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_382]
                                              PartitionCols:_col0
                                              Select Operator [SEL_381] (rows=143931246 width=123)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_380] (rows=143931246 width=123)
                                                  predicate:(ws_sold_date_sk is not null and ws_bill_addr_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_95_date_dim_d_date_sk_min) AND DynamicValue(RS_95_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_95_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_85] (rows=144002668 width=123)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                                  <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_379]
                                                      Group By Operator [GBY_378] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_348]
                                                          Group By Operator [GBY_345] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_342] (rows=50 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_336]
                  <-Reducer 4 [CONTAINS] vectorized
                    Reduce Output Operator [RS_362]
                      PartitionCols:_col0
                      Group By Operator [GBY_361] (rows=1717 width=212)
                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                        Top N Key Operator [TNK_360] (rows=5151 width=212)
                          keys:_col0,top n:100
                          Group By Operator [GBY_359] (rows=1717 width=212)
                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 3 [SIMPLE_EDGE]
                            SHUFFLE [RS_34]
                              PartitionCols:_col0
                              Group By Operator [GBY_33] (rows=1717 width=212)
                                Output:["_col0","_col1"],aggregations:["sum(_col7)"],keys:_col1
                                Merge Join Operator [MERGEJOIN_308] (rows=1384530 width=100)
                                  Conds:RS_29._col0=RS_30._col2(Inner),Output:["_col1","_col7"]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_29]
                                    PartitionCols:_col0
                                     Please refer to the previous Merge Join Operator [MERGEJOIN_299]
                                <-Reducer 15 [SIMPLE_EDGE]
                                  SHUFFLE [RS_30]
                                    PartitionCols:_col2
                                    Select Operator [SEL_25] (rows=2876890 width=4)
                                      Output:["_col2","_col4"]
                                      Merge Join Operator [MERGEJOIN_301] (rows=2876890 width=4)
                                        Conds:RS_22._col2=RS_356._col0(Inner),Output:["_col1","_col3"]
                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_356]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_355]
                                      <-Reducer 14 [SIMPLE_EDGE]
                                        SHUFFLE [RS_22]
                                          PartitionCols:_col2
                                          Merge Join Operator [MERGEJOIN_300] (rows=14384447 width=4)
                                            Conds:RS_353._col0=RS_337._col0(Inner),Output:["_col1","_col2","_col3"]
                                          <-Map 16 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_337]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_336]
                                          <-Map 13 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_353]
                                              PartitionCols:_col0
                                              Select Operator [SEL_352] (rows=525327191 width=118)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_351] (rows=525327191 width=118)
                                                  predicate:(ss_sold_date_sk is not null and ss_addr_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_20_date_dim_d_date_sk_min) AND DynamicValue(RS_20_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_20_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_10] (rows=575995635 width=118)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_addr_sk","ss_ext_sales_price"]
                                                  <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_350]
                                                      Group By Operator [GBY_349] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_346]
                                                          Group By Operator [GBY_343] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_338] (rows=50 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_336]
                  <-Reducer 9 [CONTAINS] vectorized
                    Reduce Output Operator [RS_377]
                      PartitionCols:_col0
                      Group By Operator [GBY_376] (rows=1717 width=212)
                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                        Top N Key Operator [TNK_375] (rows=5151 width=212)
                          keys:_col0,top n:100
                          Group By Operator [GBY_374] (rows=1717 width=212)
                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 8 [SIMPLE_EDGE]
                            SHUFFLE [RS_71]
                              PartitionCols:_col0
                              Group By Operator [GBY_70] (rows=1717 width=212)
                                Output:["_col0","_col1"],aggregations:["sum(_col7)"],keys:_col1
                                Merge Join Operator [MERGEJOIN_309] (rows=746132 width=100)
                                  Conds:RS_66._col0=RS_67._col3(Inner),Output:["_col1","_col7"]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_66]
                                    PartitionCols:_col0
                                     Please refer to the previous Merge Join Operator [MERGEJOIN_299]
                                <-Reducer 19 [SIMPLE_EDGE]
                                  SHUFFLE [RS_67]
                                    PartitionCols:_col3
                                    Select Operator [SEL_62] (rows=1550375 width=13)
                                      Output:["_col3","_col4"]
                                      Merge Join Operator [MERGEJOIN_304] (rows=1550375 width=13)
                                        Conds:RS_59._col1=RS_357._col0(Inner),Output:["_col2","_col3"]
                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_357]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_355]
                                      <-Reducer 18 [SIMPLE_EDGE]
                                        SHUFFLE [RS_59]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_303] (rows=7751872 width=98)
                                            Conds:RS_373._col0=RS_339._col0(Inner),Output:["_col1","_col2","_col3"]
                                          <-Map 16 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_339]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_336]
                                          <-Map 25 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_373]
                                              PartitionCols:_col0
                                              Select Operator [SEL_372] (rows=285117733 width=123)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_371] (rows=285117733 width=123)
                                                  predicate:(cs_sold_date_sk is not null and cs_bill_addr_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_57_date_dim_d_date_sk_min) AND DynamicValue(RS_57_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_57_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_47] (rows=287989836 width=123)
                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_addr_sk","cs_item_sk","cs_ext_sales_price"]
                                                  <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_370]
                                                      Group By Operator [GBY_369] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_347]
                                                          Group By Operator [GBY_344] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_340] (rows=50 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_336]

