Warning: Shuffle Join MERGEJOIN[265][tables = [$hdt$_4, $hdt$_5]] in Stage 'Reducer 18' is a cross product
PREHOOK: query: explain
with ss_items as
 (select i_item_id item_id
        ,sum(ss_ext_sales_price) ss_item_rev 
 from store_sales
     ,item
     ,date_dim
 where ss_item_sk = i_item_sk
   and d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
   and ss_sold_date_sk   = d_date_sk
 group by i_item_id),
 cs_items as
 (select i_item_id item_id
        ,sum(cs_ext_sales_price) cs_item_rev
  from catalog_sales
      ,item
      ,date_dim
 where cs_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
  and  cs_sold_date_sk = d_date_sk
 group by i_item_id),
 ws_items as
 (select i_item_id item_id
        ,sum(ws_ext_sales_price) ws_item_rev
  from web_sales
      ,item
      ,date_dim
 where ws_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq =(select d_week_seq 
                                     from date_dim
                                     where d_date = '1998-02-19'))
  and ws_sold_date_sk   = d_date_sk
 group by i_item_id)
  select  ss_items.item_id
       ,ss_item_rev
       ,ss_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ss_dev
       ,cs_item_rev
       ,cs_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 cs_dev
       ,ws_item_rev
       ,ws_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ws_dev
       ,(ss_item_rev+cs_item_rev+ws_item_rev)/3 average
 from ss_items,cs_items,ws_items
 where ss_items.item_id=cs_items.item_id
   and ss_items.item_id=ws_items.item_id 
   and ss_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
   and ss_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and cs_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and cs_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and ws_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and ws_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
 order by item_id
         ,ss_item_rev
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with ss_items as
 (select i_item_id item_id
        ,sum(ss_ext_sales_price) ss_item_rev 
 from store_sales
     ,item
     ,date_dim
 where ss_item_sk = i_item_sk
   and d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
   and ss_sold_date_sk   = d_date_sk
 group by i_item_id),
 cs_items as
 (select i_item_id item_id
        ,sum(cs_ext_sales_price) cs_item_rev
  from catalog_sales
      ,item
      ,date_dim
 where cs_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
  and  cs_sold_date_sk = d_date_sk
 group by i_item_id),
 ws_items as
 (select i_item_id item_id
        ,sum(ws_ext_sales_price) ws_item_rev
  from web_sales
      ,item
      ,date_dim
 where ws_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq =(select d_week_seq 
                                     from date_dim
                                     where d_date = '1998-02-19'))
  and ws_sold_date_sk   = d_date_sk
 group by i_item_id)
  select  ss_items.item_id
       ,ss_item_rev
       ,ss_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ss_dev
       ,cs_item_rev
       ,cs_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 cs_dev
       ,ws_item_rev
       ,ws_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ws_dev
       ,(ss_item_rev+cs_item_rev+ws_item_rev)/3 average
 from ss_items,cs_items,ws_items
 where ss_items.item_id=cs_items.item_id
   and ss_items.item_id=ws_items.item_id 
   and ss_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
   and ss_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and cs_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and cs_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and ws_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and ws_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
 order by item_id
         ,ss_item_rev
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 23 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE), Reducer 20 (ONE_TO_ONE_EDGE)
Reducer 17 <- Map 16 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 21 (CUSTOM_SIMPLE_EDGE), Reducer 17 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 21 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE)
Reducer 3 <- Reducer 15 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 10 (ONE_TO_ONE_EDGE), Reducer 13 (ONE_TO_ONE_EDGE), Reducer 4 (ONE_TO_ONE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 8 <- Map 22 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 15 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_321]
        Limit [LIM_320] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_319] (rows=1442 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 5 [SIMPLE_EDGE]
            SHUFFLE [RS_161]
              Select Operator [SEL_160] (rows=1442 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                Filter Operator [FIL_154] (rows=1442 width=88)
                  predicate:(_col1 BETWEEN (0.9 * _col3) AND (1.1 * _col3) and _col1 BETWEEN (0.9 * _col5) AND (1.1 * _col5) and _col3 BETWEEN (0.9 * _col1) AND (1.1 * _col1) and _col3 BETWEEN (0.9 * _col5) AND (1.1 * _col5) and _col5 BETWEEN (0.9 * _col1) AND (1.1 * _col1) and _col5 BETWEEN (0.9 * _col3) AND (1.1 * _col3))
                  Merge Join Operator [MERGEJOIN_279] (rows=766650239 width=88)
                    Conds:RS_308._col0=RS_313._col0(Inner),RS_308._col0=RS_318._col0(Inner),Output:["_col0","_col1","_col3","_col5"]
                  <-Reducer 10 [ONE_TO_ONE_EDGE] vectorized
                    FORWARD [RS_313]
                      PartitionCols:_col0
                      Group By Operator [GBY_312] (rows=348477374 width=88)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 9 [SIMPLE_EDGE]
                        SHUFFLE [RS_97]
                          PartitionCols:_col0
                          Group By Operator [GBY_96] (rows=696954748 width=88)
                            Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col4
                            Merge Join Operator [MERGEJOIN_277] (rows=696954748 width=88)
                              Conds:RS_92._col0=RS_93._col0(Inner),Output:["_col2","_col4"]
                            <-Reducer 15 [SIMPLE_EDGE]
                              SHUFFLE [RS_93]
                                PartitionCols:_col0
                                Merge Join Operator [MERGEJOIN_267] (rows=80353 width=1119)
                                  Conds:RS_290._col1=RS_306._col0(Inner),Output:["_col0"]
                                <-Map 14 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_290]
                                    PartitionCols:_col1
                                    Select Operator [SEL_289] (rows=73049 width=1119)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_288] (rows=73049 width=1119)
                                        predicate:(d_date is not null and d_date_sk is not null)
                                        TableScan [TS_6] (rows=73049 width=1119)
                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date"]
                                <-Reducer 20 [ONE_TO_ONE_EDGE] vectorized
                                  FORWARD [RS_306]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_305] (rows=40176 width=1119)
                                      Output:["_col0"],keys:KEY._col0
                                    <-Reducer 19 [SIMPLE_EDGE]
                                      SHUFFLE [RS_32]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_31] (rows=80353 width=1119)
                                          Output:["_col0"],keys:_col2
                                          Merge Join Operator [MERGEJOIN_266] (rows=80353 width=1119)
                                            Conds:RS_27._col1=RS_303._col1(Inner),Output:["_col2"]
                                          <-Map 21 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_303]
                                              PartitionCols:_col1
                                              Select Operator [SEL_301] (rows=73049 width=1119)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_299] (rows=73049 width=1119)
                                                  predicate:(d_date is not null and d_week_seq is not null)
                                                  TableScan [TS_21] (rows=73049 width=1119)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date","d_week_seq"]
                                          <-Reducer 18 [SIMPLE_EDGE]
                                            SHUFFLE [RS_27]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_265] (rows=36524 width=1128)
                                                Conds:(Inner),Output:["_col1"]
                                              <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_304]
                                                  Select Operator [SEL_302] (rows=36524 width=1119)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_300] (rows=36524 width=1119)
                                                      predicate:((d_date = '1998-02-19') and d_week_seq is not null)
                                                       Please refer to the previous TableScan [TS_21]
                                              <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_298]
                                                  Select Operator [SEL_297] (rows=1 width=8)
                                                    Filter Operator [FIL_296] (rows=1 width=8)
                                                      predicate:(sq_count_check(_col0) <= 1)
                                                      Group By Operator [GBY_295] (rows=1 width=8)
                                                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                      <-Map 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_294]
                                                          Group By Operator [GBY_293] (rows=1 width=8)
                                                            Output:["_col0"],aggregations:["count()"]
                                                            Select Operator [SEL_292] (rows=36524 width=1119)
                                                              Filter Operator [FIL_291] (rows=36524 width=1119)
                                                                predicate:(d_date = '1998-02-19')
                                                                TableScan [TS_9] (rows=73049 width=1119)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date"]
                            <-Reducer 8 [SIMPLE_EDGE]
                              SHUFFLE [RS_92]
                                PartitionCols:_col0
                                Merge Join Operator [MERGEJOIN_268] (rows=633595212 width=88)
                                  Conds:RS_311._col1=RS_286._col0(Inner),Output:["_col0","_col2","_col4"]
                                <-Map 7 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_286]
                                    PartitionCols:_col0
                                    Select Operator [SEL_284] (rows=462000 width=1436)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_283] (rows=462000 width=1436)
                                        predicate:(i_item_id is not null and i_item_sk is not null)
                                        TableScan [TS_3] (rows=462000 width=1436)
                                          default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_id"]
                                <-Map 22 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_311]
                                    PartitionCols:_col1
                                    Select Operator [SEL_310] (rows=575995635 width=88)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_309] (rows=575995635 width=88)
                                        predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                        TableScan [TS_50] (rows=575995635 width=88)
                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_ext_sales_price"]
                  <-Reducer 13 [ONE_TO_ONE_EDGE] vectorized
                    FORWARD [RS_318]
                      PartitionCols:_col0
                      Group By Operator [GBY_317] (rows=87121617 width=135)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 12 [SIMPLE_EDGE]
                        SHUFFLE [RS_147]
                          PartitionCols:_col0
                          Group By Operator [GBY_146] (rows=174243235 width=135)
                            Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col4
                            Merge Join Operator [MERGEJOIN_278] (rows=174243235 width=135)
                              Conds:RS_142._col0=RS_143._col0(Inner),Output:["_col2","_col4"]
                            <-Reducer 15 [SIMPLE_EDGE]
                              SHUFFLE [RS_143]
                                PartitionCols:_col0
                                 Please refer to the previous Merge Join Operator [MERGEJOIN_267]
                            <-Reducer 11 [SIMPLE_EDGE]
                              SHUFFLE [RS_142]
                                PartitionCols:_col0
                                Merge Join Operator [MERGEJOIN_272] (rows=158402938 width=135)
                                  Conds:RS_316._col1=RS_287._col0(Inner),Output:["_col0","_col2","_col4"]
                                <-Map 7 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_287]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_284]
                                <-Map 23 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_316]
                                    PartitionCols:_col1
                                    Select Operator [SEL_315] (rows=144002668 width=135)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_314] (rows=144002668 width=135)
                                        predicate:(ws_item_sk is not null and ws_sold_date_sk is not null)
                                        TableScan [TS_100] (rows=144002668 width=135)
                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_ext_sales_price"]
                  <-Reducer 4 [ONE_TO_ONE_EDGE] vectorized
                    FORWARD [RS_308]
                      PartitionCols:_col0
                      Group By Operator [GBY_307] (rows=174233858 width=135)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 3 [SIMPLE_EDGE]
                        SHUFFLE [RS_47]
                          PartitionCols:_col0
                          Group By Operator [GBY_46] (rows=348467716 width=135)
                            Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col4
                            Merge Join Operator [MERGEJOIN_276] (rows=348467716 width=135)
                              Conds:RS_42._col0=RS_43._col0(Inner),Output:["_col2","_col4"]
                            <-Reducer 15 [SIMPLE_EDGE]
                              SHUFFLE [RS_43]
                                PartitionCols:_col0
                                 Please refer to the previous Merge Join Operator [MERGEJOIN_267]
                            <-Reducer 2 [SIMPLE_EDGE]
                              SHUFFLE [RS_42]
                                PartitionCols:_col0
                                Merge Join Operator [MERGEJOIN_264] (rows=316788826 width=135)
                                  Conds:RS_282._col1=RS_285._col0(Inner),Output:["_col0","_col2","_col4"]
                                <-Map 7 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_285]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_284]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_282]
                                    PartitionCols:_col1
                                    Select Operator [SEL_281] (rows=287989836 width=135)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_280] (rows=287989836 width=135)
                                        predicate:(cs_item_sk is not null and cs_sold_date_sk is not null)
                                        TableScan [TS_0] (rows=287989836 width=135)
                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_item_sk","cs_ext_sales_price"]

