PREHOOK: query: explain
select i_brand_id brand_id, i_brand brand,t_hour,t_minute,
 	sum(ext_price) ext_price
 from item, (select ws_ext_sales_price as ext_price, 
                        ws_sold_date_sk as sold_date_sk,
                        ws_item_sk as sold_item_sk,
                        ws_sold_time_sk as time_sk  
                 from web_sales,date_dim
                 where d_date_sk = ws_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 union all
                 select cs_ext_sales_price as ext_price,
                        cs_sold_date_sk as sold_date_sk,
                        cs_item_sk as sold_item_sk,
                        cs_sold_time_sk as time_sk
                 from catalog_sales,date_dim
                 where d_date_sk = cs_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 union all
                 select ss_ext_sales_price as ext_price,
                        ss_sold_date_sk as sold_date_sk,
                        ss_item_sk as sold_item_sk,
                        ss_sold_time_sk as time_sk
                 from store_sales,date_dim
                 where d_date_sk = ss_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 ) as tmp,time_dim
 where
   sold_item_sk = i_item_sk
   and i_manager_id=1
   and time_sk = t_time_sk
   and (t_meal_time = 'breakfast' or t_meal_time = 'dinner')
 group by i_brand, i_brand_id,t_hour,t_minute
 order by ext_price desc, i_brand_id
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@time_dim
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select i_brand_id brand_id, i_brand brand,t_hour,t_minute,
 	sum(ext_price) ext_price
 from item, (select ws_ext_sales_price as ext_price, 
                        ws_sold_date_sk as sold_date_sk,
                        ws_item_sk as sold_item_sk,
                        ws_sold_time_sk as time_sk  
                 from web_sales,date_dim
                 where d_date_sk = ws_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 union all
                 select cs_ext_sales_price as ext_price,
                        cs_sold_date_sk as sold_date_sk,
                        cs_item_sk as sold_item_sk,
                        cs_sold_time_sk as time_sk
                 from catalog_sales,date_dim
                 where d_date_sk = cs_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 union all
                 select ss_ext_sales_price as ext_price,
                        ss_sold_date_sk as sold_date_sk,
                        ss_item_sk as sold_item_sk,
                        ss_sold_time_sk as time_sk
                 from store_sales,date_dim
                 where d_date_sk = ss_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 ) as tmp,time_dim
 where
   sold_item_sk = i_item_sk
   and i_manager_id=1
   and time_sk = t_time_sk
   and (t_meal_time = 'breakfast' or t_meal_time = 'dinner')
 group by i_brand, i_brand_id,t_hour,t_minute
 order by ext_price desc, i_brand_id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@time_dim
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Map 12 <- Reducer 9 (BROADCAST_EDGE)
Map 13 <- Reducer 9 (BROADCAST_EDGE)
Reducer 10 <- Map 12 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 11 <- Map 13 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 4 <- Map 14 (SIMPLE_EDGE), Union 3 (SIMPLE_EDGE)
Reducer 5 <- Map 15 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_178]
        Select Operator [SEL_177] (rows=1991967 width=223)
          Output:["_col0","_col1","_col2","_col3","_col4"]
        <-Reducer 6 [SIMPLE_EDGE] vectorized
          SHUFFLE [RS_176]
            Select Operator [SEL_175] (rows=1991967 width=227)
              Output:["_col1","_col2","_col3","_col4","_col5"]
              Group By Operator [GBY_174] (rows=1991967 width=223)
                Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
              <-Reducer 5 [SIMPLE_EDGE]
                SHUFFLE [RS_46]
                  PartitionCols:_col0, _col1, _col2, _col3
                  Group By Operator [GBY_45] (rows=1991967 width=223)
                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col0)"],keys:_col4, _col7, _col8, _col5
                    Merge Join Operator [MERGEJOIN_140] (rows=1991967 width=112)
                      Conds:RS_41._col2=RS_173._col0(Inner),Output:["_col0","_col4","_col5","_col7","_col8"]
                    <-Map 15 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_173]
                        PartitionCols:_col0
                        Select Operator [SEL_172] (rows=43200 width=12)
                          Output:["_col0","_col1","_col2"]
                          Filter Operator [FIL_171] (rows=43200 width=99)
                            predicate:((t_meal_time) IN ('breakfast', 'dinner') and t_time_sk is not null)
                            TableScan [TS_35] (rows=86400 width=99)
                              default@time_dim,time_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["t_time_sk","t_hour","t_minute","t_meal_time"]
                    <-Reducer 4 [SIMPLE_EDGE]
                      SHUFFLE [RS_41]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_139] (rows=3983933 width=104)
                          Conds:Union 3._col1=RS_170._col0(Inner),Output:["_col0","_col2","_col4","_col5"]
                        <-Map 14 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_170]
                            PartitionCols:_col0
                            Select Operator [SEL_169] (rows=7333 width=107)
                              Output:["_col0","_col1","_col2"]
                              Filter Operator [FIL_168] (rows=7333 width=111)
                                predicate:((i_manager_id = 1) and i_item_sk is not null)
                                TableScan [TS_32] (rows=462000 width=111)
                                  default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_brand","i_manager_id"]
                        <-Union 3 [SIMPLE_EDGE]
                          <-Reducer 10 [CONTAINS]
                            Reduce Output Operator [RS_148]
                              PartitionCols:_col1
                              Select Operator [SEL_146] (rows=7751851 width=98)
                                Output:["_col0","_col1","_col2"]
                                Merge Join Operator [MERGEJOIN_145] (rows=7751851 width=98)
                                  Conds:RS_181._col0=RS_157._col0(Inner),Output:["_col1","_col2","_col3"]
                                <-Map 8 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_157]
                                    PartitionCols:_col0
                                    Select Operator [SEL_154] (rows=50 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_153] (rows=50 width=12)
                                        predicate:((d_year = 2001) and (d_moy = 12) and d_date_sk is not null)
                                        TableScan [TS_3] (rows=73049 width=12)
                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                <-Map 12 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_181]
                                    PartitionCols:_col0
                                    Select Operator [SEL_180] (rows=285116947 width=123)
                                      Output:["_col0","_col1","_col2","_col3"]
                                      Filter Operator [FIL_179] (rows=285116947 width=123)
                                        predicate:(cs_sold_date_sk is not null and cs_sold_time_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_17_date_dim_d_date_sk_min) AND DynamicValue(RS_17_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_17_date_dim_d_date_sk_bloom_filter)))
                                        TableScan [TS_10] (rows=287989836 width=123)
                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_sold_time_sk","cs_item_sk","cs_ext_sales_price"]
                                        <-Reducer 9 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_163]
                                            Group By Operator [GBY_161] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_160]
                                                Group By Operator [GBY_159] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_156] (rows=50 width=4)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_154]
                          <-Reducer 11 [CONTAINS]
                            Reduce Output Operator [RS_152]
                              PartitionCols:_col1
                              Select Operator [SEL_150] (rows=14384397 width=4)
                                Output:["_col0","_col1","_col2"]
                                Merge Join Operator [MERGEJOIN_149] (rows=14384397 width=4)
                                  Conds:RS_184._col0=RS_158._col0(Inner),Output:["_col1","_col2","_col3"]
                                <-Map 8 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_158]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_154]
                                <-Map 13 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_184]
                                    PartitionCols:_col0
                                    Select Operator [SEL_183] (rows=525325345 width=118)
                                      Output:["_col0","_col1","_col2","_col3"]
                                      Filter Operator [FIL_182] (rows=525325345 width=118)
                                        predicate:(ss_sold_date_sk is not null and ss_sold_time_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_28_date_dim_d_date_sk_min) AND DynamicValue(RS_28_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_28_date_dim_d_date_sk_bloom_filter)))
                                        TableScan [TS_21] (rows=575995635 width=118)
                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_sold_time_sk","ss_item_sk","ss_ext_sales_price"]
                                        <-Reducer 9 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_164]
                                             Please refer to the previous Group By Operator [GBY_161]
                          <-Reducer 2 [CONTAINS]
                            Reduce Output Operator [RS_144]
                              PartitionCols:_col1
                              Select Operator [SEL_142] (rows=3941098 width=118)
                                Output:["_col0","_col1","_col2"]
                                Merge Join Operator [MERGEJOIN_141] (rows=3941098 width=118)
                                  Conds:RS_167._col0=RS_155._col0(Inner),Output:["_col1","_col2","_col3"]
                                <-Map 8 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_155]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_154]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_167]
                                    PartitionCols:_col0
                                    Select Operator [SEL_166] (rows=143930836 width=123)
                                      Output:["_col0","_col1","_col2","_col3"]
                                      Filter Operator [FIL_165] (rows=143930836 width=123)
                                        predicate:(ws_sold_time_sk is not null and ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_7_date_dim_d_date_sk_min) AND DynamicValue(RS_7_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_7_date_dim_d_date_sk_bloom_filter)))
                                        TableScan [TS_0] (rows=144002668 width=123)
                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_sold_time_sk","ws_item_sk","ws_ext_sales_price"]
                                        <-Reducer 9 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_162]
                                             Please refer to the previous Group By Operator [GBY_161]

