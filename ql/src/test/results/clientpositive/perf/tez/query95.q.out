PREHOOK: query: explain
with ws_wh as
(select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2
 from web_sales ws1,web_sales ws2
 where ws1.ws_order_number = ws2.ws_order_number
   and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
 select  
   count(distinct ws_order_number) as `order count`
  ,sum(ws_ext_ship_cost) as `total shipping cost`
  ,sum(ws_net_profit) as `total net profit`
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-5-01' and 
           (cast('1999-5-01' as date) + 60 days)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TX'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and ws1.ws_order_number in (select ws_order_number
                            from ws_wh)
and ws1.ws_order_number in (select wr_order_number
                            from web_returns,ws_wh
                            where wr_order_number = ws_wh.ws_order_number)
order by count(distinct ws_order_number)
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with ws_wh as
(select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2
 from web_sales ws1,web_sales ws2
 where ws1.ws_order_number = ws2.ws_order_number
   and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
 select  
   count(distinct ws_order_number) as `order count`
  ,sum(ws_ext_ship_cost) as `total shipping cost`
  ,sum(ws_net_profit) as `total net profit`
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-5-01' and 
           (cast('1999-5-01' as date) + 60 days)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TX'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and ws1.ws_order_number in (select ws_order_number
                            from ws_wh)
and ws1.ws_order_number in (select wr_order_number
                            from web_returns,ws_wh
                            where wr_order_number = ws_wh.ws_order_number)
order by count(distinct ws_order_number)
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 10 (BROADCAST_EDGE), Reducer 12 (BROADCAST_EDGE), Reducer 14 (BROADCAST_EDGE)
Map 19 <- Reducer 25 (BROADCAST_EDGE)
Map 23 <- Reducer 25 (BROADCAST_EDGE)
Reducer 10 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (SIMPLE_EDGE), Map 23 (SIMPLE_EDGE)
Reducer 21 <- Map 24 (SIMPLE_EDGE), Reducer 20 (ONE_TO_ONE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE)
Reducer 25 <- Map 24 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 11 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 13 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 17 (ONE_TO_ONE_EDGE), Reducer 22 (ONE_TO_ONE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_273]
        Limit [LIM_272] (rows=1 width=344)
          Number of rows:100
          Select Operator [SEL_271] (rows=1 width=344)
            Output:["_col0","_col1","_col2"]
          <-Reducer 7 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_270]
              Select Operator [SEL_269] (rows=1 width=344)
                Output:["_col1","_col2","_col3"]
                Group By Operator [GBY_268] (rows=1 width=344)
                  Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"]
                <-Reducer 6 [CUSTOM_SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_267]
                    Group By Operator [GBY_266] (rows=1 width=344)
                      Output:["_col0","_col1","_col2"],aggregations:["count(_col0)","sum(_col1)","sum(_col2)"]
                      Group By Operator [GBY_265] (rows=421668645 width=135)
                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                      <-Reducer 5 [SIMPLE_EDGE]
                        SHUFFLE [RS_116]
                          PartitionCols:_col0
                          Group By Operator [GBY_115] (rows=421668645 width=135)
                            Output:["_col0","_col2","_col3"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col3
                            Merge Join Operator [MERGEJOIN_212] (rows=421668645 width=135)
                              Conds:RS_58._col3=RS_247._col0(Inner),RS_58._col3=RS_264._col0(Inner),Output:["_col3","_col4","_col5"]
                            <-Reducer 17 [ONE_TO_ONE_EDGE] vectorized
                              FORWARD [RS_247]
                                PartitionCols:_col0
                                Group By Operator [GBY_246] (rows=79201469 width=135)
                                  Output:["_col0"],keys:KEY._col0
                                <-Reducer 16 [SIMPLE_EDGE]
                                  SHUFFLE [RS_24]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_23] (rows=158402938 width=135)
                                      Output:["_col0"],keys:_col1
                                      Select Operator [SEL_22] (rows=158402938 width=135)
                                        Output:["_col1"]
                                        Filter Operator [FIL_21] (rows=158402938 width=135)
                                          predicate:(_col0 <> _col2)
                                          Merge Join Operator [MERGEJOIN_209] (rows=158402938 width=135)
                                            Conds:RS_242._col1=RS_245._col1(Inner),Output:["_col0","_col1","_col2"]
                                          <-Map 15 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_242]
                                              PartitionCols:_col1
                                              Select Operator [SEL_241] (rows=144002668 width=135)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_240] (rows=144002668 width=135)
                                                  predicate:ws_order_number is not null
                                                  TableScan [TS_12] (rows=144002668 width=135)
                                                    default@web_sales,ws1,Tbl:COMPLETE,Col:NONE,Output:["ws_warehouse_sk","ws_order_number"]
                                          <-Map 18 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_245]
                                              PartitionCols:_col1
                                              Select Operator [SEL_244] (rows=144002668 width=135)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_243] (rows=144002668 width=135)
                                                  predicate:ws_order_number is not null
                                                  TableScan [TS_15] (rows=144002668 width=135)
                                                    default@web_sales,ws2,Tbl:COMPLETE,Col:NONE,Output:["ws_warehouse_sk","ws_order_number"]
                            <-Reducer 22 [ONE_TO_ONE_EDGE] vectorized
                              FORWARD [RS_264]
                                PartitionCols:_col0
                                Group By Operator [GBY_263] (rows=87121617 width=135)
                                  Output:["_col0"],keys:KEY._col0
                                <-Reducer 21 [SIMPLE_EDGE]
                                  SHUFFLE [RS_46]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_45] (rows=174243235 width=135)
                                      Output:["_col0"],keys:_col1
                                      Merge Join Operator [MERGEJOIN_211] (rows=174243235 width=135)
                                        Conds:RS_41._col0=RS_250._col0(Inner),Output:["_col1"]
                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_250]
                                          PartitionCols:_col0
                                          Select Operator [SEL_249] (rows=14398467 width=92)
                                            Output:["_col0"]
                                            Filter Operator [FIL_248] (rows=14398467 width=92)
                                              predicate:wr_order_number is not null
                                              TableScan [TS_38] (rows=14398467 width=92)
                                                default@web_returns,web_returns,Tbl:COMPLETE,Col:NONE,Output:["wr_order_number"]
                                      <-Reducer 20 [ONE_TO_ONE_EDGE]
                                        FORWARD [RS_41]
                                          PartitionCols:_col0
                                          Select Operator [SEL_37] (rows=158402938 width=135)
                                            Output:["_col0"]
                                            Filter Operator [FIL_36] (rows=158402938 width=135)
                                              predicate:(_col0 <> _col2)
                                              Merge Join Operator [MERGEJOIN_210] (rows=158402938 width=135)
                                                Conds:RS_259._col1=RS_262._col1(Inner),Output:["_col0","_col1","_col2"]
                                              <-Map 19 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_259]
                                                  PartitionCols:_col1
                                                  Select Operator [SEL_258] (rows=144002668 width=135)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_257] (rows=144002668 width=135)
                                                      predicate:((ws_order_number BETWEEN DynamicValue(RS_42_web_returns_wr_order_number_min) AND DynamicValue(RS_42_web_returns_wr_order_number_max) and in_bloom_filter(ws_order_number, DynamicValue(RS_42_web_returns_wr_order_number_bloom_filter))) and ws_order_number is not null)
                                                      TableScan [TS_27] (rows=144002668 width=135)
                                                        default@web_sales,ws1,Tbl:COMPLETE,Col:NONE,Output:["ws_warehouse_sk","ws_order_number"]
                                                      <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_255]
                                                          Group By Operator [GBY_254] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=14398467)"]
                                                          <-Map 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_253]
                                                              Group By Operator [GBY_252] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=14398467)"]
                                                                Select Operator [SEL_251] (rows=14398467 width=92)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_249]
                                              <-Map 23 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_262]
                                                  PartitionCols:_col1
                                                  Select Operator [SEL_261] (rows=144002668 width=135)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_260] (rows=144002668 width=135)
                                                      predicate:((ws_order_number BETWEEN DynamicValue(RS_42_web_returns_wr_order_number_min) AND DynamicValue(RS_42_web_returns_wr_order_number_max) and in_bloom_filter(ws_order_number, DynamicValue(RS_42_web_returns_wr_order_number_bloom_filter))) and ws_order_number is not null)
                                                      TableScan [TS_30] (rows=144002668 width=135)
                                                        default@web_sales,ws2,Tbl:COMPLETE,Col:NONE,Output:["ws_warehouse_sk","ws_order_number"]
                                                      <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_256]
                                                           Please refer to the previous Group By Operator [GBY_254]
                            <-Reducer 4 [SIMPLE_EDGE]
                              SHUFFLE [RS_58]
                                PartitionCols:_col3
                                Merge Join Operator [MERGEJOIN_208] (rows=191667562 width=135)
                                  Conds:RS_55._col2=RS_231._col0(Inner),Output:["_col3","_col4","_col5"]
                                <-Map 13 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_231]
                                    PartitionCols:_col0
                                    Select Operator [SEL_230] (rows=42 width=1850)
                                      Output:["_col0"]
                                      Filter Operator [FIL_229] (rows=42 width=1850)
                                        predicate:((web_company_name = 'pri') and web_site_sk is not null)
                                        TableScan [TS_9] (rows=84 width=1850)
                                          default@web_site,web_site,Tbl:COMPLETE,Col:NONE,Output:["web_site_sk","web_company_name"]
                                <-Reducer 3 [SIMPLE_EDGE]
                                  SHUFFLE [RS_55]
                                    PartitionCols:_col2
                                    Merge Join Operator [MERGEJOIN_207] (rows=174243235 width=135)
                                      Conds:RS_52._col1=RS_223._col0(Inner),Output:["_col2","_col3","_col4","_col5"]
                                    <-Map 11 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_223]
                                        PartitionCols:_col0
                                        Select Operator [SEL_222] (rows=20000000 width=1014)
                                          Output:["_col0"]
                                          Filter Operator [FIL_221] (rows=20000000 width=1014)
                                            predicate:((ca_state = 'TX') and ca_address_sk is not null)
                                            TableScan [TS_6] (rows=40000000 width=1014)
                                              default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_state"]
                                    <-Reducer 2 [SIMPLE_EDGE]
                                      SHUFFLE [RS_52]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_206] (rows=158402938 width=135)
                                          Conds:RS_239._col0=RS_215._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                        <-Map 9 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_215]
                                            PartitionCols:_col0
                                            Select Operator [SEL_214] (rows=8116 width=1119)
                                              Output:["_col0"]
                                              Filter Operator [FIL_213] (rows=8116 width=1119)
                                                predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1999-05-01 00:00:00' AND TIMESTAMP'1999-06-30 00:00:00' and d_date_sk is not null)
                                                TableScan [TS_3] (rows=73049 width=1119)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date"]
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_239]
                                            PartitionCols:_col0
                                            Select Operator [SEL_238] (rows=144002668 width=135)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Filter Operator [FIL_237] (rows=144002668 width=135)
                                                predicate:((ws_ship_addr_sk BETWEEN DynamicValue(RS_53_customer_address_ca_address_sk_min) AND DynamicValue(RS_53_customer_address_ca_address_sk_max) and in_bloom_filter(ws_ship_addr_sk, DynamicValue(RS_53_customer_address_ca_address_sk_bloom_filter))) and (ws_ship_date_sk BETWEEN DynamicValue(RS_50_date_dim_d_date_sk_min) AND DynamicValue(RS_50_date_dim_d_date_sk_max) and in_bloom_filter(ws_ship_date_sk, DynamicValue(RS_50_date_dim_d_date_sk_bloom_filter))) and (ws_web_site_sk BETWEEN DynamicValue(RS_56_web_site_web_site_sk_min) AND DynamicValue(RS_56_web_site_web_site_sk_max) and in_bloom_filter(ws_web_site_sk, DynamicValue(RS_56_web_site_web_site_sk_bloom_filter))) and ws_order_number is not null and ws_ship_addr_sk is not null and ws_ship_date_sk is not null and ws_web_site_sk is not null)
                                                TableScan [TS_0] (rows=144002668 width=135)
                                                  default@web_sales,ws1,Tbl:COMPLETE,Col:NONE,Output:["ws_ship_date_sk","ws_ship_addr_sk","ws_web_site_sk","ws_order_number","ws_ext_ship_cost","ws_net_profit"]
                                                <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_220]
                                                    Group By Operator [GBY_219] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_218]
                                                        Group By Operator [GBY_217] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_216] (rows=8116 width=1119)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_214]
                                                <-Reducer 12 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_228]
                                                    Group By Operator [GBY_227] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=20000000)"]
                                                    <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_226]
                                                        Group By Operator [GBY_225] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=20000000)"]
                                                          Select Operator [SEL_224] (rows=20000000 width=1014)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_222]
                                                <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_236]
                                                    Group By Operator [GBY_235] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_234]
                                                        Group By Operator [GBY_233] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_232] (rows=42 width=1850)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_230]

