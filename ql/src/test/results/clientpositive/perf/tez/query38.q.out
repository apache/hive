PREHOOK: query: explain
select  count(*) from (
    select distinct c_last_name, c_first_name, d_date
    from store_sales, date_dim, customer
          where store_sales.ss_sold_date_sk = date_dim.d_date_sk
      and store_sales.ss_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from catalog_sales, date_dim, customer
          where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
      and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from web_sales, date_dim, customer
          where web_sales.ws_sold_date_sk = date_dim.d_date_sk
      and web_sales.ws_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
) hot_cust
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  count(*) from (
    select distinct c_last_name, c_first_name, d_date
    from store_sales, date_dim, customer
          where store_sales.ss_sold_date_sk = date_dim.d_date_sk
      and store_sales.ss_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from catalog_sales, date_dim, customer
          where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
      and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from web_sales, date_dim, customer
          where web_sales.ws_sold_date_sk = date_dim.d_date_sk
      and web_sales.ws_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
) hot_cust
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 15 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 12 <- Map 17 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 13 <- Map 15 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Map 15 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 16 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_147]
        Limit [LIM_146] (rows=1 width=16)
          Number of rows:100
          Group By Operator [GBY_145] (rows=1 width=16)
            Output:["_col0"],aggregations:["count(VALUE._col0)"]
          <-Reducer 6 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_144]
              Group By Operator [GBY_143] (rows=1 width=16)
                Output:["_col0"],aggregations:["count()"]
                Select Operator [SEL_142] (rows=1 width=108)
                  Filter Operator [FIL_141] (rows=1 width=108)
                    predicate:(_col3 = 3L)
                    Select Operator [SEL_140] (rows=152458212 width=108)
                      Output:["_col3"]
                      Group By Operator [GBY_139] (rows=152458212 width=108)
                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                      <-Union 5 [SIMPLE_EDGE]
                        <-Reducer 11 [CONTAINS] vectorized
                          Reduce Output Operator [RS_155]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_154] (rows=304916424 width=108)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                              Group By Operator [GBY_153] (rows=87116929 width=135)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                Select Operator [SEL_152] (rows=174233858 width=135)
                                  Output:["_col0","_col1","_col2"]
                                  Group By Operator [GBY_151] (rows=174233858 width=135)
                                    Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 10 [SIMPLE_EDGE]
                                    SHUFFLE [RS_42]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_41] (rows=348467716 width=135)
                                        Output:["_col0","_col1","_col2"],keys:_col7, _col6, _col3
                                        Merge Join Operator [MERGEJOIN_118] (rows=348467716 width=135)
                                          Conds:RS_37._col1=RS_132._col0(Inner),Output:["_col3","_col6","_col7"]
                                        <-Map 15 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_132]
                                            PartitionCols:_col0
                                            Select Operator [SEL_130] (rows=80000000 width=860)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_129] (rows=80000000 width=860)
                                                predicate:c_customer_sk is not null
                                                TableScan [TS_6] (rows=80000000 width=860)
                                                  default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_first_name","c_last_name"]
                                        <-Reducer 9 [SIMPLE_EDGE]
                                          SHUFFLE [RS_37]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_117] (rows=316788826 width=135)
                                              Conds:RS_150._col0=RS_127._col0(Inner),Output:["_col1","_col3"]
                                            <-Map 8 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_127]
                                                PartitionCols:_col0
                                                Select Operator [SEL_125] (rows=8116 width=1119)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_124] (rows=8116 width=1119)
                                                    predicate:(d_date_sk is not null and d_month_seq BETWEEN 1212 AND 1223)
                                                    TableScan [TS_3] (rows=73049 width=1119)
                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date","d_month_seq"]
                                            <-Map 16 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_150]
                                                PartitionCols:_col0
                                                Select Operator [SEL_149] (rows=287989836 width=135)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_148] (rows=287989836 width=135)
                                                    predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                    TableScan [TS_25] (rows=287989836 width=135)
                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk"]
                        <-Reducer 14 [CONTAINS] vectorized
                          Reduce Output Operator [RS_163]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_162] (rows=304916424 width=108)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                              Group By Operator [GBY_161] (rows=43560808 width=135)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                Select Operator [SEL_160] (rows=87121617 width=135)
                                  Output:["_col0","_col1","_col2"]
                                  Group By Operator [GBY_159] (rows=87121617 width=135)
                                    Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 13 [SIMPLE_EDGE]
                                    SHUFFLE [RS_68]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_67] (rows=174243235 width=135)
                                        Output:["_col0","_col1","_col2"],keys:_col7, _col6, _col3
                                        Merge Join Operator [MERGEJOIN_120] (rows=174243235 width=135)
                                          Conds:RS_63._col1=RS_133._col0(Inner),Output:["_col3","_col6","_col7"]
                                        <-Map 15 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_133]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_130]
                                        <-Reducer 12 [SIMPLE_EDGE]
                                          SHUFFLE [RS_63]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_119] (rows=158402938 width=135)
                                              Conds:RS_158._col0=RS_128._col0(Inner),Output:["_col1","_col3"]
                                            <-Map 8 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_128]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_125]
                                            <-Map 17 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_158]
                                                PartitionCols:_col0
                                                Select Operator [SEL_157] (rows=144002668 width=135)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_156] (rows=144002668 width=135)
                                                    predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                    TableScan [TS_51] (rows=144002668 width=135)
                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_customer_sk"]
                        <-Reducer 4 [CONTAINS] vectorized
                          Reduce Output Operator [RS_138]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_137] (rows=304916424 width=108)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                              Group By Operator [GBY_136] (rows=174238687 width=88)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                Select Operator [SEL_135] (rows=348477374 width=88)
                                  Output:["_col0","_col1","_col2"]
                                  Group By Operator [GBY_134] (rows=348477374 width=88)
                                    Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 3 [SIMPLE_EDGE]
                                    SHUFFLE [RS_17]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_16] (rows=696954748 width=88)
                                        Output:["_col0","_col1","_col2"],keys:_col7, _col6, _col3
                                        Merge Join Operator [MERGEJOIN_116] (rows=696954748 width=88)
                                          Conds:RS_12._col1=RS_131._col0(Inner),Output:["_col3","_col6","_col7"]
                                        <-Map 15 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_131]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_130]
                                        <-Reducer 2 [SIMPLE_EDGE]
                                          SHUFFLE [RS_12]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_115] (rows=633595212 width=88)
                                              Conds:RS_123._col0=RS_126._col0(Inner),Output:["_col1","_col3"]
                                            <-Map 8 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_126]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_125]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_123]
                                                PartitionCols:_col0
                                                Select Operator [SEL_122] (rows=575995635 width=88)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_121] (rows=575995635 width=88)
                                                    predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                    TableScan [TS_0] (rows=575995635 width=88)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk"]

