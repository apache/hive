PREHOOK: query: explain
select  count(*) from (
    select distinct c_last_name, c_first_name, d_date
    from store_sales, date_dim, customer
          where store_sales.ss_sold_date_sk = date_dim.d_date_sk
      and store_sales.ss_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from catalog_sales, date_dim, customer
          where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
      and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from web_sales, date_dim, customer
          where web_sales.ws_sold_date_sk = date_dim.d_date_sk
      and web_sales.ws_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
) hot_cust
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  count(*) from (
    select distinct c_last_name, c_first_name, d_date
    from store_sales, date_dim, customer
          where store_sales.ss_sold_date_sk = date_dim.d_date_sk
      and store_sales.ss_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from catalog_sales, date_dim, customer
          where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
      and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from web_sales, date_dim, customer
          where web_sales.ws_sold_date_sk = date_dim.d_date_sk
      and web_sales.ws_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
) hot_cust
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Map 19 <- Reducer 13 (BROADCAST_EDGE)
Map 20 <- Reducer 17 (BROADCAST_EDGE)
Reducer 10 <- Map 19 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Map 18 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 13 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 20 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 15 <- Map 18 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 17 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Map 18 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_236]
        Limit [LIM_235] (rows=1 width=8)
          Number of rows:100
          Group By Operator [GBY_234] (rows=1 width=8)
            Output:["_col0"],aggregations:["count(VALUE._col0)"]
          <-Reducer 6 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_233]
              Group By Operator [GBY_232] (rows=1 width=8)
                Output:["_col0"],aggregations:["count()"]
                Select Operator [SEL_231] (rows=1 width=8)
                  Filter Operator [FIL_230] (rows=1 width=8)
                    predicate:(_col3 = 3L)
                    Select Operator [SEL_229] (rows=165330890 width=8)
                      Output:["_col3"]
                      Group By Operator [GBY_228] (rows=165330890 width=282)
                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                      <-Union 5 [SIMPLE_EDGE]
                        <-Reducer 12 [CONTAINS] vectorized
                          Reduce Output Operator [RS_246]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_245] (rows=165330890 width=282)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                              Group By Operator [GBY_244] (rows=49146883 width=282)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                Select Operator [SEL_243] (rows=49146883 width=274)
                                  Output:["_col0","_col1","_col2"]
                                  Group By Operator [GBY_242] (rows=49146883 width=274)
                                    Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 11 [SIMPLE_EDGE]
                                    SHUFFLE [RS_42]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_41] (rows=49146883 width=274)
                                        Output:["_col0","_col1","_col2"],keys:_col7, _col6, _col3
                                        Merge Join Operator [MERGEJOIN_178] (rows=49146883 width=274)
                                          Conds:RS_37._col1=RS_221._col0(Inner),Output:["_col3","_col6","_col7"]
                                        <-Map 18 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_221]
                                            PartitionCols:_col0
                                            Select Operator [SEL_219] (rows=80000000 width=184)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_218] (rows=80000000 width=184)
                                                predicate:c_customer_sk is not null
                                                TableScan [TS_6] (rows=80000000 width=184)
                                                  default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_first_name","c_last_name"]
                                        <-Reducer 10 [SIMPLE_EDGE]
                                          SHUFFLE [RS_37]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_177] (rows=49146883 width=97)
                                              Conds:RS_241._col0=RS_203._col0(Inner),Output:["_col1","_col3"]
                                            <-Map 8 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_203]
                                                PartitionCols:_col0
                                                Select Operator [SEL_200] (rows=317 width=102)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_199] (rows=317 width=102)
                                                    predicate:(d_date_sk is not null and d_month_seq BETWEEN 1212 AND 1223)
                                                    TableScan [TS_3] (rows=73049 width=102)
                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_month_seq"]
                                            <-Map 19 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_241]
                                                PartitionCols:_col0
                                                Select Operator [SEL_240] (rows=285117831 width=7)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_239] (rows=285117831 width=7)
                                                    predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_35_date_dim_d_date_sk_min) AND DynamicValue(RS_35_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_35_date_dim_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                    TableScan [TS_25] (rows=287989836 width=7)
                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk"]
                                                    <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_238]
                                                        Group By Operator [GBY_237] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_211]
                                                            Group By Operator [GBY_208] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_204] (rows=317 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_200]
                        <-Reducer 16 [CONTAINS] vectorized
                          Reduce Output Operator [RS_256]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_255] (rows=165330890 width=282)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                              Group By Operator [GBY_254] (rows=24986582 width=282)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                Select Operator [SEL_253] (rows=24986582 width=274)
                                  Output:["_col0","_col1","_col2"]
                                  Group By Operator [GBY_252] (rows=24986582 width=274)
                                    Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 15 [SIMPLE_EDGE]
                                    SHUFFLE [RS_68]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_67] (rows=24986582 width=274)
                                        Output:["_col0","_col1","_col2"],keys:_col7, _col6, _col3
                                        Merge Join Operator [MERGEJOIN_180] (rows=24986582 width=274)
                                          Conds:RS_63._col1=RS_222._col0(Inner),Output:["_col3","_col6","_col7"]
                                        <-Map 18 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_222]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_219]
                                        <-Reducer 14 [SIMPLE_EDGE]
                                          SHUFFLE [RS_63]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_179] (rows=24986582 width=97)
                                              Conds:RS_251._col0=RS_205._col0(Inner),Output:["_col1","_col3"]
                                            <-Map 8 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_205]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_200]
                                            <-Map 20 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_251]
                                                PartitionCols:_col0
                                                Select Operator [SEL_250] (rows=143930993 width=7)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_249] (rows=143930993 width=7)
                                                    predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_61_date_dim_d_date_sk_min) AND DynamicValue(RS_61_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_61_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                    TableScan [TS_51] (rows=144002668 width=7)
                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk"]
                                                    <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_248]
                                                        Group By Operator [GBY_247] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_212]
                                                            Group By Operator [GBY_209] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_206] (rows=317 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_200]
                        <-Reducer 4 [CONTAINS] vectorized
                          Reduce Output Operator [RS_227]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_226] (rows=165330890 width=282)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                              Group By Operator [GBY_225] (rows=91197425 width=282)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                Select Operator [SEL_224] (rows=91197425 width=274)
                                  Output:["_col0","_col1","_col2"]
                                  Group By Operator [GBY_223] (rows=91197425 width=274)
                                    Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 3 [SIMPLE_EDGE]
                                    SHUFFLE [RS_17]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_16] (rows=91197425 width=274)
                                        Output:["_col0","_col1","_col2"],keys:_col7, _col6, _col3
                                        Merge Join Operator [MERGEJOIN_176] (rows=91197425 width=274)
                                          Conds:RS_12._col1=RS_220._col0(Inner),Output:["_col3","_col6","_col7"]
                                        <-Map 18 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_220]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_219]
                                        <-Reducer 2 [SIMPLE_EDGE]
                                          SHUFFLE [RS_12]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_175] (rows=91197425 width=96)
                                              Conds:RS_217._col0=RS_201._col0(Inner),Output:["_col1","_col3"]
                                            <-Map 8 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_201]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_200]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_217]
                                                PartitionCols:_col0
                                                Select Operator [SEL_216] (rows=525327388 width=7)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_215] (rows=525327388 width=7)
                                                    predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_10_date_dim_d_date_sk_min) AND DynamicValue(RS_10_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_10_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                    TableScan [TS_0] (rows=575995635 width=7)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk"]
                                                    <-Reducer 9 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_214]
                                                        Group By Operator [GBY_213] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_210]
                                                            Group By Operator [GBY_207] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_202] (rows=317 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_200]

