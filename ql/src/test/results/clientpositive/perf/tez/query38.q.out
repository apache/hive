PREHOOK: query: explain
select  count(*) from (
    select distinct c_last_name, c_first_name, d_date
    from store_sales, date_dim, customer
          where store_sales.ss_sold_date_sk = date_dim.d_date_sk
      and store_sales.ss_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from catalog_sales, date_dim, customer
          where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
      and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from web_sales, date_dim, customer
          where web_sales.ws_sold_date_sk = date_dim.d_date_sk
      and web_sales.ws_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
) hot_cust
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  count(*) from (
    select distinct c_last_name, c_first_name, d_date
    from store_sales, date_dim, customer
          where store_sales.ss_sold_date_sk = date_dim.d_date_sk
      and store_sales.ss_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from catalog_sales, date_dim, customer
          where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
      and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from web_sales, date_dim, customer
          where web_sales.ws_sold_date_sk = date_dim.d_date_sk
      and web_sales.ws_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
) hot_cust
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 11 <- Reducer 14 (BROADCAST_EDGE)
Map 19 <- Reducer 16 (BROADCAST_EDGE)
Map 20 <- Reducer 18 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 13 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 16 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 13 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE)
Reducer 18 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 5 <- Union 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Map 1 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 9 <- Map 1 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_237]
        Group By Operator [GBY_236] (rows=1 width=8)
          Output:["_col0"],aggregations:["count(VALUE._col0)"]
        <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
          PARTITION_ONLY_SHUFFLE [RS_235]
            Group By Operator [GBY_234] (rows=1 width=8)
              Output:["_col0"],aggregations:["count()"]
              Select Operator [SEL_233] (rows=1 width=8)
                Filter Operator [FIL_232] (rows=1 width=8)
                  predicate:(_col3 = 3L)
                  Select Operator [SEL_231] (rows=165330890 width=8)
                    Output:["_col3"]
                    Group By Operator [GBY_230] (rows=165330890 width=282)
                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                    <-Union 4 [SIMPLE_EDGE]
                      <-Reducer 10 [CONTAINS] vectorized
                        Reduce Output Operator [RS_257]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_256] (rows=165330890 width=282)
                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                            Group By Operator [GBY_255] (rows=24986582 width=282)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                              Select Operator [SEL_254] (rows=24986582 width=274)
                                Output:["_col0","_col1","_col2"]
                                Group By Operator [GBY_253] (rows=24986582 width=274)
                                  Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                <-Reducer 9 [SIMPLE_EDGE]
                                  SHUFFLE [RS_71]
                                    PartitionCols:_col0, _col1, _col2
                                    Group By Operator [GBY_70] (rows=24986582 width=274)
                                      Output:["_col0","_col1","_col2"],keys:_col2, _col1, _col6
                                      Merge Join Operator [MERGEJOIN_182] (rows=24986582 width=274)
                                        Conds:RS_205._col0=RS_67._col1(Inner),Output:["_col1","_col2","_col6"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_205]
                                          PartitionCols:_col0
                                          Select Operator [SEL_202] (rows=80000000 width=184)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_201] (rows=80000000 width=184)
                                              predicate:c_customer_sk is not null
                                              TableScan [TS_0] (rows=80000000 width=184)
                                                default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_first_name","c_last_name"]
                                      <-Reducer 17 [SIMPLE_EDGE]
                                        SHUFFLE [RS_67]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_181] (rows=24986582 width=97)
                                            Conds:RS_252._col0=RS_212._col0(Inner),Output:["_col1","_col3"]
                                          <-Map 13 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_212]
                                              PartitionCols:_col0
                                              Select Operator [SEL_207] (rows=317 width=98)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_206] (rows=317 width=102)
                                                  predicate:(d_month_seq BETWEEN 1212 AND 1223 and d_date_sk is not null)
                                                  TableScan [TS_6] (rows=73049 width=102)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_month_seq"]
                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_252]
                                              PartitionCols:_col0
                                              Select Operator [SEL_251] (rows=143930993 width=7)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_250] (rows=143930993 width=7)
                                                  predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_63_date_dim_d_date_sk_min) AND DynamicValue(RS_63_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_63_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_56] (rows=144002668 width=7)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk"]
                                                  <-Reducer 18 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_249]
                                                      Group By Operator [GBY_248] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_219]
                                                          Group By Operator [GBY_216] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_213] (rows=317 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_207]
                      <-Reducer 3 [CONTAINS] vectorized
                        Reduce Output Operator [RS_229]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_228] (rows=165330890 width=282)
                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                            Group By Operator [GBY_227] (rows=91197425 width=282)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                              Select Operator [SEL_226] (rows=91197425 width=274)
                                Output:["_col0","_col1","_col2"]
                                Group By Operator [GBY_225] (rows=91197425 width=274)
                                  Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_18]
                                    PartitionCols:_col0, _col1, _col2
                                    Group By Operator [GBY_17] (rows=91197425 width=274)
                                      Output:["_col0","_col1","_col2"],keys:_col2, _col1, _col6
                                      Merge Join Operator [MERGEJOIN_178] (rows=91197425 width=274)
                                        Conds:RS_203._col0=RS_14._col1(Inner),Output:["_col1","_col2","_col6"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_203]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_202]
                                      <-Reducer 12 [SIMPLE_EDGE]
                                        SHUFFLE [RS_14]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_177] (rows=91197425 width=96)
                                            Conds:RS_224._col0=RS_208._col0(Inner),Output:["_col1","_col3"]
                                          <-Map 13 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_208]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_207]
                                          <-Map 11 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_224]
                                              PartitionCols:_col0
                                              Select Operator [SEL_223] (rows=525327388 width=7)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_222] (rows=525327388 width=7)
                                                  predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_10_date_dim_d_date_sk_min) AND DynamicValue(RS_10_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_10_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_3] (rows=575995635 width=7)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk"]
                                                  <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_221]
                                                      Group By Operator [GBY_220] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_217]
                                                          Group By Operator [GBY_214] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_209] (rows=317 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_207]
                      <-Reducer 8 [CONTAINS] vectorized
                        Reduce Output Operator [RS_247]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_246] (rows=165330890 width=282)
                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                            Group By Operator [GBY_245] (rows=49146883 width=282)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                              Select Operator [SEL_244] (rows=49146883 width=274)
                                Output:["_col0","_col1","_col2"]
                                Group By Operator [GBY_243] (rows=49146883 width=274)
                                  Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                <-Reducer 7 [SIMPLE_EDGE]
                                  SHUFFLE [RS_44]
                                    PartitionCols:_col0, _col1, _col2
                                    Group By Operator [GBY_43] (rows=49146883 width=274)
                                      Output:["_col0","_col1","_col2"],keys:_col2, _col1, _col6
                                      Merge Join Operator [MERGEJOIN_180] (rows=49146883 width=274)
                                        Conds:RS_204._col0=RS_40._col1(Inner),Output:["_col1","_col2","_col6"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_204]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_202]
                                      <-Reducer 15 [SIMPLE_EDGE]
                                        SHUFFLE [RS_40]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_179] (rows=49146883 width=97)
                                            Conds:RS_242._col0=RS_210._col0(Inner),Output:["_col1","_col3"]
                                          <-Map 13 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_210]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_207]
                                          <-Map 19 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_242]
                                              PartitionCols:_col0
                                              Select Operator [SEL_241] (rows=285117831 width=7)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_240] (rows=285117831 width=7)
                                                  predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_36_date_dim_d_date_sk_min) AND DynamicValue(RS_36_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_36_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_29] (rows=287989836 width=7)
                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk"]
                                                  <-Reducer 16 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_239]
                                                      Group By Operator [GBY_238] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_218]
                                                          Group By Operator [GBY_215] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_211] (rows=317 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_207]

