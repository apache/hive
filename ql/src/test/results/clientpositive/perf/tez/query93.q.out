PREHOOK: query: explain
select  ss_customer_sk
            ,sum(act_sales) sumsales
      from (select ss_item_sk
                  ,ss_ticket_number
                  ,ss_customer_sk
                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                            else (ss_quantity*ss_sales_price) end act_sales
            from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
                                                               and sr_ticket_number = ss_ticket_number)
                ,reason
            where sr_reason_sk = r_reason_sk
              and r_reason_desc = 'Did not like the warranty') t
      group by ss_customer_sk
      order by sumsales, ss_customer_sk
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@reason
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  ss_customer_sk
            ,sum(act_sales) sumsales
      from (select ss_item_sk
                  ,ss_ticket_number
                  ,ss_customer_sk
                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                            else (ss_quantity*ss_sales_price) end act_sales
            from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
                                                               and sr_ticket_number = ss_ticket_number)
                ,reason
            where sr_reason_sk = r_reason_sk
              and r_reason_desc = 'Did not like the warranty') t
      group by ss_customer_sk
      order by sumsales, ss_customer_sk
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@reason
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 9 <- Reducer 6 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Map 9 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_82]
        Limit [LIM_81] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_80] (rows=316797606 width=88)
            Output:["_col0","_col1"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_79]
              Group By Operator [GBY_78] (rows=316797606 width=88)
                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
              <-Reducer 3 [SIMPLE_EDGE]
                SHUFFLE [RS_18]
                  PartitionCols:_col0
                  Group By Operator [GBY_17] (rows=633595212 width=88)
                    Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                    Select Operator [SEL_15] (rows=633595212 width=88)
                      Output:["_col0","_col1"]
                      Merge Join Operator [MERGEJOIN_64] (rows=633595212 width=88)
                        Conds:RS_12._col0, _col2=RS_77._col0, _col2(Inner),Output:["_col3","_col7","_col9","_col10"]
                      <-Reducer 2 [SIMPLE_EDGE]
                        PARTITION_ONLY_SHUFFLE [RS_12]
                          PartitionCols:_col0, _col2
                          Merge Join Operator [MERGEJOIN_63] (rows=63350266 width=77)
                            Conds:RS_67._col1=RS_70._col0(Inner),Output:["_col0","_col2","_col3"]
                          <-Map 1 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_67]
                              PartitionCols:_col1
                              Select Operator [SEL_66] (rows=57591150 width=77)
                                Output:["_col0","_col1","_col2","_col3"]
                                Filter Operator [FIL_65] (rows=57591150 width=77)
                                  predicate:(sr_item_sk is not null and sr_reason_sk is not null and sr_ticket_number is not null)
                                  TableScan [TS_0] (rows=57591150 width=77)
                                    default@store_returns,store_returns,Tbl:COMPLETE,Col:NONE,Output:["sr_item_sk","sr_reason_sk","sr_ticket_number","sr_return_quantity"]
                          <-Map 8 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_70]
                              PartitionCols:_col0
                              Select Operator [SEL_69] (rows=36 width=200)
                                Output:["_col0"]
                                Filter Operator [FIL_68] (rows=36 width=200)
                                  predicate:((r_reason_desc = 'Did not like the warranty') and r_reason_sk is not null)
                                  TableScan [TS_3] (rows=72 width=200)
                                    default@reason,reason,Tbl:COMPLETE,Col:NONE,Output:["r_reason_sk","r_reason_desc"]
                      <-Map 9 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_77]
                          PartitionCols:_col0, _col2
                          Select Operator [SEL_76] (rows=575995635 width=88)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Filter Operator [FIL_75] (rows=575995635 width=88)
                              predicate:((ss_item_sk BETWEEN DynamicValue(RS_12_store_returns_sr_item_sk_min) AND DynamicValue(RS_12_store_returns_sr_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_12_store_returns_sr_item_sk_bloom_filter))) and (ss_ticket_number BETWEEN DynamicValue(RS_12_store_returns_sr_ticket_number_min) AND DynamicValue(RS_12_store_returns_sr_ticket_number_max) and in_bloom_filter(ss_ticket_number, DynamicValue(RS_12_store_returns_sr_ticket_number_bloom_filter))) and ss_item_sk is not null and ss_ticket_number is not null)
                              TableScan [TS_6] (rows=575995635 width=88)
                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_item_sk","ss_customer_sk","ss_ticket_number","ss_quantity","ss_sales_price"]
                              <-Reducer 6 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_72]
                                  Group By Operator [GBY_71] (rows=1 width=12)
                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=63350264)"]
                                  <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                    PARTITION_ONLY_SHUFFLE [RS_55]
                                      Group By Operator [GBY_54] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=63350264)"]
                                        Select Operator [SEL_53] (rows=63350266 width=77)
                                          Output:["_col0"]
                                           Please refer to the previous Merge Join Operator [MERGEJOIN_63]
                              <-Reducer 7 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_74]
                                  Group By Operator [GBY_73] (rows=1 width=12)
                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=63350264)"]
                                  <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                    PARTITION_ONLY_SHUFFLE [RS_60]
                                      Group By Operator [GBY_59] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=63350264)"]
                                        Select Operator [SEL_58] (rows=63350266 width=77)
                                          Output:["_col0"]
                                           Please refer to the previous Merge Join Operator [MERGEJOIN_63]

