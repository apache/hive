PREHOOK: query: explain
select  ss_customer_sk
            ,sum(act_sales) sumsales
      from (select ss_item_sk
                  ,ss_ticket_number
                  ,ss_customer_sk
                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                            else (ss_quantity*ss_sales_price) end act_sales
            from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
                                                               and sr_ticket_number = ss_ticket_number)
                ,reason
            where sr_reason_sk = r_reason_sk
              and r_reason_desc = 'Did not like the warranty') t
      group by ss_customer_sk
      order by sumsales, ss_customer_sk
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@reason
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  ss_customer_sk
            ,sum(act_sales) sumsales
      from (select ss_item_sk
                  ,ss_ticket_number
                  ,ss_customer_sk
                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                            else (ss_quantity*ss_sales_price) end act_sales
            from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
                                                               and sr_ticket_number = ss_ticket_number)
                ,reason
            where sr_reason_sk = r_reason_sk
              and r_reason_desc = 'Did not like the warranty') t
      group by ss_customer_sk
      order by sumsales, ss_customer_sk
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@reason
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 8 <- Reducer 6 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 3 <- Map 8 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_92]
        Limit [LIM_91] (rows=100 width=112)
          Number of rows:100
          Select Operator [SEL_90] (rows=38308 width=108)
            Output:["_col0","_col1"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_89]
              Top N Key Operator [TNK_88] (rows=38308 width=112)
                keys:_col1, _col0,top n:100
                Group By Operator [GBY_87] (rows=38308 width=112)
                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                <-Reducer 3 [SIMPLE_EDGE]
                  SHUFFLE [RS_18]
                    PartitionCols:_col0
                    Group By Operator [GBY_17] (rows=306464 width=112)
                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                      Select Operator [SEL_15] (rows=15586502 width=119)
                        Output:["_col0","_col1"]
                        Merge Join Operator [MERGEJOIN_75] (rows=15586502 width=119)
                          Conds:RS_12._col0, _col2=RS_86._col0, _col2(Inner),Output:["_col3","_col4","_col7","_col9","_col10","_col11"]
                        <-Reducer 2 [SIMPLE_EDGE]
                          PARTITION_ONLY_SHUFFLE [RS_12]
                            PartitionCols:_col0, _col2
                            Merge Join Operator [MERGEJOIN_74] (rows=1522298 width=12)
                              Conds:RS_78._col1=RS_81._col0(Inner),Output:["_col0","_col2","_col3","_col4"]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_78]
                                PartitionCols:_col1
                                Select Operator [SEL_77] (rows=55574563 width=19)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_76] (rows=55574563 width=15)
                                    predicate:(sr_reason_sk is not null and sr_item_sk is not null and sr_ticket_number is not null)
                                    TableScan [TS_0] (rows=57591150 width=15)
                                      default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_reason_sk","sr_ticket_number","sr_return_quantity"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_81]
                                PartitionCols:_col0
                                Select Operator [SEL_80] (rows=1 width=4)
                                  Output:["_col0"]
                                  Filter Operator [FIL_79] (rows=1 width=101)
                                    predicate:((r_reason_desc = 'Did not like the warranty') and r_reason_sk is not null)
                                    TableScan [TS_3] (rows=72 width=101)
                                      default@reason,reason,Tbl:COMPLETE,Col:COMPLETE,Output:["r_reason_sk","r_reason_desc"]
                        <-Map 8 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_86]
                            PartitionCols:_col0, _col2
                            Select Operator [SEL_85] (rows=575995635 width=234)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              Filter Operator [FIL_84] (rows=575995635 width=122)
                                predicate:(ss_item_sk is not null and ss_ticket_number is not null and ss_item_sk BETWEEN DynamicValue(RS[73]_col0) AND DynamicValue(RS[73]_col1) and ss_ticket_number BETWEEN DynamicValue(RS[73]_col2) AND DynamicValue(RS[73]_col3) and in_bloom_filter(hash(ss_item_sk,ss_ticket_number), DynamicValue(RS[73]_col4)))
                                TableScan [TS_6] (rows=575995635 width=122)
                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk","ss_customer_sk","ss_ticket_number","ss_quantity","ss_sales_price"]
                                <-Reducer 6 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_83]
                                    Group By Operator [GBY_82] (rows=1 width=160)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","min(VALUE._col2)","max(VALUE._col3)","bloom_filter(VALUE._col4, expectedEntries=1000000)"]
                                    <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                      PARTITION_ONLY_SHUFFLE [RS_71]
                                        Group By Operator [GBY_70] (rows=1 width=160)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["min(_col0)","max(_col0)","min(_col1)","max(_col1)","bloom_filter(_col3, expectedEntries=1000000)"]
                                          Select Operator [SEL_69] (rows=1522298 width=12)
                                            Output:["_col0","_col1","_col3"]
                                             Please refer to the previous Merge Join Operator [MERGEJOIN_74]

