PREHOOK: query: explain
select  i_item_id
       ,i_item_desc
       ,s_state
       ,count(ss_quantity) as store_sales_quantitycount
       ,avg(ss_quantity) as store_sales_quantityave
       ,stddev_samp(ss_quantity) as store_sales_quantitystdev
       ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
       ,count(sr_return_quantity) as_store_returns_quantitycount
       ,avg(sr_return_quantity) as_store_returns_quantityave
       ,stddev_samp(sr_return_quantity) as_store_returns_quantitystdev
       ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
       ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
       ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitystdev
       ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
     ,store_returns
     ,catalog_sales
     ,date_dim d1
     ,date_dim d2
     ,date_dim d3
     ,store
     ,item
 where d1.d_quarter_name = '2000Q1'
   and d1.d_date_sk = ss_sold_date_sk
   and i_item_sk = ss_item_sk
   and s_store_sk = ss_store_sk
   and ss_customer_sk = sr_customer_sk
   and ss_item_sk = sr_item_sk
   and ss_ticket_number = sr_ticket_number
   and sr_returned_date_sk = d2.d_date_sk
   and d2.d_quarter_name in ('2000Q1','2000Q2','2000Q3')
   and sr_customer_sk = cs_bill_customer_sk
   and sr_item_sk = cs_item_sk
   and cs_sold_date_sk = d3.d_date_sk
   and d3.d_quarter_name in ('2000Q1','2000Q2','2000Q3')
 group by i_item_id
         ,i_item_desc
         ,s_state
 order by i_item_id
         ,i_item_desc
         ,s_state
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  i_item_id
       ,i_item_desc
       ,s_state
       ,count(ss_quantity) as store_sales_quantitycount
       ,avg(ss_quantity) as store_sales_quantityave
       ,stddev_samp(ss_quantity) as store_sales_quantitystdev
       ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
       ,count(sr_return_quantity) as_store_returns_quantitycount
       ,avg(sr_return_quantity) as_store_returns_quantityave
       ,stddev_samp(sr_return_quantity) as_store_returns_quantitystdev
       ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
       ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
       ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitystdev
       ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
     ,store_returns
     ,catalog_sales
     ,date_dim d1
     ,date_dim d2
     ,date_dim d3
     ,store
     ,item
 where d1.d_quarter_name = '2000Q1'
   and d1.d_date_sk = ss_sold_date_sk
   and i_item_sk = ss_item_sk
   and s_store_sk = ss_store_sk
   and ss_customer_sk = sr_customer_sk
   and ss_item_sk = sr_item_sk
   and ss_ticket_number = sr_ticket_number
   and sr_returned_date_sk = d2.d_date_sk
   and d2.d_quarter_name in ('2000Q1','2000Q2','2000Q3')
   and sr_customer_sk = cs_bill_customer_sk
   and sr_item_sk = cs_item_sk
   and cs_sold_date_sk = d3.d_date_sk
   and d3.d_quarter_name in ('2000Q1','2000Q2','2000Q3')
 group by i_item_id
         ,i_item_desc
         ,s_state
 order by i_item_id
         ,i_item_desc
         ,s_state
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 14 (BROADCAST_EDGE), Reducer 15 (BROADCAST_EDGE), Reducer 17 (BROADCAST_EDGE), Reducer 21 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Map 18 <- Reducer 12 (BROADCAST_EDGE), Reducer 14 (BROADCAST_EDGE), Reducer 15 (BROADCAST_EDGE), Reducer 17 (BROADCAST_EDGE)
Reducer 10 <- Map 18 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 12 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Map 19 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Reducer 13 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 16 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 21 <- Map 20 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 16 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 11 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 20 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_269]
        Limit [LIM_268] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_267] (rows=421657640 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_266]
              Select Operator [SEL_265] (rows=421657640 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                Group By Operator [GBY_264] (rows=421657640 width=88)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","count(VALUE._col4)","sum(VALUE._col5)","sum(VALUE._col6)","sum(VALUE._col7)","count(VALUE._col8)","sum(VALUE._col9)","sum(VALUE._col10)","sum(VALUE._col11)"],keys:KEY._col0, KEY._col1, KEY._col2
                <-Reducer 5 [SIMPLE_EDGE]
                  SHUFFLE [RS_50]
                    PartitionCols:_col0, _col1, _col2
                    Group By Operator [GBY_49] (rows=843315281 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"],aggregations:["count(_col3)","sum(_col3)","sum(_col7)","sum(_col6)","count(_col4)","sum(_col4)","sum(_col9)","sum(_col8)","count(_col5)","sum(_col5)","sum(_col11)","sum(_col10)"],keys:_col0, _col1, _col2
                      Select Operator [SEL_47] (rows=843315281 width=88)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                        Merge Join Operator [MERGEJOIN_212] (rows=843315281 width=88)
                          Conds:RS_44._col3=RS_250._col0(Inner),Output:["_col5","_col9","_col10","_col14","_col21","_col25"]
                        <-Map 20 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_250]
                            PartitionCols:_col0
                            Select Operator [SEL_249] (rows=1704 width=1910)
                              Output:["_col0","_col1"]
                              Filter Operator [FIL_248] (rows=1704 width=1910)
                                predicate:s_store_sk is not null
                                TableScan [TS_32] (rows=1704 width=1910)
                                  default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_state"]
                        <-Reducer 4 [SIMPLE_EDGE]
                          SHUFFLE [RS_44]
                            PartitionCols:_col3
                            Merge Join Operator [MERGEJOIN_211] (rows=766650239 width=88)
                              Conds:RS_41._col1, _col2, _col4=RS_42._col7, _col8, _col9(Inner),Output:["_col3","_col5","_col9","_col10","_col14","_col21"]
                            <-Reducer 11 [SIMPLE_EDGE]
                              SHUFFLE [RS_42]
                                PartitionCols:_col7, _col8, _col9
                                Merge Join Operator [MERGEJOIN_210] (rows=348467716 width=135)
                                  Conds:RS_28._col2, _col1=RS_29._col1, _col2(Inner),Output:["_col3","_col7","_col8","_col9","_col10"]
                                <-Reducer 13 [SIMPLE_EDGE]
                                  PARTITION_ONLY_SHUFFLE [RS_29]
                                    PartitionCols:_col1, _col2
                                    Merge Join Operator [MERGEJOIN_209] (rows=63350266 width=77)
                                      Conds:RS_241._col0=RS_223._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                    <-Map 8 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_223]
                                        PartitionCols:_col0
                                        Select Operator [SEL_218] (rows=36525 width=1119)
                                          Output:["_col0"]
                                          Filter Operator [FIL_215] (rows=36525 width=1119)
                                            predicate:((d_quarter_name) IN ('2000Q1', '2000Q2', '2000Q3') and d_date_sk is not null)
                                            TableScan [TS_3] (rows=73049 width=1119)
                                              default@date_dim,d1,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_quarter_name"]
                                    <-Map 19 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_241]
                                        PartitionCols:_col0
                                        Select Operator [SEL_240] (rows=57591150 width=77)
                                          Output:["_col0","_col1","_col2","_col3","_col4"]
                                          Filter Operator [FIL_239] (rows=57591150 width=77)
                                            predicate:(sr_customer_sk is not null and sr_item_sk is not null and sr_returned_date_sk is not null and sr_ticket_number is not null)
                                            TableScan [TS_15] (rows=57591150 width=77)
                                              default@store_returns,store_returns,Tbl:COMPLETE,Col:NONE,Output:["sr_returned_date_sk","sr_item_sk","sr_customer_sk","sr_ticket_number","sr_return_quantity"]
                                <-Reducer 10 [SIMPLE_EDGE]
                                  SHUFFLE [RS_28]
                                    PartitionCols:_col2, _col1
                                    Merge Join Operator [MERGEJOIN_208] (rows=316788826 width=135)
                                      Conds:RS_263._col0=RS_221._col0(Inner),Output:["_col1","_col2","_col3"]
                                    <-Map 8 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_221]
                                        PartitionCols:_col0
                                        Select Operator [SEL_217] (rows=36525 width=1119)
                                          Output:["_col0"]
                                          Filter Operator [FIL_214] (rows=36525 width=1119)
                                            predicate:((d_quarter_name) IN ('2000Q1', '2000Q2', '2000Q3') and d_date_sk is not null)
                                             Please refer to the previous TableScan [TS_3]
                                    <-Map 18 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_263]
                                        PartitionCols:_col0
                                        Select Operator [SEL_262] (rows=287989836 width=135)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Filter Operator [FIL_261] (rows=287989836 width=135)
                                            predicate:((cs_bill_customer_sk BETWEEN DynamicValue(RS_29_store_returns_sr_customer_sk_min) AND DynamicValue(RS_29_store_returns_sr_customer_sk_max) and in_bloom_filter(cs_bill_customer_sk, DynamicValue(RS_29_store_returns_sr_customer_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_29_store_returns_sr_item_sk_min) AND DynamicValue(RS_29_store_returns_sr_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_29_store_returns_sr_item_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_39_item_i_item_sk_min) AND DynamicValue(RS_39_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_39_item_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_26_d3_d_date_sk_min) AND DynamicValue(RS_26_d3_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_26_d3_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                            TableScan [TS_9] (rows=287989836 width=135)
                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity"]
                                            <-Reducer 14 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_244]
                                                Group By Operator [GBY_242] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=63350264)"]
                                                <-Reducer 13 [CUSTOM_SIMPLE_EDGE]
                                                  PARTITION_ONLY_SHUFFLE [RS_110]
                                                    Group By Operator [GBY_109] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=63350264)"]
                                                      Select Operator [SEL_108] (rows=63350266 width=77)
                                                        Output:["_col0"]
                                                         Please refer to the previous Merge Join Operator [MERGEJOIN_209]
                                            <-Reducer 15 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_247]
                                                Group By Operator [GBY_245] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=63350264)"]
                                                <-Reducer 13 [CUSTOM_SIMPLE_EDGE]
                                                  PARTITION_ONLY_SHUFFLE [RS_125]
                                                    Group By Operator [GBY_124] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=63350264)"]
                                                      Select Operator [SEL_123] (rows=63350266 width=77)
                                                        Output:["_col0"]
                                                         Please refer to the previous Merge Join Operator [MERGEJOIN_209]
                                            <-Reducer 17 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_238]
                                                Group By Operator [GBY_236] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_235]
                                                    Group By Operator [GBY_234] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_233] (rows=462000 width=1436)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_231] (rows=462000 width=1436)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_230] (rows=462000 width=1436)
                                                            predicate:i_item_sk is not null
                                                            TableScan [TS_6] (rows=462000 width=1436)
                                                              default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_id","i_item_desc"]
                                            <-Reducer 12 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_260]
                                                Group By Operator [GBY_259] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_227]
                                                    Group By Operator [GBY_225] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_222] (rows=36525 width=1119)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_217]
                            <-Reducer 3 [SIMPLE_EDGE]
                              SHUFFLE [RS_41]
                                PartitionCols:_col1, _col2, _col4
                                Merge Join Operator [MERGEJOIN_207] (rows=696954748 width=88)
                                  Conds:RS_38._col1=RS_232._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col9","_col10"]
                                <-Map 16 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_232]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_231]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_38]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_206] (rows=633595212 width=88)
                                      Conds:RS_258._col0=RS_219._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                    <-Map 8 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_219]
                                        PartitionCols:_col0
                                        Select Operator [SEL_216] (rows=36524 width=1119)
                                          Output:["_col0"]
                                          Filter Operator [FIL_213] (rows=36524 width=1119)
                                            predicate:((d_quarter_name = '2000Q1') and d_date_sk is not null)
                                             Please refer to the previous TableScan [TS_3]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_258]
                                        PartitionCols:_col0
                                        Select Operator [SEL_257] (rows=575995635 width=88)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Filter Operator [FIL_256] (rows=575995635 width=88)
                                            predicate:((ss_customer_sk BETWEEN DynamicValue(RS_29_store_returns_sr_customer_sk_min) AND DynamicValue(RS_29_store_returns_sr_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_29_store_returns_sr_customer_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_29_store_returns_sr_item_sk_min) AND DynamicValue(RS_29_store_returns_sr_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_29_store_returns_sr_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_39_item_i_item_sk_min) AND DynamicValue(RS_39_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_39_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_36_d1_d_date_sk_min) AND DynamicValue(RS_36_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_36_d1_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_45_store_s_store_sk_min) AND DynamicValue(RS_45_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_45_store_s_store_sk_bloom_filter))) and ss_customer_sk is not null and ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                            TableScan [TS_0] (rows=575995635 width=88)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_quantity"]
                                            <-Reducer 14 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_243]
                                                 Please refer to the previous Group By Operator [GBY_242]
                                            <-Reducer 15 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_246]
                                                 Please refer to the previous Group By Operator [GBY_245]
                                            <-Reducer 17 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_237]
                                                 Please refer to the previous Group By Operator [GBY_236]
                                            <-Reducer 21 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_255]
                                                Group By Operator [GBY_254] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_253]
                                                    Group By Operator [GBY_252] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_251] (rows=1704 width=1910)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_249]
                                            <-Reducer 9 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_229]
                                                Group By Operator [GBY_228] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_226]
                                                    Group By Operator [GBY_224] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_220] (rows=36524 width=1119)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_216]

