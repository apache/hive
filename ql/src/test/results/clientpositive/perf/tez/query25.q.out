PREHOOK: query: explain
select  
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 ,sum(ss_net_profit) as store_sales_profit
 ,sum(sr_net_loss) as store_returns_loss
 ,sum(cs_net_profit) as catalog_sales_profit
 from
 store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where
 d1.d_moy = 4
 and d1.d_year = 2000
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_moy               between 4 and  10
 and d2.d_year              = 2000
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_moy               between 4 and  10 
 and d3.d_year              = 2000
 group by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 order by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 ,sum(ss_net_profit) as store_sales_profit
 ,sum(sr_net_loss) as store_returns_loss
 ,sum(cs_net_profit) as catalog_sales_profit
 from
 store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where
 d1.d_moy = 4
 and d1.d_year = 2000
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_moy               between 4 and  10
 and d2.d_year              = 2000
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_moy               between 4 and  10 
 and d3.d_year              = 2000
 group by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 order by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Map 14 <- Reducer 12 (BROADCAST_EDGE)
Reducer 10 <- Map 14 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 12 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Map 15 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Reducer 11 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 16 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 17 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_253]
        Limit [LIM_252] (rows=100 width=808)
          Number of rows:100
          Select Operator [SEL_251] (rows=97302218447 width=808)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_250]
              Group By Operator [GBY_249] (rows=97302218447 width=808)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
              <-Reducer 5 [SIMPLE_EDGE]
                SHUFFLE [RS_49]
                  PartitionCols:_col0, _col1, _col2, _col3
                  Group By Operator [GBY_48] (rows=97302218447 width=808)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col5)","sum(_col16)","sum(_col10)"],keys:_col19, _col20, _col22, _col23
                    Top N Key Operator [TNK_95] (rows=97302218447 width=807)
                      keys:_col19, _col20, _col22, _col23,top n:100
                      Merge Join Operator [MERGEJOIN_214] (rows=97302218447 width=807)
                        Conds:RS_44._col3=RS_248._col0(Inner),Output:["_col5","_col10","_col16","_col19","_col20","_col22","_col23"]
                      <-Map 17 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_248]
                          PartitionCols:_col0
                          Select Operator [SEL_247] (rows=1704 width=192)
                            Output:["_col0","_col1","_col2"]
                            Filter Operator [FIL_246] (rows=1704 width=192)
                              predicate:s_store_sk is not null
                              TableScan [TS_32] (rows=1704 width=192)
                                default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id","s_store_name"]
                      <-Reducer 4 [SIMPLE_EDGE]
                        SHUFFLE [RS_44]
                          PartitionCols:_col3
                          Merge Join Operator [MERGEJOIN_213] (rows=97302218447 width=623)
                            Conds:RS_41._col1=RS_245._col0(Inner),Output:["_col3","_col5","_col10","_col16","_col19","_col20"]
                          <-Map 16 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_245]
                              PartitionCols:_col0
                              Select Operator [SEL_244] (rows=462000 width=288)
                                Output:["_col0","_col1","_col2"]
                                Filter Operator [FIL_243] (rows=462000 width=288)
                                  predicate:i_item_sk is not null
                                  TableScan [TS_29] (rows=462000 width=288)
                                    default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id","i_item_desc"]
                          <-Reducer 3 [SIMPLE_EDGE]
                            SHUFFLE [RS_41]
                              PartitionCols:_col1
                              Merge Join Operator [MERGEJOIN_212] (rows=97302218447 width=343)
                                Conds:RS_38._col1, _col2, _col4=RS_39._col6, _col7, _col8(Inner),Output:["_col1","_col3","_col5","_col10","_col16"]
                              <-Reducer 11 [SIMPLE_EDGE]
                                SHUFFLE [RS_39]
                                  PartitionCols:_col6, _col7, _col8
                                  Merge Join Operator [MERGEJOIN_211] (rows=10910732684 width=235)
                                    Conds:RS_25._col2, _col1=RS_26._col1, _col2(Inner),Output:["_col3","_col6","_col7","_col8","_col9"]
                                  <-Reducer 10 [SIMPLE_EDGE]
                                    SHUFFLE [RS_25]
                                      PartitionCols:_col2, _col1
                                      Merge Join Operator [MERGEJOIN_209] (rows=285117831 width=119)
                                        Conds:RS_239._col0=RS_223._col0(Inner),Output:["_col1","_col2","_col3"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_223]
                                          PartitionCols:_col0
                                          Select Operator [SEL_219] (rows=351 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_216] (rows=351 width=12)
                                              predicate:((d_year = 2000) and d_moy BETWEEN 4 AND 10 and d_date_sk is not null)
                                              TableScan [TS_3] (rows=73049 width=12)
                                                default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                      <-Map 14 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_239]
                                          PartitionCols:_col0
                                          Select Operator [SEL_238] (rows=285117831 width=123)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Filter Operator [FIL_237] (rows=285117831 width=123)
                                              predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_23_d3_d_date_sk_min) AND DynamicValue(RS_23_d3_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_23_d3_d_date_sk_bloom_filter)))
                                              TableScan [TS_6] (rows=287989836 width=123)
                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_net_profit"]
                                              <-Reducer 12 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_236]
                                                  Group By Operator [GBY_235] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_229]
                                                      Group By Operator [GBY_227] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_224] (rows=351 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_219]
                                  <-Reducer 13 [SIMPLE_EDGE]
                                    SHUFFLE [RS_26]
                                      PartitionCols:_col1, _col2
                                      Merge Join Operator [MERGEJOIN_210] (rows=53632139 width=119)
                                        Conds:RS_242._col0=RS_225._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_225]
                                          PartitionCols:_col0
                                          Select Operator [SEL_220] (rows=351 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_217] (rows=351 width=12)
                                              predicate:((d_year = 2000) and d_moy BETWEEN 4 AND 10 and d_date_sk is not null)
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 15 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_242]
                                          PartitionCols:_col0
                                          Select Operator [SEL_241] (rows=53632139 width=123)
                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                            Filter Operator [FIL_240] (rows=53632139 width=123)
                                              predicate:(sr_customer_sk is not null and sr_returned_date_sk is not null and sr_item_sk is not null and sr_ticket_number is not null)
                                              TableScan [TS_12] (rows=57591150 width=123)
                                                default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_returned_date_sk","sr_item_sk","sr_customer_sk","sr_ticket_number","sr_net_loss"]
                              <-Reducer 2 [SIMPLE_EDGE]
                                SHUFFLE [RS_38]
                                  PartitionCols:_col1, _col2, _col4
                                  Merge Join Operator [MERGEJOIN_208] (rows=501694138 width=122)
                                    Conds:RS_234._col0=RS_221._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                  <-Map 8 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_221]
                                      PartitionCols:_col0
                                      Select Operator [SEL_218] (rows=50 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_215] (rows=50 width=12)
                                          predicate:((d_year = 2000) and (d_moy = 4) and d_date_sk is not null)
                                           Please refer to the previous TableScan [TS_3]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_234]
                                      PartitionCols:_col0
                                      Select Operator [SEL_233] (rows=501694138 width=126)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                        Filter Operator [FIL_232] (rows=501694138 width=126)
                                          predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_store_sk is not null and ss_item_sk is not null and ss_ticket_number is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_36_d1_d_date_sk_min) AND DynamicValue(RS_36_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_36_d1_d_date_sk_bloom_filter)))
                                          TableScan [TS_0] (rows=575995635 width=126)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_net_profit"]
                                          <-Reducer 9 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_231]
                                              Group By Operator [GBY_230] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_228]
                                                  Group By Operator [GBY_226] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_222] (rows=50 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_218]

