PREHOOK: query: explain
select  
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 ,sum(ss_net_profit) as store_sales_profit
 ,sum(sr_net_loss) as store_returns_loss
 ,sum(cs_net_profit) as catalog_sales_profit
 from
 store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where
 d1.d_moy = 4
 and d1.d_year = 2000
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_moy               between 4 and  10
 and d2.d_year              = 2000
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_moy               between 4 and  10 
 and d3.d_year              = 2000
 group by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 order by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 ,sum(ss_net_profit) as store_sales_profit
 ,sum(sr_net_loss) as store_returns_loss
 ,sum(cs_net_profit) as catalog_sales_profit
 from
 store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where
 d1.d_moy = 4
 and d1.d_year = 2000
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_moy               between 4 and  10
 and d2.d_year              = 2000
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_moy               between 4 and  10 
 and d3.d_year              = 2000
 group by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 order by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 14 (BROADCAST_EDGE), Reducer 15 (BROADCAST_EDGE), Reducer 19 (BROADCAST_EDGE), Reducer 21 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Map 16 <- Reducer 12 (BROADCAST_EDGE), Reducer 14 (BROADCAST_EDGE), Reducer 15 (BROADCAST_EDGE), Reducer 19 (BROADCAST_EDGE)
Reducer 10 <- Map 16 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 12 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Map 17 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Reducer 13 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 21 <- Map 20 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 11 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 18 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 20 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_269]
        Limit [LIM_268] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_267] (rows=421657640 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_266]
              Group By Operator [GBY_265] (rows=421657640 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
              <-Reducer 5 [SIMPLE_EDGE]
                SHUFFLE [RS_49]
                  PartitionCols:_col0, _col1, _col2, _col3
                  Group By Operator [GBY_48] (rows=843315281 width=88)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col5)","sum(_col20)","sum(_col12)"],keys:_col25, _col26, _col28, _col29
                    Merge Join Operator [MERGEJOIN_213] (rows=843315281 width=88)
                      Conds:RS_44._col3=RS_251._col0(Inner),Output:["_col5","_col12","_col20","_col25","_col26","_col28","_col29"]
                    <-Map 20 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_251]
                        PartitionCols:_col0
                        Select Operator [SEL_250] (rows=1704 width=1910)
                          Output:["_col0","_col1","_col2"]
                          Filter Operator [FIL_249] (rows=1704 width=1910)
                            predicate:s_store_sk is not null
                            TableScan [TS_32] (rows=1704 width=1910)
                              default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_id","s_store_name"]
                    <-Reducer 4 [SIMPLE_EDGE]
                      SHUFFLE [RS_44]
                        PartitionCols:_col3
                        Merge Join Operator [MERGEJOIN_212] (rows=766650239 width=88)
                          Conds:RS_41._col1=RS_242._col0(Inner),Output:["_col3","_col5","_col12","_col20","_col25","_col26"]
                        <-Map 18 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_242]
                            PartitionCols:_col0
                            Select Operator [SEL_241] (rows=462000 width=1436)
                              Output:["_col0","_col1","_col2"]
                              Filter Operator [FIL_240] (rows=462000 width=1436)
                                predicate:i_item_sk is not null
                                TableScan [TS_29] (rows=462000 width=1436)
                                  default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_id","i_item_desc"]
                        <-Reducer 3 [SIMPLE_EDGE]
                          SHUFFLE [RS_41]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_211] (rows=696954748 width=88)
                              Conds:RS_38._col1, _col2, _col4=RS_39._col8, _col9, _col10(Inner),Output:["_col1","_col3","_col5","_col12","_col20"]
                            <-Reducer 11 [SIMPLE_EDGE]
                              SHUFFLE [RS_39]
                                PartitionCols:_col8, _col9, _col10
                                Merge Join Operator [MERGEJOIN_210] (rows=348467716 width=135)
                                  Conds:RS_25._col2, _col1=RS_26._col1, _col2(Inner),Output:["_col3","_col8","_col9","_col10","_col11"]
                                <-Reducer 13 [SIMPLE_EDGE]
                                  PARTITION_ONLY_SHUFFLE [RS_26]
                                    PartitionCols:_col1, _col2
                                    Merge Join Operator [MERGEJOIN_209] (rows=63350266 width=77)
                                      Conds:RS_233._col0=RS_224._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                    <-Map 8 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_224]
                                        PartitionCols:_col0
                                        Select Operator [SEL_219] (rows=4058 width=1119)
                                          Output:["_col0"]
                                          Filter Operator [FIL_216] (rows=4058 width=1119)
                                            predicate:((d_year = 2000) and d_date_sk is not null and d_moy BETWEEN 4 AND 10)
                                            TableScan [TS_3] (rows=73049 width=1119)
                                              default@date_dim,d1,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                    <-Map 17 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_233]
                                        PartitionCols:_col0
                                        Select Operator [SEL_232] (rows=57591150 width=77)
                                          Output:["_col0","_col1","_col2","_col3","_col4"]
                                          Filter Operator [FIL_231] (rows=57591150 width=77)
                                            predicate:(sr_customer_sk is not null and sr_item_sk is not null and sr_returned_date_sk is not null and sr_ticket_number is not null)
                                            TableScan [TS_12] (rows=57591150 width=77)
                                              default@store_returns,store_returns,Tbl:COMPLETE,Col:NONE,Output:["sr_returned_date_sk","sr_item_sk","sr_customer_sk","sr_ticket_number","sr_net_loss"]
                                <-Reducer 10 [SIMPLE_EDGE]
                                  SHUFFLE [RS_25]
                                    PartitionCols:_col2, _col1
                                    Merge Join Operator [MERGEJOIN_208] (rows=316788826 width=135)
                                      Conds:RS_264._col0=RS_222._col0(Inner),Output:["_col1","_col2","_col3"]
                                    <-Map 8 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_222]
                                        PartitionCols:_col0
                                        Select Operator [SEL_218] (rows=4058 width=1119)
                                          Output:["_col0"]
                                          Filter Operator [FIL_215] (rows=4058 width=1119)
                                            predicate:((d_year = 2000) and d_date_sk is not null and d_moy BETWEEN 4 AND 10)
                                             Please refer to the previous TableScan [TS_3]
                                    <-Map 16 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_264]
                                        PartitionCols:_col0
                                        Select Operator [SEL_263] (rows=287989836 width=135)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Filter Operator [FIL_262] (rows=287989836 width=135)
                                            predicate:((cs_bill_customer_sk BETWEEN DynamicValue(RS_26_store_returns_sr_customer_sk_min) AND DynamicValue(RS_26_store_returns_sr_customer_sk_max) and in_bloom_filter(cs_bill_customer_sk, DynamicValue(RS_26_store_returns_sr_customer_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_26_store_returns_sr_item_sk_min) AND DynamicValue(RS_26_store_returns_sr_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_26_store_returns_sr_item_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_42_item_i_item_sk_min) AND DynamicValue(RS_42_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_42_item_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_23_d3_d_date_sk_min) AND DynamicValue(RS_23_d3_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_23_d3_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                            TableScan [TS_6] (rows=287989836 width=135)
                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_net_profit"]
                                            <-Reducer 14 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_236]
                                                Group By Operator [GBY_234] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=63350264)"]
                                                <-Reducer 13 [CUSTOM_SIMPLE_EDGE]
                                                  PARTITION_ONLY_SHUFFLE [RS_107]
                                                    Group By Operator [GBY_106] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=63350264)"]
                                                      Select Operator [SEL_105] (rows=63350266 width=77)
                                                        Output:["_col0"]
                                                         Please refer to the previous Merge Join Operator [MERGEJOIN_209]
                                            <-Reducer 15 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_239]
                                                Group By Operator [GBY_237] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=63350264)"]
                                                <-Reducer 13 [CUSTOM_SIMPLE_EDGE]
                                                  PARTITION_ONLY_SHUFFLE [RS_122]
                                                    Group By Operator [GBY_121] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=63350264)"]
                                                      Select Operator [SEL_120] (rows=63350266 width=77)
                                                        Output:["_col0"]
                                                         Please refer to the previous Merge Join Operator [MERGEJOIN_209]
                                            <-Reducer 19 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_248]
                                                Group By Operator [GBY_246] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_245]
                                                    Group By Operator [GBY_244] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_243] (rows=462000 width=1436)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_241]
                                            <-Reducer 12 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_261]
                                                Group By Operator [GBY_260] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_228]
                                                    Group By Operator [GBY_226] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_223] (rows=4058 width=1119)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_218]
                            <-Reducer 2 [SIMPLE_EDGE]
                              SHUFFLE [RS_38]
                                PartitionCols:_col1, _col2, _col4
                                Merge Join Operator [MERGEJOIN_207] (rows=633595212 width=88)
                                  Conds:RS_259._col0=RS_220._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                <-Map 8 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_220]
                                    PartitionCols:_col0
                                    Select Operator [SEL_217] (rows=18262 width=1119)
                                      Output:["_col0"]
                                      Filter Operator [FIL_214] (rows=18262 width=1119)
                                        predicate:((d_moy = 4) and (d_year = 2000) and d_date_sk is not null)
                                         Please refer to the previous TableScan [TS_3]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_259]
                                    PartitionCols:_col0
                                    Select Operator [SEL_258] (rows=575995635 width=88)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                      Filter Operator [FIL_257] (rows=575995635 width=88)
                                        predicate:((ss_customer_sk BETWEEN DynamicValue(RS_26_store_returns_sr_customer_sk_min) AND DynamicValue(RS_26_store_returns_sr_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_26_store_returns_sr_customer_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_26_store_returns_sr_item_sk_min) AND DynamicValue(RS_26_store_returns_sr_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_26_store_returns_sr_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_42_item_i_item_sk_min) AND DynamicValue(RS_42_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_42_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_36_d1_d_date_sk_min) AND DynamicValue(RS_36_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_36_d1_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_45_store_s_store_sk_min) AND DynamicValue(RS_45_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_45_store_s_store_sk_bloom_filter))) and ss_customer_sk is not null and ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                        TableScan [TS_0] (rows=575995635 width=88)
                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_net_profit"]
                                        <-Reducer 14 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_235]
                                             Please refer to the previous Group By Operator [GBY_234]
                                        <-Reducer 15 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_238]
                                             Please refer to the previous Group By Operator [GBY_237]
                                        <-Reducer 19 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_247]
                                             Please refer to the previous Group By Operator [GBY_246]
                                        <-Reducer 21 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_256]
                                            Group By Operator [GBY_255] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_254]
                                                Group By Operator [GBY_253] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_252] (rows=1704 width=1910)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_250]
                                        <-Reducer 9 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_230]
                                            Group By Operator [GBY_229] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_227]
                                                Group By Operator [GBY_225] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_221] (rows=18262 width=1119)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_217]

