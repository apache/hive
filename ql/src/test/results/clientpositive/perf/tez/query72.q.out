PREHOOK: query: explain
select  i_item_desc
      ,w_warehouse_name
      ,d1.d_week_seq
      ,count(case when p_promo_sk is null then 1 else 0 end) no_promo
      ,count(case when p_promo_sk is not null then 1 else 0 end) promo
      ,count(*) total_cnt
from catalog_sales
join inventory on (cs_item_sk = inv_item_sk)
join warehouse on (w_warehouse_sk=inv_warehouse_sk)
join item on (i_item_sk = cs_item_sk)
join customer_demographics on (cs_bill_cdemo_sk = cd_demo_sk)
join household_demographics on (cs_bill_hdemo_sk = hd_demo_sk)
join date_dim d1 on (cs_sold_date_sk = d1.d_date_sk)
join date_dim d2 on (inv_date_sk = d2.d_date_sk)
join date_dim d3 on (cs_ship_date_sk = d3.d_date_sk)
left outer join promotion on (cs_promo_sk=p_promo_sk)
left outer join catalog_returns on (cr_item_sk = cs_item_sk and cr_order_number = cs_order_number)
where d1.d_week_seq = d2.d_week_seq
  and inv_quantity_on_hand < cs_quantity 
  and d3.d_date > d1.d_date + 5
  and hd_buy_potential = '1001-5000'
  and d1.d_year = 2001
  and hd_buy_potential = '1001-5000'
  and cd_marital_status = 'M'
  and d1.d_year = 2001
group by i_item_desc,w_warehouse_name,d1.d_week_seq
order by total_cnt desc, i_item_desc, w_warehouse_name, d_week_seq
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@inventory
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@warehouse
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  i_item_desc
      ,w_warehouse_name
      ,d1.d_week_seq
      ,count(case when p_promo_sk is null then 1 else 0 end) no_promo
      ,count(case when p_promo_sk is not null then 1 else 0 end) promo
      ,count(*) total_cnt
from catalog_sales
join inventory on (cs_item_sk = inv_item_sk)
join warehouse on (w_warehouse_sk=inv_warehouse_sk)
join item on (i_item_sk = cs_item_sk)
join customer_demographics on (cs_bill_cdemo_sk = cd_demo_sk)
join household_demographics on (cs_bill_hdemo_sk = hd_demo_sk)
join date_dim d1 on (cs_sold_date_sk = d1.d_date_sk)
join date_dim d2 on (inv_date_sk = d2.d_date_sk)
join date_dim d3 on (cs_ship_date_sk = d3.d_date_sk)
left outer join promotion on (cs_promo_sk=p_promo_sk)
left outer join catalog_returns on (cr_item_sk = cs_item_sk and cr_order_number = cs_order_number)
where d1.d_week_seq = d2.d_week_seq
  and inv_quantity_on_hand < cs_quantity 
  and d3.d_date > d1.d_date + 5
  and hd_buy_potential = '1001-5000'
  and d1.d_year = 2001
  and hd_buy_potential = '1001-5000'
  and cd_marital_status = 'M'
  and d1.d_year = 2001
group by i_item_desc,w_warehouse_name,d1.d_week_seq
order by total_cnt desc, i_item_desc, w_warehouse_name, d_week_seq
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@inventory
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@warehouse
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 12 <- Reducer 10 (BROADCAST_EDGE), Reducer 19 (BROADCAST_EDGE), Reducer 21 (BROADCAST_EDGE), Reducer 23 (BROADCAST_EDGE), Reducer 26 (BROADCAST_EDGE), Reducer 29 (BROADCAST_EDGE)
Reducer 10 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 14 <- Map 20 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 22 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Map 24 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Map 25 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 19 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 21 <- Map 20 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Map 22 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Map 25 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 28 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 6 <- Map 11 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 17 (ONE_TO_ONE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 27 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 28 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_312]
        Limit [LIM_311] (rows=100 width=135)
          Number of rows:100
          Select Operator [SEL_310] (rows=37725837 width=135)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 3 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_309]
              Group By Operator [GBY_308] (rows=37725837 width=135)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["count(VALUE._col0)","count(VALUE._col1)","count(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2
              <-Reducer 2 [SIMPLE_EDGE]
                SHUFFLE [RS_69]
                  PartitionCols:_col0, _col1, _col2
                  Group By Operator [GBY_68] (rows=75451675 width=135)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["count(_col3)","count(_col4)","count()"],keys:_col0, _col1, _col2
                    Select Operator [SEL_66] (rows=75451675 width=135)
                      Output:["_col0","_col1","_col2","_col3","_col4"]
                      Merge Join Operator [MERGEJOIN_248] (rows=75451675 width=135)
                        Conds:RS_251._col0, _col1=RS_64._col4, _col6(Right Outer),Output:["_col15","_col17","_col24","_col30"]
                      <-Map 1 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_251]
                          PartitionCols:_col0, _col1
                          Select Operator [SEL_250] (rows=28798881 width=106)
                            Output:["_col0","_col1"]
                            Filter Operator [FIL_249] (rows=28798881 width=106)
                              predicate:cr_item_sk is not null
                              TableScan [TS_0] (rows=28798881 width=106)
                                default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:NONE,Output:["cr_item_sk","cr_order_number"]
                      <-Reducer 9 [SIMPLE_EDGE]
                        SHUFFLE [RS_64]
                          PartitionCols:_col4, _col6
                          Select Operator [SEL_62] (rows=68592431 width=135)
                            Output:["_col4","_col6","_col13","_col15","_col22","_col28"]
                            Filter Operator [FIL_61] (rows=68592431 width=135)
                              predicate:(UDFToDouble(_col28) > (UDFToDouble(_col17) + 5.0D))
                              Merge Join Operator [MERGEJOIN_247] (rows=205777295 width=135)
                                Conds:RS_58._col9=RS_294._col0(Inner),Output:["_col5","_col7","_col12","_col14","_col17","_col18","_col24","_col28"]
                              <-Map 28 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_294]
                                  PartitionCols:_col0
                                  Select Operator [SEL_293] (rows=73049 width=1119)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_292] (rows=73049 width=1119)
                                      predicate:d_date_sk is not null
                                      TableScan [TS_45] (rows=73049 width=1119)
                                        default@date_dim,d3,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date"]
                              <-Reducer 8 [SIMPLE_EDGE]
                                SHUFFLE [RS_58]
                                  PartitionCols:_col9
                                  Merge Join Operator [MERGEJOIN_246] (rows=187070265 width=135)
                                    Conds:RS_55._col0, _col18=RS_307._col0, _col1(Inner),Output:["_col5","_col7","_col9","_col12","_col14","_col17","_col18","_col24"]
                                  <-Map 27 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_307]
                                      PartitionCols:_col0, _col1
                                      Select Operator [SEL_306] (rows=73049 width=1119)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_305] (rows=73049 width=1119)
                                          predicate:(d_date_sk is not null and d_week_seq is not null)
                                          TableScan [TS_42] (rows=73049 width=1119)
                                            default@date_dim,d2,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_week_seq"]
                                  <-Reducer 7 [SIMPLE_EDGE]
                                    SHUFFLE [RS_55]
                                      PartitionCols:_col0, _col18
                                      Filter Operator [FIL_54] (rows=170063874 width=135)
                                        predicate:(_col3 < _col15)
                                        Merge Join Operator [MERGEJOIN_245] (rows=510191624 width=135)
                                          Conds:RS_51._col1=RS_52._col6(Inner),Output:["_col0","_col3","_col5","_col7","_col9","_col12","_col14","_col15","_col17","_col18","_col24"]
                                        <-Reducer 6 [SIMPLE_EDGE]
                                          SHUFFLE [RS_51]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_239] (rows=41342400 width=15)
                                              Conds:RS_254._col2=RS_257._col0(Inner),Output:["_col0","_col1","_col3","_col5"]
                                            <-Map 11 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_257]
                                                PartitionCols:_col0
                                                Select Operator [SEL_256] (rows=27 width=1029)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_255] (rows=27 width=1029)
                                                    predicate:w_warehouse_sk is not null
                                                    TableScan [TS_6] (rows=27 width=1029)
                                                      default@warehouse,warehouse,Tbl:COMPLETE,Col:NONE,Output:["w_warehouse_sk","w_warehouse_name"]
                                            <-Map 5 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_254]
                                                PartitionCols:_col2
                                                Select Operator [SEL_253] (rows=37584000 width=15)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                  Filter Operator [FIL_252] (rows=37584000 width=15)
                                                    predicate:(inv_date_sk is not null and inv_item_sk is not null and inv_warehouse_sk is not null)
                                                    TableScan [TS_3] (rows=37584000 width=15)
                                                      default@inventory,inventory,Tbl:COMPLETE,Col:NONE,Output:["inv_date_sk","inv_item_sk","inv_warehouse_sk","inv_quantity_on_hand"]
                                        <-Reducer 17 [ONE_TO_ONE_EDGE]
                                          FORWARD [RS_52]
                                            PartitionCols:_col6
                                            Select Operator [SEL_41] (rows=463810558 width=135)
                                              Output:["_col1","_col3","_col6","_col8","_col9","_col11","_col12","_col18"]
                                              Merge Join Operator [MERGEJOIN_244] (rows=463810558 width=135)
                                                Conds:RS_38._col4=RS_284._col0(Inner),Output:["_col1","_col4","_col6","_col7","_col9","_col10","_col16","_col18"]
                                              <-Map 25 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_284]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_283] (rows=462000 width=1436)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_282] (rows=462000 width=1436)
                                                      predicate:i_item_sk is not null
                                                      TableScan [TS_23] (rows=462000 width=1436)
                                                        default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_desc"]
                                              <-Reducer 16 [SIMPLE_EDGE]
                                                SHUFFLE [RS_38]
                                                  PartitionCols:_col4
                                                  Merge Join Operator [MERGEJOIN_243] (rows=421645953 width=135)
                                                    Conds:RS_35._col5=RS_304._col0(Left Outer),Output:["_col1","_col4","_col6","_col7","_col9","_col10","_col16"]
                                                  <-Map 24 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_304]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_303] (rows=2300 width=1179)
                                                        Output:["_col0"]
                                                        TableScan [TS_21] (rows=2300 width=1179)
                                                          default@promotion,promotion,Tbl:COMPLETE,Col:NONE,Output:["p_promo_sk"]
                                                  <-Reducer 15 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_35]
                                                      PartitionCols:_col5
                                                      Merge Join Operator [MERGEJOIN_242] (rows=383314495 width=135)
                                                        Conds:RS_32._col3=RS_276._col0(Inner),Output:["_col1","_col4","_col5","_col6","_col7","_col9","_col10"]
                                                      <-Map 22 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_276]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_275] (rows=3600 width=107)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_274] (rows=3600 width=107)
                                                              predicate:((hd_buy_potential = '1001-5000') and hd_demo_sk is not null)
                                                              TableScan [TS_18] (rows=7200 width=107)
                                                                default@household_demographics,household_demographics,Tbl:COMPLETE,Col:NONE,Output:["hd_demo_sk","hd_buy_potential"]
                                                      <-Reducer 14 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_32]
                                                          PartitionCols:_col3
                                                          Merge Join Operator [MERGEJOIN_241] (rows=348467716 width=135)
                                                            Conds:RS_29._col2=RS_268._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col9","_col10"]
                                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_268]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_267] (rows=930900 width=385)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_266] (rows=930900 width=385)
                                                                  predicate:((cd_marital_status = 'M') and cd_demo_sk is not null)
                                                                  TableScan [TS_15] (rows=1861800 width=385)
                                                                    default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:NONE,Output:["cd_demo_sk","cd_marital_status"]
                                                          <-Reducer 13 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_29]
                                                              PartitionCols:_col2
                                                              Merge Join Operator [MERGEJOIN_240] (rows=316788826 width=135)
                                                                Conds:RS_302._col0=RS_260._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col10"]
                                                              <-Map 18 [SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_260]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_259] (rows=36524 width=1119)
                                                                    Output:["_col0","_col1","_col2"]
                                                                    Filter Operator [FIL_258] (rows=36524 width=1119)
                                                                      predicate:((d_year = 2001) and d_date_sk is not null and d_week_seq is not null)
                                                                      TableScan [TS_12] (rows=73049 width=1119)
                                                                        default@date_dim,d1,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date","d_week_seq","d_year"]
                                                              <-Map 12 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_302]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_301] (rows=287989836 width=135)
                                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                                    Filter Operator [FIL_300] (rows=287989836 width=135)
                                                                      predicate:((cs_bill_cdemo_sk BETWEEN DynamicValue(RS_30_customer_demographics_cd_demo_sk_min) AND DynamicValue(RS_30_customer_demographics_cd_demo_sk_max) and in_bloom_filter(cs_bill_cdemo_sk, DynamicValue(RS_30_customer_demographics_cd_demo_sk_bloom_filter))) and (cs_bill_hdemo_sk BETWEEN DynamicValue(RS_33_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_33_household_demographics_hd_demo_sk_max) and in_bloom_filter(cs_bill_hdemo_sk, DynamicValue(RS_33_household_demographics_hd_demo_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_39_item_i_item_sk_min) AND DynamicValue(RS_39_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_39_item_i_item_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_51_inventory_inv_item_sk_min) AND DynamicValue(RS_51_inventory_inv_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_51_inventory_inv_item_sk_bloom_filter))) and (cs_ship_date_sk BETWEEN DynamicValue(RS_59_d3_d_date_sk_min) AND DynamicValue(RS_59_d3_d_date_sk_max) and in_bloom_filter(cs_ship_date_sk, DynamicValue(RS_59_d3_d_date_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_27_d1_d_date_sk_min) AND DynamicValue(RS_27_d1_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_27_d1_d_date_sk_bloom_filter))) and cs_bill_cdemo_sk is not null and cs_bill_hdemo_sk is not null and cs_item_sk is not null and cs_ship_date_sk is not null and cs_sold_date_sk is not null)
                                                                      TableScan [TS_9] (rows=287989836 width=135)
                                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_ship_date_sk","cs_bill_cdemo_sk","cs_bill_hdemo_sk","cs_item_sk","cs_promo_sk","cs_order_number","cs_quantity"]
                                                                      <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                                        BROADCAST [RS_291]
                                                                          Group By Operator [GBY_290] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=41342400)"]
                                                                          <-Reducer 6 [CUSTOM_SIMPLE_EDGE]
                                                                            SHUFFLE [RS_185]
                                                                              Group By Operator [GBY_184] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=41342400)"]
                                                                                Select Operator [SEL_183] (rows=41342400 width=15)
                                                                                  Output:["_col0"]
                                                                                   Please refer to the previous Merge Join Operator [MERGEJOIN_239]
                                                                      <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                                        BROADCAST [RS_265]
                                                                          Group By Operator [GBY_264] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                          <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_263]
                                                                              Group By Operator [GBY_262] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                Select Operator [SEL_261] (rows=36524 width=1119)
                                                                                  Output:["_col0"]
                                                                                   Please refer to the previous Select Operator [SEL_259]
                                                                      <-Reducer 21 [BROADCAST_EDGE] vectorized
                                                                        BROADCAST [RS_273]
                                                                          Group By Operator [GBY_272] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                          <-Map 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_271]
                                                                              Group By Operator [GBY_270] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                Select Operator [SEL_269] (rows=930900 width=385)
                                                                                  Output:["_col0"]
                                                                                   Please refer to the previous Select Operator [SEL_267]
                                                                      <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                                        BROADCAST [RS_281]
                                                                          Group By Operator [GBY_280] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                          <-Map 22 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_279]
                                                                              Group By Operator [GBY_278] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                Select Operator [SEL_277] (rows=3600 width=107)
                                                                                  Output:["_col0"]
                                                                                   Please refer to the previous Select Operator [SEL_275]
                                                                      <-Reducer 26 [BROADCAST_EDGE] vectorized
                                                                        BROADCAST [RS_289]
                                                                          Group By Operator [GBY_288] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                          <-Map 25 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_287]
                                                                              Group By Operator [GBY_286] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                Select Operator [SEL_285] (rows=462000 width=1436)
                                                                                  Output:["_col0"]
                                                                                   Please refer to the previous Select Operator [SEL_283]
                                                                      <-Reducer 29 [BROADCAST_EDGE] vectorized
                                                                        BROADCAST [RS_299]
                                                                          Group By Operator [GBY_298] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                          <-Map 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_297]
                                                                              Group By Operator [GBY_296] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                Select Operator [SEL_295] (rows=73049 width=1119)
                                                                                  Output:["_col0"]
                                                                                   Please refer to the previous Select Operator [SEL_293]

