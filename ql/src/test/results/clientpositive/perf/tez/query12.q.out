PREHOOK: query: explain
select  i_item_desc 
      ,i_category 
      ,i_class 
      ,i_current_price
      ,sum(ws_ext_sales_price) as itemrevenue 
      ,sum(ws_ext_sales_price)*100/sum(sum(ws_ext_sales_price)) over
          (partition by i_class) as revenueratio
from	
	web_sales
    	,item 
    	,date_dim
where 
	ws_item_sk = i_item_sk 
  	and i_category in ('Jewelry', 'Sports', 'Books')
  	and ws_sold_date_sk = d_date_sk
	and d_date between cast('2001-01-12' as date) 
				and (cast('2001-01-12' as date) + 30 days)
group by 
	i_item_id
        ,i_item_desc 
        ,i_category
        ,i_class
        ,i_current_price
order by 
	i_category
        ,i_class
        ,i_item_id
        ,i_item_desc
        ,revenueratio
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  i_item_desc 
      ,i_category 
      ,i_class 
      ,i_current_price
      ,sum(ws_ext_sales_price) as itemrevenue 
      ,sum(ws_ext_sales_price)*100/sum(sum(ws_ext_sales_price)) over
          (partition by i_class) as revenueratio
from	
	web_sales
    	,item 
    	,date_dim
where 
	ws_item_sk = i_item_sk 
  	and i_category in ('Jewelry', 'Sports', 'Books')
  	and ws_sold_date_sk = d_date_sk
	and d_date between cast('2001-01-12' as date) 
				and (cast('2001-01-12' as date) + 30 days)
group by 
	i_item_id
        ,i_item_desc 
        ,i_category
        ,i_class
        ,i_current_price
order by 
	i_category
        ,i_class
        ,i_item_id
        ,i_item_desc
        ,revenueratio
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 10 (BROADCAST_EDGE), Reducer 8 (BROADCAST_EDGE)
Reducer 10 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 3 <- Map 9 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 8 <- Map 7 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_86]
        Limit [LIM_85] (rows=100 width=135)
          Number of rows:100
          Select Operator [SEL_84] (rows=87121617 width=135)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 5 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_83]
              Select Operator [SEL_82] (rows=87121617 width=135)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                PTF Operator [PTF_81] (rows=87121617 width=135)
                  Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 ASC NULLS FIRST","partition by:":"_col1"}]
                  Select Operator [SEL_80] (rows=87121617 width=135)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                  <-Reducer 4 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_79]
                      PartitionCols:_col1
                      Group By Operator [GBY_78] (rows=87121617 width=135)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                      <-Reducer 3 [SIMPLE_EDGE]
                        SHUFFLE [RS_17]
                          PartitionCols:_col0, _col1, _col2, _col3, _col4
                          Group By Operator [GBY_16] (rows=174243235 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)"],keys:_col10, _col9, _col6, _col7, _col8
                            Merge Join Operator [MERGEJOIN_58] (rows=174243235 width=135)
                              Conds:RS_12._col1=RS_69._col0(Inner),Output:["_col2","_col6","_col7","_col8","_col9","_col10"]
                            <-Map 9 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_69]
                                PartitionCols:_col0
                                Select Operator [SEL_68] (rows=231000 width=1436)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                  Filter Operator [FIL_67] (rows=231000 width=1436)
                                    predicate:((i_category) IN ('Jewelry', 'Sports', 'Books') and i_item_sk is not null)
                                    TableScan [TS_6] (rows=462000 width=1436)
                                      default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_id","i_item_desc","i_current_price","i_class","i_category"]
                            <-Reducer 2 [SIMPLE_EDGE]
                              SHUFFLE [RS_12]
                                PartitionCols:_col1
                                Merge Join Operator [MERGEJOIN_57] (rows=158402938 width=135)
                                  Conds:RS_77._col0=RS_61._col0(Inner),Output:["_col1","_col2"]
                                <-Map 7 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_61]
                                    PartitionCols:_col0
                                    Select Operator [SEL_60] (rows=8116 width=1119)
                                      Output:["_col0"]
                                      Filter Operator [FIL_59] (rows=8116 width=1119)
                                        predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'2001-01-12 00:00:00' AND TIMESTAMP'2001-02-11 00:00:00' and d_date_sk is not null)
                                        TableScan [TS_3] (rows=73049 width=1119)
                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date"]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_77]
                                    PartitionCols:_col0
                                    Select Operator [SEL_76] (rows=144002668 width=135)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_75] (rows=144002668 width=135)
                                        predicate:((ws_item_sk BETWEEN DynamicValue(RS_13_item_i_item_sk_min) AND DynamicValue(RS_13_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_13_item_i_item_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_10_date_dim_d_date_sk_min) AND DynamicValue(RS_10_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_10_date_dim_d_date_sk_bloom_filter))) and ws_item_sk is not null and ws_sold_date_sk is not null)
                                        TableScan [TS_0] (rows=144002668 width=135)
                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_ext_sales_price"]
                                        <-Reducer 10 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_74]
                                            Group By Operator [GBY_73] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_72]
                                                Group By Operator [GBY_71] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_70] (rows=231000 width=1436)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_68]
                                        <-Reducer 8 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_66]
                                            Group By Operator [GBY_65] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_64]
                                                Group By Operator [GBY_63] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_62] (rows=8116 width=1119)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_60]

