PREHOOK: query: explain
select  i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
   and ss_item_sk = i_item_sk
   and i_manager_id=7
   and d_moy=11
   and d_year=1999
   and ss_customer_sk = c_customer_sk 
   and c_current_addr_sk = ca_address_sk
   and substr(ca_zip,1,5) <> substr(s_zip,1,5) 
   and ss_store_sk = s_store_sk 
 group by i_brand
      ,i_brand_id
      ,i_manufact_id
      ,i_manufact
 order by ext_price desc
         ,i_brand
         ,i_brand_id
         ,i_manufact_id
         ,i_manufact
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
   and ss_item_sk = i_item_sk
   and i_manager_id=7
   and d_moy=11
   and d_year=1999
   and ss_customer_sk = c_customer_sk 
   and c_current_addr_sk = ca_address_sk
   and substr(ca_zip,1,5) <> substr(s_zip,1,5) 
   and ss_store_sk = s_store_sk 
 group by i_brand
      ,i_brand_id
      ,i_manufact_id
      ,i_manufact
 order by ext_price desc
         ,i_brand
         ,i_brand_id
         ,i_manufact_id
         ,i_manufact
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 9 <- Reducer 13 (BROADCAST_EDGE), Reducer 15 (BROADCAST_EDGE), Reducer 17 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE)
Reducer 10 <- Map 12 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 11 <- Map 14 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 14 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 16 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Reducer 11 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 16 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_164]
        Limit [LIM_163] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_162] (rows=421657640 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 5 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_161]
              Select Operator [SEL_160] (rows=421657640 width=88)
                Output:["_col2","_col3","_col4","_col5","_col6"]
                Group By Operator [GBY_159] (rows=421657640 width=88)
                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                <-Reducer 4 [SIMPLE_EDGE]
                  SHUFFLE [RS_37]
                    PartitionCols:_col0, _col1, _col2, _col3
                    Group By Operator [GBY_36] (rows=843315281 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col8)"],keys:_col14, _col13, _col15, _col16
                      Select Operator [SEL_35] (rows=843315281 width=88)
                        Output:["_col8","_col13","_col14","_col15","_col16"]
                        Filter Operator [FIL_34] (rows=843315281 width=88)
                          predicate:(substr(_col3, 1, 5) <> substr(_col19, 1, 5))
                          Merge Join Operator [MERGEJOIN_123] (rows=843315281 width=88)
                            Conds:RS_31._col7=RS_150._col0(Inner),Output:["_col3","_col8","_col13","_col14","_col15","_col16","_col19"]
                          <-Map 16 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_150]
                              PartitionCols:_col0
                              Select Operator [SEL_149] (rows=1704 width=1910)
                                Output:["_col0","_col1"]
                                Filter Operator [FIL_148] (rows=1704 width=1910)
                                  predicate:s_store_sk is not null
                                  TableScan [TS_22] (rows=1704 width=1910)
                                    default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_zip"]
                          <-Reducer 3 [SIMPLE_EDGE]
                            SHUFFLE [RS_31]
                              PartitionCols:_col7
                              Merge Join Operator [MERGEJOIN_122] (rows=766650239 width=88)
                                Conds:RS_28._col0=RS_29._col2(Inner),Output:["_col3","_col7","_col8","_col13","_col14","_col15","_col16"]
                              <-Reducer 2 [SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_28]
                                  PartitionCols:_col0
                                  Merge Join Operator [MERGEJOIN_119] (rows=88000001 width=860)
                                    Conds:RS_126._col1=RS_129._col0(Inner),Output:["_col0","_col3"]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_126]
                                      PartitionCols:_col1
                                      Select Operator [SEL_125] (rows=80000000 width=860)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_124] (rows=80000000 width=860)
                                          predicate:(c_current_addr_sk is not null and c_customer_sk is not null)
                                          TableScan [TS_0] (rows=80000000 width=860)
                                            default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_current_addr_sk"]
                                  <-Map 8 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_129]
                                      PartitionCols:_col0
                                      Select Operator [SEL_128] (rows=40000000 width=1014)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_127] (rows=40000000 width=1014)
                                          predicate:ca_address_sk is not null
                                          TableScan [TS_3] (rows=40000000 width=1014)
                                            default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_zip"]
                              <-Reducer 11 [SIMPLE_EDGE]
                                SHUFFLE [RS_29]
                                  PartitionCols:_col2
                                  Merge Join Operator [MERGEJOIN_121] (rows=696954748 width=88)
                                    Conds:RS_18._col1=RS_140._col0(Inner),Output:["_col2","_col3","_col4","_col9","_col10","_col11","_col12"]
                                  <-Map 14 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_140]
                                      PartitionCols:_col0
                                      Select Operator [SEL_139] (rows=231000 width=1436)
                                        Output:["_col0","_col1","_col2","_col3","_col4"]
                                        Filter Operator [FIL_138] (rows=231000 width=1436)
                                          predicate:((i_manager_id = 7) and i_item_sk is not null)
                                          TableScan [TS_12] (rows=462000 width=1436)
                                            default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_brand_id","i_brand","i_manufact_id","i_manufact","i_manager_id"]
                                  <-Reducer 10 [SIMPLE_EDGE]
                                    SHUFFLE [RS_18]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_120] (rows=633595212 width=88)
                                        Conds:RS_158._col0=RS_132._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                      <-Map 12 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_132]
                                          PartitionCols:_col0
                                          Select Operator [SEL_131] (rows=18262 width=1119)
                                            Output:["_col0"]
                                            Filter Operator [FIL_130] (rows=18262 width=1119)
                                              predicate:((d_moy = 11) and (d_year = 1999) and d_date_sk is not null)
                                              TableScan [TS_9] (rows=73049 width=1119)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                      <-Map 9 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_158]
                                          PartitionCols:_col0
                                          Select Operator [SEL_157] (rows=575995635 width=88)
                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                            Filter Operator [FIL_156] (rows=575995635 width=88)
                                              predicate:((ss_customer_sk BETWEEN DynamicValue(RS_28_customer_c_customer_sk_min) AND DynamicValue(RS_28_customer_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_28_customer_c_customer_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_19_item_i_item_sk_min) AND DynamicValue(RS_19_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_19_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_16_date_dim_d_date_sk_min) AND DynamicValue(RS_16_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_16_date_dim_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_32_store_s_store_sk_min) AND DynamicValue(RS_32_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_32_store_s_store_sk_bloom_filter))) and ss_customer_sk is not null and ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                              TableScan [TS_6] (rows=575995635 width=88)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ext_sales_price"]
                                              <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_137]
                                                  Group By Operator [GBY_136] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_135]
                                                      Group By Operator [GBY_134] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_133] (rows=18262 width=1119)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_131]
                                              <-Reducer 15 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_145]
                                                  Group By Operator [GBY_144] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 14 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_143]
                                                      Group By Operator [GBY_142] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_141] (rows=231000 width=1436)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_139]
                                              <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_155]
                                                  Group By Operator [GBY_154] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_153]
                                                      Group By Operator [GBY_152] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_151] (rows=1704 width=1910)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_149]
                                              <-Reducer 7 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_147]
                                                  Group By Operator [GBY_146] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=88000000)"]
                                                  <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                                    PARTITION_ONLY_SHUFFLE [RS_96]
                                                      Group By Operator [GBY_95] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=88000000)"]
                                                        Select Operator [SEL_94] (rows=88000001 width=860)
                                                          Output:["_col0"]
                                                           Please refer to the previous Merge Join Operator [MERGEJOIN_119]

