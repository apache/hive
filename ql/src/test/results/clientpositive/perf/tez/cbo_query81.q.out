PREHOOK: query: explain cbo
with customer_total_return as
 (select cr_returning_customer_sk as ctr_customer_sk
        ,ca_state as ctr_state, 
 	sum(cr_return_amt_inc_tax) as ctr_total_return
 from catalog_returns
     ,date_dim
     ,customer_address
 where cr_returned_date_sk = d_date_sk 
   and d_year =1998
   and cr_returning_addr_sk = ca_address_sk 
 group by cr_returning_customer_sk
         ,ca_state )
  select  c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
                  ,ca_location_type,ctr_total_return
 from customer_total_return ctr1
     ,customer_address
     ,customer
 where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
 			  from customer_total_return ctr2 
                  	  where ctr1.ctr_state = ctr2.ctr_state)
       and ca_address_sk = c_current_addr_sk
       and ca_state = 'IL'
       and ctr1.ctr_customer_sk = c_customer_sk
 order by c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
                  ,ca_location_type,ctr_total_return
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain cbo
with customer_total_return as
 (select cr_returning_customer_sk as ctr_customer_sk
        ,ca_state as ctr_state, 
 	sum(cr_return_amt_inc_tax) as ctr_total_return
 from catalog_returns
     ,date_dim
     ,customer_address
 where cr_returned_date_sk = d_date_sk 
   and d_year =1998
   and cr_returning_addr_sk = ca_address_sk 
 group by cr_returning_customer_sk
         ,ca_state )
  select  c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
                  ,ca_location_type,ctr_total_return
 from customer_total_return ctr1
     ,customer_address
     ,customer
 where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
 			  from customer_total_return ctr2 
                  	  where ctr1.ctr_state = ctr2.ctr_state)
       and ca_address_sk = c_current_addr_sk
       and ca_state = 'IL'
       and ctr1.ctr_customer_sk = c_customer_sk
 order by c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
                  ,ca_location_type,ctr_total_return
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Output: hdfs://### HDFS PATH ###
CBO PLAN:
HiveProject(c_customer_id=[$0], c_salutation=[$1], c_first_name=[$2], c_last_name=[$3], ca_street_number=[$4], ca_street_name=[$5], ca_street_type=[$6], ca_suite_number=[$7], ca_city=[$8], ca_county=[$9], ca_state=[CAST(_UTF-16LE'IL'):VARCHAR(2147483647) CHARACTER SET "UTF-16LE" COLLATE "ISO-8859-1$en_US$primary"], ca_zip=[$10], ca_country=[$11], ca_gmt_offset=[$12], ca_location_type=[$13], ctr_total_return=[$14])
  HiveSortLimit(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], sort5=[$5], sort6=[$6], sort7=[$7], sort8=[$8], sort9=[$9], sort10=[$10], sort11=[$11], sort12=[$12], sort13=[$13], sort14=[$14], dir0=[ASC], dir1=[ASC], dir2=[ASC], dir3=[ASC], dir4=[ASC], dir5=[ASC], dir6=[ASC], dir7=[ASC], dir8=[ASC], dir9=[ASC], dir10=[ASC], dir11=[ASC], dir12=[ASC], dir13=[ASC], dir14=[ASC], fetch=[100])
    HiveProject(c_customer_id=[$1], c_salutation=[$3], c_first_name=[$4], c_last_name=[$5], ca_street_number=[$7], ca_street_name=[$8], ca_street_type=[$9], ca_suite_number=[$10], ca_city=[$11], ca_county=[$12], ca_zip=[$13], ca_country=[$14], ca_gmt_offset=[$15], ca_location_type=[$16], ctr_total_return=[$19])
      HiveJoin(condition=[=($17, $0)], joinType=[inner], algorithm=[none], cost=[not available])
        HiveJoin(condition=[=($6, $2)], joinType=[inner], algorithm=[none], cost=[not available])
          HiveProject(c_customer_sk=[$0], c_customer_id=[$1], c_current_addr_sk=[$4], c_salutation=[$7], c_first_name=[$8], c_last_name=[$9])
            HiveFilter(condition=[AND(IS NOT NULL($4), IS NOT NULL($0))])
              HiveTableScan(table=[[default, customer]], table:alias=[customer])
          HiveProject(ca_address_sk=[$0], ca_street_number=[$2], ca_street_name=[$3], ca_street_type=[$4], ca_suite_number=[$5], ca_city=[$6], ca_county=[$7], ca_zip=[$9], ca_country=[$10], ca_gmt_offset=[$11], ca_location_type=[$12])
            HiveFilter(condition=[AND(=($8, _UTF-16LE'IL'), IS NOT NULL($0))])
              HiveTableScan(table=[[default, customer_address]], table:alias=[customer_address])
        HiveProject(cr_returning_customer_sk=[$0], ca_state=[$1], $f2=[$2], _o__c0=[$3], ctr_state=[$4])
          HiveJoin(condition=[AND(=($1, $4), >($2, $3))], joinType=[inner], algorithm=[none], cost=[not available])
            HiveProject(cr_returning_customer_sk=[$1], ca_state=[$0], $f2=[$2])
              HiveAggregate(group=[{1, 3}], agg#0=[sum($5)])
                HiveJoin(condition=[=($4, $0)], joinType=[inner], algorithm=[none], cost=[not available])
                  HiveProject(ca_address_sk=[$0], ca_state=[$8])
                    HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($8))])
                      HiveTableScan(table=[[default, customer_address]], table:alias=[customer_address])
                  HiveJoin(condition=[=($0, $4)], joinType=[inner], algorithm=[none], cost=[not available])
                    HiveProject(cr_returned_date_sk=[$0], cr_returning_customer_sk=[$7], cr_returning_addr_sk=[$10], cr_return_amt_inc_tax=[$20])
                      HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($10), IS NOT NULL($7))])
                        HiveTableScan(table=[[default, catalog_returns]], table:alias=[catalog_returns])
                    HiveProject(d_date_sk=[$0])
                      HiveFilter(condition=[AND(=($6, 1998), IS NOT NULL($0))])
                        HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
            HiveProject(_o__c0=[*(/($1, $2), 1.2)], ctr_state=[$0])
              HiveAggregate(group=[{0}], agg#0=[sum($2)], agg#1=[count($2)])
                HiveProject(ca_state=[$0], cr_returning_customer_sk=[$1], $f2=[$2])
                  HiveAggregate(group=[{1, 3}], agg#0=[sum($5)])
                    HiveJoin(condition=[=($4, $0)], joinType=[inner], algorithm=[none], cost=[not available])
                      HiveProject(ca_address_sk=[$0], ca_state=[$8])
                        HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($8))])
                          HiveTableScan(table=[[default, customer_address]], table:alias=[customer_address])
                      HiveJoin(condition=[=($0, $4)], joinType=[inner], algorithm=[none], cost=[not available])
                        HiveProject(cr_returned_date_sk=[$0], cr_returning_customer_sk=[$7], cr_returning_addr_sk=[$10], cr_return_amt_inc_tax=[$20])
                          HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($10))])
                            HiveTableScan(table=[[default, catalog_returns]], table:alias=[catalog_returns])
                        HiveProject(d_date_sk=[$0])
                          HiveFilter(condition=[AND(=($6, 1998), IS NOT NULL($0))])
                            HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])

