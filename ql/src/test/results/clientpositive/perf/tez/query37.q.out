PREHOOK: query: explain
select  i_item_id
       ,i_item_desc
       ,i_current_price
 from item, inventory, date_dim, catalog_sales
 where i_current_price between 22 and 22 + 30
 and inv_item_sk = i_item_sk
 and d_date_sk=inv_date_sk
 and d_date between cast('2001-06-02' as date) and (cast('2001-06-02' as date) +  60 days)
 and i_manufact_id in (678,964,918,849)
 and inv_quantity_on_hand between 100 and 500
 and cs_item_sk = i_item_sk
 group by i_item_id,i_item_desc,i_current_price
 order by i_item_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@inventory
PREHOOK: Input: default@item
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  i_item_id
       ,i_item_desc
       ,i_current_price
 from item, inventory, date_dim, catalog_sales
 where i_current_price between 22 and 22 + 30
 and inv_item_sk = i_item_sk
 and d_date_sk=inv_date_sk
 and d_date between cast('2001-06-02' as date) and (cast('2001-06-02' as date) +  60 days)
 and i_manufact_id in (678,964,918,849)
 and inv_quantity_on_hand between 100 and 500
 and cs_item_sk = i_item_sk
 group by i_item_id,i_item_desc,i_current_price
 order by i_item_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@inventory
POSTHOOK: Input: default@item
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 10 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (ONE_TO_ONE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 7 <- Map 6 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 11 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_103]
        Limit [LIM_102] (rows=1 width=396)
          Number of rows:100
          Select Operator [SEL_101] (rows=1 width=396)
            Output:["_col0","_col1","_col2"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_100]
              Group By Operator [GBY_99] (rows=1 width=396)
                Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
              <-Reducer 3 [SIMPLE_EDGE]
                SHUFFLE [RS_24]
                  PartitionCols:_col0, _col1, _col2
                  Group By Operator [GBY_23] (rows=2 width=396)
                    Output:["_col0","_col1","_col2"],keys:_col2, _col3, _col4
                    Top N Key Operator [TNK_43] (rows=2871 width=396)
                      keys:_col2, _col3, _col4,sort order:+++,top n:100
                      Merge Join Operator [MERGEJOIN_79] (rows=2871 width=396)
                        Conds:RS_19._col1=RS_20._col1(Inner),Output:["_col2","_col3","_col4"]
                      <-Reducer 9 [SIMPLE_EDGE]
                        SHUFFLE [RS_20]
                          PartitionCols:_col1
                          Merge Join Operator [MERGEJOIN_78] (rows=463969 width=4)
                            Conds:RS_90._col0=RS_93._col0(Inner),Output:["_col1"]
                          <-Map 11 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_93]
                              PartitionCols:_col0
                              Select Operator [SEL_92] (rows=8116 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_91] (rows=8116 width=98)
                                  predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'2001-06-02 00:00:00' AND TIMESTAMP'2001-08-01 00:00:00' and d_date_sk is not null)
                                  TableScan [TS_9] (rows=73049 width=98)
                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                          <-Map 8 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_90]
                              PartitionCols:_col0
                              Select Operator [SEL_89] (rows=4176000 width=8)
                                Output:["_col0","_col1"]
                                Filter Operator [FIL_88] (rows=4176000 width=11)
                                  predicate:(inv_date_sk is not null and inv_item_sk is not null and inv_quantity_on_hand BETWEEN 100 AND 500)
                                  TableScan [TS_6] (rows=37584000 width=11)
                                    default@inventory,inventory,Tbl:COMPLETE,Col:COMPLETE,Output:["inv_date_sk","inv_item_sk","inv_quantity_on_hand"]
                      <-Reducer 2 [ONE_TO_ONE_EDGE]
                        FORWARD [RS_19]
                          PartitionCols:_col1
                          Merge Join Operator [MERGEJOIN_77] (rows=1781971 width=400)
                            Conds:RS_98._col0=RS_82._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                          <-Map 6 [SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_82]
                              PartitionCols:_col0
                              Select Operator [SEL_81] (rows=297 width=400)
                                Output:["_col0","_col1","_col2","_col3"]
                                Filter Operator [FIL_80] (rows=297 width=404)
                                  predicate:((i_manufact_id) IN (678, 964, 918, 849) and i_current_price BETWEEN 22 AND 52 and i_item_sk is not null)
                                  TableScan [TS_3] (rows=462000 width=403)
                                    default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id","i_item_desc","i_current_price","i_manufact_id"]
                          <-Map 1 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_98]
                              PartitionCols:_col0
                              Select Operator [SEL_97] (rows=287989836 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_96] (rows=287989836 width=4)
                                  predicate:((cs_item_sk BETWEEN DynamicValue(RS_17_item_i_item_sk_min) AND DynamicValue(RS_17_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_17_item_i_item_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_20_inventory_inv_item_sk_min) AND DynamicValue(RS_20_inventory_inv_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_20_inventory_inv_item_sk_bloom_filter))) and cs_item_sk is not null)
                                  TableScan [TS_0] (rows=287989836 width=4)
                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk"]
                                  <-Reducer 10 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_95]
                                      Group By Operator [GBY_94] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                      <-Reducer 9 [CUSTOM_SIMPLE_EDGE]
                                        SHUFFLE [RS_51]
                                          Group By Operator [GBY_50] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                            Select Operator [SEL_49] (rows=463969 width=8)
                                              Output:["_col0"]
                                               Please refer to the previous Merge Join Operator [MERGEJOIN_78]
                                  <-Reducer 7 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_87]
                                      Group By Operator [GBY_86] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                      <-Map 6 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_85]
                                          Group By Operator [GBY_84] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                            Select Operator [SEL_83] (rows=297 width=4)
                                              Output:["_col0"]
                                               Please refer to the previous Select Operator [SEL_81]

