PREHOOK: query: explain
select   
  ca_state,
  cd_gender,
  cd_marital_status,
  count(*) cnt1,
  avg(cd_dep_count),
  max(cd_dep_count),
  sum(cd_dep_count),
  cd_dep_employed_count,
  count(*) cnt2,
  avg(cd_dep_employed_count),
  max(cd_dep_employed_count),
  sum(cd_dep_employed_count),
  cd_dep_college_count,
  count(*) cnt3,
  avg(cd_dep_college_count),
  max(cd_dep_college_count),
  sum(cd_dep_college_count)
 from
  customer c,customer_address ca,customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  cd_demo_sk = c.c_current_cdemo_sk and 
  exists (select *
          from store_sales,date_dim
          where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 1999 and
                d_qoy < 4) and
   (exists (select *
            from web_sales,date_dim
            where c.c_customer_sk = ws_bill_customer_sk and
                  ws_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_qoy < 4) or 
    exists (select * 
            from catalog_sales,date_dim
            where c.c_customer_sk = cs_ship_customer_sk and
                  cs_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_qoy < 4))
 group by ca_state,
          cd_gender,
          cd_marital_status,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 order by ca_state,
          cd_gender,
          cd_marital_status,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select   
  ca_state,
  cd_gender,
  cd_marital_status,
  count(*) cnt1,
  avg(cd_dep_count),
  max(cd_dep_count),
  sum(cd_dep_count),
  cd_dep_employed_count,
  count(*) cnt2,
  avg(cd_dep_employed_count),
  max(cd_dep_employed_count),
  sum(cd_dep_employed_count),
  cd_dep_college_count,
  count(*) cnt3,
  avg(cd_dep_college_count),
  max(cd_dep_college_count),
  sum(cd_dep_college_count)
 from
  customer c,customer_address ca,customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  cd_demo_sk = c.c_current_cdemo_sk and 
  exists (select *
          from store_sales,date_dim
          where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 1999 and
                d_qoy < 4) and
   (exists (select *
            from web_sales,date_dim
            where c.c_customer_sk = ws_bill_customer_sk and
                  ws_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_qoy < 4) or 
    exists (select * 
            from catalog_sales,date_dim
            where c.c_customer_sk = cs_ship_customer_sk and
                  cs_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_qoy < 4))
 group by ca_state,
          cd_gender,
          cd_marital_status,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 order by ca_state,
          cd_gender,
          cd_marital_status,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 13 <- Reducer 16 (BROADCAST_EDGE)
Map 23 <- Reducer 10 (BROADCAST_EDGE), Reducer 19 (BROADCAST_EDGE)
Map 24 <- Reducer 22 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Reducer 10 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 15 (SIMPLE_EDGE), Map 23 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 11 (SIMPLE_EDGE)
Reducer 20 <- Map 15 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 12 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 14 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 18 (ONE_TO_ONE_EDGE), Reducer 4 (ONE_TO_ONE_EDGE)
Reducer 6 <- Reducer 21 (ONE_TO_ONE_EDGE), Reducer 5 (ONE_TO_ONE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 5 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_236]
        Limit [LIM_235] (rows=1 width=352)
          Number of rows:100
          Select Operator [SEL_234] (rows=1 width=352)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16"]
          <-Reducer 7 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_233]
              Select Operator [SEL_232] (rows=1 width=352)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col10","_col11","_col12","_col14","_col15","_col16","_col17"]
                Group By Operator [GBY_231] (rows=1 width=336)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","count(VALUE._col2)","max(VALUE._col3)","sum(VALUE._col4)","count(VALUE._col5)","max(VALUE._col6)","sum(VALUE._col7)","count(VALUE._col8)","max(VALUE._col9)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                <-Reducer 6 [SIMPLE_EDGE]
                  SHUFFLE [RS_67]
                    PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                    Group By Operator [GBY_66] (rows=1 width=336)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"],aggregations:["count()","sum(_col8)","count(_col8)","max(_col8)","sum(_col9)","count(_col9)","max(_col9)","sum(_col10)","count(_col10)","max(_col10)"],keys:_col4, _col6, _col7, _col8, _col9, _col10
                      Top N Key Operator [TNK_104] (rows=67 width=276)
                        keys:_col4, _col6, _col7, _col8, _col9, _col10,sort order:++++++,top n:100
                        Select Operator [SEL_65] (rows=67 width=276)
                          Output:["_col4","_col6","_col7","_col8","_col9","_col10"]
                          Filter Operator [FIL_64] (rows=67 width=276)
                            predicate:(_col12 is not null or _col14 is not null)
                            Merge Join Operator [MERGEJOIN_182] (rows=67 width=276)
                              Conds:RS_61._col0=RS_230._col0(Left Outer),Output:["_col4","_col6","_col7","_col8","_col9","_col10","_col12","_col14"]
                            <-Reducer 5 [ONE_TO_ONE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_61]
                                PartitionCols:_col0
                                Merge Join Operator [MERGEJOIN_181] (rows=68 width=276)
                                  Conds:RS_58._col0=RS_220._col0(Left Outer),Output:["_col0","_col4","_col6","_col7","_col8","_col9","_col10","_col12"]
                                <-Reducer 4 [ONE_TO_ONE_EDGE]
                                  FORWARD [RS_58]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_180] (rows=162346 width=272)
                                      Conds:RS_55._col0=RS_56._col0(Left Semi),Output:["_col0","_col4","_col6","_col7","_col8","_col9","_col10"]
                                    <-Reducer 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_56]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_54] (rows=168231 width=2)
                                          Output:["_col0"],keys:_col0
                                          Select Operator [SEL_18] (rows=62428523 width=2)
                                            Output:["_col0"]
                                            Merge Join Operator [MERGEJOIN_177] (rows=62428523 width=2)
                                              Conds:RS_210._col0=RS_194._col0(Inner),Output:["_col1"]
                                            <-Map 15 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_194]
                                                PartitionCols:_col0
                                                Select Operator [SEL_193] (rows=217 width=4)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_192] (rows=217 width=12)
                                                    predicate:((d_qoy < 4) and (d_year = 1999) and d_date_sk is not null)
                                                    TableScan [TS_12] (rows=73049 width=12)
                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                                            <-Map 13 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_210]
                                                PartitionCols:_col0
                                                Select Operator [SEL_209] (rows=525327388 width=7)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_208] (rows=525327388 width=7)
                                                    predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_16_date_dim_d_date_sk_min) AND DynamicValue(RS_16_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_16_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                    TableScan [TS_9] (rows=575995635 width=7)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk"]
                                                    <-Reducer 16 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_207]
                                                        Group By Operator [GBY_206] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_203]
                                                            Group By Operator [GBY_200] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_195] (rows=217 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_193]
                                    <-Reducer 3 [SIMPLE_EDGE]
                                      SHUFFLE [RS_55]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_176] (rows=78293105 width=272)
                                          Conds:RS_50._col1=RS_191._col0(Inner),Output:["_col0","_col4","_col6","_col7","_col8","_col9","_col10"]
                                        <-Map 12 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_191]
                                            PartitionCols:_col0
                                            Select Operator [SEL_190] (rows=1861800 width=186)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Filter Operator [FIL_189] (rows=1861800 width=186)
                                                predicate:cd_demo_sk is not null
                                                TableScan [TS_6] (rows=1861800 width=186)
                                                  default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_gender","cd_marital_status","cd_dep_count","cd_dep_employed_count","cd_dep_college_count"]
                                        <-Reducer 2 [SIMPLE_EDGE]
                                          SHUFFLE [RS_50]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_175] (rows=77201384 width=93)
                                              Conds:RS_185._col2=RS_188._col0(Inner),Output:["_col0","_col1","_col4"]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_185]
                                                PartitionCols:_col2
                                                Select Operator [SEL_184] (rows=77201384 width=11)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_183] (rows=77201384 width=11)
                                                    predicate:(c_current_addr_sk is not null and c_current_cdemo_sk is not null and c_customer_sk is not null)
                                                    TableScan [TS_0] (rows=80000000 width=11)
                                                      default@customer,c,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_addr_sk"]
                                            <-Map 11 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_188]
                                                PartitionCols:_col0
                                                Select Operator [SEL_187] (rows=40000000 width=90)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_186] (rows=40000000 width=90)
                                                    predicate:ca_address_sk is not null
                                                    TableScan [TS_3] (rows=40000000 width=90)
                                                      default@customer_address,ca,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state"]
                                <-Reducer 18 [ONE_TO_ONE_EDGE] vectorized
                                  FORWARD [RS_220]
                                    PartitionCols:_col0
                                    Select Operator [SEL_219] (rows=168231 width=7)
                                      Output:["_col0","_col1"]
                                      Group By Operator [GBY_218] (rows=168231 width=3)
                                        Output:["_col0"],keys:KEY._col0
                                      <-Reducer 17 [SIMPLE_EDGE]
                                        SHUFFLE [RS_30]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_29] (rows=168231 width=3)
                                            Output:["_col0"],keys:_col1
                                            Merge Join Operator [MERGEJOIN_178] (rows=17104380 width=3)
                                              Conds:RS_217._col0=RS_196._col0(Inner),Output:["_col1"]
                                            <-Map 15 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_196]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_193]
                                            <-Map 23 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_217]
                                                PartitionCols:_col0
                                                Select Operator [SEL_216] (rows=143930993 width=7)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_215] (rows=143930993 width=7)
                                                    predicate:((ws_bill_customer_sk BETWEEN DynamicValue(RS_58_c_c_customer_sk_min) AND DynamicValue(RS_58_c_c_customer_sk_max) and in_bloom_filter(ws_bill_customer_sk, DynamicValue(RS_58_c_c_customer_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_26_date_dim_d_date_sk_min) AND DynamicValue(RS_26_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_26_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                    TableScan [TS_19] (rows=144002668 width=7)
                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk"]
                                                    <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_214]
                                                        Group By Operator [GBY_213] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
                                                          FORWARD [RS_152]
                                                            Group By Operator [GBY_151] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_150] (rows=162346 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Merge Join Operator [MERGEJOIN_180]
                                                    <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_212]
                                                        Group By Operator [GBY_211] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_204]
                                                            Group By Operator [GBY_201] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_197] (rows=217 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_193]
                            <-Reducer 21 [ONE_TO_ONE_EDGE] vectorized
                              FORWARD [RS_230]
                                PartitionCols:_col0
                                Select Operator [SEL_229] (rows=167041 width=7)
                                  Output:["_col0","_col1"]
                                  Group By Operator [GBY_228] (rows=167041 width=3)
                                    Output:["_col0"],keys:KEY._col0
                                  <-Reducer 20 [SIMPLE_EDGE]
                                    SHUFFLE [RS_44]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_43] (rows=167041 width=3)
                                        Output:["_col0"],keys:_col1
                                        Merge Join Operator [MERGEJOIN_179] (rows=33642830 width=3)
                                          Conds:RS_227._col0=RS_198._col0(Inner),Output:["_col1"]
                                        <-Map 15 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_198]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_193]
                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_227]
                                            PartitionCols:_col0
                                            Select Operator [SEL_226] (rows=285115246 width=7)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_225] (rows=285115246 width=7)
                                                predicate:((cs_ship_customer_sk BETWEEN DynamicValue(RS_61_c_c_customer_sk_min) AND DynamicValue(RS_61_c_c_customer_sk_max) and in_bloom_filter(cs_ship_customer_sk, DynamicValue(RS_61_c_c_customer_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_40_date_dim_d_date_sk_min) AND DynamicValue(RS_40_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_40_date_dim_d_date_sk_bloom_filter))) and cs_ship_customer_sk is not null and cs_sold_date_sk is not null)
                                                TableScan [TS_33] (rows=287989836 width=7)
                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_ship_customer_sk"]
                                                <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_222]
                                                    Group By Operator [GBY_221] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_205]
                                                        Group By Operator [GBY_202] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_199] (rows=217 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_193]
                                                <-Reducer 9 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_224]
                                                    Group By Operator [GBY_223] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Reducer 5 [CUSTOM_SIMPLE_EDGE]
                                                      PARTITION_ONLY_SHUFFLE [RS_167]
                                                        Group By Operator [GBY_166] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_165] (rows=68 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Merge Join Operator [MERGEJOIN_181]

