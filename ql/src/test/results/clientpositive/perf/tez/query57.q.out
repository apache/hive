PREHOOK: query: explain
with v1 as(
 select i_category, i_brand,
        cc_name,
        d_year, d_moy,
        sum(cs_sales_price) sum_sales,
        avg(sum(cs_sales_price)) over
          (partition by i_category, i_brand,
                     cc_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     cc_name
           order by d_year, d_moy) rn
 from item, catalog_sales, date_dim, call_center
 where cs_item_sk = i_item_sk and
       cs_sold_date_sk = d_date_sk and
       cc_call_center_sk= cs_call_center_sk and
       (
         d_year = 2000 or
         ( d_year = 2000-1 and d_moy =12) or
         ( d_year = 2000+1 and d_moy =1)
       )
 group by i_category, i_brand,
          cc_name , d_year, d_moy),
 v2 as(
 select v1.i_category, v1.i_brand
        ,v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1. cc_name = v1_lag. cc_name and
       v1. cc_name = v1_lead. cc_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 2000 and
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@call_center
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with v1 as(
 select i_category, i_brand,
        cc_name,
        d_year, d_moy,
        sum(cs_sales_price) sum_sales,
        avg(sum(cs_sales_price)) over
          (partition by i_category, i_brand,
                     cc_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     cc_name
           order by d_year, d_moy) rn
 from item, catalog_sales, date_dim, call_center
 where cs_item_sk = i_item_sk and
       cs_sold_date_sk = d_date_sk and
       cc_call_center_sk= cs_call_center_sk and
       (
         d_year = 2000 or
         ( d_year = 2000-1 and d_moy =12) or
         ( d_year = 2000+1 and d_moy =1)
       )
 group by i_category, i_brand,
          cc_name , d_year, d_moy),
 v2 as(
 select v1.i_category, v1.i_brand
        ,v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1. cc_name = v1_lag. cc_name and
       v1. cc_name = v1_lead. cc_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 2000 and
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@call_center
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 10 <- Reducer 14 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 12 <- Map 15 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 4 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 8 <- Reducer 3 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_326]
        Limit [LIM_325] (rows=100 width=758)
          Number of rows:100
          Select Operator [SEL_324] (rows=397735 width=758)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 5 [SIMPLE_EDGE]
            SHUFFLE [RS_114]
              Select Operator [SEL_113] (rows=397735 width=758)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                Top N Key Operator [TNK_182] (rows=397735 width=646)
                  keys:(_col15 - _col16), _col13,top n:100
                  Merge Join Operator [MERGEJOIN_283] (rows=397735 width=646)
                    Conds:RS_311._col0, _col1, _col4, _col2=RS_111._col5, _col6, _col12, _col7(Inner),Output:["_col3","_col8","_col10","_col11","_col13","_col14","_col15","_col16"]
                  <-Reducer 4 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_311]
                      PartitionCols:_col0, _col1, _col4, _col2
                      Select Operator [SEL_309] (rows=2386410 width=404)
                        Output:["_col0","_col1","_col2","_col3","_col4"]
                        Filter Operator [FIL_307] (rows=2386410 width=408)
                          predicate:rank_window_0 is not null
                          PTF Operator [PTF_305] (rows=2386410 width=408)
                            Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col2 ASC NULLS LAST, _col3 ASC NULLS LAST","partition by:":"_col1, _col0, _col4"}]
                            Select Operator [SEL_304] (rows=2386410 width=408)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            <-Reducer 3 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_302]
                                PartitionCols:_col1, _col0, _col4
                                Group By Operator [GBY_301] (rows=2386410 width=408)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_24]
                                    PartitionCols:_col0, _col1, _col2, _col3, _col4
                                    Group By Operator [GBY_23] (rows=87441185 width=408)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col6)"],keys:_col1, _col2, _col8, _col9, _col11
                                      Merge Join Operator [MERGEJOIN_275] (rows=87441185 width=406)
                                        Conds:RS_286._col0=RS_20._col2(Inner),Output:["_col1","_col2","_col6","_col8","_col9","_col11"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_286]
                                          PartitionCols:_col0
                                          Select Operator [SEL_285] (rows=462000 width=194)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_284] (rows=462000 width=194)
                                              predicate:(i_item_sk is not null and i_category is not null and i_brand is not null)
                                              TableScan [TS_0] (rows=462000 width=194)
                                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand","i_category"]
                                      <-Reducer 12 [SIMPLE_EDGE]
                                        SHUFFLE [RS_20]
                                          PartitionCols:_col2
                                          Merge Join Operator [MERGEJOIN_274] (rows=87441185 width=220)
                                            Conds:RS_15._col1=RS_300._col0(Inner),Output:["_col2","_col3","_col5","_col6","_col8"]
                                          <-Map 15 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_300]
                                              PartitionCols:_col0
                                              Select Operator [SEL_299] (rows=60 width=102)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_298] (rows=60 width=102)
                                                  predicate:(cc_call_center_sk is not null and cc_name is not null)
                                                  TableScan [TS_9] (rows=60 width=102)
                                                    default@call_center,call_center,Tbl:COMPLETE,Col:COMPLETE,Output:["cc_call_center_sk","cc_name"]
                                          <-Reducer 11 [SIMPLE_EDGE]
                                            SHUFFLE [RS_15]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_273] (rows=87441185 width=126)
                                                Conds:RS_297._col0=RS_289._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6"]
                                              <-Map 13 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_289]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_288] (rows=564 width=12)
                                                    Output:["_col0","_col1","_col2"]
                                                    Filter Operator [FIL_287] (rows=564 width=12)
                                                      predicate:((d_year) IN (2000, 1999, 2001) and ((d_year = 2000) or (struct(d_year,d_moy)) IN (const struct(1999,12), const struct(2001,1))) and d_date_sk is not null)
                                                      TableScan [TS_6] (rows=73049 width=12)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                              <-Map 10 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_297]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_296] (rows=285117980 width=123)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_295] (rows=285117980 width=123)
                                                      predicate:(cs_sold_date_sk is not null and cs_call_center_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_13_date_dim_d_date_sk_min) AND DynamicValue(RS_13_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_13_date_dim_d_date_sk_bloom_filter)))
                                                      TableScan [TS_3] (rows=287989836 width=123)
                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_call_center_sk","cs_item_sk","cs_sales_price"]
                                                      <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_294]
                                                          Group By Operator [GBY_293] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_292]
                                                              Group By Operator [GBY_291] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_290] (rows=564 width=4)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_288]
                  <-Reducer 7 [SIMPLE_EDGE]
                    SHUFFLE [RS_111]
                      PartitionCols:_col5, _col6, _col12, _col7
                      Merge Join Operator [MERGEJOIN_282] (rows=397735 width=636)
                        Conds:RS_312._col0, _col1, _col4, _col2=RS_323._col0, _col1, _col7, _col2(Inner),Output:["_col3","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                      <-Reducer 4 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_312]
                          PartitionCols:_col0, _col1, _col4, _col2
                          Select Operator [SEL_310] (rows=2386410 width=404)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Filter Operator [FIL_308] (rows=2386410 width=408)
                              predicate:rank_window_0 is not null
                              PTF Operator [PTF_306] (rows=2386410 width=408)
                                Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col2 ASC NULLS LAST, _col3 ASC NULLS LAST","partition by:":"_col1, _col0, _col4"}]
                                 Please refer to the previous Select Operator [SEL_304]
                      <-Reducer 9 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_323]
                          PartitionCols:_col0, _col1, _col7, _col2
                          Select Operator [SEL_322] (rows=397735 width=524)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                            Filter Operator [FIL_321] (rows=397735 width=524)
                              predicate:CASE WHEN ((_col0 > 0)) THEN (((abs((_col6 - _col0)) / _col0) > 0.1)) ELSE (false) END
                              Select Operator [SEL_320] (rows=795470 width=520)
                                Output:["rank_window_1","_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                Filter Operator [FIL_319] (rows=795470 width=520)
                                  predicate:((_col0 > 0) and rank_window_1 is not null and (_col3 = 2000))
                                  PTF Operator [PTF_318] (rows=2386410 width=520)
                                    Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 ASC NULLS LAST, _col4 ASC NULLS LAST","partition by:":"_col2, _col1, _col5"}]
                                    Select Operator [SEL_317] (rows=2386410 width=520)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                    <-Reducer 8 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_316]
                                        PartitionCols:_col1, _col0, _col4
                                        Select Operator [SEL_315] (rows=2386410 width=408)
                                          Output:["avg_window_0","_col0","_col1","_col2","_col3","_col4","_col5"]
                                          PTF Operator [PTF_314] (rows=2386410 width=408)
                                            Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 ASC NULLS FIRST, _col0 ASC NULLS FIRST, _col4 ASC NULLS FIRST, _col2 ASC NULLS FIRST","partition by:":"_col1, _col0, _col4, _col2"}]
                                            Select Operator [SEL_313] (rows=2386410 width=408)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            <-Reducer 3 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_303]
                                                PartitionCols:_col1, _col0, _col4, _col2
                                                 Please refer to the previous Group By Operator [GBY_301]

