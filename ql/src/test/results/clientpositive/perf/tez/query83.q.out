PREHOOK: query: explain
with sr_items as
 (select i_item_id item_id,
        sum(sr_return_quantity) sr_item_qty
 from store_returns,
      item,
      date_dim
 where sr_item_sk = i_item_sk
 and   d_date    in 
	(select d_date
	from date_dim
	where d_week_seq in 
		(select d_week_seq
		from date_dim
	  where d_date in ('1998-01-02','1998-10-15','1998-11-10')))
 and   sr_returned_date_sk   = d_date_sk
 group by i_item_id),
 cr_items as
 (select i_item_id item_id,
        sum(cr_return_quantity) cr_item_qty
 from catalog_returns,
      item,
      date_dim
 where cr_item_sk = i_item_sk
 and   d_date    in 
	(select d_date
	from date_dim
	where d_week_seq in 
		(select d_week_seq
		from date_dim
	  where d_date in ('1998-01-02','1998-10-15','1998-11-10')))
 and   cr_returned_date_sk   = d_date_sk
 group by i_item_id),
 wr_items as
 (select i_item_id item_id,
        sum(wr_return_quantity) wr_item_qty
 from web_returns,
      item,
      date_dim
 where wr_item_sk = i_item_sk
 and   d_date    in 
	(select d_date
	from date_dim
	where d_week_seq in 
		(select d_week_seq
		from date_dim
		where d_date in ('1998-01-02','1998-10-15','1998-11-10')))
 and   wr_returned_date_sk   = d_date_sk
 group by i_item_id)
  select  sr_items.item_id
       ,sr_item_qty
       ,sr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 sr_dev
       ,cr_item_qty
       ,cr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 cr_dev
       ,wr_item_qty
       ,wr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 wr_dev
       ,(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 average
 from sr_items
     ,cr_items
     ,wr_items
 where sr_items.item_id=cr_items.item_id
   and sr_items.item_id=wr_items.item_id 
 order by sr_items.item_id
         ,sr_item_qty
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@web_returns
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with sr_items as
 (select i_item_id item_id,
        sum(sr_return_quantity) sr_item_qty
 from store_returns,
      item,
      date_dim
 where sr_item_sk = i_item_sk
 and   d_date    in 
	(select d_date
	from date_dim
	where d_week_seq in 
		(select d_week_seq
		from date_dim
	  where d_date in ('1998-01-02','1998-10-15','1998-11-10')))
 and   sr_returned_date_sk   = d_date_sk
 group by i_item_id),
 cr_items as
 (select i_item_id item_id,
        sum(cr_return_quantity) cr_item_qty
 from catalog_returns,
      item,
      date_dim
 where cr_item_sk = i_item_sk
 and   d_date    in 
	(select d_date
	from date_dim
	where d_week_seq in 
		(select d_week_seq
		from date_dim
	  where d_date in ('1998-01-02','1998-10-15','1998-11-10')))
 and   cr_returned_date_sk   = d_date_sk
 group by i_item_id),
 wr_items as
 (select i_item_id item_id,
        sum(wr_return_quantity) wr_item_qty
 from web_returns,
      item,
      date_dim
 where wr_item_sk = i_item_sk
 and   d_date    in 
	(select d_date
	from date_dim
	where d_week_seq in 
		(select d_week_seq
		from date_dim
		where d_date in ('1998-01-02','1998-10-15','1998-11-10')))
 and   wr_returned_date_sk   = d_date_sk
 group by i_item_id)
  select  sr_items.item_id
       ,sr_item_qty
       ,sr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 sr_dev
       ,cr_item_qty
       ,cr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 cr_dev
       ,wr_item_qty
       ,wr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 wr_dev
       ,(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 average
 from sr_items
     ,cr_items
     ,wr_items
 where sr_items.item_id=cr_items.item_id
   and sr_items.item_id=wr_items.item_id 
 order by sr_items.item_id
         ,sr_item_qty
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@web_returns
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 16 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Map 21 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 17 <- Map 15 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Reducer 16 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 11 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 14 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 20 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_402]
        Limit [LIM_401] (rows=57 width=260)
          Number of rows:100
          Select Operator [SEL_400] (rows=57 width=260)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_127]
              Select Operator [SEL_126] (rows=57 width=260)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                Top N Key Operator [TNK_207] (rows=57 width=148)
                  keys:_col0, _col4,top n:100
                  Merge Join Operator [MERGEJOIN_364] (rows=57 width=148)
                    Conds:RS_123._col0=RS_399._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5","_col7","_col8"]
                  <-Reducer 14 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_399]
                      PartitionCols:_col0
                      Select Operator [SEL_398] (rows=57 width=116)
                        Output:["_col0","_col1","_col2"]
                        Group By Operator [GBY_397] (rows=57 width=108)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 13 [SIMPLE_EDGE]
                          SHUFFLE [RS_117]
                            PartitionCols:_col0
                            Group By Operator [GBY_116] (rows=57 width=108)
                              Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col4
                              Merge Join Operator [MERGEJOIN_362] (rows=2521 width=100)
                                Conds:RS_112._col0=RS_113._col0(Inner),Output:["_col2","_col4"]
                              <-Reducer 16 [SIMPLE_EDGE]
                                SHUFFLE [RS_113]
                                  PartitionCols:_col0
                                  Merge Join Operator [MERGEJOIN_353] (rows=2 width=4)
                                    Conds:RS_377._col1=RS_384._col0(Inner),Output:["_col0"]
                                  <-Map 15 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_377]
                                      PartitionCols:_col1
                                      Select Operator [SEL_375] (rows=73049 width=98)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_373] (rows=73049 width=98)
                                          predicate:(d_date is not null and d_date_sk is not null)
                                          TableScan [TS_6] (rows=73049 width=98)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_week_seq"]
                                  <-Reducer 18 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_384]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_383] (rows=2 width=94)
                                        Output:["_col0"],keys:KEY._col0
                                      <-Reducer 17 [SIMPLE_EDGE]
                                        SHUFFLE [RS_22]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_21] (rows=2 width=94)
                                            Output:["_col0"],keys:_col0
                                            Merge Join Operator [MERGEJOIN_352] (rows=5 width=94)
                                              Conds:RS_378._col1=RS_382._col0(Left Semi),Output:["_col0"]
                                            <-Map 15 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_378]
                                                PartitionCols:_col1
                                                Select Operator [SEL_376] (rows=73049 width=98)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_374] (rows=73049 width=98)
                                                    predicate:(d_week_seq is not null and d_date is not null)
                                                     Please refer to the previous TableScan [TS_6]
                                            <-Map 19 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_382]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_381] (rows=1 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Select Operator [SEL_380] (rows=2 width=4)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_379] (rows=2 width=98)
                                                      predicate:((d_date) IN ('1998-01-02', '1998-10-15', '1998-11-10') and d_week_seq is not null)
                                                      TableScan [TS_12] (rows=73049 width=98)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date","d_week_seq"]
                              <-Reducer 12 [SIMPLE_EDGE]
                                SHUFFLE [RS_112]
                                  PartitionCols:_col0
                                  Merge Join Operator [MERGEJOIN_357] (rows=13749816 width=107)
                                    Conds:RS_396._col1=RS_372._col0(Inner),Output:["_col0","_col2","_col4"]
                                  <-Map 8 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_372]
                                      PartitionCols:_col0
                                      Select Operator [SEL_369] (rows=462000 width=104)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_368] (rows=462000 width=104)
                                          predicate:(i_item_sk is not null and i_item_id is not null)
                                          TableScan [TS_3] (rows=462000 width=104)
                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id"]
                                  <-Map 21 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_396]
                                      PartitionCols:_col1
                                      Select Operator [SEL_395] (rows=13749816 width=11)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_394] (rows=13749816 width=11)
                                          predicate:(wr_returned_date_sk is not null and wr_item_sk is not null)
                                          TableScan [TS_80] (rows=14398467 width=11)
                                            default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_returned_date_sk","wr_item_sk","wr_return_quantity"]
                  <-Reducer 5 [SIMPLE_EDGE]
                    SHUFFLE [RS_123]
                      PartitionCols:_col0
                      Merge Join Operator [MERGEJOIN_363] (rows=60 width=132)
                        Conds:RS_387._col0=RS_393._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5"]
                      <-Reducer 11 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_393]
                          PartitionCols:_col0
                          Select Operator [SEL_392] (rows=63 width=116)
                            Output:["_col0","_col1","_col2"]
                            Group By Operator [GBY_391] (rows=63 width=108)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 10 [SIMPLE_EDGE]
                              SHUFFLE [RS_77]
                                PartitionCols:_col0
                                Group By Operator [GBY_76] (rows=63 width=108)
                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col4
                                  Merge Join Operator [MERGEJOIN_361] (rows=11105 width=100)
                                    Conds:RS_72._col0=RS_73._col0(Inner),Output:["_col2","_col4"]
                                  <-Reducer 16 [SIMPLE_EDGE]
                                    SHUFFLE [RS_73]
                                      PartitionCols:_col0
                                       Please refer to the previous Merge Join Operator [MERGEJOIN_353]
                                  <-Reducer 9 [SIMPLE_EDGE]
                                    SHUFFLE [RS_72]
                                      PartitionCols:_col0
                                      Merge Join Operator [MERGEJOIN_354] (rows=55578005 width=107)
                                        Conds:RS_390._col1=RS_371._col0(Inner),Output:["_col0","_col2","_col4"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_371]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_369]
                                      <-Map 20 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_390]
                                          PartitionCols:_col1
                                          Select Operator [SEL_389] (rows=55578005 width=11)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_388] (rows=55578005 width=11)
                                              predicate:(sr_returned_date_sk is not null and sr_item_sk is not null)
                                              TableScan [TS_40] (rows=57591150 width=11)
                                                default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_returned_date_sk","sr_item_sk","sr_return_quantity"]
                      <-Reducer 4 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_387]
                          PartitionCols:_col0
                          Select Operator [SEL_386] (rows=60 width=116)
                            Output:["_col0","_col1","_col2"]
                            Group By Operator [GBY_385] (rows=60 width=108)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 3 [SIMPLE_EDGE]
                              SHUFFLE [RS_37]
                                PartitionCols:_col0
                                Group By Operator [GBY_36] (rows=60 width=108)
                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col4
                                  Merge Join Operator [MERGEJOIN_360] (rows=5478 width=100)
                                    Conds:RS_32._col0=RS_33._col0(Inner),Output:["_col2","_col4"]
                                  <-Reducer 16 [SIMPLE_EDGE]
                                    SHUFFLE [RS_33]
                                      PartitionCols:_col0
                                       Please refer to the previous Merge Join Operator [MERGEJOIN_353]
                                  <-Reducer 2 [SIMPLE_EDGE]
                                    SHUFFLE [RS_32]
                                      PartitionCols:_col0
                                      Merge Join Operator [MERGEJOIN_351] (rows=28798881 width=107)
                                        Conds:RS_367._col1=RS_370._col0(Inner),Output:["_col0","_col2","_col4"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_370]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_369]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_367]
                                          PartitionCols:_col1
                                          Select Operator [SEL_366] (rows=28798881 width=11)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_365] (rows=28798881 width=11)
                                              predicate:(cr_item_sk is not null and cr_returned_date_sk is not null)
                                              TableScan [TS_0] (rows=28798881 width=11)
                                                default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_returned_date_sk","cr_item_sk","cr_return_quantity"]

