PREHOOK: query: explain
with v1 as(
 select i_category, i_brand,
        s_store_name, s_company_name,
        d_year, d_moy,
        sum(ss_sales_price) sum_sales,
        avg(sum(ss_sales_price)) over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name
           order by d_year, d_moy) rn
 from item, store_sales, date_dim, store
 where ss_item_sk = i_item_sk and
       ss_sold_date_sk = d_date_sk and
       ss_store_sk = s_store_sk and
       (
         d_year = 2000 or
         ( d_year = 2000-1 and d_moy =12) or
         ( d_year = 2000+1 and d_moy =1)
       )
 group by i_category, i_brand,
          s_store_name, s_company_name,
          d_year, d_moy),
 v2 as(
 select v1.i_category
        ,v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1.s_store_name = v1_lag.s_store_name and
       v1.s_store_name = v1_lead.s_store_name and
       v1.s_company_name = v1_lag.s_company_name and
       v1.s_company_name = v1_lead.s_company_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 2000 and    
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with v1 as(
 select i_category, i_brand,
        s_store_name, s_company_name,
        d_year, d_moy,
        sum(ss_sales_price) sum_sales,
        avg(sum(ss_sales_price)) over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name
           order by d_year, d_moy) rn
 from item, store_sales, date_dim, store
 where ss_item_sk = i_item_sk and
       ss_sold_date_sk = d_date_sk and
       ss_store_sk = s_store_sk and
       (
         d_year = 2000 or
         ( d_year = 2000-1 and d_moy =12) or
         ( d_year = 2000+1 and d_moy =1)
       )
 group by i_category, i_brand,
          s_store_name, s_company_name,
          d_year, d_moy),
 v2 as(
 select v1.i_category
        ,v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1.s_store_name = v1_lag.s_store_name and
       v1.s_store_name = v1_lead.s_store_name and
       v1.s_company_name = v1_lag.s_company_name and
       v1.s_company_name = v1_lead.s_company_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 2000 and    
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 13 (BROADCAST_EDGE)
Reducer 10 <- Reducer 5 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 12 (SIMPLE_EDGE)
Reducer 3 <- Map 14 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 15 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 11 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_321]
        Limit [LIM_320] (rows=100 width=658)
          Number of rows:100
          Select Operator [SEL_319] (rows=301730 width=658)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 7 [SIMPLE_EDGE]
            SHUFFLE [RS_110]
              Select Operator [SEL_109] (rows=301730 width=658)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                Merge Join Operator [MERGEJOIN_278] (rows=301730 width=546)
                  Conds:RS_106._col6, _col7, _col8, _col9, _col14=RS_306._col0, _col1, _col2, _col3, _col5(Inner),Output:["_col4","_col6","_col10","_col11","_col12","_col13","_col19"]
                <-Reducer 6 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_306]
                    PartitionCols:_col0, _col1, _col2, _col3, _col5
                    Select Operator [SEL_304] (rows=1810380 width=485)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                      Filter Operator [FIL_302] (rows=1810380 width=489)
                        predicate:rank_window_0 is not null
                        PTF Operator [PTF_300] (rows=1810380 width=489)
                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col2 ASC NULLS LAST, _col3 ASC NULLS LAST","partition by:":"_col1, _col0, _col4, _col5"}]
                          Select Operator [SEL_299] (rows=1810380 width=489)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                          <-Reducer 5 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_297]
                              PartitionCols:_col1, _col0, _col4, _col5
                              Group By Operator [GBY_296] (rows=1810380 width=489)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                              <-Reducer 4 [SIMPLE_EDGE]
                                SHUFFLE [RS_93]
                                  PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                  Group By Operator [GBY_92] (rows=525329897 width=489)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col3)"],keys:_col8, _col9, _col5, _col6, _col11, _col12
                                    Merge Join Operator [MERGEJOIN_276] (rows=525329897 width=483)
                                      Conds:RS_88._col2=RS_295._col0(Inner),Output:["_col3","_col5","_col6","_col8","_col9","_col11","_col12"]
                                    <-Map 15 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_295]
                                        PartitionCols:_col0
                                        Select Operator [SEL_294] (rows=1704 width=183)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_293] (rows=1704 width=183)
                                            predicate:(s_store_sk is not null and s_store_name is not null and s_company_name is not null)
                                            TableScan [TS_79] (rows=1704 width=183)
                                              default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_company_name"]
                                    <-Reducer 3 [SIMPLE_EDGE]
                                      SHUFFLE [RS_88]
                                        PartitionCols:_col2
                                        Merge Join Operator [MERGEJOIN_275] (rows=525329897 width=308)
                                          Conds:RS_85._col1=RS_292._col0(Inner),Output:["_col2","_col3","_col5","_col6","_col8","_col9"]
                                        <-Map 14 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_292]
                                            PartitionCols:_col0
                                            Select Operator [SEL_291] (rows=462000 width=194)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_290] (rows=462000 width=194)
                                                predicate:(i_item_sk is not null and i_category is not null and i_brand is not null)
                                                TableScan [TS_76] (rows=462000 width=194)
                                                  default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand","i_category"]
                                        <-Reducer 2 [SIMPLE_EDGE]
                                          SHUFFLE [RS_85]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_274] (rows=525329897 width=122)
                                              Conds:RS_289._col0=RS_281._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6"]
                                            <-Map 12 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_281]
                                                PartitionCols:_col0
                                                Select Operator [SEL_280] (rows=564 width=12)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_279] (rows=564 width=12)
                                                    predicate:((d_year) IN (2000, 1999, 2001) and ((d_year = 2000) or (struct(d_year,d_moy)) IN (const struct(1999,12), const struct(2001,1))) and d_date_sk is not null)
                                                    TableScan [TS_73] (rows=73049 width=12)
                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_289]
                                                PartitionCols:_col0
                                                Select Operator [SEL_288] (rows=525329897 width=118)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                  Filter Operator [FIL_287] (rows=525329897 width=118)
                                                    predicate:(ss_sold_date_sk is not null and ss_store_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_83_date_dim_d_date_sk_min) AND DynamicValue(RS_83_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_83_date_dim_d_date_sk_bloom_filter)))
                                                    TableScan [TS_70] (rows=575995635 width=118)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_sales_price"]
                                                    <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_286]
                                                        Group By Operator [GBY_285] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_284]
                                                            Group By Operator [GBY_283] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_282] (rows=564 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_280]
                <-Reducer 9 [SIMPLE_EDGE]
                  SHUFFLE [RS_106]
                    PartitionCols:_col6, _col7, _col8, _col9, _col14
                    Merge Join Operator [MERGEJOIN_277] (rows=301730 width=717)
                      Conds:RS_307._col0, _col1, _col2, _col3, _col5=RS_318._col0, _col1, _col2, _col3, _col8(Inner),Output:["_col4","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
                    <-Reducer 6 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_307]
                        PartitionCols:_col0, _col1, _col2, _col3, _col5
                        Select Operator [SEL_305] (rows=1810380 width=485)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Filter Operator [FIL_303] (rows=1810380 width=489)
                            predicate:rank_window_0 is not null
                            PTF Operator [PTF_301] (rows=1810380 width=489)
                              Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col2 ASC NULLS LAST, _col3 ASC NULLS LAST","partition by:":"_col1, _col0, _col4, _col5"}]
                               Please refer to the previous Select Operator [SEL_299]
                    <-Reducer 11 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_318]
                        PartitionCols:_col0, _col1, _col2, _col3, _col8
                        Select Operator [SEL_317] (rows=301730 width=605)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                          Filter Operator [FIL_316] (rows=301730 width=605)
                            predicate:CASE WHEN ((_col0 > 0)) THEN (((abs((_col7 - _col0)) / _col0) > 0.1)) ELSE (false) END
                            Select Operator [SEL_315] (rows=603460 width=601)
                              Output:["rank_window_1","_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                              Filter Operator [FIL_314] (rows=603460 width=601)
                                predicate:((_col0 > 0) and rank_window_1 is not null and (_col3 = 2000))
                                PTF Operator [PTF_313] (rows=1810380 width=601)
                                  Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 ASC NULLS LAST, _col4 ASC NULLS LAST","partition by:":"_col2, _col1, _col5, _col6"}]
                                  Select Operator [SEL_312] (rows=1810380 width=601)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                  <-Reducer 10 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_311]
                                      PartitionCols:_col1, _col0, _col4, _col5
                                      Select Operator [SEL_310] (rows=1810380 width=489)
                                        Output:["avg_window_0","_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                        PTF Operator [PTF_309] (rows=1810380 width=489)
                                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 ASC NULLS FIRST, _col0 ASC NULLS FIRST, _col4 ASC NULLS FIRST, _col5 ASC NULLS FIRST, _col2 ASC NULLS FIRST","partition by:":"_col1, _col0, _col4, _col5, _col2"}]
                                          Select Operator [SEL_308] (rows=1810380 width=489)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                          <-Reducer 5 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_298]
                                              PartitionCols:_col1, _col0, _col4, _col5, _col2
                                               Please refer to the previous Group By Operator [GBY_296]

