PREHOOK: query: explain
with v1 as(
 select i_category, i_brand,
        s_store_name, s_company_name,
        d_year, d_moy,
        sum(ss_sales_price) sum_sales,
        avg(sum(ss_sales_price)) over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name
           order by d_year, d_moy) rn
 from item, store_sales, date_dim, store
 where ss_item_sk = i_item_sk and
       ss_sold_date_sk = d_date_sk and
       ss_store_sk = s_store_sk and
       (
         d_year = 2000 or
         ( d_year = 2000-1 and d_moy =12) or
         ( d_year = 2000+1 and d_moy =1)
       )
 group by i_category, i_brand,
          s_store_name, s_company_name,
          d_year, d_moy),
 v2 as(
 select v1.i_category
        ,v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1.s_store_name = v1_lag.s_store_name and
       v1.s_store_name = v1_lead.s_store_name and
       v1.s_company_name = v1_lag.s_company_name and
       v1.s_company_name = v1_lead.s_company_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 2000 and    
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with v1 as(
 select i_category, i_brand,
        s_store_name, s_company_name,
        d_year, d_moy,
        sum(ss_sales_price) sum_sales,
        avg(sum(ss_sales_price)) over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name
           order by d_year, d_moy) rn
 from item, store_sales, date_dim, store
 where ss_item_sk = i_item_sk and
       ss_sold_date_sk = d_date_sk and
       ss_store_sk = s_store_sk and
       (
         d_year = 2000 or
         ( d_year = 2000-1 and d_moy =12) or
         ( d_year = 2000+1 and d_moy =1)
       )
 group by i_category, i_brand,
          s_store_name, s_company_name,
          d_year, d_moy),
 v2 as(
 select v1.i_category
        ,v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1.s_store_name = v1_lag.s_store_name and
       v1.s_store_name = v1_lead.s_store_name and
       v1.s_company_name = v1_lag.s_company_name and
       v1.s_company_name = v1_lead.s_company_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 2000 and    
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 5 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 12 (SIMPLE_EDGE)
Reducer 3 <- Map 13 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 14 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 11 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 5 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8
      File Output Operator [FS_112]
        Limit [LIM_110] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_109] (rows=843315280 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 7 [SIMPLE_EDGE]
            SHUFFLE [RS_108]
              Select Operator [SEL_107] (rows=843315280 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                Merge Join Operator [MERGEJOIN_189] (rows=843315280 width=88)
                  Conds:RS_103._col0, _col1, _col2, _col3, (_col5 + 1)=RS_104._col0, _col1, _col2, _col3, _col8(Inner),RS_104._col0, _col1, _col2, _col3, _col8=RS_105._col0, _col1, _col2, _col3, (_col5 - 1)(Inner),Output:["_col4","_col6","_col10","_col11","_col12","_col13","_col19"]
                <-Reducer 11 [SIMPLE_EDGE]
                  SHUFFLE [RS_104]
                    PartitionCols:_col0, _col1, _col2, _col3, _col8
                    Select Operator [SEL_67] (rows=31943759 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                      Filter Operator [FIL_169] (rows=31943759 width=88)
                        predicate:CASE WHEN ((_col0 > 0)) THEN (((abs((_col7 - _col0)) / _col0) > 0.1)) ELSE (null) END
                        Select Operator [SEL_66] (rows=63887519 width=88)
                          Output:["rank_window_1","_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                          Filter Operator [FIL_170] (rows=63887519 width=88)
                            predicate:((_col0 > 0) and (_col1 = 2000) and rank_window_1 is not null)
                            PTF Operator [PTF_65] (rows=383325119 width=88)
                              Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 ASC NULLS FIRST, _col2 ASC NULLS FIRST","partition by:":"_col4, _col3, _col5, _col6"}]
                              Select Operator [SEL_64] (rows=383325119 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                              <-Reducer 10 [SIMPLE_EDGE]
                                SHUFFLE [RS_63]
                                  PartitionCols:_col3, _col2, _col4, _col5
                                  Select Operator [SEL_62] (rows=383325119 width=88)
                                    Output:["avg_window_0","_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                    PTF Operator [PTF_61] (rows=383325119 width=88)
                                      Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 ASC NULLS FIRST, _col2 ASC NULLS FIRST, _col4 ASC NULLS FIRST, _col5 ASC NULLS FIRST, _col0 ASC NULLS FIRST","partition by:":"_col3, _col2, _col4, _col5, _col0"}]
                                      Select Operator [SEL_60] (rows=383325119 width=88)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                      <-Reducer 5 [SIMPLE_EDGE]
                                        SHUFFLE [RS_59]
                                          PartitionCols:_col3, _col2, _col4, _col5, _col0
                                          Group By Operator [GBY_94] (rows=383325119 width=88)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                                          <-Reducer 4 [SIMPLE_EDGE]
                                            SHUFFLE [RS_93]
                                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                              Group By Operator [GBY_92] (rows=766650239 width=88)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col3)"],keys:_col5, _col6, _col8, _col9, _col11, _col12
                                                Merge Join Operator [MERGEJOIN_188] (rows=766650239 width=88)
                                                  Conds:RS_88._col2=RS_89._col0(Inner),Output:["_col3","_col5","_col6","_col8","_col9","_col11","_col12"]
                                                <-Map 14 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_89]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_81] (rows=1704 width=1910)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_179] (rows=1704 width=1910)
                                                        predicate:(s_company_name is not null and s_store_name is not null and s_store_sk is not null)
                                                        TableScan [TS_79] (rows=1704 width=1910)
                                                          default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_name","s_company_name"]
                                                <-Reducer 3 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_88]
                                                    PartitionCols:_col2
                                                    Merge Join Operator [MERGEJOIN_187] (rows=696954748 width=88)
                                                      Conds:RS_85._col1=RS_86._col0(Inner),Output:["_col2","_col3","_col5","_col6","_col8","_col9"]
                                                    <-Map 13 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_86]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_78] (rows=462000 width=1436)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_178] (rows=462000 width=1436)
                                                            predicate:(i_brand is not null and i_category is not null and i_item_sk is not null)
                                                            TableScan [TS_76] (rows=462000 width=1436)
                                                              default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_brand","i_category"]
                                                    <-Reducer 2 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_85]
                                                        PartitionCols:_col1
                                                        Merge Join Operator [MERGEJOIN_186] (rows=633595212 width=88)
                                                          Conds:RS_82._col0=RS_83._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6"]
                                                        <-Map 1 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_82]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_72] (rows=575995635 width=88)
                                                              Output:["_col0","_col1","_col2","_col3"]
                                                              Filter Operator [FIL_176] (rows=575995635 width=88)
                                                                predicate:(ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                                TableScan [TS_70] (rows=575995635 width=88)
                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_sales_price"]
                                                        <-Map 12 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_83]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_75] (rows=73048 width=1119)
                                                              Output:["_col0","_col1","_col2"]
                                                              Filter Operator [FIL_177] (rows=73048 width=1119)
                                                                predicate:(((d_year = 2000) or ((d_year = 1999) and (d_moy = 12)) or ((d_year = 2001) and (d_moy = 1))) and d_date_sk is not null)
                                                                TableScan [TS_73] (rows=73049 width=1119)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                <-Reducer 6 [SIMPLE_EDGE]
                  SHUFFLE [RS_105]
                    PartitionCols:_col0, _col1, _col2, _col3, (_col5 - 1)
                    Select Operator [SEL_99] (rows=383325119 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                      Filter Operator [FIL_175] (rows=383325119 width=88)
                        predicate:rank_window_0 is not null
                        PTF Operator [PTF_98] (rows=383325119 width=88)
                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col0 ASC NULLS FIRST, _col1 ASC NULLS FIRST","partition by:":"_col3, _col2, _col4, _col5"}]
                          Select Operator [SEL_97] (rows=383325119 width=88)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                          <-Reducer 5 [SIMPLE_EDGE]
                            SHUFFLE [RS_96]
                              PartitionCols:_col3, _col2, _col4, _col5
                               Please refer to the previous Group By Operator [GBY_94]
                <-Reducer 9 [SIMPLE_EDGE]
                  SHUFFLE [RS_103]
                    PartitionCols:_col0, _col1, _col2, _col3, (_col5 + 1)
                    Select Operator [SEL_29] (rows=383325119 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                      Filter Operator [FIL_164] (rows=383325119 width=88)
                        predicate:rank_window_0 is not null
                        PTF Operator [PTF_28] (rows=383325119 width=88)
                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col0 ASC NULLS FIRST, _col1 ASC NULLS FIRST","partition by:":"_col3, _col2, _col4, _col5"}]
                          Select Operator [SEL_27] (rows=383325119 width=88)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                          <-Reducer 5 [SIMPLE_EDGE]
                            SHUFFLE [RS_26]
                              PartitionCols:_col3, _col2, _col4, _col5
                               Please refer to the previous Group By Operator [GBY_94]

