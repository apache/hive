PREHOOK: query: explain
with customer_total_return as
 (select wr_returning_customer_sk as ctr_customer_sk
        ,ca_state as ctr_state, 
 	sum(wr_return_amt) as ctr_total_return
 from web_returns
     ,date_dim
     ,customer_address
 where wr_returned_date_sk = d_date_sk 
   and d_year =2002
   and wr_returning_addr_sk = ca_address_sk 
 group by wr_returning_customer_sk
         ,ca_state)
  select  c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
       ,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
       ,c_last_review_date,ctr_total_return
 from customer_total_return ctr1
     ,customer_address
     ,customer
 where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
 			  from customer_total_return ctr2 
                  	  where ctr1.ctr_state = ctr2.ctr_state)
       and ca_address_sk = c_current_addr_sk
       and ca_state = 'IL'
       and ctr1.ctr_customer_sk = c_customer_sk
 order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
                  ,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
                  ,c_last_review_date,ctr_total_return
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@web_returns
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with customer_total_return as
 (select wr_returning_customer_sk as ctr_customer_sk
        ,ca_state as ctr_state, 
 	sum(wr_return_amt) as ctr_total_return
 from web_returns
     ,date_dim
     ,customer_address
 where wr_returned_date_sk = d_date_sk 
   and d_year =2002
   and wr_returning_addr_sk = ca_address_sk 
 group by wr_returning_customer_sk
         ,ca_state)
  select  c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
       ,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
       ,c_last_review_date,ctr_total_return
 from customer_total_return ctr1
     ,customer_address
     ,customer
 where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
 			  from customer_total_return ctr2 
                  	  where ctr1.ctr_state = ctr2.ctr_state)
       and ca_address_sk = c_current_addr_sk
       and ca_state = 'IL'
       and ctr1.ctr_customer_sk = c_customer_sk
 order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
                  ,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
                  ,c_last_review_date,ctr_total_return
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@web_returns
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 14 (SIMPLE_EDGE)
Reducer 13 <- Map 11 (SIMPLE_EDGE), Map 14 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 6 <- Map 5 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 10 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 5 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_218]
        Limit [LIM_217] (rows=100 width=942)
          Number of rows:100
          Select Operator [SEL_216] (rows=704993 width=930)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
          <-Reducer 3 [SIMPLE_EDGE]
            SHUFFLE [RS_68]
              Select Operator [SEL_67] (rows=704993 width=930)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                Top N Key Operator [TNK_106] (rows=704993 width=942)
                  keys:_col1, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col17,top n:100
                  Merge Join Operator [MERGEJOIN_183] (rows=704993 width=942)
                    Conds:RS_64._col0=RS_65._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col17"]
                  <-Reducer 2 [SIMPLE_EDGE]
                    SHUFFLE [RS_64]
                      PartitionCols:_col0
                      Merge Join Operator [MERGEJOIN_177] (rows=1568628 width=834)
                        Conds:RS_186._col2=RS_193._col0(Inner),Output:["_col0","_col1","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                      <-Map 5 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_193]
                          PartitionCols:_col0
                          Select Operator [SEL_190] (rows=784314 width=4)
                            Output:["_col0"]
                            Filter Operator [FIL_187] (rows=784314 width=90)
                              predicate:((ca_state = 'IL') and ca_address_sk is not null)
                              TableScan [TS_3] (rows=40000000 width=90)
                                default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state"]
                      <-Map 1 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_186]
                          PartitionCols:_col2
                          Select Operator [SEL_185] (rows=80000000 width=849)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                            Filter Operator [FIL_184] (rows=80000000 width=849)
                              predicate:(c_current_addr_sk is not null and c_customer_sk is not null)
                              TableScan [TS_0] (rows=80000000 width=849)
                                default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_current_addr_sk","c_salutation","c_first_name","c_last_name","c_preferred_cust_flag","c_birth_day","c_birth_month","c_birth_year","c_birth_country","c_login","c_email_address","c_last_review_date"]
                  <-Reducer 8 [SIMPLE_EDGE]
                    SHUFFLE [RS_65]
                      PartitionCols:_col0
                      Select Operator [SEL_60] (rows=704993 width=227)
                        Output:["_col0","_col2"]
                        Filter Operator [FIL_59] (rows=704993 width=227)
                          predicate:(_col2 > _col3)
                          Merge Join Operator [MERGEJOIN_182] (rows=2114980 width=227)
                            Conds:RS_209._col1=RS_215._col1(Inner),Output:["_col0","_col2","_col3"]
                          <-Reducer 10 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_215]
                              PartitionCols:_col1
                              Select Operator [SEL_214] (rows=6 width=198)
                                Output:["_col0","_col1"]
                                Filter Operator [FIL_213] (rows=6 width=206)
                                  predicate:CAST( (_col1 / _col2) AS decimal(21,6)) is not null
                                  Group By Operator [GBY_212] (rows=6 width=206)
                                    Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","count(_col2)"],keys:_col0
                                    Select Operator [SEL_211] (rows=2537976 width=201)
                                      Output:["_col0","_col2"]
                                      Group By Operator [GBY_210] (rows=2537976 width=201)
                                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                      <-Reducer 9 [SIMPLE_EDGE]
                                        SHUFFLE [RS_47]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_46] (rows=3923529 width=201)
                                            Output:["_col0","_col1","_col2"],aggregations:["sum(_col5)"],keys:_col1, _col3
                                            Merge Join Operator [MERGEJOIN_181] (rows=3923529 width=184)
                                              Conds:RS_195._col0=RS_43._col2(Inner),Output:["_col1","_col3","_col5"]
                                            <-Map 5 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_195]
                                                PartitionCols:_col0
                                                Select Operator [SEL_192] (rows=40000000 width=90)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_189] (rows=40000000 width=90)
                                                    predicate:(ca_address_sk is not null and ca_state is not null)
                                                     Please refer to the previous TableScan [TS_3]
                                            <-Reducer 13 [SIMPLE_EDGE]
                                              SHUFFLE [RS_43]
                                                PartitionCols:_col2
                                                Merge Join Operator [MERGEJOIN_180] (rows=3923529 width=101)
                                                  Conds:RS_201._col0=RS_205._col0(Inner),Output:["_col1","_col2","_col3"]
                                                <-Map 11 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_201]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_199] (rows=13130761 width=118)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_197] (rows=13130761 width=118)
                                                        predicate:(wr_returned_date_sk is not null and wr_returning_addr_sk is not null)
                                                        TableScan [TS_9] (rows=14398467 width=118)
                                                          default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_returned_date_sk","wr_returning_customer_sk","wr_returning_addr_sk","wr_return_amt"]
                                                <-Map 14 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_205]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_203] (rows=652 width=4)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_202] (rows=652 width=8)
                                                        predicate:((d_year = 2002) and d_date_sk is not null)
                                                        TableScan [TS_12] (rows=73049 width=8)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                          <-Reducer 7 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_209]
                              PartitionCols:_col1
                              Filter Operator [FIL_208] (rows=2114980 width=201)
                                predicate:_col2 is not null
                                Select Operator [SEL_207] (rows=2114980 width=201)
                                  Output:["_col0","_col1","_col2"]
                                  Group By Operator [GBY_206] (rows=2114980 width=201)
                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                  <-Reducer 6 [SIMPLE_EDGE]
                                    SHUFFLE [RS_24]
                                      PartitionCols:_col0, _col1
                                      Group By Operator [GBY_23] (rows=3746772 width=201)
                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col5)"],keys:_col1, _col3
                                        Merge Join Operator [MERGEJOIN_179] (rows=3746772 width=184)
                                          Conds:RS_194._col0=RS_20._col2(Inner),Output:["_col1","_col3","_col5"]
                                        <-Map 5 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_194]
                                            PartitionCols:_col0
                                            Select Operator [SEL_191] (rows=40000000 width=90)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_188] (rows=40000000 width=90)
                                                predicate:(ca_address_sk is not null and ca_state is not null)
                                                 Please refer to the previous TableScan [TS_3]
                                        <-Reducer 12 [SIMPLE_EDGE]
                                          SHUFFLE [RS_20]
                                            PartitionCols:_col2
                                            Merge Join Operator [MERGEJOIN_178] (rows=3746772 width=101)
                                              Conds:RS_200._col0=RS_204._col0(Inner),Output:["_col1","_col2","_col3"]
                                            <-Map 11 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_200]
                                                PartitionCols:_col0
                                                Select Operator [SEL_198] (rows=12539214 width=118)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                  Filter Operator [FIL_196] (rows=12539214 width=118)
                                                    predicate:(wr_returning_customer_sk is not null and wr_returned_date_sk is not null and wr_returning_addr_sk is not null)
                                                     Please refer to the previous TableScan [TS_9]
                                            <-Map 14 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_204]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_203]

