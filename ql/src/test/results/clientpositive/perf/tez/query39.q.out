PREHOOK: query: explain
with inv as
(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
       ,stdev,mean, case mean when 0 then null else stdev/mean end cov
 from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
      from inventory
          ,item
          ,warehouse
          ,date_dim
      where inv_item_sk = i_item_sk
        and inv_warehouse_sk = w_warehouse_sk
        and inv_date_sk = d_date_sk
        and d_year =1999
      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
 where case mean when 0 then 0 else stdev/mean end > 1)
select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
        ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
from inv inv1,inv inv2
where inv1.i_item_sk = inv2.i_item_sk
  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
  and inv1.d_moy=4
  and inv2.d_moy=4+1
order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
        ,inv2.d_moy,inv2.mean, inv2.cov
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@inventory
PREHOOK: Input: default@item
PREHOOK: Input: default@warehouse
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with inv as
(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
       ,stdev,mean, case mean when 0 then null else stdev/mean end cov
 from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
      from inventory
          ,item
          ,warehouse
          ,date_dim
      where inv_item_sk = i_item_sk
        and inv_warehouse_sk = w_warehouse_sk
        and inv_date_sk = d_date_sk
        and d_year =1999
      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
 where case mean when 0 then 0 else stdev/mean end > 1)
select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
        ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
from inv inv1,inv inv2
where inv1.i_item_sk = inv2.i_item_sk
  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
  and inv1.d_moy=4
  and inv2.d_moy=4+1
order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
        ,inv2.d_moy,inv2.mean, inv2.cov
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@inventory
POSTHOOK: Input: default@item
POSTHOOK: Input: default@warehouse
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 11 <- Map 10 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 12 <- Map 10 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 3 <- Map 14 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 1 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 8 <- Map 14 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_234]
        Select Operator [SEL_233] (rows=189509 width=56)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
        <-Reducer 5 [SIMPLE_EDGE]
          SHUFFLE [RS_62]
            Merge Join Operator [MERGEJOIN_204] (rows=189509 width=48)
              Conds:RS_227._col0, _col1=RS_232._col0, _col1(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
            <-Reducer 4 [SIMPLE_EDGE] vectorized
              SHUFFLE [RS_227]
                PartitionCols:_col0, _col1
                Select Operator [SEL_226] (rows=18049 width=24)
                  Output:["_col0","_col1","_col2","_col3"]
                  Filter Operator [FIL_225] (rows=18049 width=40)
                    predicate:CASE WHEN (((UDFToDouble(_col3) / _col4) = 0)) THEN (false) ELSE (((power(((_col5 - ((_col6 * _col6) / _col4)) / CASE WHEN ((_col4 = 1L)) THEN (null) ELSE ((_col4 - 1)) END), 0.5) / (UDFToDouble(_col3) / _col4)) > 1.0D)) END
                    Select Operator [SEL_224] (rows=36099 width=40)
                      Output:["_col0","_col1","_col3","_col4","_col5","_col6"]
                      Group By Operator [GBY_223] (rows=36099 width=140)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2
                      <-Reducer 3 [SIMPLE_EDGE]
                        SHUFFLE [RS_25]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_24] (rows=36099 width=140)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col3)","count(_col3)","sum(_col5)","sum(_col4)"],keys:_col1, _col2, _col0
                            Select Operator [SEL_22] (rows=1032514 width=108)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              Merge Join Operator [MERGEJOIN_200] (rows=1032514 width=108)
                                Conds:RS_19._col3=RS_221._col0(Inner),Output:["_col0","_col4","_col6","_col7"]
                              <-Map 14 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_221]
                                  PartitionCols:_col0
                                  Select Operator [SEL_220] (rows=27 width=104)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_219] (rows=27 width=104)
                                      predicate:w_warehouse_sk is not null
                                      TableScan [TS_13] (rows=27 width=104)
                                        default@warehouse,warehouse,Tbl:COMPLETE,Col:COMPLETE,Output:["w_warehouse_sk","w_warehouse_name"]
                              <-Reducer 2 [SIMPLE_EDGE]
                                SHUFFLE [RS_19]
                                  PartitionCols:_col3
                                  Merge Join Operator [MERGEJOIN_199] (rows=1032514 width=8)
                                    Conds:RS_207._col0=RS_17._col1(Inner),Output:["_col0","_col3","_col4"]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_207]
                                      PartitionCols:_col0
                                      Select Operator [SEL_206] (rows=462000 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_205] (rows=462000 width=4)
                                          predicate:i_item_sk is not null
                                          TableScan [TS_0] (rows=462000 width=4)
                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk"]
                                  <-Reducer 11 [SIMPLE_EDGE]
                                    SHUFFLE [RS_17]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_198] (rows=1032514 width=8)
                                        Conds:RS_211._col0=RS_217._col0(Inner),Output:["_col1","_col2","_col3"]
                                      <-Map 10 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_211]
                                          PartitionCols:_col0
                                          Select Operator [SEL_210] (rows=37584000 width=15)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Filter Operator [FIL_209] (rows=37584000 width=15)
                                              predicate:(inv_item_sk is not null and inv_warehouse_sk is not null and inv_date_sk is not null)
                                              TableScan [TS_3] (rows=37584000 width=15)
                                                default@inventory,inventory,Tbl:COMPLETE,Col:COMPLETE,Output:["inv_date_sk","inv_item_sk","inv_warehouse_sk","inv_quantity_on_hand"]
                                      <-Map 13 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_217]
                                          PartitionCols:_col0
                                          Select Operator [SEL_215] (rows=50 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_213] (rows=50 width=12)
                                              predicate:((d_year = 1999) and (d_moy = 4) and d_date_sk is not null)
                                              TableScan [TS_6] (rows=73049 width=12)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
            <-Reducer 9 [SIMPLE_EDGE] vectorized
              SHUFFLE [RS_232]
                PartitionCols:_col0, _col1
                Select Operator [SEL_231] (rows=18049 width=24)
                  Output:["_col0","_col1","_col2","_col3"]
                  Filter Operator [FIL_230] (rows=18049 width=40)
                    predicate:CASE WHEN (((UDFToDouble(_col3) / _col4) = 0)) THEN (false) ELSE (((power(((_col5 - ((_col6 * _col6) / _col4)) / CASE WHEN ((_col4 = 1L)) THEN (null) ELSE ((_col4 - 1)) END), 0.5) / (UDFToDouble(_col3) / _col4)) > 1.0D)) END
                    Select Operator [SEL_229] (rows=36099 width=40)
                      Output:["_col0","_col1","_col3","_col4","_col5","_col6"]
                      Group By Operator [GBY_228] (rows=36099 width=140)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2
                      <-Reducer 8 [SIMPLE_EDGE]
                        SHUFFLE [RS_54]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_53] (rows=36099 width=140)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col3)","count(_col3)","sum(_col5)","sum(_col4)"],keys:_col1, _col2, _col0
                            Select Operator [SEL_51] (rows=1032514 width=108)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              Merge Join Operator [MERGEJOIN_203] (rows=1032514 width=108)
                                Conds:RS_48._col3=RS_222._col0(Inner),Output:["_col0","_col4","_col6","_col7"]
                              <-Map 14 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_222]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_220]
                              <-Reducer 7 [SIMPLE_EDGE]
                                SHUFFLE [RS_48]
                                  PartitionCols:_col3
                                  Merge Join Operator [MERGEJOIN_202] (rows=1032514 width=8)
                                    Conds:RS_208._col0=RS_46._col1(Inner),Output:["_col0","_col3","_col4"]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_208]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_206]
                                  <-Reducer 12 [SIMPLE_EDGE]
                                    SHUFFLE [RS_46]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_201] (rows=1032514 width=8)
                                        Conds:RS_212._col0=RS_218._col0(Inner),Output:["_col1","_col2","_col3"]
                                      <-Map 10 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_212]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_210]
                                      <-Map 13 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_218]
                                          PartitionCols:_col0
                                          Select Operator [SEL_216] (rows=50 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_214] (rows=50 width=12)
                                              predicate:((d_year = 1999) and (d_moy = 5) and d_date_sk is not null)
                                               Please refer to the previous TableScan [TS_6]

PREHOOK: query: with inv as
(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
       ,stdev,mean, case mean when 0 then null else stdev/mean end cov
 from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
      from inventory
          ,item
          ,warehouse
          ,date_dim
      where inv_item_sk = i_item_sk
        and inv_warehouse_sk = w_warehouse_sk
        and inv_date_sk = d_date_sk
        and d_year =1999
      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
 where case mean when 0 then 0 else stdev/mean end > 1)
select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
        ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
from inv inv1,inv inv2
where inv1.i_item_sk = inv2.i_item_sk
  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
  and inv1.d_moy=4
  and inv2.d_moy=4+1
  and inv1.cov > 1.5
order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
        ,inv2.d_moy,inv2.mean, inv2.cov
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@inventory
PREHOOK: Input: default@item
PREHOOK: Input: default@warehouse
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: with inv as
(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
       ,stdev,mean, case mean when 0 then null else stdev/mean end cov
 from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
      from inventory
          ,item
          ,warehouse
          ,date_dim
      where inv_item_sk = i_item_sk
        and inv_warehouse_sk = w_warehouse_sk
        and inv_date_sk = d_date_sk
        and d_year =1999
      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
 where case mean when 0 then 0 else stdev/mean end > 1)
select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
        ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
from inv inv1,inv inv2
where inv1.i_item_sk = inv2.i_item_sk
  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
  and inv1.d_moy=4
  and inv2.d_moy=4+1
  and inv1.cov > 1.5
order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
        ,inv2.d_moy,inv2.mean, inv2.cov
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@inventory
POSTHOOK: Input: default@item
POSTHOOK: Input: default@warehouse
POSTHOOK: Output: hdfs://### HDFS PATH ###
