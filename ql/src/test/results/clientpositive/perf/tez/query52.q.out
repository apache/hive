PREHOOK: query: explain
select  dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
     ,store_sales
     ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
    and store_sales.ss_item_sk = item.i_item_sk
    and item.i_manager_id = 1
    and dt.d_moy=12
    and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
     ,store_sales
     ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
    and store_sales.ss_item_sk = item.i_item_sk
    and item.i_manager_id = 1
    and dt.d_moy=12
    and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 7 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
Reducer 3 <- Map 8 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 7 <- Map 6 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_74]
        Select Operator [SEL_73] (rows=100 width=220)
          Output:["_col0","_col1","_col2","_col3"]
          Limit [LIM_72] (rows=100 width=216)
            Number of rows:100
            Select Operator [SEL_71] (rows=7333 width=216)
              Output:["_col0","_col1","_col2"]
            <-Reducer 4 [SIMPLE_EDGE] vectorized
              SHUFFLE [RS_70]
                Group By Operator [GBY_69] (rows=7333 width=216)
                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                <-Reducer 3 [SIMPLE_EDGE]
                  SHUFFLE [RS_17]
                    PartitionCols:_col0, _col1
                    Group By Operator [GBY_16] (rows=7333 width=216)
                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)"],keys:_col5, _col6
                      Merge Join Operator [MERGEJOIN_54] (rows=84037218 width=183)
                        Conds:RS_12._col1=RS_68._col0(Inner),Output:["_col2","_col5","_col6"]
                      <-Map 8 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_68]
                          PartitionCols:_col0
                          Select Operator [SEL_67] (rows=7333 width=107)
                            Output:["_col0","_col1","_col2"]
                            Filter Operator [FIL_66] (rows=7333 width=111)
                              predicate:((i_manager_id = 1) and i_item_sk is not null)
                              TableScan [TS_6] (rows=462000 width=111)
                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_brand","i_manager_id"]
                      <-Reducer 2 [SIMPLE_EDGE]
                        SHUFFLE [RS_12]
                          PartitionCols:_col1
                          Merge Join Operator [MERGEJOIN_53] (rows=550076554 width=110)
                            Conds:RS_65._col0=RS_57._col0(Inner),Output:["_col1","_col2"]
                          <-Map 6 [SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_57]
                              PartitionCols:_col0
                              Select Operator [SEL_56] (rows=50 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_55] (rows=50 width=12)
                                  predicate:((d_year = 1998) and (d_moy = 12) and d_date_sk is not null)
                                  TableScan [TS_3] (rows=73049 width=12)
                                    default@date_dim,dt,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                          <-Map 1 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_65]
                              PartitionCols:_col0
                              Select Operator [SEL_64] (rows=550076554 width=114)
                                Output:["_col0","_col1","_col2"]
                                Filter Operator [FIL_63] (rows=550076554 width=114)
                                  predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_10_dt_d_date_sk_min) AND DynamicValue(RS_10_dt_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_10_dt_d_date_sk_bloom_filter)))
                                  TableScan [TS_0] (rows=575995635 width=114)
                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_ext_sales_price"]
                                  <-Reducer 7 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_62]
                                      Group By Operator [GBY_61] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                      <-Map 6 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_60]
                                          Group By Operator [GBY_59] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                            Select Operator [SEL_58] (rows=50 width=4)
                                              Output:["_col0"]
                                               Please refer to the previous Select Operator [SEL_56]

