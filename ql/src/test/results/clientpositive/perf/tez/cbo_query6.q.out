Warning: Map Join MAPJOIN[172][bigTable=?] in task 'Reducer 15' is a cross product
PREHOOK: query: explain cbo
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain cbo
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
CBO PLAN:
HiveSortLimit(sort0=[$1], dir0=[ASC], fetch=[100])
  HiveProject(ca_state=[$0], $f1=[$1])
    HiveFilter(condition=[>=($1, 10)])
      HiveAggregate(group=[{9}], agg#0=[count()])
        HiveJoin(condition=[=($1, $10)], joinType=[inner], algorithm=[none], cost=[not available])
          HiveJoin(condition=[=($6, $2)], joinType=[inner], algorithm=[none], cost=[not available])
            HiveJoin(condition=[=($0, $3)], joinType=[inner], algorithm=[none], cost=[not available])
              HiveProject(ss_sold_date_sk=[$0], ss_item_sk=[$2], ss_customer_sk=[$3])
                HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($3), IS NOT NULL($2))])
                  HiveTableScan(table=[[default, store_sales]], table:alias=[s])
              HiveJoin(condition=[=($1, $2)], joinType=[inner], algorithm=[none], cost=[not available])
                HiveProject(d_date_sk=[$0], d_month_seq=[$3])
                  HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($3))])
                    HiveTableScan(table=[[default, date_dim]], table:alias=[d])
                HiveProject(d_month_seq=[$0])
                  HiveAggregate(group=[{3}])
                    HiveFilter(condition=[AND(=($6, 2000), =($8, 2), IS NOT NULL($3))])
                      HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
            HiveProject(c_customer_sk=[$0], c_current_addr_sk=[$1], ca_address_sk=[$2], ca_state=[$3])
              HiveJoin(condition=[=($2, $1)], joinType=[inner], algorithm=[none], cost=[not available])
                HiveProject(c_customer_sk=[$0], c_current_addr_sk=[$4])
                  HiveFilter(condition=[AND(IS NOT NULL($4), IS NOT NULL($0))])
                    HiveTableScan(table=[[default, customer]], table:alias=[c])
                HiveProject(ca_address_sk=[$0], ca_state=[$8])
                  HiveFilter(condition=[IS NOT NULL($0)])
                    HiveTableScan(table=[[default, customer_address]], table:alias=[a])
          HiveProject(i_item_sk=[$0], i_current_price=[$1], i_category=[$2], i_category0=[$3], *=[$4], cnt=[$5])
            HiveJoin(condition=[AND(=($3, $2), >($1, $4))], joinType=[inner], algorithm=[none], cost=[not available])
              HiveProject(i_item_sk=[$0], i_current_price=[$5], i_category=[$12])
                HiveFilter(condition=[AND(IS NOT NULL($5), IS NOT NULL($0), IS NOT NULL($12))])
                  HiveTableScan(table=[[default, item]], table:alias=[i])
              HiveJoin(condition=[true], joinType=[inner], algorithm=[none], cost=[not available])
                HiveProject(i_category=[$0], *=[*(1.2:DECIMAL(2, 1), CAST(/($1, $2)):DECIMAL(16, 6))])
                  HiveFilter(condition=[IS NOT NULL(CAST(/($1, $2)):DECIMAL(16, 6))])
                    HiveAggregate(group=[{12}], agg#0=[sum($5)], agg#1=[count($5)])
                      HiveFilter(condition=[IS NOT NULL($12)])
                        HiveTableScan(table=[[default, item]], table:alias=[j])
                HiveProject(cnt=[$0])
                  HiveFilter(condition=[<=(sq_count_check($0), 1)])
                    HiveProject(cnt=[$0])
                      HiveAggregate(group=[{}], cnt=[COUNT()])
                        HiveProject(d_month_seq=[$0])
                          HiveAggregate(group=[{3}])
                            HiveFilter(condition=[AND(=($6, 2000), =($8, 2))])
                              HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])

