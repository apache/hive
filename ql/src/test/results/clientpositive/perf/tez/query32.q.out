PREHOOK: query: explain
select  sum(cs_ext_discount_amt)  as `excess discount amount` 
from 
   catalog_sales 
   ,item 
   ,date_dim
where
i_manufact_id = 269
and i_item_sk = cs_item_sk 
and d_date between '1998-03-18' and 
        (cast('1998-03-18' as date) + 90 days)
and d_date_sk = cs_sold_date_sk 
and cs_ext_discount_amt  
     > ( 
         select 
            1.3 * avg(cs_ext_discount_amt) 
         from 
            catalog_sales 
           ,date_dim
         where 
              cs_item_sk = i_item_sk 
          and d_date between '1998-03-18' and
                             (cast('1998-03-18' as date) + 90 days)
          and d_date_sk = cs_sold_date_sk 
      ) 
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  sum(cs_ext_discount_amt)  as `excess discount amount` 
from 
   catalog_sales 
   ,item 
   ,date_dim
where
i_manufact_id = 269
and i_item_sk = cs_item_sk 
and d_date between '1998-03-18' and 
        (cast('1998-03-18' as date) + 90 days)
and d_date_sk = cs_sold_date_sk 
and cs_ext_discount_amt  
     > ( 
         select 
            1.3 * avg(cs_ext_discount_amt) 
         from 
            catalog_sales 
           ,date_dim
         where 
              cs_item_sk = i_item_sk 
          and d_date between '1998-03-18' and
                             (cast('1998-03-18' as date) + 90 days)
          and d_date_sk = cs_sold_date_sk 
      ) 
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Map 10 <- Reducer 12 (BROADCAST_EDGE)
Reducer 12 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 8 (ONE_TO_ONE_EDGE)
Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Map 10 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 11 (SIMPLE_EDGE), Reducer 7 (ONE_TO_ONE_EDGE)
Reducer 9 <- Reducer 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_130]
        Limit [LIM_129] (rows=1 width=112)
          Number of rows:100
          Group By Operator [GBY_128] (rows=1 width=112)
            Output:["_col0"],aggregations:["sum(VALUE._col0)"]
          <-Reducer 3 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_36]
              Group By Operator [GBY_35] (rows=1 width=112)
                Output:["_col0"],aggregations:["sum(_col2)"]
                Select Operator [SEL_34] (rows=2478 width=112)
                  Output:["_col2"]
                  Filter Operator [FIL_33] (rows=2478 width=112)
                    predicate:(_col2 > _col5)
                    Merge Join Operator [MERGEJOIN_104] (rows=7434 width=112)
                      Conds:RS_30._col1=RS_31._col2(Inner),Output:["_col2","_col5"]
                    <-Reducer 8 [ONE_TO_ONE_EDGE]
                      PARTITION_ONLY_SHUFFLE [RS_31]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_103] (rows=97 width=116)
                          Conds:RS_122._col0=RS_111._col0(Inner),Output:["_col1","_col2"]
                        <-Map 11 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_111]
                            PartitionCols:_col0
                            Select Operator [SEL_110] (rows=669 width=4)
                              Output:["_col0"]
                              Filter Operator [FIL_109] (rows=669 width=7)
                                predicate:((i_manufact_id = 269) and i_item_sk is not null)
                                TableScan [TS_20] (rows=462000 width=7)
                                  default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_manufact_id"]
                        <-Reducer 7 [ONE_TO_ONE_EDGE] vectorized
                          FORWARD [RS_122]
                            PartitionCols:_col0
                            Select Operator [SEL_121] (rows=6951 width=116)
                              Output:["_col0","_col1"]
                              Group By Operator [GBY_120] (rows=6951 width=124)
                                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                              <-Reducer 6 [SIMPLE_EDGE]
                                SHUFFLE [RS_17]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_16] (rows=97314 width=124)
                                    Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","count(_col2)"],keys:_col1
                                    Merge Join Operator [MERGEJOIN_102] (rows=31836679 width=110)
                                      Conds:RS_119._col0=RS_108._col0(Inner),Output:["_col1","_col2"]
                                    <-Map 5 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_108]
                                        PartitionCols:_col0
                                        Select Operator [SEL_106] (rows=8116 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_105] (rows=8116 width=98)
                                            predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1998-03-18 00:00:00' AND TIMESTAMP'1998-06-16 00:00:00' and d_date_sk is not null)
                                            TableScan [TS_3] (rows=73049 width=98)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_119]
                                        PartitionCols:_col0
                                        Select Operator [SEL_118] (rows=286549727 width=119)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_117] (rows=286549727 width=119)
                                            predicate:((cs_item_sk BETWEEN DynamicValue(RS_24_item_i_item_sk_min) AND DynamicValue(RS_24_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_24_item_i_item_sk_bloom_filter))) and cs_item_sk is not null and cs_sold_date_sk is not null)
                                            TableScan [TS_6] (rows=287989836 width=119)
                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_ext_discount_amt"]
                                            <-Reducer 12 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_116]
                                                Group By Operator [GBY_115] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_114]
                                                    Group By Operator [GBY_113] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_112] (rows=669 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_110]
                    <-Reducer 2 [SIMPLE_EDGE]
                      SHUFFLE [RS_30]
                        PartitionCols:_col1
                        Merge Join Operator [MERGEJOIN_101] (rows=31836679 width=110)
                          Conds:RS_127._col0=RS_107._col0(Inner),Output:["_col1","_col2"]
                        <-Map 5 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_107]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_106]
                        <-Map 1 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_127]
                            PartitionCols:_col0
                            Select Operator [SEL_126] (rows=286549727 width=119)
                              Output:["_col0","_col1","_col2"]
                              Filter Operator [FIL_125] (rows=286549727 width=119)
                                predicate:((cs_item_sk BETWEEN DynamicValue(RS_31_item_i_item_sk_min) AND DynamicValue(RS_31_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_31_item_i_item_sk_bloom_filter))) and cs_item_sk is not null and cs_sold_date_sk is not null)
                                TableScan [TS_0] (rows=287989836 width=119)
                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_ext_discount_amt"]
                                <-Reducer 9 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_124]
                                    Group By Operator [GBY_123] (rows=1 width=12)
                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                    <-Reducer 8 [CUSTOM_SIMPLE_EDGE]
                                      PARTITION_ONLY_SHUFFLE [RS_65]
                                        Group By Operator [GBY_64] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                          Select Operator [SEL_63] (rows=97 width=8)
                                            Output:["_col0"]
                                             Please refer to the previous Merge Join Operator [MERGEJOIN_103]

