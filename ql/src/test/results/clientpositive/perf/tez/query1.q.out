PREHOOK: query: explain
with customer_total_return as
(select sr_customer_sk as ctr_customer_sk
,sr_store_sk as ctr_store_sk
,sum(SR_FEE) as ctr_total_return
from store_returns
,date_dim
where sr_returned_date_sk = d_date_sk
and d_year =2000
group by sr_customer_sk
,sr_store_sk)
 select  c_customer_id
from customer_total_return ctr1
,store
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from customer_total_return ctr2
where ctr1.ctr_store_sk = ctr2.ctr_store_sk)
and s_store_sk = ctr1.ctr_store_sk
and s_state = 'NM'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with customer_total_return as
(select sr_customer_sk as ctr_customer_sk
,sr_store_sk as ctr_store_sk
,sum(SR_FEE) as ctr_total_return
from store_returns
,date_dim
where sr_returned_date_sk = d_date_sk
and d_year =2000
group by sr_customer_sk
,sr_store_sk)
 select  c_customer_id
from customer_total_return ctr1
,store
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from customer_total_return ctr2
where ctr1.ctr_store_sk = ctr2.ctr_store_sk)
and s_store_sk = ctr1.ctr_store_sk
and s_state = 'NM'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 3 <- Map 12 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 10 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 7 <- Map 11 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 11 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_165]
        Limit [LIM_164] (rows=100 width=100)
          Number of rows:100
          Select Operator [SEL_163] (rows=17457727 width=100)
            Output:["_col0"]
          <-Reducer 4 [SIMPLE_EDGE]
            SHUFFLE [RS_52]
              Select Operator [SEL_51] (rows=17457727 width=100)
                Output:["_col0"]
                Filter Operator [FIL_50] (rows=17457727 width=324)
                  predicate:(_col3 > _col6)
                  Merge Join Operator [MERGEJOIN_136] (rows=52373181 width=324)
                    Conds:RS_47._col2=RS_162._col1(Inner),Output:["_col3","_col5","_col6"]
                  <-Reducer 10 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_162]
                      PartitionCols:_col1
                      Select Operator [SEL_161] (rows=85 width=115)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_160] (rows=85 width=123)
                          predicate:(_col1 is not null and _col2 is not null)
                          Group By Operator [GBY_159] (rows=85 width=123)
                            Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","count(_col2)"],keys:_col1
                            Select Operator [SEL_158] (rows=53634860 width=119)
                              Output:["_col1","_col2"]
                              Group By Operator [GBY_157] (rows=53634860 width=119)
                                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                              <-Reducer 9 [SIMPLE_EDGE]
                                SHUFFLE [RS_32]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_31] (rows=53634860 width=119)
                                    Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col2, _col1
                                    Merge Join Operator [MERGEJOIN_135] (rows=53634860 width=115)
                                      Conds:RS_145._col0=RS_149._col0(Inner),Output:["_col1","_col2","_col3"]
                                    <-Map 11 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_149]
                                        PartitionCols:_col0
                                        Select Operator [SEL_147] (rows=652 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_146] (rows=652 width=8)
                                            predicate:((d_year = 2000) and d_date_sk is not null)
                                            TableScan [TS_6] (rows=73049 width=8)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                    <-Map 6 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_145]
                                        PartitionCols:_col0
                                        Select Operator [SEL_143] (rows=53634860 width=119)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Filter Operator [FIL_141] (rows=53634860 width=119)
                                            predicate:(sr_store_sk is not null and sr_returned_date_sk is not null)
                                            TableScan [TS_3] (rows=57591150 width=119)
                                              default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_returned_date_sk","sr_customer_sk","sr_store_sk","sr_fee"]
                  <-Reducer 3 [SIMPLE_EDGE]
                    SHUFFLE [RS_47]
                      PartitionCols:_col2
                      Merge Join Operator [MERGEJOIN_134] (rows=51757026 width=215)
                        Conds:RS_44._col1=RS_156._col0(Inner),Output:["_col2","_col3","_col5"]
                      <-Map 12 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_156]
                          PartitionCols:_col0
                          Select Operator [SEL_155] (rows=80000000 width=104)
                            Output:["_col0","_col1"]
                            Filter Operator [FIL_154] (rows=80000000 width=104)
                              predicate:c_customer_sk is not null
                              TableScan [TS_18] (rows=80000000 width=104)
                                default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id"]
                      <-Reducer 2 [SIMPLE_EDGE]
                        SHUFFLE [RS_44]
                          PartitionCols:_col1
                          Merge Join Operator [MERGEJOIN_133] (rows=51757026 width=119)
                            Conds:RS_139._col0=RS_153._col1(Inner),Output:["_col1","_col2","_col3"]
                          <-Map 1 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_139]
                              PartitionCols:_col0
                              Select Operator [SEL_138] (rows=35 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_137] (rows=35 width=90)
                                  predicate:((s_state = 'NM') and s_store_sk is not null)
                                  TableScan [TS_0] (rows=1704 width=90)
                                    default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_state"]
                          <-Reducer 8 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_153]
                              PartitionCols:_col1
                              Select Operator [SEL_152] (rows=51757026 width=119)
                                Output:["_col0","_col1","_col2"]
                                Filter Operator [FIL_151] (rows=51757026 width=119)
                                  predicate:_col2 is not null
                                  Group By Operator [GBY_150] (rows=51757026 width=119)
                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                  <-Reducer 7 [SIMPLE_EDGE]
                                    SHUFFLE [RS_14]
                                      PartitionCols:_col0, _col1
                                      Group By Operator [GBY_13] (rows=51757026 width=119)
                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col2, _col1
                                        Merge Join Operator [MERGEJOIN_132] (rows=51757026 width=115)
                                          Conds:RS_144._col0=RS_148._col0(Inner),Output:["_col1","_col2","_col3"]
                                        <-Map 11 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_148]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_147]
                                        <-Map 6 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_144]
                                            PartitionCols:_col0
                                            Select Operator [SEL_142] (rows=51757026 width=119)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_140] (rows=51757026 width=119)
                                                predicate:(sr_customer_sk is not null and sr_store_sk is not null and sr_returned_date_sk is not null)
                                                 Please refer to the previous TableScan [TS_3]

