PREHOOK: query: explain
select  channel, col_name, d_year, d_qoy, i_category, COUNT(*) sales_cnt, SUM(ext_sales_price) sales_amt FROM (
        SELECT 'store' as channel, 'ss_addr_sk' col_name, d_year, d_qoy, i_category, ss_ext_sales_price ext_sales_price
         FROM store_sales, item, date_dim
         WHERE ss_addr_sk IS NULL
           AND ss_sold_date_sk=d_date_sk
           AND ss_item_sk=i_item_sk
        UNION ALL
        SELECT 'web' as channel, 'ws_web_page_sk' col_name, d_year, d_qoy, i_category, ws_ext_sales_price ext_sales_price
         FROM web_sales, item, date_dim
         WHERE ws_web_page_sk IS NULL
           AND ws_sold_date_sk=d_date_sk
           AND ws_item_sk=i_item_sk
        UNION ALL
        SELECT 'catalog' as channel, 'cs_warehouse_sk' col_name, d_year, d_qoy, i_category, cs_ext_sales_price ext_sales_price
         FROM catalog_sales, item, date_dim
         WHERE cs_warehouse_sk IS NULL
           AND cs_sold_date_sk=d_date_sk
           AND cs_item_sk=i_item_sk) foo
GROUP BY channel, col_name, d_year, d_qoy, i_category
ORDER BY channel, col_name, d_year, d_qoy, i_category
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  channel, col_name, d_year, d_qoy, i_category, COUNT(*) sales_cnt, SUM(ext_sales_price) sales_amt FROM (
        SELECT 'store' as channel, 'ss_addr_sk' col_name, d_year, d_qoy, i_category, ss_ext_sales_price ext_sales_price
         FROM store_sales, item, date_dim
         WHERE ss_addr_sk IS NULL
           AND ss_sold_date_sk=d_date_sk
           AND ss_item_sk=i_item_sk
        UNION ALL
        SELECT 'web' as channel, 'ws_web_page_sk' col_name, d_year, d_qoy, i_category, ws_ext_sales_price ext_sales_price
         FROM web_sales, item, date_dim
         WHERE ws_web_page_sk IS NULL
           AND ws_sold_date_sk=d_date_sk
           AND ws_item_sk=i_item_sk
        UNION ALL
        SELECT 'catalog' as channel, 'cs_warehouse_sk' col_name, d_year, d_qoy, i_category, cs_ext_sales_price ext_sales_price
         FROM catalog_sales, item, date_dim
         WHERE cs_warehouse_sk IS NULL
           AND cs_sold_date_sk=d_date_sk
           AND cs_item_sk=i_item_sk) foo
GROUP BY channel, col_name, d_year, d_qoy, i_category
ORDER BY channel, col_name, d_year, d_qoy, i_category
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 14 <- Reducer 16 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE)
Map 17 <- Reducer 10 (BROADCAST_EDGE), Reducer 19 (BROADCAST_EDGE)
Map 20 <- Reducer 13 (BROADCAST_EDGE), Reducer 22 (BROADCAST_EDGE)
Reducer 10 <- Map 1 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Map 1 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE)
Reducer 12 <- Map 21 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 13 <- Map 1 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 14 (SIMPLE_EDGE)
Reducer 22 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 15 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 5 <- Union 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 1 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 9 <- Map 18 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE), Union 4 (CONTAINS)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_195]
        Limit [LIM_194] (rows=100 width=108)
          Number of rows:100
          Select Operator [SEL_193] (rows=304916424 width=108)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 5 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_192]
              Group By Operator [GBY_191] (rows=304916424 width=108)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
              <-Union 4 [SIMPLE_EDGE]
                <-Reducer 12 [CONTAINS]
                  Reduce Output Operator [RS_163]
                    PartitionCols:_col0, _col1, _col2, _col3, _col4
                    Group By Operator [GBY_162] (rows=609832848 width=108)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["count()","sum(_col5)"],keys:_col0, _col1, _col2, _col3, _col4
                      Select Operator [SEL_160] (rows=174233858 width=135)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                        Merge Join Operator [MERGEJOIN_159] (rows=174233858 width=135)
                          Conds:RS_45._col0=RS_213._col0(Inner),Output:["_col3","_col5","_col7","_col8"]
                        <-Map 21 [SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_213]
                            PartitionCols:_col0
                            Select Operator [SEL_212] (rows=73049 width=1119)
                              Output:["_col0","_col1","_col2"]
                              Filter Operator [FIL_211] (rows=73049 width=1119)
                                predicate:d_date_sk is not null
                                TableScan [TS_39] (rows=73049 width=1119)
                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_qoy"]
                        <-Reducer 11 [SIMPLE_EDGE]
                          SHUFFLE [RS_45]
                            PartitionCols:_col0
                            Merge Join Operator [MERGEJOIN_147] (rows=158394413 width=135)
                              Conds:RS_221._col2=RS_170._col0(Inner),Output:["_col0","_col3","_col5"]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_170]
                                PartitionCols:_col0
                                Select Operator [SEL_165] (rows=462000 width=1436)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_164] (rows=462000 width=1436)
                                    predicate:i_item_sk is not null
                                    TableScan [TS_0] (rows=462000 width=1436)
                                      default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_category"]
                            <-Map 20 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_221]
                                PartitionCols:_col2
                                Select Operator [SEL_220] (rows=143994918 width=135)
                                  Output:["_col0","_col2","_col3"]
                                  Filter Operator [FIL_219] (rows=143994918 width=135)
                                    predicate:((cs_item_sk BETWEEN DynamicValue(RS_43_item_i_item_sk_min) AND DynamicValue(RS_43_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_43_item_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_46_date_dim_d_date_sk_min) AND DynamicValue(RS_46_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_46_date_dim_d_date_sk_bloom_filter))) and cs_item_sk is not null and cs_sold_date_sk is not null and cs_warehouse_sk is null)
                                    TableScan [TS_33] (rows=287989836 width=135)
                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_warehouse_sk","cs_item_sk","cs_ext_sales_price"]
                                    <-Reducer 13 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_210]
                                        Group By Operator [GBY_209] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_177]
                                            Group By Operator [GBY_174] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_171] (rows=462000 width=1436)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_165]
                                    <-Reducer 22 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_218]
                                        Group By Operator [GBY_217] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_216]
                                            Group By Operator [GBY_215] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_214] (rows=73049 width=1119)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_212]
                <-Reducer 3 [CONTAINS]
                  Reduce Output Operator [RS_153]
                    PartitionCols:_col0, _col1, _col2, _col3, _col4
                    Group By Operator [GBY_152] (rows=609832848 width=108)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["count()","sum(_col5)"],keys:_col0, _col1, _col2, _col3, _col4
                      Select Operator [SEL_150] (rows=348477373 width=88)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                        Merge Join Operator [MERGEJOIN_149] (rows=348477373 width=88)
                          Conds:RS_12._col2=RS_182._col0(Inner),Output:["_col1","_col5","_col7","_col8"]
                        <-Map 15 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_182]
                            PartitionCols:_col0
                            Select Operator [SEL_181] (rows=73049 width=1119)
                              Output:["_col0","_col1","_col2"]
                              Filter Operator [FIL_180] (rows=73049 width=1119)
                                predicate:d_date_sk is not null
                                TableScan [TS_6] (rows=73049 width=1119)
                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_qoy"]
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_12]
                            PartitionCols:_col2
                            Merge Join Operator [MERGEJOIN_143] (rows=316797605 width=88)
                              Conds:RS_166._col0=RS_190._col1(Inner),Output:["_col1","_col2","_col5"]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_166]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_165]
                            <-Map 14 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_190]
                                PartitionCols:_col1
                                Select Operator [SEL_189] (rows=287997817 width=88)
                                  Output:["_col0","_col1","_col3"]
                                  Filter Operator [FIL_188] (rows=287997817 width=88)
                                    predicate:((ss_item_sk BETWEEN DynamicValue(RS_9_item_i_item_sk_min) AND DynamicValue(RS_9_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_9_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_13_date_dim_d_date_sk_min) AND DynamicValue(RS_13_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_13_date_dim_d_date_sk_bloom_filter))) and ss_addr_sk is null and ss_item_sk is not null and ss_sold_date_sk is not null)
                                    TableScan [TS_3] (rows=575995635 width=88)
                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_addr_sk","ss_ext_sales_price"]
                                    <-Reducer 16 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_187]
                                        Group By Operator [GBY_186] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_185]
                                            Group By Operator [GBY_184] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_183] (rows=73049 width=1119)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_181]
                                    <-Reducer 7 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_179]
                                        Group By Operator [GBY_178] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_175]
                                            Group By Operator [GBY_172] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_167] (rows=462000 width=1436)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_165]
                <-Reducer 9 [CONTAINS]
                  Reduce Output Operator [RS_158]
                    PartitionCols:_col0, _col1, _col2, _col3, _col4
                    Group By Operator [GBY_157] (rows=609832848 width=108)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["count()","sum(_col5)"],keys:_col0, _col1, _col2, _col3, _col4
                      Select Operator [SEL_155] (rows=87121617 width=135)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                        Merge Join Operator [MERGEJOIN_154] (rows=87121617 width=135)
                          Conds:RS_28._col0=RS_200._col0(Inner),Output:["_col3","_col5","_col7","_col8"]
                        <-Map 18 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_200]
                            PartitionCols:_col0
                            Select Operator [SEL_199] (rows=73049 width=1119)
                              Output:["_col0","_col1","_col2"]
                              Filter Operator [FIL_198] (rows=73049 width=1119)
                                predicate:d_date_sk is not null
                                TableScan [TS_22] (rows=73049 width=1119)
                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_qoy"]
                        <-Reducer 8 [SIMPLE_EDGE]
                          SHUFFLE [RS_28]
                            PartitionCols:_col0
                            Merge Join Operator [MERGEJOIN_145] (rows=79201469 width=135)
                              Conds:RS_208._col1=RS_168._col0(Inner),Output:["_col0","_col3","_col5"]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_168]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_165]
                            <-Map 17 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_208]
                                PartitionCols:_col1
                                Select Operator [SEL_207] (rows=72001334 width=135)
                                  Output:["_col0","_col1","_col3"]
                                  Filter Operator [FIL_206] (rows=72001334 width=135)
                                    predicate:((ws_item_sk BETWEEN DynamicValue(RS_26_item_i_item_sk_min) AND DynamicValue(RS_26_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_26_item_i_item_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_29_date_dim_d_date_sk_min) AND DynamicValue(RS_29_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_29_date_dim_d_date_sk_bloom_filter))) and ws_item_sk is not null and ws_sold_date_sk is not null and ws_web_page_sk is null)
                                    TableScan [TS_16] (rows=144002668 width=135)
                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_web_page_sk","ws_ext_sales_price"]
                                    <-Reducer 10 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_197]
                                        Group By Operator [GBY_196] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_176]
                                            Group By Operator [GBY_173] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_169] (rows=462000 width=1436)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_165]
                                    <-Reducer 19 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_205]
                                        Group By Operator [GBY_204] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_203]
                                            Group By Operator [GBY_202] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_201] (rows=73049 width=1119)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_199]

