PREHOOK: query: explain
select  
   sum(ws_ext_discount_amt)  as `Excess Discount Amount` 
from 
    web_sales 
   ,item 
   ,date_dim
where
i_manufact_id = 269
and i_item_sk = ws_item_sk 
and d_date between '1998-03-18' and 
        (cast('1998-03-18' as date) + 90 days)
and d_date_sk = ws_sold_date_sk 
and ws_ext_discount_amt  
     > ( 
         SELECT 
            1.3 * avg(ws_ext_discount_amt) 
         FROM 
            web_sales 
           ,date_dim
         WHERE 
              ws_item_sk = i_item_sk 
          and d_date between '1998-03-18' and
                             (cast('1998-03-18' as date) + 90 days)
          and d_date_sk = ws_sold_date_sk 
      ) 
order by sum(ws_ext_discount_amt)
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
   sum(ws_ext_discount_amt)  as `Excess Discount Amount` 
from 
    web_sales 
   ,item 
   ,date_dim
where
i_manufact_id = 269
and i_item_sk = ws_item_sk 
and d_date between '1998-03-18' and 
        (cast('1998-03-18' as date) + 90 days)
and d_date_sk = ws_sold_date_sk 
and ws_ext_discount_amt  
     > ( 
         SELECT 
            1.3 * avg(ws_ext_discount_amt) 
         FROM 
            web_sales 
           ,date_dim
         WHERE 
              ws_item_sk = i_item_sk 
          and d_date between '1998-03-18' and
                             (cast('1998-03-18' as date) + 90 days)
          and d_date_sk = ws_sold_date_sk 
      ) 
order by sum(ws_ext_discount_amt)
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Map 10 <- Reducer 12 (BROADCAST_EDGE)
Reducer 12 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 8 (ONE_TO_ONE_EDGE)
Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Map 10 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 11 (SIMPLE_EDGE), Reducer 7 (ONE_TO_ONE_EDGE)
Reducer 9 <- Reducer 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_128]
        Group By Operator [GBY_127] (rows=1 width=112)
          Output:["_col0"],aggregations:["sum(VALUE._col0)"]
        <-Reducer 3 [CUSTOM_SIMPLE_EDGE]
          PARTITION_ONLY_SHUFFLE [RS_36]
            Group By Operator [GBY_35] (rows=1 width=112)
              Output:["_col0"],aggregations:["sum(_col2)"]
              Select Operator [SEL_34] (rows=2478 width=112)
                Output:["_col2"]
                Filter Operator [FIL_33] (rows=2478 width=112)
                  predicate:(_col2 > _col5)
                  Merge Join Operator [MERGEJOIN_103] (rows=7434 width=112)
                    Conds:RS_30._col1=RS_31._col2(Inner),Output:["_col2","_col5"]
                  <-Reducer 8 [ONE_TO_ONE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_31]
                      PartitionCols:_col2
                      Merge Join Operator [MERGEJOIN_102] (rows=97 width=116)
                        Conds:RS_121._col0=RS_110._col0(Inner),Output:["_col1","_col2"]
                      <-Map 11 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_110]
                          PartitionCols:_col0
                          Select Operator [SEL_109] (rows=669 width=4)
                            Output:["_col0"]
                            Filter Operator [FIL_108] (rows=669 width=7)
                              predicate:((i_manufact_id = 269) and i_item_sk is not null)
                              TableScan [TS_20] (rows=462000 width=7)
                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_manufact_id"]
                      <-Reducer 7 [ONE_TO_ONE_EDGE] vectorized
                        FORWARD [RS_121]
                          PartitionCols:_col0
                          Select Operator [SEL_120] (rows=6951 width=116)
                            Output:["_col0","_col1"]
                            Group By Operator [GBY_119] (rows=6951 width=124)
                              Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                            <-Reducer 6 [SIMPLE_EDGE]
                              SHUFFLE [RS_17]
                                PartitionCols:_col0
                                Group By Operator [GBY_16] (rows=55608 width=124)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","count(_col2)"],keys:_col1
                                  Merge Join Operator [MERGEJOIN_101] (rows=15995224 width=115)
                                    Conds:RS_118._col0=RS_107._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 5 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_107]
                                      PartitionCols:_col0
                                      Select Operator [SEL_105] (rows=8116 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_104] (rows=8116 width=98)
                                          predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1998-03-18 00:00:00' AND TIMESTAMP'1998-06-16 00:00:00' and d_date_sk is not null)
                                          TableScan [TS_3] (rows=73049 width=98)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_118]
                                      PartitionCols:_col0
                                      Select Operator [SEL_117] (rows=143966864 width=119)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_116] (rows=143966864 width=119)
                                          predicate:((ws_item_sk BETWEEN DynamicValue(RS_24_item_i_item_sk_min) AND DynamicValue(RS_24_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_24_item_i_item_sk_bloom_filter))) and ws_item_sk is not null and ws_sold_date_sk is not null)
                                          TableScan [TS_6] (rows=144002668 width=119)
                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_ext_discount_amt"]
                                          <-Reducer 12 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_115]
                                              Group By Operator [GBY_114] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_113]
                                                  Group By Operator [GBY_112] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_111] (rows=669 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_109]
                  <-Reducer 2 [SIMPLE_EDGE]
                    SHUFFLE [RS_30]
                      PartitionCols:_col1
                      Merge Join Operator [MERGEJOIN_100] (rows=15995224 width=115)
                        Conds:RS_126._col0=RS_106._col0(Inner),Output:["_col1","_col2"]
                      <-Map 5 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_106]
                          PartitionCols:_col0
                           Please refer to the previous Select Operator [SEL_105]
                      <-Map 1 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_126]
                          PartitionCols:_col0
                          Select Operator [SEL_125] (rows=143966864 width=119)
                            Output:["_col0","_col1","_col2"]
                            Filter Operator [FIL_124] (rows=143966864 width=119)
                              predicate:((ws_item_sk BETWEEN DynamicValue(RS_31_item_i_item_sk_min) AND DynamicValue(RS_31_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_31_item_i_item_sk_bloom_filter))) and ws_item_sk is not null and ws_sold_date_sk is not null)
                              TableScan [TS_0] (rows=144002668 width=119)
                                default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_ext_discount_amt"]
                              <-Reducer 9 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_123]
                                  Group By Operator [GBY_122] (rows=1 width=12)
                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                  <-Reducer 8 [CUSTOM_SIMPLE_EDGE]
                                    PARTITION_ONLY_SHUFFLE [RS_64]
                                      Group By Operator [GBY_63] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                        Select Operator [SEL_62] (rows=97 width=8)
                                          Output:["_col0"]
                                           Please refer to the previous Merge Join Operator [MERGEJOIN_102]

