PREHOOK: query: explain
with ssr as
 (select  s_store_id as store_id,
          sum(ss_ext_sales_price) as sales,
          sum(coalesce(sr_return_amt, 0)) as returns,
          sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit
  from store_sales left outer join store_returns on
         (ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number),
     date_dim,
     store,
     item,
     promotion
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  30 days)
       and ss_store_sk = s_store_sk
       and ss_item_sk = i_item_sk
       and i_current_price > 50
       and ss_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
 group by s_store_id)
 ,
 csr as
 (select  cp_catalog_page_id as catalog_page_id,
          sum(cs_ext_sales_price) as sales,
          sum(coalesce(cr_return_amount, 0)) as returns,
          sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit
  from catalog_sales left outer join catalog_returns on
         (cs_item_sk = cr_item_sk and cs_order_number = cr_order_number),
     date_dim,
     catalog_page,
     item,
     promotion
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
        and cs_catalog_page_sk = cp_catalog_page_sk
       and cs_item_sk = i_item_sk
       and i_current_price > 50
       and cs_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by cp_catalog_page_id)
 ,
 wsr as
 (select  web_site_id,
          sum(ws_ext_sales_price) as sales,
          sum(coalesce(wr_return_amt, 0)) as returns,
          sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit
  from web_sales left outer join web_returns on
         (ws_item_sk = wr_item_sk and ws_order_number = wr_order_number),
     date_dim,
     web_site,
     item,
     promotion
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
        and ws_web_site_sk = web_site_sk
       and ws_item_sk = i_item_sk
       and i_current_price > 50
       and ws_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || store_id as id
        , sales
        , returns
        , profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || catalog_page_id as id
        , sales
        , returns
        , profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , returns
        , profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with ssr as
 (select  s_store_id as store_id,
          sum(ss_ext_sales_price) as sales,
          sum(coalesce(sr_return_amt, 0)) as returns,
          sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit
  from store_sales left outer join store_returns on
         (ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number),
     date_dim,
     store,
     item,
     promotion
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  30 days)
       and ss_store_sk = s_store_sk
       and ss_item_sk = i_item_sk
       and i_current_price > 50
       and ss_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
 group by s_store_id)
 ,
 csr as
 (select  cp_catalog_page_id as catalog_page_id,
          sum(cs_ext_sales_price) as sales,
          sum(coalesce(cr_return_amount, 0)) as returns,
          sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit
  from catalog_sales left outer join catalog_returns on
         (cs_item_sk = cr_item_sk and cs_order_number = cr_order_number),
     date_dim,
     catalog_page,
     item,
     promotion
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
        and cs_catalog_page_sk = cp_catalog_page_sk
       and cs_item_sk = i_item_sk
       and i_current_price > 50
       and cs_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by cp_catalog_page_id)
 ,
 wsr as
 (select  web_site_id,
          sum(ws_ext_sales_price) as sales,
          sum(coalesce(wr_return_amt, 0)) as returns,
          sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit
  from web_sales left outer join web_returns on
         (ws_item_sk = wr_item_sk and ws_order_number = wr_order_number),
     date_dim,
     web_site,
     item,
     promotion
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
        and ws_web_site_sk = web_site_sk
       and ws_item_sk = i_item_sk
       and i_current_price > 50
       and ws_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || store_id as id
        , sales
        , returns
        , profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || catalog_page_id as id
        , sales
        , returns
        , profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , returns
        , profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 14 <- Map 23 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 24 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Map 29 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 18 <- Map 12 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 19 <- Map 23 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 11 (SIMPLE_EDGE)
Reducer 20 <- Map 24 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Map 33 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 27 <- Map 26 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 3 <- Map 12 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 31 <- Map 30 (SIMPLE_EDGE), Map 32 (SIMPLE_EDGE)
Reducer 4 <- Map 23 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 24 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 25 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 9 <- Union 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 10 vectorized
      File Output Operator [FS_251]
        Limit [LIM_250] (rows=100 width=108)
          Number of rows:100
          Select Operator [SEL_249] (rows=1217531358 width=108)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 9 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_248]
              Select Operator [SEL_247] (rows=1217531358 width=108)
                Output:["_col0","_col1","_col2","_col3","_col4"]
                Group By Operator [GBY_246] (rows=1217531358 width=108)
                  Output:["_col0","_col1","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2
                <-Union 8 [SIMPLE_EDGE]
                  <-Reducer 17 [CONTAINS] vectorized
                    Reduce Output Operator [RS_264]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_263] (rows=2435062716 width=108)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Select Operator [SEL_262] (rows=231905279 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4"]
                          Group By Operator [GBY_261] (rows=231905279 width=135)
                            Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0
                          <-Reducer 16 [SIMPLE_EDGE]
                            SHUFFLE [RS_75]
                              PartitionCols:_col0
                              Group By Operator [GBY_74] (rows=463810558 width=135)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)"],keys:_col0
                                Select Operator [SEL_72] (rows=463810558 width=135)
                                  Output:["_col0","_col1","_col2","_col3"]
                                  Merge Join Operator [MERGEJOIN_212] (rows=463810558 width=135)
                                    Conds:RS_69._col1=RS_260._col0(Inner),Output:["_col5","_col6","_col9","_col10","_col18"]
                                  <-Map 29 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_260]
                                      PartitionCols:_col0
                                      Select Operator [SEL_259] (rows=46000 width=460)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_258] (rows=46000 width=460)
                                          predicate:cp_catalog_page_sk is not null
                                          TableScan [TS_54] (rows=46000 width=460)
                                            default@catalog_page,catalog_page,Tbl:COMPLETE,Col:NONE,Output:["cp_catalog_page_sk","cp_catalog_page_id"]
                                  <-Reducer 15 [SIMPLE_EDGE]
                                    SHUFFLE [RS_69]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_211] (rows=421645953 width=135)
                                        Conds:RS_66._col3=RS_237._col0(Inner),Output:["_col1","_col5","_col6","_col9","_col10"]
                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_237]
                                          PartitionCols:_col0
                                          Select Operator [SEL_235] (rows=1150 width=1179)
                                            Output:["_col0"]
                                            Filter Operator [FIL_234] (rows=1150 width=1179)
                                              predicate:((p_channel_tv = 'N') and p_promo_sk is not null)
                                              TableScan [TS_12] (rows=2300 width=1179)
                                                default@promotion,promotion,Tbl:COMPLETE,Col:NONE,Output:["p_promo_sk","p_channel_tv"]
                                      <-Reducer 14 [SIMPLE_EDGE]
                                        SHUFFLE [RS_66]
                                          PartitionCols:_col3
                                          Merge Join Operator [MERGEJOIN_210] (rows=383314495 width=135)
                                            Conds:RS_63._col2=RS_232._col0(Inner),Output:["_col1","_col3","_col5","_col6","_col9","_col10"]
                                          <-Map 23 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_232]
                                              PartitionCols:_col0
                                              Select Operator [SEL_230] (rows=154000 width=1436)
                                                Output:["_col0"]
                                                Filter Operator [FIL_229] (rows=154000 width=1436)
                                                  predicate:((i_current_price > 50) and i_item_sk is not null)
                                                  TableScan [TS_9] (rows=462000 width=1436)
                                                    default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_current_price"]
                                          <-Reducer 13 [SIMPLE_EDGE]
                                            SHUFFLE [RS_63]
                                              PartitionCols:_col2
                                              Merge Join Operator [MERGEJOIN_209] (rows=348467716 width=135)
                                                Conds:RS_60._col0=RS_227._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                              <-Map 12 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_227]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_225] (rows=8116 width=1119)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_224] (rows=8116 width=1119)
                                                      predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1998-08-04 00:00:00.0' AND TIMESTAMP'1998-09-03 00:00:00.0' and d_date_sk is not null)
                                                      TableScan [TS_6] (rows=73049 width=1119)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date"]
                                              <-Reducer 27 [SIMPLE_EDGE]
                                                SHUFFLE [RS_60]
                                                  PartitionCols:_col0
                                                  Merge Join Operator [MERGEJOIN_208] (rows=316788826 width=135)
                                                    Conds:RS_254._col2, _col4=RS_257._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                                  <-Map 26 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_254]
                                                      PartitionCols:_col2, _col4
                                                      Select Operator [SEL_253] (rows=287989836 width=135)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                        Filter Operator [FIL_252] (rows=287989836 width=135)
                                                          predicate:(cs_catalog_page_sk is not null and cs_item_sk is not null and cs_promo_sk is not null and cs_sold_date_sk is not null)
                                                          TableScan [TS_39] (rows=287989836 width=135)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_catalog_page_sk","cs_item_sk","cs_promo_sk","cs_order_number","cs_ext_sales_price","cs_net_profit"]
                                                  <-Map 28 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_257]
                                                      PartitionCols:_col0, _col1
                                                      Select Operator [SEL_256] (rows=28798881 width=106)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_255] (rows=28798881 width=106)
                                                          predicate:cr_item_sk is not null
                                                          TableScan [TS_42] (rows=28798881 width=106)
                                                            default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:NONE,Output:["cr_item_sk","cr_order_number","cr_return_amount","cr_net_loss"]
                  <-Reducer 22 [CONTAINS] vectorized
                    Reduce Output Operator [RS_277]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_276] (rows=2435062716 width=108)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Select Operator [SEL_275] (rows=115958879 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4"]
                          Group By Operator [GBY_274] (rows=115958879 width=135)
                            Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0
                          <-Reducer 21 [SIMPLE_EDGE]
                            SHUFFLE [RS_115]
                              PartitionCols:_col0
                              Group By Operator [GBY_114] (rows=231917759 width=135)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)"],keys:_col0
                                Select Operator [SEL_112] (rows=231917759 width=135)
                                  Output:["_col0","_col1","_col2","_col3"]
                                  Merge Join Operator [MERGEJOIN_217] (rows=231917759 width=135)
                                    Conds:RS_109._col2=RS_273._col0(Inner),Output:["_col5","_col6","_col9","_col10","_col18"]
                                  <-Map 33 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_273]
                                      PartitionCols:_col0
                                      Select Operator [SEL_272] (rows=84 width=1850)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_271] (rows=84 width=1850)
                                          predicate:web_site_sk is not null
                                          TableScan [TS_94] (rows=84 width=1850)
                                            default@web_site,web_site,Tbl:COMPLETE,Col:NONE,Output:["web_site_sk","web_site_id"]
                                  <-Reducer 20 [SIMPLE_EDGE]
                                    SHUFFLE [RS_109]
                                      PartitionCols:_col2
                                      Merge Join Operator [MERGEJOIN_216] (rows=210834322 width=135)
                                        Conds:RS_106._col3=RS_238._col0(Inner),Output:["_col2","_col5","_col6","_col9","_col10"]
                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_238]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_235]
                                      <-Reducer 19 [SIMPLE_EDGE]
                                        SHUFFLE [RS_106]
                                          PartitionCols:_col3
                                          Merge Join Operator [MERGEJOIN_215] (rows=191667562 width=135)
                                            Conds:RS_103._col1=RS_233._col0(Inner),Output:["_col2","_col3","_col5","_col6","_col9","_col10"]
                                          <-Map 23 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_233]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_230]
                                          <-Reducer 18 [SIMPLE_EDGE]
                                            SHUFFLE [RS_103]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_214] (rows=174243235 width=135)
                                                Conds:RS_100._col0=RS_228._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                              <-Map 12 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_228]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_225]
                                              <-Reducer 31 [SIMPLE_EDGE]
                                                SHUFFLE [RS_100]
                                                  PartitionCols:_col0
                                                  Merge Join Operator [MERGEJOIN_213] (rows=158402938 width=135)
                                                    Conds:RS_267._col1, _col4=RS_270._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                                  <-Map 30 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_267]
                                                      PartitionCols:_col1, _col4
                                                      Select Operator [SEL_266] (rows=144002668 width=135)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                        Filter Operator [FIL_265] (rows=144002668 width=135)
                                                          predicate:(ws_item_sk is not null and ws_promo_sk is not null and ws_sold_date_sk is not null and ws_web_site_sk is not null)
                                                          TableScan [TS_79] (rows=144002668 width=135)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_web_site_sk","ws_promo_sk","ws_order_number","ws_ext_sales_price","ws_net_profit"]
                                                  <-Map 32 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_270]
                                                      PartitionCols:_col0, _col1
                                                      Select Operator [SEL_269] (rows=14398467 width=92)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_268] (rows=14398467 width=92)
                                                          predicate:wr_item_sk is not null
                                                          TableScan [TS_82] (rows=14398467 width=92)
                                                            default@web_returns,web_returns,Tbl:COMPLETE,Col:NONE,Output:["wr_item_sk","wr_order_number","wr_return_amt","wr_net_loss"]
                  <-Reducer 7 [CONTAINS] vectorized
                    Reduce Output Operator [RS_245]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_244] (rows=2435062716 width=108)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Select Operator [SEL_243] (rows=463823414 width=88)
                          Output:["_col0","_col1","_col2","_col3","_col4"]
                          Group By Operator [GBY_242] (rows=463823414 width=88)
                            Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0
                          <-Reducer 6 [SIMPLE_EDGE]
                            SHUFFLE [RS_36]
                              PartitionCols:_col0
                              Group By Operator [GBY_35] (rows=927646829 width=88)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)"],keys:_col0
                                Select Operator [SEL_33] (rows=927646829 width=88)
                                  Output:["_col0","_col1","_col2","_col3"]
                                  Merge Join Operator [MERGEJOIN_207] (rows=927646829 width=88)
                                    Conds:RS_30._col2=RS_241._col0(Inner),Output:["_col5","_col6","_col9","_col10","_col18"]
                                  <-Map 25 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_241]
                                      PartitionCols:_col0
                                      Select Operator [SEL_240] (rows=1704 width=1910)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_239] (rows=1704 width=1910)
                                          predicate:s_store_sk is not null
                                          TableScan [TS_15] (rows=1704 width=1910)
                                            default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_id"]
                                  <-Reducer 5 [SIMPLE_EDGE]
                                    SHUFFLE [RS_30]
                                      PartitionCols:_col2
                                      Merge Join Operator [MERGEJOIN_206] (rows=843315281 width=88)
                                        Conds:RS_27._col3=RS_236._col0(Inner),Output:["_col2","_col5","_col6","_col9","_col10"]
                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_236]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_235]
                                      <-Reducer 4 [SIMPLE_EDGE]
                                        SHUFFLE [RS_27]
                                          PartitionCols:_col3
                                          Merge Join Operator [MERGEJOIN_205] (rows=766650239 width=88)
                                            Conds:RS_24._col1=RS_231._col0(Inner),Output:["_col2","_col3","_col5","_col6","_col9","_col10"]
                                          <-Map 23 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_231]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_230]
                                          <-Reducer 3 [SIMPLE_EDGE]
                                            SHUFFLE [RS_24]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_204] (rows=696954748 width=88)
                                                Conds:RS_21._col0=RS_226._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                              <-Map 12 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_226]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_225]
                                              <-Reducer 2 [SIMPLE_EDGE]
                                                SHUFFLE [RS_21]
                                                  PartitionCols:_col0
                                                  Merge Join Operator [MERGEJOIN_203] (rows=633595212 width=88)
                                                    Conds:RS_220._col1, _col4=RS_223._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_220]
                                                      PartitionCols:_col1, _col4
                                                      Select Operator [SEL_219] (rows=575995635 width=88)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                        Filter Operator [FIL_218] (rows=575995635 width=88)
                                                          predicate:(ss_item_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                          TableScan [TS_0] (rows=575995635 width=88)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_ext_sales_price","ss_net_profit"]
                                                  <-Map 11 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_223]
                                                      PartitionCols:_col0, _col1
                                                      Select Operator [SEL_222] (rows=57591150 width=77)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_221] (rows=57591150 width=77)
                                                          predicate:sr_item_sk is not null
                                                          TableScan [TS_3] (rows=57591150 width=77)
                                                            default@store_returns,store_returns,Tbl:COMPLETE,Col:NONE,Output:["sr_item_sk","sr_ticket_number","sr_return_amt","sr_net_loss"]

