PREHOOK: query: explain
with ssr as
 (select  s_store_id as store_id,
          sum(ss_ext_sales_price) as sales,
          sum(coalesce(sr_return_amt, 0)) as returns,
          sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit
  from store_sales left outer join store_returns on
         (ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number),
     date_dim,
     store,
     item,
     promotion
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  30 days)
       and ss_store_sk = s_store_sk
       and ss_item_sk = i_item_sk
       and i_current_price > 50
       and ss_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
 group by s_store_id)
 ,
 csr as
 (select  cp_catalog_page_id as catalog_page_id,
          sum(cs_ext_sales_price) as sales,
          sum(coalesce(cr_return_amount, 0)) as returns,
          sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit
  from catalog_sales left outer join catalog_returns on
         (cs_item_sk = cr_item_sk and cs_order_number = cr_order_number),
     date_dim,
     catalog_page,
     item,
     promotion
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
        and cs_catalog_page_sk = cp_catalog_page_sk
       and cs_item_sk = i_item_sk
       and i_current_price > 50
       and cs_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by cp_catalog_page_id)
 ,
 wsr as
 (select  web_site_id,
          sum(ws_ext_sales_price) as sales,
          sum(coalesce(wr_return_amt, 0)) as returns,
          sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit
  from web_sales left outer join web_returns on
         (ws_item_sk = wr_item_sk and ws_order_number = wr_order_number),
     date_dim,
     web_site,
     item,
     promotion
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
        and ws_web_site_sk = web_site_sk
       and ws_item_sk = i_item_sk
       and i_current_price > 50
       and ws_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || store_id as id
        , sales
        , returns
        , profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || catalog_page_id as id
        , sales
        , returns
        , profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , returns
        , profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_page
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Input: default@web_site
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ssr as
 (select  s_store_id as store_id,
          sum(ss_ext_sales_price) as sales,
          sum(coalesce(sr_return_amt, 0)) as returns,
          sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit
  from store_sales left outer join store_returns on
         (ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number),
     date_dim,
     store,
     item,
     promotion
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  30 days)
       and ss_store_sk = s_store_sk
       and ss_item_sk = i_item_sk
       and i_current_price > 50
       and ss_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
 group by s_store_id)
 ,
 csr as
 (select  cp_catalog_page_id as catalog_page_id,
          sum(cs_ext_sales_price) as sales,
          sum(coalesce(cr_return_amount, 0)) as returns,
          sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit
  from catalog_sales left outer join catalog_returns on
         (cs_item_sk = cr_item_sk and cs_order_number = cr_order_number),
     date_dim,
     catalog_page,
     item,
     promotion
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
        and cs_catalog_page_sk = cp_catalog_page_sk
       and cs_item_sk = i_item_sk
       and i_current_price > 50
       and cs_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by cp_catalog_page_id)
 ,
 wsr as
 (select  web_site_id,
          sum(ws_ext_sales_price) as sales,
          sum(coalesce(wr_return_amt, 0)) as returns,
          sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit
  from web_sales left outer join web_returns on
         (ws_item_sk = wr_item_sk and ws_order_number = wr_order_number),
     date_dim,
     web_site,
     item,
     promotion
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
        and ws_web_site_sk = web_site_sk
       and ws_item_sk = i_item_sk
       and i_current_price > 50
       and ws_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || store_id as id
        , sales
        , returns
        , profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || catalog_page_id as id
        , sales
        , returns
        , profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , returns
        , profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_page
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Input: default@web_site
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 13 (BROADCAST_EDGE), Reducer 27 (BROADCAST_EDGE), Reducer 31 (BROADCAST_EDGE)
Map 35 <- Reducer 19 (BROADCAST_EDGE), Reducer 28 (BROADCAST_EDGE), Reducer 32 (BROADCAST_EDGE)
Map 39 <- Reducer 25 (BROADCAST_EDGE), Reducer 29 (BROADCAST_EDGE), Reducer 33 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 12 (SIMPLE_EDGE), Reducer 36 (SIMPLE_EDGE)
Reducer 15 <- Map 26 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Map 30 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Map 38 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 19 <- Map 12 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 11 (SIMPLE_EDGE)
Reducer 20 <- Map 12 (SIMPLE_EDGE), Reducer 40 (SIMPLE_EDGE)
Reducer 21 <- Map 26 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 30 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 42 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 25 <- Map 12 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Map 26 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 26 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 26 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 12 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 31 <- Map 30 (CUSTOM_SIMPLE_EDGE)
Reducer 32 <- Map 30 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 30 (CUSTOM_SIMPLE_EDGE)
Reducer 36 <- Map 35 (SIMPLE_EDGE), Map 37 (SIMPLE_EDGE)
Reducer 4 <- Map 26 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Map 39 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 5 <- Map 30 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 34 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 9 <- Union 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 10 vectorized
      File Output Operator [FS_460]
        Limit [LIM_459] (rows=100 width=619)
          Number of rows:100
          Select Operator [SEL_458] (rows=38846 width=619)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 9 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_457]
              Select Operator [SEL_456] (rows=38846 width=619)
                Output:["_col0","_col1","_col2","_col3","_col4"]
                Group By Operator [GBY_455] (rows=38846 width=627)
                  Output:["_col0","_col1","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2
                <-Union 8 [SIMPLE_EDGE]
                  <-Reducer 18 [CONTAINS] vectorized
                    Reduce Output Operator [RS_480]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_479] (rows=59581 width=627)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_478] (rows=39721 width=618)
                          keys:_col0, _col1, 0L,sort order:+++,top n:100
                          Select Operator [SEL_477] (rows=38846 width=619)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Group By Operator [GBY_476] (rows=38846 width=436)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0
                            <-Reducer 17 [SIMPLE_EDGE]
                              SHUFFLE [RS_75]
                                PartitionCols:_col0
                                Group By Operator [GBY_74] (rows=46000 width=436)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)"],keys:_col0
                                  Select Operator [SEL_72] (rows=8592843 width=305)
                                    Output:["_col0","_col1","_col2","_col3"]
                                    Merge Join Operator [MERGEJOIN_369] (rows=8592843 width=305)
                                      Conds:RS_69._col1=RS_475._col0(Inner),Output:["_col5","_col6","_col9","_col10","_col18"]
                                    <-Map 38 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_475]
                                        PartitionCols:_col0
                                        Select Operator [SEL_474] (rows=46000 width=104)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_473] (rows=46000 width=104)
                                            predicate:cp_catalog_page_sk is not null
                                            TableScan [TS_54] (rows=46000 width=104)
                                              default@catalog_page,catalog_page,Tbl:COMPLETE,Col:COMPLETE,Output:["cp_catalog_page_sk","cp_catalog_page_id"]
                                    <-Reducer 16 [SIMPLE_EDGE]
                                      SHUFFLE [RS_69]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_368] (rows=8592843 width=208)
                                          Conds:RS_66._col3=RS_429._col0(Inner),Output:["_col1","_col5","_col6","_col9","_col10"]
                                        <-Map 30 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_429]
                                            PartitionCols:_col0
                                            Select Operator [SEL_426] (rows=1150 width=89)
                                              Output:["_col0"]
                                              Filter Operator [FIL_425] (rows=1150 width=89)
                                                predicate:((p_channel_tv = 'N') and p_promo_sk is not null)
                                                TableScan [TS_12] (rows=2300 width=89)
                                                  default@promotion,promotion,Tbl:COMPLETE,Col:COMPLETE,Output:["p_promo_sk","p_channel_tv"]
                                        <-Reducer 15 [SIMPLE_EDGE]
                                          SHUFFLE [RS_66]
                                            PartitionCols:_col3
                                            Merge Join Operator [MERGEJOIN_367] (rows=17185686 width=222)
                                              Conds:RS_63._col2=RS_413._col0(Inner),Output:["_col1","_col3","_col5","_col6","_col9","_col10"]
                                            <-Map 26 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_413]
                                                PartitionCols:_col0
                                                Select Operator [SEL_410] (rows=154000 width=115)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_409] (rows=154000 width=115)
                                                    predicate:((i_current_price > 50) and i_item_sk is not null)
                                                    TableScan [TS_9] (rows=462000 width=115)
                                                      default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price"]
                                            <-Reducer 14 [SIMPLE_EDGE]
                                              SHUFFLE [RS_63]
                                                PartitionCols:_col2
                                                Merge Join Operator [MERGEJOIN_366] (rows=51557056 width=232)
                                                  Conds:RS_60._col0=RS_397._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                                <-Map 12 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_397]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_394] (rows=8116 width=98)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_393] (rows=8116 width=98)
                                                        predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1998-08-04 00:00:00' AND TIMESTAMP'1998-09-03 00:00:00' and d_date_sk is not null)
                                                        TableScan [TS_6] (rows=73049 width=98)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                                <-Reducer 36 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_60]
                                                    PartitionCols:_col0
                                                    Merge Join Operator [MERGEJOIN_365] (rows=464045263 width=326)
                                                      Conds:RS_469._col2, _col4=RS_472._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                                    <-Map 35 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_469]
                                                        PartitionCols:_col2, _col4
                                                        Select Operator [SEL_468] (rows=283691906 width=243)
                                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                          Filter Operator [FIL_467] (rows=283691906 width=243)
                                                            predicate:((cs_item_sk BETWEEN DynamicValue(RS_64_item_i_item_sk_min) AND DynamicValue(RS_64_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_64_item_i_item_sk_bloom_filter))) and (cs_promo_sk BETWEEN DynamicValue(RS_67_promotion_p_promo_sk_min) AND DynamicValue(RS_67_promotion_p_promo_sk_max) and in_bloom_filter(cs_promo_sk, DynamicValue(RS_67_promotion_p_promo_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_61_date_dim_d_date_sk_min) AND DynamicValue(RS_61_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_61_date_dim_d_date_sk_bloom_filter))) and cs_catalog_page_sk is not null and cs_item_sk is not null and cs_promo_sk is not null and cs_sold_date_sk is not null)
                                                            TableScan [TS_39] (rows=287989836 width=243)
                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_catalog_page_sk","cs_item_sk","cs_promo_sk","cs_order_number","cs_ext_sales_price","cs_net_profit"]
                                                            <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_462]
                                                                Group By Operator [GBY_461] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_405]
                                                                    Group By Operator [GBY_402] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_398] (rows=8116 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_394]
                                                            <-Reducer 28 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_464]
                                                                Group By Operator [GBY_463] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 26 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_421]
                                                                    Group By Operator [GBY_418] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_414] (rows=154000 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_410]
                                                            <-Reducer 32 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_466]
                                                                Group By Operator [GBY_465] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 30 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_437]
                                                                    Group By Operator [GBY_434] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_430] (rows=1150 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_426]
                                                    <-Map 37 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_472]
                                                        PartitionCols:_col0, _col1
                                                        Select Operator [SEL_471] (rows=28798881 width=227)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_470] (rows=28798881 width=227)
                                                            predicate:cr_item_sk is not null
                                                            TableScan [TS_42] (rows=28798881 width=227)
                                                              default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_return_amount","cr_net_loss"]
                  <-Reducer 24 [CONTAINS] vectorized
                    Reduce Output Operator [RS_500]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_499] (rows=59581 width=627)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_498] (rows=39721 width=618)
                          keys:_col0, _col1, 0L,sort order:+++,top n:100
                          Select Operator [SEL_497] (rows=53 width=615)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Group By Operator [GBY_496] (rows=53 width=436)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0
                            <-Reducer 23 [SIMPLE_EDGE]
                              SHUFFLE [RS_115]
                                PartitionCols:_col0
                                Group By Operator [GBY_114] (rows=318 width=436)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)"],keys:_col0
                                  Select Operator [SEL_112] (rows=4714659 width=323)
                                    Output:["_col0","_col1","_col2","_col3"]
                                    Merge Join Operator [MERGEJOIN_374] (rows=4714659 width=323)
                                      Conds:RS_109._col2=RS_495._col0(Inner),Output:["_col5","_col6","_col9","_col10","_col18"]
                                    <-Map 42 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_495]
                                        PartitionCols:_col0
                                        Select Operator [SEL_494] (rows=84 width=104)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_493] (rows=84 width=104)
                                            predicate:web_site_sk is not null
                                            TableScan [TS_94] (rows=84 width=104)
                                              default@web_site,web_site,Tbl:COMPLETE,Col:COMPLETE,Output:["web_site_sk","web_site_id"]
                                    <-Reducer 22 [SIMPLE_EDGE]
                                      SHUFFLE [RS_109]
                                        PartitionCols:_col2
                                        Merge Join Operator [MERGEJOIN_373] (rows=4714659 width=227)
                                          Conds:RS_106._col3=RS_431._col0(Inner),Output:["_col2","_col5","_col6","_col9","_col10"]
                                        <-Map 30 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_431]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_426]
                                        <-Reducer 21 [SIMPLE_EDGE]
                                          SHUFFLE [RS_106]
                                            PartitionCols:_col3
                                            Merge Join Operator [MERGEJOIN_372] (rows=9429318 width=231)
                                              Conds:RS_103._col1=RS_415._col0(Inner),Output:["_col2","_col3","_col5","_col6","_col9","_col10"]
                                            <-Map 26 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_415]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_410]
                                            <-Reducer 20 [SIMPLE_EDGE]
                                              SHUFFLE [RS_103]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_371] (rows=28287952 width=235)
                                                  Conds:RS_100._col0=RS_399._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                                <-Map 12 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_399]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_394]
                                                <-Reducer 40 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_100]
                                                    PartitionCols:_col0
                                                    Merge Join Operator [MERGEJOIN_370] (rows=254608997 width=363)
                                                      Conds:RS_489._col1, _col4=RS_492._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                                    <-Map 39 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_489]
                                                        PartitionCols:_col1, _col4
                                                        Select Operator [SEL_488] (rows=143894769 width=243)
                                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                          Filter Operator [FIL_487] (rows=143894769 width=243)
                                                            predicate:((ws_item_sk BETWEEN DynamicValue(RS_104_item_i_item_sk_min) AND DynamicValue(RS_104_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_104_item_i_item_sk_bloom_filter))) and (ws_promo_sk BETWEEN DynamicValue(RS_107_promotion_p_promo_sk_min) AND DynamicValue(RS_107_promotion_p_promo_sk_max) and in_bloom_filter(ws_promo_sk, DynamicValue(RS_107_promotion_p_promo_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_101_date_dim_d_date_sk_min) AND DynamicValue(RS_101_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_101_date_dim_d_date_sk_bloom_filter))) and ws_item_sk is not null and ws_promo_sk is not null and ws_sold_date_sk is not null and ws_web_site_sk is not null)
                                                            TableScan [TS_79] (rows=144002668 width=243)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_web_site_sk","ws_promo_sk","ws_order_number","ws_ext_sales_price","ws_net_profit"]
                                                            <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_482]
                                                                Group By Operator [GBY_481] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_406]
                                                                    Group By Operator [GBY_403] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_400] (rows=8116 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_394]
                                                            <-Reducer 29 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_484]
                                                                Group By Operator [GBY_483] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 26 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_422]
                                                                    Group By Operator [GBY_419] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_416] (rows=154000 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_410]
                                                            <-Reducer 33 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_486]
                                                                Group By Operator [GBY_485] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 30 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_438]
                                                                    Group By Operator [GBY_435] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_432] (rows=1150 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_426]
                                                    <-Map 41 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_492]
                                                        PartitionCols:_col0, _col1
                                                        Select Operator [SEL_491] (rows=14398467 width=221)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_490] (rows=14398467 width=221)
                                                            predicate:wr_item_sk is not null
                                                            TableScan [TS_82] (rows=14398467 width=221)
                                                              default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_item_sk","wr_order_number","wr_return_amt","wr_net_loss"]
                  <-Reducer 7 [CONTAINS] vectorized
                    Reduce Output Operator [RS_454]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_453] (rows=59581 width=627)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_452] (rows=39721 width=618)
                          keys:_col0, _col1, 0L,sort order:+++,top n:100
                          Select Operator [SEL_451] (rows=822 width=617)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Group By Operator [GBY_450] (rows=822 width=436)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0
                            <-Reducer 6 [SIMPLE_EDGE]
                              SHUFFLE [RS_36]
                                PartitionCols:_col0
                                Group By Operator [GBY_35] (rows=1704 width=436)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)"],keys:_col0
                                  Select Operator [SEL_33] (rows=15038783 width=100)
                                    Output:["_col0","_col1","_col2","_col3"]
                                    Merge Join Operator [MERGEJOIN_364] (rows=15038783 width=100)
                                      Conds:RS_30._col2=RS_449._col0(Inner),Output:["_col5","_col6","_col9","_col10","_col18"]
                                    <-Map 34 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_449]
                                        PartitionCols:_col0
                                        Select Operator [SEL_448] (rows=1704 width=104)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_447] (rows=1704 width=104)
                                            predicate:s_store_sk is not null
                                            TableScan [TS_15] (rows=1704 width=104)
                                              default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id"]
                                    <-Reducer 5 [SIMPLE_EDGE]
                                      SHUFFLE [RS_30]
                                        PartitionCols:_col2
                                        Merge Join Operator [MERGEJOIN_363] (rows=15038783 width=0)
                                          Conds:RS_27._col3=RS_427._col0(Inner),Output:["_col2","_col5","_col6","_col9","_col10"]
                                        <-Map 30 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_427]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_426]
                                        <-Reducer 4 [SIMPLE_EDGE]
                                          SHUFFLE [RS_27]
                                            PartitionCols:_col3
                                            Merge Join Operator [MERGEJOIN_362] (rows=30077566 width=57)
                                              Conds:RS_24._col1=RS_411._col0(Inner),Output:["_col2","_col3","_col5","_col6","_col9","_col10"]
                                            <-Map 26 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_411]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_410]
                                            <-Reducer 3 [SIMPLE_EDGE]
                                              SHUFFLE [RS_24]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_361] (rows=90232695 width=177)
                                                  Conds:RS_21._col0=RS_395._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                                <-Map 12 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_395]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_394]
                                                <-Reducer 2 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_21]
                                                    PartitionCols:_col0
                                                    Merge Join Operator [MERGEJOIN_360] (rows=812149846 width=374)
                                                      Conds:RS_443._col1, _col4=RS_446._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_443]
                                                        PartitionCols:_col1, _col4
                                                        Select Operator [SEL_442] (rows=501693263 width=233)
                                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                          Filter Operator [FIL_441] (rows=501693263 width=233)
                                                            predicate:((ss_item_sk BETWEEN DynamicValue(RS_25_item_i_item_sk_min) AND DynamicValue(RS_25_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_25_item_i_item_sk_bloom_filter))) and (ss_promo_sk BETWEEN DynamicValue(RS_28_promotion_p_promo_sk_min) AND DynamicValue(RS_28_promotion_p_promo_sk_max) and in_bloom_filter(ss_promo_sk, DynamicValue(RS_28_promotion_p_promo_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_22_date_dim_d_date_sk_min) AND DynamicValue(RS_22_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_22_date_dim_d_date_sk_bloom_filter))) and ss_item_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                            TableScan [TS_0] (rows=575995635 width=233)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_ext_sales_price","ss_net_profit"]
                                                            <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_408]
                                                                Group By Operator [GBY_407] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_404]
                                                                    Group By Operator [GBY_401] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_396] (rows=8116 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_394]
                                                            <-Reducer 27 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_424]
                                                                Group By Operator [GBY_423] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 26 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_420]
                                                                    Group By Operator [GBY_417] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_412] (rows=154000 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_410]
                                                            <-Reducer 31 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_440]
                                                                Group By Operator [GBY_439] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 30 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_436]
                                                                    Group By Operator [GBY_433] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_428] (rows=1150 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_426]
                                                    <-Map 11 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_446]
                                                        PartitionCols:_col0, _col1
                                                        Select Operator [SEL_445] (rows=57591150 width=224)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_444] (rows=57591150 width=224)
                                                            predicate:sr_item_sk is not null
                                                            TableScan [TS_3] (rows=57591150 width=224)
                                                              default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number","sr_return_amt","sr_net_loss"]

