PREHOOK: query: explain
select  i_item_id, 
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4 
 from store_sales, customer_demographics, date_dim, item, promotion
 where ss_sold_date_sk = d_date_sk and
       ss_item_sk = i_item_sk and
       ss_cdemo_sk = cd_demo_sk and
       ss_promo_sk = p_promo_sk and
       cd_gender = 'F' and 
       cd_marital_status = 'W' and
       cd_education_status = 'Primary' and
       (p_channel_email = 'N' or p_channel_event = 'N') and
       d_year = 1998 
 group by i_item_id
 order by i_item_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  i_item_id, 
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4 
 from store_sales, customer_demographics, date_dim, item, promotion
 where ss_sold_date_sk = d_date_sk and
       ss_item_sk = i_item_sk and
       ss_cdemo_sk = cd_demo_sk and
       ss_promo_sk = p_promo_sk and
       cd_gender = 'F' and 
       cd_marital_status = 'W' and
       cd_education_status = 'Primary' and
       (p_channel_email = 'N' or p_channel_event = 'N') and
       d_year = 1998 
 group by i_item_id
 order by i_item_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Map 10 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 12 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 13 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_130]
        Limit [LIM_129] (rows=100 width=444)
          Number of rows:100
          Select Operator [SEL_128] (rows=310774 width=444)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_127]
              Select Operator [SEL_126] (rows=310774 width=444)
                Output:["_col0","_col1","_col2","_col3","_col4"]
                Group By Operator [GBY_125] (rows=310774 width=476)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","sum(VALUE._col2)","count(VALUE._col3)","sum(VALUE._col4)","count(VALUE._col5)","sum(VALUE._col6)","count(VALUE._col7)"],keys:KEY._col0
                <-Reducer 5 [SIMPLE_EDGE]
                  SHUFFLE [RS_29]
                    PartitionCols:_col0
                    Group By Operator [GBY_28] (rows=462000 width=476)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col4)","count(_col4)","sum(_col5)","count(_col5)","sum(_col7)","count(_col7)","sum(_col6)","count(_col6)"],keys:_col18
                      Top N Key Operator [TNK_55] (rows=1441769 width=100)
                        keys:_col18,sort order:+,top n:100
                        Merge Join Operator [MERGEJOIN_99] (rows=1441769 width=100)
                          Conds:RS_24._col1=RS_124._col0(Inner),Output:["_col4","_col5","_col6","_col7","_col18"]
                        <-Map 13 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_124]
                            PartitionCols:_col0
                            Select Operator [SEL_123] (rows=462000 width=104)
                              Output:["_col0","_col1"]
                              Filter Operator [FIL_122] (rows=462000 width=104)
                                predicate:i_item_sk is not null
                                TableScan [TS_12] (rows=462000 width=104)
                                  default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id"]
                        <-Reducer 4 [SIMPLE_EDGE]
                          SHUFFLE [RS_24]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_98] (rows=1441769 width=4)
                              Conds:RS_21._col3=RS_121._col0(Inner),Output:["_col1","_col4","_col5","_col6","_col7"]
                            <-Map 12 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_121]
                                PartitionCols:_col0
                                Select Operator [SEL_120] (rows=2300 width=174)
                                  Output:["_col0"]
                                  Filter Operator [FIL_119] (rows=2300 width=174)
                                    predicate:(((p_channel_email = 'N') or (p_channel_event = 'N')) and p_promo_sk is not null)
                                    TableScan [TS_9] (rows=2300 width=174)
                                      default@promotion,promotion,Tbl:COMPLETE,Col:COMPLETE,Output:["p_promo_sk","p_channel_email","p_channel_event"]
                            <-Reducer 3 [SIMPLE_EDGE]
                              SHUFFLE [RS_21]
                                PartitionCols:_col3
                                Merge Join Operator [MERGEJOIN_97] (rows=1441769 width=4)
                                  Conds:RS_18._col0=RS_110._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7"]
                                <-Map 10 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_110]
                                    PartitionCols:_col0
                                    Select Operator [SEL_109] (rows=652 width=8)
                                      Output:["_col0"]
                                      Filter Operator [FIL_108] (rows=652 width=8)
                                        predicate:((d_year = 1998) and d_date_sk is not null)
                                        TableScan [TS_6] (rows=73049 width=8)
                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_18]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_96] (rows=4037893 width=4)
                                      Conds:RS_118._col2=RS_102._col0(Inner),Output:["_col0","_col1","_col3","_col4","_col5","_col6","_col7"]
                                    <-Map 8 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_102]
                                        PartitionCols:_col0
                                        Select Operator [SEL_101] (rows=14776 width=265)
                                          Output:["_col0"]
                                          Filter Operator [FIL_100] (rows=14776 width=268)
                                            predicate:((cd_education_status = 'Primary') and (cd_gender = 'F') and (cd_marital_status = 'W') and cd_demo_sk is not null)
                                            TableScan [TS_3] (rows=1861800 width=268)
                                              default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_gender","cd_marital_status","cd_education_status"]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_118]
                                        PartitionCols:_col2
                                        Select Operator [SEL_117] (rows=501686735 width=340)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                          Filter Operator [FIL_116] (rows=501686735 width=340)
                                            predicate:((ss_cdemo_sk BETWEEN DynamicValue(RS_16_customer_demographics_cd_demo_sk_min) AND DynamicValue(RS_16_customer_demographics_cd_demo_sk_max) and in_bloom_filter(ss_cdemo_sk, DynamicValue(RS_16_customer_demographics_cd_demo_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_19_date_dim_d_date_sk_min) AND DynamicValue(RS_19_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_19_date_dim_d_date_sk_bloom_filter))) and ss_cdemo_sk is not null and ss_item_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null)
                                            TableScan [TS_0] (rows=575995635 width=340)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_cdemo_sk","ss_promo_sk","ss_quantity","ss_list_price","ss_sales_price","ss_coupon_amt"]
                                            <-Reducer 11 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_115]
                                                Group By Operator [GBY_114] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_113]
                                                    Group By Operator [GBY_112] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_111] (rows=652 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_109]
                                            <-Reducer 9 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_107]
                                                Group By Operator [GBY_106] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_105]
                                                    Group By Operator [GBY_104] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_103] (rows=14776 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_101]

