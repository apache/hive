Warning: Shuffle Join MERGEJOIN[273][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3]] in Stage 'Reducer 4' is a cross product
Warning: Shuffle Join MERGEJOIN[274][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[275][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[276][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6]] in Stage 'Reducer 7' is a cross product
PREHOOK: query: explain
with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   web_sales
         ) cs_or_ws_sales,
         item,
         date_dim,
         customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Jewelry'
         and i_class = 'consignment'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 3
         and d_year = 1999
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        store_sales,
        customer_address,
        store,
        date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   date_dim where d_year = 1999 and d_moy = 3)
                           and  (select distinct d_month_seq+3
                                 from   date_dim where d_year = 1999 and d_moy = 3)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   web_sales
         ) cs_or_ws_sales,
         item,
         date_dim,
         customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Jewelry'
         and i_class = 'consignment'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 3
         and d_year = 1999
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        store_sales,
        customer_address,
        store,
        date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   date_dim where d_year = 1999 and d_moy = 3)
                           and  (select distinct d_month_seq+3
                                 from   date_dim where d_year = 1999 and d_moy = 3)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 16 <- Reducer 24 (BROADCAST_EDGE), Union 17 (CONTAINS)
Map 22 <- Reducer 24 (BROADCAST_EDGE), Union 17 (CONTAINS)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 18 <- Map 23 (SIMPLE_EDGE), Union 17 (SIMPLE_EDGE)
Reducer 19 <- Map 25 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 11 (SIMPLE_EDGE)
Reducer 20 <- Map 26 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 24 <- Map 23 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 27 (SIMPLE_EDGE)
Reducer 29 <- Reducer 28 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 14 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 27 (SIMPLE_EDGE)
Reducer 31 <- Reducer 30 (CUSTOM_SIMPLE_EDGE)
Reducer 32 <- Map 27 (SIMPLE_EDGE)
Reducer 33 <- Map 27 (SIMPLE_EDGE)
Reducer 4 <- Reducer 29 (CUSTOM_SIMPLE_EDGE), Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 31 (CUSTOM_SIMPLE_EDGE), Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 32 (CUSTOM_SIMPLE_EDGE), Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 33 (CUSTOM_SIMPLE_EDGE), Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 10 vectorized
      File Output Operator [FS_360]
        Limit [LIM_359] (rows=1 width=16)
          Number of rows:100
          Select Operator [SEL_358] (rows=1 width=16)
            Output:["_col0","_col1","_col2"]
          <-Reducer 9 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_357]
              Select Operator [SEL_356] (rows=1 width=16)
                Output:["_col0","_col1","_col2"]
                Top N Key Operator [TNK_355] (rows=1 width=12)
                  keys:_col0, _col1,top n:100
                  Group By Operator [GBY_354] (rows=1 width=12)
                    Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                  <-Reducer 8 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_353]
                      PartitionCols:_col0
                      Group By Operator [GBY_352] (rows=1 width=12)
                        Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                        Select Operator [SEL_351] (rows=1 width=116)
                          Output:["_col0"]
                          Top N Key Operator [TNK_350] (rows=1 width=116)
                            keys:UDFToInteger((_col1 / 50)),top n:100
                            Group By Operator [GBY_349] (rows=1 width=116)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 7 [SIMPLE_EDGE]
                              SHUFFLE [RS_118]
                                PartitionCols:_col0
                                Group By Operator [GBY_117] (rows=17670 width=116)
                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col10
                                  Select Operator [SEL_116] (rows=36481068608 width=123)
                                    Output:["_col2","_col10"]
                                    Filter Operator [FIL_115] (rows=36481068608 width=123)
                                      predicate:(_col4 <= _col15)
                                      Merge Join Operator [MERGEJOIN_276] (rows=109443205825 width=123)
                                        Conds:(Inner),Output:["_col2","_col4","_col10","_col15"]
                                      <-Reducer 33 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_348]
                                          Group By Operator [GBY_347] (rows=25 width=4)
                                            Output:["_col0"],keys:KEY._col0
                                          <-Map 27 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_328]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_324] (rows=25 width=4)
                                                Output:["_col0"],keys:_col0
                                                Select Operator [SEL_320] (rows=50 width=12)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_316] (rows=50 width=12)
                                                    predicate:((d_year = 1999) and (d_moy = 3) and d_month_seq is not null)
                                                    TableScan [TS_50] (rows=73049 width=12)
                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_month_seq","d_year","d_moy"]
                                      <-Reducer 6 [CUSTOM_SIMPLE_EDGE]
                                        PARTITION_ONLY_SHUFFLE [RS_112]
                                          Filter Operator [FIL_111] (rows=4377728233 width=123)
                                            predicate:(_col14 <= _col4)
                                            Merge Join Operator [MERGEJOIN_275] (rows=13133184700 width=123)
                                              Conds:(Inner),Output:["_col2","_col4","_col10","_col14"]
                                            <-Reducer 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_346]
                                                Group By Operator [GBY_345] (rows=25 width=4)
                                                  Output:["_col0"],keys:KEY._col0
                                                <-Map 27 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_327]
                                                    PartitionCols:_col0
                                                    Group By Operator [GBY_323] (rows=25 width=4)
                                                      Output:["_col0"],keys:_col0
                                                      Select Operator [SEL_319] (rows=50 width=12)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_315] (rows=50 width=12)
                                                          predicate:((d_year = 1999) and (d_moy = 3) and d_month_seq is not null)
                                                           Please refer to the previous TableScan [TS_50]
                                            <-Reducer 5 [CUSTOM_SIMPLE_EDGE]
                                              PARTITION_ONLY_SHUFFLE [RS_108]
                                                Merge Join Operator [MERGEJOIN_274] (rows=525327388 width=114)
                                                  Conds:(Inner),Output:["_col2","_col4","_col10"]
                                                <-Reducer 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_344]
                                                    Select Operator [SEL_343] (rows=1 width=8)
                                                      Filter Operator [FIL_342] (rows=1 width=8)
                                                        predicate:(sq_count_check(_col0) <= 1)
                                                        Group By Operator [GBY_341] (rows=1 width=8)
                                                          Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                        <-Reducer 30 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_340]
                                                            Group By Operator [GBY_339] (rows=1 width=8)
                                                              Output:["_col0"],aggregations:["count()"]
                                                              Select Operator [SEL_338] (rows=25 width=4)
                                                                Group By Operator [GBY_337] (rows=25 width=4)
                                                                  Output:["_col0"],keys:KEY._col0
                                                                <-Map 27 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_326]
                                                                    PartitionCols:_col0
                                                                    Group By Operator [GBY_322] (rows=25 width=4)
                                                                      Output:["_col0"],keys:_col0
                                                                      Select Operator [SEL_318] (rows=50 width=12)
                                                                        Output:["_col0"]
                                                                        Filter Operator [FIL_314] (rows=50 width=12)
                                                                          predicate:((d_year = 1999) and (d_moy = 3))
                                                                           Please refer to the previous TableScan [TS_50]
                                                <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
                                                  PARTITION_ONLY_SHUFFLE [RS_105]
                                                    Merge Join Operator [MERGEJOIN_273] (rows=525327388 width=114)
                                                      Conds:(Inner),Output:["_col2","_col4","_col10"]
                                                    <-Reducer 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_336]
                                                        Select Operator [SEL_335] (rows=1 width=8)
                                                          Filter Operator [FIL_334] (rows=1 width=8)
                                                            predicate:(sq_count_check(_col0) <= 1)
                                                            Group By Operator [GBY_333] (rows=1 width=8)
                                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                            <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_332]
                                                                Group By Operator [GBY_331] (rows=1 width=8)
                                                                  Output:["_col0"],aggregations:["count()"]
                                                                  Select Operator [SEL_330] (rows=25 width=4)
                                                                    Group By Operator [GBY_329] (rows=25 width=4)
                                                                      Output:["_col0"],keys:KEY._col0
                                                                    <-Map 27 [SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_325]
                                                                        PartitionCols:_col0
                                                                        Group By Operator [GBY_321] (rows=25 width=4)
                                                                          Output:["_col0"],keys:_col0
                                                                          Select Operator [SEL_317] (rows=50 width=12)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Filter Operator [FIL_314]
                                                    <-Reducer 3 [CUSTOM_SIMPLE_EDGE]
                                                      PARTITION_ONLY_SHUFFLE [RS_102]
                                                        Merge Join Operator [MERGEJOIN_272] (rows=525327388 width=114)
                                                          Conds:RS_99._col1=RS_100._col5(Inner),Output:["_col2","_col4","_col10"]
                                                        <-Reducer 14 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_100]
                                                            PartitionCols:_col5
                                                            Merge Join Operator [MERGEJOIN_271] (rows=55046 width=4)
                                                              Conds:RS_46._col0=RS_313._col1(Inner),Output:["_col5"]
                                                            <-Reducer 13 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_46]
                                                                PartitionCols:_col0
                                                                Merge Join Operator [MERGEJOIN_267] (rows=39720279 width=4)
                                                                  Conds:RS_295._col1, _col2=RS_298._col0, _col1(Inner),Output:["_col0"]
                                                                <-Map 12 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_295]
                                                                    PartitionCols:_col1, _col2
                                                                    Select Operator [SEL_294] (rows=40000000 width=188)
                                                                      Output:["_col0","_col1","_col2"]
                                                                      Filter Operator [FIL_293] (rows=40000000 width=188)
                                                                        predicate:(ca_address_sk is not null and ca_county is not null and ca_state is not null)
                                                                        TableScan [TS_6] (rows=40000000 width=188)
                                                                          default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county","ca_state"]
                                                                <-Map 15 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_298]
                                                                    PartitionCols:_col0, _col1
                                                                    Select Operator [SEL_297] (rows=1704 width=184)
                                                                      Output:["_col0","_col1"]
                                                                      Filter Operator [FIL_296] (rows=1704 width=184)
                                                                        predicate:(s_county is not null and s_state is not null)
                                                                        TableScan [TS_9] (rows=1704 width=184)
                                                                          default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_county","s_state"]
                                                            <-Reducer 21 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_313]
                                                                PartitionCols:_col1
                                                                Select Operator [SEL_312] (rows=55046 width=8)
                                                                  Output:["_col0","_col1"]
                                                                  Group By Operator [GBY_311] (rows=55046 width=8)
                                                                    Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                                                  <-Reducer 20 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_40]
                                                                      PartitionCols:_col0, _col1
                                                                      Group By Operator [GBY_39] (rows=55046 width=8)
                                                                        Output:["_col0","_col1"],keys:_col6, _col5
                                                                        Merge Join Operator [MERGEJOIN_270] (rows=110092 width=8)
                                                                          Conds:RS_35._col1=RS_310._col0(Inner),Output:["_col5","_col6"]
                                                                        <-Map 26 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_310]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_309] (rows=80000000 width=8)
                                                                              Output:["_col0","_col1"]
                                                                              Filter Operator [FIL_308] (rows=80000000 width=8)
                                                                                predicate:(c_customer_sk is not null and c_current_addr_sk is not null)
                                                                                TableScan [TS_26] (rows=80000000 width=8)
                                                                                  default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_addr_sk"]
                                                                        <-Reducer 19 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_35]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_269] (rows=110092 width=0)
                                                                              Conds:RS_32._col2=RS_307._col0(Inner),Output:["_col1"]
                                                                            <-Map 25 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_307]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_306] (rows=453 width=4)
                                                                                  Output:["_col0"]
                                                                                  Filter Operator [FIL_305] (rows=453 width=186)
                                                                                    predicate:((i_class = 'consignment') and (i_category = 'Jewelry') and i_item_sk is not null)
                                                                                    TableScan [TS_23] (rows=462000 width=186)
                                                                                      default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_class","i_category"]
                                                                            <-Reducer 18 [SIMPLE_EDGE]
                                                                              SHUFFLE [RS_32]
                                                                                PartitionCols:_col2
                                                                                Merge Join Operator [MERGEJOIN_268] (rows=11665117 width=7)
                                                                                  Conds:Union 17._col0=RS_301._col0(Inner),Output:["_col1","_col2"]
                                                                                <-Map 23 [SIMPLE_EDGE] vectorized
                                                                                  PARTITION_ONLY_SHUFFLE [RS_301]
                                                                                    PartitionCols:_col0
                                                                                    Select Operator [SEL_300] (rows=50 width=4)
                                                                                      Output:["_col0"]
                                                                                      Filter Operator [FIL_299] (rows=50 width=12)
                                                                                        predicate:((d_year = 1999) and (d_moy = 3) and d_date_sk is not null)
                                                                                        TableScan [TS_20] (rows=73049 width=12)
                                                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                                                <-Union 17 [SIMPLE_EDGE]
                                                                                  <-Map 16 [CONTAINS] vectorized
                                                                                    Reduce Output Operator [RS_366]
                                                                                      PartitionCols:_col0
                                                                                      Select Operator [SEL_365] (rows=285117831 width=11)
                                                                                        Output:["_col0","_col1","_col2"]
                                                                                        Filter Operator [FIL_364] (rows=285117831 width=11)
                                                                                          predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_30_date_dim_d_date_sk_min) AND DynamicValue(RS_30_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_30_date_dim_d_date_sk_bloom_filter)))
                                                                                          TableScan [TS_277] (rows=287989836 width=11)
                                                                                            Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk"]
                                                                                          <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                                                            BROADCAST [RS_362]
                                                                                              Group By Operator [GBY_361] (rows=1 width=12)
                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                              <-Map 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                                PARTITION_ONLY_SHUFFLE [RS_304]
                                                                                                  Group By Operator [GBY_303] (rows=1 width=12)
                                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                    Select Operator [SEL_302] (rows=50 width=4)
                                                                                                      Output:["_col0"]
                                                                                                       Please refer to the previous Select Operator [SEL_300]
                                                                                  <-Map 22 [CONTAINS] vectorized
                                                                                    Reduce Output Operator [RS_369]
                                                                                      PartitionCols:_col0
                                                                                      Select Operator [SEL_368] (rows=143930993 width=11)
                                                                                        Output:["_col0","_col1","_col2"]
                                                                                        Filter Operator [FIL_367] (rows=143930993 width=11)
                                                                                          predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_30_date_dim_d_date_sk_min) AND DynamicValue(RS_30_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_30_date_dim_d_date_sk_bloom_filter)))
                                                                                          TableScan [TS_282] (rows=144002668 width=11)
                                                                                            Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk"]
                                                                                          <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                                                            BROADCAST [RS_363]
                                                                                               Please refer to the previous Group By Operator [GBY_361]
                                                        <-Reducer 2 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_99]
                                                            PartitionCols:_col1
                                                            Merge Join Operator [MERGEJOIN_266] (rows=525327388 width=114)
                                                              Conds:RS_289._col0=RS_292._col0(Inner),Output:["_col1","_col2","_col4"]
                                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_289]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_288] (rows=525327388 width=114)
                                                                  Output:["_col0","_col1","_col2"]
                                                                  Filter Operator [FIL_287] (rows=525327388 width=114)
                                                                    predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null)
                                                                    TableScan [TS_0] (rows=575995635 width=114)
                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_sales_price"]
                                                            <-Map 11 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_292]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_291] (rows=73049 width=8)
                                                                  Output:["_col0","_col1"]
                                                                  Filter Operator [FIL_290] (rows=73049 width=8)
                                                                    predicate:(d_date_sk is not null and d_month_seq is not null)
                                                                    TableScan [TS_3] (rows=73049 width=8)
                                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_month_seq"]

