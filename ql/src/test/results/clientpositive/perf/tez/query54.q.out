Warning: Shuffle Join MERGEJOIN[271][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3]] in Stage 'Reducer 4' is a cross product
Warning: Shuffle Join MERGEJOIN[272][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[270][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 33' is a cross product
Warning: Shuffle Join MERGEJOIN[273][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 6' is a cross product
PREHOOK: query: explain
with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   web_sales
         ) cs_or_ws_sales,
         item,
         date_dim,
         customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Jewelry'
         and i_class = 'consignment'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 3
         and d_year = 1999
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        store_sales,
        customer_address,
        store,
        date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   date_dim where d_year = 1999 and d_moy = 3)
                           and  (select distinct d_month_seq+3
                                 from   date_dim where d_year = 1999 and d_moy = 3)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   web_sales
         ) cs_or_ws_sales,
         item,
         date_dim,
         customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Jewelry'
         and i_class = 'consignment'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 3
         and d_year = 1999
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        store_sales,
        customer_address,
        store,
        date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   date_dim where d_year = 1999 and d_moy = 3)
                           and  (select distinct d_month_seq+3
                                 from   date_dim where d_year = 1999 and d_moy = 3)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE)
Map 16 <- Reducer 24 (BROADCAST_EDGE), Reducer 26 (BROADCAST_EDGE), Reducer 28 (BROADCAST_EDGE), Union 17 (CONTAINS)
Map 22 <- Reducer 24 (BROADCAST_EDGE), Reducer 26 (BROADCAST_EDGE), Union 17 (CONTAINS)
Reducer 11 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 18 <- Map 23 (SIMPLE_EDGE), Union 17 (SIMPLE_EDGE)
Reducer 19 <- Map 25 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 20 <- Map 27 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 24 <- Map 23 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Map 25 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 27 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 14 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 29 (SIMPLE_EDGE)
Reducer 31 <- Reducer 30 (CUSTOM_SIMPLE_EDGE)
Reducer 32 <- Map 29 (SIMPLE_EDGE)
Reducer 33 <- Reducer 32 (CUSTOM_SIMPLE_EDGE), Reducer 35 (CUSTOM_SIMPLE_EDGE)
Reducer 34 <- Map 29 (SIMPLE_EDGE)
Reducer 35 <- Reducer 34 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE), Reducer 31 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 30 (CUSTOM_SIMPLE_EDGE), Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 33 (CUSTOM_SIMPLE_EDGE), Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_360]
        Limit [LIM_359] (rows=100 width=158)
          Number of rows:100
          Select Operator [SEL_358] (rows=1614130953450400 width=158)
            Output:["_col0","_col1","_col2"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_357]
              Select Operator [SEL_356] (rows=1614130953450400 width=158)
                Output:["_col0","_col1","_col2"]
                Group By Operator [GBY_355] (rows=1614130953450400 width=158)
                  Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                <-Reducer 7 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_354]
                    PartitionCols:_col0
                    Group By Operator [GBY_353] (rows=3228261906900801 width=158)
                      Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                      Select Operator [SEL_352] (rows=3228261906900801 width=158)
                        Output:["_col0"]
                        Group By Operator [GBY_351] (rows=3228261906900801 width=158)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 6 [SIMPLE_EDGE]
                          SHUFFLE [RS_119]
                            PartitionCols:_col0
                            Group By Operator [GBY_118] (rows=6456523813801603 width=158)
                              Output:["_col0","_col1"],aggregations:["sum(_col4)"],keys:_col0
                              Select Operator [SEL_117] (rows=6456523813801603 width=158)
                                Output:["_col0","_col4"]
                                Filter Operator [FIL_116] (rows=6456523813801603 width=158)
                                  predicate:_col11 BETWEEN _col13 AND _col15
                                  Select Operator [SEL_115] (rows=58108714324214428 width=158)
                                    Output:["_col0","_col4","_col11","_col13","_col15"]
                                    Merge Join Operator [MERGEJOIN_273] (rows=58108714324214428 width=158)
                                      Conds:(Inner),Output:["_col0","_col2","_col6","_col13","_col15"]
                                    <-Reducer 33 [CUSTOM_SIMPLE_EDGE]
                                      PARTITION_ONLY_SHUFFLE [RS_112]
                                        Merge Join Operator [MERGEJOIN_270] (rows=9131 width=1128)
                                          Conds:(Right Outer),Output:["_col0"]
                                        <-Reducer 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_342]
                                            Group By Operator [GBY_341] (rows=9131 width=1119)
                                              Output:["_col0"],keys:KEY._col0
                                            <-Map 29 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_330]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_327] (rows=18262 width=1119)
                                                  Output:["_col0"],keys:_col0
                                                  Select Operator [SEL_324] (rows=18262 width=1119)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_322] (rows=18262 width=1119)
                                                      predicate:((d_moy = 3) and (d_year = 1999))
                                                      TableScan [TS_73] (rows=73049 width=1119)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_month_seq","d_year","d_moy"]
                                        <-Reducer 35 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_350]
                                            Select Operator [SEL_349] (rows=1 width=8)
                                              Filter Operator [FIL_348] (rows=1 width=8)
                                                predicate:(sq_count_check(_col0) <= 1)
                                                Group By Operator [GBY_347] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                <-Reducer 34 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_346]
                                                    Group By Operator [GBY_345] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count()"]
                                                      Select Operator [SEL_344] (rows=9131 width=1119)
                                                        Group By Operator [GBY_343] (rows=9131 width=1119)
                                                          Output:["_col0"],keys:KEY._col0
                                                        <-Map 29 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_331]
                                                            PartitionCols:_col0
                                                            Group By Operator [GBY_328] (rows=18262 width=1119)
                                                              Output:["_col0"],keys:_col0
                                                              Select Operator [SEL_325] (rows=18262 width=1119)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Filter Operator [FIL_322]
                                    <-Reducer 5 [CUSTOM_SIMPLE_EDGE]
                                      PARTITION_ONLY_SHUFFLE [RS_113]
                                        Select Operator [SEL_108] (rows=6363893803988 width=1217)
                                          Output:["_col0","_col4","_col11","_col13"]
                                          Merge Join Operator [MERGEJOIN_272] (rows=6363893803988 width=1217)
                                            Conds:(Left Outer),Output:["_col2","_col4","_col10","_col13"]
                                          <-Reducer 30 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_334]
                                              Group By Operator [GBY_332] (rows=9131 width=1119)
                                                Output:["_col0"],keys:KEY._col0
                                              <-Map 29 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_329]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_326] (rows=18262 width=1119)
                                                    Output:["_col0"],keys:_col0
                                                    Select Operator [SEL_323] (rows=18262 width=1119)
                                                      Output:["_col0"]
                                                       Please refer to the previous Filter Operator [FIL_322]
                                          <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
                                            PARTITION_ONLY_SHUFFLE [RS_105]
                                              Merge Join Operator [MERGEJOIN_271] (rows=696954748 width=97)
                                                Conds:(Inner),Output:["_col2","_col4","_col10"]
                                              <-Reducer 3 [CUSTOM_SIMPLE_EDGE]
                                                PARTITION_ONLY_SHUFFLE [RS_102]
                                                  Merge Join Operator [MERGEJOIN_269] (rows=696954748 width=88)
                                                    Conds:RS_99._col1=RS_100._col5(Inner),Output:["_col2","_col4","_col10"]
                                                  <-Reducer 14 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_100]
                                                      PartitionCols:_col5
                                                      Merge Join Operator [MERGEJOIN_268] (rows=316240138 width=135)
                                                        Conds:RS_69._col0=RS_321._col1(Inner),Output:["_col5"]
                                                      <-Reducer 13 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_69]
                                                          PartitionCols:_col0
                                                          Merge Join Operator [MERGEJOIN_264] (rows=44000000 width=1014)
                                                            Conds:RS_297._col1, _col2=RS_300._col0, _col1(Inner),Output:["_col0"]
                                                          <-Map 12 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_297]
                                                              PartitionCols:_col1, _col2
                                                              Select Operator [SEL_296] (rows=40000000 width=1014)
                                                                Output:["_col0","_col1","_col2"]
                                                                Filter Operator [FIL_295] (rows=40000000 width=1014)
                                                                  predicate:(ca_address_sk is not null and ca_county is not null and ca_state is not null)
                                                                  TableScan [TS_29] (rows=40000000 width=1014)
                                                                    default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_county","ca_state"]
                                                          <-Map 15 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_300]
                                                              PartitionCols:_col0, _col1
                                                              Select Operator [SEL_299] (rows=1704 width=1910)
                                                                Output:["_col0","_col1"]
                                                                Filter Operator [FIL_298] (rows=1704 width=1910)
                                                                  predicate:(s_county is not null and s_state is not null)
                                                                  TableScan [TS_32] (rows=1704 width=1910)
                                                                    default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_county","s_state"]
                                                      <-Reducer 21 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_321]
                                                          PartitionCols:_col1
                                                          Select Operator [SEL_320] (rows=287491029 width=135)
                                                            Output:["_col0","_col1"]
                                                            Group By Operator [GBY_319] (rows=287491029 width=135)
                                                              Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                                            <-Reducer 20 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_63]
                                                                PartitionCols:_col0, _col1
                                                                Group By Operator [GBY_62] (rows=574982058 width=135)
                                                                  Output:["_col0","_col1"],keys:_col10, _col9
                                                                  Merge Join Operator [MERGEJOIN_267] (rows=574982058 width=135)
                                                                    Conds:RS_58._col1=RS_315._col0(Inner),Output:["_col9","_col10"]
                                                                  <-Map 27 [SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_315]
                                                                      PartitionCols:_col0
                                                                      Select Operator [SEL_314] (rows=80000000 width=860)
                                                                        Output:["_col0","_col1"]
                                                                        Filter Operator [FIL_313] (rows=80000000 width=860)
                                                                          predicate:(c_current_addr_sk is not null and c_customer_sk is not null)
                                                                          TableScan [TS_49] (rows=80000000 width=860)
                                                                            default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_current_addr_sk"]
                                                                  <-Reducer 19 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_58]
                                                                      PartitionCols:_col1
                                                                      Merge Join Operator [MERGEJOIN_266] (rows=522710951 width=135)
                                                                        Conds:RS_55._col2=RS_309._col0(Inner),Output:["_col1"]
                                                                      <-Map 25 [SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_309]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_308] (rows=115500 width=1436)
                                                                            Output:["_col0"]
                                                                            Filter Operator [FIL_307] (rows=115500 width=1436)
                                                                              predicate:((i_category = 'Jewelry') and (i_class = 'consignment') and i_item_sk is not null)
                                                                              TableScan [TS_46] (rows=462000 width=1436)
                                                                                default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_class","i_category"]
                                                                      <-Reducer 18 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_55]
                                                                          PartitionCols:_col2
                                                                          Merge Join Operator [MERGEJOIN_265] (rows=475191764 width=135)
                                                                            Conds:Union 17._col0=RS_303._col0(Inner),Output:["_col1","_col2"]
                                                                          <-Map 23 [SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_303]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_302] (rows=18262 width=1119)
                                                                                Output:["_col0"]
                                                                                Filter Operator [FIL_301] (rows=18262 width=1119)
                                                                                  predicate:((d_moy = 3) and (d_year = 1999) and d_date_sk is not null)
                                                                                  TableScan [TS_43] (rows=73049 width=1119)
                                                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                                                          <-Union 17 [SIMPLE_EDGE]
                                                                            <-Map 16 [CONTAINS] vectorized
                                                                              Reduce Output Operator [RS_371]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_370] (rows=287989836 width=135)
                                                                                  Output:["_col0","_col1","_col2"]
                                                                                  Filter Operator [FIL_369] (rows=287989836 width=135)
                                                                                    predicate:((cs_bill_customer_sk BETWEEN DynamicValue(RS_59_customer_c_customer_sk_min) AND DynamicValue(RS_59_customer_c_customer_sk_max) and in_bloom_filter(cs_bill_customer_sk, DynamicValue(RS_59_customer_c_customer_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_56_item_i_item_sk_min) AND DynamicValue(RS_56_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_56_item_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_53_date_dim_d_date_sk_min) AND DynamicValue(RS_53_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_53_date_dim_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                                                                    TableScan [TS_274] (rows=287989836 width=135)
                                                                                      Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk"]
                                                                                    <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_362]
                                                                                        Group By Operator [GBY_361] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_306]
                                                                                            Group By Operator [GBY_305] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_304] (rows=18262 width=1119)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_302]
                                                                                    <-Reducer 26 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_365]
                                                                                        Group By Operator [GBY_364] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 25 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_312]
                                                                                            Group By Operator [GBY_311] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_310] (rows=115500 width=1436)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_308]
                                                                                    <-Reducer 28 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_368]
                                                                                        Group By Operator [GBY_367] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=80000000)"]
                                                                                        <-Map 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_318]
                                                                                            Group By Operator [GBY_317] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=80000000)"]
                                                                                              Select Operator [SEL_316] (rows=80000000 width=860)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_314]
                                                                            <-Map 22 [CONTAINS] vectorized
                                                                              Reduce Output Operator [RS_374]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_373] (rows=144002668 width=135)
                                                                                  Output:["_col0","_col1","_col2"]
                                                                                  Filter Operator [FIL_372] (rows=144002668 width=135)
                                                                                    predicate:((ws_item_sk BETWEEN DynamicValue(RS_56_item_i_item_sk_min) AND DynamicValue(RS_56_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_56_item_i_item_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_53_date_dim_d_date_sk_min) AND DynamicValue(RS_53_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_53_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_item_sk is not null and ws_sold_date_sk is not null)
                                                                                    TableScan [TS_279] (rows=144002668 width=135)
                                                                                      Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk"]
                                                                                    <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_363]
                                                                                         Please refer to the previous Group By Operator [GBY_361]
                                                                                    <-Reducer 26 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_366]
                                                                                         Please refer to the previous Group By Operator [GBY_364]
                                                  <-Reducer 2 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_99]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_263] (rows=633595212 width=88)
                                                        Conds:RS_294._col0=RS_286._col0(Inner),Output:["_col1","_col2","_col4"]
                                                      <-Map 10 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_286]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_285] (rows=73049 width=1119)
                                                            Output:["_col0","_col1"]
                                                            Filter Operator [FIL_284] (rows=73049 width=1119)
                                                              predicate:d_date_sk is not null
                                                              TableScan [TS_26] (rows=73049 width=1119)
                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_month_seq"]
                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_294]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_293] (rows=575995635 width=88)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_292] (rows=575995635 width=88)
                                                              predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_97_date_dim_d_date_sk_min) AND DynamicValue(RS_97_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_97_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                              TableScan [TS_23] (rows=575995635 width=88)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_sales_price"]
                                                              <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_291]
                                                                  Group By Operator [GBY_290] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_289]
                                                                      Group By Operator [GBY_288] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_287] (rows=73049 width=1119)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_285]
                                              <-Reducer 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_340]
                                                  Select Operator [SEL_339] (rows=1 width=8)
                                                    Filter Operator [FIL_338] (rows=1 width=8)
                                                      predicate:(sq_count_check(_col0) <= 1)
                                                      Group By Operator [GBY_337] (rows=1 width=8)
                                                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                      <-Reducer 30 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_336]
                                                          Group By Operator [GBY_335] (rows=1 width=8)
                                                            Output:["_col0"],aggregations:["count()"]
                                                            Select Operator [SEL_333] (rows=9131 width=1119)
                                                               Please refer to the previous Group By Operator [GBY_332]

