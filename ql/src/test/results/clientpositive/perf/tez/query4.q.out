PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 11 <- Map 10 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE)
Reducer 12 <- Map 25 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 10 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE)
Reducer 15 <- Map 25 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE)
Reducer 19 <- Map 25 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Map 17 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE)
Reducer 22 <- Map 25 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (SIMPLE_EDGE)
Reducer 3 <- Map 25 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 13 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 1 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE)
Reducer 8 <- Map 25 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6
      File Output Operator [FS_142]
        Limit [LIM_141] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_140] (rows=212958399 width=88)
            Output:["_col0"]
          <-Reducer 5 [SIMPLE_EDGE]
            SHUFFLE [RS_139]
              Select Operator [SEL_138] (rows=212958399 width=88)
                Output:["_col0"]
                Filter Operator [FIL_136] (rows=212958399 width=88)
                  predicate:(((_col1 / _col8) > (_col10 / _col12)) and ((_col1 / _col8) > (_col6 / _col3)))
                  Merge Join Operator [MERGEJOIN_296] (rows=1916625598 width=88)
                    Conds:RS_129._col0=RS_130._col0(Inner),RS_130._col0=RS_131._col0(Inner),RS_130._col0=RS_132._col0(Inner),RS_130._col0=RS_133._col0(Inner),RS_130._col0=RS_134._col0(Inner),Output:["_col1","_col3","_col5","_col6","_col8","_col10","_col12"]
                  <-Reducer 13 [SIMPLE_EDGE]
                    SHUFFLE [RS_131]
                      PartitionCols:_col0
                      Select Operator [SEL_63] (rows=348477374 width=88)
                        Output:["_col0","_col1","_col2"]
                        Group By Operator [GBY_62] (rows=348477374 width=88)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                        <-Reducer 12 [SIMPLE_EDGE]
                          SHUFFLE [RS_61]
                            PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                            Group By Operator [GBY_60] (rows=696954748 width=88)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                              Select Operator [SEL_58] (rows=696954748 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                Merge Join Operator [MERGEJOIN_289] (rows=696954748 width=88)
                                  Conds:RS_55._col1=RS_56._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                <-Map 25 [SIMPLE_EDGE]
                                  SHUFFLE [RS_56]
                                    PartitionCols:_col0
                                    Select Operator [SEL_94] (rows=80000000 width=860)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                      Filter Operator [FIL_277] (rows=80000000 width=860)
                                        predicate:(c_customer_id is not null and c_customer_sk is not null)
                                        TableScan [TS_92] (rows=80000000 width=860)
                                          default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name","c_preferred_cust_flag","c_birth_country","c_login","c_email_address"]
                                <-Reducer 11 [SIMPLE_EDGE]
                                  SHUFFLE [RS_55]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_288] (rows=633595212 width=88)
                                      Conds:RS_52._col0=RS_53._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                    <-Map 24 [SIMPLE_EDGE]
                                      SHUFFLE [RS_53]
                                        PartitionCols:_col0
                                        Select Operator [SEL_91] (rows=36524 width=1119)
                                          Output:["_col0"]
                                          Filter Operator [FIL_276] (rows=36524 width=1119)
                                            predicate:((d_year = 2002) and d_date_sk is not null)
                                            TableScan [TS_89] (rows=73049 width=1119)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                    <-Map 10 [SIMPLE_EDGE]
                                      SHUFFLE [RS_52]
                                        PartitionCols:_col0
                                        Select Operator [SEL_45] (rows=575995635 width=88)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Filter Operator [FIL_269] (rows=575995635 width=88)
                                            predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                            TableScan [TS_43] (rows=575995635 width=88)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                  <-Reducer 16 [SIMPLE_EDGE]
                    SHUFFLE [RS_130]
                      PartitionCols:_col0
                      Select Operator [SEL_42] (rows=116159124 width=88)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_41] (rows=116159124 width=88)
                          predicate:(_col7 > 0)
                          Select Operator [SEL_283] (rows=348477374 width=88)
                            Output:["_col0","_col7"]
                            Group By Operator [GBY_40] (rows=348477374 width=88)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                            <-Reducer 15 [SIMPLE_EDGE]
                              SHUFFLE [RS_39]
                                PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                Group By Operator [GBY_38] (rows=696954748 width=88)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Select Operator [SEL_36] (rows=696954748 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                    Merge Join Operator [MERGEJOIN_287] (rows=696954748 width=88)
                                      Conds:RS_33._col1=RS_34._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                    <-Map 25 [SIMPLE_EDGE]
                                      SHUFFLE [RS_34]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_94]
                                    <-Reducer 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_33]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_286] (rows=633595212 width=88)
                                          Conds:RS_30._col0=RS_31._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                        <-Map 24 [SIMPLE_EDGE]
                                          SHUFFLE [RS_31]
                                            PartitionCols:_col0
                                            Select Operator [SEL_26] (rows=36524 width=1119)
                                              Output:["_col0"]
                                              Filter Operator [FIL_267] (rows=36524 width=1119)
                                                predicate:((d_year = 2001) and d_date_sk is not null)
                                                 Please refer to the previous TableScan [TS_89]
                                        <-Map 10 [SIMPLE_EDGE]
                                          SHUFFLE [RS_30]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_45]
                  <-Reducer 20 [SIMPLE_EDGE]
                    SHUFFLE [RS_133]
                      PartitionCols:_col0
                      Select Operator [SEL_106] (rows=87121617 width=135)
                        Output:["_col0","_col1"]
                        Group By Operator [GBY_105] (rows=87121617 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                        <-Reducer 19 [SIMPLE_EDGE]
                          SHUFFLE [RS_104]
                            PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                            Group By Operator [GBY_103] (rows=174243235 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                              Select Operator [SEL_101] (rows=174243235 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                Merge Join Operator [MERGEJOIN_293] (rows=174243235 width=135)
                                  Conds:RS_98._col1=RS_99._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                <-Map 25 [SIMPLE_EDGE]
                                  SHUFFLE [RS_99]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_94]
                                <-Reducer 18 [SIMPLE_EDGE]
                                  SHUFFLE [RS_98]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_292] (rows=158402938 width=135)
                                      Conds:RS_95._col0=RS_96._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                    <-Map 24 [SIMPLE_EDGE]
                                      SHUFFLE [RS_96]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_91]
                                    <-Map 17 [SIMPLE_EDGE]
                                      SHUFFLE [RS_95]
                                        PartitionCols:_col0
                                        Select Operator [SEL_88] (rows=144002668 width=135)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Filter Operator [FIL_275] (rows=144002668 width=135)
                                            predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                            TableScan [TS_86] (rows=144002668 width=135)
                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                  <-Reducer 23 [SIMPLE_EDGE]
                    SHUFFLE [RS_134]
                      PartitionCols:_col0
                      Select Operator [SEL_128] (rows=29040539 width=135)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_127] (rows=29040539 width=135)
                          predicate:(_col7 > 0)
                          Select Operator [SEL_282] (rows=87121617 width=135)
                            Output:["_col0","_col7"]
                            Group By Operator [GBY_126] (rows=87121617 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                            <-Reducer 22 [SIMPLE_EDGE]
                              SHUFFLE [RS_125]
                                PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                Group By Operator [GBY_124] (rows=174243235 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Select Operator [SEL_122] (rows=174243235 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                    Merge Join Operator [MERGEJOIN_295] (rows=174243235 width=135)
                                      Conds:RS_119._col1=RS_120._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                    <-Map 25 [SIMPLE_EDGE]
                                      SHUFFLE [RS_120]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_94]
                                    <-Reducer 21 [SIMPLE_EDGE]
                                      SHUFFLE [RS_119]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_294] (rows=158402938 width=135)
                                          Conds:RS_116._col0=RS_117._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                        <-Map 24 [SIMPLE_EDGE]
                                          SHUFFLE [RS_117]
                                            PartitionCols:_col0
                                            Select Operator [SEL_112] (rows=36524 width=1119)
                                              Output:["_col0"]
                                              Filter Operator [FIL_279] (rows=36524 width=1119)
                                                predicate:((d_year = 2001) and d_date_sk is not null)
                                                 Please refer to the previous TableScan [TS_89]
                                        <-Map 17 [SIMPLE_EDGE]
                                          SHUFFLE [RS_116]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_88]
                  <-Reducer 4 [SIMPLE_EDGE]
                    SHUFFLE [RS_129]
                      PartitionCols:_col0
                      Select Operator [SEL_20] (rows=174233858 width=135)
                        Output:["_col0","_col1"]
                        Group By Operator [GBY_19] (rows=174233858 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                        <-Reducer 3 [SIMPLE_EDGE]
                          SHUFFLE [RS_18]
                            PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                            Group By Operator [GBY_17] (rows=348467716 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                              Select Operator [SEL_15] (rows=348467716 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                Merge Join Operator [MERGEJOIN_285] (rows=348467716 width=135)
                                  Conds:RS_12._col1=RS_13._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                <-Map 25 [SIMPLE_EDGE]
                                  SHUFFLE [RS_13]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_94]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_12]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_284] (rows=316788826 width=135)
                                      Conds:RS_9._col0=RS_10._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                    <-Map 24 [SIMPLE_EDGE]
                                      SHUFFLE [RS_10]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_91]
                                    <-Map 1 [SIMPLE_EDGE]
                                      SHUFFLE [RS_9]
                                        PartitionCols:_col0
                                        Select Operator [SEL_2] (rows=287989836 width=135)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Filter Operator [FIL_263] (rows=287989836 width=135)
                                            predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                            TableScan [TS_0] (rows=287989836 width=135)
                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                  <-Reducer 9 [SIMPLE_EDGE]
                    SHUFFLE [RS_132]
                      PartitionCols:_col0
                      Select Operator [SEL_85] (rows=58077952 width=135)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_84] (rows=58077952 width=135)
                          predicate:(_col7 > 0)
                          Select Operator [SEL_281] (rows=174233858 width=135)
                            Output:["_col0","_col7"]
                            Group By Operator [GBY_83] (rows=174233858 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                            <-Reducer 8 [SIMPLE_EDGE]
                              SHUFFLE [RS_82]
                                PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                Group By Operator [GBY_81] (rows=348467716 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Select Operator [SEL_79] (rows=348467716 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                    Merge Join Operator [MERGEJOIN_291] (rows=348467716 width=135)
                                      Conds:RS_76._col1=RS_77._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                    <-Map 25 [SIMPLE_EDGE]
                                      SHUFFLE [RS_77]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_94]
                                    <-Reducer 7 [SIMPLE_EDGE]
                                      SHUFFLE [RS_76]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_290] (rows=316788826 width=135)
                                          Conds:RS_73._col0=RS_74._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                        <-Map 24 [SIMPLE_EDGE]
                                          SHUFFLE [RS_74]
                                            PartitionCols:_col0
                                            Select Operator [SEL_69] (rows=36524 width=1119)
                                              Output:["_col0"]
                                              Filter Operator [FIL_273] (rows=36524 width=1119)
                                                predicate:((d_year = 2001) and d_date_sk is not null)
                                                 Please refer to the previous TableScan [TS_89]
                                        <-Map 1 [SIMPLE_EDGE]
                                          SHUFFLE [RS_73]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_2]

