PREHOOK: query: explain
with customer_total_return as
 (select cr_returning_customer_sk as ctr_customer_sk
        ,ca_state as ctr_state, 
 	sum(cr_return_amt_inc_tax) as ctr_total_return
 from catalog_returns
     ,date_dim
     ,customer_address
 where cr_returned_date_sk = d_date_sk 
   and d_year =1998
   and cr_returning_addr_sk = ca_address_sk 
 group by cr_returning_customer_sk
         ,ca_state )
  select  c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
                  ,ca_location_type,ctr_total_return
 from customer_total_return ctr1
     ,customer_address
     ,customer
 where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
 			  from customer_total_return ctr2 
                  	  where ctr1.ctr_state = ctr2.ctr_state)
       and ca_address_sk = c_current_addr_sk
       and ca_state = 'IL'
       and ctr1.ctr_customer_sk = c_customer_sk
 order by c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
                  ,ca_location_type,ctr_total_return
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with customer_total_return as
 (select cr_returning_customer_sk as ctr_customer_sk
        ,ca_state as ctr_state, 
 	sum(cr_return_amt_inc_tax) as ctr_total_return
 from catalog_returns
     ,date_dim
     ,customer_address
 where cr_returned_date_sk = d_date_sk 
   and d_year =1998
   and cr_returning_addr_sk = ca_address_sk 
 group by cr_returning_customer_sk
         ,ca_state )
  select  c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
                  ,ca_location_type,ctr_total_return
 from customer_total_return ctr1
     ,customer_address
     ,customer
 where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
 			  from customer_total_return ctr2 
                  	  where ctr1.ctr_state = ctr2.ctr_state)
       and ca_address_sk = c_current_addr_sk
       and ca_state = 'IL'
       and ctr1.ctr_customer_sk = c_customer_sk
 order by c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
                  ,ca_location_type,ctr_total_return
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 13 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 14 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
Reducer 12 <- Map 15 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
Reducer 3 <- Reducer 10 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 7 <- Map 14 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
Reducer 8 <- Map 15 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_210]
        Select Operator [SEL_209] (rows=100 width=1506)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
          Limit [LIM_208] (rows=100 width=1420)
            Number of rows:100
            Select Operator [SEL_207] (rows=1577696 width=1418)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
            <-Reducer 3 [SIMPLE_EDGE]
              SHUFFLE [RS_63]
                Select Operator [SEL_62] (rows=1577696 width=1418)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
                  Merge Join Operator [MERGEJOIN_178] (rows=1577696 width=1418)
                    Conds:RS_59._col0=RS_60._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col19"]
                  <-Reducer 10 [SIMPLE_EDGE]
                    SHUFFLE [RS_60]
                      PartitionCols:_col0
                      Select Operator [SEL_55] (rows=1609248 width=227)
                        Output:["_col0","_col2"]
                        Filter Operator [FIL_54] (rows=1609248 width=227)
                          predicate:(_col2 > _col3)
                          Merge Join Operator [MERGEJOIN_177] (rows=4827746 width=227)
                            Conds:RS_201._col1=RS_206._col1(Inner),Output:["_col0","_col2","_col3"]
                          <-Reducer 13 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_206]
                              PartitionCols:_col1
                              Select Operator [SEL_205] (rows=12 width=198)
                                Output:["_col0","_col1"]
                                Group By Operator [GBY_204] (rows=12 width=206)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","count(_col2)"],keys:_col0
                                  Select Operator [SEL_203] (rows=5266632 width=201)
                                    Output:["_col0","_col2"]
                                    Group By Operator [GBY_202] (rows=5266632 width=201)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                    <-Reducer 12 [SIMPLE_EDGE]
                                      SHUFFLE [RS_43]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_42] (rows=8749496 width=201)
                                          Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col6, _col1
                                          Merge Join Operator [MERGEJOIN_176] (rows=8749496 width=194)
                                            Conds:RS_38._col2=RS_198._col0(Inner),Output:["_col1","_col3","_col6"]
                                          <-Map 15 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_198]
                                              PartitionCols:_col0
                                              Select Operator [SEL_196] (rows=40000000 width=90)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_195] (rows=40000000 width=90)
                                                  predicate:(ca_address_sk is not null and ca_state is not null)
                                                  TableScan [TS_12] (rows=40000000 width=90)
                                                    default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state"]
                                          <-Reducer 11 [SIMPLE_EDGE]
                                            SHUFFLE [RS_38]
                                              PartitionCols:_col2
                                              Merge Join Operator [MERGEJOIN_175] (rows=8749496 width=112)
                                                Conds:RS_190._col0=RS_194._col0(Inner),Output:["_col1","_col2","_col3"]
                                              <-Map 14 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_194]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_192] (rows=652 width=4)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_191] (rows=652 width=8)
                                                      predicate:((d_year = 1998) and d_date_sk is not null)
                                                      TableScan [TS_9] (rows=73049 width=8)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                              <-Map 6 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_190]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_188] (rows=28221532 width=121)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_186] (rows=28221532 width=121)
                                                      predicate:(cr_returned_date_sk is not null and cr_returning_addr_sk is not null)
                                                      TableScan [TS_6] (rows=28798881 width=121)
                                                        default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_returned_date_sk","cr_returning_customer_sk","cr_returning_addr_sk","cr_return_amt_inc_tax"]
                          <-Reducer 9 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_201]
                              PartitionCols:_col1
                              Select Operator [SEL_200] (rows=4827746 width=201)
                                Output:["_col0","_col1","_col2"]
                                Group By Operator [GBY_199] (rows=4827746 width=201)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                <-Reducer 8 [SIMPLE_EDGE]
                                  SHUFFLE [RS_23]
                                    PartitionCols:_col0, _col1
                                    Group By Operator [GBY_22] (rows=8574602 width=201)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col6, _col1
                                      Merge Join Operator [MERGEJOIN_174] (rows=8574602 width=194)
                                        Conds:RS_18._col2=RS_197._col0(Inner),Output:["_col1","_col3","_col6"]
                                      <-Map 15 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_197]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_196]
                                      <-Reducer 7 [SIMPLE_EDGE]
                                        SHUFFLE [RS_18]
                                          PartitionCols:_col2
                                          Merge Join Operator [MERGEJOIN_173] (rows=8574602 width=112)
                                            Conds:RS_189._col0=RS_193._col0(Inner),Output:["_col1","_col2","_col3"]
                                          <-Map 14 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_193]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_192]
                                          <-Map 6 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_189]
                                              PartitionCols:_col0
                                              Select Operator [SEL_187] (rows=27657410 width=121)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_185] (rows=27657410 width=121)
                                                  predicate:(cr_returned_date_sk is not null and cr_returning_addr_sk is not null and cr_returning_customer_sk is not null)
                                                   Please refer to the previous TableScan [TS_6]
                  <-Reducer 2 [SIMPLE_EDGE]
                    SHUFFLE [RS_59]
                      PartitionCols:_col0
                      Merge Join Operator [MERGEJOIN_172] (rows=1568628 width=1310)
                        Conds:RS_181._col2=RS_184._col0(Inner),Output:["_col0","_col1","_col3","_col4","_col5","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16"]
                      <-Map 1 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_181]
                          PartitionCols:_col2
                          Select Operator [SEL_180] (rows=80000000 width=375)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_179] (rows=80000000 width=375)
                              predicate:(c_current_addr_sk is not null and c_customer_sk is not null)
                              TableScan [TS_0] (rows=80000000 width=375)
                                default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_current_addr_sk","c_salutation","c_first_name","c_last_name"]
                      <-Map 5 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_184]
                          PartitionCols:_col0
                          Select Operator [SEL_183] (rows=784314 width=941)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                            Filter Operator [FIL_182] (rows=784314 width=1027)
                              predicate:((ca_state = 'IL') and ca_address_sk is not null)
                              TableScan [TS_3] (rows=40000000 width=1027)
                                default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_street_number","ca_street_name","ca_street_type","ca_suite_number","ca_city","ca_county","ca_state","ca_zip","ca_country","ca_gmt_offset","ca_location_type"]

