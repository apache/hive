PREHOOK: query: explain
select  s_store_name, s_store_id,
        sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales
 from date_dim, store_sales, store
 where d_date_sk = ss_sold_date_sk and
       s_store_sk = ss_store_sk and
       s_gmt_offset = -6 and
       d_year = 1998 
 group by s_store_name, s_store_id
 order by s_store_name, s_store_id,sun_sales,mon_sales,tue_sales,wed_sales,thu_sales,fri_sales,sat_sales
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  s_store_name, s_store_id,
        sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales
 from date_dim, store_sales, store
 where d_date_sk = ss_sold_date_sk and
       s_store_sk = ss_store_sk and
       s_gmt_offset = -6 and
       d_year = 1998 
 group by s_store_name, s_store_id
 order by s_store_name, s_store_id,sun_sales,mon_sales,tue_sales,wed_sales,thu_sales,fri_sales,sat_sales
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 7 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
Reducer 3 <- Map 8 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 7 <- Map 6 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_74]
        Limit [LIM_73] (rows=100 width=972)
          Number of rows:100
          Select Operator [SEL_72] (rows=3751 width=972)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_71]
              Group By Operator [GBY_70] (rows=3751 width=972)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)","sum(VALUE._col6)"],keys:KEY._col0, KEY._col1
              <-Reducer 3 [SIMPLE_EDGE]
                SHUFFLE [RS_18]
                  PartitionCols:_col0, _col1
                  Group By Operator [GBY_17] (rows=2486913 width=972)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)","sum(_col6)","sum(_col7)","sum(_col8)"],keys:_col0, _col1
                    Top N Key Operator [TNK_33] (rows=525329897 width=322)
                      keys:_col0, _col1,top n:100
                      Select Operator [SEL_15] (rows=525329897 width=322)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                        Merge Join Operator [MERGEJOIN_55] (rows=525329897 width=322)
                          Conds:RS_12._col1=RS_69._col0(Inner),Output:["_col2","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col12","_col13"]
                        <-Map 8 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_69]
                            PartitionCols:_col0
                            Select Operator [SEL_68] (rows=341 width=192)
                              Output:["_col0","_col1","_col2"]
                              Filter Operator [FIL_67] (rows=341 width=303)
                                predicate:((s_gmt_offset = -6) and s_store_sk is not null)
                                TableScan [TS_6] (rows=1704 width=303)
                                  default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id","s_store_name","s_gmt_offset"]
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_12]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_54] (rows=525329897 width=138)
                              Conds:RS_66._col0=RS_58._col0(Inner),Output:["_col1","_col2","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                            <-Map 6 [SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_58]
                                PartitionCols:_col0
                                Select Operator [SEL_57] (rows=652 width=32)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                  Filter Operator [FIL_56] (rows=652 width=99)
                                    predicate:((d_year = 1998) and d_date_sk is not null)
                                    TableScan [TS_3] (rows=73049 width=99)
                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_day_name"]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_66]
                                PartitionCols:_col0
                                Select Operator [SEL_65] (rows=525329897 width=114)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_64] (rows=525329897 width=114)
                                    predicate:(ss_sold_date_sk is not null and ss_store_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_10_date_dim_d_date_sk_min) AND DynamicValue(RS_10_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_10_date_dim_d_date_sk_bloom_filter)))
                                    TableScan [TS_0] (rows=575995635 width=114)
                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_store_sk","ss_sales_price"]
                                    <-Reducer 7 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_63]
                                        Group By Operator [GBY_62] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 6 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_61]
                                            Group By Operator [GBY_60] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_59] (rows=652 width=4)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_57]

