PREHOOK: query: explain
select  
   count(distinct ws_order_number) as `order count`
  ,sum(ws_ext_ship_cost) as `total shipping cost`
  ,sum(ws_net_profit) as `total net profit`
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-5-01' and 
           (cast('1999-5-01' as date) + 60 days)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TX'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and exists (select *
            from web_sales ws2
            where ws1.ws_order_number = ws2.ws_order_number
              and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
and not exists(select *
               from web_returns wr1
               where ws1.ws_order_number = wr1.wr_order_number)
order by count(distinct ws_order_number)
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  
   count(distinct ws_order_number) as `order count`
  ,sum(ws_ext_ship_cost) as `total shipping cost`
  ,sum(ws_net_profit) as `total net profit`
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-5-01' and 
           (cast('1999-5-01' as date) + 60 days)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TX'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and exists (select *
            from web_sales ws2
            where ws1.ws_order_number = ws2.ws_order_number
              and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
and not exists(select *
               from web_returns wr1
               where ws1.ws_order_number = wr1.wr_order_number)
order by count(distinct ws_order_number)
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE), Reducer 13 (BROADCAST_EDGE), Reducer 15 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Map 12 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 14 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 17 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 3 <- Map 12 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 14 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 16 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 18 (ONE_TO_ONE_EDGE), Reducer 5 (ONE_TO_ONE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_174]
        Limit [LIM_173] (rows=1 width=344)
          Number of rows:100
          Select Operator [SEL_172] (rows=1 width=344)
            Output:["_col0","_col1","_col2"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_171]
              Select Operator [SEL_170] (rows=1 width=344)
                Output:["_col1","_col2","_col3"]
                Group By Operator [GBY_169] (rows=1 width=344)
                  Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"]
                <-Reducer 7 [CUSTOM_SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_168]
                    Group By Operator [GBY_167] (rows=1 width=344)
                      Output:["_col0","_col1","_col2"],aggregations:["count(_col0)","sum(_col1)","sum(_col2)"]
                      Group By Operator [GBY_166] (rows=115958879 width=135)
                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                      <-Reducer 6 [SIMPLE_EDGE]
                        SHUFFLE [RS_74]
                          PartitionCols:_col0
                          Group By Operator [GBY_73] (rows=115958879 width=135)
                            Output:["_col0","_col2","_col3"],aggregations:["sum(_col5)","sum(_col6)"],keys:_col4
                            Select Operator [SEL_42] (rows=115958879 width=135)
                              Output:["_col4","_col5","_col6"]
                              Filter Operator [FIL_41] (rows=115958879 width=135)
                                predicate:_col14 is null
                                Merge Join Operator [MERGEJOIN_128] (rows=231917759 width=135)
                                  Conds:RS_38._col4=RS_165._col0(Left Outer),Output:["_col4","_col5","_col6","_col14"]
                                <-Reducer 18 [ONE_TO_ONE_EDGE] vectorized
                                  FORWARD [RS_165]
                                    PartitionCols:_col0
                                    Select Operator [SEL_164] (rows=7199233 width=92)
                                      Output:["_col0","_col1"]
                                      Group By Operator [GBY_163] (rows=7199233 width=92)
                                        Output:["_col0"],keys:KEY._col0
                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_162]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_161] (rows=14398467 width=92)
                                            Output:["_col0"],keys:wr_order_number
                                            Filter Operator [FIL_160] (rows=14398467 width=92)
                                              predicate:wr_order_number is not null
                                              TableScan [TS_25] (rows=14398467 width=92)
                                                default@web_returns,wr1,Tbl:COMPLETE,Col:NONE,Output:["wr_order_number"]
                                <-Reducer 5 [ONE_TO_ONE_EDGE]
                                  FORWARD [RS_38]
                                    PartitionCols:_col4
                                    Select Operator [SEL_37] (rows=210834322 width=135)
                                      Output:["_col4","_col5","_col6"]
                                      Merge Join Operator [MERGEJOIN_127] (rows=210834322 width=135)
                                        Conds:RS_34._col4=RS_159._col0(Left Semi),Output:["_col3","_col4","_col5","_col6","_col14"],residual filter predicates:{(_col3 <> _col14)}
                                      <-Map 16 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_159]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_158] (rows=144002668 width=135)
                                            Output:["_col0","_col1"],keys:_col0, _col1
                                            Select Operator [SEL_157] (rows=144002668 width=135)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_156] (rows=144002668 width=135)
                                                predicate:(ws_order_number is not null and ws_warehouse_sk is not null)
                                                TableScan [TS_22] (rows=144002668 width=135)
                                                  default@web_sales,ws2,Tbl:COMPLETE,Col:NONE,Output:["ws_warehouse_sk","ws_order_number"]
                                      <-Reducer 4 [SIMPLE_EDGE]
                                        SHUFFLE [RS_34]
                                          PartitionCols:_col4
                                          Merge Join Operator [MERGEJOIN_126] (rows=191667562 width=135)
                                            Conds:RS_18._col2=RS_147._col0(Inner),Output:["_col3","_col4","_col5","_col6"]
                                          <-Map 14 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_147]
                                              PartitionCols:_col0
                                              Select Operator [SEL_146] (rows=42 width=1850)
                                                Output:["_col0"]
                                                Filter Operator [FIL_145] (rows=42 width=1850)
                                                  predicate:((web_company_name = 'pri') and web_site_sk is not null)
                                                  TableScan [TS_9] (rows=84 width=1850)
                                                    default@web_site,web_site,Tbl:COMPLETE,Col:NONE,Output:["web_site_sk","web_company_name"]
                                          <-Reducer 3 [SIMPLE_EDGE]
                                            SHUFFLE [RS_18]
                                              PartitionCols:_col2
                                              Merge Join Operator [MERGEJOIN_125] (rows=174243235 width=135)
                                                Conds:RS_15._col1=RS_139._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col6"]
                                              <-Map 12 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_139]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_138] (rows=20000000 width=1014)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_137] (rows=20000000 width=1014)
                                                      predicate:((ca_state = 'TX') and ca_address_sk is not null)
                                                      TableScan [TS_6] (rows=40000000 width=1014)
                                                        default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_state"]
                                              <-Reducer 2 [SIMPLE_EDGE]
                                                SHUFFLE [RS_15]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_124] (rows=158402938 width=135)
                                                    Conds:RS_155._col0=RS_131._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_131]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_130] (rows=8116 width=1119)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_129] (rows=8116 width=1119)
                                                          predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1999-05-01 00:00:00' AND TIMESTAMP'1999-06-30 00:00:00' and d_date_sk is not null)
                                                          TableScan [TS_3] (rows=73049 width=1119)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date"]
                                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_155]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_154] (rows=144002668 width=135)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                        Filter Operator [FIL_153] (rows=144002668 width=135)
                                                          predicate:((ws_ship_addr_sk BETWEEN DynamicValue(RS_16_customer_address_ca_address_sk_min) AND DynamicValue(RS_16_customer_address_ca_address_sk_max) and in_bloom_filter(ws_ship_addr_sk, DynamicValue(RS_16_customer_address_ca_address_sk_bloom_filter))) and (ws_ship_date_sk BETWEEN DynamicValue(RS_13_date_dim_d_date_sk_min) AND DynamicValue(RS_13_date_dim_d_date_sk_max) and in_bloom_filter(ws_ship_date_sk, DynamicValue(RS_13_date_dim_d_date_sk_bloom_filter))) and (ws_web_site_sk BETWEEN DynamicValue(RS_19_web_site_web_site_sk_min) AND DynamicValue(RS_19_web_site_web_site_sk_max) and in_bloom_filter(ws_web_site_sk, DynamicValue(RS_19_web_site_web_site_sk_bloom_filter))) and ws_order_number is not null and ws_ship_addr_sk is not null and ws_ship_date_sk is not null and ws_web_site_sk is not null)
                                                          TableScan [TS_0] (rows=144002668 width=135)
                                                            default@web_sales,ws1,Tbl:COMPLETE,Col:NONE,Output:["ws_ship_date_sk","ws_ship_addr_sk","ws_web_site_sk","ws_warehouse_sk","ws_order_number","ws_ext_ship_cost","ws_net_profit"]
                                                          <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_136]
                                                              Group By Operator [GBY_135] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_134]
                                                                  Group By Operator [GBY_133] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_132] (rows=8116 width=1119)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_130]
                                                          <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_144]
                                                              Group By Operator [GBY_143] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=20000000)"]
                                                              <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_142]
                                                                  Group By Operator [GBY_141] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=20000000)"]
                                                                    Select Operator [SEL_140] (rows=20000000 width=1014)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_138]
                                                          <-Reducer 15 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_152]
                                                              Group By Operator [GBY_151] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 14 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_150]
                                                                  Group By Operator [GBY_149] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_148] (rows=42 width=1850)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_146]

