Warning: Shuffle Join MERGEJOIN[263][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 5' is a cross product
PREHOOK: query: explain cbo
select  promotions,total,cast(promotions as decimal(15,4))/cast(total as decimal(15,4))*100
from
  (select sum(ss_ext_sales_price) promotions
   from  store_sales
        ,store
        ,promotion
        ,date_dim
        ,customer
        ,customer_address 
        ,item
   where ss_sold_date_sk = d_date_sk
   and   ss_store_sk = s_store_sk
   and   ss_promo_sk = p_promo_sk
   and   ss_customer_sk= c_customer_sk
   and   ca_address_sk = c_current_addr_sk
   and   ss_item_sk = i_item_sk 
   and   ca_gmt_offset = -7
   and   i_category = 'Electronics'
   and   (p_channel_dmail = 'Y' or p_channel_email = 'Y' or p_channel_tv = 'Y')
   and   s_gmt_offset = -7
   and   d_year = 1999
   and   d_moy  = 11) promotional_sales,
  (select sum(ss_ext_sales_price) total
   from  store_sales
        ,store
        ,date_dim
        ,customer
        ,customer_address
        ,item
   where ss_sold_date_sk = d_date_sk
   and   ss_store_sk = s_store_sk
   and   ss_customer_sk= c_customer_sk
   and   ca_address_sk = c_current_addr_sk
   and   ss_item_sk = i_item_sk
   and   ca_gmt_offset = -7
   and   i_category = 'Electronics'
   and   s_gmt_offset = -7
   and   d_year = 1999
   and   d_moy  = 11) all_sales
order by promotions, total
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain cbo
select  promotions,total,cast(promotions as decimal(15,4))/cast(total as decimal(15,4))*100
from
  (select sum(ss_ext_sales_price) promotions
   from  store_sales
        ,store
        ,promotion
        ,date_dim
        ,customer
        ,customer_address 
        ,item
   where ss_sold_date_sk = d_date_sk
   and   ss_store_sk = s_store_sk
   and   ss_promo_sk = p_promo_sk
   and   ss_customer_sk= c_customer_sk
   and   ca_address_sk = c_current_addr_sk
   and   ss_item_sk = i_item_sk 
   and   ca_gmt_offset = -7
   and   i_category = 'Electronics'
   and   (p_channel_dmail = 'Y' or p_channel_email = 'Y' or p_channel_tv = 'Y')
   and   s_gmt_offset = -7
   and   d_year = 1999
   and   d_moy  = 11) promotional_sales,
  (select sum(ss_ext_sales_price) total
   from  store_sales
        ,store
        ,date_dim
        ,customer
        ,customer_address
        ,item
   where ss_sold_date_sk = d_date_sk
   and   ss_store_sk = s_store_sk
   and   ss_customer_sk= c_customer_sk
   and   ca_address_sk = c_current_addr_sk
   and   ss_item_sk = i_item_sk
   and   ca_gmt_offset = -7
   and   i_category = 'Electronics'
   and   s_gmt_offset = -7
   and   d_year = 1999
   and   d_moy  = 11) all_sales
order by promotions, total
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
CBO PLAN:
HiveProject(promotions=[$0], total=[$1], _o__c2=[*(/(CAST($0):DECIMAL(15, 4), CAST($1):DECIMAL(15, 4)), 100:DECIMAL(10, 0))])
  HiveJoin(condition=[true], joinType=[inner], algorithm=[none], cost=[not available])
    HiveProject($f0=[$0])
      HiveAggregate(group=[{}], agg#0=[sum($8)])
        HiveJoin(condition=[=($5, $0)], joinType=[inner], algorithm=[none], cost=[not available])
          HiveJoin(condition=[=($2, $1)], joinType=[inner], algorithm=[none], cost=[not available])
            HiveProject(c_customer_sk=[$0], c_current_addr_sk=[$4])
              HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($4))])
                HiveTableScan(table=[[default, customer]], table:alias=[customer])
            HiveProject(ca_address_sk=[$0])
              HiveFilter(condition=[AND(=($11, -7:DECIMAL(1, 0)), IS NOT NULL($0))])
                HiveTableScan(table=[[default, customer_address]], table:alias=[customer_address])
          HiveProject(ss_sold_date_sk=[$0], ss_item_sk=[$1], ss_customer_sk=[$2], ss_store_sk=[$3], ss_promo_sk=[$4], ss_ext_sales_price=[$5], d_date_sk=[$6], i_item_sk=[$7], s_store_sk=[$8], p_promo_sk=[$9])
            HiveJoin(condition=[=($4, $9)], joinType=[inner], algorithm=[none], cost=[not available])
              HiveJoin(condition=[=($3, $8)], joinType=[inner], algorithm=[none], cost=[not available])
                HiveJoin(condition=[=($1, $7)], joinType=[inner], algorithm=[none], cost=[not available])
                  HiveJoin(condition=[=($0, $6)], joinType=[inner], algorithm=[none], cost=[not available])
                    HiveProject(ss_sold_date_sk=[$0], ss_item_sk=[$2], ss_customer_sk=[$3], ss_store_sk=[$7], ss_promo_sk=[$8], ss_ext_sales_price=[$15])
                      HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($8), IS NOT NULL($3), IS NOT NULL($7), IS NOT NULL($2))])
                        HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
                    HiveProject(d_date_sk=[$0])
                      HiveFilter(condition=[AND(=($6, 1999), =($8, 11), IS NOT NULL($0))])
                        HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
                  HiveProject(i_item_sk=[$0])
                    HiveFilter(condition=[AND(=($12, _UTF-16LE'Electronics'), IS NOT NULL($0))])
                      HiveTableScan(table=[[default, item]], table:alias=[item])
                HiveProject(s_store_sk=[$0])
                  HiveFilter(condition=[AND(=($27, -7:DECIMAL(1, 0)), IS NOT NULL($0))])
                    HiveTableScan(table=[[default, store]], table:alias=[store])
              HiveProject(p_promo_sk=[$0])
                HiveFilter(condition=[AND(OR(=($8, _UTF-16LE'Y'), =($9, _UTF-16LE'Y'), =($11, _UTF-16LE'Y')), IS NOT NULL($0))])
                  HiveTableScan(table=[[default, promotion]], table:alias=[promotion])
    HiveProject($f0=[$0])
      HiveAggregate(group=[{}], agg#0=[sum($7)])
        HiveJoin(condition=[=($5, $0)], joinType=[inner], algorithm=[none], cost=[not available])
          HiveJoin(condition=[=($2, $1)], joinType=[inner], algorithm=[none], cost=[not available])
            HiveProject(c_customer_sk=[$0], c_current_addr_sk=[$4])
              HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($4))])
                HiveTableScan(table=[[default, customer]], table:alias=[customer])
            HiveProject(ca_address_sk=[$0])
              HiveFilter(condition=[AND(=($11, -7:DECIMAL(1, 0)), IS NOT NULL($0))])
                HiveTableScan(table=[[default, customer_address]], table:alias=[customer_address])
          HiveProject(ss_sold_date_sk=[$0], ss_item_sk=[$1], ss_customer_sk=[$2], ss_store_sk=[$3], ss_ext_sales_price=[$4], d_date_sk=[$5], i_item_sk=[$6], s_store_sk=[$7])
            HiveJoin(condition=[=($3, $7)], joinType=[inner], algorithm=[none], cost=[not available])
              HiveJoin(condition=[=($1, $6)], joinType=[inner], algorithm=[none], cost=[not available])
                HiveJoin(condition=[=($0, $5)], joinType=[inner], algorithm=[none], cost=[not available])
                  HiveProject(ss_sold_date_sk=[$0], ss_item_sk=[$2], ss_customer_sk=[$3], ss_store_sk=[$7], ss_ext_sales_price=[$15])
                    HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($3), IS NOT NULL($7), IS NOT NULL($2))])
                      HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
                  HiveProject(d_date_sk=[$0])
                    HiveFilter(condition=[AND(=($6, 1999), =($8, 11), IS NOT NULL($0))])
                      HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
                HiveProject(i_item_sk=[$0])
                  HiveFilter(condition=[AND(=($12, _UTF-16LE'Electronics'), IS NOT NULL($0))])
                    HiveTableScan(table=[[default, item]], table:alias=[item])
              HiveProject(s_store_sk=[$0])
                HiveFilter(condition=[AND(=($27, -7:DECIMAL(1, 0)), IS NOT NULL($0))])
                  HiveTableScan(table=[[default, store]], table:alias=[store])

