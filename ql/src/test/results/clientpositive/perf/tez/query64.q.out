PREHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@income_band
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@income_band
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 38 <- Reducer 25 (BROADCAST_EDGE)
Map 44 <- Reducer 41 (BROADCAST_EDGE)
Map 54 <- Reducer 33 (BROADCAST_EDGE)
Map 55 <- Reducer 43 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 32 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 14 <- Map 53 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 36 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Reducer 39 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE), Reducer 46 (ONE_TO_ONE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 20 <- Map 50 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Map 34 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 51 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 37 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Map 52 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Map 17 (SIMPLE_EDGE), Reducer 42 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (SIMPLE_EDGE), Reducer 49 (ONE_TO_ONE_EDGE)
Reducer 28 <- Map 50 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Map 34 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 3 <- Map 17 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 51 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Map 37 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE)
Reducer 32 <- Map 52 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 33 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 35 <- Map 34 (SIMPLE_EDGE), Map 36 (SIMPLE_EDGE)
Reducer 39 <- Map 38 (SIMPLE_EDGE), Map 40 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 35 (SIMPLE_EDGE)
Reducer 41 <- Map 40 (CUSTOM_SIMPLE_EDGE)
Reducer 42 <- Map 40 (SIMPLE_EDGE), Map 54 (SIMPLE_EDGE)
Reducer 43 <- Map 40 (CUSTOM_SIMPLE_EDGE)
Reducer 45 <- Map 44 (SIMPLE_EDGE), Map 47 (SIMPLE_EDGE)
Reducer 46 <- Reducer 45 (SIMPLE_EDGE)
Reducer 48 <- Map 47 (SIMPLE_EDGE), Map 55 (SIMPLE_EDGE)
Reducer 49 <- Reducer 48 (SIMPLE_EDGE)
Reducer 5 <- Map 37 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 53 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 24 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 53 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 36 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 12 vectorized
      File Output Operator [FS_1208]
        Select Operator [SEL_1207] (rows=98871277768 width=1702)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20"]
        <-Reducer 11 [SIMPLE_EDGE]
          SHUFFLE [RS_255]
            Select Operator [SEL_254] (rows=98871277768 width=1694)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18"]
              Filter Operator [FIL_253] (rows=98871277768 width=1694)
                predicate:(_col19 <= _col12)
                Merge Join Operator [MERGEJOIN_1107] (rows=296613833305 width=1694)
                  Conds:RS_1189._col2, _col1, _col3=RS_1206._col1, _col0, _col2(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col19","_col20","_col21","_col22"]
                <-Reducer 10 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_1189]
                    PartitionCols:_col2, _col1, _col3
                    Select Operator [SEL_1188] (rows=20709988 width=1354)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                      Group By Operator [GBY_1187] (rows=20709988 width=1362)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                      <-Reducer 9 [SIMPLE_EDGE]
                        SHUFFLE [RS_122]
                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                          Group By Operator [GBY_121] (rows=20709988 width=1362)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col42)","sum(_col43)","sum(_col44)"],keys:_col28, _col45, _col29, _col7, _col9, _col14, _col15, _col16, _col17, _col23, _col24, _col25, _col26, _col46
                            Merge Join Operator [MERGEJOIN_1088] (rows=21002852 width=1122)
                              Conds:RS_117._col31=RS_1135._col0(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col23","_col24","_col25","_col26","_col28","_col29","_col42","_col43","_col44","_col45","_col46"]
                            <-Map 36 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_1135]
                                PartitionCols:_col0
                                Select Operator [SEL_1133] (rows=20 width=4)
                                  Output:["_col0"]
                                  Filter Operator [FIL_1132] (rows=20 width=4)
                                    predicate:ib_income_band_sk is not null
                                    TableScan [TS_12] (rows=20 width=4)
                                      default@income_band,ib2,Tbl:COMPLETE,Col:COMPLETE,Output:["ib_income_band_sk"]
                            <-Reducer 8 [SIMPLE_EDGE]
                              SHUFFLE [RS_117]
                                PartitionCols:_col31
                                Filter Operator [FIL_116] (rows=21002852 width=1296)
                                  predicate:(_col50 <> _col19)
                                  Merge Join Operator [MERGEJOIN_1087] (rows=21002852 width=1296)
                                    Conds:RS_113._col36=RS_1144._col0(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col23","_col24","_col25","_col26","_col28","_col29","_col31","_col42","_col43","_col44","_col45","_col46","_col50"]
                                  <-Map 53 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_1144]
                                      PartitionCols:_col0
                                      Select Operator [SEL_1143] (rows=1861800 width=89)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_1142] (rows=1861800 width=89)
                                          predicate:cd_demo_sk is not null
                                          TableScan [TS_89] (rows=1861800 width=89)
                                            default@customer_demographics,cd1,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status"]
                                  <-Reducer 7 [SIMPLE_EDGE]
                                    SHUFFLE [RS_113]
                                      PartitionCols:_col36
                                      Merge Join Operator [MERGEJOIN_1086] (rows=20709988 width=1209)
                                        Conds:RS_110._col0=RS_111._col15(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col23","_col24","_col25","_col26","_col28","_col29","_col31","_col36","_col42","_col43","_col44","_col45","_col46"]
                                      <-Reducer 6 [SIMPLE_EDGE]
                                        SHUFFLE [RS_110]
                                          PartitionCols:_col0
                                          Merge Join Operator [MERGEJOIN_1076] (rows=70357394 width=458)
                                            Conds:RS_107._col1=RS_1145._col0(Inner),Output:["_col0","_col7","_col9","_col14","_col15","_col16","_col17","_col19"]
                                          <-Map 53 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1145]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_1143]
                                          <-Reducer 5 [SIMPLE_EDGE]
                                            SHUFFLE [RS_107]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_1075] (rows=69376329 width=376)
                                                Conds:RS_104._col3=RS_1139._col0(Inner),Output:["_col0","_col1","_col7","_col9","_col14","_col15","_col16","_col17"]
                                              <-Map 37 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1139]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1138] (rows=40000000 width=365)
                                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                                    Filter Operator [FIL_1137] (rows=40000000 width=365)
                                                      predicate:ca_address_sk is not null
                                                      TableScan [TS_19] (rows=40000000 width=365)
                                                        default@customer_address,ad2,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_street_number","ca_street_name","ca_city","ca_zip"]
                                              <-Reducer 4 [SIMPLE_EDGE]
                                                SHUFFLE [RS_104]
                                                  PartitionCols:_col3
                                                  Merge Join Operator [MERGEJOIN_1074] (rows=69376329 width=19)
                                                    Conds:RS_101._col2=RS_102._col0(Inner),Output:["_col0","_col1","_col3","_col7","_col9"]
                                                  <-Reducer 3 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_101]
                                                      PartitionCols:_col2
                                                      Merge Join Operator [MERGEJOIN_1072] (rows=69376329 width=23)
                                                        Conds:RS_98._col4=RS_1118._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col7","_col9"]
                                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_1118]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1114] (rows=73049 width=8)
                                                            Output:["_col0","_col1"]
                                                            Filter Operator [FIL_1111] (rows=73049 width=8)
                                                              predicate:d_date_sk is not null
                                                              TableScan [TS_3] (rows=73049 width=8)
                                                                default@date_dim,d2,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                      <-Reducer 2 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_98]
                                                          PartitionCols:_col4
                                                          Merge Join Operator [MERGEJOIN_1071] (rows=69376329 width=23)
                                                            Conds:RS_1110._col5=RS_1117._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col7"]
                                                          <-Map 17 [SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_1117]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1114]
                                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1110]
                                                              PartitionCols:_col5
                                                              Select Operator [SEL_1109] (rows=69376329 width=23)
                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                Filter Operator [FIL_1108] (rows=69376329 width=23)
                                                                  predicate:(c_current_addr_sk is not null and c_current_cdemo_sk is not null and c_current_hdemo_sk is not null and c_customer_sk is not null and c_first_sales_date_sk is not null and c_first_shipto_date_sk is not null)
                                                                  TableScan [TS_0] (rows=80000000 width=23)
                                                                    default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk","c_first_shipto_date_sk","c_first_sales_date_sk"]
                                                  <-Reducer 35 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_102]
                                                      PartitionCols:_col0
                                                      Merge Join Operator [MERGEJOIN_1073] (rows=7200 width=4)
                                                        Conds:RS_1129._col1=RS_1134._col0(Inner),Output:["_col0"]
                                                      <-Map 34 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1129]
                                                          PartitionCols:_col1
                                                          Select Operator [SEL_1128] (rows=7200 width=8)
                                                            Output:["_col0","_col1"]
                                                            Filter Operator [FIL_1127] (rows=7200 width=8)
                                                              predicate:(hd_demo_sk is not null and hd_income_band_sk is not null)
                                                              TableScan [TS_9] (rows=7200 width=8)
                                                                default@household_demographics,hd2,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_income_band_sk"]
                                                      <-Map 36 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1134]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1133]
                                      <-Reducer 24 [SIMPLE_EDGE]
                                        SHUFFLE [RS_111]
                                          PartitionCols:_col15
                                          Select Operator [SEL_88] (rows=23881330 width=788)
                                            Output:["_col3","_col4","_col5","_col6","_col8","_col9","_col11","_col15","_col16","_col22","_col23","_col24","_col25","_col26"]
                                            Merge Join Operator [MERGEJOIN_1085] (rows=23881330 width=788)
                                              Conds:RS_85._col1, _col8=RS_1185._col0, _col1(Inner),Output:["_col2","_col3","_col9","_col10","_col11","_col12","_col13","_col18","_col20","_col21","_col23","_col24","_col25","_col26"]
                                            <-Map 52 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1185]
                                                PartitionCols:_col0, _col1
                                                Select Operator [SEL_1184] (rows=57591150 width=8)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_1183] (rows=57591150 width=8)
                                                    predicate:(sr_item_sk is not null and sr_ticket_number is not null)
                                                    TableScan [TS_61] (rows=57591150 width=8)
                                                      default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
                                            <-Reducer 23 [SIMPLE_EDGE]
                                              SHUFFLE [RS_85]
                                                PartitionCols:_col1, _col8
                                                Merge Join Operator [MERGEJOIN_1084] (rows=14484878 width=661)
                                                  Conds:RS_82._col5=RS_1140._col0(Inner),Output:["_col1","_col2","_col3","_col8","_col9","_col10","_col11","_col12","_col13","_col18","_col20","_col21","_col23","_col24","_col25","_col26"]
                                                <-Map 37 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1140]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1138]
                                                <-Reducer 22 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_82]
                                                    PartitionCols:_col5
                                                    Merge Join Operator [MERGEJOIN_1083] (rows=14484878 width=300)
                                                      Conds:RS_79._col6=RS_1181._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col8","_col9","_col10","_col11","_col12","_col13","_col18","_col20","_col21"]
                                                    <-Map 51 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1181]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1180] (rows=1704 width=181)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1179] (rows=1704 width=181)
                                                            predicate:(s_store_name is not null and s_store_sk is not null and s_zip is not null)
                                                            TableScan [TS_55] (rows=1704 width=181)
                                                              default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_zip"]
                                                    <-Reducer 21 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_79]
                                                        PartitionCols:_col6
                                                        Merge Join Operator [MERGEJOIN_1082] (rows=14484878 width=123)
                                                          Conds:RS_76._col4=RS_1130._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col13","_col18"]
                                                        <-Map 34 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1130]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1128]
                                                        <-Reducer 20 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_76]
                                                            PartitionCols:_col4
                                                            Merge Join Operator [MERGEJOIN_1081] (rows=14484878 width=119)
                                                              Conds:RS_73._col7=RS_1177._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                            <-Map 50 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_1177]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_1176] (rows=2300 width=4)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_1175] (rows=2300 width=4)
                                                                    predicate:p_promo_sk is not null
                                                                    TableScan [TS_49] (rows=2300 width=4)
                                                                      default@promotion,promotion,Tbl:COMPLETE,Col:COMPLETE,Output:["p_promo_sk"]
                                                            <-Reducer 19 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_73]
                                                                PartitionCols:_col7
                                                                Merge Join Operator [MERGEJOIN_1080] (rows=14484878 width=119)
                                                                  Conds:RS_70._col1=RS_1174._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                                <-Reducer 18 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_70]
                                                                    PartitionCols:_col1
                                                                    Merge Join Operator [MERGEJOIN_1078] (rows=14484878 width=119)
                                                                      Conds:RS_67._col0=RS_1119._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                                    <-Map 17 [SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_1119]
                                                                        PartitionCols:_col0
                                                                        Select Operator [SEL_1115] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                          Filter Operator [FIL_1112] (rows=652 width=8)
                                                                            predicate:((d_year = 2000) and d_date_sk is not null)
                                                                             Please refer to the previous TableScan [TS_3]
                                                                    <-Reducer 39 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_67]
                                                                        PartitionCols:_col0
                                                                        Merge Join Operator [MERGEJOIN_1077] (rows=40567099 width=314)
                                                                          Conds:RS_1151._col1=RS_1154._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                                        <-Map 40 [SIMPLE_EDGE] vectorized
                                                                          PARTITION_ONLY_SHUFFLE [RS_1154]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1153] (rows=4666 width=111)
                                                                              Output:["_col0","_col1"]
                                                                              Filter Operator [FIL_1152] (rows=4666 width=311)
                                                                                predicate:((i_color) IN ('maroon', 'burnished', 'dim', 'steel', 'navajo', 'chocolate') and i_current_price BETWEEN 36 AND 45 and i_item_sk is not null)
                                                                                TableScan [TS_28] (rows=462000 width=311)
                                                                                  default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_color","i_product_name"]
                                                                        <-Map 38 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1151]
                                                                            PartitionCols:_col1
                                                                            Select Operator [SEL_1150] (rows=417313408 width=355)
                                                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                                              Filter Operator [FIL_1149] (rows=417313408 width=355)
                                                                                predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_68_d1_d_date_sk_min) AND DynamicValue(RS_68_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_68_d1_d_date_sk_bloom_filter))) and ss_addr_sk is not null and ss_cdemo_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_item_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                                                                TableScan [TS_25] (rows=575995635 width=355)
                                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                                <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1148]
                                                                                    Group By Operator [GBY_1147] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                    <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      PARTITION_ONLY_SHUFFLE [RS_1125]
                                                                                        Group By Operator [GBY_1123] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                          Select Operator [SEL_1120] (rows=652 width=4)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_1115]
                                                                <-Reducer 46 [ONE_TO_ONE_EDGE] vectorized
                                                                  FORWARD [RS_1174]
                                                                    PartitionCols:_col0
                                                                    Select Operator [SEL_1173] (rows=13257 width=4)
                                                                      Output:["_col0"]
                                                                      Filter Operator [FIL_1172] (rows=13257 width=228)
                                                                        predicate:(_col1 > (2 * _col2))
                                                                        Group By Operator [GBY_1171] (rows=39773 width=228)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                                        <-Reducer 45 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_45]
                                                                            PartitionCols:_col0
                                                                            Group By Operator [GBY_44] (rows=6482999 width=228)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col5)"],keys:_col0
                                                                              Merge Join Operator [MERGEJOIN_1079] (rows=183085709 width=227)
                                                                                Conds:RS_1166._col0, _col1=RS_1169._col0, _col1(Inner),Output:["_col0","_col2","_col5"]
                                                                              <-Map 47 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1169]
                                                                                  PartitionCols:_col0, _col1
                                                                                  Select Operator [SEL_1168] (rows=28798881 width=120)
                                                                                    Output:["_col0","_col1","_col2"]
                                                                                    Filter Operator [FIL_1167] (rows=28798881 width=337)
                                                                                      predicate:(cr_item_sk is not null and cr_order_number is not null)
                                                                                      TableScan [TS_37] (rows=28798881 width=337)
                                                                                        default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_refunded_cash","cr_reversed_charge","cr_store_credit"]
                                                                              <-Map 44 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1166]
                                                                                  PartitionCols:_col0, _col1
                                                                                  Select Operator [SEL_1165] (rows=287989836 width=119)
                                                                                    Output:["_col0","_col1","_col2"]
                                                                                    Filter Operator [FIL_1164] (rows=287989836 width=119)
                                                                                      predicate:((cs_item_sk BETWEEN DynamicValue(RS_65_item_i_item_sk_min) AND DynamicValue(RS_65_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_65_item_i_item_sk_bloom_filter))) and cs_item_sk is not null and cs_order_number is not null)
                                                                                      TableScan [TS_34] (rows=287989836 width=119)
                                                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                                      <-Reducer 41 [BROADCAST_EDGE] vectorized
                                                                                        BROADCAST [RS_1163]
                                                                                          Group By Operator [GBY_1162] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                          <-Map 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                            PARTITION_ONLY_SHUFFLE [RS_1160]
                                                                                              Group By Operator [GBY_1158] (rows=1 width=12)
                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                Select Operator [SEL_1155] (rows=4666 width=4)
                                                                                                  Output:["_col0"]
                                                                                                   Please refer to the previous Select Operator [SEL_1153]
                <-Reducer 16 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_1206]
                    PartitionCols:_col1, _col0, _col2
                    Select Operator [SEL_1205] (rows=20709988 width=525)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                      Group By Operator [GBY_1204] (rows=20709988 width=1362)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                      <-Reducer 15 [SIMPLE_EDGE]
                        SHUFFLE [RS_247]
                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                          Group By Operator [GBY_246] (rows=20709988 width=1362)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col42)","sum(_col43)","sum(_col44)"],keys:_col28, _col45, _col29, _col7, _col9, _col14, _col15, _col16, _col17, _col23, _col24, _col25, _col26, _col46
                            Merge Join Operator [MERGEJOIN_1106] (rows=21002852 width=1122)
                              Conds:RS_242._col31=RS_1136._col0(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col23","_col24","_col25","_col26","_col28","_col29","_col42","_col43","_col44","_col45","_col46"]
                            <-Map 36 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_1136]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_1133]
                            <-Reducer 14 [SIMPLE_EDGE]
                              SHUFFLE [RS_242]
                                PartitionCols:_col31
                                Filter Operator [FIL_241] (rows=21002852 width=1296)
                                  predicate:(_col50 <> _col19)
                                  Merge Join Operator [MERGEJOIN_1105] (rows=21002852 width=1296)
                                    Conds:RS_238._col36=RS_1146._col0(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col23","_col24","_col25","_col26","_col28","_col29","_col31","_col42","_col43","_col44","_col45","_col46","_col50"]
                                  <-Map 53 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_1146]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_1143]
                                  <-Reducer 13 [SIMPLE_EDGE]
                                    SHUFFLE [RS_238]
                                      PartitionCols:_col36
                                      Merge Join Operator [MERGEJOIN_1104] (rows=20709988 width=1209)
                                        Conds:RS_235._col0=RS_236._col15(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col23","_col24","_col25","_col26","_col28","_col29","_col31","_col36","_col42","_col43","_col44","_col45","_col46"]
                                      <-Reducer 6 [SIMPLE_EDGE]
                                        SHUFFLE [RS_235]
                                          PartitionCols:_col0
                                           Please refer to the previous Merge Join Operator [MERGEJOIN_1076]
                                      <-Reducer 32 [SIMPLE_EDGE]
                                        SHUFFLE [RS_236]
                                          PartitionCols:_col15
                                          Select Operator [SEL_213] (rows=23881330 width=788)
                                            Output:["_col3","_col4","_col5","_col6","_col8","_col9","_col11","_col15","_col16","_col22","_col23","_col24","_col25","_col26"]
                                            Merge Join Operator [MERGEJOIN_1103] (rows=23881330 width=788)
                                              Conds:RS_210._col1, _col8=RS_1186._col0, _col1(Inner),Output:["_col2","_col3","_col9","_col10","_col11","_col12","_col13","_col18","_col20","_col21","_col23","_col24","_col25","_col26"]
                                            <-Map 52 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1186]
                                                PartitionCols:_col0, _col1
                                                 Please refer to the previous Select Operator [SEL_1184]
                                            <-Reducer 31 [SIMPLE_EDGE]
                                              SHUFFLE [RS_210]
                                                PartitionCols:_col1, _col8
                                                Merge Join Operator [MERGEJOIN_1102] (rows=14484878 width=661)
                                                  Conds:RS_207._col5=RS_1141._col0(Inner),Output:["_col1","_col2","_col3","_col8","_col9","_col10","_col11","_col12","_col13","_col18","_col20","_col21","_col23","_col24","_col25","_col26"]
                                                <-Map 37 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1141]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1138]
                                                <-Reducer 30 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_207]
                                                    PartitionCols:_col5
                                                    Merge Join Operator [MERGEJOIN_1101] (rows=14484878 width=300)
                                                      Conds:RS_204._col6=RS_1182._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col8","_col9","_col10","_col11","_col12","_col13","_col18","_col20","_col21"]
                                                    <-Map 51 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1182]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1180]
                                                    <-Reducer 29 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_204]
                                                        PartitionCols:_col6
                                                        Merge Join Operator [MERGEJOIN_1100] (rows=14484878 width=123)
                                                          Conds:RS_201._col4=RS_1131._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col13","_col18"]
                                                        <-Map 34 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1131]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1128]
                                                        <-Reducer 28 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_201]
                                                            PartitionCols:_col4
                                                            Merge Join Operator [MERGEJOIN_1099] (rows=14484878 width=119)
                                                              Conds:RS_198._col7=RS_1178._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                            <-Map 50 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_1178]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Select Operator [SEL_1176]
                                                            <-Reducer 27 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_198]
                                                                PartitionCols:_col7
                                                                Merge Join Operator [MERGEJOIN_1098] (rows=14484878 width=119)
                                                                  Conds:RS_195._col1=RS_1203._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                                <-Reducer 26 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_195]
                                                                    PartitionCols:_col1
                                                                    Merge Join Operator [MERGEJOIN_1096] (rows=14484878 width=119)
                                                                      Conds:RS_192._col0=RS_1121._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                                    <-Map 17 [SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_1121]
                                                                        PartitionCols:_col0
                                                                        Select Operator [SEL_1116] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                          Filter Operator [FIL_1113] (rows=652 width=8)
                                                                            predicate:((d_year = 2001) and d_date_sk is not null)
                                                                             Please refer to the previous TableScan [TS_3]
                                                                    <-Reducer 42 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_192]
                                                                        PartitionCols:_col0
                                                                        Merge Join Operator [MERGEJOIN_1095] (rows=40567099 width=314)
                                                                          Conds:RS_1194._col1=RS_1156._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                                        <-Map 40 [SIMPLE_EDGE] vectorized
                                                                          PARTITION_ONLY_SHUFFLE [RS_1156]
                                                                            PartitionCols:_col0
                                                                             Please refer to the previous Select Operator [SEL_1153]
                                                                        <-Map 54 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1194]
                                                                            PartitionCols:_col1
                                                                            Select Operator [SEL_1193] (rows=417313408 width=355)
                                                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                                              Filter Operator [FIL_1192] (rows=417313408 width=355)
                                                                                predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_193_d1_d_date_sk_min) AND DynamicValue(RS_193_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_193_d1_d_date_sk_bloom_filter))) and ss_addr_sk is not null and ss_cdemo_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_item_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                                                                TableScan [TS_150] (rows=575995635 width=355)
                                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                                <-Reducer 33 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1191]
                                                                                    Group By Operator [GBY_1190] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                    <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      PARTITION_ONLY_SHUFFLE [RS_1126]
                                                                                        Group By Operator [GBY_1124] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                          Select Operator [SEL_1122] (rows=652 width=4)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_1116]
                                                                <-Reducer 49 [ONE_TO_ONE_EDGE] vectorized
                                                                  FORWARD [RS_1203]
                                                                    PartitionCols:_col0
                                                                    Select Operator [SEL_1202] (rows=13257 width=4)
                                                                      Output:["_col0"]
                                                                      Filter Operator [FIL_1201] (rows=13257 width=228)
                                                                        predicate:(_col1 > (2 * _col2))
                                                                        Group By Operator [GBY_1200] (rows=39773 width=228)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                                        <-Reducer 48 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_170]
                                                                            PartitionCols:_col0
                                                                            Group By Operator [GBY_169] (rows=6482999 width=228)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col5)"],keys:_col0
                                                                              Merge Join Operator [MERGEJOIN_1097] (rows=183085709 width=227)
                                                                                Conds:RS_1199._col0, _col1=RS_1170._col0, _col1(Inner),Output:["_col0","_col2","_col5"]
                                                                              <-Map 47 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1170]
                                                                                  PartitionCols:_col0, _col1
                                                                                   Please refer to the previous Select Operator [SEL_1168]
                                                                              <-Map 55 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1199]
                                                                                  PartitionCols:_col0, _col1
                                                                                  Select Operator [SEL_1198] (rows=287989836 width=119)
                                                                                    Output:["_col0","_col1","_col2"]
                                                                                    Filter Operator [FIL_1197] (rows=287989836 width=119)
                                                                                      predicate:((cs_item_sk BETWEEN DynamicValue(RS_190_item_i_item_sk_min) AND DynamicValue(RS_190_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_190_item_i_item_sk_bloom_filter))) and cs_item_sk is not null and cs_order_number is not null)
                                                                                      TableScan [TS_159] (rows=287989836 width=119)
                                                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                                      <-Reducer 43 [BROADCAST_EDGE] vectorized
                                                                                        BROADCAST [RS_1196]
                                                                                          Group By Operator [GBY_1195] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                          <-Map 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                            PARTITION_ONLY_SHUFFLE [RS_1161]
                                                                                              Group By Operator [GBY_1159] (rows=1 width=12)
                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                Select Operator [SEL_1157] (rows=4666 width=4)
                                                                                                  Output:["_col0"]
                                                                                                   Please refer to the previous Select Operator [SEL_1153]

