PREHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
PREHOOK: type: QUERY
POSTHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 40 <- Reducer 23 (BROADCAST_EDGE), Reducer 34 (BROADCAST_EDGE), Reducer 38 (BROADCAST_EDGE), Reducer 43 (BROADCAST_EDGE), Reducer 47 (BROADCAST_EDGE), Reducer 52 (BROADCAST_EDGE), Reducer 62 (BROADCAST_EDGE), Reducer 65 (BROADCAST_EDGE), Reducer 66 (BROADCAST_EDGE), Reducer 70 (BROADCAST_EDGE)
Map 49 <- Reducer 43 (BROADCAST_EDGE), Reducer 54 (BROADCAST_EDGE), Reducer 55 (BROADCAST_EDGE), Reducer 65 (BROADCAST_EDGE)
Map 72 <- Reducer 31 (BROADCAST_EDGE), Reducer 35 (BROADCAST_EDGE), Reducer 39 (BROADCAST_EDGE), Reducer 43 (BROADCAST_EDGE), Reducer 45 (BROADCAST_EDGE), Reducer 48 (BROADCAST_EDGE), Reducer 58 (BROADCAST_EDGE), Reducer 63 (BROADCAST_EDGE), Reducer 67 (BROADCAST_EDGE), Reducer 68 (BROADCAST_EDGE), Reducer 71 (BROADCAST_EDGE)
Map 73 <- Reducer 45 (BROADCAST_EDGE), Reducer 59 (BROADCAST_EDGE), Reducer 60 (BROADCAST_EDGE), Reducer 67 (BROADCAST_EDGE)
Reducer 10 <- Reducer 14 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 30 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 13 <- Map 69 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE), Reducer 41 (SIMPLE_EDGE)
Reducer 17 <- Map 46 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE), Reducer 51 (ONE_TO_ONE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 20 <- Map 61 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Map 37 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 64 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 15 (SIMPLE_EDGE), Reducer 44 (SIMPLE_EDGE)
Reducer 25 <- Map 46 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (SIMPLE_EDGE), Reducer 57 (ONE_TO_ONE_EDGE)
Reducer 28 <- Map 61 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Map 37 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 3 <- Map 15 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 64 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 32 (SIMPLE_EDGE), Map 36 (SIMPLE_EDGE)
Reducer 34 <- Reducer 33 (CUSTOM_SIMPLE_EDGE)
Reducer 35 <- Reducer 33 (CUSTOM_SIMPLE_EDGE)
Reducer 38 <- Map 37 (CUSTOM_SIMPLE_EDGE)
Reducer 39 <- Map 37 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 41 <- Map 40 (SIMPLE_EDGE), Map 42 (SIMPLE_EDGE)
Reducer 43 <- Map 42 (CUSTOM_SIMPLE_EDGE)
Reducer 44 <- Map 42 (SIMPLE_EDGE), Map 72 (SIMPLE_EDGE)
Reducer 45 <- Map 42 (CUSTOM_SIMPLE_EDGE)
Reducer 47 <- Map 46 (CUSTOM_SIMPLE_EDGE)
Reducer 48 <- Map 46 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Map 37 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 50 <- Map 49 (SIMPLE_EDGE), Map 53 (SIMPLE_EDGE)
Reducer 51 <- Reducer 50 (SIMPLE_EDGE)
Reducer 52 <- Reducer 51 (CUSTOM_SIMPLE_EDGE)
Reducer 54 <- Map 53 (CUSTOM_SIMPLE_EDGE)
Reducer 55 <- Map 53 (CUSTOM_SIMPLE_EDGE)
Reducer 56 <- Map 53 (SIMPLE_EDGE), Map 73 (SIMPLE_EDGE)
Reducer 57 <- Reducer 56 (SIMPLE_EDGE)
Reducer 58 <- Reducer 57 (CUSTOM_SIMPLE_EDGE)
Reducer 59 <- Map 53 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Map 69 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 60 <- Map 53 (CUSTOM_SIMPLE_EDGE)
Reducer 62 <- Map 61 (CUSTOM_SIMPLE_EDGE)
Reducer 63 <- Map 61 (CUSTOM_SIMPLE_EDGE)
Reducer 65 <- Map 64 (CUSTOM_SIMPLE_EDGE)
Reducer 66 <- Map 64 (CUSTOM_SIMPLE_EDGE)
Reducer 67 <- Map 64 (CUSTOM_SIMPLE_EDGE)
Reducer 68 <- Map 64 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 22 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 70 <- Map 69 (CUSTOM_SIMPLE_EDGE)
Reducer 71 <- Map 69 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 69 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 11 vectorized
      File Output Operator [FS_1283]
        Select Operator [SEL_1282] (rows=273897192 width=88)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20"]
        <-Reducer 10 [SIMPLE_EDGE]
          SHUFFLE [RS_259]
            Select Operator [SEL_258] (rows=273897192 width=88)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18"]
              Filter Operator [FIL_257] (rows=273897192 width=88)
                predicate:(_col19 <= _col12)
                Merge Join Operator [MERGEJOIN_1087] (rows=821691577 width=88)
                  Conds:RS_1239._col2, _col1, _col3=RS_1281._col1, _col0, _col2(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col19","_col20","_col21","_col22"]
                <-Reducer 14 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_1281]
                    PartitionCols:_col1, _col0, _col2
                    Select Operator [SEL_1280] (rows=746992327 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                      Group By Operator [GBY_1279] (rows=746992327 width=88)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                      <-Reducer 13 [SIMPLE_EDGE]
                        SHUFFLE [RS_251]
                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                          Group By Operator [GBY_250] (rows=1493984654 width=88)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col43)","sum(_col44)","sum(_col45)"],keys:_col28, _col46, _col29, _col7, _col9, _col14, _col15, _col16, _col17, _col23, _col24, _col25, _col26, _col49
                            Select Operator [SEL_249] (rows=1493984654 width=88)
                              Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col23","_col24","_col25","_col26","_col28","_col29","_col43","_col44","_col45","_col46","_col49"]
                              Filter Operator [FIL_248] (rows=1493984654 width=88)
                                predicate:(_col56 <> _col19)
                                Merge Join Operator [MERGEJOIN_1086] (rows=1493984654 width=88)
                                  Conds:RS_245._col37=RS_1129._col0(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col23","_col24","_col25","_col26","_col28","_col29","_col43","_col44","_col45","_col46","_col49","_col56"]
                                <-Map 69 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_1129]
                                    PartitionCols:_col0
                                    Select Operator [SEL_1125] (rows=1861800 width=385)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_1124] (rows=1861800 width=385)
                                        predicate:cd_demo_sk is not null
                                        TableScan [TS_97] (rows=1861800 width=385)
                                          default@customer_demographics,cd1,Tbl:COMPLETE,Col:NONE,Output:["cd_demo_sk","cd_marital_status"]
                                <-Reducer 12 [SIMPLE_EDGE]
                                  SHUFFLE [RS_245]
                                    PartitionCols:_col37
                                    Merge Join Operator [MERGEJOIN_1085] (rows=1358167838 width=88)
                                      Conds:RS_242._col0=RS_243._col16(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col23","_col24","_col25","_col26","_col28","_col29","_col37","_col43","_col44","_col45","_col46","_col49"]
                                    <-Reducer 6 [SIMPLE_EDGE]
                                      SHUFFLE [RS_242]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_1056] (rows=128840811 width=860)
                                          Conds:RS_112._col1=RS_1128._col0(Inner),Output:["_col0","_col7","_col9","_col14","_col15","_col16","_col17","_col19"]
                                        <-Map 69 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_1128]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_1125]
                                        <-Reducer 5 [SIMPLE_EDGE]
                                          SHUFFLE [RS_112]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_1055] (rows=117128008 width=860)
                                              Conds:RS_109._col3=RS_1115._col0(Inner),Output:["_col0","_col1","_col7","_col9","_col14","_col15","_col16","_col17"]
                                            <-Map 37 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1115]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1114] (rows=40000000 width=1014)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  Filter Operator [FIL_1113] (rows=40000000 width=1014)
                                                    predicate:ca_address_sk is not null
                                                    TableScan [TS_19] (rows=40000000 width=1014)
                                                      default@customer_address,ad2,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_street_number","ca_street_name","ca_city","ca_zip"]
                                            <-Reducer 4 [SIMPLE_EDGE]
                                              SHUFFLE [RS_109]
                                                PartitionCols:_col3
                                                Merge Join Operator [MERGEJOIN_1054] (rows=106480005 width=860)
                                                  Conds:RS_106._col2=RS_107._col0(Inner),Output:["_col0","_col1","_col3","_col7","_col9"]
                                                <-Reducer 33 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_107]
                                                    PartitionCols:_col0
                                                    Merge Join Operator [MERGEJOIN_1053] (rows=7920 width=107)
                                                      Conds:RS_1109._col1=RS_1112._col0(Inner),Output:["_col0"]
                                                    <-Map 32 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1109]
                                                        PartitionCols:_col1
                                                        Select Operator [SEL_1108] (rows=7200 width=107)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_1107] (rows=7200 width=107)
                                                            predicate:(hd_demo_sk is not null and hd_income_band_sk is not null)
                                                            TableScan [TS_9] (rows=7200 width=107)
                                                              default@household_demographics,hd2,Tbl:COMPLETE,Col:NONE,Output:["hd_demo_sk","hd_income_band_sk"]
                                                    <-Map 36 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1112]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1111] (rows=20 width=12)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_1110] (rows=20 width=12)
                                                            predicate:ib_income_band_sk is not null
                                                            TableScan [TS_12] (rows=20 width=12)
                                                              default@income_band,ib2,Tbl:COMPLETE,Col:NONE,Output:["ib_income_band_sk"]
                                                <-Reducer 3 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_106]
                                                    PartitionCols:_col2
                                                    Merge Join Operator [MERGEJOIN_1052] (rows=96800003 width=860)
                                                      Conds:RS_103._col4=RS_1098._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col7","_col9"]
                                                    <-Map 15 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1098]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1094] (rows=73049 width=1119)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_1091] (rows=73049 width=1119)
                                                            predicate:d_date_sk is not null
                                                            TableScan [TS_3] (rows=73049 width=1119)
                                                              default@date_dim,d2,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                                    <-Reducer 2 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_103]
                                                        PartitionCols:_col4
                                                        Merge Join Operator [MERGEJOIN_1051] (rows=88000001 width=860)
                                                          Conds:RS_1090._col5=RS_1097._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col7"]
                                                        <-Map 15 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_1097]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1094]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1090]
                                                            PartitionCols:_col5
                                                            Select Operator [SEL_1089] (rows=80000000 width=860)
                                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                              Filter Operator [FIL_1088] (rows=80000000 width=860)
                                                                predicate:(c_current_addr_sk is not null and c_current_cdemo_sk is not null and c_current_hdemo_sk is not null and c_customer_sk is not null and c_first_sales_date_sk is not null and c_first_shipto_date_sk is not null)
                                                                TableScan [TS_0] (rows=80000000 width=860)
                                                                  default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk","c_first_shipto_date_sk","c_first_sales_date_sk"]
                                    <-Reducer 30 [SIMPLE_EDGE]
                                      SHUFFLE [RS_243]
                                        PartitionCols:_col16
                                        Select Operator [SEL_223] (rows=1234698008 width=88)
                                          Output:["_col3","_col4","_col5","_col6","_col8","_col9","_col16","_col17","_col23","_col24","_col25","_col26","_col29"]
                                          Merge Join Operator [MERGEJOIN_1084] (rows=1234698008 width=88)
                                            Conds:RS_220._col5, _col12=RS_1190._col0, _col1(Inner),Output:["_col6","_col7","_col13","_col14","_col15","_col16","_col19","_col26","_col27","_col29","_col30","_col31","_col32"]
                                          <-Map 64 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_1190]
                                              PartitionCols:_col0, _col1
                                              Select Operator [SEL_1186] (rows=57591150 width=77)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_1185] (rows=57591150 width=77)
                                                  predicate:(sr_item_sk is not null and sr_ticket_number is not null)
                                                  TableScan [TS_75] (rows=57591150 width=77)
                                                    default@store_returns,store_returns,Tbl:COMPLETE,Col:NONE,Output:["sr_item_sk","sr_ticket_number"]
                                          <-Reducer 29 [SIMPLE_EDGE]
                                            SHUFFLE [RS_220]
                                              PartitionCols:_col5, _col12
                                              Merge Join Operator [MERGEJOIN_1083] (rows=1122452711 width=88)
                                                Conds:RS_217._col9=RS_1118._col0(Inner),Output:["_col5","_col6","_col7","_col12","_col13","_col14","_col15","_col16","_col19","_col26","_col27","_col29","_col30","_col31","_col32"]
                                              <-Map 37 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1118]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1114]
                                              <-Reducer 28 [SIMPLE_EDGE]
                                                SHUFFLE [RS_217]
                                                  PartitionCols:_col9
                                                  Merge Join Operator [MERGEJOIN_1082] (rows=1020411534 width=88)
                                                    Conds:RS_214._col10=RS_1220._col0(Inner),Output:["_col5","_col6","_col7","_col9","_col12","_col13","_col14","_col15","_col16","_col19","_col26","_col27"]
                                                  <-Map 61 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1220]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1217] (rows=1704 width=1910)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1216] (rows=1704 width=1910)
                                                          predicate:(s_store_name is not null and s_store_sk is not null and s_zip is not null)
                                                          TableScan [TS_69] (rows=1704 width=1910)
                                                            default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_name","s_zip"]
                                                  <-Reducer 27 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_214]
                                                      PartitionCols:_col10
                                                      Merge Join Operator [MERGEJOIN_1081] (rows=927646829 width=88)
                                                        Conds:RS_211._col5=RS_1262._col0(Inner),Output:["_col5","_col6","_col7","_col9","_col10","_col12","_col13","_col14","_col15","_col16","_col19"]
                                                      <-Reducer 57 [ONE_TO_ONE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_1262]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1261] (rows=52798137 width=135)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_1260] (rows=52798137 width=135)
                                                              predicate:(_col1 > (2 * _col2))
                                                              Group By Operator [GBY_1259] (rows=158394413 width=135)
                                                                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                              <-Reducer 56 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_192]
                                                                  PartitionCols:_col0
                                                                  Group By Operator [GBY_191] (rows=316788826 width=135)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","sum(_col2)"],keys:_col0
                                                                    Select Operator [SEL_189] (rows=316788826 width=135)
                                                                      Output:["_col0","_col1","_col2"]
                                                                      Merge Join Operator [MERGEJOIN_1079] (rows=316788826 width=135)
                                                                        Conds:RS_1258._col0, _col1=RS_1170._col0, _col1(Inner),Output:["_col0","_col2","_col5","_col6","_col7"]
                                                                      <-Map 53 [SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_1170]
                                                                          PartitionCols:_col0, _col1
                                                                          Select Operator [SEL_1166] (rows=28798881 width=106)
                                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                                            Filter Operator [FIL_1165] (rows=28798881 width=106)
                                                                              predicate:(cr_item_sk is not null and cr_order_number is not null)
                                                                              TableScan [TS_56] (rows=28798881 width=106)
                                                                                default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:NONE,Output:["cr_item_sk","cr_order_number","cr_refunded_cash","cr_reversed_charge","cr_store_credit"]
                                                                      <-Map 73 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1258]
                                                                          PartitionCols:_col0, _col1
                                                                          Select Operator [SEL_1257] (rows=287989836 width=135)
                                                                            Output:["_col0","_col1","_col2"]
                                                                            Filter Operator [FIL_1256] (rows=287989836 width=135)
                                                                              predicate:((cs_item_sk BETWEEN DynamicValue(RS_171_item_i_item_sk_min) AND DynamicValue(RS_171_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_171_item_i_item_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_187_catalog_returns_cr_item_sk_min) AND DynamicValue(RS_187_catalog_returns_cr_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_187_catalog_returns_cr_item_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_221_store_returns_sr_item_sk_min) AND DynamicValue(RS_221_store_returns_sr_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_221_store_returns_sr_item_sk_bloom_filter))) and (cs_order_number BETWEEN DynamicValue(RS_187_catalog_returns_cr_order_number_min) AND DynamicValue(RS_187_catalog_returns_cr_order_number_max) and in_bloom_filter(cs_order_number, DynamicValue(RS_187_catalog_returns_cr_order_number_bloom_filter))) and cs_item_sk is not null and cs_order_number is not null)
                                                                              TableScan [TS_180] (rows=287989836 width=135)
                                                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                              <-Reducer 45 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_1242]
                                                                                  Group By Operator [GBY_1240] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                  <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_1144]
                                                                                      Group By Operator [GBY_1142] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                        Select Operator [SEL_1140] (rows=5703 width=1436)
                                                                                          Output:["_col0"]
                                                                                          Select Operator [SEL_1136] (rows=5703 width=1436)
                                                                                            Output:["_col0","_col3"]
                                                                                            Filter Operator [FIL_1135] (rows=5703 width=1436)
                                                                                              predicate:((i_color) IN ('maroon', 'burnished', 'dim', 'steel', 'navajo', 'chocolate') and i_current_price BETWEEN 35 AND 45 and i_current_price BETWEEN 36 AND 50 and i_item_sk is not null)
                                                                                              TableScan [TS_34] (rows=462000 width=1436)
                                                                                                default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_current_price","i_color","i_product_name"]
                                                                              <-Reducer 67 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_1255]
                                                                                  Group By Operator [GBY_1253] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=57591152)"]
                                                                                  <-Map 64 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_1199]
                                                                                      Group By Operator [GBY_1195] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=57591152)"]
                                                                                        Select Operator [SEL_1191] (rows=57591150 width=77)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Select Operator [SEL_1186]
                                                                              <-Reducer 59 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_1250]
                                                                                  Group By Operator [GBY_1249] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=28798880)"]
                                                                                  <-Map 53 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_1179]
                                                                                      Group By Operator [GBY_1175] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=28798880)"]
                                                                                        Select Operator [SEL_1171] (rows=28798881 width=106)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Select Operator [SEL_1166]
                                                                              <-Reducer 60 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_1252]
                                                                                  Group By Operator [GBY_1251] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=28798880)"]
                                                                                  <-Map 53 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_1180]
                                                                                      Group By Operator [GBY_1176] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=28798880)"]
                                                                                        Select Operator [SEL_1172] (rows=28798881 width=106)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Select Operator [SEL_1166]
                                                      <-Reducer 26 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_211]
                                                          PartitionCols:_col5
                                                          Merge Join Operator [MERGEJOIN_1080] (rows=843315281 width=88)
                                                            Conds:RS_208._col0=RS_209._col5(Inner),Output:["_col5","_col6","_col7","_col9","_col10","_col12","_col13","_col14","_col15","_col16","_col19"]
                                                          <-Reducer 33 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_208]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Merge Join Operator [MERGEJOIN_1053]
                                                          <-Reducer 25 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_209]
                                                              PartitionCols:_col5
                                                              Select Operator [SEL_179] (rows=766650239 width=88)
                                                                Output:["_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col10","_col11","_col12","_col13","_col16"]
                                                                Merge Join Operator [MERGEJOIN_1078] (rows=766650239 width=88)
                                                                  Conds:RS_176._col7=RS_1155._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col15"]
                                                                <-Map 46 [SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1155]
                                                                    PartitionCols:_col0
                                                                    Select Operator [SEL_1152] (rows=2300 width=1179)
                                                                      Output:["_col0"]
                                                                      Filter Operator [FIL_1151] (rows=2300 width=1179)
                                                                        predicate:p_promo_sk is not null
                                                                        TableScan [TS_40] (rows=2300 width=1179)
                                                                          default@promotion,promotion,Tbl:COMPLETE,Col:NONE,Output:["p_promo_sk"]
                                                                <-Reducer 24 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_176]
                                                                    PartitionCols:_col7
                                                                    Merge Join Operator [MERGEJOIN_1077] (rows=696954748 width=88)
                                                                      Conds:RS_173._col0=RS_1101._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15"]
                                                                    <-Map 15 [SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_1101]
                                                                        PartitionCols:_col0
                                                                        Select Operator [SEL_1096] (rows=36524 width=1119)
                                                                          Output:["_col0"]
                                                                          Filter Operator [FIL_1093] (rows=36524 width=1119)
                                                                            predicate:((d_year = 2001) and d_date_sk is not null)
                                                                             Please refer to the previous TableScan [TS_3]
                                                                    <-Reducer 44 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_173]
                                                                        PartitionCols:_col0
                                                                        Merge Join Operator [MERGEJOIN_1076] (rows=633595212 width=88)
                                                                          Conds:RS_1278._col1=RS_1139._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15"]
                                                                        <-Map 42 [SIMPLE_EDGE] vectorized
                                                                          PARTITION_ONLY_SHUFFLE [RS_1139]
                                                                            PartitionCols:_col0
                                                                             Please refer to the previous Select Operator [SEL_1136]
                                                                        <-Map 72 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1278]
                                                                            PartitionCols:_col1
                                                                            Select Operator [SEL_1277] (rows=575995635 width=88)
                                                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                                              Filter Operator [FIL_1276] (rows=575995635 width=88)
                                                                                predicate:((ss_addr_sk BETWEEN DynamicValue(RS_218_ad1_ca_address_sk_min) AND DynamicValue(RS_218_ad1_ca_address_sk_max) and in_bloom_filter(ss_addr_sk, DynamicValue(RS_218_ad1_ca_address_sk_bloom_filter))) and (ss_cdemo_sk BETWEEN DynamicValue(RS_246_cd1_cd_demo_sk_min) AND DynamicValue(RS_246_cd1_cd_demo_sk_max) and in_bloom_filter(ss_cdemo_sk, DynamicValue(RS_246_cd1_cd_demo_sk_bloom_filter))) and (ss_hdemo_sk BETWEEN DynamicValue(RS_208_hd1_hd_demo_sk_min) AND DynamicValue(RS_208_hd1_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_208_hd1_hd_demo_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_171_item_i_item_sk_min) AND DynamicValue(RS_171_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_171_item_i_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_212_catalog_sales_cs_item_sk_min) AND DynamicValue(RS_212_catalog_sales_cs_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_212_catalog_sales_cs_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_221_store_returns_sr_item_sk_min) AND DynamicValue(RS_221_store_returns_sr_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_221_store_returns_sr_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_44_item_i_item_sk_min) AND DynamicValue(RS_44_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_44_item_i_item_sk_bloom_filter))) and (ss_promo_sk BETWEEN DynamicValue(RS_177_promotion_p_promo_sk_min) AND DynamicValue(RS_177_promotion_p_promo_sk_max) and in_bloom_filter(ss_promo_sk, DynamicValue(RS_177_promotion_p_promo_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_174_d1_d_date_sk_min) AND DynamicValue(RS_174_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_174_d1_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_215_store_s_store_sk_min) AND DynamicValue(RS_215_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_215_store_s_store_sk_bloom_filter))) and (ss_ticket_number BETWEEN DynamicValue(RS_221_store_returns_sr_ticket_number_min) AND DynamicValue(RS_221_store_returns_sr_ticket_number_max) and in_bloom_filter(ss_ticket_number, DynamicValue(RS_221_store_returns_sr_ticket_number_bloom_filter))) and ss_addr_sk is not null and ss_cdemo_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_item_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                                                                TableScan [TS_158] (rows=575995635 width=88)
                                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                                <-Reducer 43 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1148]
                                                                                    Group By Operator [GBY_1145] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                    <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      PARTITION_ONLY_SHUFFLE [RS_1143]
                                                                                        Group By Operator [GBY_1141] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                          Select Operator [SEL_1138] (rows=5703 width=1436)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_1136]
                                                                                <-Reducer 45 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1241]
                                                                                     Please refer to the previous Group By Operator [GBY_1240]
                                                                                <-Reducer 67 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1254]
                                                                                     Please refer to the previous Group By Operator [GBY_1253]
                                                                                <-Reducer 31 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1244]
                                                                                    Group By Operator [GBY_1243] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                    <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      PARTITION_ONLY_SHUFFLE [RS_1106]
                                                                                        Group By Operator [GBY_1104] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                          Select Operator [SEL_1102] (rows=36524 width=1119)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_1096]
                                                                                <-Reducer 35 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1248]
                                                                                    Group By Operator [GBY_1247] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                    <-Reducer 33 [CUSTOM_SIMPLE_EDGE]
                                                                                      SHUFFLE [RS_909]
                                                                                        Group By Operator [GBY_908] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                          Select Operator [SEL_907] (rows=7920 width=107)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Merge Join Operator [MERGEJOIN_1053]
                                                                                <-Reducer 39 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1271]
                                                                                    Group By Operator [GBY_1270] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                                                                    <-Map 37 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      SHUFFLE [RS_1123]
                                                                                        Group By Operator [GBY_1121] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                                                                          Select Operator [SEL_1119] (rows=40000000 width=1014)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_1114]
                                                                                <-Reducer 48 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1246]
                                                                                    Group By Operator [GBY_1245] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                    <-Map 46 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      PARTITION_ONLY_SHUFFLE [RS_1160]
                                                                                        Group By Operator [GBY_1158] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                          Select Operator [SEL_1156] (rows=2300 width=1179)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_1152]
                                                                                <-Reducer 58 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1267]
                                                                                    Group By Operator [GBY_1266] (rows=1 width=228)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=52798136)"]
                                                                                    <-Reducer 57 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      PARTITION_ONLY_SHUFFLE [RS_1265]
                                                                                        Group By Operator [GBY_1264] (rows=1 width=228)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=52798136)"]
                                                                                          Select Operator [SEL_1263] (rows=52798137 width=135)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_1261]
                                                                                <-Reducer 63 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1269]
                                                                                    Group By Operator [GBY_1268] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                    <-Map 61 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      PARTITION_ONLY_SHUFFLE [RS_1225]
                                                                                        Group By Operator [GBY_1223] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                          Select Operator [SEL_1221] (rows=1704 width=1910)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_1217]
                                                                                <-Reducer 68 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1273]
                                                                                    Group By Operator [GBY_1272] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=57591152)"]
                                                                                    <-Map 64 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      PARTITION_ONLY_SHUFFLE [RS_1200]
                                                                                        Group By Operator [GBY_1196] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=57591152)"]
                                                                                          Select Operator [SEL_1192] (rows=57591150 width=77)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_1186]
                                                                                <-Reducer 71 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1275]
                                                                                    Group By Operator [GBY_1274] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1861800)"]
                                                                                    <-Map 69 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      SHUFFLE [RS_1134]
                                                                                        Group By Operator [GBY_1132] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1861800)"]
                                                                                          Select Operator [SEL_1130] (rows=1861800 width=385)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_1125]
                <-Reducer 9 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_1239]
                    PartitionCols:_col2, _col1, _col3
                    Select Operator [SEL_1238] (rows=746992327 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                      Group By Operator [GBY_1237] (rows=746992327 width=88)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                      <-Reducer 8 [SIMPLE_EDGE]
                        SHUFFLE [RS_124]
                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                          Group By Operator [GBY_123] (rows=1493984654 width=88)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col43)","sum(_col44)","sum(_col45)"],keys:_col28, _col46, _col29, _col7, _col9, _col14, _col15, _col16, _col17, _col23, _col24, _col25, _col26, _col49
                            Select Operator [SEL_122] (rows=1493984654 width=88)
                              Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col23","_col24","_col25","_col26","_col28","_col29","_col43","_col44","_col45","_col46","_col49"]
                              Filter Operator [FIL_121] (rows=1493984654 width=88)
                                predicate:(_col56 <> _col19)
                                Merge Join Operator [MERGEJOIN_1068] (rows=1493984654 width=88)
                                  Conds:RS_118._col37=RS_1126._col0(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col23","_col24","_col25","_col26","_col28","_col29","_col43","_col44","_col45","_col46","_col49","_col56"]
                                <-Map 69 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_1126]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_1125]
                                <-Reducer 7 [SIMPLE_EDGE]
                                  SHUFFLE [RS_118]
                                    PartitionCols:_col37
                                    Merge Join Operator [MERGEJOIN_1067] (rows=1358167838 width=88)
                                      Conds:RS_115._col0=RS_116._col16(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col23","_col24","_col25","_col26","_col28","_col29","_col37","_col43","_col44","_col45","_col46","_col49"]
                                    <-Reducer 6 [SIMPLE_EDGE]
                                      SHUFFLE [RS_115]
                                        PartitionCols:_col0
                                         Please refer to the previous Merge Join Operator [MERGEJOIN_1056]
                                    <-Reducer 22 [SIMPLE_EDGE]
                                      SHUFFLE [RS_116]
                                        PartitionCols:_col16
                                        Select Operator [SEL_96] (rows=1234698008 width=88)
                                          Output:["_col3","_col4","_col5","_col6","_col8","_col9","_col16","_col17","_col23","_col24","_col25","_col26","_col29"]
                                          Merge Join Operator [MERGEJOIN_1066] (rows=1234698008 width=88)
                                            Conds:RS_93._col5, _col12=RS_1187._col0, _col1(Inner),Output:["_col6","_col7","_col13","_col14","_col15","_col16","_col19","_col26","_col27","_col29","_col30","_col31","_col32"]
                                          <-Map 64 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_1187]
                                              PartitionCols:_col0, _col1
                                               Please refer to the previous Select Operator [SEL_1186]
                                          <-Reducer 21 [SIMPLE_EDGE]
                                            SHUFFLE [RS_93]
                                              PartitionCols:_col5, _col12
                                              Merge Join Operator [MERGEJOIN_1065] (rows=1122452711 width=88)
                                                Conds:RS_90._col9=RS_1116._col0(Inner),Output:["_col5","_col6","_col7","_col12","_col13","_col14","_col15","_col16","_col19","_col26","_col27","_col29","_col30","_col31","_col32"]
                                              <-Map 37 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1116]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1114]
                                              <-Reducer 20 [SIMPLE_EDGE]
                                                SHUFFLE [RS_90]
                                                  PartitionCols:_col9
                                                  Merge Join Operator [MERGEJOIN_1064] (rows=1020411534 width=88)
                                                    Conds:RS_87._col10=RS_1218._col0(Inner),Output:["_col5","_col6","_col7","_col9","_col12","_col13","_col14","_col15","_col16","_col19","_col26","_col27"]
                                                  <-Map 61 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1218]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1217]
                                                  <-Reducer 19 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_87]
                                                      PartitionCols:_col10
                                                      Merge Join Operator [MERGEJOIN_1063] (rows=927646829 width=88)
                                                        Conds:RS_84._col5=RS_1210._col0(Inner),Output:["_col5","_col6","_col7","_col9","_col10","_col12","_col13","_col14","_col15","_col16","_col19"]
                                                      <-Reducer 51 [ONE_TO_ONE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_1210]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1209] (rows=52798137 width=135)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_1208] (rows=52798137 width=135)
                                                              predicate:(_col1 > (2 * _col2))
                                                              Group By Operator [GBY_1207] (rows=158394413 width=135)
                                                                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                              <-Reducer 50 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_65]
                                                                  PartitionCols:_col0
                                                                  Group By Operator [GBY_64] (rows=316788826 width=135)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","sum(_col2)"],keys:_col0
                                                                    Select Operator [SEL_62] (rows=316788826 width=135)
                                                                      Output:["_col0","_col1","_col2"]
                                                                      Merge Join Operator [MERGEJOIN_1061] (rows=316788826 width=135)
                                                                        Conds:RS_1206._col0, _col1=RS_1167._col0, _col1(Inner),Output:["_col0","_col2","_col5","_col6","_col7"]
                                                                      <-Map 53 [SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_1167]
                                                                          PartitionCols:_col0, _col1
                                                                           Please refer to the previous Select Operator [SEL_1166]
                                                                      <-Map 49 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1206]
                                                                          PartitionCols:_col0, _col1
                                                                          Select Operator [SEL_1205] (rows=287989836 width=135)
                                                                            Output:["_col0","_col1","_col2"]
                                                                            Filter Operator [FIL_1204] (rows=287989836 width=135)
                                                                              predicate:((cs_item_sk BETWEEN DynamicValue(RS_44_item_i_item_sk_min) AND DynamicValue(RS_44_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_44_item_i_item_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_60_catalog_returns_cr_item_sk_min) AND DynamicValue(RS_60_catalog_returns_cr_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_60_catalog_returns_cr_item_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_94_store_returns_sr_item_sk_min) AND DynamicValue(RS_94_store_returns_sr_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_94_store_returns_sr_item_sk_bloom_filter))) and (cs_order_number BETWEEN DynamicValue(RS_60_catalog_returns_cr_order_number_min) AND DynamicValue(RS_60_catalog_returns_cr_order_number_max) and in_bloom_filter(cs_order_number, DynamicValue(RS_60_catalog_returns_cr_order_number_bloom_filter))) and cs_item_sk is not null and cs_order_number is not null)
                                                                              TableScan [TS_53] (rows=287989836 width=135)
                                                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                              <-Reducer 43 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_1147]
                                                                                   Please refer to the previous Group By Operator [GBY_1145]
                                                                              <-Reducer 65 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_1203]
                                                                                  Group By Operator [GBY_1201] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=57591152)"]
                                                                                  <-Map 64 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_1197]
                                                                                      Group By Operator [GBY_1193] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=57591152)"]
                                                                                        Select Operator [SEL_1188] (rows=57591150 width=77)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Select Operator [SEL_1186]
                                                                              <-Reducer 54 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_1182]
                                                                                  Group By Operator [GBY_1181] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=28798880)"]
                                                                                  <-Map 53 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_1177]
                                                                                      Group By Operator [GBY_1173] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=28798880)"]
                                                                                        Select Operator [SEL_1168] (rows=28798881 width=106)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Select Operator [SEL_1166]
                                                                              <-Reducer 55 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_1184]
                                                                                  Group By Operator [GBY_1183] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=28798880)"]
                                                                                  <-Map 53 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_1178]
                                                                                      Group By Operator [GBY_1174] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=28798880)"]
                                                                                        Select Operator [SEL_1169] (rows=28798881 width=106)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Select Operator [SEL_1166]
                                                      <-Reducer 18 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_84]
                                                          PartitionCols:_col5
                                                          Merge Join Operator [MERGEJOIN_1062] (rows=843315281 width=88)
                                                            Conds:RS_81._col0=RS_82._col5(Inner),Output:["_col5","_col6","_col7","_col9","_col10","_col12","_col13","_col14","_col15","_col16","_col19"]
                                                          <-Reducer 33 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_81]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Merge Join Operator [MERGEJOIN_1053]
                                                          <-Reducer 17 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_82]
                                                              PartitionCols:_col5
                                                              Select Operator [SEL_52] (rows=766650239 width=88)
                                                                Output:["_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col10","_col11","_col12","_col13","_col16"]
                                                                Merge Join Operator [MERGEJOIN_1060] (rows=766650239 width=88)
                                                                  Conds:RS_49._col7=RS_1153._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col15"]
                                                                <-Map 46 [SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1153]
                                                                    PartitionCols:_col0
                                                                     Please refer to the previous Select Operator [SEL_1152]
                                                                <-Reducer 16 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_49]
                                                                    PartitionCols:_col7
                                                                    Merge Join Operator [MERGEJOIN_1059] (rows=696954748 width=88)
                                                                      Conds:RS_46._col0=RS_1099._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15"]
                                                                    <-Map 15 [SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_1099]
                                                                        PartitionCols:_col0
                                                                        Select Operator [SEL_1095] (rows=36524 width=1119)
                                                                          Output:["_col0"]
                                                                          Filter Operator [FIL_1092] (rows=36524 width=1119)
                                                                            predicate:((d_year = 2000) and d_date_sk is not null)
                                                                             Please refer to the previous TableScan [TS_3]
                                                                    <-Reducer 41 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_46]
                                                                        PartitionCols:_col0
                                                                        Merge Join Operator [MERGEJOIN_1058] (rows=633595212 width=88)
                                                                          Conds:RS_1236._col1=RS_1137._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15"]
                                                                        <-Map 42 [SIMPLE_EDGE] vectorized
                                                                          PARTITION_ONLY_SHUFFLE [RS_1137]
                                                                            PartitionCols:_col0
                                                                             Please refer to the previous Select Operator [SEL_1136]
                                                                        <-Map 40 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1236]
                                                                            PartitionCols:_col1
                                                                            Select Operator [SEL_1235] (rows=575995635 width=88)
                                                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                                              Filter Operator [FIL_1234] (rows=575995635 width=88)
                                                                                predicate:((ss_addr_sk BETWEEN DynamicValue(RS_91_ad1_ca_address_sk_min) AND DynamicValue(RS_91_ad1_ca_address_sk_max) and in_bloom_filter(ss_addr_sk, DynamicValue(RS_91_ad1_ca_address_sk_bloom_filter))) and (ss_cdemo_sk BETWEEN DynamicValue(RS_119_cd1_cd_demo_sk_min) AND DynamicValue(RS_119_cd1_cd_demo_sk_max) and in_bloom_filter(ss_cdemo_sk, DynamicValue(RS_119_cd1_cd_demo_sk_bloom_filter))) and (ss_hdemo_sk BETWEEN DynamicValue(RS_81_hd1_hd_demo_sk_min) AND DynamicValue(RS_81_hd1_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_81_hd1_hd_demo_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_44_item_i_item_sk_min) AND DynamicValue(RS_44_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_44_item_i_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_85_catalog_sales_cs_item_sk_min) AND DynamicValue(RS_85_catalog_sales_cs_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_85_catalog_sales_cs_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_94_store_returns_sr_item_sk_min) AND DynamicValue(RS_94_store_returns_sr_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_94_store_returns_sr_item_sk_bloom_filter))) and (ss_promo_sk BETWEEN DynamicValue(RS_50_promotion_p_promo_sk_min) AND DynamicValue(RS_50_promotion_p_promo_sk_max) and in_bloom_filter(ss_promo_sk, DynamicValue(RS_50_promotion_p_promo_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_47_d1_d_date_sk_min) AND DynamicValue(RS_47_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_47_d1_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_88_store_s_store_sk_min) AND DynamicValue(RS_88_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_88_store_s_store_sk_bloom_filter))) and (ss_ticket_number BETWEEN DynamicValue(RS_94_store_returns_sr_ticket_number_min) AND DynamicValue(RS_94_store_returns_sr_ticket_number_max) and in_bloom_filter(ss_ticket_number, DynamicValue(RS_94_store_returns_sr_ticket_number_bloom_filter))) and ss_addr_sk is not null and ss_cdemo_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_item_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                                                                TableScan [TS_31] (rows=575995635 width=88)
                                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                                <-Reducer 43 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1146]
                                                                                     Please refer to the previous Group By Operator [GBY_1145]
                                                                                <-Reducer 65 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1202]
                                                                                     Please refer to the previous Group By Operator [GBY_1201]
                                                                                <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1150]
                                                                                    Group By Operator [GBY_1149] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                    <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      PARTITION_ONLY_SHUFFLE [RS_1105]
                                                                                        Group By Operator [GBY_1103] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                          Select Operator [SEL_1100] (rows=36524 width=1119)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_1095]
                                                                                <-Reducer 34 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1164]
                                                                                    Group By Operator [GBY_1163] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                    <-Reducer 33 [CUSTOM_SIMPLE_EDGE]
                                                                                      SHUFFLE [RS_674]
                                                                                        Group By Operator [GBY_673] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                          Select Operator [SEL_672] (rows=7920 width=107)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Merge Join Operator [MERGEJOIN_1053]
                                                                                <-Reducer 38 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1229]
                                                                                    Group By Operator [GBY_1228] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                                                                    <-Map 37 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      SHUFFLE [RS_1122]
                                                                                        Group By Operator [GBY_1120] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                                                                          Select Operator [SEL_1117] (rows=40000000 width=1014)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_1114]
                                                                                <-Reducer 47 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1162]
                                                                                    Group By Operator [GBY_1161] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                    <-Map 46 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      PARTITION_ONLY_SHUFFLE [RS_1159]
                                                                                        Group By Operator [GBY_1157] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                          Select Operator [SEL_1154] (rows=2300 width=1179)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_1152]
                                                                                <-Reducer 52 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1215]
                                                                                    Group By Operator [GBY_1214] (rows=1 width=228)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=52798136)"]
                                                                                    <-Reducer 51 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      PARTITION_ONLY_SHUFFLE [RS_1213]
                                                                                        Group By Operator [GBY_1212] (rows=1 width=228)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=52798136)"]
                                                                                          Select Operator [SEL_1211] (rows=52798137 width=135)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_1209]
                                                                                <-Reducer 62 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1227]
                                                                                    Group By Operator [GBY_1226] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                    <-Map 61 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      PARTITION_ONLY_SHUFFLE [RS_1224]
                                                                                        Group By Operator [GBY_1222] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                          Select Operator [SEL_1219] (rows=1704 width=1910)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_1217]
                                                                                <-Reducer 66 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1231]
                                                                                    Group By Operator [GBY_1230] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=57591152)"]
                                                                                    <-Map 64 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      PARTITION_ONLY_SHUFFLE [RS_1198]
                                                                                        Group By Operator [GBY_1194] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=57591152)"]
                                                                                          Select Operator [SEL_1189] (rows=57591150 width=77)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_1186]
                                                                                <-Reducer 70 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_1233]
                                                                                    Group By Operator [GBY_1232] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1861800)"]
                                                                                    <-Map 69 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      SHUFFLE [RS_1133]
                                                                                        Group By Operator [GBY_1131] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1861800)"]
                                                                                          Select Operator [SEL_1127] (rows=1861800 width=385)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_1125]

