PREHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@income_band
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@income_band
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 42 <- Reducer 26 (BROADCAST_EDGE)
Map 48 <- Reducer 45 (BROADCAST_EDGE)
Map 54 <- Reducer 34 (BROADCAST_EDGE)
Map 55 <- Reducer 47 (BROADCAST_EDGE)
Reducer 10 <- Map 1 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 37 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 15 <- Map 18 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE), Reducer 36 (SIMPLE_EDGE)
Reducer 17 <- Map 38 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 19 <- Map 18 (SIMPLE_EDGE), Reducer 43 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE), Reducer 50 (SIMPLE_EDGE)
Reducer 21 <- Map 41 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 35 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 40 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Map 38 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Map 39 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Map 18 (SIMPLE_EDGE), Reducer 46 (SIMPLE_EDGE)
Reducer 28 <- Reducer 27 (SIMPLE_EDGE), Reducer 53 (SIMPLE_EDGE)
Reducer 29 <- Map 41 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 3 <- Map 37 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 35 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Map 40 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE)
Reducer 32 <- Map 38 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 33 <- Map 39 (SIMPLE_EDGE), Reducer 32 (SIMPLE_EDGE)
Reducer 34 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 36 <- Map 35 (SIMPLE_EDGE), Map 37 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 43 <- Map 42 (SIMPLE_EDGE), Map 44 (SIMPLE_EDGE)
Reducer 45 <- Map 44 (CUSTOM_SIMPLE_EDGE)
Reducer 46 <- Map 44 (SIMPLE_EDGE), Map 54 (SIMPLE_EDGE)
Reducer 47 <- Map 44 (CUSTOM_SIMPLE_EDGE)
Reducer 49 <- Map 48 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE)
Reducer 5 <- Reducer 12 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 50 <- Reducer 49 (SIMPLE_EDGE)
Reducer 52 <- Map 51 (SIMPLE_EDGE), Map 55 (SIMPLE_EDGE)
Reducer 53 <- Reducer 52 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 1 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)
Reducer 8 <- Reducer 25 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 33 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_1224]
        Select Operator [SEL_1223] (rows=114089652126 width=1702)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20"]
        <-Reducer 5 [SIMPLE_EDGE]
          SHUFFLE [RS_271]
            Select Operator [SEL_270] (rows=114089652126 width=1694)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18"]
              Filter Operator [FIL_269] (rows=114089652126 width=1694)
                predicate:(_col19 <= _col12)
                Merge Join Operator [MERGEJOIN_1119] (rows=342268956379 width=1694)
                  Conds:RS_1203._col2, _col1, _col3=RS_1222._col1, _col0, _col2(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col19","_col20","_col21","_col22"]
                <-Reducer 12 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_1222]
                    PartitionCols:_col1, _col0, _col2
                    Select Operator [SEL_1221] (rows=23886447 width=525)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                      Filter Operator [FIL_1220] (rows=23886447 width=1362)
                        predicate:_col14 is not null
                        Select Operator [SEL_1219] (rows=23886447 width=1362)
                          Output:["_col1","_col2","_col3","_col14","_col15","_col16","_col17"]
                          Group By Operator [GBY_1218] (rows=23886447 width=1362)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                          <-Reducer 11 [SIMPLE_EDGE]
                            SHUFFLE [RS_261]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                              Group By Operator [GBY_260] (rows=23886447 width=1362)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col44)","sum(_col45)","sum(_col46)"],keys:_col30, _col47, _col31, _col9, _col11, _col16, _col17, _col18, _col19, _col25, _col26, _col27, _col28, _col48
                                Merge Join Operator [MERGEJOIN_1118] (rows=24224230 width=1153)
                                  Conds:RS_256._col33=RS_1153._col0(Inner),Output:["_col9","_col11","_col16","_col17","_col18","_col19","_col25","_col26","_col27","_col28","_col30","_col31","_col44","_col45","_col46","_col47","_col48"]
                                <-Map 37 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_1153]
                                    PartitionCols:_col0
                                    Select Operator [SEL_1150] (rows=20 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_1149] (rows=20 width=4)
                                        predicate:ib_income_band_sk is not null
                                        TableScan [TS_15] (rows=20 width=4)
                                          default@income_band,ib2,Tbl:COMPLETE,Col:COMPLETE,Output:["ib_income_band_sk"]
                                <-Reducer 10 [SIMPLE_EDGE]
                                  SHUFFLE [RS_256]
                                    PartitionCols:_col33
                                    Filter Operator [FIL_255] (rows=24224230 width=1327)
                                      predicate:(_col1 <> _col21)
                                      Merge Join Operator [MERGEJOIN_1117] (rows=24224230 width=1327)
                                        Conds:RS_1124._col0=RS_253._col36(Inner),Output:["_col1","_col9","_col11","_col16","_col17","_col18","_col19","_col21","_col25","_col26","_col27","_col28","_col30","_col31","_col33","_col44","_col45","_col46","_col47","_col48"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_1124]
                                          PartitionCols:_col0
                                          Select Operator [SEL_1121] (rows=1861800 width=89)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_1120] (rows=1861800 width=89)
                                              predicate:cd_demo_sk is not null
                                              TableScan [TS_0] (rows=1861800 width=89)
                                                default@customer_demographics,cd1,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status"]
                                      <-Reducer 9 [SIMPLE_EDGE]
                                        SHUFFLE [RS_253]
                                          PartitionCols:_col36
                                          Merge Join Operator [MERGEJOIN_1116] (rows=23886447 width=1240)
                                            Conds:RS_245._col0=RS_246._col15(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col23","_col24","_col25","_col26","_col28","_col29","_col31","_col36","_col42","_col43","_col44","_col45","_col46"]
                                          <-Reducer 7 [SIMPLE_EDGE]
                                            SHUFFLE [RS_245]
                                              PartitionCols:_col0
                                              Merge Join Operator [MERGEJOIN_1088] (rows=70357394 width=458)
                                                Conds:RS_109._col1=RS_1123._col0(Inner),Output:["_col0","_col7","_col9","_col14","_col15","_col16","_col17","_col19"]
                                              <-Map 1 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1123]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1121]
                                              <-Reducer 17 [SIMPLE_EDGE]
                                                SHUFFLE [RS_109]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_1087] (rows=69376329 width=376)
                                                    Conds:RS_106._col3=RS_1156._col0(Inner),Output:["_col0","_col1","_col7","_col9","_col14","_col15","_col16","_col17"]
                                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1156]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1155] (rows=40000000 width=365)
                                                        Output:["_col0","_col1","_col2","_col3","_col4"]
                                                        Filter Operator [FIL_1154] (rows=40000000 width=365)
                                                          predicate:ca_address_sk is not null
                                                          TableScan [TS_22] (rows=40000000 width=365)
                                                            default@customer_address,ad2,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_street_number","ca_street_name","ca_city","ca_zip"]
                                                  <-Reducer 16 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_106]
                                                      PartitionCols:_col3
                                                      Merge Join Operator [MERGEJOIN_1086] (rows=69376329 width=19)
                                                        Conds:RS_103._col2=RS_104._col0(Inner),Output:["_col0","_col1","_col3","_col7","_col9"]
                                                      <-Reducer 15 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_103]
                                                          PartitionCols:_col2
                                                          Merge Join Operator [MERGEJOIN_1084] (rows=69376329 width=23)
                                                            Conds:RS_100._col4=RS_1135._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col7","_col9"]
                                                          <-Map 18 [SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_1135]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1131] (rows=73049 width=8)
                                                                Output:["_col0","_col1"]
                                                                Filter Operator [FIL_1128] (rows=73049 width=8)
                                                                  predicate:d_date_sk is not null
                                                                  TableScan [TS_6] (rows=73049 width=8)
                                                                    default@date_dim,d2,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                          <-Reducer 14 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_100]
                                                              PartitionCols:_col4
                                                              Merge Join Operator [MERGEJOIN_1083] (rows=69376329 width=23)
                                                                Conds:RS_1127._col5=RS_1134._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col7"]
                                                              <-Map 18 [SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1134]
                                                                  PartitionCols:_col0
                                                                   Please refer to the previous Select Operator [SEL_1131]
                                                              <-Map 13 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_1127]
                                                                  PartitionCols:_col5
                                                                  Select Operator [SEL_1126] (rows=69376329 width=23)
                                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                    Filter Operator [FIL_1125] (rows=69376329 width=23)
                                                                      predicate:(c_first_shipto_date_sk is not null and c_first_sales_date_sk is not null and c_current_hdemo_sk is not null and c_current_cdemo_sk is not null and c_customer_sk is not null and c_current_addr_sk is not null)
                                                                      TableScan [TS_3] (rows=80000000 width=23)
                                                                        default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk","c_first_shipto_date_sk","c_first_sales_date_sk"]
                                                      <-Reducer 36 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_104]
                                                          PartitionCols:_col0
                                                          Merge Join Operator [MERGEJOIN_1085] (rows=7200 width=4)
                                                            Conds:RS_1146._col1=RS_1151._col0(Inner),Output:["_col0"]
                                                          <-Map 35 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1146]
                                                              PartitionCols:_col1
                                                              Select Operator [SEL_1145] (rows=7200 width=8)
                                                                Output:["_col0","_col1"]
                                                                Filter Operator [FIL_1144] (rows=7200 width=8)
                                                                  predicate:(hd_demo_sk is not null and hd_income_band_sk is not null)
                                                                  TableScan [TS_12] (rows=7200 width=8)
                                                                    default@household_demographics,hd2,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_income_band_sk"]
                                                          <-Map 37 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1151]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1150]
                                          <-Reducer 33 [SIMPLE_EDGE]
                                            SHUFFLE [RS_246]
                                              PartitionCols:_col15
                                              Merge Join Operator [MERGEJOIN_1115] (rows=23886447 width=788)
                                                Conds:RS_1198._col0, _col1=RS_227._col12, _col19(Inner),Output:["_col3","_col4","_col5","_col6","_col8","_col9","_col11","_col15","_col16","_col22","_col23","_col24","_col25","_col26"]
                                              <-Map 39 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1198]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_1196] (rows=57591150 width=8)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_1195] (rows=57591150 width=8)
                                                      predicate:(sr_item_sk is not null and sr_ticket_number is not null)
                                                      TableScan [TS_28] (rows=57591150 width=8)
                                                        default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
                                              <-Reducer 32 [SIMPLE_EDGE]
                                                SHUFFLE [RS_227]
                                                  PartitionCols:_col12, _col19
                                                  Merge Join Operator [MERGEJOIN_1114] (rows=14487982 width=661)
                                                    Conds:RS_1158._col0=RS_223._col11(Inner),Output:["_col1","_col2","_col3","_col4","_col6","_col7","_col9","_col12","_col13","_col14","_col19","_col20","_col21","_col22","_col23","_col24"]
                                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1158]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1155]
                                                  <-Reducer 31 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_223]
                                                      PartitionCols:_col11
                                                      Merge Join Operator [MERGEJOIN_1113] (rows=14487982 width=300)
                                                        Conds:RS_1194._col0=RS_219._col9(Inner),Output:["_col1","_col2","_col4","_col7","_col8","_col9","_col11","_col14","_col15","_col16","_col17","_col18","_col19"]
                                                      <-Map 40 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1194]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1192] (rows=1704 width=181)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_1191] (rows=1704 width=181)
                                                              predicate:(s_store_sk is not null and s_store_name is not null and s_zip is not null)
                                                              TableScan [TS_34] (rows=1704 width=181)
                                                                default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_zip"]
                                                      <-Reducer 30 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_219]
                                                          PartitionCols:_col9
                                                          Merge Join Operator [MERGEJOIN_1112] (rows=14487982 width=123)
                                                            Conds:RS_1148._col0=RS_215._col5(Inner),Output:["_col1","_col4","_col5","_col6","_col8","_col9","_col11","_col12","_col13","_col14","_col15","_col16"]
                                                          <-Map 35 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1148]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1145]
                                                          <-Reducer 29 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_215]
                                                              PartitionCols:_col5
                                                              Merge Join Operator [MERGEJOIN_1111] (rows=14487982 width=119)
                                                                Conds:RS_1190._col0=RS_211._col7(Inner),Output:["_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col10","_col11","_col12","_col13","_col14"]
                                                              <-Map 41 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_1190]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_1188] (rows=2300 width=4)
                                                                    Output:["_col0"]
                                                                    Filter Operator [FIL_1187] (rows=2300 width=4)
                                                                      predicate:p_promo_sk is not null
                                                                      TableScan [TS_40] (rows=2300 width=4)
                                                                        default@promotion,promotion,Tbl:COMPLETE,Col:COMPLETE,Output:["p_promo_sk"]
                                                              <-Reducer 28 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_211]
                                                                  PartitionCols:_col7
                                                                  Merge Join Operator [MERGEJOIN_1110] (rows=14487982 width=119)
                                                                    Conds:RS_206._col1=RS_1217._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                                  <-Reducer 27 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_206]
                                                                      PartitionCols:_col1
                                                                      Merge Join Operator [MERGEJOIN_1108] (rows=14487982 width=119)
                                                                        Conds:RS_203._col0=RS_1138._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                                      <-Map 18 [SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_1138]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1133] (rows=652 width=4)
                                                                            Output:["_col0"]
                                                                            Filter Operator [FIL_1130] (rows=652 width=8)
                                                                              predicate:((d_year = 2001) and d_date_sk is not null)
                                                                               Please refer to the previous TableScan [TS_6]
                                                                      <-Reducer 46 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_203]
                                                                          PartitionCols:_col0
                                                                          Merge Join Operator [MERGEJOIN_1107] (rows=40575792 width=314)
                                                                            Conds:RS_1208._col1=RS_1168._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                                          <-Map 44 [SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_1168]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1165] (rows=4667 width=111)
                                                                                Output:["_col0","_col1"]
                                                                                Filter Operator [FIL_1164] (rows=4667 width=311)
                                                                                  predicate:(i_current_price BETWEEN 36 AND 45 and (i_color) IN ('maroon', 'burnished', 'dim', 'steel', 'navajo', 'chocolate') and i_item_sk is not null)
                                                                                  TableScan [TS_46] (rows=462000 width=311)
                                                                                    default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_color","i_product_name"]
                                                                          <-Map 54 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1208]
                                                                              PartitionCols:_col1
                                                                              Select Operator [SEL_1207] (rows=417313408 width=355)
                                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                                                Filter Operator [FIL_1206] (rows=417313408 width=355)
                                                                                  predicate:(ss_cdemo_sk is not null and ss_sold_date_sk is not null and ss_promo_sk is not null and ss_addr_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_item_sk is not null and ss_ticket_number is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_204_d1_d_date_sk_min) AND DynamicValue(RS_204_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_204_d1_d_date_sk_bloom_filter)))
                                                                                  TableScan [TS_176] (rows=575995635 width=355)
                                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                                  <-Reducer 34 [BROADCAST_EDGE] vectorized
                                                                                    BROADCAST [RS_1205]
                                                                                      Group By Operator [GBY_1204] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                      <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                        PARTITION_ONLY_SHUFFLE [RS_1143]
                                                                                          Group By Operator [GBY_1141] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                            Select Operator [SEL_1139] (rows=652 width=4)
                                                                                              Output:["_col0"]
                                                                                               Please refer to the previous Select Operator [SEL_1133]
                                                                  <-Reducer 53 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_1217]
                                                                      PartitionCols:_col0
                                                                      Select Operator [SEL_1216] (rows=13257 width=4)
                                                                        Output:["_col0"]
                                                                        Filter Operator [FIL_1215] (rows=13257 width=228)
                                                                          predicate:(_col1 > (2 * _col2))
                                                                          Group By Operator [GBY_1214] (rows=39773 width=228)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                                          <-Reducer 52 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_196]
                                                                              PartitionCols:_col0
                                                                              Group By Operator [GBY_195] (rows=6482999 width=228)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col5)"],keys:_col0
                                                                                Merge Join Operator [MERGEJOIN_1109] (rows=183085709 width=227)
                                                                                  Conds:RS_1213._col0, _col1=RS_1182._col0, _col1(Inner),Output:["_col0","_col2","_col5"]
                                                                                <-Map 51 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1182]
                                                                                    PartitionCols:_col0, _col1
                                                                                    Select Operator [SEL_1180] (rows=28798881 width=120)
                                                                                      Output:["_col0","_col1","_col2"]
                                                                                      Filter Operator [FIL_1179] (rows=28798881 width=337)
                                                                                        predicate:(cr_item_sk is not null and cr_order_number is not null)
                                                                                        TableScan [TS_55] (rows=28798881 width=337)
                                                                                          default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_refunded_cash","cr_reversed_charge","cr_store_credit"]
                                                                                <-Map 55 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1213]
                                                                                    PartitionCols:_col0, _col1
                                                                                    Select Operator [SEL_1212] (rows=287989836 width=119)
                                                                                      Output:["_col0","_col1","_col2"]
                                                                                      Filter Operator [FIL_1211] (rows=287989836 width=119)
                                                                                        predicate:(cs_item_sk is not null and cs_order_number is not null and cs_item_sk BETWEEN DynamicValue(RS_201_item_i_item_sk_min) AND DynamicValue(RS_201_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_201_item_i_item_sk_bloom_filter)))
                                                                                        TableScan [TS_185] (rows=287989836 width=119)
                                                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                                        <-Reducer 47 [BROADCAST_EDGE] vectorized
                                                                                          BROADCAST [RS_1210]
                                                                                            Group By Operator [GBY_1209] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                            <-Map 44 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                              PARTITION_ONLY_SHUFFLE [RS_1173]
                                                                                                Group By Operator [GBY_1171] (rows=1 width=12)
                                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                  Select Operator [SEL_1169] (rows=4667 width=4)
                                                                                                    Output:["_col0"]
                                                                                                     Please refer to the previous Select Operator [SEL_1165]
                <-Reducer 4 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_1203]
                    PartitionCols:_col2, _col1, _col3
                    Select Operator [SEL_1202] (rows=23886447 width=1354)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                      Filter Operator [FIL_1201] (rows=23886447 width=1362)
                        predicate:_col14 is not null
                        Select Operator [SEL_1200] (rows=23886447 width=1362)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col14","_col15","_col16","_col17"]
                          Group By Operator [GBY_1199] (rows=23886447 width=1362)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                          <-Reducer 3 [SIMPLE_EDGE]
                            SHUFFLE [RS_128]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                              Group By Operator [GBY_127] (rows=23886447 width=1362)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col44)","sum(_col45)","sum(_col46)"],keys:_col30, _col47, _col31, _col9, _col11, _col16, _col17, _col18, _col19, _col25, _col26, _col27, _col28, _col48
                                Merge Join Operator [MERGEJOIN_1100] (rows=24224230 width=1153)
                                  Conds:RS_123._col33=RS_1152._col0(Inner),Output:["_col9","_col11","_col16","_col17","_col18","_col19","_col25","_col26","_col27","_col28","_col30","_col31","_col44","_col45","_col46","_col47","_col48"]
                                <-Map 37 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_1152]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_1150]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_123]
                                    PartitionCols:_col33
                                    Filter Operator [FIL_122] (rows=24224230 width=1327)
                                      predicate:(_col1 <> _col21)
                                      Merge Join Operator [MERGEJOIN_1099] (rows=24224230 width=1327)
                                        Conds:RS_1122._col0=RS_120._col36(Inner),Output:["_col1","_col9","_col11","_col16","_col17","_col18","_col19","_col21","_col25","_col26","_col27","_col28","_col30","_col31","_col33","_col44","_col45","_col46","_col47","_col48"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_1122]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_1121]
                                      <-Reducer 8 [SIMPLE_EDGE]
                                        SHUFFLE [RS_120]
                                          PartitionCols:_col36
                                          Merge Join Operator [MERGEJOIN_1098] (rows=23886447 width=1240)
                                            Conds:RS_112._col0=RS_113._col15(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col23","_col24","_col25","_col26","_col28","_col29","_col31","_col36","_col42","_col43","_col44","_col45","_col46"]
                                          <-Reducer 7 [SIMPLE_EDGE]
                                            SHUFFLE [RS_112]
                                              PartitionCols:_col0
                                               Please refer to the previous Merge Join Operator [MERGEJOIN_1088]
                                          <-Reducer 25 [SIMPLE_EDGE]
                                            SHUFFLE [RS_113]
                                              PartitionCols:_col15
                                              Merge Join Operator [MERGEJOIN_1097] (rows=23886447 width=788)
                                                Conds:RS_1197._col0, _col1=RS_94._col12, _col19(Inner),Output:["_col3","_col4","_col5","_col6","_col8","_col9","_col11","_col15","_col16","_col22","_col23","_col24","_col25","_col26"]
                                              <-Map 39 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1197]
                                                  PartitionCols:_col0, _col1
                                                   Please refer to the previous Select Operator [SEL_1196]
                                              <-Reducer 24 [SIMPLE_EDGE]
                                                SHUFFLE [RS_94]
                                                  PartitionCols:_col12, _col19
                                                  Merge Join Operator [MERGEJOIN_1096] (rows=14487982 width=661)
                                                    Conds:RS_1157._col0=RS_90._col11(Inner),Output:["_col1","_col2","_col3","_col4","_col6","_col7","_col9","_col12","_col13","_col14","_col19","_col20","_col21","_col22","_col23","_col24"]
                                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1157]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1155]
                                                  <-Reducer 23 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_90]
                                                      PartitionCols:_col11
                                                      Merge Join Operator [MERGEJOIN_1095] (rows=14487982 width=300)
                                                        Conds:RS_1193._col0=RS_86._col9(Inner),Output:["_col1","_col2","_col4","_col7","_col8","_col9","_col11","_col14","_col15","_col16","_col17","_col18","_col19"]
                                                      <-Map 40 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1193]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1192]
                                                      <-Reducer 22 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_86]
                                                          PartitionCols:_col9
                                                          Merge Join Operator [MERGEJOIN_1094] (rows=14487982 width=123)
                                                            Conds:RS_1147._col0=RS_82._col5(Inner),Output:["_col1","_col4","_col5","_col6","_col8","_col9","_col11","_col12","_col13","_col14","_col15","_col16"]
                                                          <-Map 35 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1147]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1145]
                                                          <-Reducer 21 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_82]
                                                              PartitionCols:_col5
                                                              Merge Join Operator [MERGEJOIN_1093] (rows=14487982 width=119)
                                                                Conds:RS_1189._col0=RS_78._col7(Inner),Output:["_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col10","_col11","_col12","_col13","_col14"]
                                                              <-Map 41 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_1189]
                                                                  PartitionCols:_col0
                                                                   Please refer to the previous Select Operator [SEL_1188]
                                                              <-Reducer 20 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_78]
                                                                  PartitionCols:_col7
                                                                  Merge Join Operator [MERGEJOIN_1092] (rows=14487982 width=119)
                                                                    Conds:RS_73._col1=RS_1186._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                                  <-Reducer 19 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_73]
                                                                      PartitionCols:_col1
                                                                      Merge Join Operator [MERGEJOIN_1090] (rows=14487982 width=119)
                                                                        Conds:RS_70._col0=RS_1136._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                                      <-Map 18 [SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_1136]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1132] (rows=652 width=4)
                                                                            Output:["_col0"]
                                                                            Filter Operator [FIL_1129] (rows=652 width=8)
                                                                              predicate:((d_year = 2000) and d_date_sk is not null)
                                                                               Please refer to the previous TableScan [TS_6]
                                                                      <-Reducer 43 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_70]
                                                                          PartitionCols:_col0
                                                                          Merge Join Operator [MERGEJOIN_1089] (rows=40575792 width=314)
                                                                            Conds:RS_1163._col1=RS_1166._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                                          <-Map 44 [SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_1166]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1165]
                                                                          <-Map 42 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1163]
                                                                              PartitionCols:_col1
                                                                              Select Operator [SEL_1162] (rows=417313408 width=355)
                                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                                                Filter Operator [FIL_1161] (rows=417313408 width=355)
                                                                                  predicate:(ss_cdemo_sk is not null and ss_sold_date_sk is not null and ss_promo_sk is not null and ss_addr_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_item_sk is not null and ss_ticket_number is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_71_d1_d_date_sk_min) AND DynamicValue(RS_71_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_71_d1_d_date_sk_bloom_filter)))
                                                                                  TableScan [TS_43] (rows=575995635 width=355)
                                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                                  <-Reducer 26 [BROADCAST_EDGE] vectorized
                                                                                    BROADCAST [RS_1160]
                                                                                      Group By Operator [GBY_1159] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                      <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                        PARTITION_ONLY_SHUFFLE [RS_1142]
                                                                                          Group By Operator [GBY_1140] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                            Select Operator [SEL_1137] (rows=652 width=4)
                                                                                              Output:["_col0"]
                                                                                               Please refer to the previous Select Operator [SEL_1132]
                                                                  <-Reducer 50 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_1186]
                                                                      PartitionCols:_col0
                                                                      Select Operator [SEL_1185] (rows=13257 width=4)
                                                                        Output:["_col0"]
                                                                        Filter Operator [FIL_1184] (rows=13257 width=228)
                                                                          predicate:(_col1 > (2 * _col2))
                                                                          Group By Operator [GBY_1183] (rows=39773 width=228)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                                          <-Reducer 49 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_63]
                                                                              PartitionCols:_col0
                                                                              Group By Operator [GBY_62] (rows=6482999 width=228)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col5)"],keys:_col0
                                                                                Merge Join Operator [MERGEJOIN_1091] (rows=183085709 width=227)
                                                                                  Conds:RS_1178._col0, _col1=RS_1181._col0, _col1(Inner),Output:["_col0","_col2","_col5"]
                                                                                <-Map 51 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1181]
                                                                                    PartitionCols:_col0, _col1
                                                                                     Please refer to the previous Select Operator [SEL_1180]
                                                                                <-Map 48 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1178]
                                                                                    PartitionCols:_col0, _col1
                                                                                    Select Operator [SEL_1177] (rows=287989836 width=119)
                                                                                      Output:["_col0","_col1","_col2"]
                                                                                      Filter Operator [FIL_1176] (rows=287989836 width=119)
                                                                                        predicate:(cs_item_sk is not null and cs_order_number is not null and cs_item_sk BETWEEN DynamicValue(RS_68_item_i_item_sk_min) AND DynamicValue(RS_68_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_68_item_i_item_sk_bloom_filter)))
                                                                                        TableScan [TS_52] (rows=287989836 width=119)
                                                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                                        <-Reducer 45 [BROADCAST_EDGE] vectorized
                                                                                          BROADCAST [RS_1175]
                                                                                            Group By Operator [GBY_1174] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                            <-Map 44 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                              PARTITION_ONLY_SHUFFLE [RS_1172]
                                                                                                Group By Operator [GBY_1170] (rows=1 width=12)
                                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                  Select Operator [SEL_1167] (rows=4667 width=4)
                                                                                                    Output:["_col0"]
                                                                                                     Please refer to the previous Select Operator [SEL_1165]

