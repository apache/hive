Warning: Map Join MAPJOIN[171][bigTable=?] in task 'Reducer 19' is a cross product
PREHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 13 <- Reducer 16 (BROADCAST_EDGE), Reducer 21 (BROADCAST_EDGE), Reducer 8 (BROADCAST_EDGE)
Reducer 10 <- Map 9 (SIMPLE_EDGE)
Reducer 11 <- Map 9 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 18 (SIMPLE_EDGE), Reducer 12 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 10 (ONE_TO_ONE_EDGE)
Reducer 20 <- Map 22 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 13 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 15 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 20 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_227]
        Limit [LIM_226] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_225] (rows=127775039 width=88)
            Output:["_col0","_col1"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_224]
              Filter Operator [FIL_223] (rows=127775039 width=88)
                predicate:(_col1 >= 10L)
                Group By Operator [GBY_222] (rows=383325119 width=88)
                  Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                <-Reducer 5 [SIMPLE_EDGE]
                  SHUFFLE [RS_69]
                    PartitionCols:_col0
                    Group By Operator [GBY_68] (rows=766650239 width=88)
                      Output:["_col0","_col1"],aggregations:["count()"],keys:_col9
                      Merge Join Operator [MERGEJOIN_174] (rows=766650239 width=88)
                        Conds:RS_64._col4=RS_65._col0(Inner),Output:["_col9"]
                      <-Reducer 20 [SIMPLE_EDGE]
                        SHUFFLE [RS_65]
                          PartitionCols:_col0
                          Select Operator [SEL_54] (rows=169400 width=1436)
                            Output:["_col0"]
                            Filter Operator [FIL_53] (rows=169400 width=1436)
                              predicate:(_col4 > (1.2 * CAST( _col0 AS decimal(16,6))))
                              Merge Join Operator [MERGEJOIN_172] (rows=508200 width=1436)
                                Conds:RS_213._col1=RS_216._col2(Inner),Output:["_col0","_col3","_col4"]
                              <-Map 22 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_216]
                                  PartitionCols:_col2
                                  Select Operator [SEL_215] (rows=462000 width=1436)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_214] (rows=462000 width=1436)
                                      predicate:(i_category is not null and i_item_sk is not null)
                                      TableScan [TS_44] (rows=462000 width=1436)
                                        default@item,i,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_current_price","i_category"]
                              <-Reducer 19 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_213]
                                  PartitionCols:_col1
                                  Map Join Operator [MAPJOIN_212] (rows=231000 width=1445)
                                    Conds:(Inner),Output:["_col0","_col1"]
                                  <-Reducer 12 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_209]
                                      Select Operator [SEL_208] (rows=1 width=8)
                                        Filter Operator [FIL_207] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_206] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Reducer 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_205]
                                              Group By Operator [GBY_204] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count()"]
                                                Select Operator [SEL_203] (rows=9131 width=1119)
                                                  Group By Operator [GBY_202] (rows=9131 width=1119)
                                                    Output:["_col0"],keys:KEY._col0
                                                  <-Map 9 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_186]
                                                      PartitionCols:_col0
                                                      Group By Operator [GBY_184] (rows=18262 width=1119)
                                                        Output:["_col0"],keys:d_month_seq
                                                        Select Operator [SEL_182] (rows=18262 width=1119)
                                                          Output:["d_month_seq"]
                                                          Filter Operator [FIL_180] (rows=18262 width=1119)
                                                            predicate:((d_moy = 2) and (d_year = 2000))
                                                            TableScan [TS_3] (rows=73049 width=1119)
                                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_month_seq","d_year","d_moy"]
                                  <-Select Operator [SEL_211] (rows=231000 width=1436)
                                      Output:["_col0","_col1"]
                                      Group By Operator [GBY_210] (rows=231000 width=1436)
                                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                                      <-Map 18 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_201]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_200] (rows=462000 width=1436)
                                            Output:["_col0","_col1","_col2"],aggregations:["sum(i_current_price)","count(i_current_price)"],keys:i_category
                                            Filter Operator [FIL_199] (rows=462000 width=1436)
                                              predicate:i_category is not null
                                              TableScan [TS_23] (rows=462000 width=1436)
                                                default@item,j,Tbl:COMPLETE,Col:NONE,Output:["i_current_price","i_category"]
                      <-Reducer 4 [SIMPLE_EDGE]
                        SHUFFLE [RS_64]
                          PartitionCols:_col4
                          Merge Join Operator [MERGEJOIN_173] (rows=696954748 width=88)
                            Conds:RS_61._col5=RS_62._col0(Inner),Output:["_col4","_col9"]
                          <-Reducer 15 [SIMPLE_EDGE]
                            SHUFFLE [RS_62]
                              PartitionCols:_col0
                              Merge Join Operator [MERGEJOIN_170] (rows=88000001 width=860)
                                Conds:RS_193._col1=RS_196._col0(Inner),Output:["_col0","_col3"]
                              <-Map 14 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_193]
                                  PartitionCols:_col1
                                  Select Operator [SEL_192] (rows=80000000 width=860)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_191] (rows=80000000 width=860)
                                      predicate:(c_current_addr_sk is not null and c_customer_sk is not null)
                                      TableScan [TS_13] (rows=80000000 width=860)
                                        default@customer,c,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_current_addr_sk"]
                              <-Map 17 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_196]
                                  PartitionCols:_col0
                                  Select Operator [SEL_195] (rows=40000000 width=1014)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_194] (rows=40000000 width=1014)
                                      predicate:ca_address_sk is not null
                                      TableScan [TS_16] (rows=40000000 width=1014)
                                        default@customer_address,a,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_state"]
                          <-Reducer 3 [SIMPLE_EDGE]
                            SHUFFLE [RS_61]
                              PartitionCols:_col5
                              Merge Join Operator [MERGEJOIN_169] (rows=633595212 width=88)
                                Conds:RS_58._col0=RS_221._col0(Inner),Output:["_col4","_col5"]
                              <-Reducer 2 [SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_58]
                                  PartitionCols:_col0
                                  Merge Join Operator [MERGEJOIN_168] (rows=80353 width=1119)
                                    Conds:RS_178._col1=RS_188._col0(Inner),Output:["_col0"]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_178]
                                      PartitionCols:_col1
                                      Select Operator [SEL_177] (rows=73049 width=1119)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_176] (rows=73049 width=1119)
                                          predicate:(d_date_sk is not null and d_month_seq is not null)
                                          TableScan [TS_0] (rows=73049 width=1119)
                                            default@date_dim,d,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_month_seq"]
                                  <-Reducer 10 [ONE_TO_ONE_EDGE] vectorized
                                    FORWARD [RS_188]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_187] (rows=9131 width=1119)
                                        Output:["_col0"],keys:KEY._col0
                                      <-Map 9 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_185]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_183] (rows=18262 width=1119)
                                            Output:["_col0"],keys:d_month_seq
                                            Select Operator [SEL_181] (rows=18262 width=1119)
                                              Output:["d_month_seq"]
                                              Filter Operator [FIL_179] (rows=18262 width=1119)
                                                predicate:((d_moy = 2) and (d_year = 2000) and d_month_seq is not null)
                                                 Please refer to the previous TableScan [TS_3]
                              <-Map 13 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_221]
                                  PartitionCols:_col0
                                  Select Operator [SEL_220] (rows=575995635 width=88)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_219] (rows=575995635 width=88)
                                      predicate:((ss_customer_sk BETWEEN DynamicValue(RS_62_c_c_customer_sk_min) AND DynamicValue(RS_62_c_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_62_c_c_customer_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_65_i_i_item_sk_min) AND DynamicValue(RS_65_i_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_65_i_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_58_d_d_date_sk_min) AND DynamicValue(RS_58_d_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_58_d_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_item_sk is not null and ss_sold_date_sk is not null)
                                      TableScan [TS_10] (rows=575995635 width=88)
                                        default@store_sales,s,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk"]
                                      <-Reducer 16 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_198]
                                          Group By Operator [GBY_197] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=88000000)"]
                                          <-Reducer 15 [CUSTOM_SIMPLE_EDGE]
                                            SHUFFLE [RS_130]
                                              Group By Operator [GBY_129] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=88000000)"]
                                                Select Operator [SEL_128] (rows=88000001 width=860)
                                                  Output:["_col0"]
                                                   Please refer to the previous Merge Join Operator [MERGEJOIN_170]
                                      <-Reducer 21 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_218]
                                          Group By Operator [GBY_217] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Reducer 20 [CUSTOM_SIMPLE_EDGE]
                                            SHUFFLE [RS_135]
                                              Group By Operator [GBY_134] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_133] (rows=169400 width=1436)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_54]
                                      <-Reducer 8 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_190]
                                          Group By Operator [GBY_189] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                            PARTITION_ONLY_SHUFFLE [RS_125]
                                              Group By Operator [GBY_124] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_123] (rows=80353 width=1119)
                                                  Output:["_col0"]
                                                   Please refer to the previous Merge Join Operator [MERGEJOIN_168]

