Warning: Map Join MAPJOIN[173][bigTable=?] in task 'Reducer 15' is a cross product
PREHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 3 (BROADCAST_EDGE)
Map 16 <- Reducer 15 (BROADCAST_EDGE)
Map 6 <- Map 1 (BROADCAST_EDGE), Reducer 17 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE), Reducer 5 (BROADCAST_EDGE)
Reducer 17 <- Map 16 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 2 (SIMPLE_EDGE)
Reducer 4 <- Map 2 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Map 6 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 8 <- Map 16 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 10 vectorized
      File Output Operator [FS_238]
        Limit [LIM_237] (rows=1 width=94)
          Number of rows:100
          Select Operator [SEL_236] (rows=1 width=94)
            Output:["_col0","_col1"]
          <-Reducer 9 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_235]
              Top N Key Operator [TNK_234] (rows=1 width=94)
                keys:_col1,top n:100
                Filter Operator [FIL_233] (rows=1 width=94)
                  predicate:(_col1 >= 10L)
                  Group By Operator [GBY_232] (rows=5 width=94)
                    Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                  <-Reducer 8 [SIMPLE_EDGE]
                    SHUFFLE [RS_70]
                      PartitionCols:_col0
                      Group By Operator [GBY_69] (rows=15 width=94)
                        Output:["_col0","_col1"],aggregations:["count()"],keys:_col9
                        Merge Join Operator [MERGEJOIN_176] (rows=7192227 width=86)
                          Conds:RS_65._col4=RS_216._col0(Inner),Output:["_col9"]
                        <-Map 16 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_216]
                            PartitionCols:_col0
                            Select Operator [SEL_215] (rows=153611 width=227)
                              Output:["_col0"]
                              Filter Operator [FIL_214] (rows=153611 width=227)
                                predicate:(_col4 > _col1)
                                Map Join Operator [MAPJOIN_213] (rows=460833 width=227)
                                  Conds:RS_210._col0=SEL_212._col2(Inner),Output:["_col1","_col3","_col4"]
                                <-Reducer 15 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_210]
                                    PartitionCols:_col0
                                    Map Join Operator [MAPJOIN_209] (rows=10 width=202)
                                      Conds:(Inner),Output:["_col0","_col1"]
                                    <-Reducer 5 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_205]
                                        Select Operator [SEL_204] (rows=1 width=8)
                                          Filter Operator [FIL_203] (rows=1 width=8)
                                            predicate:(sq_count_check(_col0) <= 1)
                                            Group By Operator [GBY_202] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Reducer 4 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_201]
                                                Group By Operator [GBY_200] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count()"]
                                                  Select Operator [SEL_199] (rows=25 width=4)
                                                    Group By Operator [GBY_198] (rows=25 width=4)
                                                      Output:["_col0"],keys:KEY._col0
                                                    <-Map 2 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_188]
                                                        PartitionCols:_col0
                                                        Group By Operator [GBY_186] (rows=25 width=4)
                                                          Output:["_col0"],keys:d_month_seq
                                                          Select Operator [SEL_184] (rows=50 width=12)
                                                            Output:["d_month_seq"]
                                                            Filter Operator [FIL_182] (rows=50 width=12)
                                                              predicate:((d_year = 2000) and (d_moy = 2))
                                                              TableScan [TS_3] (rows=73049 width=12)
                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_month_seq","d_year","d_moy"]
                                    <-Select Operator [SEL_208] (rows=10 width=202)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_207] (rows=10 width=210)
                                          predicate:CAST( CAST( (_col1 / _col2) AS decimal(11,6)) AS decimal(16,6)) is not null
                                          Group By Operator [GBY_206] (rows=10 width=210)
                                            Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                                          <-Map 14 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_197]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_196] (rows=10 width=210)
                                                Output:["_col0","_col1","_col2"],aggregations:["sum(i_current_price)","count(i_current_price)"],keys:i_category
                                                Filter Operator [FIL_195] (rows=462000 width=201)
                                                  predicate:i_category is not null
                                                  TableScan [TS_23] (rows=462000 width=201)
                                                    default@item,j,Tbl:COMPLETE,Col:COMPLETE,Output:["i_current_price","i_category"]
                                <-Select Operator [SEL_212] (rows=460833 width=205)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_211] (rows=460833 width=205)
                                      predicate:(i_current_price is not null and i_item_sk is not null and i_category is not null)
                                      TableScan [TS_45] (rows=462000 width=205)
                                        default@item,i,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_category"]
                        <-Reducer 7 [SIMPLE_EDGE]
                          SHUFFLE [RS_65]
                            PartitionCols:_col4
                            Merge Join Operator [MERGEJOIN_175] (rows=7192227 width=90)
                              Conds:RS_225._col5=RS_63._col0(Inner),Output:["_col4","_col9"]
                            <-Map 6 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_225]
                                PartitionCols:_col5
                                Map Join Operator [MAPJOIN_224] (rows=7192227 width=4)
                                  Conds:RS_194._col0=SEL_223._col0(Inner),Output:["_col4","_col5"]
                                <-Map 1 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_194]
                                    PartitionCols:_col0
                                    Map Join Operator [MAPJOIN_193] (rows=660 width=4)
                                      Conds:SEL_192._col1=RS_190._col0(Inner),Output:["_col0"]
                                    <-Reducer 3 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_190]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_189] (rows=25 width=4)
                                          Output:["_col0"],keys:KEY._col0
                                        <-Map 2 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_187]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_185] (rows=25 width=4)
                                              Output:["_col0"],keys:d_month_seq
                                              Select Operator [SEL_183] (rows=50 width=12)
                                                Output:["d_month_seq"]
                                                Filter Operator [FIL_181] (rows=50 width=12)
                                                  predicate:((d_year = 2000) and (d_moy = 2) and d_month_seq is not null)
                                                   Please refer to the previous TableScan [TS_3]
                                    <-Select Operator [SEL_192] (rows=73049 width=8)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_191] (rows=73049 width=8)
                                          predicate:(d_date_sk is not null and d_month_seq is not null)
                                          TableScan [TS_0] (rows=73049 width=8)
                                            default@date_dim,d,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_month_seq"]
                                <-Select Operator [SEL_223] (rows=525327388 width=11)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_222] (rows=525327388 width=11)
                                      predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_item_sk is not null and ss_item_sk BETWEEN DynamicValue(RS_66_i_i_item_sk_min) AND DynamicValue(RS_66_i_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_66_i_i_item_sk_bloom_filter)))
                                      TableScan [TS_10] (rows=575995635 width=11)
                                        default@store_sales,s,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk"]
                                      <-Reducer 17 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_221]
                                          Group By Operator [GBY_220] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_219]
                                              Group By Operator [GBY_218] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_217] (rows=153611 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_215]
                            <-Reducer 12 [SIMPLE_EDGE]
                              SHUFFLE [RS_63]
                                PartitionCols:_col0
                                Merge Join Operator [MERGEJOIN_172] (rows=80000000 width=90)
                                  Conds:RS_228._col1=RS_231._col0(Inner),Output:["_col0","_col3"]
                                <-Map 11 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_228]
                                    PartitionCols:_col1
                                    Select Operator [SEL_227] (rows=80000000 width=8)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_226] (rows=80000000 width=8)
                                        predicate:(c_current_addr_sk is not null and c_customer_sk is not null)
                                        TableScan [TS_13] (rows=80000000 width=8)
                                          default@customer,c,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_addr_sk"]
                                <-Map 13 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_231]
                                    PartitionCols:_col0
                                    Select Operator [SEL_230] (rows=40000000 width=90)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_229] (rows=40000000 width=90)
                                        predicate:ca_address_sk is not null
                                        TableScan [TS_16] (rows=40000000 width=90)
                                          default@customer_address,a,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state"]

