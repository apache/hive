PREHOOK: query: explain
select  
   s_store_name
  ,s_company_id
  ,s_street_number
  ,s_street_name
  ,s_street_type
  ,s_suite_number
  ,s_city
  ,s_county
  ,s_state
  ,s_zip
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk <= 30 ) then 1 else 0 end)  as `30 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 30) and 
                 (sr_returned_date_sk - ss_sold_date_sk <= 60) then 1 else 0 end )  as `31-60 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 60) and 
                 (sr_returned_date_sk - ss_sold_date_sk <= 90) then 1 else 0 end)  as `61-90 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 90) and
                 (sr_returned_date_sk - ss_sold_date_sk <= 120) then 1 else 0 end)  as `91-120 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk  > 120) then 1 else 0 end)  as `>120 days` 
from
   store_sales
  ,store_returns
  ,store
  ,date_dim d1
  ,date_dim d2
where
    d2.d_year = 2000
and d2.d_moy  = 9
and ss_ticket_number = sr_ticket_number
and ss_item_sk = sr_item_sk
and ss_sold_date_sk   = d1.d_date_sk
and sr_returned_date_sk   = d2.d_date_sk
and ss_customer_sk = sr_customer_sk
and ss_store_sk = s_store_sk
group by
   s_store_name
  ,s_company_id
  ,s_street_number
  ,s_street_name
  ,s_street_type
  ,s_suite_number
  ,s_city
  ,s_county
  ,s_state
  ,s_zip
order by s_store_name
        ,s_company_id
        ,s_street_number
        ,s_street_name
        ,s_street_type
        ,s_suite_number
        ,s_city
        ,s_county
        ,s_state
        ,s_zip
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  
   s_store_name
  ,s_company_id
  ,s_street_number
  ,s_street_name
  ,s_street_type
  ,s_suite_number
  ,s_city
  ,s_county
  ,s_state
  ,s_zip
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk <= 30 ) then 1 else 0 end)  as `30 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 30) and 
                 (sr_returned_date_sk - ss_sold_date_sk <= 60) then 1 else 0 end )  as `31-60 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 60) and 
                 (sr_returned_date_sk - ss_sold_date_sk <= 90) then 1 else 0 end)  as `61-90 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 90) and
                 (sr_returned_date_sk - ss_sold_date_sk <= 120) then 1 else 0 end)  as `91-120 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk  > 120) then 1 else 0 end)  as `>120 days` 
from
   store_sales
  ,store_returns
  ,store
  ,date_dim d1
  ,date_dim d2
where
    d2.d_year = 2000
and d2.d_moy  = 9
and ss_ticket_number = sr_ticket_number
and ss_item_sk = sr_item_sk
and ss_sold_date_sk   = d1.d_date_sk
and sr_returned_date_sk   = d2.d_date_sk
and ss_customer_sk = sr_customer_sk
and ss_store_sk = s_store_sk
group by
   s_store_name
  ,s_company_id
  ,s_street_number
  ,s_street_name
  ,s_street_type
  ,s_suite_number
  ,s_city
  ,s_county
  ,s_state
  ,s_zip
order by s_store_name
        ,s_company_id
        ,s_street_number
        ,s_street_name
        ,s_street_type
        ,s_suite_number
        ,s_city
        ,s_county
        ,s_state
        ,s_zip
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 12 <- Reducer 10 (BROADCAST_EDGE), Reducer 14 (BROADCAST_EDGE), Reducer 16 (BROADCAST_EDGE), Reducer 8 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Reducer 10 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 11 (SIMPLE_EDGE)
Reducer 3 <- Map 12 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 13 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 15 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_155]
        Limit [LIM_154] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_153] (rows=383325119 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_152]
              Group By Operator [GBY_151] (rows=383325119 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9
              <-Reducer 5 [SIMPLE_EDGE]
                SHUFFLE [RS_30]
                  PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                  Group By Operator [GBY_29] (rows=766650239 width=88)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"],aggregations:["sum(_col10)","sum(_col11)","sum(_col12)","sum(_col13)","sum(_col14)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                    Select Operator [SEL_27] (rows=766650239 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
                      Merge Join Operator [MERGEJOIN_119] (rows=766650239 width=88)
                        Conds:RS_24._col10=RS_142._col0(Inner),Output:["_col0","_col7","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23"]
                      <-Map 15 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_142]
                          PartitionCols:_col0
                          Select Operator [SEL_141] (rows=1704 width=1910)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                            Filter Operator [FIL_140] (rows=1704 width=1910)
                              predicate:s_store_sk is not null
                              TableScan [TS_12] (rows=1704 width=1910)
                                default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_name","s_company_id","s_street_number","s_street_name","s_street_type","s_suite_number","s_city","s_county","s_state","s_zip"]
                      <-Reducer 4 [SIMPLE_EDGE]
                        SHUFFLE [RS_24]
                          PartitionCols:_col10
                          Merge Join Operator [MERGEJOIN_118] (rows=696954748 width=88)
                            Conds:RS_21._col7=RS_134._col0(Inner),Output:["_col0","_col7","_col10"]
                          <-Map 13 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_134]
                              PartitionCols:_col0
                              Select Operator [SEL_133] (rows=73049 width=1119)
                                Output:["_col0"]
                                Filter Operator [FIL_132] (rows=73049 width=1119)
                                  predicate:d_date_sk is not null
                                  TableScan [TS_9] (rows=73049 width=1119)
                                    default@date_dim,d1,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk"]
                          <-Reducer 3 [SIMPLE_EDGE]
                            SHUFFLE [RS_21]
                              PartitionCols:_col7
                              Merge Join Operator [MERGEJOIN_117] (rows=633595212 width=88)
                                Conds:RS_18._col1, _col2, _col3=RS_150._col1, _col2, _col4(Inner),Output:["_col0","_col7","_col10"]
                              <-Reducer 2 [SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_18]
                                  PartitionCols:_col1, _col2, _col3
                                  Merge Join Operator [MERGEJOIN_116] (rows=63350266 width=77)
                                    Conds:RS_122._col0=RS_125._col0(Inner),Output:["_col0","_col1","_col2","_col3"]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_122]
                                      PartitionCols:_col0
                                      Select Operator [SEL_121] (rows=57591150 width=77)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Filter Operator [FIL_120] (rows=57591150 width=77)
                                          predicate:(sr_customer_sk is not null and sr_item_sk is not null and sr_returned_date_sk is not null and sr_ticket_number is not null)
                                          TableScan [TS_0] (rows=57591150 width=77)
                                            default@store_returns,store_returns,Tbl:COMPLETE,Col:NONE,Output:["sr_returned_date_sk","sr_item_sk","sr_customer_sk","sr_ticket_number"]
                                  <-Map 11 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_125]
                                      PartitionCols:_col0
                                      Select Operator [SEL_124] (rows=18262 width=1119)
                                        Output:["_col0"]
                                        Filter Operator [FIL_123] (rows=18262 width=1119)
                                          predicate:((d_moy = 9) and (d_year = 2000) and d_date_sk is not null)
                                          TableScan [TS_3] (rows=73049 width=1119)
                                            default@date_dim,d2,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                              <-Map 12 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_150]
                                  PartitionCols:_col1, _col2, _col4
                                  Select Operator [SEL_149] (rows=575995635 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                    Filter Operator [FIL_148] (rows=575995635 width=88)
                                      predicate:((ss_customer_sk BETWEEN DynamicValue(RS_18_store_returns_sr_customer_sk_min) AND DynamicValue(RS_18_store_returns_sr_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_18_store_returns_sr_customer_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_18_store_returns_sr_item_sk_min) AND DynamicValue(RS_18_store_returns_sr_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_18_store_returns_sr_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_22_d1_d_date_sk_min) AND DynamicValue(RS_22_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_22_d1_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_25_store_s_store_sk_min) AND DynamicValue(RS_25_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_25_store_s_store_sk_bloom_filter))) and (ss_ticket_number BETWEEN DynamicValue(RS_18_store_returns_sr_ticket_number_min) AND DynamicValue(RS_18_store_returns_sr_ticket_number_max) and in_bloom_filter(ss_ticket_number, DynamicValue(RS_18_store_returns_sr_ticket_number_bloom_filter))) and ss_customer_sk is not null and ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                      TableScan [TS_6] (rows=575995635 width=88)
                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number"]
                                      <-Reducer 10 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_131]
                                          Group By Operator [GBY_130] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=63350264)"]
                                          <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                            PARTITION_ONLY_SHUFFLE [RS_93]
                                              Group By Operator [GBY_92] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=63350264)"]
                                                Select Operator [SEL_91] (rows=63350266 width=77)
                                                  Output:["_col0"]
                                                   Please refer to the previous Merge Join Operator [MERGEJOIN_116]
                                      <-Reducer 14 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_139]
                                          Group By Operator [GBY_138] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_137]
                                              Group By Operator [GBY_136] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_135] (rows=73049 width=1119)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_133]
                                      <-Reducer 16 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_147]
                                          Group By Operator [GBY_146] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_145]
                                              Group By Operator [GBY_144] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_143] (rows=1704 width=1910)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_141]
                                      <-Reducer 8 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_127]
                                          Group By Operator [GBY_126] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=63350264)"]
                                          <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                            PARTITION_ONLY_SHUFFLE [RS_83]
                                              Group By Operator [GBY_82] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=63350264)"]
                                                Select Operator [SEL_81] (rows=63350266 width=77)
                                                  Output:["_col0"]
                                                   Please refer to the previous Merge Join Operator [MERGEJOIN_116]
                                      <-Reducer 9 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_129]
                                          Group By Operator [GBY_128] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=63350264)"]
                                          <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                            PARTITION_ONLY_SHUFFLE [RS_88]
                                              Group By Operator [GBY_87] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=63350264)"]
                                                Select Operator [SEL_86] (rows=63350266 width=77)
                                                  Output:["_col0"]
                                                   Please refer to the previous Merge Join Operator [MERGEJOIN_116]

