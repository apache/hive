PREHOOK: query: explain
select  
   s_store_name
  ,s_company_id
  ,s_street_number
  ,s_street_name
  ,s_street_type
  ,s_suite_number
  ,s_city
  ,s_county
  ,s_state
  ,s_zip
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk <= 30 ) then 1 else 0 end)  as `30 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 30) and 
                 (sr_returned_date_sk - ss_sold_date_sk <= 60) then 1 else 0 end )  as `31-60 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 60) and 
                 (sr_returned_date_sk - ss_sold_date_sk <= 90) then 1 else 0 end)  as `61-90 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 90) and
                 (sr_returned_date_sk - ss_sold_date_sk <= 120) then 1 else 0 end)  as `91-120 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk  > 120) then 1 else 0 end)  as `>120 days` 
from
   store_sales
  ,store_returns
  ,store
  ,date_dim d1
  ,date_dim d2
where
    d2.d_year = 2000
and d2.d_moy  = 9
and ss_ticket_number = sr_ticket_number
and ss_item_sk = sr_item_sk
and ss_sold_date_sk   = d1.d_date_sk
and sr_returned_date_sk   = d2.d_date_sk
and ss_customer_sk = sr_customer_sk
and ss_store_sk = s_store_sk
group by
   s_store_name
  ,s_company_id
  ,s_street_number
  ,s_street_name
  ,s_street_type
  ,s_suite_number
  ,s_city
  ,s_county
  ,s_state
  ,s_zip
order by s_store_name
        ,s_company_id
        ,s_street_number
        ,s_street_name
        ,s_street_type
        ,s_suite_number
        ,s_city
        ,s_county
        ,s_state
        ,s_zip
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
   s_store_name
  ,s_company_id
  ,s_street_number
  ,s_street_name
  ,s_street_type
  ,s_suite_number
  ,s_city
  ,s_county
  ,s_state
  ,s_zip
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk <= 30 ) then 1 else 0 end)  as `30 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 30) and 
                 (sr_returned_date_sk - ss_sold_date_sk <= 60) then 1 else 0 end )  as `31-60 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 60) and 
                 (sr_returned_date_sk - ss_sold_date_sk <= 90) then 1 else 0 end)  as `61-90 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 90) and
                 (sr_returned_date_sk - ss_sold_date_sk <= 120) then 1 else 0 end)  as `91-120 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk  > 120) then 1 else 0 end)  as `>120 days` 
from
   store_sales
  ,store_returns
  ,store
  ,date_dim d1
  ,date_dim d2
where
    d2.d_year = 2000
and d2.d_moy  = 9
and ss_ticket_number = sr_ticket_number
and ss_item_sk = sr_item_sk
and ss_sold_date_sk   = d1.d_date_sk
and sr_returned_date_sk   = d2.d_date_sk
and ss_customer_sk = sr_customer_sk
and ss_store_sk = s_store_sk
group by
   s_store_name
  ,s_company_id
  ,s_street_number
  ,s_street_name
  ,s_street_type
  ,s_suite_number
  ,s_city
  ,s_county
  ,s_state
  ,s_zip
order by s_store_name
        ,s_company_id
        ,s_street_number
        ,s_street_name
        ,s_street_type
        ,s_suite_number
        ,s_city
        ,s_county
        ,s_state
        ,s_zip
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 10 <- Reducer 8 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 3 <- Map 10 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 11 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 12 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_147]
        Limit [LIM_146] (rows=100 width=858)
          Number of rows:100
          Select Operator [SEL_145] (rows=11945216 width=857)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_144]
              Group By Operator [GBY_143] (rows=11945216 width=857)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9
              <-Reducer 5 [SIMPLE_EDGE]
                SHUFFLE [RS_30]
                  PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                  Group By Operator [GBY_29] (rows=11945216 width=857)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"],aggregations:["sum(_col10)","sum(_col11)","sum(_col12)","sum(_col13)","sum(_col14)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                    Select Operator [SEL_27] (rows=11945216 width=821)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
                      Top N Key Operator [TNK_59] (rows=11945216 width=821)
                        keys:_col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21,top n:100
                        Merge Join Operator [MERGEJOIN_125] (rows=11945216 width=821)
                          Conds:RS_24._col8=RS_142._col0(Inner),Output:["_col0","_col5","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21"]
                        <-Map 12 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_142]
                            PartitionCols:_col0
                            Select Operator [SEL_141] (rows=1704 width=821)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                              Filter Operator [FIL_140] (rows=1704 width=821)
                                predicate:s_store_sk is not null
                                TableScan [TS_12] (rows=1704 width=821)
                                  default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_company_id","s_street_number","s_street_name","s_street_type","s_suite_number","s_city","s_county","s_state","s_zip"]
                        <-Reducer 4 [SIMPLE_EDGE]
                          SHUFFLE [RS_24]
                            PartitionCols:_col8
                            Merge Join Operator [MERGEJOIN_124] (rows=11945216 width=3)
                              Conds:RS_21._col5=RS_139._col0(Inner),Output:["_col0","_col5","_col8"]
                            <-Map 11 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_139]
                                PartitionCols:_col0
                                Select Operator [SEL_138] (rows=73049 width=4)
                                  Output:["_col0"]
                                  Filter Operator [FIL_137] (rows=73049 width=4)
                                    predicate:d_date_sk is not null
                                    TableScan [TS_9] (rows=73049 width=4)
                                      default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk"]
                            <-Reducer 3 [SIMPLE_EDGE]
                              SHUFFLE [RS_21]
                                PartitionCols:_col5
                                Merge Join Operator [MERGEJOIN_123] (rows=11945216 width=3)
                                  Conds:RS_18._col1, _col2, _col3=RS_136._col1, _col2, _col4(Inner),Output:["_col0","_col5","_col8"]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  PARTITION_ONLY_SHUFFLE [RS_18]
                                    PartitionCols:_col1, _col2, _col3
                                    Merge Join Operator [MERGEJOIN_122] (rows=1339446 width=8)
                                      Conds:RS_128._col0=RS_131._col0(Inner),Output:["_col0","_col1","_col2","_col3"]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_128]
                                        PartitionCols:_col0
                                        Select Operator [SEL_127] (rows=53632139 width=15)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Filter Operator [FIL_126] (rows=53632139 width=15)
                                            predicate:(sr_customer_sk is not null and sr_returned_date_sk is not null and sr_ticket_number is not null and sr_item_sk is not null)
                                            TableScan [TS_0] (rows=57591150 width=15)
                                              default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_returned_date_sk","sr_item_sk","sr_customer_sk","sr_ticket_number"]
                                    <-Map 9 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_131]
                                        PartitionCols:_col0
                                        Select Operator [SEL_130] (rows=50 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_129] (rows=50 width=12)
                                            predicate:((d_year = 2000) and (d_moy = 9) and d_date_sk is not null)
                                            TableScan [TS_3] (rows=73049 width=12)
                                              default@date_dim,d2,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                <-Map 10 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_136]
                                    PartitionCols:_col1, _col2, _col4
                                    Select Operator [SEL_135] (rows=501694138 width=19)
                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                      Filter Operator [FIL_134] (rows=501694138 width=19)
                                        predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_store_sk is not null and ss_ticket_number is not null and ss_item_sk is not null and ss_ticket_number BETWEEN DynamicValue(RS_18_store_returns_sr_ticket_number_min) AND DynamicValue(RS_18_store_returns_sr_ticket_number_max) and in_bloom_filter(ss_ticket_number, DynamicValue(RS_18_store_returns_sr_ticket_number_bloom_filter)))
                                        TableScan [TS_6] (rows=575995635 width=19)
                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number"]
                                        <-Reducer 8 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_133]
                                            Group By Operator [GBY_132] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                              PARTITION_ONLY_SHUFFLE [RS_99]
                                                Group By Operator [GBY_98] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_97] (rows=1339446 width=8)
                                                    Output:["_col0"]
                                                     Please refer to the previous Merge Join Operator [MERGEJOIN_122]

