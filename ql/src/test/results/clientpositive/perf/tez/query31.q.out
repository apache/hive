PREHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Map 11 <- Reducer 16 (BROADCAST_EDGE)
Map 18 <- Reducer 23 (BROADCAST_EDGE)
Map 25 <- Reducer 32 (BROADCAST_EDGE)
Map 34 <- Reducer 39 (BROADCAST_EDGE)
Map 41 <- Reducer 46 (BROADCAST_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 13 <- Map 17 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 18 (SIMPLE_EDGE), Map 22 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 20 <- Map 24 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 23 <- Map 22 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Map 25 (SIMPLE_EDGE), Map 31 (SIMPLE_EDGE)
Reducer 27 <- Map 33 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)
Reducer 28 <- Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Reducer 28 (SIMPLE_EDGE), Reducer 37 (SIMPLE_EDGE)
Reducer 3 <- Map 10 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (SIMPLE_EDGE), Reducer 44 (SIMPLE_EDGE)
Reducer 32 <- Map 31 (CUSTOM_SIMPLE_EDGE)
Reducer 35 <- Map 34 (SIMPLE_EDGE), Map 38 (SIMPLE_EDGE)
Reducer 36 <- Map 40 (SIMPLE_EDGE), Reducer 35 (SIMPLE_EDGE)
Reducer 37 <- Reducer 36 (SIMPLE_EDGE)
Reducer 39 <- Map 38 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 42 <- Map 41 (SIMPLE_EDGE), Map 45 (SIMPLE_EDGE)
Reducer 43 <- Map 47 (SIMPLE_EDGE), Reducer 42 (SIMPLE_EDGE)
Reducer 44 <- Reducer 43 (SIMPLE_EDGE)
Reducer 46 <- Map 45 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 14 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 21 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 30 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 7
      File Output Operator [FS_139]
        Select Operator [SEL_138] (rows=110 width=550)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          Filter Operator [FIL_136] (rows=110 width=778)
            predicate:(CASE WHEN ((_col9 > 0)) THEN (CASE WHEN (_col7) THEN (((_col4 / _col6) > (_col13 / _col9))) ELSE (false) END) ELSE (false) END and CASE WHEN ((_col11 > 0)) THEN (CASE WHEN (_col2) THEN (((_col6 / _col1) > (_col9 / _col11))) ELSE (false) END) ELSE (false) END)
            Merge Join Operator [MERGEJOIN_450] (rows=440 width=778)
              Conds:RS_133._col0=RS_134._col0(Inner),Output:["_col1","_col2","_col4","_col6","_col7","_col8","_col9","_col11","_col13"]
            <-Reducer 30 [SIMPLE_EDGE]
              SHUFFLE [RS_134]
                PartitionCols:_col0
                Merge Join Operator [MERGEJOIN_448] (rows=1605 width=434)
                  Conds:RS_123._col0=RS_548._col0(Inner),Output:["_col0","_col1","_col3","_col5"]
                <-Reducer 29 [SIMPLE_EDGE]
                  SHUFFLE [RS_123]
                    PartitionCols:_col0
                    Merge Join Operator [MERGEJOIN_447] (rows=1605 width=322)
                      Conds:RS_516._col0=RS_532._col0(Inner),Output:["_col0","_col1","_col3"]
                    <-Reducer 28 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_516]
                        PartitionCols:_col0
                        Group By Operator [GBY_515] (rows=1605 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 27 [SIMPLE_EDGE]
                          SHUFFLE [RS_77]
                            PartitionCols:_col0
                            Group By Operator [GBY_76] (rows=33705 width=210)
                              Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                              Merge Join Operator [MERGEJOIN_441] (rows=37399561 width=139)
                                Conds:RS_72._col1=RS_514._col0(Inner),Output:["_col2","_col5"]
                              <-Map 33 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_514]
                                  PartitionCols:_col0
                                  Select Operator [SEL_513] (rows=40000000 width=102)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_512] (rows=40000000 width=102)
                                      predicate:(ca_address_sk is not null and ca_county is not null)
                                      TableScan [TS_66] (rows=40000000 width=102)
                                        default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county"]
                              <-Reducer 26 [SIMPLE_EDGE]
                                SHUFFLE [RS_72]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_440] (rows=37399561 width=42)
                                    Conds:RS_511._col0=RS_503._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 31 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_503]
                                      PartitionCols:_col0
                                      Select Operator [SEL_502] (rows=130 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_501] (rows=130 width=12)
                                          predicate:((d_year = 2000) and (d_qoy = 2) and d_date_sk is not null)
                                          TableScan [TS_63] (rows=73049 width=12)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                                  <-Map 25 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_511]
                                      PartitionCols:_col0
                                      Select Operator [SEL_510] (rows=525327191 width=114)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_509] (rows=525327191 width=114)
                                          predicate:(ss_sold_date_sk is not null and ss_addr_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_70_date_dim_d_date_sk_min) AND DynamicValue(RS_70_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_70_date_dim_d_date_sk_bloom_filter)))
                                          TableScan [TS_60] (rows=575995635 width=114)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                                          <-Reducer 32 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_508]
                                              Group By Operator [GBY_507] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_506]
                                                  Group By Operator [GBY_505] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_504] (rows=130 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_502]
                    <-Reducer 37 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_532]
                        PartitionCols:_col0
                        Group By Operator [GBY_531] (rows=1605 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 36 [SIMPLE_EDGE]
                          SHUFFLE [RS_97]
                            PartitionCols:_col0
                            Group By Operator [GBY_96] (rows=33705 width=210)
                              Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                              Merge Join Operator [MERGEJOIN_443] (rows=37399561 width=139)
                                Conds:RS_92._col1=RS_530._col0(Inner),Output:["_col2","_col5"]
                              <-Map 40 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_530]
                                  PartitionCols:_col0
                                  Select Operator [SEL_529] (rows=40000000 width=102)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_528] (rows=40000000 width=102)
                                      predicate:(ca_address_sk is not null and ca_county is not null)
                                      TableScan [TS_86] (rows=40000000 width=102)
                                        default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county"]
                              <-Reducer 35 [SIMPLE_EDGE]
                                SHUFFLE [RS_92]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_442] (rows=37399561 width=42)
                                    Conds:RS_527._col0=RS_519._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_519]
                                      PartitionCols:_col0
                                      Select Operator [SEL_518] (rows=130 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_517] (rows=130 width=12)
                                          predicate:((d_year = 2000) and (d_qoy = 1) and d_date_sk is not null)
                                          TableScan [TS_83] (rows=73049 width=12)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                                  <-Map 34 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_527]
                                      PartitionCols:_col0
                                      Select Operator [SEL_526] (rows=525327191 width=114)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_525] (rows=525327191 width=114)
                                          predicate:(ss_sold_date_sk is not null and ss_addr_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_90_date_dim_d_date_sk_min) AND DynamicValue(RS_90_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_90_date_dim_d_date_sk_bloom_filter)))
                                          TableScan [TS_80] (rows=575995635 width=114)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                                          <-Reducer 39 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_524]
                                              Group By Operator [GBY_523] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 38 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_522]
                                                  Group By Operator [GBY_521] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_520] (rows=130 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_518]
                <-Reducer 44 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_548]
                    PartitionCols:_col0
                    Group By Operator [GBY_547] (rows=1605 width=210)
                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                    <-Reducer 43 [SIMPLE_EDGE]
                      SHUFFLE [RS_117]
                        PartitionCols:_col0
                        Group By Operator [GBY_116] (rows=33705 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                          Merge Join Operator [MERGEJOIN_445] (rows=37399561 width=139)
                            Conds:RS_112._col1=RS_546._col0(Inner),Output:["_col2","_col5"]
                          <-Map 47 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_546]
                              PartitionCols:_col0
                              Select Operator [SEL_545] (rows=40000000 width=102)
                                Output:["_col0","_col1"]
                                Filter Operator [FIL_544] (rows=40000000 width=102)
                                  predicate:(ca_address_sk is not null and ca_county is not null)
                                  TableScan [TS_106] (rows=40000000 width=102)
                                    default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county"]
                          <-Reducer 42 [SIMPLE_EDGE]
                            SHUFFLE [RS_112]
                              PartitionCols:_col1
                              Merge Join Operator [MERGEJOIN_444] (rows=37399561 width=42)
                                Conds:RS_543._col0=RS_535._col0(Inner),Output:["_col1","_col2"]
                              <-Map 45 [SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_535]
                                  PartitionCols:_col0
                                  Select Operator [SEL_534] (rows=130 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_533] (rows=130 width=12)
                                      predicate:((d_year = 2000) and (d_qoy = 3) and d_date_sk is not null)
                                      TableScan [TS_103] (rows=73049 width=12)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                              <-Map 41 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_543]
                                  PartitionCols:_col0
                                  Select Operator [SEL_542] (rows=525327191 width=114)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_541] (rows=525327191 width=114)
                                      predicate:(ss_sold_date_sk is not null and ss_addr_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_110_date_dim_d_date_sk_min) AND DynamicValue(RS_110_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_110_date_dim_d_date_sk_bloom_filter)))
                                      TableScan [TS_100] (rows=575995635 width=114)
                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                                      <-Reducer 46 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_540]
                                          Group By Operator [GBY_539] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 45 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_538]
                                              Group By Operator [GBY_537] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_536] (rows=130 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_534]
            <-Reducer 6 [SIMPLE_EDGE]
              SHUFFLE [RS_133]
                PartitionCols:_col0
                Merge Join Operator [MERGEJOIN_449] (rows=440 width=442)
                  Conds:RS_130._col0=RS_500._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col6","_col7"]
                <-Reducer 21 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_500]
                    PartitionCols:_col0
                    Select Operator [SEL_499] (rows=440 width=214)
                      Output:["_col0","_col1","_col2"]
                      Group By Operator [GBY_498] (rows=440 width=210)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 20 [SIMPLE_EDGE]
                        SHUFFLE [RS_57]
                          PartitionCols:_col0
                          Group By Operator [GBY_56] (rows=3960 width=210)
                            Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                            Merge Join Operator [MERGEJOIN_439] (rows=10246882 width=209)
                              Conds:RS_52._col1=RS_497._col0(Inner),Output:["_col2","_col5"]
                            <-Map 24 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_497]
                                PartitionCols:_col0
                                Select Operator [SEL_496] (rows=40000000 width=102)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_495] (rows=40000000 width=102)
                                    predicate:(ca_address_sk is not null and ca_county is not null)
                                    TableScan [TS_46] (rows=40000000 width=102)
                                      default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county"]
                            <-Reducer 19 [SIMPLE_EDGE]
                              SHUFFLE [RS_52]
                                PartitionCols:_col1
                                Merge Join Operator [MERGEJOIN_438] (rows=10246882 width=115)
                                  Conds:RS_494._col0=RS_486._col0(Inner),Output:["_col1","_col2"]
                                <-Map 22 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_486]
                                    PartitionCols:_col0
                                    Select Operator [SEL_485] (rows=130 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_484] (rows=130 width=12)
                                        predicate:((d_year = 2000) and (d_qoy = 2) and d_date_sk is not null)
                                        TableScan [TS_43] (rows=73049 width=12)
                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                                <-Map 18 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_494]
                                    PartitionCols:_col0
                                    Select Operator [SEL_493] (rows=143931246 width=119)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_492] (rows=143931246 width=119)
                                        predicate:(ws_sold_date_sk is not null and ws_bill_addr_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_50_date_dim_d_date_sk_min) AND DynamicValue(RS_50_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_50_date_dim_d_date_sk_bloom_filter)))
                                        TableScan [TS_40] (rows=144002668 width=119)
                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                        <-Reducer 23 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_491]
                                            Group By Operator [GBY_490] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 22 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_489]
                                                Group By Operator [GBY_488] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_487] (rows=130 width=4)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_485]
                <-Reducer 5 [SIMPLE_EDGE]
                  SHUFFLE [RS_130]
                    PartitionCols:_col0
                    Merge Join Operator [MERGEJOIN_446] (rows=440 width=326)
                      Conds:RS_467._col0=RS_483._col0(Inner),Output:["_col0","_col1","_col2","_col4"]
                    <-Reducer 14 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_483]
                        PartitionCols:_col0
                        Group By Operator [GBY_482] (rows=440 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 13 [SIMPLE_EDGE]
                          SHUFFLE [RS_37]
                            PartitionCols:_col0
                            Group By Operator [GBY_36] (rows=3960 width=210)
                              Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                              Merge Join Operator [MERGEJOIN_437] (rows=10246882 width=209)
                                Conds:RS_32._col1=RS_481._col0(Inner),Output:["_col2","_col5"]
                              <-Map 17 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_481]
                                  PartitionCols:_col0
                                  Select Operator [SEL_480] (rows=40000000 width=102)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_479] (rows=40000000 width=102)
                                      predicate:(ca_address_sk is not null and ca_county is not null)
                                      TableScan [TS_26] (rows=40000000 width=102)
                                        default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county"]
                              <-Reducer 12 [SIMPLE_EDGE]
                                SHUFFLE [RS_32]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_436] (rows=10246882 width=115)
                                    Conds:RS_478._col0=RS_470._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 15 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_470]
                                      PartitionCols:_col0
                                      Select Operator [SEL_469] (rows=130 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_468] (rows=130 width=12)
                                          predicate:((d_year = 2000) and (d_qoy = 3) and d_date_sk is not null)
                                          TableScan [TS_23] (rows=73049 width=12)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                                  <-Map 11 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_478]
                                      PartitionCols:_col0
                                      Select Operator [SEL_477] (rows=143931246 width=119)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_476] (rows=143931246 width=119)
                                          predicate:(ws_sold_date_sk is not null and ws_bill_addr_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_30_date_dim_d_date_sk_min) AND DynamicValue(RS_30_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_30_date_dim_d_date_sk_bloom_filter)))
                                          TableScan [TS_20] (rows=144002668 width=119)
                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                          <-Reducer 16 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_475]
                                              Group By Operator [GBY_474] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_473]
                                                  Group By Operator [GBY_472] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_471] (rows=130 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_469]
                    <-Reducer 4 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_467]
                        PartitionCols:_col0
                        Select Operator [SEL_466] (rows=440 width=214)
                          Output:["_col0","_col1","_col2"]
                          Group By Operator [GBY_465] (rows=440 width=210)
                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 3 [SIMPLE_EDGE]
                            SHUFFLE [RS_17]
                              PartitionCols:_col0
                              Group By Operator [GBY_16] (rows=3960 width=210)
                                Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                Merge Join Operator [MERGEJOIN_435] (rows=10246882 width=209)
                                  Conds:RS_12._col1=RS_464._col0(Inner),Output:["_col2","_col5"]
                                <-Map 10 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_464]
                                    PartitionCols:_col0
                                    Select Operator [SEL_463] (rows=40000000 width=102)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_462] (rows=40000000 width=102)
                                        predicate:(ca_address_sk is not null and ca_county is not null)
                                        TableScan [TS_6] (rows=40000000 width=102)
                                          default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county"]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_12]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_434] (rows=10246882 width=115)
                                      Conds:RS_461._col0=RS_453._col0(Inner),Output:["_col1","_col2"]
                                    <-Map 8 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_453]
                                        PartitionCols:_col0
                                        Select Operator [SEL_452] (rows=130 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_451] (rows=130 width=12)
                                            predicate:((d_year = 2000) and (d_qoy = 1) and d_date_sk is not null)
                                            TableScan [TS_3] (rows=73049 width=12)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_461]
                                        PartitionCols:_col0
                                        Select Operator [SEL_460] (rows=143931246 width=119)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_459] (rows=143931246 width=119)
                                            predicate:(ws_sold_date_sk is not null and ws_bill_addr_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_10_date_dim_d_date_sk_min) AND DynamicValue(RS_10_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_10_date_dim_d_date_sk_bloom_filter)))
                                            TableScan [TS_0] (rows=144002668 width=119)
                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                            <-Reducer 9 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_458]
                                                Group By Operator [GBY_457] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_456]
                                                    Group By Operator [GBY_455] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_454] (rows=130 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_452]

