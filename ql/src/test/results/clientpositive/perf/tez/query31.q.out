PREHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 19 <- Reducer 22 (BROADCAST_EDGE)
Map 33 <- Reducer 24 (BROADCAST_EDGE)
Map 34 <- Reducer 26 (BROADCAST_EDGE)
Map 35 <- Reducer 28 (BROADCAST_EDGE)
Map 36 <- Reducer 30 (BROADCAST_EDGE)
Map 37 <- Reducer 32 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 1 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 15 <- Map 1 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Map 1 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE)
Reducer 22 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Map 21 (SIMPLE_EDGE), Map 33 (SIMPLE_EDGE)
Reducer 24 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 21 (SIMPLE_EDGE), Map 34 (SIMPLE_EDGE)
Reducer 26 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Map 21 (SIMPLE_EDGE), Map 35 (SIMPLE_EDGE)
Reducer 28 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 21 (SIMPLE_EDGE), Map 36 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Map 21 (SIMPLE_EDGE), Map 37 (SIMPLE_EDGE)
Reducer 32 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 5 <- Reducer 10 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 14 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 1 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 1 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6
      File Output Operator [FS_145]
        Select Operator [SEL_144] (rows=110 width=550)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          Filter Operator [FIL_142] (rows=110 width=778)
            predicate:(CASE WHEN ((_col9 > 0)) THEN (CASE WHEN (_col7) THEN (((_col4 / _col6) > (_col13 / _col9))) ELSE (false) END) ELSE (false) END and CASE WHEN ((_col11 > 0)) THEN (CASE WHEN (_col2) THEN (((_col6 / _col1) > (_col9 / _col11))) ELSE (false) END) ELSE (false) END)
            Merge Join Operator [MERGEJOIN_456] (rows=440 width=778)
              Conds:RS_139._col0=RS_140._col0(Inner),Output:["_col1","_col2","_col4","_col6","_col7","_col8","_col9","_col11","_col13"]
            <-Reducer 14 [SIMPLE_EDGE]
              SHUFFLE [RS_140]
                PartitionCols:_col0
                Merge Join Operator [MERGEJOIN_454] (rows=1605 width=434)
                  Conds:RS_129._col0=RS_544._col0(Inner),Output:["_col0","_col1","_col3","_col5"]
                <-Reducer 13 [SIMPLE_EDGE]
                  SHUFFLE [RS_129]
                    PartitionCols:_col0
                    Merge Join Operator [MERGEJOIN_453] (rows=1605 width=322)
                      Conds:RS_530._col0=RS_537._col0(Inner),Output:["_col0","_col1","_col3"]
                    <-Reducer 12 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_530]
                        PartitionCols:_col0
                        Group By Operator [GBY_529] (rows=1605 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 11 [SIMPLE_EDGE]
                          SHUFFLE [RS_81]
                            PartitionCols:_col0
                            Group By Operator [GBY_80] (rows=33705 width=210)
                              Output:["_col0","_col1"],aggregations:["sum(_col4)"],keys:_col1
                              Merge Join Operator [MERGEJOIN_447] (rows=37399561 width=139)
                                Conds:RS_462._col0=RS_77._col1(Inner),Output:["_col1","_col4"]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_462]
                                  PartitionCols:_col0
                                  Select Operator [SEL_458] (rows=40000000 width=102)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_457] (rows=40000000 width=102)
                                      predicate:(ca_address_sk is not null and ca_county is not null)
                                      TableScan [TS_0] (rows=40000000 width=102)
                                        default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county"]
                              <-Reducer 27 [SIMPLE_EDGE]
                                SHUFFLE [RS_77]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_446] (rows=37399561 width=42)
                                    Conds:RS_528._col0=RS_483._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 21 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_483]
                                      PartitionCols:_col0
                                      Select Operator [SEL_474] (rows=130 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_468] (rows=130 width=12)
                                          predicate:((d_year = 2000) and (d_qoy = 2) and d_date_sk is not null)
                                          TableScan [TS_6] (rows=73049 width=12)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                                  <-Map 35 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_528]
                                      PartitionCols:_col0
                                      Select Operator [SEL_527] (rows=525327191 width=114)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_526] (rows=525327191 width=114)
                                          predicate:(ss_sold_date_sk is not null and ss_addr_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_73_date_dim_d_date_sk_min) AND DynamicValue(RS_73_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_73_date_dim_d_date_sk_bloom_filter)))
                                          TableScan [TS_66] (rows=575995635 width=114)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                                          <-Reducer 28 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_525]
                                              Group By Operator [GBY_524] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_498]
                                                  Group By Operator [GBY_492] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_484] (rows=130 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_474]
                    <-Reducer 16 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_537]
                        PartitionCols:_col0
                        Group By Operator [GBY_536] (rows=1605 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 15 [SIMPLE_EDGE]
                          SHUFFLE [RS_102]
                            PartitionCols:_col0
                            Group By Operator [GBY_101] (rows=33705 width=210)
                              Output:["_col0","_col1"],aggregations:["sum(_col4)"],keys:_col1
                              Merge Join Operator [MERGEJOIN_449] (rows=37399561 width=139)
                                Conds:RS_463._col0=RS_98._col1(Inner),Output:["_col1","_col4"]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_463]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_458]
                              <-Reducer 29 [SIMPLE_EDGE]
                                SHUFFLE [RS_98]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_448] (rows=37399561 width=42)
                                    Conds:RS_535._col0=RS_485._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 21 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_485]
                                      PartitionCols:_col0
                                      Select Operator [SEL_475] (rows=130 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_469] (rows=130 width=12)
                                          predicate:((d_year = 2000) and (d_qoy = 1) and d_date_sk is not null)
                                           Please refer to the previous TableScan [TS_6]
                                  <-Map 36 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_535]
                                      PartitionCols:_col0
                                      Select Operator [SEL_534] (rows=525327191 width=114)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_533] (rows=525327191 width=114)
                                          predicate:(ss_sold_date_sk is not null and ss_addr_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_94_date_dim_d_date_sk_min) AND DynamicValue(RS_94_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_94_date_dim_d_date_sk_bloom_filter)))
                                          TableScan [TS_87] (rows=575995635 width=114)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                                          <-Reducer 30 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_532]
                                              Group By Operator [GBY_531] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_499]
                                                  Group By Operator [GBY_493] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_486] (rows=130 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_475]
                <-Reducer 18 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_544]
                    PartitionCols:_col0
                    Group By Operator [GBY_543] (rows=1605 width=210)
                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                    <-Reducer 17 [SIMPLE_EDGE]
                      SHUFFLE [RS_123]
                        PartitionCols:_col0
                        Group By Operator [GBY_122] (rows=33705 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(_col4)"],keys:_col1
                          Merge Join Operator [MERGEJOIN_451] (rows=37399561 width=139)
                            Conds:RS_464._col0=RS_119._col1(Inner),Output:["_col1","_col4"]
                          <-Map 1 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_464]
                              PartitionCols:_col0
                               Please refer to the previous Select Operator [SEL_458]
                          <-Reducer 31 [SIMPLE_EDGE]
                            SHUFFLE [RS_119]
                              PartitionCols:_col1
                              Merge Join Operator [MERGEJOIN_450] (rows=37399561 width=42)
                                Conds:RS_542._col0=RS_487._col0(Inner),Output:["_col1","_col2"]
                              <-Map 21 [SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_487]
                                  PartitionCols:_col0
                                  Select Operator [SEL_476] (rows=130 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_470] (rows=130 width=12)
                                      predicate:((d_year = 2000) and (d_qoy = 3) and d_date_sk is not null)
                                       Please refer to the previous TableScan [TS_6]
                              <-Map 37 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_542]
                                  PartitionCols:_col0
                                  Select Operator [SEL_541] (rows=525327191 width=114)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_540] (rows=525327191 width=114)
                                      predicate:(ss_sold_date_sk is not null and ss_addr_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_115_date_dim_d_date_sk_min) AND DynamicValue(RS_115_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_115_date_dim_d_date_sk_bloom_filter)))
                                      TableScan [TS_108] (rows=575995635 width=114)
                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                                      <-Reducer 32 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_539]
                                          Group By Operator [GBY_538] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_500]
                                              Group By Operator [GBY_494] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_488] (rows=130 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_476]
            <-Reducer 5 [SIMPLE_EDGE]
              SHUFFLE [RS_139]
                PartitionCols:_col0
                Merge Join Operator [MERGEJOIN_455] (rows=440 width=442)
                  Conds:RS_136._col0=RS_523._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col6","_col7"]
                <-Reducer 10 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_523]
                    PartitionCols:_col0
                    Select Operator [SEL_522] (rows=440 width=214)
                      Output:["_col0","_col1","_col2"]
                      Group By Operator [GBY_521] (rows=440 width=210)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 9 [SIMPLE_EDGE]
                        SHUFFLE [RS_60]
                          PartitionCols:_col0
                          Group By Operator [GBY_59] (rows=3960 width=210)
                            Output:["_col0","_col1"],aggregations:["sum(_col4)"],keys:_col1
                            Merge Join Operator [MERGEJOIN_445] (rows=10246882 width=209)
                              Conds:RS_461._col0=RS_56._col1(Inner),Output:["_col1","_col4"]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_461]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_458]
                            <-Reducer 25 [SIMPLE_EDGE]
                              SHUFFLE [RS_56]
                                PartitionCols:_col1
                                Merge Join Operator [MERGEJOIN_444] (rows=10246882 width=115)
                                  Conds:RS_520._col0=RS_481._col0(Inner),Output:["_col1","_col2"]
                                <-Map 21 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_481]
                                    PartitionCols:_col0
                                    Select Operator [SEL_473] (rows=130 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_467] (rows=130 width=12)
                                        predicate:((d_year = 2000) and (d_qoy = 2) and d_date_sk is not null)
                                         Please refer to the previous TableScan [TS_6]
                                <-Map 34 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_520]
                                    PartitionCols:_col0
                                    Select Operator [SEL_519] (rows=143931246 width=119)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_518] (rows=143931246 width=119)
                                        predicate:(ws_sold_date_sk is not null and ws_bill_addr_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_52_date_dim_d_date_sk_min) AND DynamicValue(RS_52_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_52_date_dim_d_date_sk_bloom_filter)))
                                        TableScan [TS_45] (rows=144002668 width=119)
                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                        <-Reducer 26 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_517]
                                            Group By Operator [GBY_516] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_497]
                                                Group By Operator [GBY_491] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_482] (rows=130 width=4)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_473]
                <-Reducer 4 [SIMPLE_EDGE]
                  SHUFFLE [RS_136]
                    PartitionCols:_col0
                    Merge Join Operator [MERGEJOIN_452] (rows=440 width=326)
                      Conds:RS_508._col0=RS_515._col0(Inner),Output:["_col0","_col1","_col2","_col4"]
                    <-Reducer 3 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_508]
                        PartitionCols:_col0
                        Select Operator [SEL_507] (rows=440 width=214)
                          Output:["_col0","_col1","_col2"]
                          Group By Operator [GBY_506] (rows=440 width=210)
                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 2 [SIMPLE_EDGE]
                            SHUFFLE [RS_18]
                              PartitionCols:_col0
                              Group By Operator [GBY_17] (rows=3960 width=210)
                                Output:["_col0","_col1"],aggregations:["sum(_col4)"],keys:_col1
                                Merge Join Operator [MERGEJOIN_441] (rows=10246882 width=209)
                                  Conds:RS_459._col0=RS_14._col1(Inner),Output:["_col1","_col4"]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_459]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_458]
                                <-Reducer 20 [SIMPLE_EDGE]
                                  SHUFFLE [RS_14]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_440] (rows=10246882 width=115)
                                      Conds:RS_505._col0=RS_477._col0(Inner),Output:["_col1","_col2"]
                                    <-Map 21 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_477]
                                        PartitionCols:_col0
                                        Select Operator [SEL_471] (rows=130 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_465] (rows=130 width=12)
                                            predicate:((d_year = 2000) and (d_qoy = 1) and d_date_sk is not null)
                                             Please refer to the previous TableScan [TS_6]
                                    <-Map 19 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_505]
                                        PartitionCols:_col0
                                        Select Operator [SEL_504] (rows=143931246 width=119)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_503] (rows=143931246 width=119)
                                            predicate:(ws_sold_date_sk is not null and ws_bill_addr_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_10_date_dim_d_date_sk_min) AND DynamicValue(RS_10_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_10_date_dim_d_date_sk_bloom_filter)))
                                            TableScan [TS_3] (rows=144002668 width=119)
                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                            <-Reducer 22 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_502]
                                                Group By Operator [GBY_501] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_495]
                                                    Group By Operator [GBY_489] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_478] (rows=130 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_471]
                    <-Reducer 8 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_515]
                        PartitionCols:_col0
                        Group By Operator [GBY_514] (rows=440 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 7 [SIMPLE_EDGE]
                          SHUFFLE [RS_39]
                            PartitionCols:_col0
                            Group By Operator [GBY_38] (rows=3960 width=210)
                              Output:["_col0","_col1"],aggregations:["sum(_col4)"],keys:_col1
                              Merge Join Operator [MERGEJOIN_443] (rows=10246882 width=209)
                                Conds:RS_460._col0=RS_35._col1(Inner),Output:["_col1","_col4"]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_460]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_458]
                              <-Reducer 23 [SIMPLE_EDGE]
                                SHUFFLE [RS_35]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_442] (rows=10246882 width=115)
                                    Conds:RS_513._col0=RS_479._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 21 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_479]
                                      PartitionCols:_col0
                                      Select Operator [SEL_472] (rows=130 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_466] (rows=130 width=12)
                                          predicate:((d_year = 2000) and (d_qoy = 3) and d_date_sk is not null)
                                           Please refer to the previous TableScan [TS_6]
                                  <-Map 33 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_513]
                                      PartitionCols:_col0
                                      Select Operator [SEL_512] (rows=143931246 width=119)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_511] (rows=143931246 width=119)
                                          predicate:(ws_sold_date_sk is not null and ws_bill_addr_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_31_date_dim_d_date_sk_min) AND DynamicValue(RS_31_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_31_date_dim_d_date_sk_bloom_filter)))
                                          TableScan [TS_24] (rows=144002668 width=119)
                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                          <-Reducer 24 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_510]
                                              Group By Operator [GBY_509] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_496]
                                                  Group By Operator [GBY_490] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_480] (rows=130 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_472]

