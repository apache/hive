Warning: Shuffle Join MERGEJOIN[599][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[600][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 7' is a cross product
Warning: Shuffle Join MERGEJOIN[601][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3]] in Stage 'Reducer 8' is a cross product
Warning: Shuffle Join MERGEJOIN[602][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4]] in Stage 'Reducer 9' is a cross product
Warning: Shuffle Join MERGEJOIN[603][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5]] in Stage 'Reducer 10' is a cross product
Warning: Shuffle Join MERGEJOIN[604][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6]] in Stage 'Reducer 11' is a cross product
Warning: Shuffle Join MERGEJOIN[605][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6, $hdt$_7]] in Stage 'Reducer 12' is a cross product
PREHOOK: query: explain
select  *
from
 (select count(*) h8_30_to_9
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk   
     and ss_hdemo_sk = household_demographics.hd_demo_sk 
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 8
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2)) 
     and store.s_store_name = 'ese') s1,
 (select count(*) h9_to_9_30 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 9 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s2,
 (select count(*) h9_30_to_10 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 9
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s3,
 (select count(*) h10_to_10_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s4,
 (select count(*) h10_30_to_11
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s5,
 (select count(*) h11_to_11_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 11
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s6,
 (select count(*) h11_30_to_12
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 11
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s7,
 (select count(*) h12_to_12_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 12
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s8
PREHOOK: type: QUERY
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@time_dim
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  *
from
 (select count(*) h8_30_to_9
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk   
     and ss_hdemo_sk = household_demographics.hd_demo_sk 
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 8
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2)) 
     and store.s_store_name = 'ese') s1,
 (select count(*) h9_to_9_30 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 9 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s2,
 (select count(*) h9_30_to_10 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 9
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s3,
 (select count(*) h10_to_10_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s4,
 (select count(*) h10_30_to_11
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s5,
 (select count(*) h11_to_11_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 11
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s6,
 (select count(*) h11_30_to_12
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 11
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s7,
 (select count(*) h12_to_12_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 12
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s8
POSTHOOK: type: QUERY
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@time_dim
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 43 (BROADCAST_EDGE), Reducer 44 (BROADCAST_EDGE), Reducer 45 (BROADCAST_EDGE), Reducer 46 (BROADCAST_EDGE), Reducer 47 (BROADCAST_EDGE), Reducer 48 (BROADCAST_EDGE), Reducer 49 (BROADCAST_EDGE), Reducer 50 (BROADCAST_EDGE)
Reducer 10 <- Reducer 28 (CUSTOM_SIMPLE_EDGE), Reducer 9 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (CUSTOM_SIMPLE_EDGE), Reducer 20 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE), Reducer 36 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Map 1 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 14 <- Map 42 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 51 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 1 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 18 <- Map 42 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Map 51 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Map 1 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 22 <- Map 42 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 51 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 1 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 26 <- Map 42 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Map 51 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)
Reducer 28 <- Reducer 27 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 1 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 3 <- Map 42 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 42 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Map 51 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE)
Reducer 32 <- Reducer 31 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 1 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 34 <- Map 42 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 35 <- Map 51 (SIMPLE_EDGE), Reducer 34 (SIMPLE_EDGE)
Reducer 36 <- Reducer 35 (CUSTOM_SIMPLE_EDGE)
Reducer 37 <- Map 1 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 38 <- Map 42 (SIMPLE_EDGE), Reducer 37 (SIMPLE_EDGE)
Reducer 39 <- Map 51 (SIMPLE_EDGE), Reducer 38 (SIMPLE_EDGE)
Reducer 4 <- Map 51 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Reducer 39 (CUSTOM_SIMPLE_EDGE)
Reducer 43 <- Map 42 (CUSTOM_SIMPLE_EDGE)
Reducer 44 <- Map 42 (CUSTOM_SIMPLE_EDGE)
Reducer 45 <- Map 42 (CUSTOM_SIMPLE_EDGE)
Reducer 46 <- Map 42 (CUSTOM_SIMPLE_EDGE)
Reducer 47 <- Map 42 (CUSTOM_SIMPLE_EDGE)
Reducer 48 <- Map 42 (CUSTOM_SIMPLE_EDGE)
Reducer 49 <- Map 42 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 50 <- Map 42 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 24 (CUSTOM_SIMPLE_EDGE), Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 40 (CUSTOM_SIMPLE_EDGE), Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Reducer 32 (CUSTOM_SIMPLE_EDGE), Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Reducer 16 (CUSTOM_SIMPLE_EDGE), Reducer 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 12
      File Output Operator [FS_230]
        Select Operator [SEL_229] (rows=1 width=64)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          Merge Join Operator [MERGEJOIN_605] (rows=1 width=64)
            Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 11 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_226]
              Merge Join Operator [MERGEJOIN_604] (rows=1 width=56)
                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
              <-Reducer 10 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_223]
                  Merge Join Operator [MERGEJOIN_603] (rows=1 width=48)
                    Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                  <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_725]
                      Group By Operator [GBY_724] (rows=1 width=8)
                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                      <-Reducer 27 [CUSTOM_SIMPLE_EDGE]
                        PARTITION_ONLY_SHUFFLE [RS_153]
                          Group By Operator [GBY_152] (rows=1 width=8)
                            Output:["_col0"],aggregations:["count()"]
                            Merge Join Operator [MERGEJOIN_592] (rows=2979630 width=8)
                              Conds:RS_148._col2=RS_711._col0(Inner)
                            <-Map 51 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_711]
                                PartitionCols:_col0
                                Select Operator [SEL_705] (rows=155 width=4)
                                  Output:["_col0"]
                                  Filter Operator [FIL_704] (rows=155 width=92)
                                    predicate:((s_store_name = 'ese') and s_store_sk is not null)
                                    TableScan [TS_191] (rows=1704 width=92)
                                      default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name"]
                            <-Reducer 26 [SIMPLE_EDGE]
                              SHUFFLE [RS_148]
                                PartitionCols:_col2
                                Merge Join Operator [MERGEJOIN_591] (rows=4058523 width=0)
                                  Conds:RS_145._col0=RS_626._col0(Inner),Output:["_col2"]
                                <-Map 42 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_626]
                                    PartitionCols:_col0
                                    Select Operator [SEL_616] (rows=2312 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_608] (rows=2312 width=12)
                                        predicate:((t_hour = 10) and (t_minute < 30) and t_time_sk is not null)
                                        TableScan [TS_110] (rows=86400 width=12)
                                          default@time_dim,time_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["t_time_sk","t_hour","t_minute"]
                                <-Reducer 25 [SIMPLE_EDGE]
                                  SHUFFLE [RS_145]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_590] (rows=82152686 width=5)
                                      Conds:RS_690._col1=RS_698._col0(Inner),Output:["_col0","_col2"]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_690]
                                        PartitionCols:_col1
                                        Select Operator [SEL_682] (rows=501695814 width=11)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_674] (rows=501695814 width=11)
                                            predicate:(ss_sold_time_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_time_sk BETWEEN DynamicValue(RS_146_time_dim_t_time_sk_min) AND DynamicValue(RS_146_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_146_time_dim_t_time_sk_bloom_filter)))
                                            TableScan [TS_0] (rows=575995635 width=11)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                            <-Reducer 43 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_663]
                                                Group By Operator [GBY_662] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_646]
                                                    Group By Operator [GBY_638] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_623] (rows=2235 width=4)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_614] (rows=2235 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_606] (rows=2235 width=12)
                                                            predicate:((t_hour = 10) and (t_minute >= 30) and t_time_sk is not null)
                                                             Please refer to the previous TableScan [TS_110]
                                            <-Reducer 44 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_659]
                                                Group By Operator [GBY_658] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_647]
                                                    Group By Operator [GBY_639] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_625] (rows=2235 width=4)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_615] (rows=2235 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_607] (rows=2235 width=12)
                                                            predicate:((t_hour = 11) and (t_minute >= 30) and t_time_sk is not null)
                                                             Please refer to the previous TableScan [TS_110]
                                            <-Reducer 45 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_665]
                                                Group By Operator [GBY_664] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_648]
                                                    Group By Operator [GBY_640] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_627] (rows=2312 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_616]
                                            <-Reducer 46 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_657]
                                                Group By Operator [GBY_656] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_649]
                                                    Group By Operator [GBY_641] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_629] (rows=2312 width=4)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_617] (rows=2312 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_609] (rows=2312 width=12)
                                                            predicate:((t_hour = 12) and (t_minute < 30) and t_time_sk is not null)
                                                             Please refer to the previous TableScan [TS_110]
                                            <-Reducer 47 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_667]
                                                Group By Operator [GBY_666] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_650]
                                                    Group By Operator [GBY_642] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_631] (rows=2235 width=4)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_618] (rows=2235 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_610] (rows=2235 width=12)
                                                            predicate:((t_hour = 9) and (t_minute >= 30) and t_time_sk is not null)
                                                             Please refer to the previous TableScan [TS_110]
                                            <-Reducer 48 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_655]
                                                Group By Operator [GBY_654] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_651]
                                                    Group By Operator [GBY_643] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_633] (rows=2235 width=4)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_619] (rows=2235 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_611] (rows=2235 width=12)
                                                            predicate:((t_hour = 8) and (t_minute >= 30) and t_time_sk is not null)
                                                             Please refer to the previous TableScan [TS_110]
                                            <-Reducer 49 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_669]
                                                Group By Operator [GBY_668] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_652]
                                                    Group By Operator [GBY_644] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_635] (rows=2312 width=4)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_620] (rows=2312 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_612] (rows=2312 width=12)
                                                            predicate:((t_hour = 9) and (t_minute < 30) and t_time_sk is not null)
                                                             Please refer to the previous TableScan [TS_110]
                                            <-Reducer 50 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_661]
                                                Group By Operator [GBY_660] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_653]
                                                    Group By Operator [GBY_645] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_637] (rows=2312 width=4)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_621] (rows=2312 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_613] (rows=2312 width=12)
                                                            predicate:((t_hour = 11) and (t_minute < 30) and t_time_sk is not null)
                                                             Please refer to the previous TableScan [TS_110]
                                    <-Map 41 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_698]
                                        PartitionCols:_col0
                                        Select Operator [SEL_695] (rows=1179 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_694] (rows=1179 width=12)
                                            predicate:((hd_dep_count) IN (3, 0, 1) and (((hd_dep_count = 3) and (hd_vehicle_count <= 5)) or ((hd_dep_count = 0) and (hd_vehicle_count <= 2)) or ((hd_dep_count = 1) and (hd_vehicle_count <= 3))) and ((hd_vehicle_count <= 5) or (hd_vehicle_count <= 2) or (hd_vehicle_count <= 3)) and hd_demo_sk is not null)
                                            TableScan [TS_107] (rows=7200 width=12)
                                              default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_dep_count","hd_vehicle_count"]
                  <-Reducer 9 [CUSTOM_SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_220]
                      Merge Join Operator [MERGEJOIN_602] (rows=1 width=40)
                        Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
                      <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_723]
                          Group By Operator [GBY_722] (rows=1 width=8)
                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                          <-Reducer 15 [CUSTOM_SIMPLE_EDGE]
                            PARTITION_ONLY_SHUFFLE [RS_127]
                              Group By Operator [GBY_126] (rows=1 width=8)
                                Output:["_col0"],aggregations:["count()"]
                                Merge Join Operator [MERGEJOIN_589] (rows=2880396 width=8)
                                  Conds:RS_122._col2=RS_709._col0(Inner)
                                <-Map 51 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_709]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_705]
                                <-Reducer 14 [SIMPLE_EDGE]
                                  SHUFFLE [RS_122]
                                    PartitionCols:_col2
                                    Merge Join Operator [MERGEJOIN_588] (rows=3923357 width=0)
                                      Conds:RS_119._col0=RS_622._col0(Inner),Output:["_col2"]
                                    <-Map 42 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_622]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_614]
                                    <-Reducer 13 [SIMPLE_EDGE]
                                      SHUFFLE [RS_119]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_587] (rows=82152686 width=5)
                                          Conds:RS_687._col1=RS_696._col0(Inner),Output:["_col0","_col2"]
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_687]
                                            PartitionCols:_col1
                                            Select Operator [SEL_679] (rows=501695814 width=11)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_671] (rows=501695814 width=11)
                                                predicate:(ss_sold_time_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_time_sk BETWEEN DynamicValue(RS_120_time_dim_t_time_sk_min) AND DynamicValue(RS_120_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_120_time_dim_t_time_sk_bloom_filter)))
                                                 Please refer to the previous TableScan [TS_0]
                                        <-Map 41 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_696]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_695]
                      <-Reducer 8 [CUSTOM_SIMPLE_EDGE]
                        PARTITION_ONLY_SHUFFLE [RS_217]
                          Merge Join Operator [MERGEJOIN_601] (rows=1 width=32)
                            Conds:(Inner),Output:["_col0","_col1","_col2","_col3"]
                          <-Reducer 32 [CUSTOM_SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_721]
                              Group By Operator [GBY_720] (rows=1 width=8)
                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                              <-Reducer 31 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_101]
                                  Group By Operator [GBY_100] (rows=1 width=8)
                                    Output:["_col0"],aggregations:["count()"]
                                    Merge Join Operator [MERGEJOIN_586] (rows=2979630 width=8)
                                      Conds:RS_96._col2=RS_707._col0(Inner)
                                    <-Map 51 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_707]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_705]
                                    <-Reducer 30 [SIMPLE_EDGE]
                                      SHUFFLE [RS_96]
                                        PartitionCols:_col2
                                        Merge Join Operator [MERGEJOIN_585] (rows=4058523 width=0)
                                          Conds:RS_93._col0=RS_636._col0(Inner),Output:["_col2"]
                                        <-Map 42 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_636]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_621]
                                        <-Reducer 29 [SIMPLE_EDGE]
                                          SHUFFLE [RS_93]
                                            PartitionCols:_col0
                                            Merge Join Operator [MERGEJOIN_584] (rows=82152686 width=5)
                                              Conds:RS_691._col1=RS_701._col0(Inner),Output:["_col0","_col2"]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_691]
                                                PartitionCols:_col1
                                                Select Operator [SEL_683] (rows=501695814 width=11)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_675] (rows=501695814 width=11)
                                                    predicate:(ss_sold_time_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_time_sk BETWEEN DynamicValue(RS_94_time_dim_t_time_sk_min) AND DynamicValue(RS_94_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_94_time_dim_t_time_sk_bloom_filter)))
                                                     Please refer to the previous TableScan [TS_0]
                                            <-Map 41 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_701]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_695]
                          <-Reducer 7 [CUSTOM_SIMPLE_EDGE]
                            PARTITION_ONLY_SHUFFLE [RS_214]
                              Merge Join Operator [MERGEJOIN_600] (rows=1 width=24)
                                Conds:(Inner),Output:["_col0","_col1","_col2"]
                              <-Reducer 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_719]
                                  Group By Operator [GBY_718] (rows=1 width=8)
                                    Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                  <-Reducer 39 [CUSTOM_SIMPLE_EDGE]
                                    PARTITION_ONLY_SHUFFLE [RS_75]
                                      Group By Operator [GBY_74] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count()"]
                                        Merge Join Operator [MERGEJOIN_583] (rows=2880396 width=8)
                                          Conds:RS_70._col2=RS_712._col0(Inner)
                                        <-Map 51 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_712]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_705]
                                        <-Reducer 38 [SIMPLE_EDGE]
                                          SHUFFLE [RS_70]
                                            PartitionCols:_col2
                                            Merge Join Operator [MERGEJOIN_582] (rows=3923357 width=0)
                                              Conds:RS_67._col0=RS_624._col0(Inner),Output:["_col2"]
                                            <-Map 42 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_624]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_615]
                                            <-Reducer 37 [SIMPLE_EDGE]
                                              SHUFFLE [RS_67]
                                                PartitionCols:_col0
                                                Merge Join Operator [MERGEJOIN_581] (rows=82152686 width=5)
                                                  Conds:RS_693._col1=RS_697._col0(Inner),Output:["_col0","_col2"]
                                                <-Map 1 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_693]
                                                    PartitionCols:_col1
                                                    Select Operator [SEL_685] (rows=501695814 width=11)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_677] (rows=501695814 width=11)
                                                        predicate:(ss_sold_time_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_time_sk BETWEEN DynamicValue(RS_68_time_dim_t_time_sk_min) AND DynamicValue(RS_68_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_68_time_dim_t_time_sk_bloom_filter)))
                                                         Please refer to the previous TableScan [TS_0]
                                                <-Map 41 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_697]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_695]
                              <-Reducer 6 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_211]
                                  Merge Join Operator [MERGEJOIN_599] (rows=1 width=16)
                                    Conds:(Inner),Output:["_col0","_col1"]
                                  <-Reducer 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_717]
                                      Group By Operator [GBY_716] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                      <-Reducer 23 [CUSTOM_SIMPLE_EDGE]
                                        PARTITION_ONLY_SHUFFLE [RS_49]
                                          Group By Operator [GBY_48] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Merge Join Operator [MERGEJOIN_580] (rows=2979630 width=8)
                                              Conds:RS_44._col2=RS_708._col0(Inner)
                                            <-Map 51 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_708]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_705]
                                            <-Reducer 22 [SIMPLE_EDGE]
                                              SHUFFLE [RS_44]
                                                PartitionCols:_col2
                                                Merge Join Operator [MERGEJOIN_579] (rows=4058523 width=0)
                                                  Conds:RS_41._col0=RS_628._col0(Inner),Output:["_col2"]
                                                <-Map 42 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_628]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_617]
                                                <-Reducer 21 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_41]
                                                    PartitionCols:_col0
                                                    Merge Join Operator [MERGEJOIN_578] (rows=82152686 width=5)
                                                      Conds:RS_689._col1=RS_699._col0(Inner),Output:["_col0","_col2"]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_689]
                                                        PartitionCols:_col1
                                                        Select Operator [SEL_681] (rows=501695814 width=11)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_673] (rows=501695814 width=11)
                                                            predicate:(ss_sold_time_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_time_sk BETWEEN DynamicValue(RS_42_time_dim_t_time_sk_min) AND DynamicValue(RS_42_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_42_time_dim_t_time_sk_bloom_filter)))
                                                             Please refer to the previous TableScan [TS_0]
                                                    <-Map 41 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_699]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_695]
                                  <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_715]
                                      Group By Operator [GBY_714] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                      <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
                                        PARTITION_ONLY_SHUFFLE [RS_23]
                                          Group By Operator [GBY_22] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Merge Join Operator [MERGEJOIN_577] (rows=2880396 width=8)
                                              Conds:RS_18._col2=RS_710._col0(Inner)
                                            <-Map 51 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_710]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_705]
                                            <-Reducer 3 [SIMPLE_EDGE]
                                              SHUFFLE [RS_18]
                                                PartitionCols:_col2
                                                Merge Join Operator [MERGEJOIN_576] (rows=3923357 width=0)
                                                  Conds:RS_15._col0=RS_632._col0(Inner),Output:["_col2"]
                                                <-Map 42 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_632]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_619]
                                                <-Reducer 2 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_15]
                                                    PartitionCols:_col0
                                                    Merge Join Operator [MERGEJOIN_575] (rows=82152686 width=5)
                                                      Conds:RS_686._col1=RS_703._col0(Inner),Output:["_col0","_col2"]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_686]
                                                        PartitionCols:_col1
                                                        Select Operator [SEL_678] (rows=501695814 width=11)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_670] (rows=501695814 width=11)
                                                            predicate:(ss_sold_time_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_time_sk BETWEEN DynamicValue(RS_16_time_dim_t_time_sk_min) AND DynamicValue(RS_16_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_16_time_dim_t_time_sk_bloom_filter)))
                                                             Please refer to the previous TableScan [TS_0]
                                                    <-Map 41 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_703]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_695]
              <-Reducer 20 [CUSTOM_SIMPLE_EDGE] vectorized
                PARTITION_ONLY_SHUFFLE [RS_727]
                  Group By Operator [GBY_726] (rows=1 width=8)
                    Output:["_col0"],aggregations:["count(VALUE._col0)"]
                  <-Reducer 19 [CUSTOM_SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_179]
                      Group By Operator [GBY_178] (rows=1 width=8)
                        Output:["_col0"],aggregations:["count()"]
                        Merge Join Operator [MERGEJOIN_595] (rows=2880396 width=8)
                          Conds:RS_174._col2=RS_713._col0(Inner)
                        <-Map 51 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_713]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_705]
                        <-Reducer 18 [SIMPLE_EDGE]
                          SHUFFLE [RS_174]
                            PartitionCols:_col2
                            Merge Join Operator [MERGEJOIN_594] (rows=3923357 width=0)
                              Conds:RS_171._col0=RS_630._col0(Inner),Output:["_col2"]
                            <-Map 42 [SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_630]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_618]
                            <-Reducer 17 [SIMPLE_EDGE]
                              SHUFFLE [RS_171]
                                PartitionCols:_col0
                                Merge Join Operator [MERGEJOIN_593] (rows=82152686 width=5)
                                  Conds:RS_688._col1=RS_700._col0(Inner),Output:["_col0","_col2"]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_688]
                                    PartitionCols:_col1
                                    Select Operator [SEL_680] (rows=501695814 width=11)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_672] (rows=501695814 width=11)
                                        predicate:(ss_sold_time_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_time_sk BETWEEN DynamicValue(RS_172_time_dim_t_time_sk_min) AND DynamicValue(RS_172_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_172_time_dim_t_time_sk_bloom_filter)))
                                         Please refer to the previous TableScan [TS_0]
                                <-Map 41 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_700]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_695]
          <-Reducer 36 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_729]
              Group By Operator [GBY_728] (rows=1 width=8)
                Output:["_col0"],aggregations:["count(VALUE._col0)"]
              <-Reducer 35 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_205]
                  Group By Operator [GBY_204] (rows=1 width=8)
                    Output:["_col0"],aggregations:["count()"]
                    Merge Join Operator [MERGEJOIN_598] (rows=2979630 width=8)
                      Conds:RS_200._col2=RS_706._col0(Inner)
                    <-Map 51 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_706]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_705]
                    <-Reducer 34 [SIMPLE_EDGE]
                      SHUFFLE [RS_200]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_597] (rows=4058523 width=0)
                          Conds:RS_197._col0=RS_634._col0(Inner),Output:["_col2"]
                        <-Map 42 [SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_634]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_620]
                        <-Reducer 33 [SIMPLE_EDGE]
                          SHUFFLE [RS_197]
                            PartitionCols:_col0
                            Merge Join Operator [MERGEJOIN_596] (rows=82152686 width=5)
                              Conds:RS_692._col1=RS_702._col0(Inner),Output:["_col0","_col2"]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_692]
                                PartitionCols:_col1
                                Select Operator [SEL_684] (rows=501695814 width=11)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_676] (rows=501695814 width=11)
                                    predicate:(ss_sold_time_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_time_sk BETWEEN DynamicValue(RS_198_time_dim_t_time_sk_min) AND DynamicValue(RS_198_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_198_time_dim_t_time_sk_bloom_filter)))
                                     Please refer to the previous TableScan [TS_0]
                            <-Map 41 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_702]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_695]

