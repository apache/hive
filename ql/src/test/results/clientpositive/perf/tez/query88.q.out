Warning: Shuffle Join MERGEJOIN[587][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6, $hdt$_7]] in Stage 'Reducer 6' is a cross product
PREHOOK: query: explain
select  *
from
 (select count(*) h8_30_to_9
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk   
     and ss_hdemo_sk = household_demographics.hd_demo_sk 
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 8
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2)) 
     and store.s_store_name = 'ese') s1,
 (select count(*) h9_to_9_30 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 9 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s2,
 (select count(*) h9_30_to_10 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 9
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s3,
 (select count(*) h10_to_10_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s4,
 (select count(*) h10_30_to_11
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s5,
 (select count(*) h11_to_11_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 11
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s6,
 (select count(*) h11_30_to_12
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 11
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s7,
 (select count(*) h12_to_12_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 12
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s8
PREHOOK: type: QUERY
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@time_dim
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  *
from
 (select count(*) h8_30_to_9
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk   
     and ss_hdemo_sk = household_demographics.hd_demo_sk 
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 8
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2)) 
     and store.s_store_name = 'ese') s1,
 (select count(*) h9_to_9_30 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 9 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s2,
 (select count(*) h9_30_to_10 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 9
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s3,
 (select count(*) h10_to_10_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s4,
 (select count(*) h10_30_to_11
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s5,
 (select count(*) h11_to_11_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 11
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s6,
 (select count(*) h11_30_to_12
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 11
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s7,
 (select count(*) h12_to_12_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 12
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s8
POSTHOOK: type: QUERY
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@time_dim
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 45 (BROADCAST_EDGE), Reducer 54 (BROADCAST_EDGE), Reducer 8 (BROADCAST_EDGE)
Map 62 <- Reducer 13 (BROADCAST_EDGE), Reducer 46 (BROADCAST_EDGE), Reducer 55 (BROADCAST_EDGE)
Map 63 <- Reducer 18 (BROADCAST_EDGE), Reducer 47 (BROADCAST_EDGE), Reducer 56 (BROADCAST_EDGE)
Map 64 <- Reducer 23 (BROADCAST_EDGE), Reducer 48 (BROADCAST_EDGE), Reducer 57 (BROADCAST_EDGE)
Map 65 <- Reducer 28 (BROADCAST_EDGE), Reducer 49 (BROADCAST_EDGE), Reducer 58 (BROADCAST_EDGE)
Map 66 <- Reducer 33 (BROADCAST_EDGE), Reducer 50 (BROADCAST_EDGE), Reducer 59 (BROADCAST_EDGE)
Map 67 <- Reducer 38 (BROADCAST_EDGE), Reducer 51 (BROADCAST_EDGE), Reducer 60 (BROADCAST_EDGE)
Map 68 <- Reducer 43 (BROADCAST_EDGE), Reducer 52 (BROADCAST_EDGE), Reducer 61 (BROADCAST_EDGE)
Reducer 10 <- Map 44 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 53 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 63 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 15 <- Map 44 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Map 53 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 64 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 20 <- Map 44 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Map 53 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 65 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 25 <- Map 44 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Map 53 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 66 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 3 <- Map 44 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 44 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Map 53 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE)
Reducer 32 <- Reducer 31 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 34 <- Map 67 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 35 <- Map 44 (SIMPLE_EDGE), Reducer 34 (SIMPLE_EDGE)
Reducer 36 <- Map 53 (SIMPLE_EDGE), Reducer 35 (SIMPLE_EDGE)
Reducer 37 <- Reducer 36 (CUSTOM_SIMPLE_EDGE)
Reducer 38 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 39 <- Map 68 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 4 <- Map 53 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Map 44 (SIMPLE_EDGE), Reducer 39 (SIMPLE_EDGE)
Reducer 41 <- Map 53 (SIMPLE_EDGE), Reducer 40 (SIMPLE_EDGE)
Reducer 42 <- Reducer 41 (CUSTOM_SIMPLE_EDGE)
Reducer 43 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 45 <- Map 44 (CUSTOM_SIMPLE_EDGE)
Reducer 46 <- Map 44 (CUSTOM_SIMPLE_EDGE)
Reducer 47 <- Map 44 (CUSTOM_SIMPLE_EDGE)
Reducer 48 <- Map 44 (CUSTOM_SIMPLE_EDGE)
Reducer 49 <- Map 44 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 50 <- Map 44 (CUSTOM_SIMPLE_EDGE)
Reducer 51 <- Map 44 (CUSTOM_SIMPLE_EDGE)
Reducer 52 <- Map 44 (CUSTOM_SIMPLE_EDGE)
Reducer 54 <- Map 53 (CUSTOM_SIMPLE_EDGE)
Reducer 55 <- Map 53 (CUSTOM_SIMPLE_EDGE)
Reducer 56 <- Map 53 (CUSTOM_SIMPLE_EDGE)
Reducer 57 <- Map 53 (CUSTOM_SIMPLE_EDGE)
Reducer 58 <- Map 53 (CUSTOM_SIMPLE_EDGE)
Reducer 59 <- Map 53 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 12 (CUSTOM_SIMPLE_EDGE), Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 22 (CUSTOM_SIMPLE_EDGE), Reducer 27 (CUSTOM_SIMPLE_EDGE), Reducer 32 (CUSTOM_SIMPLE_EDGE), Reducer 37 (CUSTOM_SIMPLE_EDGE), Reducer 42 (CUSTOM_SIMPLE_EDGE), Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 60 <- Map 53 (CUSTOM_SIMPLE_EDGE)
Reducer 61 <- Map 53 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 62 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6
      File Output Operator [FS_218]
        Select Operator [SEL_217] (rows=1 width=65)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          Merge Join Operator [MERGEJOIN_587] (rows=1 width=65)
            Conds:(Inner),(Inner),(Inner),(Inner),(Inner),(Inner),(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_725]
              Group By Operator [GBY_724] (rows=1 width=8)
                Output:["_col0"],aggregations:["count(VALUE._col0)"]
              <-Reducer 11 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_49]
                  Group By Operator [GBY_48] (rows=1 width=8)
                    Output:["_col0"],aggregations:["count()"]
                    Merge Join Operator [MERGEJOIN_568] (rows=766650239 width=88)
                      Conds:RS_44._col2=RS_678._col0(Inner)
                    <-Map 53 [SIMPLE_EDGE] vectorized
                      PARTITION_ONLY_SHUFFLE [RS_678]
                        PartitionCols:_col0
                        Select Operator [SEL_675] (rows=852 width=1910)
                          Output:["_col0"]
                          Filter Operator [FIL_674] (rows=852 width=1910)
                            predicate:((s_store_name = 'ese') and s_store_sk is not null)
                            TableScan [TS_9] (rows=1704 width=1910)
                              default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_name"]
                    <-Reducer 10 [SIMPLE_EDGE]
                      SHUFFLE [RS_44]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_567] (rows=696954748 width=88)
                          Conds:RS_41._col1=RS_642._col0(Inner),Output:["_col2"]
                        <-Map 44 [SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_642]
                            PartitionCols:_col0
                            Select Operator [SEL_639] (rows=3600 width=107)
                              Output:["_col0"]
                              Filter Operator [FIL_638] (rows=3600 width=107)
                                predicate:((((hd_dep_count = 3) and (hd_vehicle_count <= 5)) or ((hd_dep_count = 0) and (hd_vehicle_count <= 2)) or ((hd_dep_count = 1) and (hd_vehicle_count <= 3))) and hd_demo_sk is not null)
                                TableScan [TS_6] (rows=7200 width=107)
                                  default@household_demographics,household_demographics,Tbl:COMPLETE,Col:NONE,Output:["hd_demo_sk","hd_dep_count","hd_vehicle_count"]
                        <-Reducer 9 [SIMPLE_EDGE]
                          SHUFFLE [RS_41]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_566] (rows=633595212 width=88)
                              Conds:RS_723._col0=RS_606._col0(Inner),Output:["_col1","_col2"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_606]
                                PartitionCols:_col0
                                Select Operator [SEL_597] (rows=14400 width=471)
                                  Output:["_col0"]
                                  Filter Operator [FIL_589] (rows=14400 width=471)
                                    predicate:((t_hour = 12) and (t_minute < 30) and t_time_sk is not null)
                                    TableScan [TS_3] (rows=86400 width=471)
                                      default@time_dim,time_dim,Tbl:COMPLETE,Col:NONE,Output:["t_time_sk","t_hour","t_minute"]
                            <-Map 62 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_723]
                                PartitionCols:_col0
                                Select Operator [SEL_722] (rows=575995635 width=88)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_721] (rows=575995635 width=88)
                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_42_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_42_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_42_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_39_time_dim_t_time_sk_min) AND DynamicValue(RS_39_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_39_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_45_store_s_store_sk_min) AND DynamicValue(RS_45_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_45_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                    TableScan [TS_26] (rows=575995635 width=88)
                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                    <-Reducer 13 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_716]
                                        Group By Operator [GBY_715] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_629]
                                            Group By Operator [GBY_621] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_607] (rows=14400 width=471)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_597]
                                    <-Reducer 46 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_718]
                                        Group By Operator [GBY_717] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 44 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_665]
                                            Group By Operator [GBY_657] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_643] (rows=3600 width=107)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_639]
                                    <-Reducer 55 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_720]
                                        Group By Operator [GBY_719] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 53 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_701]
                                            Group By Operator [GBY_693] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_679] (rows=852 width=1910)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_675]
          <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_736]
              Group By Operator [GBY_735] (rows=1 width=8)
                Output:["_col0"],aggregations:["count(VALUE._col0)"]
              <-Reducer 16 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_75]
                  Group By Operator [GBY_74] (rows=1 width=8)
                    Output:["_col0"],aggregations:["count()"]
                    Merge Join Operator [MERGEJOIN_571] (rows=766650239 width=88)
                      Conds:RS_70._col2=RS_680._col0(Inner)
                    <-Map 53 [SIMPLE_EDGE] vectorized
                      PARTITION_ONLY_SHUFFLE [RS_680]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_675]
                    <-Reducer 15 [SIMPLE_EDGE]
                      SHUFFLE [RS_70]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_570] (rows=696954748 width=88)
                          Conds:RS_67._col1=RS_644._col0(Inner),Output:["_col2"]
                        <-Map 44 [SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_644]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_639]
                        <-Reducer 14 [SIMPLE_EDGE]
                          SHUFFLE [RS_67]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_569] (rows=633595212 width=88)
                              Conds:RS_734._col0=RS_608._col0(Inner),Output:["_col1","_col2"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_608]
                                PartitionCols:_col0
                                Select Operator [SEL_598] (rows=14400 width=471)
                                  Output:["_col0"]
                                  Filter Operator [FIL_590] (rows=14400 width=471)
                                    predicate:((t_hour = 11) and (t_minute >= 30) and t_time_sk is not null)
                                     Please refer to the previous TableScan [TS_3]
                            <-Map 63 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_734]
                                PartitionCols:_col0
                                Select Operator [SEL_733] (rows=575995635 width=88)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_732] (rows=575995635 width=88)
                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_68_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_68_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_68_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_65_time_dim_t_time_sk_min) AND DynamicValue(RS_65_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_65_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_71_store_s_store_sk_min) AND DynamicValue(RS_71_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_71_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                    TableScan [TS_52] (rows=575995635 width=88)
                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                    <-Reducer 18 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_727]
                                        Group By Operator [GBY_726] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_630]
                                            Group By Operator [GBY_622] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_609] (rows=14400 width=471)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_598]
                                    <-Reducer 47 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_729]
                                        Group By Operator [GBY_728] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 44 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_666]
                                            Group By Operator [GBY_658] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_645] (rows=3600 width=107)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_639]
                                    <-Reducer 56 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_731]
                                        Group By Operator [GBY_730] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 53 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_702]
                                            Group By Operator [GBY_694] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_681] (rows=852 width=1910)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_675]
          <-Reducer 22 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_747]
              Group By Operator [GBY_746] (rows=1 width=8)
                Output:["_col0"],aggregations:["count(VALUE._col0)"]
              <-Reducer 21 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_101]
                  Group By Operator [GBY_100] (rows=1 width=8)
                    Output:["_col0"],aggregations:["count()"]
                    Merge Join Operator [MERGEJOIN_574] (rows=766650239 width=88)
                      Conds:RS_96._col2=RS_682._col0(Inner)
                    <-Map 53 [SIMPLE_EDGE] vectorized
                      PARTITION_ONLY_SHUFFLE [RS_682]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_675]
                    <-Reducer 20 [SIMPLE_EDGE]
                      SHUFFLE [RS_96]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_573] (rows=696954748 width=88)
                          Conds:RS_93._col1=RS_646._col0(Inner),Output:["_col2"]
                        <-Map 44 [SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_646]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_639]
                        <-Reducer 19 [SIMPLE_EDGE]
                          SHUFFLE [RS_93]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_572] (rows=633595212 width=88)
                              Conds:RS_745._col0=RS_610._col0(Inner),Output:["_col1","_col2"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_610]
                                PartitionCols:_col0
                                Select Operator [SEL_599] (rows=14400 width=471)
                                  Output:["_col0"]
                                  Filter Operator [FIL_591] (rows=14400 width=471)
                                    predicate:((t_hour = 11) and (t_minute < 30) and t_time_sk is not null)
                                     Please refer to the previous TableScan [TS_3]
                            <-Map 64 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_745]
                                PartitionCols:_col0
                                Select Operator [SEL_744] (rows=575995635 width=88)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_743] (rows=575995635 width=88)
                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_94_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_94_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_94_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_91_time_dim_t_time_sk_min) AND DynamicValue(RS_91_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_91_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_97_store_s_store_sk_min) AND DynamicValue(RS_97_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_97_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                    TableScan [TS_78] (rows=575995635 width=88)
                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                    <-Reducer 23 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_738]
                                        Group By Operator [GBY_737] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_631]
                                            Group By Operator [GBY_623] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_611] (rows=14400 width=471)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_599]
                                    <-Reducer 48 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_740]
                                        Group By Operator [GBY_739] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 44 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_667]
                                            Group By Operator [GBY_659] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_647] (rows=3600 width=107)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_639]
                                    <-Reducer 57 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_742]
                                        Group By Operator [GBY_741] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 53 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_703]
                                            Group By Operator [GBY_695] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_683] (rows=852 width=1910)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_675]
          <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_758]
              Group By Operator [GBY_757] (rows=1 width=8)
                Output:["_col0"],aggregations:["count(VALUE._col0)"]
              <-Reducer 26 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_127]
                  Group By Operator [GBY_126] (rows=1 width=8)
                    Output:["_col0"],aggregations:["count()"]
                    Merge Join Operator [MERGEJOIN_577] (rows=766650239 width=88)
                      Conds:RS_122._col2=RS_684._col0(Inner)
                    <-Map 53 [SIMPLE_EDGE] vectorized
                      PARTITION_ONLY_SHUFFLE [RS_684]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_675]
                    <-Reducer 25 [SIMPLE_EDGE]
                      SHUFFLE [RS_122]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_576] (rows=696954748 width=88)
                          Conds:RS_119._col1=RS_648._col0(Inner),Output:["_col2"]
                        <-Map 44 [SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_648]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_639]
                        <-Reducer 24 [SIMPLE_EDGE]
                          SHUFFLE [RS_119]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_575] (rows=633595212 width=88)
                              Conds:RS_756._col0=RS_612._col0(Inner),Output:["_col1","_col2"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_612]
                                PartitionCols:_col0
                                Select Operator [SEL_600] (rows=14400 width=471)
                                  Output:["_col0"]
                                  Filter Operator [FIL_592] (rows=14400 width=471)
                                    predicate:((t_hour = 10) and (t_minute >= 30) and t_time_sk is not null)
                                     Please refer to the previous TableScan [TS_3]
                            <-Map 65 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_756]
                                PartitionCols:_col0
                                Select Operator [SEL_755] (rows=575995635 width=88)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_754] (rows=575995635 width=88)
                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_120_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_120_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_120_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_117_time_dim_t_time_sk_min) AND DynamicValue(RS_117_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_117_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_123_store_s_store_sk_min) AND DynamicValue(RS_123_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_123_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                    TableScan [TS_104] (rows=575995635 width=88)
                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                    <-Reducer 28 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_749]
                                        Group By Operator [GBY_748] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_632]
                                            Group By Operator [GBY_624] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_613] (rows=14400 width=471)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_600]
                                    <-Reducer 49 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_751]
                                        Group By Operator [GBY_750] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 44 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_668]
                                            Group By Operator [GBY_660] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_649] (rows=3600 width=107)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_639]
                                    <-Reducer 58 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_753]
                                        Group By Operator [GBY_752] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 53 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_704]
                                            Group By Operator [GBY_696] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_685] (rows=852 width=1910)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_675]
          <-Reducer 32 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_769]
              Group By Operator [GBY_768] (rows=1 width=8)
                Output:["_col0"],aggregations:["count(VALUE._col0)"]
              <-Reducer 31 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_153]
                  Group By Operator [GBY_152] (rows=1 width=8)
                    Output:["_col0"],aggregations:["count()"]
                    Merge Join Operator [MERGEJOIN_580] (rows=766650239 width=88)
                      Conds:RS_148._col2=RS_686._col0(Inner)
                    <-Map 53 [SIMPLE_EDGE] vectorized
                      PARTITION_ONLY_SHUFFLE [RS_686]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_675]
                    <-Reducer 30 [SIMPLE_EDGE]
                      SHUFFLE [RS_148]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_579] (rows=696954748 width=88)
                          Conds:RS_145._col1=RS_650._col0(Inner),Output:["_col2"]
                        <-Map 44 [SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_650]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_639]
                        <-Reducer 29 [SIMPLE_EDGE]
                          SHUFFLE [RS_145]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_578] (rows=633595212 width=88)
                              Conds:RS_767._col0=RS_614._col0(Inner),Output:["_col1","_col2"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_614]
                                PartitionCols:_col0
                                Select Operator [SEL_601] (rows=14400 width=471)
                                  Output:["_col0"]
                                  Filter Operator [FIL_593] (rows=14400 width=471)
                                    predicate:((t_hour = 10) and (t_minute < 30) and t_time_sk is not null)
                                     Please refer to the previous TableScan [TS_3]
                            <-Map 66 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_767]
                                PartitionCols:_col0
                                Select Operator [SEL_766] (rows=575995635 width=88)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_765] (rows=575995635 width=88)
                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_146_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_146_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_146_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_143_time_dim_t_time_sk_min) AND DynamicValue(RS_143_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_143_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_149_store_s_store_sk_min) AND DynamicValue(RS_149_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_149_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                    TableScan [TS_130] (rows=575995635 width=88)
                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                    <-Reducer 33 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_760]
                                        Group By Operator [GBY_759] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_633]
                                            Group By Operator [GBY_625] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_615] (rows=14400 width=471)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_601]
                                    <-Reducer 50 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_762]
                                        Group By Operator [GBY_761] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 44 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_669]
                                            Group By Operator [GBY_661] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_651] (rows=3600 width=107)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_639]
                                    <-Reducer 59 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_764]
                                        Group By Operator [GBY_763] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 53 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_705]
                                            Group By Operator [GBY_697] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_687] (rows=852 width=1910)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_675]
          <-Reducer 37 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_780]
              Group By Operator [GBY_779] (rows=1 width=8)
                Output:["_col0"],aggregations:["count(VALUE._col0)"]
              <-Reducer 36 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_179]
                  Group By Operator [GBY_178] (rows=1 width=8)
                    Output:["_col0"],aggregations:["count()"]
                    Merge Join Operator [MERGEJOIN_583] (rows=766650239 width=88)
                      Conds:RS_174._col2=RS_688._col0(Inner)
                    <-Map 53 [SIMPLE_EDGE] vectorized
                      PARTITION_ONLY_SHUFFLE [RS_688]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_675]
                    <-Reducer 35 [SIMPLE_EDGE]
                      SHUFFLE [RS_174]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_582] (rows=696954748 width=88)
                          Conds:RS_171._col1=RS_652._col0(Inner),Output:["_col2"]
                        <-Map 44 [SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_652]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_639]
                        <-Reducer 34 [SIMPLE_EDGE]
                          SHUFFLE [RS_171]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_581] (rows=633595212 width=88)
                              Conds:RS_778._col0=RS_616._col0(Inner),Output:["_col1","_col2"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_616]
                                PartitionCols:_col0
                                Select Operator [SEL_602] (rows=14400 width=471)
                                  Output:["_col0"]
                                  Filter Operator [FIL_594] (rows=14400 width=471)
                                    predicate:((t_hour = 9) and (t_minute >= 30) and t_time_sk is not null)
                                     Please refer to the previous TableScan [TS_3]
                            <-Map 67 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_778]
                                PartitionCols:_col0
                                Select Operator [SEL_777] (rows=575995635 width=88)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_776] (rows=575995635 width=88)
                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_172_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_172_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_172_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_169_time_dim_t_time_sk_min) AND DynamicValue(RS_169_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_169_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_175_store_s_store_sk_min) AND DynamicValue(RS_175_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_175_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                    TableScan [TS_156] (rows=575995635 width=88)
                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                    <-Reducer 38 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_771]
                                        Group By Operator [GBY_770] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_634]
                                            Group By Operator [GBY_626] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_617] (rows=14400 width=471)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_602]
                                    <-Reducer 51 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_773]
                                        Group By Operator [GBY_772] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 44 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_670]
                                            Group By Operator [GBY_662] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_653] (rows=3600 width=107)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_639]
                                    <-Reducer 60 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_775]
                                        Group By Operator [GBY_774] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 53 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_706]
                                            Group By Operator [GBY_698] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_689] (rows=852 width=1910)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_675]
          <-Reducer 42 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_791]
              Group By Operator [GBY_790] (rows=1 width=8)
                Output:["_col0"],aggregations:["count(VALUE._col0)"]
              <-Reducer 41 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_205]
                  Group By Operator [GBY_204] (rows=1 width=8)
                    Output:["_col0"],aggregations:["count()"]
                    Merge Join Operator [MERGEJOIN_586] (rows=766650239 width=88)
                      Conds:RS_200._col2=RS_690._col0(Inner)
                    <-Map 53 [SIMPLE_EDGE] vectorized
                      PARTITION_ONLY_SHUFFLE [RS_690]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_675]
                    <-Reducer 40 [SIMPLE_EDGE]
                      SHUFFLE [RS_200]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_585] (rows=696954748 width=88)
                          Conds:RS_197._col1=RS_654._col0(Inner),Output:["_col2"]
                        <-Map 44 [SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_654]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_639]
                        <-Reducer 39 [SIMPLE_EDGE]
                          SHUFFLE [RS_197]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_584] (rows=633595212 width=88)
                              Conds:RS_789._col0=RS_618._col0(Inner),Output:["_col1","_col2"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_618]
                                PartitionCols:_col0
                                Select Operator [SEL_603] (rows=14400 width=471)
                                  Output:["_col0"]
                                  Filter Operator [FIL_595] (rows=14400 width=471)
                                    predicate:((t_hour = 9) and (t_minute < 30) and t_time_sk is not null)
                                     Please refer to the previous TableScan [TS_3]
                            <-Map 68 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_789]
                                PartitionCols:_col0
                                Select Operator [SEL_788] (rows=575995635 width=88)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_787] (rows=575995635 width=88)
                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_198_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_198_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_198_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_195_time_dim_t_time_sk_min) AND DynamicValue(RS_195_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_195_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_201_store_s_store_sk_min) AND DynamicValue(RS_201_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_201_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                    TableScan [TS_182] (rows=575995635 width=88)
                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                    <-Reducer 43 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_782]
                                        Group By Operator [GBY_781] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_635]
                                            Group By Operator [GBY_627] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_619] (rows=14400 width=471)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_603]
                                    <-Reducer 52 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_784]
                                        Group By Operator [GBY_783] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 44 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_671]
                                            Group By Operator [GBY_663] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_655] (rows=3600 width=107)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_639]
                                    <-Reducer 61 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_786]
                                        Group By Operator [GBY_785] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 53 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_707]
                                            Group By Operator [GBY_699] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_691] (rows=852 width=1910)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_675]
          <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_714]
              Group By Operator [GBY_713] (rows=1 width=8)
                Output:["_col0"],aggregations:["count(VALUE._col0)"]
              <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_23]
                  Group By Operator [GBY_22] (rows=1 width=8)
                    Output:["_col0"],aggregations:["count()"]
                    Merge Join Operator [MERGEJOIN_565] (rows=766650239 width=88)
                      Conds:RS_18._col2=RS_676._col0(Inner)
                    <-Map 53 [SIMPLE_EDGE] vectorized
                      PARTITION_ONLY_SHUFFLE [RS_676]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_675]
                    <-Reducer 3 [SIMPLE_EDGE]
                      SHUFFLE [RS_18]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_564] (rows=696954748 width=88)
                          Conds:RS_15._col1=RS_640._col0(Inner),Output:["_col2"]
                        <-Map 44 [SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_640]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_639]
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_15]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_563] (rows=633595212 width=88)
                              Conds:RS_712._col0=RS_604._col0(Inner),Output:["_col1","_col2"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_604]
                                PartitionCols:_col0
                                Select Operator [SEL_596] (rows=14400 width=471)
                                  Output:["_col0"]
                                  Filter Operator [FIL_588] (rows=14400 width=471)
                                    predicate:((t_hour = 8) and (t_minute >= 30) and t_time_sk is not null)
                                     Please refer to the previous TableScan [TS_3]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_712]
                                PartitionCols:_col0
                                Select Operator [SEL_711] (rows=575995635 width=88)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_710] (rows=575995635 width=88)
                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_16_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_16_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_16_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_13_time_dim_t_time_sk_min) AND DynamicValue(RS_13_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_13_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_19_store_s_store_sk_min) AND DynamicValue(RS_19_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_19_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                    TableScan [TS_0] (rows=575995635 width=88)
                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                    <-Reducer 45 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_673]
                                        Group By Operator [GBY_672] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 44 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_664]
                                            Group By Operator [GBY_656] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_641] (rows=3600 width=107)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_639]
                                    <-Reducer 54 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_709]
                                        Group By Operator [GBY_708] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 53 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_700]
                                            Group By Operator [GBY_692] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_677] (rows=852 width=1910)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_675]
                                    <-Reducer 8 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_637]
                                        Group By Operator [GBY_636] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_628]
                                            Group By Operator [GBY_620] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_605] (rows=14400 width=471)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_596]

