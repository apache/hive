Warning: Shuffle Join MERGEJOIN[599][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[600][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 7' is a cross product
Warning: Shuffle Join MERGEJOIN[601][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3]] in Stage 'Reducer 8' is a cross product
Warning: Shuffle Join MERGEJOIN[602][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4]] in Stage 'Reducer 9' is a cross product
Warning: Shuffle Join MERGEJOIN[603][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5]] in Stage 'Reducer 10' is a cross product
Warning: Shuffle Join MERGEJOIN[604][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6]] in Stage 'Reducer 11' is a cross product
Warning: Shuffle Join MERGEJOIN[605][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6, $hdt$_7]] in Stage 'Reducer 12' is a cross product
PREHOOK: query: explain
select  *
from
 (select count(*) h8_30_to_9
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk   
     and ss_hdemo_sk = household_demographics.hd_demo_sk 
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 8
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2)) 
     and store.s_store_name = 'ese') s1,
 (select count(*) h9_to_9_30 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 9 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s2,
 (select count(*) h9_30_to_10 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 9
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s3,
 (select count(*) h10_to_10_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s4,
 (select count(*) h10_30_to_11
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s5,
 (select count(*) h11_to_11_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 11
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s6,
 (select count(*) h11_30_to_12
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 11
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s7,
 (select count(*) h12_to_12_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 12
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s8
PREHOOK: type: QUERY
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@time_dim
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  *
from
 (select count(*) h8_30_to_9
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk   
     and ss_hdemo_sk = household_demographics.hd_demo_sk 
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 8
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2)) 
     and store.s_store_name = 'ese') s1,
 (select count(*) h9_to_9_30 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 9 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s2,
 (select count(*) h9_30_to_10 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 9
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s3,
 (select count(*) h10_to_10_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s4,
 (select count(*) h10_30_to_11
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s5,
 (select count(*) h11_to_11_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 11
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s6,
 (select count(*) h11_30_to_12
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 11
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s7,
 (select count(*) h12_to_12_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 12
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s8
POSTHOOK: type: QUERY
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@time_dim
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 14 (BROADCAST_EDGE), Reducer 51 (BROADCAST_EDGE), Reducer 60 (BROADCAST_EDGE)
Map 68 <- Reducer 19 (BROADCAST_EDGE), Reducer 52 (BROADCAST_EDGE), Reducer 61 (BROADCAST_EDGE)
Map 69 <- Reducer 24 (BROADCAST_EDGE), Reducer 53 (BROADCAST_EDGE), Reducer 62 (BROADCAST_EDGE)
Map 70 <- Reducer 29 (BROADCAST_EDGE), Reducer 54 (BROADCAST_EDGE), Reducer 63 (BROADCAST_EDGE)
Map 71 <- Reducer 34 (BROADCAST_EDGE), Reducer 55 (BROADCAST_EDGE), Reducer 64 (BROADCAST_EDGE)
Map 72 <- Reducer 39 (BROADCAST_EDGE), Reducer 56 (BROADCAST_EDGE), Reducer 65 (BROADCAST_EDGE)
Map 73 <- Reducer 44 (BROADCAST_EDGE), Reducer 57 (BROADCAST_EDGE), Reducer 66 (BROADCAST_EDGE)
Map 74 <- Reducer 49 (BROADCAST_EDGE), Reducer 58 (BROADCAST_EDGE), Reducer 67 (BROADCAST_EDGE)
Reducer 10 <- Reducer 38 (CUSTOM_SIMPLE_EDGE), Reducer 9 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (CUSTOM_SIMPLE_EDGE), Reducer 43 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE), Reducer 48 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 13 (SIMPLE_EDGE), Map 68 (SIMPLE_EDGE)
Reducer 16 <- Map 50 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Map 59 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 20 <- Map 13 (SIMPLE_EDGE), Map 69 (SIMPLE_EDGE)
Reducer 21 <- Map 50 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 59 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 13 (SIMPLE_EDGE), Map 70 (SIMPLE_EDGE)
Reducer 26 <- Map 50 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Map 59 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)
Reducer 28 <- Reducer 27 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 50 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 13 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE)
Reducer 31 <- Map 50 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE)
Reducer 32 <- Map 59 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 33 <- Reducer 32 (CUSTOM_SIMPLE_EDGE)
Reducer 34 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 35 <- Map 13 (SIMPLE_EDGE), Map 72 (SIMPLE_EDGE)
Reducer 36 <- Map 50 (SIMPLE_EDGE), Reducer 35 (SIMPLE_EDGE)
Reducer 37 <- Map 59 (SIMPLE_EDGE), Reducer 36 (SIMPLE_EDGE)
Reducer 38 <- Reducer 37 (CUSTOM_SIMPLE_EDGE)
Reducer 39 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Map 59 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Map 13 (SIMPLE_EDGE), Map 73 (SIMPLE_EDGE)
Reducer 41 <- Map 50 (SIMPLE_EDGE), Reducer 40 (SIMPLE_EDGE)
Reducer 42 <- Map 59 (SIMPLE_EDGE), Reducer 41 (SIMPLE_EDGE)
Reducer 43 <- Reducer 42 (CUSTOM_SIMPLE_EDGE)
Reducer 44 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 45 <- Map 13 (SIMPLE_EDGE), Map 74 (SIMPLE_EDGE)
Reducer 46 <- Map 50 (SIMPLE_EDGE), Reducer 45 (SIMPLE_EDGE)
Reducer 47 <- Map 59 (SIMPLE_EDGE), Reducer 46 (SIMPLE_EDGE)
Reducer 48 <- Reducer 47 (CUSTOM_SIMPLE_EDGE)
Reducer 49 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 51 <- Map 50 (CUSTOM_SIMPLE_EDGE)
Reducer 52 <- Map 50 (CUSTOM_SIMPLE_EDGE)
Reducer 53 <- Map 50 (CUSTOM_SIMPLE_EDGE)
Reducer 54 <- Map 50 (CUSTOM_SIMPLE_EDGE)
Reducer 55 <- Map 50 (CUSTOM_SIMPLE_EDGE)
Reducer 56 <- Map 50 (CUSTOM_SIMPLE_EDGE)
Reducer 57 <- Map 50 (CUSTOM_SIMPLE_EDGE)
Reducer 58 <- Map 50 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 18 (CUSTOM_SIMPLE_EDGE), Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 60 <- Map 59 (CUSTOM_SIMPLE_EDGE)
Reducer 61 <- Map 59 (CUSTOM_SIMPLE_EDGE)
Reducer 62 <- Map 59 (CUSTOM_SIMPLE_EDGE)
Reducer 63 <- Map 59 (CUSTOM_SIMPLE_EDGE)
Reducer 64 <- Map 59 (CUSTOM_SIMPLE_EDGE)
Reducer 65 <- Map 59 (CUSTOM_SIMPLE_EDGE)
Reducer 66 <- Map 59 (CUSTOM_SIMPLE_EDGE)
Reducer 67 <- Map 59 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 23 (CUSTOM_SIMPLE_EDGE), Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Reducer 28 (CUSTOM_SIMPLE_EDGE), Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Reducer 33 (CUSTOM_SIMPLE_EDGE), Reducer 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 12
      File Output Operator [FS_230]
        Select Operator [SEL_229] (rows=1 width=64)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          Merge Join Operator [MERGEJOIN_605] (rows=1 width=64)
            Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 11 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_226]
              Merge Join Operator [MERGEJOIN_604] (rows=1 width=56)
                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
              <-Reducer 10 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_223]
                  Merge Join Operator [MERGEJOIN_603] (rows=1 width=48)
                    Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                  <-Reducer 38 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_787]
                      Group By Operator [GBY_786] (rows=1 width=8)
                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                      <-Reducer 37 [CUSTOM_SIMPLE_EDGE]
                        PARTITION_ONLY_SHUFFLE [RS_153]
                          Group By Operator [GBY_152] (rows=1 width=8)
                            Output:["_col0"],aggregations:["count()"]
                            Merge Join Operator [MERGEJOIN_592] (rows=1352994 width=8)
                              Conds:RS_148._col2=RS_704._col0(Inner)
                            <-Map 59 [SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_704]
                                PartitionCols:_col0
                                Select Operator [SEL_693] (rows=155 width=91)
                                  Output:["_col0"]
                                  Filter Operator [FIL_692] (rows=155 width=92)
                                    predicate:((s_store_name = 'ese') and s_store_sk is not null)
                                    TableScan [TS_9] (rows=1704 width=92)
                                      default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name"]
                            <-Reducer 36 [SIMPLE_EDGE]
                              SHUFFLE [RS_148]
                                PartitionCols:_col2
                                Merge Join Operator [MERGEJOIN_591] (rows=1842898 width=0)
                                  Conds:RS_145._col0=RS_668._col0(Inner),Output:["_col2"]
                                <-Map 50 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_668]
                                    PartitionCols:_col0
                                    Select Operator [SEL_655] (rows=1515 width=12)
                                      Output:["_col0"]
                                      Filter Operator [FIL_647] (rows=1515 width=12)
                                        predicate:((t_hour = 10) and (t_minute < 30) and t_time_sk is not null)
                                        TableScan [TS_6] (rows=86400 width=12)
                                          default@time_dim,time_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["t_time_sk","t_hour","t_minute"]
                                <-Reducer 35 [SIMPLE_EDGE]
                                  SHUFFLE [RS_145]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_590] (rows=56928540 width=4)
                                      Conds:RS_785._col1=RS_618._col0(Inner),Output:["_col0","_col2"]
                                    <-Map 13 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_618]
                                        PartitionCols:_col0
                                        Select Operator [SEL_607] (rows=817 width=12)
                                          Output:["_col0"]
                                          Filter Operator [FIL_606] (rows=817 width=12)
                                            predicate:((((hd_dep_count = 3) and hd_vehicle_count is not null) or ((hd_dep_count = 0) and (hd_vehicle_count <= 2)) or ((hd_dep_count = 1) and (hd_vehicle_count <= 3))) and (hd_dep_count) IN (3, 0, 1) and (hd_vehicle_count <= 5) and hd_demo_sk is not null)
                                            TableScan [TS_3] (rows=7200 width=12)
                                              default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_dep_count","hd_vehicle_count"]
                                    <-Map 72 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_785]
                                        PartitionCols:_col1
                                        Select Operator [SEL_784] (rows=501695814 width=11)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_783] (rows=501695814 width=11)
                                            predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_143_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_143_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_143_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_146_time_dim_t_time_sk_min) AND DynamicValue(RS_146_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_146_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_149_store_s_store_sk_min) AND DynamicValue(RS_149_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_149_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                            TableScan [TS_130] (rows=575995635 width=11)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                            <-Reducer 39 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_778]
                                                Group By Operator [GBY_777] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_637]
                                                    Group By Operator [GBY_629] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_619] (rows=817 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_607]
                                            <-Reducer 56 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_780]
                                                Group By Operator [GBY_779] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 50 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_687]
                                                    Group By Operator [GBY_679] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_669] (rows=1515 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_655]
                                            <-Reducer 65 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_782]
                                                Group By Operator [GBY_781] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 59 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_723]
                                                    Group By Operator [GBY_715] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_705] (rows=155 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_693]
                  <-Reducer 9 [CUSTOM_SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_220]
                      Merge Join Operator [MERGEJOIN_602] (rows=1 width=40)
                        Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
                      <-Reducer 33 [CUSTOM_SIMPLE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_776]
                          Group By Operator [GBY_775] (rows=1 width=8)
                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                          <-Reducer 32 [CUSTOM_SIMPLE_EDGE]
                            PARTITION_ONLY_SHUFFLE [RS_127]
                              Group By Operator [GBY_126] (rows=1 width=8)
                                Output:["_col0"],aggregations:["count()"]
                                Merge Join Operator [MERGEJOIN_589] (rows=1352994 width=8)
                                  Conds:RS_122._col2=RS_702._col0(Inner)
                                <-Map 59 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_702]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_693]
                                <-Reducer 31 [SIMPLE_EDGE]
                                  SHUFFLE [RS_122]
                                    PartitionCols:_col2
                                    Merge Join Operator [MERGEJOIN_588] (rows=1842898 width=0)
                                      Conds:RS_119._col0=RS_666._col0(Inner),Output:["_col2"]
                                    <-Map 50 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_666]
                                        PartitionCols:_col0
                                        Select Operator [SEL_654] (rows=1515 width=12)
                                          Output:["_col0"]
                                          Filter Operator [FIL_646] (rows=1515 width=12)
                                            predicate:((t_hour = 10) and (t_minute >= 30) and t_time_sk is not null)
                                             Please refer to the previous TableScan [TS_6]
                                    <-Reducer 30 [SIMPLE_EDGE]
                                      SHUFFLE [RS_119]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_587] (rows=56928540 width=4)
                                          Conds:RS_774._col1=RS_616._col0(Inner),Output:["_col0","_col2"]
                                        <-Map 13 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_616]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_607]
                                        <-Map 71 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_774]
                                            PartitionCols:_col1
                                            Select Operator [SEL_773] (rows=501695814 width=11)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_772] (rows=501695814 width=11)
                                                predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_117_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_117_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_117_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_120_time_dim_t_time_sk_min) AND DynamicValue(RS_120_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_120_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_123_store_s_store_sk_min) AND DynamicValue(RS_123_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_123_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                TableScan [TS_104] (rows=575995635 width=11)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                <-Reducer 34 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_767]
                                                    Group By Operator [GBY_766] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_636]
                                                        Group By Operator [GBY_628] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_617] (rows=817 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_607]
                                                <-Reducer 55 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_769]
                                                    Group By Operator [GBY_768] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 50 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_686]
                                                        Group By Operator [GBY_678] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_667] (rows=1515 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_654]
                                                <-Reducer 64 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_771]
                                                    Group By Operator [GBY_770] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 59 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_722]
                                                        Group By Operator [GBY_714] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_703] (rows=155 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_693]
                      <-Reducer 8 [CUSTOM_SIMPLE_EDGE]
                        PARTITION_ONLY_SHUFFLE [RS_217]
                          Merge Join Operator [MERGEJOIN_601] (rows=1 width=32)
                            Conds:(Inner),Output:["_col0","_col1","_col2","_col3"]
                          <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_765]
                              Group By Operator [GBY_764] (rows=1 width=8)
                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                              <-Reducer 27 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_101]
                                  Group By Operator [GBY_100] (rows=1 width=8)
                                    Output:["_col0"],aggregations:["count()"]
                                    Merge Join Operator [MERGEJOIN_586] (rows=1352994 width=8)
                                      Conds:RS_96._col2=RS_700._col0(Inner)
                                    <-Map 59 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_700]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_693]
                                    <-Reducer 26 [SIMPLE_EDGE]
                                      SHUFFLE [RS_96]
                                        PartitionCols:_col2
                                        Merge Join Operator [MERGEJOIN_585] (rows=1842898 width=0)
                                          Conds:RS_93._col0=RS_664._col0(Inner),Output:["_col2"]
                                        <-Map 50 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_664]
                                            PartitionCols:_col0
                                            Select Operator [SEL_653] (rows=1515 width=12)
                                              Output:["_col0"]
                                              Filter Operator [FIL_645] (rows=1515 width=12)
                                                predicate:((t_hour = 11) and (t_minute < 30) and t_time_sk is not null)
                                                 Please refer to the previous TableScan [TS_6]
                                        <-Reducer 25 [SIMPLE_EDGE]
                                          SHUFFLE [RS_93]
                                            PartitionCols:_col0
                                            Merge Join Operator [MERGEJOIN_584] (rows=56928540 width=4)
                                              Conds:RS_763._col1=RS_614._col0(Inner),Output:["_col0","_col2"]
                                            <-Map 13 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_614]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_607]
                                            <-Map 70 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_763]
                                                PartitionCols:_col1
                                                Select Operator [SEL_762] (rows=501695814 width=11)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_761] (rows=501695814 width=11)
                                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_91_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_91_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_91_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_94_time_dim_t_time_sk_min) AND DynamicValue(RS_94_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_94_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_97_store_s_store_sk_min) AND DynamicValue(RS_97_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_97_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                    TableScan [TS_78] (rows=575995635 width=11)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                    <-Reducer 29 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_756]
                                                        Group By Operator [GBY_755] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_635]
                                                            Group By Operator [GBY_627] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_615] (rows=817 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_607]
                                                    <-Reducer 54 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_758]
                                                        Group By Operator [GBY_757] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 50 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_685]
                                                            Group By Operator [GBY_677] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_665] (rows=1515 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_653]
                                                    <-Reducer 63 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_760]
                                                        Group By Operator [GBY_759] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 59 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_721]
                                                            Group By Operator [GBY_713] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_701] (rows=155 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_693]
                          <-Reducer 7 [CUSTOM_SIMPLE_EDGE]
                            PARTITION_ONLY_SHUFFLE [RS_214]
                              Merge Join Operator [MERGEJOIN_600] (rows=1 width=24)
                                Conds:(Inner),Output:["_col0","_col1","_col2"]
                              <-Reducer 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_754]
                                  Group By Operator [GBY_753] (rows=1 width=8)
                                    Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                  <-Reducer 22 [CUSTOM_SIMPLE_EDGE]
                                    PARTITION_ONLY_SHUFFLE [RS_75]
                                      Group By Operator [GBY_74] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count()"]
                                        Merge Join Operator [MERGEJOIN_583] (rows=1352994 width=8)
                                          Conds:RS_70._col2=RS_698._col0(Inner)
                                        <-Map 59 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_698]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_693]
                                        <-Reducer 21 [SIMPLE_EDGE]
                                          SHUFFLE [RS_70]
                                            PartitionCols:_col2
                                            Merge Join Operator [MERGEJOIN_582] (rows=1842898 width=0)
                                              Conds:RS_67._col0=RS_662._col0(Inner),Output:["_col2"]
                                            <-Map 50 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_662]
                                                PartitionCols:_col0
                                                Select Operator [SEL_652] (rows=1515 width=12)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_644] (rows=1515 width=12)
                                                    predicate:((t_hour = 11) and (t_minute >= 30) and t_time_sk is not null)
                                                     Please refer to the previous TableScan [TS_6]
                                            <-Reducer 20 [SIMPLE_EDGE]
                                              SHUFFLE [RS_67]
                                                PartitionCols:_col0
                                                Merge Join Operator [MERGEJOIN_581] (rows=56928540 width=4)
                                                  Conds:RS_752._col1=RS_612._col0(Inner),Output:["_col0","_col2"]
                                                <-Map 13 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_612]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_607]
                                                <-Map 69 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_752]
                                                    PartitionCols:_col1
                                                    Select Operator [SEL_751] (rows=501695814 width=11)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_750] (rows=501695814 width=11)
                                                        predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_65_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_65_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_65_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_68_time_dim_t_time_sk_min) AND DynamicValue(RS_68_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_68_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_71_store_s_store_sk_min) AND DynamicValue(RS_71_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_71_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                        TableScan [TS_52] (rows=575995635 width=11)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                        <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_745]
                                                            Group By Operator [GBY_744] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_634]
                                                                Group By Operator [GBY_626] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_613] (rows=817 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_607]
                                                        <-Reducer 53 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_747]
                                                            Group By Operator [GBY_746] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 50 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_684]
                                                                Group By Operator [GBY_676] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_663] (rows=1515 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_652]
                                                        <-Reducer 62 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_749]
                                                            Group By Operator [GBY_748] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 59 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_720]
                                                                Group By Operator [GBY_712] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_699] (rows=155 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_693]
                              <-Reducer 6 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_211]
                                  Merge Join Operator [MERGEJOIN_599] (rows=1 width=16)
                                    Conds:(Inner),Output:["_col0","_col1"]
                                  <-Reducer 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_743]
                                      Group By Operator [GBY_742] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                      <-Reducer 17 [CUSTOM_SIMPLE_EDGE]
                                        PARTITION_ONLY_SHUFFLE [RS_49]
                                          Group By Operator [GBY_48] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Merge Join Operator [MERGEJOIN_580] (rows=1352994 width=8)
                                              Conds:RS_44._col2=RS_696._col0(Inner)
                                            <-Map 59 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_696]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_693]
                                            <-Reducer 16 [SIMPLE_EDGE]
                                              SHUFFLE [RS_44]
                                                PartitionCols:_col2
                                                Merge Join Operator [MERGEJOIN_579] (rows=1842898 width=0)
                                                  Conds:RS_41._col0=RS_660._col0(Inner),Output:["_col2"]
                                                <-Map 50 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_660]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_651] (rows=1515 width=12)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_643] (rows=1515 width=12)
                                                        predicate:((t_hour = 12) and (t_minute < 30) and t_time_sk is not null)
                                                         Please refer to the previous TableScan [TS_6]
                                                <-Reducer 15 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_41]
                                                    PartitionCols:_col0
                                                    Merge Join Operator [MERGEJOIN_578] (rows=56928540 width=4)
                                                      Conds:RS_741._col1=RS_610._col0(Inner),Output:["_col0","_col2"]
                                                    <-Map 13 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_610]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_607]
                                                    <-Map 68 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_741]
                                                        PartitionCols:_col1
                                                        Select Operator [SEL_740] (rows=501695814 width=11)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_739] (rows=501695814 width=11)
                                                            predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_39_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_39_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_39_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_42_time_dim_t_time_sk_min) AND DynamicValue(RS_42_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_42_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_45_store_s_store_sk_min) AND DynamicValue(RS_45_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_45_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                            TableScan [TS_26] (rows=575995635 width=11)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                            <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_734]
                                                                Group By Operator [GBY_733] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_633]
                                                                    Group By Operator [GBY_625] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_611] (rows=817 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_607]
                                                            <-Reducer 52 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_736]
                                                                Group By Operator [GBY_735] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 50 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_683]
                                                                    Group By Operator [GBY_675] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_661] (rows=1515 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_651]
                                                            <-Reducer 61 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_738]
                                                                Group By Operator [GBY_737] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 59 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_719]
                                                                    Group By Operator [GBY_711] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_697] (rows=155 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_693]
                                  <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_732]
                                      Group By Operator [GBY_731] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                      <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
                                        PARTITION_ONLY_SHUFFLE [RS_23]
                                          Group By Operator [GBY_22] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Merge Join Operator [MERGEJOIN_577] (rows=1352994 width=8)
                                              Conds:RS_18._col2=RS_694._col0(Inner)
                                            <-Map 59 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_694]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_693]
                                            <-Reducer 3 [SIMPLE_EDGE]
                                              SHUFFLE [RS_18]
                                                PartitionCols:_col2
                                                Merge Join Operator [MERGEJOIN_576] (rows=1842898 width=0)
                                                  Conds:RS_15._col0=RS_658._col0(Inner),Output:["_col2"]
                                                <-Map 50 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_658]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_650] (rows=1515 width=12)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_642] (rows=1515 width=12)
                                                        predicate:((t_hour = 8) and (t_minute >= 30) and t_time_sk is not null)
                                                         Please refer to the previous TableScan [TS_6]
                                                <-Reducer 2 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_15]
                                                    PartitionCols:_col0
                                                    Merge Join Operator [MERGEJOIN_575] (rows=56928540 width=4)
                                                      Conds:RS_730._col1=RS_608._col0(Inner),Output:["_col0","_col2"]
                                                    <-Map 13 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_608]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_607]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_730]
                                                        PartitionCols:_col1
                                                        Select Operator [SEL_729] (rows=501695814 width=11)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_728] (rows=501695814 width=11)
                                                            predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_13_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_13_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_13_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_16_time_dim_t_time_sk_min) AND DynamicValue(RS_16_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_16_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_19_store_s_store_sk_min) AND DynamicValue(RS_19_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_19_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                            TableScan [TS_0] (rows=575995635 width=11)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                            <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_641]
                                                                Group By Operator [GBY_640] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_632]
                                                                    Group By Operator [GBY_624] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_609] (rows=817 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_607]
                                                            <-Reducer 51 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_691]
                                                                Group By Operator [GBY_690] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 50 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_682]
                                                                    Group By Operator [GBY_674] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_659] (rows=1515 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_650]
                                                            <-Reducer 60 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_727]
                                                                Group By Operator [GBY_726] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 59 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_718]
                                                                    Group By Operator [GBY_710] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_695] (rows=155 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_693]
              <-Reducer 43 [CUSTOM_SIMPLE_EDGE] vectorized
                PARTITION_ONLY_SHUFFLE [RS_798]
                  Group By Operator [GBY_797] (rows=1 width=8)
                    Output:["_col0"],aggregations:["count(VALUE._col0)"]
                  <-Reducer 42 [CUSTOM_SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_179]
                      Group By Operator [GBY_178] (rows=1 width=8)
                        Output:["_col0"],aggregations:["count()"]
                        Merge Join Operator [MERGEJOIN_595] (rows=1352994 width=8)
                          Conds:RS_174._col2=RS_706._col0(Inner)
                        <-Map 59 [SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_706]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_693]
                        <-Reducer 41 [SIMPLE_EDGE]
                          SHUFFLE [RS_174]
                            PartitionCols:_col2
                            Merge Join Operator [MERGEJOIN_594] (rows=1842898 width=0)
                              Conds:RS_171._col0=RS_670._col0(Inner),Output:["_col2"]
                            <-Map 50 [SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_670]
                                PartitionCols:_col0
                                Select Operator [SEL_656] (rows=1515 width=12)
                                  Output:["_col0"]
                                  Filter Operator [FIL_648] (rows=1515 width=12)
                                    predicate:((t_hour = 9) and (t_minute >= 30) and t_time_sk is not null)
                                     Please refer to the previous TableScan [TS_6]
                            <-Reducer 40 [SIMPLE_EDGE]
                              SHUFFLE [RS_171]
                                PartitionCols:_col0
                                Merge Join Operator [MERGEJOIN_593] (rows=56928540 width=4)
                                  Conds:RS_796._col1=RS_620._col0(Inner),Output:["_col0","_col2"]
                                <-Map 13 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_620]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_607]
                                <-Map 73 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_796]
                                    PartitionCols:_col1
                                    Select Operator [SEL_795] (rows=501695814 width=11)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_794] (rows=501695814 width=11)
                                        predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_169_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_169_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_169_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_172_time_dim_t_time_sk_min) AND DynamicValue(RS_172_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_172_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_175_store_s_store_sk_min) AND DynamicValue(RS_175_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_175_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                        TableScan [TS_156] (rows=575995635 width=11)
                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                        <-Reducer 44 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_789]
                                            Group By Operator [GBY_788] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_638]
                                                Group By Operator [GBY_630] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_621] (rows=817 width=4)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_607]
                                        <-Reducer 57 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_791]
                                            Group By Operator [GBY_790] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 50 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_688]
                                                Group By Operator [GBY_680] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_671] (rows=1515 width=4)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_656]
                                        <-Reducer 66 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_793]
                                            Group By Operator [GBY_792] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 59 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_724]
                                                Group By Operator [GBY_716] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_707] (rows=155 width=4)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_693]
          <-Reducer 48 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_809]
              Group By Operator [GBY_808] (rows=1 width=8)
                Output:["_col0"],aggregations:["count(VALUE._col0)"]
              <-Reducer 47 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_205]
                  Group By Operator [GBY_204] (rows=1 width=8)
                    Output:["_col0"],aggregations:["count()"]
                    Merge Join Operator [MERGEJOIN_598] (rows=1352994 width=8)
                      Conds:RS_200._col2=RS_708._col0(Inner)
                    <-Map 59 [SIMPLE_EDGE] vectorized
                      PARTITION_ONLY_SHUFFLE [RS_708]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_693]
                    <-Reducer 46 [SIMPLE_EDGE]
                      SHUFFLE [RS_200]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_597] (rows=1842898 width=0)
                          Conds:RS_197._col0=RS_672._col0(Inner),Output:["_col2"]
                        <-Map 50 [SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_672]
                            PartitionCols:_col0
                            Select Operator [SEL_657] (rows=1515 width=12)
                              Output:["_col0"]
                              Filter Operator [FIL_649] (rows=1515 width=12)
                                predicate:((t_hour = 9) and (t_minute < 30) and t_time_sk is not null)
                                 Please refer to the previous TableScan [TS_6]
                        <-Reducer 45 [SIMPLE_EDGE]
                          SHUFFLE [RS_197]
                            PartitionCols:_col0
                            Merge Join Operator [MERGEJOIN_596] (rows=56928540 width=4)
                              Conds:RS_807._col1=RS_622._col0(Inner),Output:["_col0","_col2"]
                            <-Map 13 [SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_622]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_607]
                            <-Map 74 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_807]
                                PartitionCols:_col1
                                Select Operator [SEL_806] (rows=501695814 width=11)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_805] (rows=501695814 width=11)
                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_195_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_195_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_195_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_198_time_dim_t_time_sk_min) AND DynamicValue(RS_198_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_198_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_201_store_s_store_sk_min) AND DynamicValue(RS_201_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_201_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                    TableScan [TS_182] (rows=575995635 width=11)
                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                    <-Reducer 49 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_800]
                                        Group By Operator [GBY_799] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_639]
                                            Group By Operator [GBY_631] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_623] (rows=817 width=4)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_607]
                                    <-Reducer 58 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_802]
                                        Group By Operator [GBY_801] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 50 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_689]
                                            Group By Operator [GBY_681] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_673] (rows=1515 width=4)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_657]
                                    <-Reducer 67 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_804]
                                        Group By Operator [GBY_803] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 59 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_725]
                                            Group By Operator [GBY_717] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_709] (rows=155 width=4)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_693]

