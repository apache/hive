PREHOOK: query: explain
select  
   substr(w_warehouse_name,1,20)
  ,sm_type
  ,cc_name
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk <= 30 ) then 1 else 0 end)  as `30 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 30) and 
                 (cs_ship_date_sk - cs_sold_date_sk <= 60) then 1 else 0 end )  as `31-60 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 60) and 
                 (cs_ship_date_sk - cs_sold_date_sk <= 90) then 1 else 0 end)  as `61-90 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 90) and
                 (cs_ship_date_sk - cs_sold_date_sk <= 120) then 1 else 0 end)  as `91-120 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk  > 120) then 1 else 0 end)  as `>120 days` 
from
   catalog_sales
  ,warehouse
  ,ship_mode
  ,call_center
  ,date_dim
where
    d_month_seq between 1212 and 1212 + 11
and cs_ship_date_sk   = d_date_sk
and cs_warehouse_sk   = w_warehouse_sk
and cs_ship_mode_sk   = sm_ship_mode_sk
and cs_call_center_sk = cc_call_center_sk
group by
   substr(w_warehouse_name,1,20)
  ,sm_type
  ,cc_name
order by substr(w_warehouse_name,1,20)
        ,sm_type
        ,cc_name
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@call_center
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@ship_mode
PREHOOK: Input: default@warehouse
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
   substr(w_warehouse_name,1,20)
  ,sm_type
  ,cc_name
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk <= 30 ) then 1 else 0 end)  as `30 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 30) and 
                 (cs_ship_date_sk - cs_sold_date_sk <= 60) then 1 else 0 end )  as `31-60 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 60) and 
                 (cs_ship_date_sk - cs_sold_date_sk <= 90) then 1 else 0 end)  as `61-90 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 90) and
                 (cs_ship_date_sk - cs_sold_date_sk <= 120) then 1 else 0 end)  as `91-120 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk  > 120) then 1 else 0 end)  as `>120 days` 
from
   catalog_sales
  ,warehouse
  ,ship_mode
  ,call_center
  ,date_dim
where
    d_month_seq between 1212 and 1212 + 11
and cs_ship_date_sk   = d_date_sk
and cs_warehouse_sk   = w_warehouse_sk
and cs_ship_mode_sk   = sm_ship_mode_sk
and cs_call_center_sk = cc_call_center_sk
group by
   substr(w_warehouse_name,1,20)
  ,sm_type
  ,cc_name
order by substr(w_warehouse_name,1,20)
        ,sm_type
        ,cc_name
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@call_center
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@ship_mode
POSTHOOK: Input: default@warehouse
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 13 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Reducer 13 <- Map 12 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Map 10 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 11 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 12 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_132]
        Limit [LIM_131] (rows=100 width=590)
          Number of rows:100
          Select Operator [SEL_130] (rows=3869553 width=590)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_129]
              Select Operator [SEL_128] (rows=3869553 width=590)
                Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                Group By Operator [GBY_127] (rows=3869553 width=406)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)"],keys:KEY._col0, KEY._col1, KEY._col2
                <-Reducer 5 [SIMPLE_EDGE]
                  SHUFFLE [RS_30]
                    PartitionCols:_col0, _col1, _col2
                    Group By Operator [GBY_29] (rows=7739106 width=406)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col3)","sum(_col4)","sum(_col5)","sum(_col6)","sum(_col7)"],keys:_col0, _col1, _col2
                      Top N Key Operator [TNK_57] (rows=15478212 width=289)
                        keys:_col0, _col1, _col2,sort order:+++,top n:100
                        Select Operator [SEL_27] (rows=15478212 width=289)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                          Merge Join Operator [MERGEJOIN_101] (rows=15478212 width=289)
                            Conds:RS_24._col3=RS_112._col0(Inner),Output:["_col0","_col1","_col8","_col10","_col12"]
                          <-Map 12 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_112]
                              PartitionCols:_col0
                              Select Operator [SEL_111] (rows=1 width=88)
                                Output:["_col0","_col1"]
                                Filter Operator [FIL_110] (rows=1 width=88)
                                  predicate:sm_ship_mode_sk is not null
                                  TableScan [TS_12] (rows=1 width=88)
                                    default@ship_mode,ship_mode,Tbl:COMPLETE,Col:COMPLETE,Output:["sm_ship_mode_sk","sm_type"]
                          <-Reducer 4 [SIMPLE_EDGE]
                            SHUFFLE [RS_24]
                              PartitionCols:_col3
                              Merge Join Operator [MERGEJOIN_100] (rows=46434637 width=209)
                                Conds:RS_21._col4=RS_126._col0(Inner),Output:["_col0","_col1","_col3","_col8","_col10"]
                              <-Map 11 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_126]
                                  PartitionCols:_col0
                                  Select Operator [SEL_125] (rows=27 width=104)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_124] (rows=27 width=104)
                                      predicate:w_warehouse_sk is not null
                                      TableScan [TS_9] (rows=27 width=104)
                                        default@warehouse,warehouse,Tbl:COMPLETE,Col:COMPLETE,Output:["w_warehouse_sk","w_warehouse_name"]
                              <-Reducer 3 [SIMPLE_EDGE]
                                SHUFFLE [RS_21]
                                  PartitionCols:_col4
                                  Merge Join Operator [MERGEJOIN_99] (rows=46434637 width=113)
                                    Conds:RS_18._col2=RS_123._col0(Inner),Output:["_col0","_col1","_col3","_col4","_col8"]
                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_123]
                                      PartitionCols:_col0
                                      Select Operator [SEL_122] (rows=60 width=102)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_121] (rows=60 width=102)
                                          predicate:cc_call_center_sk is not null
                                          TableScan [TS_6] (rows=60 width=102)
                                            default@call_center,call_center,Tbl:COMPLETE,Col:COMPLETE,Output:["cc_call_center_sk","cc_name"]
                                  <-Reducer 2 [SIMPLE_EDGE]
                                    SHUFFLE [RS_18]
                                      PartitionCols:_col2
                                      Merge Join Operator [MERGEJOIN_98] (rows=46434637 width=19)
                                        Conds:RS_120._col1=RS_104._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_104]
                                          PartitionCols:_col0
                                          Select Operator [SEL_103] (rows=317 width=8)
                                            Output:["_col0"]
                                            Filter Operator [FIL_102] (rows=317 width=8)
                                              predicate:(d_date_sk is not null and d_month_seq BETWEEN 1212 AND 1223)
                                              TableScan [TS_3] (rows=73049 width=8)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_month_seq"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_120]
                                          PartitionCols:_col1
                                          Select Operator [SEL_119] (rows=282273729 width=19)
                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                            Filter Operator [FIL_118] (rows=282273729 width=19)
                                              predicate:((cs_ship_date_sk BETWEEN DynamicValue(RS_16_date_dim_d_date_sk_min) AND DynamicValue(RS_16_date_dim_d_date_sk_max) and in_bloom_filter(cs_ship_date_sk, DynamicValue(RS_16_date_dim_d_date_sk_bloom_filter))) and (cs_ship_mode_sk BETWEEN DynamicValue(RS_25_ship_mode_sm_ship_mode_sk_min) AND DynamicValue(RS_25_ship_mode_sm_ship_mode_sk_max) and in_bloom_filter(cs_ship_mode_sk, DynamicValue(RS_25_ship_mode_sm_ship_mode_sk_bloom_filter))) and cs_call_center_sk is not null and cs_ship_date_sk is not null and cs_ship_mode_sk is not null and cs_warehouse_sk is not null)
                                              TableScan [TS_0] (rows=287989836 width=19)
                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_ship_date_sk","cs_call_center_sk","cs_ship_mode_sk","cs_warehouse_sk"]
                                              <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_117]
                                                  Group By Operator [GBY_116] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_115]
                                                      Group By Operator [GBY_114] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_113] (rows=1 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_111]
                                              <-Reducer 9 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_109]
                                                  Group By Operator [GBY_108] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_107]
                                                      Group By Operator [GBY_106] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_105] (rows=317 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_103]

