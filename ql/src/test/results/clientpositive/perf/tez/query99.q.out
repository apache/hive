PREHOOK: query: explain
select  
   substr(w_warehouse_name,1,20)
  ,sm_type
  ,cc_name
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk <= 30 ) then 1 else 0 end)  as `30 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 30) and 
                 (cs_ship_date_sk - cs_sold_date_sk <= 60) then 1 else 0 end )  as `31-60 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 60) and 
                 (cs_ship_date_sk - cs_sold_date_sk <= 90) then 1 else 0 end)  as `61-90 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 90) and
                 (cs_ship_date_sk - cs_sold_date_sk <= 120) then 1 else 0 end)  as `91-120 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk  > 120) then 1 else 0 end)  as `>120 days` 
from
   catalog_sales
  ,warehouse
  ,ship_mode
  ,call_center
  ,date_dim
where
    d_month_seq between 1212 and 1212 + 11
and cs_ship_date_sk   = d_date_sk
and cs_warehouse_sk   = w_warehouse_sk
and cs_ship_mode_sk   = sm_ship_mode_sk
and cs_call_center_sk = cc_call_center_sk
group by
   substr(w_warehouse_name,1,20)
  ,sm_type
  ,cc_name
order by substr(w_warehouse_name,1,20)
        ,sm_type
        ,cc_name
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@call_center
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@ship_mode
PREHOOK: Input: default@warehouse
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
   substr(w_warehouse_name,1,20)
  ,sm_type
  ,cc_name
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk <= 30 ) then 1 else 0 end)  as `30 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 30) and 
                 (cs_ship_date_sk - cs_sold_date_sk <= 60) then 1 else 0 end )  as `31-60 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 60) and 
                 (cs_ship_date_sk - cs_sold_date_sk <= 90) then 1 else 0 end)  as `61-90 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 90) and
                 (cs_ship_date_sk - cs_sold_date_sk <= 120) then 1 else 0 end)  as `91-120 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk  > 120) then 1 else 0 end)  as `>120 days` 
from
   catalog_sales
  ,warehouse
  ,ship_mode
  ,call_center
  ,date_dim
where
    d_month_seq between 1212 and 1212 + 11
and cs_ship_date_sk   = d_date_sk
and cs_warehouse_sk   = w_warehouse_sk
and cs_ship_mode_sk   = sm_ship_mode_sk
and cs_call_center_sk = cc_call_center_sk
group by
   substr(w_warehouse_name,1,20)
  ,sm_type
  ,cc_name
order by substr(w_warehouse_name,1,20)
        ,sm_type
        ,cc_name
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@call_center
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@ship_mode
POSTHOOK: Input: default@warehouse
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 12 (BROADCAST_EDGE)
Reducer 12 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Map 9 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 10 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 11 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_126]
        Limit [LIM_125] (rows=100 width=590)
          Number of rows:100
          Select Operator [SEL_124] (rows=3920468 width=590)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_123]
              Select Operator [SEL_122] (rows=3920468 width=590)
                Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                Group By Operator [GBY_121] (rows=3920468 width=406)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)"],keys:KEY._col0, KEY._col1, KEY._col2
                <-Reducer 5 [SIMPLE_EDGE]
                  SHUFFLE [RS_29]
                    PartitionCols:_col0, _col1, _col2
                    Group By Operator [GBY_28] (rows=7840936 width=406)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col4)","sum(_col5)","sum(_col6)","sum(_col7)","sum(_col8)"],keys:_col13, _col15, _col11
                      Top N Key Operator [TNK_56] (rows=15681873 width=386)
                        keys:_col13, _col15, _col11,top n:100
                        Merge Join Operator [MERGEJOIN_100] (rows=15681873 width=386)
                          Conds:RS_24._col2=RS_103._col0(Inner),Output:["_col4","_col5","_col6","_col7","_col8","_col11","_col13","_col15"]
                        <-Map 11 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_103]
                            PartitionCols:_col0
                            Select Operator [SEL_102] (rows=1 width=88)
                              Output:["_col0","_col1"]
                              Filter Operator [FIL_101] (rows=1 width=88)
                                predicate:sm_ship_mode_sk is not null
                                TableScan [TS_12] (rows=1 width=88)
                                  default@ship_mode,ship_mode,Tbl:COMPLETE,Col:COMPLETE,Output:["sm_ship_mode_sk","sm_type"]
                        <-Reducer 4 [SIMPLE_EDGE]
                          SHUFFLE [RS_24]
                            PartitionCols:_col2
                            Merge Join Operator [MERGEJOIN_99] (rows=282273729 width=305)
                              Conds:RS_21._col3=RS_120._col0(Inner),Output:["_col2","_col4","_col5","_col6","_col7","_col8","_col11","_col13"]
                            <-Map 10 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_120]
                                PartitionCols:_col0
                                Select Operator [SEL_119] (rows=27 width=188)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_118] (rows=27 width=104)
                                    predicate:w_warehouse_sk is not null
                                    TableScan [TS_9] (rows=27 width=104)
                                      default@warehouse,warehouse,Tbl:COMPLETE,Col:COMPLETE,Output:["w_warehouse_sk","w_warehouse_name"]
                            <-Reducer 3 [SIMPLE_EDGE]
                              SHUFFLE [RS_21]
                                PartitionCols:_col3
                                Merge Join Operator [MERGEJOIN_98] (rows=282273729 width=125)
                                  Conds:RS_18._col1=RS_117._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col11"]
                                <-Map 9 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_117]
                                    PartitionCols:_col0
                                    Select Operator [SEL_116] (rows=60 width=102)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_115] (rows=60 width=102)
                                        predicate:cc_call_center_sk is not null
                                        TableScan [TS_6] (rows=60 width=102)
                                          default@call_center,call_center,Tbl:COMPLETE,Col:COMPLETE,Output:["cc_call_center_sk","cc_name"]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_18]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_97] (rows=282273729 width=31)
                                      Conds:RS_111._col0=RS_114._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_111]
                                        PartitionCols:_col0
                                        Select Operator [SEL_110] (rows=282273729 width=35)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                          Filter Operator [FIL_109] (rows=282273729 width=19)
                                            predicate:(cs_warehouse_sk is not null and cs_ship_date_sk is not null and cs_ship_mode_sk is not null and cs_call_center_sk is not null and cs_ship_mode_sk BETWEEN DynamicValue(RS_25_ship_mode_sm_ship_mode_sk_min) AND DynamicValue(RS_25_ship_mode_sm_ship_mode_sk_max) and in_bloom_filter(cs_ship_mode_sk, DynamicValue(RS_25_ship_mode_sm_ship_mode_sk_bloom_filter)))
                                            TableScan [TS_0] (rows=287989836 width=19)
                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_ship_date_sk","cs_call_center_sk","cs_ship_mode_sk","cs_warehouse_sk"]
                                            <-Reducer 12 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_108]
                                                Group By Operator [GBY_107] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_106]
                                                    Group By Operator [GBY_105] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_104] (rows=1 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_102]
                                    <-Map 8 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_114]
                                        PartitionCols:_col0
                                        Select Operator [SEL_113] (rows=317 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_112] (rows=317 width=8)
                                            predicate:(d_month_seq BETWEEN 1212 AND 1223 and d_date_sk is not null)
                                            TableScan [TS_3] (rows=73049 width=8)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_month_seq"]

