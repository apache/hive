PREHOOK: query: explain
select  substr(r_reason_desc,1,20)
       ,avg(ws_quantity)
       ,avg(wr_refunded_cash)
       ,avg(wr_fee)
 from web_sales, web_returns, web_page, customer_demographics cd1,
      customer_demographics cd2, customer_address, date_dim, reason 
 where ws_web_page_sk = wp_web_page_sk
   and ws_item_sk = wr_item_sk
   and ws_order_number = wr_order_number
   and ws_sold_date_sk = d_date_sk and d_year = 1998
   and cd1.cd_demo_sk = wr_refunded_cdemo_sk 
   and cd2.cd_demo_sk = wr_returning_cdemo_sk
   and ca_address_sk = wr_refunded_addr_sk
   and r_reason_sk = wr_reason_sk
   and
   (
    (
     cd1.cd_marital_status = 'M'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = '4 yr Degree'
     and 
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 100.00 and 150.00
    )
   or
    (
     cd1.cd_marital_status = 'D'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = 'Primary' 
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 50.00 and 100.00
    )
   or
    (
     cd1.cd_marital_status = 'U'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = 'Advanced Degree'
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 150.00 and 200.00
    )
   )
   and
   (
    (
     ca_country = 'United States'
     and
     ca_state in ('KY', 'GA', 'NM')
     and ws_net_profit between 100 and 200  
    )
    or
    (
     ca_country = 'United States'
     and
     ca_state in ('MT', 'OR', 'IN')
     and ws_net_profit between 150 and 300  
    )
    or
    (
     ca_country = 'United States'
     and
     ca_state in ('WI', 'MO', 'WV')
     and ws_net_profit between 50 and 250  
    )
   )
group by r_reason_desc
order by substr(r_reason_desc,1,20)
        ,avg(ws_quantity)
        ,avg(wr_refunded_cash)
        ,avg(wr_fee)
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@reason
PREHOOK: Input: default@web_page
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  substr(r_reason_desc,1,20)
       ,avg(ws_quantity)
       ,avg(wr_refunded_cash)
       ,avg(wr_fee)
 from web_sales, web_returns, web_page, customer_demographics cd1,
      customer_demographics cd2, customer_address, date_dim, reason 
 where ws_web_page_sk = wp_web_page_sk
   and ws_item_sk = wr_item_sk
   and ws_order_number = wr_order_number
   and ws_sold_date_sk = d_date_sk and d_year = 1998
   and cd1.cd_demo_sk = wr_refunded_cdemo_sk 
   and cd2.cd_demo_sk = wr_returning_cdemo_sk
   and ca_address_sk = wr_refunded_addr_sk
   and r_reason_sk = wr_reason_sk
   and
   (
    (
     cd1.cd_marital_status = 'M'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = '4 yr Degree'
     and 
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 100.00 and 150.00
    )
   or
    (
     cd1.cd_marital_status = 'D'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = 'Primary' 
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 50.00 and 100.00
    )
   or
    (
     cd1.cd_marital_status = 'U'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = 'Advanced Degree'
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 150.00 and 200.00
    )
   )
   and
   (
    (
     ca_country = 'United States'
     and
     ca_state in ('KY', 'GA', 'NM')
     and ws_net_profit between 100 and 200  
    )
    or
    (
     ca_country = 'United States'
     and
     ca_state in ('MT', 'OR', 'IN')
     and ws_net_profit between 150 and 300  
    )
    or
    (
     ca_country = 'United States'
     and
     ca_state in ('WI', 'MO', 'WV')
     and ws_net_profit between 50 and 250  
    )
   )
group by r_reason_desc
order by substr(r_reason_desc,1,20)
        ,avg(ws_quantity)
        ,avg(wr_refunded_cash)
        ,avg(wr_fee)
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@reason
POSTHOOK: Input: default@web_page
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 11 <- Reducer 13 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 11 (SIMPLE_EDGE)
Reducer 3 <- Map 17 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 12 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 14 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 15 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 16 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 17 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 10 vectorized
      File Output Operator [FS_240]
        Limit [LIM_239] (rows=7 width=832)
          Number of rows:100
          Select Operator [SEL_238] (rows=7 width=832)
            Output:["_col0","_col1","_col2","_col3"]
          <-Reducer 9 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_237]
              Select Operator [SEL_236] (rows=7 width=832)
                Output:["_col4","_col5","_col6","_col7"]
                Group By Operator [GBY_235] (rows=7 width=353)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","sum(VALUE._col2)","count(VALUE._col3)","sum(VALUE._col4)","count(VALUE._col5)"],keys:KEY._col0
                <-Reducer 8 [SIMPLE_EDGE]
                  SHUFFLE [RS_49]
                    PartitionCols:_col0
                    Group By Operator [GBY_48] (rows=7 width=353)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col12)","count(_col12)","sum(_col7)","count(_col7)","sum(_col6)","count(_col6)"],keys:_col25
                      Select Operator [SEL_47] (rows=16740 width=136)
                        Output:["_col6","_col7","_col12","_col25"]
                        Filter Operator [FIL_46] (rows=16740 width=136)
                          predicate:((_col33 and _col34 and _col16) or (_col35 and _col36 and _col17) or (_col37 and _col38 and _col18))
                          Merge Join Operator [MERGEJOIN_206] (rows=44640 width=136)
                            Conds:RS_43._col1, _col20, _col21=RS_224._col0, _col1, _col2(Inner),Output:["_col6","_col7","_col12","_col16","_col17","_col18","_col25","_col33","_col34","_col35","_col36","_col37","_col38"]
                          <-Map 17 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_224]
                              PartitionCols:_col0, _col1, _col2
                              Select Operator [SEL_222] (rows=265971 width=207)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                Filter Operator [FIL_221] (rows=265971 width=183)
                                  predicate:((cd_education_status) IN ('4 yr Degree', 'Primary', 'Advanced Degree') and (cd_marital_status) IN ('M', 'D', 'U') and cd_demo_sk is not null)
                                  TableScan [TS_21] (rows=1861800 width=183)
                                    default@customer_demographics,cd1,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status","cd_education_status"]
                          <-Reducer 7 [SIMPLE_EDGE]
                            SHUFFLE [RS_43]
                              PartitionCols:_col1, _col20, _col21
                              Filter Operator [FIL_42] (rows=44640 width=315)
                                predicate:((_col27 and _col13) or (_col28 and _col14) or (_col29 and _col15))
                                Merge Join Operator [MERGEJOIN_205] (rows=59520 width=315)
                                  Conds:RS_39._col2=RS_234._col0(Inner),Output:["_col1","_col6","_col7","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col20","_col21","_col25","_col27","_col28","_col29"]
                                <-Map 16 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_234]
                                    PartitionCols:_col0
                                    Select Operator [SEL_233] (rows=3529412 width=16)
                                      Output:["_col0","_col1","_col2","_col3"]
                                      Filter Operator [FIL_232] (rows=3529412 width=187)
                                        predicate:((ca_country = 'United States') and (ca_state) IN ('KY', 'GA', 'NM', 'MT', 'OR', 'IN', 'WI', 'MO', 'WV') and ca_address_sk is not null)
                                        TableScan [TS_18] (rows=40000000 width=187)
                                          default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state","ca_country"]
                                <-Reducer 6 [SIMPLE_EDGE]
                                  SHUFFLE [RS_39]
                                    PartitionCols:_col2
                                    Merge Join Operator [MERGEJOIN_204] (rows=674551 width=350)
                                      Conds:RS_36._col4=RS_231._col0(Inner),Output:["_col1","_col2","_col6","_col7","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col20","_col21","_col25"]
                                    <-Map 15 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_231]
                                        PartitionCols:_col0
                                        Select Operator [SEL_230] (rows=72 width=101)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_229] (rows=72 width=101)
                                            predicate:r_reason_sk is not null
                                            TableScan [TS_15] (rows=72 width=101)
                                              default@reason,reason,Tbl:COMPLETE,Col:COMPLETE,Output:["r_reason_sk","r_reason_desc"]
                                    <-Reducer 5 [SIMPLE_EDGE]
                                      SHUFFLE [RS_36]
                                        PartitionCols:_col4
                                        Merge Join Operator [MERGEJOIN_203] (rows=674551 width=254)
                                          Conds:RS_33._col10=RS_228._col0(Inner),Output:["_col1","_col2","_col4","_col6","_col7","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col20","_col21"]
                                        <-Map 14 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_228]
                                            PartitionCols:_col0
                                            Select Operator [SEL_227] (rows=4602 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_226] (rows=4602 width=4)
                                                predicate:wp_web_page_sk is not null
                                                TableScan [TS_12] (rows=4602 width=4)
                                                  default@web_page,web_page,Tbl:COMPLETE,Col:COMPLETE,Output:["wp_web_page_sk"]
                                        <-Reducer 4 [SIMPLE_EDGE]
                                          SHUFFLE [RS_33]
                                            PartitionCols:_col10
                                            Merge Join Operator [MERGEJOIN_202] (rows=674551 width=258)
                                              Conds:RS_30._col8=RS_212._col0(Inner),Output:["_col1","_col2","_col4","_col6","_col7","_col10","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col20","_col21"]
                                            <-Map 12 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_212]
                                                PartitionCols:_col0
                                                Select Operator [SEL_211] (rows=652 width=4)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_210] (rows=652 width=8)
                                                    predicate:((d_year = 1998) and d_date_sk is not null)
                                                    TableScan [TS_9] (rows=73049 width=8)
                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                            <-Reducer 3 [SIMPLE_EDGE]
                                              SHUFFLE [RS_30]
                                                PartitionCols:_col8
                                                Merge Join Operator [MERGEJOIN_201] (rows=1889180 width=383)
                                                  Conds:RS_27._col3=RS_225._col0(Inner),Output:["_col1","_col2","_col4","_col6","_col7","_col8","_col10","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col20","_col21"]
                                                <-Map 17 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_225]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_223] (rows=265971 width=183)
                                                      Output:["_col0","_col1","_col2"]
                                                       Please refer to the previous Filter Operator [FIL_221]
                                                <-Reducer 2 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_27]
                                                    PartitionCols:_col3
                                                    Merge Join Operator [MERGEJOIN_200] (rows=13039884 width=266)
                                                      Conds:RS_209._col0, _col5=RS_220._col1, _col3(Inner),Output:["_col1","_col2","_col3","_col4","_col6","_col7","_col8","_col10","_col12","_col13","_col14","_col15","_col16","_col17","_col18"]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_209]
                                                        PartitionCols:_col0, _col5
                                                        Select Operator [SEL_208] (rows=11975292 width=237)
                                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                          Filter Operator [FIL_207] (rows=11975292 width=237)
                                                            predicate:(wr_item_sk is not null and wr_order_number is not null and wr_reason_sk is not null and wr_refunded_addr_sk is not null and wr_refunded_cdemo_sk is not null and wr_returning_cdemo_sk is not null)
                                                            TableScan [TS_0] (rows=14398467 width=237)
                                                              default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_item_sk","wr_refunded_cdemo_sk","wr_refunded_addr_sk","wr_returning_cdemo_sk","wr_reason_sk","wr_order_number","wr_fee","wr_refunded_cash"]
                                                    <-Map 11 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_220]
                                                        PartitionCols:_col1, _col3
                                                        Select Operator [SEL_219] (rows=15992347 width=43)
                                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                                                          Filter Operator [FIL_218] (rows=15992347 width=243)
                                                            predicate:((ws_net_profit BETWEEN 100 AND 200 or ws_net_profit BETWEEN 150 AND 300 or ws_net_profit BETWEEN 50 AND 250) and (ws_sales_price BETWEEN 100 AND 150 or ws_sales_price BETWEEN 50 AND 100 or ws_sales_price BETWEEN 150 AND 200) and (ws_sold_date_sk BETWEEN DynamicValue(RS_31_date_dim_d_date_sk_min) AND DynamicValue(RS_31_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_31_date_dim_d_date_sk_bloom_filter))) and ws_item_sk is not null and ws_order_number is not null and ws_sold_date_sk is not null and ws_web_page_sk is not null)
                                                            TableScan [TS_3] (rows=144002668 width=243)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_web_page_sk","ws_order_number","ws_quantity","ws_sales_price","ws_net_profit"]
                                                            <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_217]
                                                                Group By Operator [GBY_216] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_215]
                                                                    Group By Operator [GBY_214] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_213] (rows=652 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_211]

