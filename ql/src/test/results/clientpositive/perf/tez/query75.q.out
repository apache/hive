PREHOOK: query: explain
WITH all_sales AS (
 SELECT d_year
       ,i_brand_id
       ,i_class_id
       ,i_category_id
       ,i_manufact_id
       ,SUM(sales_cnt) AS sales_cnt
       ,SUM(sales_amt) AS sales_amt
 FROM (SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt
             ,cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt
       FROM catalog_sales JOIN item ON i_item_sk=cs_item_sk
                          JOIN date_dim ON d_date_sk=cs_sold_date_sk
                          LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number 
                                                    AND cs_item_sk=cr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt
             ,ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt
       FROM store_sales JOIN item ON i_item_sk=ss_item_sk
                        JOIN date_dim ON d_date_sk=ss_sold_date_sk
                        LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number 
                                                AND ss_item_sk=sr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt
             ,ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt
       FROM web_sales JOIN item ON i_item_sk=ws_item_sk
                      JOIN date_dim ON d_date_sk=ws_sold_date_sk
                      LEFT JOIN web_returns ON (ws_order_number=wr_order_number 
                                            AND ws_item_sk=wr_item_sk)
       WHERE i_category='Sports') sales_detail
 GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id)
 SELECT  prev_yr.d_year AS prev_year
                          ,curr_yr.d_year AS year
                          ,curr_yr.i_brand_id
                          ,curr_yr.i_class_id
                          ,curr_yr.i_category_id
                          ,curr_yr.i_manufact_id
                          ,prev_yr.sales_cnt AS prev_yr_cnt
                          ,curr_yr.sales_cnt AS curr_yr_cnt
                          ,curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff
                          ,curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
 FROM all_sales curr_yr, all_sales prev_yr
 WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
   AND curr_yr.i_class_id=prev_yr.i_class_id
   AND curr_yr.i_category_id=prev_yr.i_category_id
   AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
   AND curr_yr.d_year=2002
   AND prev_yr.d_year=2002-1
   AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9
 ORDER BY sales_cnt_diff
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
WITH all_sales AS (
 SELECT d_year
       ,i_brand_id
       ,i_class_id
       ,i_category_id
       ,i_manufact_id
       ,SUM(sales_cnt) AS sales_cnt
       ,SUM(sales_amt) AS sales_amt
 FROM (SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt
             ,cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt
       FROM catalog_sales JOIN item ON i_item_sk=cs_item_sk
                          JOIN date_dim ON d_date_sk=cs_sold_date_sk
                          LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number 
                                                    AND cs_item_sk=cr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt
             ,ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt
       FROM store_sales JOIN item ON i_item_sk=ss_item_sk
                        JOIN date_dim ON d_date_sk=ss_sold_date_sk
                        LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number 
                                                AND ss_item_sk=sr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt
             ,ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt
       FROM web_sales JOIN item ON i_item_sk=ws_item_sk
                      JOIN date_dim ON d_date_sk=ws_sold_date_sk
                      LEFT JOIN web_returns ON (ws_order_number=wr_order_number 
                                            AND ws_item_sk=wr_item_sk)
       WHERE i_category='Sports') sales_detail
 GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id)
 SELECT  prev_yr.d_year AS prev_year
                          ,curr_yr.d_year AS year
                          ,curr_yr.i_brand_id
                          ,curr_yr.i_class_id
                          ,curr_yr.i_category_id
                          ,curr_yr.i_manufact_id
                          ,prev_yr.sales_cnt AS prev_yr_cnt
                          ,curr_yr.sales_cnt AS curr_yr_cnt
                          ,curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff
                          ,curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
 FROM all_sales curr_yr, all_sales prev_yr
 WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
   AND curr_yr.i_class_id=prev_yr.i_class_id
   AND curr_yr.i_category_id=prev_yr.i_category_id
   AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
   AND curr_yr.d_year=2002
   AND prev_yr.d_year=2002-1
   AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9
 ORDER BY sales_cnt_diff
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 14 <- Reducer 18 (BROADCAST_EDGE)
Map 40 <- Reducer 22 (BROADCAST_EDGE)
Map 42 <- Reducer 26 (BROADCAST_EDGE)
Map 43 <- Reducer 29 (BROADCAST_EDGE)
Map 44 <- Reducer 33 (BROADCAST_EDGE)
Map 45 <- Reducer 37 (BROADCAST_EDGE)
Reducer 11 <- Union 10 (SIMPLE_EDGE), Union 12 (CONTAINS)
Reducer 13 <- Union 12 (SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 16 <- Map 38 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 18 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 17 (SIMPLE_EDGE), Map 40 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 20 <- Map 38 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Map 39 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 22 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Map 17 (SIMPLE_EDGE), Map 42 (SIMPLE_EDGE)
Reducer 24 <- Map 38 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Map 41 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 26 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Map 17 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE)
Reducer 28 <- Map 38 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 30 <- Map 17 (SIMPLE_EDGE), Map 44 (SIMPLE_EDGE)
Reducer 31 <- Map 38 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE)
Reducer 32 <- Map 39 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE), Union 10 (CONTAINS)
Reducer 33 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 34 <- Map 17 (SIMPLE_EDGE), Map 45 (SIMPLE_EDGE)
Reducer 35 <- Map 38 (SIMPLE_EDGE), Reducer 34 (SIMPLE_EDGE)
Reducer 36 <- Map 41 (SIMPLE_EDGE), Reducer 35 (SIMPLE_EDGE), Union 12 (CONTAINS)
Reducer 37 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Union 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 13 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 1 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE), Union 10 (CONTAINS)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_637]
        Select Operator [SEL_636] (rows=100 width=160)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
          Limit [LIM_635] (rows=100 width=152)
            Number of rows:100
            Select Operator [SEL_634] (rows=3422897230256 width=151)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
            <-Reducer 7 [SIMPLE_EDGE]
              SHUFFLE [RS_181]
                Select Operator [SEL_180] (rows=3422897230256 width=151)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                  Top N Key Operator [TNK_270] (rows=3422897230256 width=255)
                    keys:(_col10 - _col4),top n:100
                    Filter Operator [FIL_179] (rows=3422897230256 width=255)
                      predicate:((CAST( _col10 AS decimal(17,2)) / CAST( _col4 AS decimal(17,2))) < 0.9)
                      Merge Join Operator [MERGEJOIN_537] (rows=10268691690770 width=255)
                        Conds:RS_630._col0, _col1, _col2, _col3=RS_633._col0, _col1, _col2, _col3(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col10","_col11"]
                      <-Reducer 13 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_633]
                          PartitionCols:_col0, _col1, _col2, _col3
                          Group By Operator [GBY_632] (rows=84235776 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_631] (rows=736356923 width=131)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                            <-Union 12 [SIMPLE_EDGE]
                              <-Reducer 11 [CONTAINS] vectorized
                                Reduce Output Operator [RS_645]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_644] (rows=736356923 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Group By Operator [GBY_643] (rows=621178955 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                                    <-Union 10 [SIMPLE_EDGE]
                                      <-Reducer 32 [CONTAINS]
                                        Reduce Output Operator [RS_570]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                          Group By Operator [GBY_569] (rows=621178955 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                            Select Operator [SEL_567] (rows=450703984 width=131)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Merge Join Operator [MERGEJOIN_566] (rows=450703984 width=204)
                                                Conds:RS_654._col0, _col1=RS_131._col1, _col2(Right Outer),Output:["_col2","_col3","_col7","_col8","_col11","_col12","_col13","_col14"]
                                              <-Map 39 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_654]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_652] (rows=57591150 width=119)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_651] (rows=57591150 width=119)
                                                      predicate:(sr_ticket_number is not null and sr_item_sk is not null)
                                                      TableScan [TS_23] (rows=57591150 width=119)
                                                        default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number","sr_return_quantity","sr_return_amt"]
                                              <-Reducer 31 [SIMPLE_EDGE]
                                                SHUFFLE [RS_131]
                                                  PartitionCols:_col1, _col2
                                                  Merge Join Operator [MERGEJOIN_532] (rows=187186493 width=124)
                                                    Conds:RS_126._col1=RS_623._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_623]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_618] (rows=45745 width=19)
                                                        Output:["_col0","_col1","_col2","_col3","_col4"]
                                                        Filter Operator [FIL_617] (rows=45745 width=109)
                                                          predicate:((i_category = 'Sports') and i_manufact_id is not null and i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                          TableScan [TS_9] (rows=462000 width=109)
                                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id","i_category","i_manufact_id"]
                                                  <-Reducer 30 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_126]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_531] (rows=196410188 width=109)
                                                        Conds:RS_668._col0=RS_596._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_596]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_586] (rows=652 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_582] (rows=652 width=8)
                                                              predicate:((d_year = 2002) and d_date_sk is not null)
                                                              TableScan [TS_6] (rows=73049 width=8)
                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                      <-Map 44 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_668]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_667] (rows=550076554 width=122)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_666] (rows=550076554 width=122)
                                                              predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_124_date_dim_d_date_sk_min) AND DynamicValue(RS_124_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_124_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_114] (rows=575995635 width=122)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_ticket_number","ss_quantity","ss_ext_sales_price"]
                                                              <-Reducer 33 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_665]
                                                                  Group By Operator [GBY_664] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_610]
                                                                      Group By Operator [GBY_604] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_597] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_586]
                                      <-Reducer 9 [CONTAINS]
                                        Reduce Output Operator [RS_551]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                          Group By Operator [GBY_550] (rows=621178955 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                            Select Operator [SEL_548] (rows=170474971 width=131)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Merge Join Operator [MERGEJOIN_547] (rows=170474971 width=234)
                                                Conds:RS_579._col0, _col1=RS_108._col1, _col2(Right Outer),Output:["_col2","_col3","_col7","_col8","_col11","_col12","_col13","_col14"]
                                              <-Map 1 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_579]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_577] (rows=28798881 width=121)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_576] (rows=28798881 width=121)
                                                      predicate:(cr_order_number is not null and cr_item_sk is not null)
                                                      TableScan [TS_0] (rows=28798881 width=121)
                                                        default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_return_quantity","cr_return_amount"]
                                              <-Reducer 28 [SIMPLE_EDGE]
                                                SHUFFLE [RS_108]
                                                  PartitionCols:_col1, _col2
                                                  Merge Join Operator [MERGEJOIN_529] (rows=96821196 width=138)
                                                    Conds:RS_103._col1=RS_622._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_622]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_618]
                                                  <-Reducer 27 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_103]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_528] (rows=101592102 width=122)
                                                        Conds:RS_642._col0=RS_594._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_594]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_585] (rows=652 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_581] (rows=652 width=8)
                                                              predicate:((d_year = 2002) and d_date_sk is not null)
                                                               Please refer to the previous TableScan [TS_6]
                                                      <-Map 43 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_642]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_641] (rows=286549727 width=127)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_640] (rows=286549727 width=127)
                                                              predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_101_date_dim_d_date_sk_min) AND DynamicValue(RS_101_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_101_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_91] (rows=287989836 width=127)
                                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_order_number","cs_quantity","cs_ext_sales_price"]
                                                              <-Reducer 29 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_639]
                                                                  Group By Operator [GBY_638] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_609]
                                                                      Group By Operator [GBY_603] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_595] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_585]
                              <-Reducer 36 [CONTAINS]
                                Reduce Output Operator [RS_575]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_574] (rows=736356923 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Select Operator [SEL_572] (rows=115177968 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                      Merge Join Operator [MERGEJOIN_571] (rows=115177968 width=220)
                                        Conds:RS_663._col0, _col1=RS_161._col1, _col2(Right Outer),Output:["_col2","_col3","_col7","_col8","_col11","_col12","_col13","_col14"]
                                      <-Map 41 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_663]
                                          PartitionCols:_col0, _col1
                                          Select Operator [SEL_661] (rows=14398467 width=118)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Filter Operator [FIL_660] (rows=14398467 width=118)
                                              predicate:(wr_order_number is not null and wr_item_sk is not null)
                                              TableScan [TS_53] (rows=14398467 width=118)
                                                default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_item_sk","wr_order_number","wr_return_quantity","wr_return_amt"]
                                      <-Reducer 35 [SIMPLE_EDGE]
                                        SHUFFLE [RS_161]
                                          PartitionCols:_col1, _col2
                                          Merge Join Operator [MERGEJOIN_535] (rows=48990732 width=139)
                                            Conds:RS_156._col1=RS_624._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                          <-Map 38 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_624]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_618]
                                          <-Reducer 34 [SIMPLE_EDGE]
                                            SHUFFLE [RS_156]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_534] (rows=51404771 width=123)
                                                Conds:RS_673._col0=RS_598._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                              <-Map 17 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_598]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_587] (rows=652 width=4)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_583] (rows=652 width=8)
                                                      predicate:((d_year = 2002) and d_date_sk is not null)
                                                       Please refer to the previous TableScan [TS_6]
                                              <-Map 45 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_673]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_672] (rows=143966864 width=127)
                                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                                    Filter Operator [FIL_671] (rows=143966864 width=127)
                                                      predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_154_date_dim_d_date_sk_min) AND DynamicValue(RS_154_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_154_date_dim_d_date_sk_bloom_filter)))
                                                      TableScan [TS_144] (rows=144002668 width=127)
                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_order_number","ws_quantity","ws_ext_sales_price"]
                                                      <-Reducer 37 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_670]
                                                          Group By Operator [GBY_669] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_611]
                                                              Group By Operator [GBY_605] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_599] (rows=652 width=4)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_587]
                      <-Reducer 6 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_630]
                          PartitionCols:_col0, _col1, _col2, _col3
                          Group By Operator [GBY_629] (rows=84235776 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_628] (rows=736356923 width=131)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                            <-Union 5 [SIMPLE_EDGE]
                              <-Reducer 25 [CONTAINS]
                                Reduce Output Operator [RS_565]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_564] (rows=736356923 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Select Operator [SEL_562] (rows=115177968 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                      Merge Join Operator [MERGEJOIN_561] (rows=115177968 width=220)
                                        Conds:RS_662._col0, _col1=RS_73._col1, _col2(Right Outer),Output:["_col2","_col3","_col7","_col8","_col11","_col12","_col13","_col14"]
                                      <-Map 41 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_662]
                                          PartitionCols:_col0, _col1
                                           Please refer to the previous Select Operator [SEL_661]
                                      <-Reducer 24 [SIMPLE_EDGE]
                                        SHUFFLE [RS_73]
                                          PartitionCols:_col1, _col2
                                          Merge Join Operator [MERGEJOIN_526] (rows=48990732 width=139)
                                            Conds:RS_68._col1=RS_621._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                          <-Map 38 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_621]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_618]
                                          <-Reducer 23 [SIMPLE_EDGE]
                                            SHUFFLE [RS_68]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_525] (rows=51404771 width=123)
                                                Conds:RS_659._col0=RS_592._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                              <-Map 17 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_592]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_584] (rows=652 width=4)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_580] (rows=652 width=8)
                                                      predicate:((d_year = 2001) and d_date_sk is not null)
                                                       Please refer to the previous TableScan [TS_6]
                                              <-Map 42 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_659]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_658] (rows=143966864 width=127)
                                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                                    Filter Operator [FIL_657] (rows=143966864 width=127)
                                                      predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_66_date_dim_d_date_sk_min) AND DynamicValue(RS_66_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_66_date_dim_d_date_sk_bloom_filter)))
                                                      TableScan [TS_56] (rows=144002668 width=127)
                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_order_number","ws_quantity","ws_ext_sales_price"]
                                                      <-Reducer 26 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_656]
                                                          Group By Operator [GBY_655] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_608]
                                                              Group By Operator [GBY_602] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_593] (rows=652 width=4)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_584]
                              <-Reducer 4 [CONTAINS] vectorized
                                Reduce Output Operator [RS_627]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_626] (rows=736356923 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Group By Operator [GBY_625] (rows=621178955 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                                    <-Union 3 [SIMPLE_EDGE]
                                      <-Reducer 2 [CONTAINS]
                                        Reduce Output Operator [RS_542]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                          Group By Operator [GBY_541] (rows=621178955 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                            Select Operator [SEL_539] (rows=170474971 width=131)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Merge Join Operator [MERGEJOIN_538] (rows=170474971 width=234)
                                                Conds:RS_578._col0, _col1=RS_20._col1, _col2(Right Outer),Output:["_col2","_col3","_col7","_col8","_col11","_col12","_col13","_col14"]
                                              <-Map 1 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_578]
                                                  PartitionCols:_col0, _col1
                                                   Please refer to the previous Select Operator [SEL_577]
                                              <-Reducer 16 [SIMPLE_EDGE]
                                                SHUFFLE [RS_20]
                                                  PartitionCols:_col1, _col2
                                                  Merge Join Operator [MERGEJOIN_520] (rows=96821196 width=138)
                                                    Conds:RS_15._col1=RS_619._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_619]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_618]
                                                  <-Reducer 15 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_15]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_519] (rows=101592102 width=122)
                                                        Conds:RS_616._col0=RS_588._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_588]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_584]
                                                      <-Map 14 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_616]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_615] (rows=286549727 width=127)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_614] (rows=286549727 width=127)
                                                              predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_13_date_dim_d_date_sk_min) AND DynamicValue(RS_13_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_13_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_3] (rows=287989836 width=127)
                                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_order_number","cs_quantity","cs_ext_sales_price"]
                                                              <-Reducer 18 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_613]
                                                                  Group By Operator [GBY_612] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_606]
                                                                      Group By Operator [GBY_600] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_589] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_584]
                                      <-Reducer 21 [CONTAINS]
                                        Reduce Output Operator [RS_560]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                          Group By Operator [GBY_559] (rows=621178955 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                            Select Operator [SEL_557] (rows=450703984 width=131)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Merge Join Operator [MERGEJOIN_556] (rows=450703984 width=204)
                                                Conds:RS_653._col0, _col1=RS_43._col1, _col2(Right Outer),Output:["_col2","_col3","_col7","_col8","_col11","_col12","_col13","_col14"]
                                              <-Map 39 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_653]
                                                  PartitionCols:_col0, _col1
                                                   Please refer to the previous Select Operator [SEL_652]
                                              <-Reducer 20 [SIMPLE_EDGE]
                                                SHUFFLE [RS_43]
                                                  PartitionCols:_col1, _col2
                                                  Merge Join Operator [MERGEJOIN_523] (rows=187186493 width=124)
                                                    Conds:RS_38._col1=RS_620._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_620]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_618]
                                                  <-Reducer 19 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_38]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_522] (rows=196410188 width=109)
                                                        Conds:RS_650._col0=RS_590._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_590]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_584]
                                                      <-Map 40 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_650]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_649] (rows=550076554 width=122)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_648] (rows=550076554 width=122)
                                                              predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_36_date_dim_d_date_sk_min) AND DynamicValue(RS_36_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_36_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_26] (rows=575995635 width=122)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_ticket_number","ss_quantity","ss_ext_sales_price"]
                                                              <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_647]
                                                                  Group By Operator [GBY_646] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_607]
                                                                      Group By Operator [GBY_601] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_591] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_584]

