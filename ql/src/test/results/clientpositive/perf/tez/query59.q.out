PREHOOK: query: explain
with wss as 
 (select d_week_seq,
        ss_store_sk,
        sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales
 from store_sales,date_dim
 where d_date_sk = ss_sold_date_sk
 group by d_week_seq,ss_store_sk
 )
  select  s_store_name1,s_store_id1,d_week_seq1
       ,sun_sales1/sun_sales2,mon_sales1/mon_sales2
       ,tue_sales1/tue_sales1,wed_sales1/wed_sales2,thu_sales1/thu_sales2
       ,fri_sales1/fri_sales2,sat_sales1/sat_sales2
 from
 (select s_store_name s_store_name1,wss.d_week_seq d_week_seq1
        ,s_store_id s_store_id1,sun_sales sun_sales1
        ,mon_sales mon_sales1,tue_sales tue_sales1
        ,wed_sales wed_sales1,thu_sales thu_sales1
        ,fri_sales fri_sales1,sat_sales sat_sales1
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and 
        d_month_seq between 1185 and 1185 + 11) y,
 (select s_store_name s_store_name2,wss.d_week_seq d_week_seq2
        ,s_store_id s_store_id2,sun_sales sun_sales2
        ,mon_sales mon_sales2,tue_sales tue_sales2
        ,wed_sales wed_sales2,thu_sales thu_sales2
        ,fri_sales fri_sales2,sat_sales sat_sales2
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and 
        d_month_seq between 1185+ 12 and 1185 + 23) x
 where s_store_id1=s_store_id2
   and d_week_seq1=d_week_seq2-52
 order by s_store_name1,s_store_id1,d_week_seq1
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with wss as 
 (select d_week_seq,
        ss_store_sk,
        sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales
 from store_sales,date_dim
 where d_date_sk = ss_sold_date_sk
 group by d_week_seq,ss_store_sk
 )
  select  s_store_name1,s_store_id1,d_week_seq1
       ,sun_sales1/sun_sales2,mon_sales1/mon_sales2
       ,tue_sales1/tue_sales1,wed_sales1/wed_sales2,thu_sales1/thu_sales2
       ,fri_sales1/fri_sales2,sat_sales1/sat_sales2
 from
 (select s_store_name s_store_name1,wss.d_week_seq d_week_seq1
        ,s_store_id s_store_id1,sun_sales sun_sales1
        ,mon_sales mon_sales1,tue_sales tue_sales1
        ,wed_sales wed_sales1,thu_sales thu_sales1
        ,fri_sales fri_sales1,sat_sales sat_sales1
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and 
        d_month_seq between 1185 and 1185 + 11) y,
 (select s_store_name s_store_name2,wss.d_week_seq d_week_seq2
        ,s_store_id s_store_id2,sun_sales sun_sales2
        ,mon_sales mon_sales2,tue_sales tue_sales2
        ,wed_sales wed_sales2,thu_sales thu_sales2
        ,fri_sales fri_sales2,sat_sales sat_sales2
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and 
        d_month_seq between 1185+ 12 and 1185 + 23) x
 where s_store_id1=s_store_id2
   and d_week_seq1=d_week_seq2-52
 order by s_store_name1,s_store_id1,d_week_seq1
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 14 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 11 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 12 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 13 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 10 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 2 (SIMPLE_EDGE)
Reducer 9 <- Map 12 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_129]
        Limit [LIM_128] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_127] (rows=421657640 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_60]
              Select Operator [SEL_59] (rows=421657640 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
                Merge Join Operator [MERGEJOIN_104] (rows=421657640 width=88)
                  Conds:RS_56._col2, _col1=RS_57._col1, (_col0 - 52)(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col12","_col13","_col14","_col15","_col16","_col17"]
                <-Reducer 10 [SIMPLE_EDGE]
                  SHUFFLE [RS_57]
                    PartitionCols:_col1, (_col0 - 52)
                    Select Operator [SEL_55] (rows=383325119 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                      Merge Join Operator [MERGEJOIN_103] (rows=383325119 width=88)
                        Conds:RS_52._col1=RS_126._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col11"]
                      <-Map 14 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_126]
                          PartitionCols:_col0
                          Select Operator [SEL_125] (rows=1704 width=1910)
                            Output:["_col0","_col1"]
                            Filter Operator [FIL_124] (rows=1704 width=1910)
                              predicate:(s_store_id is not null and s_store_sk is not null)
                              TableScan [TS_46] (rows=1704 width=1910)
                                default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_id"]
                      <-Reducer 9 [SIMPLE_EDGE]
                        SHUFFLE [RS_52]
                          PartitionCols:_col1
                          Merge Join Operator [MERGEJOIN_102] (rows=348477374 width=88)
                            Conds:RS_123._col0=RS_118._col1(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                          <-Map 12 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_118]
                              PartitionCols:_col1
                              Select Operator [SEL_116] (rows=8116 width=1119)
                                Output:["_col1"]
                                Filter Operator [FIL_114] (rows=8116 width=1119)
                                  predicate:(d_month_seq BETWEEN 1197 AND 1208 and d_week_seq is not null)
                                  TableScan [TS_15] (rows=73049 width=1119)
                                    default@date_dim,d,Tbl:COMPLETE,Col:NONE,Output:["d_month_seq","d_week_seq"]
                          <-Reducer 8 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_123]
                              PartitionCols:_col0
                              Group By Operator [GBY_122] (rows=316797606 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)"],keys:KEY._col0, KEY._col1
                              <-Reducer 2 [SIMPLE_EDGE]
                                SHUFFLE [RS_40]
                                  PartitionCols:_col0, _col1
                                  Group By Operator [GBY_39] (rows=633595212 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)","sum(_col3)","sum(_col5)","sum(_col6)","sum(_col7)","sum(_col8)"],keys:_col0, _col1
                                    Select Operator [SEL_37] (rows=633595212 width=88)
                                      Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col7","_col8"]
                                      Merge Join Operator [MERGEJOIN_98] (rows=633595212 width=88)
                                        Conds:RS_107._col0=RS_110._col0(Inner),Output:["_col1","_col2","_col4","_col5"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_107]
                                          PartitionCols:_col0
                                          Select Operator [SEL_106] (rows=575995635 width=88)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_105] (rows=575995635 width=88)
                                              predicate:(ss_sold_date_sk is not null and ss_store_sk is not null)
                                              TableScan [TS_0] (rows=575995635 width=88)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_store_sk","ss_sales_price"]
                                      <-Map 11 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_110]
                                          PartitionCols:_col0
                                          Select Operator [SEL_109] (rows=73049 width=1119)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_108] (rows=73049 width=1119)
                                              predicate:(d_date_sk is not null and d_week_seq is not null)
                                              TableScan [TS_3] (rows=73049 width=1119)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_week_seq","d_day_name"]
                <-Reducer 5 [SIMPLE_EDGE]
                  SHUFFLE [RS_56]
                    PartitionCols:_col2, _col1
                    Select Operator [SEL_27] (rows=383325119 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
                      Merge Join Operator [MERGEJOIN_100] (rows=383325119 width=88)
                        Conds:RS_24._col1=RS_121._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col12","_col13"]
                      <-Map 13 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_121]
                          PartitionCols:_col0
                          Select Operator [SEL_120] (rows=1704 width=1910)
                            Output:["_col0","_col1","_col2"]
                            Filter Operator [FIL_119] (rows=1704 width=1910)
                              predicate:(s_store_id is not null and s_store_sk is not null)
                              TableScan [TS_18] (rows=1704 width=1910)
                                default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_id","s_store_name"]
                      <-Reducer 4 [SIMPLE_EDGE]
                        SHUFFLE [RS_24]
                          PartitionCols:_col1
                          Merge Join Operator [MERGEJOIN_99] (rows=348477374 width=88)
                            Conds:RS_112._col0=RS_117._col1(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                          <-Map 12 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_117]
                              PartitionCols:_col1
                              Select Operator [SEL_115] (rows=8116 width=1119)
                                Output:["_col1"]
                                Filter Operator [FIL_113] (rows=8116 width=1119)
                                  predicate:(d_month_seq BETWEEN 1185 AND 1196 and d_week_seq is not null)
                                   Please refer to the previous TableScan [TS_15]
                          <-Reducer 3 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_112]
                              PartitionCols:_col0
                              Group By Operator [GBY_111] (rows=316797606 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)","sum(VALUE._col6)"],keys:KEY._col0, KEY._col1
                              <-Reducer 2 [SIMPLE_EDGE]
                                SHUFFLE [RS_12]
                                  PartitionCols:_col0, _col1
                                  Group By Operator [GBY_11] (rows=633595212 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)","sum(_col6)","sum(_col7)","sum(_col8)"],keys:_col0, _col1
                                    Select Operator [SEL_9] (rows=633595212 width=88)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                       Please refer to the previous Merge Join Operator [MERGEJOIN_98]

