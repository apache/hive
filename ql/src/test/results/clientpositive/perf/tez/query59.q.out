PREHOOK: query: explain
with wss as 
 (select d_week_seq,
        ss_store_sk,
        sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales
 from store_sales,date_dim
 where d_date_sk = ss_sold_date_sk
 group by d_week_seq,ss_store_sk
 )
  select  s_store_name1,s_store_id1,d_week_seq1
       ,sun_sales1/sun_sales2,mon_sales1/mon_sales2
       ,tue_sales1/tue_sales1,wed_sales1/wed_sales2,thu_sales1/thu_sales2
       ,fri_sales1/fri_sales2,sat_sales1/sat_sales2
 from
 (select s_store_name s_store_name1,wss.d_week_seq d_week_seq1
        ,s_store_id s_store_id1,sun_sales sun_sales1
        ,mon_sales mon_sales1,tue_sales tue_sales1
        ,wed_sales wed_sales1,thu_sales thu_sales1
        ,fri_sales fri_sales1,sat_sales sat_sales1
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and 
        d_month_seq between 1185 and 1185 + 11) y,
 (select s_store_name s_store_name2,wss.d_week_seq d_week_seq2
        ,s_store_id s_store_id2,sun_sales sun_sales2
        ,mon_sales mon_sales2,tue_sales tue_sales2
        ,wed_sales wed_sales2,thu_sales thu_sales2
        ,fri_sales fri_sales2,sat_sales sat_sales2
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and 
        d_month_seq between 1185+ 12 and 1185 + 23) x
 where s_store_id1=s_store_id2
   and d_week_seq1=d_week_seq2-52
 order by s_store_name1,s_store_id1,d_week_seq1
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with wss as 
 (select d_week_seq,
        ss_store_sk,
        sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales
 from store_sales,date_dim
 where d_date_sk = ss_sold_date_sk
 group by d_week_seq,ss_store_sk
 )
  select  s_store_name1,s_store_id1,d_week_seq1
       ,sun_sales1/sun_sales2,mon_sales1/mon_sales2
       ,tue_sales1/tue_sales1,wed_sales1/wed_sales2,thu_sales1/thu_sales2
       ,fri_sales1/fri_sales2,sat_sales1/sat_sales2
 from
 (select s_store_name s_store_name1,wss.d_week_seq d_week_seq1
        ,s_store_id s_store_id1,sun_sales sun_sales1
        ,mon_sales mon_sales1,tue_sales tue_sales1
        ,wed_sales wed_sales1,thu_sales thu_sales1
        ,fri_sales fri_sales1,sat_sales sat_sales1
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and 
        d_month_seq between 1185 and 1185 + 11) y,
 (select s_store_name s_store_name2,wss.d_week_seq d_week_seq2
        ,s_store_id s_store_id2,sun_sales sun_sales2
        ,mon_sales mon_sales2,tue_sales tue_sales2
        ,wed_sales wed_sales2,thu_sales thu_sales2
        ,fri_sales fri_sales2,sat_sales sat_sales2
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and 
        d_month_seq between 1185+ 12 and 1185 + 23) x
 where s_store_id1=s_store_id2
   and d_week_seq1=d_week_seq2-52
 order by s_store_name1,s_store_id1,d_week_seq1
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 13 <- Map 12 (SIMPLE_EDGE), Map 16 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 17 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 10 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 11 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 15 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 18 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 8 vectorized
<<<<<<< HEAD
      File Output Operator [FS_219]
        Limit [LIM_218] (rows=100 width=976)
          Number of rows:100
          Select Operator [SEL_217] (rows=117616339 width=976)
=======
      File Output Operator [FS_223]
        Limit [LIM_222] (rows=100 width=976)
          Number of rows:100
          Select Operator [SEL_221] (rows=117616339 width=976)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
          <-Reducer 7 [SIMPLE_EDGE]
            SHUFFLE [RS_59]
              Select Operator [SEL_58] (rows=117616339 width=976)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
                Top N Key Operator [TNK_100] (rows=117616339 width=1648)
                  keys:_col12, _col11, _col0,top n:100
                  Merge Join Operator [MERGEJOIN_192] (rows=117616339 width=1648)
<<<<<<< HEAD
                    Conds:RS_55._col11, _col14=RS_213._col1, _col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col11","_col12","_col15","_col16","_col17","_col18","_col19","_col20"]
                  <-Map 13 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_213]
                      PartitionCols:_col1, _col0
                      Select Operator [SEL_211] (rows=1704 width=104)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_210] (rows=1704 width=104)
=======
                    Conds:RS_55._col11, _col14=RS_220._col1, _col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col11","_col12","_col15","_col16","_col17","_col18","_col19","_col20"]
                  <-Map 18 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_220]
                      PartitionCols:_col1, _col0
                      Select Operator [SEL_219] (rows=1704 width=104)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_218] (rows=1704 width=104)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                          predicate:(s_store_sk is not null and s_store_id is not null)
                          TableScan [TS_43] (rows=1704 width=104)
                            default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id"]
                  <-Reducer 6 [SIMPLE_EDGE]
                    SHUFFLE [RS_55]
                      PartitionCols:_col11, _col14
                      Merge Join Operator [MERGEJOIN_191] (rows=104018676 width=1651)
                        Conds:RS_52._col0=RS_53.(_col0 - 52)(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col11","_col12","_col14","_col15","_col16","_col17","_col18","_col19","_col20"]
                      <-Reducer 15 [SIMPLE_EDGE]
                        SHUFFLE [RS_53]
                          PartitionCols:(_col0 - 52)
                          Merge Join Operator [MERGEJOIN_190] (rows=28847 width=676)
<<<<<<< HEAD
                            Conds:RS_216._col0=RS_207._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                          <-Map 12 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_207]
                              PartitionCols:_col0
                              Select Operator [SEL_203] (rows=317 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_199] (rows=317 width=8)
                                  predicate:(d_month_seq BETWEEN 1197 AND 1208 and d_week_seq is not null)
                                  TableScan [TS_3] (rows=73049 width=99)
                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_week_seq","d_day_name","d_month_seq"]
                          <-Reducer 10 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_216]
                              PartitionCols:_col0
                              Group By Operator [GBY_215] (rows=1196832 width=679)
=======
                            Conds:RS_214._col0=RS_217._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                          <-Map 17 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_217]
                              PartitionCols:_col0
                              Select Operator [SEL_216] (rows=317 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_215] (rows=317 width=8)
                                  predicate:(d_month_seq BETWEEN 1197 AND 1208 and d_week_seq is not null)
                                  TableScan [TS_36] (rows=73049 width=8)
                                    default@date_dim,d,Tbl:COMPLETE,Col:COMPLETE,Output:["d_month_seq","d_week_seq"]
                          <-Reducer 14 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_214]
                              PartitionCols:_col0
                              Group By Operator [GBY_213] (rows=1196832 width=679)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)"],keys:KEY._col0, KEY._col1
                              <-Reducer 13 [SIMPLE_EDGE]
                                SHUFFLE [RS_33]
                                  PartitionCols:_col0, _col1
                                  Group By Operator [GBY_32] (rows=525329897 width=679)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)","sum(_col3)","sum(_col5)","sum(_col6)","sum(_col7)","sum(_col8)"],keys:_col0, _col1
                                    Select Operator [SEL_30] (rows=525329897 width=138)
                                      Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col7","_col8"]
                                      Merge Join Operator [MERGEJOIN_189] (rows=525329897 width=138)
<<<<<<< HEAD
                                        Conds:RS_196._col0=RS_205._col0(Inner),Output:["_col1","_col2","_col4","_col5","_col6","_col8","_col9","_col10","_col11"]
                                      <-Map 12 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_205]
                                          PartitionCols:_col0
                                          Select Operator [SEL_201] (rows=73049 width=36)
                                            Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col7","_col8"]
                                            Filter Operator [FIL_197] (rows=73049 width=99)
                                              predicate:(d_date_sk is not null and d_week_seq is not null)
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_196]
                                          PartitionCols:_col0
                                          Select Operator [SEL_194] (rows=525329897 width=114)
=======
                                        Conds:RS_209._col0=RS_212._col0(Inner),Output:["_col1","_col2","_col4","_col5","_col6","_col8","_col9","_col10","_col11"]
                                      <-Map 12 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_209]
                                          PartitionCols:_col0
                                          Select Operator [SEL_208] (rows=525329897 width=114)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_207] (rows=525329897 width=114)
                                              predicate:(ss_sold_date_sk is not null and ss_store_sk is not null)
                                              TableScan [TS_21] (rows=575995635 width=114)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_store_sk","ss_sales_price"]
                                      <-Map 16 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_212]
                                          PartitionCols:_col0
                                          Select Operator [SEL_211] (rows=73049 width=36)
                                            Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col7","_col8"]
                                            Filter Operator [FIL_210] (rows=73049 width=99)
                                              predicate:(d_date_sk is not null and d_week_seq is not null)
                                              TableScan [TS_24] (rows=73049 width=99)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_week_seq","d_day_name"]
                      <-Reducer 5 [SIMPLE_EDGE]
                        SHUFFLE [RS_52]
                          PartitionCols:_col0
                          Merge Join Operator [MERGEJOIN_188] (rows=28847 width=976)
<<<<<<< HEAD
                            Conds:RS_49._col1=RS_214._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col11","_col12"]
                          <-Map 13 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_214]
                              PartitionCols:_col0
                              Select Operator [SEL_212] (rows=1704 width=192)
                                Output:["_col0","_col1","_col2"]
                                 Please refer to the previous Filter Operator [FIL_210]
=======
                            Conds:RS_49._col1=RS_206._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col11","_col12"]
                          <-Map 11 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_206]
                              PartitionCols:_col0
                              Select Operator [SEL_205] (rows=1704 width=192)
                                Output:["_col0","_col1","_col2"]
                                Filter Operator [FIL_204] (rows=1704 width=192)
                                  predicate:(s_store_sk is not null and s_store_id is not null)
                                  TableScan [TS_18] (rows=1704 width=192)
                                    default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id","s_store_name"]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                          <-Reducer 4 [SIMPLE_EDGE]
                            SHUFFLE [RS_49]
                              PartitionCols:_col1
                              Merge Join Operator [MERGEJOIN_187] (rows=28847 width=788)
<<<<<<< HEAD
                                Conds:RS_209._col0=RS_206._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                              <-Map 12 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_206]
=======
                                Conds:RS_200._col0=RS_203._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                              <-Map 10 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_203]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                  PartitionCols:_col0
                                  Select Operator [SEL_202] (rows=317 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_201] (rows=317 width=8)
                                      predicate:(d_month_seq BETWEEN 1185 AND 1196 and d_week_seq is not null)
                                      TableScan [TS_15] (rows=73049 width=8)
                                        default@date_dim,d,Tbl:COMPLETE,Col:COMPLETE,Output:["d_month_seq","d_week_seq"]
                              <-Reducer 3 [SIMPLE_EDGE] vectorized
<<<<<<< HEAD
                                SHUFFLE [RS_209]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_208] (rows=1196832 width=791)
=======
                                SHUFFLE [RS_200]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_199] (rows=1196832 width=791)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)","sum(VALUE._col6)"],keys:KEY._col0, KEY._col1
                                  <-Reducer 2 [SIMPLE_EDGE]
                                    SHUFFLE [RS_12]
                                      PartitionCols:_col0, _col1
                                      Group By Operator [GBY_11] (rows=525329897 width=791)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)","sum(_col6)","sum(_col7)","sum(_col8)"],keys:_col0, _col1
                                        Select Operator [SEL_9] (rows=525329897 width=142)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                          Merge Join Operator [MERGEJOIN_186] (rows=525329897 width=142)
<<<<<<< HEAD
                                            Conds:RS_195._col0=RS_204._col0(Inner),Output:["_col1","_col2","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                          <-Map 12 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_204]
                                              PartitionCols:_col0
                                              Select Operator [SEL_200] (rows=73049 width=36)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                                 Please refer to the previous Filter Operator [FIL_197]
=======
                                            Conds:RS_195._col0=RS_198._col0(Inner),Output:["_col1","_col2","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_195]
                                              PartitionCols:_col0
                                              Select Operator [SEL_194] (rows=525329897 width=114)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_193] (rows=525329897 width=114)
                                                  predicate:(ss_sold_date_sk is not null and ss_store_sk is not null)
                                                  TableScan [TS_0] (rows=575995635 width=114)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_store_sk","ss_sales_price"]
                                          <-Map 9 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_198]
                                              PartitionCols:_col0
                                              Select Operator [SEL_197] (rows=73049 width=36)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                                Filter Operator [FIL_196] (rows=73049 width=99)
                                                  predicate:(d_date_sk is not null and d_week_seq is not null)
                                                  TableScan [TS_3] (rows=73049 width=99)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_week_seq","d_day_name"]

