PREHOOK: query: explain
select  
 'web' as channel
 ,web.item
 ,web.return_ratio
 ,web.return_rank
 ,web.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select ws.ws_item_sk as item
 		,(cast(sum(coalesce(wr.wr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(wr.wr_return_amt,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		 web_sales ws left outer join web_returns wr 
 			on (ws.ws_order_number = wr.wr_order_number and 
 			ws.ws_item_sk = wr.wr_item_sk)
                 ,date_dim
 		where 
 			wr.wr_return_amt > 10000 
 			and ws.ws_net_profit > 1
                         and ws.ws_net_paid > 0
                         and ws.ws_quantity > 0
                         and ws_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by ws.ws_item_sk
 	) in_web
 ) web
 where 
 (
 web.return_rank <= 10
 or
 web.currency_rank <= 10
 )
 union
 select 
 'catalog' as channel
 ,catalog.item
 ,catalog.return_ratio
 ,catalog.return_rank
 ,catalog.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select 
 		cs.cs_item_sk as item
 		,(cast(sum(coalesce(cr.cr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(cr.cr_return_amount,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		catalog_sales cs left outer join catalog_returns cr
 			on (cs.cs_order_number = cr.cr_order_number and 
 			cs.cs_item_sk = cr.cr_item_sk)
                ,date_dim
 		where 
 			cr.cr_return_amount > 10000 
 			and cs.cs_net_profit > 1
                         and cs.cs_net_paid > 0
                         and cs.cs_quantity > 0
                         and cs_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
                 group by cs.cs_item_sk
 	) in_cat
 ) catalog
 where 
 (
 catalog.return_rank <= 10
 or
 catalog.currency_rank <=10
 )
 union
 select 
 'store' as channel
 ,store.item
 ,store.return_ratio
 ,store.return_rank
 ,store.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select sts.ss_item_sk as item
 		,(cast(sum(coalesce(sr.sr_return_quantity,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(sr.sr_return_amt,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		store_sales sts left outer join store_returns sr
 			on (sts.ss_ticket_number = sr.sr_ticket_number and sts.ss_item_sk = sr.sr_item_sk)
                ,date_dim
 		where 
 			sr.sr_return_amt > 10000 
 			and sts.ss_net_profit > 1
                         and sts.ss_net_paid > 0 
                         and sts.ss_quantity > 0
                         and ss_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by sts.ss_item_sk
 	) in_store
 ) store
 where  (
 store.return_rank <= 10
 or 
 store.currency_rank <= 10
 )
 order by 1,4,5
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  
 'web' as channel
 ,web.item
 ,web.return_ratio
 ,web.return_rank
 ,web.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select ws.ws_item_sk as item
 		,(cast(sum(coalesce(wr.wr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(wr.wr_return_amt,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		 web_sales ws left outer join web_returns wr 
 			on (ws.ws_order_number = wr.wr_order_number and 
 			ws.ws_item_sk = wr.wr_item_sk)
                 ,date_dim
 		where 
 			wr.wr_return_amt > 10000 
 			and ws.ws_net_profit > 1
                         and ws.ws_net_paid > 0
                         and ws.ws_quantity > 0
                         and ws_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by ws.ws_item_sk
 	) in_web
 ) web
 where 
 (
 web.return_rank <= 10
 or
 web.currency_rank <= 10
 )
 union
 select 
 'catalog' as channel
 ,catalog.item
 ,catalog.return_ratio
 ,catalog.return_rank
 ,catalog.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select 
 		cs.cs_item_sk as item
 		,(cast(sum(coalesce(cr.cr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(cr.cr_return_amount,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		catalog_sales cs left outer join catalog_returns cr
 			on (cs.cs_order_number = cr.cr_order_number and 
 			cs.cs_item_sk = cr.cr_item_sk)
                ,date_dim
 		where 
 			cr.cr_return_amount > 10000 
 			and cs.cs_net_profit > 1
                         and cs.cs_net_paid > 0
                         and cs.cs_quantity > 0
                         and cs_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
                 group by cs.cs_item_sk
 	) in_cat
 ) catalog
 where 
 (
 catalog.return_rank <= 10
 or
 catalog.currency_rank <=10
 )
 union
 select 
 'store' as channel
 ,store.item
 ,store.return_ratio
 ,store.return_rank
 ,store.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select sts.ss_item_sk as item
 		,(cast(sum(coalesce(sr.sr_return_quantity,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(sr.sr_return_amt,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		store_sales sts left outer join store_returns sr
 			on (sts.ss_ticket_number = sr.sr_ticket_number and sts.ss_item_sk = sr.sr_item_sk)
                ,date_dim
 		where 
 			sr.sr_return_amt > 10000 
 			and sts.ss_net_profit > 1
                         and sts.ss_net_paid > 0 
                         and sts.ss_quantity > 0
                         and ss_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by sts.ss_item_sk
 	) in_store
 ) store
 where  (
 store.return_rank <= 10
 or 
 store.currency_rank <= 10
 )
 order by 1,4,5
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Union 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE)
Reducer 14 <- Map 25 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 18 <- Map 12 (SIMPLE_EDGE), Map 26 (SIMPLE_EDGE)
Reducer 19 <- Map 27 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 12 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE), Union 9 (CONTAINS)
Reducer 3 <- Map 23 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 8 <- Union 7 (SIMPLE_EDGE), Union 9 (CONTAINS)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 11 vectorized
      File Output Operator [FS_179]
        Limit [LIM_178] (rows=100 width=101)
          Number of rows:100
          Select Operator [SEL_177] (rows=5915494 width=101)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 10 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_176]
              Select Operator [SEL_175] (rows=5915494 width=101)
                Output:["_col0","_col1","_col2","_col3","_col4"]
                Group By Operator [GBY_174] (rows=5915494 width=101)
                  Output:["_col0","_col1","_col2","_col3","_col4"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 9 [SIMPLE_EDGE]
                  <-Reducer 22 [CONTAINS] vectorized
                    Reduce Output Operator [RS_215]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_214] (rows=11830988 width=101)
                        Output:["_col0","_col1","_col2","_col3","_col4"],keys:_col0, _col3, _col4, _col1, _col2
                        Select Operator [SEL_213] (rows=8604378 width=88)
                          Output:["_col0","_col1","_col2","_col3","_col4"]
                          Filter Operator [FIL_212] (rows=8604378 width=88)
                            predicate:((_col0 <= 10) or (rank_window_1 <= 10))
                            PTF Operator [PTF_211] (rows=12906568 width=88)
                              Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col4 AS decimal(15,4)) / CAST( _col5 AS decimal(15,4))) ASC NULLS FIRST","partition by:":"0"}]
                              Select Operator [SEL_210] (rows=12906568 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 21 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_209]
                                  PartitionCols:0
                                  Select Operator [SEL_208] (rows=12906568 width=88)
                                    Output:["rank_window_0","_col0","_col1","_col2","_col3","_col4"]
                                    PTF Operator [PTF_207] (rows=12906568 width=88)
                                      Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col1 AS decimal(15,4)) / CAST( _col2 AS decimal(15,4))) ASC NULLS FIRST","partition by:":"0"}]
                                      Select Operator [SEL_206] (rows=12906568 width=88)
                                        Output:["_col0","_col1","_col2","_col3","_col4"]
                                      <-Reducer 20 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_205]
                                          PartitionCols:0
                                          Group By Operator [GBY_204] (rows=12906568 width=88)
                                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                                          <-Reducer 19 [SIMPLE_EDGE]
                                            SHUFFLE [RS_89]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_88] (rows=25813137 width=88)
                                                Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0
                                                Select Operator [SEL_86] (rows=25813137 width=88)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  Merge Join Operator [MERGEJOIN_146] (rows=25813137 width=88)
                                                    Conds:RS_83._col1, _col2=RS_203._col0, _col1(Inner),Output:["_col1","_col3","_col4","_col11","_col12"]
                                                  <-Map 27 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_203]
                                                      PartitionCols:_col0, _col1
                                                      Select Operator [SEL_202] (rows=19197050 width=77)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_201] (rows=19197050 width=77)
                                                          predicate:((sr_return_amt > 10000) and sr_item_sk is not null and sr_ticket_number is not null)
                                                          TableScan [TS_77] (rows=57591150 width=77)
                                                            default@store_returns,sr,Tbl:COMPLETE,Col:NONE,Output:["sr_item_sk","sr_ticket_number","sr_return_quantity","sr_return_amt"]
                                                  <-Reducer 18 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_83]
                                                      PartitionCols:_col1, _col2
                                                      Merge Join Operator [MERGEJOIN_145] (rows=23466488 width=88)
                                                        Conds:RS_200._col0=RS_154._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                      <-Map 12 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_154]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_151] (rows=18262 width=1119)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_150] (rows=18262 width=1119)
                                                              predicate:((d_moy = 12) and (d_year = 2000) and d_date_sk is not null)
                                                              TableScan [TS_3] (rows=73049 width=1119)
                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_200]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_199] (rows=21333171 width=88)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_198] (rows=21333171 width=88)
                                                              predicate:((ss_net_paid > 0) and (ss_net_profit > 1) and (ss_quantity > 0) and ss_item_sk is not null and ss_sold_date_sk is not null and ss_ticket_number is not null)
                                                              TableScan [TS_71] (rows=575995635 width=88)
                                                                default@store_sales,sts,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_ticket_number","ss_quantity","ss_net_paid","ss_net_profit"]
                  <-Reducer 8 [CONTAINS] vectorized
                    Reduce Output Operator [RS_173]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_172] (rows=11830988 width=101)
                        Output:["_col0","_col1","_col2","_col3","_col4"],keys:_col0, _col3, _col4, _col1, _col2
                        Select Operator [SEL_171] (rows=3226610 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4"]
                          Group By Operator [GBY_170] (rows=3226610 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                          <-Union 7 [SIMPLE_EDGE]
                            <-Reducer 17 [CONTAINS] vectorized
                              Reduce Output Operator [RS_197]
                                PartitionCols:_col0, _col1, _col2, _col3, _col4
                                Group By Operator [GBY_196] (rows=6453220 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],keys:_col0, _col3, _col4, _col1, _col2
                                  Select Operator [SEL_195] (rows=4302070 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                    Filter Operator [FIL_194] (rows=4302070 width=135)
                                      predicate:((_col0 <= 10) or (rank_window_1 <= 10))
                                      PTF Operator [PTF_193] (rows=6453105 width=135)
                                        Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col4 AS decimal(15,4)) / CAST( _col5 AS decimal(15,4))) ASC NULLS FIRST","partition by:":"0"}]
                                        Select Operator [SEL_192] (rows=6453105 width=135)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                        <-Reducer 16 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_191]
                                            PartitionCols:0
                                            Select Operator [SEL_190] (rows=6453105 width=135)
                                              Output:["rank_window_0","_col0","_col1","_col2","_col3","_col4"]
                                              PTF Operator [PTF_189] (rows=6453105 width=135)
                                                Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col1 AS decimal(15,4)) / CAST( _col2 AS decimal(15,4))) ASC NULLS FIRST","partition by:":"0"}]
                                                Select Operator [SEL_188] (rows=6453105 width=135)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                <-Reducer 15 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_187]
                                                    PartitionCols:0
                                                    Group By Operator [GBY_186] (rows=6453105 width=135)
                                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                                                    <-Reducer 14 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_50]
                                                        PartitionCols:_col0
                                                        Group By Operator [GBY_49] (rows=12906211 width=135)
                                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0
                                                          Select Operator [SEL_47] (rows=12906211 width=135)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Merge Join Operator [MERGEJOIN_144] (rows=12906211 width=135)
                                                              Conds:RS_44._col1, _col2=RS_185._col0, _col1(Inner),Output:["_col1","_col3","_col4","_col11","_col12"]
                                                            <-Map 25 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_185]
                                                                PartitionCols:_col0, _col1
                                                                Select Operator [SEL_184] (rows=9599627 width=106)
                                                                  Output:["_col0","_col1","_col2","_col3"]
                                                                  Filter Operator [FIL_183] (rows=9599627 width=106)
                                                                    predicate:((cr_return_amount > 10000) and cr_item_sk is not null and cr_order_number is not null)
                                                                    TableScan [TS_38] (rows=28798881 width=106)
                                                                      default@catalog_returns,cr,Tbl:COMPLETE,Col:NONE,Output:["cr_item_sk","cr_order_number","cr_return_quantity","cr_return_amount"]
                                                            <-Reducer 13 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_44]
                                                                PartitionCols:_col1, _col2
                                                                Merge Join Operator [MERGEJOIN_143] (rows=11732919 width=135)
                                                                  Conds:RS_182._col0=RS_153._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                                <-Map 12 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_153]
                                                                    PartitionCols:_col0
                                                                     Please refer to the previous Select Operator [SEL_151]
                                                                <-Map 24 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_182]
                                                                    PartitionCols:_col0
                                                                    Select Operator [SEL_181] (rows=10666290 width=135)
                                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                                      Filter Operator [FIL_180] (rows=10666290 width=135)
                                                                        predicate:((cs_net_paid > 0) and (cs_net_profit > 1) and (cs_quantity > 0) and cs_item_sk is not null and cs_order_number is not null and cs_sold_date_sk is not null)
                                                                        TableScan [TS_32] (rows=287989836 width=135)
                                                                          default@catalog_sales,cs,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_item_sk","cs_order_number","cs_quantity","cs_net_paid","cs_net_profit"]
                            <-Reducer 6 [CONTAINS] vectorized
                              Reduce Output Operator [RS_169]
                                PartitionCols:_col0, _col1, _col2, _col3, _col4
                                Group By Operator [GBY_168] (rows=6453220 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],keys:_col0, _col3, _col4, _col1, _col2
                                  Select Operator [SEL_167] (rows=2151150 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                    Filter Operator [FIL_166] (rows=2151150 width=135)
                                      predicate:((_col0 <= 10) or (rank_window_1 <= 10))
                                      PTF Operator [PTF_165] (rows=3226726 width=135)
                                        Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col4 AS decimal(15,4)) / CAST( _col5 AS decimal(15,4))) ASC NULLS FIRST","partition by:":"0"}]
                                        Select Operator [SEL_164] (rows=3226726 width=135)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                        <-Reducer 5 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_163]
                                            PartitionCols:0
                                            Select Operator [SEL_162] (rows=3226726 width=135)
                                              Output:["rank_window_0","_col0","_col1","_col2","_col3","_col4"]
                                              PTF Operator [PTF_161] (rows=3226726 width=135)
                                                Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col1 AS decimal(15,4)) / CAST( _col2 AS decimal(15,4))) ASC NULLS FIRST","partition by:":"0"}]
                                                Select Operator [SEL_160] (rows=3226726 width=135)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                <-Reducer 4 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_159]
                                                    PartitionCols:0
                                                    Group By Operator [GBY_158] (rows=3226726 width=135)
                                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                                                    <-Reducer 3 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_18]
                                                        PartitionCols:_col0
                                                        Group By Operator [GBY_17] (rows=6453452 width=135)
                                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0
                                                          Select Operator [SEL_15] (rows=6453452 width=135)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Merge Join Operator [MERGEJOIN_142] (rows=6453452 width=135)
                                                              Conds:RS_12._col1, _col2=RS_157._col0, _col1(Inner),Output:["_col1","_col3","_col4","_col11","_col12"]
                                                            <-Map 23 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_157]
                                                                PartitionCols:_col0, _col1
                                                                Select Operator [SEL_156] (rows=4799489 width=92)
                                                                  Output:["_col0","_col1","_col2","_col3"]
                                                                  Filter Operator [FIL_155] (rows=4799489 width=92)
                                                                    predicate:((wr_return_amt > 10000) and wr_item_sk is not null and wr_order_number is not null)
                                                                    TableScan [TS_6] (rows=14398467 width=92)
                                                                      default@web_returns,wr,Tbl:COMPLETE,Col:NONE,Output:["wr_item_sk","wr_order_number","wr_return_quantity","wr_return_amt"]
                                                            <-Reducer 2 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_12]
                                                                PartitionCols:_col1, _col2
                                                                Merge Join Operator [MERGEJOIN_141] (rows=5866775 width=135)
                                                                  Conds:RS_149._col0=RS_152._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                                <-Map 12 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_152]
                                                                    PartitionCols:_col0
                                                                     Please refer to the previous Select Operator [SEL_151]
                                                                <-Map 1 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_149]
                                                                    PartitionCols:_col0
                                                                    Select Operator [SEL_148] (rows=5333432 width=135)
                                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                                      Filter Operator [FIL_147] (rows=5333432 width=135)
                                                                        predicate:((ws_net_paid > 0) and (ws_net_profit > 1) and (ws_quantity > 0) and ws_item_sk is not null and ws_order_number is not null and ws_sold_date_sk is not null)
                                                                        TableScan [TS_0] (rows=144002668 width=135)
                                                                          default@web_sales,ws,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_order_number","ws_quantity","ws_net_paid","ws_net_profit"]

