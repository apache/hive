PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ss_net_paid) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ws_net_paid) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         )
  select 
        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.year = 2001
         and t_s_secyear.year = 2001+1
         and t_w_firstyear.year = 2001
         and t_w_secyear.year = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 2,1,3
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ss_net_paid) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ws_net_paid) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         )
  select 
        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.year = 2001
         and t_s_secyear.year = 2001+1
         and t_w_firstyear.year = 2001
         and t_w_secyear.year = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 2,1,3
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 11 <- Map 10 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 12 <- Map 18 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 10 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 15 <- Map 18 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 3 <- Map 18 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 13 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 1 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 8 <- Map 18 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_214]
        Limit [LIM_213] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_212] (rows=383325119 width=88)
            Output:["_col0","_col1","_col2"]
          <-Reducer 5 [SIMPLE_EDGE]
            SHUFFLE [RS_89]
              Select Operator [SEL_88] (rows=383325119 width=88)
                Output:["_col0","_col1","_col2"]
                Filter Operator [FIL_87] (rows=383325119 width=88)
                  predicate:((_col9 / _col1) > (_col7 / _col3))
                  Merge Join Operator [MERGEJOIN_171] (rows=1149975359 width=88)
                    Conds:RS_211._col0=RS_199._col0(Inner),RS_199._col0=RS_194._col0(Inner),RS_199._col0=RS_206._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col9"]
                  <-Reducer 13 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_206]
                      PartitionCols:_col0
                      Select Operator [SEL_205] (rows=87121617 width=135)
                        Output:["_col0","_col1"]
                        Group By Operator [GBY_204] (rows=87121617 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                        <-Reducer 12 [SIMPLE_EDGE]
                          SHUFFLE [RS_79]
                            PartitionCols:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_78] (rows=174243235 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(_col2)"],keys:_col6, _col7, _col8, _col4
                              Merge Join Operator [MERGEJOIN_170] (rows=174243235 width=135)
                                Conds:RS_74._col1=RS_188._col0(Inner),Output:["_col2","_col4","_col6","_col7","_col8"]
                              <-Map 18 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_188]
                                  PartitionCols:_col0
                                  Select Operator [SEL_187] (rows=80000000 width=860)
                                    Output:["_col0","_col1","_col2","_col3"]
                                    Filter Operator [FIL_186] (rows=80000000 width=860)
                                      predicate:(c_customer_id is not null and c_customer_sk is not null)
                                      TableScan [TS_68] (rows=80000000 width=860)
                                        default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name"]
                              <-Reducer 11 [SIMPLE_EDGE]
                                SHUFFLE [RS_74]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_169] (rows=158402938 width=135)
                                    Conds:RS_202._col0=RS_182._col0(Inner),Output:["_col1","_col2","_col4"]
                                  <-Map 17 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_182]
                                      PartitionCols:_col0
                                      Select Operator [SEL_179] (rows=18262 width=1119)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_176] (rows=18262 width=1119)
                                          predicate:((d_year = 2002) and (d_year) IN (2001, 2002) and d_date_sk is not null)
                                          TableScan [TS_65] (rows=73049 width=1119)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_202]
                                      PartitionCols:_col0
                                      Select Operator [SEL_201] (rows=144002668 width=135)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_200] (rows=144002668 width=135)
                                          predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                          TableScan [TS_62] (rows=144002668 width=135)
                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_net_paid"]
                  <-Reducer 16 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_211]
                      PartitionCols:_col0
                      Select Operator [SEL_210] (rows=29040539 width=135)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_209] (rows=29040539 width=135)
                          predicate:(_col4 > 0)
                          Select Operator [SEL_208] (rows=87121617 width=135)
                            Output:["_col0","_col4"]
                            Group By Operator [GBY_207] (rows=87121617 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                            <-Reducer 15 [SIMPLE_EDGE]
                              SHUFFLE [RS_17]
                                PartitionCols:_col0, _col1, _col2, _col3
                                Group By Operator [GBY_16] (rows=174243235 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(_col2)"],keys:_col6, _col7, _col8, _col4
                                  Merge Join Operator [MERGEJOIN_164] (rows=174243235 width=135)
                                    Conds:RS_12._col1=RS_190._col0(Inner),Output:["_col2","_col4","_col6","_col7","_col8"]
                                  <-Map 18 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_190]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_187]
                                  <-Reducer 14 [SIMPLE_EDGE]
                                    SHUFFLE [RS_12]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_163] (rows=158402938 width=135)
                                        Conds:RS_203._col0=RS_184._col0(Inner),Output:["_col1","_col2","_col4"]
                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_184]
                                          PartitionCols:_col0
                                          Select Operator [SEL_180] (rows=18262 width=1119)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_177] (rows=18262 width=1119)
                                              predicate:((d_year = 2001) and (d_year) IN (2001, 2002) and d_date_sk is not null)
                                               Please refer to the previous TableScan [TS_65]
                                      <-Map 10 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_203]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_201]
                  <-Reducer 4 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_194]
                      PartitionCols:_col0
                      Select Operator [SEL_193] (rows=348477374 width=88)
                        Output:["_col0","_col1","_col2","_col3"]
                        Group By Operator [GBY_192] (rows=348477374 width=88)
                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                        <-Reducer 3 [SIMPLE_EDGE]
                          SHUFFLE [RS_59]
                            PartitionCols:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_58] (rows=696954748 width=88)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(_col2)"],keys:_col6, _col7, _col8, _col4
                              Merge Join Operator [MERGEJOIN_168] (rows=696954748 width=88)
                                Conds:RS_54._col1=RS_189._col0(Inner),Output:["_col2","_col4","_col6","_col7","_col8"]
                              <-Map 18 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_189]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_187]
                              <-Reducer 2 [SIMPLE_EDGE]
                                SHUFFLE [RS_54]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_167] (rows=633595212 width=88)
                                    Conds:RS_174._col0=RS_183._col0(Inner),Output:["_col1","_col2","_col4"]
                                  <-Map 17 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_183]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_179]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_174]
                                      PartitionCols:_col0
                                      Select Operator [SEL_173] (rows=575995635 width=88)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_172] (rows=575995635 width=88)
                                          predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                          TableScan [TS_42] (rows=575995635 width=88)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_net_paid"]
                  <-Reducer 9 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_199]
                      PartitionCols:_col0
                      Select Operator [SEL_198] (rows=116159124 width=88)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_197] (rows=116159124 width=88)
                          predicate:(_col4 > 0)
                          Select Operator [SEL_196] (rows=348477374 width=88)
                            Output:["_col0","_col4"]
                            Group By Operator [GBY_195] (rows=348477374 width=88)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                            <-Reducer 8 [SIMPLE_EDGE]
                              SHUFFLE [RS_38]
                                PartitionCols:_col0, _col1, _col2, _col3
                                Group By Operator [GBY_37] (rows=696954748 width=88)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(_col2)"],keys:_col6, _col7, _col8, _col4
                                  Merge Join Operator [MERGEJOIN_166] (rows=696954748 width=88)
                                    Conds:RS_33._col1=RS_191._col0(Inner),Output:["_col2","_col4","_col6","_col7","_col8"]
                                  <-Map 18 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_191]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_187]
                                  <-Reducer 7 [SIMPLE_EDGE]
                                    SHUFFLE [RS_33]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_165] (rows=633595212 width=88)
                                        Conds:RS_175._col0=RS_185._col0(Inner),Output:["_col1","_col2","_col4"]
                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_185]
                                          PartitionCols:_col0
                                          Select Operator [SEL_181] (rows=18262 width=1119)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_178] (rows=18262 width=1119)
                                              predicate:((d_year = 2001) and (d_year) IN (2001, 2002) and d_date_sk is not null)
                                               Please refer to the previous TableScan [TS_65]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_175]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_173]

