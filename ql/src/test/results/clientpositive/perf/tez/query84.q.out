PREHOOK: query: explain
select  c_customer_id as customer_id
       ,c_last_name || ', ' || c_first_name as customername
 from customer
     ,customer_address
     ,customer_demographics
     ,household_demographics
     ,income_band
     ,store_returns
 where ca_city	        =  'Hopewell'
   and c_current_addr_sk = ca_address_sk
   and ib_lower_bound   >=  32287
   and ib_upper_bound   <=  32287 + 50000
   and ib_income_band_sk = hd_income_band_sk
   and cd_demo_sk = c_current_cdemo_sk
   and hd_demo_sk = c_current_hdemo_sk
   and sr_cdemo_sk = cd_demo_sk
 order by c_customer_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@income_band
PREHOOK: Input: default@store_returns
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  c_customer_id as customer_id
       ,c_last_name || ', ' || c_first_name as customername
 from customer
     ,customer_address
     ,customer_demographics
     ,household_demographics
     ,income_band
     ,store_returns
 where ca_city	        =  'Hopewell'
   and c_current_addr_sk = ca_address_sk
   and ib_lower_bound   >=  32287
   and ib_upper_bound   <=  32287 + 50000
   and ib_income_band_sk = hd_income_band_sk
   and cd_demo_sk = c_current_cdemo_sk
   and hd_demo_sk = c_current_hdemo_sk
   and sr_cdemo_sk = cd_demo_sk
 order by c_customer_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@income_band
POSTHOOK: Input: default@store_returns
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 11 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 6 <- Map 5 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 7 <- Reducer 10 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3 vectorized
      File Output Operator [FS_137]
        Limit [LIM_136] (rows=100 width=860)
          Number of rows:100
          Select Operator [SEL_135] (rows=212960011 width=860)
            Output:["_col0","_col1"]
          <-Reducer 2 [SIMPLE_EDGE]
            SHUFFLE [RS_34]
              Select Operator [SEL_33] (rows=212960011 width=860)
                Output:["_col1","_col2"]
                Merge Join Operator [MERGEJOIN_116] (rows=212960011 width=860)
                  Conds:RS_119._col0=RS_122._col0(Inner),RS_122._col0=RS_31._col1(Inner),Output:["_col2","_col6","_col7"]
                <-Map 1 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_119]
                    PartitionCols:_col0
                    Select Operator [SEL_118] (rows=57591150 width=77)
                      Output:["_col0"]
                      Filter Operator [FIL_117] (rows=57591150 width=77)
                        predicate:sr_cdemo_sk is not null
                        TableScan [TS_0] (rows=57591150 width=77)
                          default@store_returns,store_returns,Tbl:COMPLETE,Col:NONE,Output:["sr_cdemo_sk"]
                <-Map 4 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_122]
                    PartitionCols:_col0
                    Select Operator [SEL_121] (rows=1861800 width=385)
                      Output:["_col0"]
                      Filter Operator [FIL_120] (rows=1861800 width=385)
                        predicate:cd_demo_sk is not null
                        TableScan [TS_3] (rows=1861800 width=385)
                          default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:NONE,Output:["cd_demo_sk"]
                <-Reducer 7 [SIMPLE_EDGE]
                  SHUFFLE [RS_31]
                    PartitionCols:_col1
                    Merge Join Operator [MERGEJOIN_115] (rows=96800003 width=860)
                      Conds:RS_25._col2=RS_26._col0(Inner),Output:["_col0","_col1","_col4","_col5"]
                    <-Reducer 10 [SIMPLE_EDGE]
                      SHUFFLE [RS_26]
                        PartitionCols:_col0
                        Merge Join Operator [MERGEJOIN_114] (rows=7920 width=107)
                          Conds:RS_131._col1=RS_134._col0(Inner),Output:["_col0"]
                        <-Map 11 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_134]
                            PartitionCols:_col0
                            Select Operator [SEL_133] (rows=2 width=12)
                              Output:["_col0"]
                              Filter Operator [FIL_132] (rows=2 width=12)
                                predicate:((ib_lower_bound >= 32287) and (ib_upper_bound <= 82287) and ib_income_band_sk is not null)
                                TableScan [TS_15] (rows=20 width=12)
                                  default@income_band,income_band,Tbl:COMPLETE,Col:NONE,Output:["ib_income_band_sk","ib_lower_bound","ib_upper_bound"]
                        <-Map 9 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_131]
                            PartitionCols:_col1
                            Select Operator [SEL_130] (rows=7200 width=107)
                              Output:["_col0","_col1"]
                              Filter Operator [FIL_129] (rows=7200 width=107)
                                predicate:(hd_demo_sk is not null and hd_income_band_sk is not null)
                                TableScan [TS_12] (rows=7200 width=107)
                                  default@household_demographics,household_demographics,Tbl:COMPLETE,Col:NONE,Output:["hd_demo_sk","hd_income_band_sk"]
                    <-Reducer 6 [SIMPLE_EDGE]
                      SHUFFLE [RS_25]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_113] (rows=88000001 width=860)
                          Conds:RS_125._col3=RS_128._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5"]
                        <-Map 5 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_125]
                            PartitionCols:_col3
                            Select Operator [SEL_124] (rows=80000000 width=860)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              Filter Operator [FIL_123] (rows=80000000 width=860)
                                predicate:(c_current_addr_sk is not null and c_current_cdemo_sk is not null and c_current_hdemo_sk is not null)
                                TableScan [TS_6] (rows=80000000 width=860)
                                  default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_id","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk","c_first_name","c_last_name"]
                        <-Map 8 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_128]
                            PartitionCols:_col0
                            Select Operator [SEL_127] (rows=20000000 width=1014)
                              Output:["_col0"]
                              Filter Operator [FIL_126] (rows=20000000 width=1014)
                                predicate:((ca_city = 'Hopewell') and ca_address_sk is not null)
                                TableScan [TS_9] (rows=40000000 width=1014)
                                  default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_city"]

