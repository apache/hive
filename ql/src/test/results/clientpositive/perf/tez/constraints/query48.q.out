PREHOOK: query: explain
select sum (ss_quantity)
 from store_sales, store, customer_demographics, customer_address, date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 1998
 and  
 (
  (
   cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 100.00 and 150.00  
   )
 or
  (
  cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 50.00 and 100.00   
  )
 or 
 (
  cd_demo_sk = ss_cdemo_sk
  and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 150.00 and 200.00  
 )
 )
 and
 (
  (
  ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('KY', 'GA', 'NM')
  and ss_net_profit between 0 and 2000  
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('MT', 'OR', 'IN')
  and ss_net_profit between 150 and 3000 
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('WI', 'MO', 'WV')
  and ss_net_profit between 50 and 25000 
  )
 )
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select sum (ss_quantity)
 from store_sales, store, customer_demographics, customer_address, date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 1998
 and  
 (
  (
   cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 100.00 and 150.00  
   )
 or
  (
  cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 50.00 and 100.00   
  )
 or 
 (
  cd_demo_sk = ss_cdemo_sk
  and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 150.00 and 200.00  
 )
 )
 and
 (
  (
  ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('KY', 'GA', 'NM')
  and ss_net_profit between 0 and 2000  
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('MT', 'OR', 'IN')
  and ss_net_profit between 150 and 3000 
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('WI', 'MO', 'WV')
  and ss_net_profit between 50 and 25000 
  )
 )
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 6 <- Reducer 9 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Map 4 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 7 <- Map 6 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3 vectorized
      File Output Operator [FS_94]
        Group By Operator [GBY_93] (rows=1 width=8)
          Output:["_col0"],aggregations:["sum(VALUE._col0)"]
        <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
          PARTITION_ONLY_SHUFFLE [RS_26]
            Group By Operator [GBY_25] (rows=1 width=8)
              Output:["_col0"],aggregations:["sum(_col8)"]
              Select Operator [SEL_24] (rows=170127 width=24)
                Output:["_col8"]
                Filter Operator [FIL_23] (rows=170127 width=24)
                  predicate:((_col1 and _col9) or (_col2 and _col10) or (_col3 and _col11))
                  Merge Join Operator [MERGEJOIN_75] (rows=226838 width=24)
                    Conds:RS_78._col0=RS_21._col3(Inner),Output:["_col1","_col2","_col3","_col8","_col9","_col10","_col11"]
                  <-Map 1 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_78]
                      PartitionCols:_col0
                      Select Operator [SEL_77] (rows=3529412 width=16)
                        Output:["_col0","_col1","_col2","_col3"]
                        Filter Operator [FIL_76] (rows=3529412 width=187)
                          predicate:((ca_state) IN ('KY', 'GA', 'NM', 'MT', 'OR', 'IN', 'WI', 'MO', 'WV') and (ca_country = 'United States'))
                          TableScan [TS_0] (rows=40000000 width=187)
                            default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state","ca_country"]
                  <-Reducer 5 [SIMPLE_EDGE]
                    SHUFFLE [RS_21]
                      PartitionCols:_col3
                      Merge Join Operator [MERGEJOIN_74] (rows=2570826 width=12)
                        Conds:RS_81._col0=RS_17._col1(Inner),Output:["_col3","_col4","_col5","_col6","_col7"]
                      <-Map 4 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_81]
                          PartitionCols:_col0
                          Select Operator [SEL_80] (rows=29552 width=4)
                            Output:["_col0"]
                            Filter Operator [FIL_79] (rows=29552 width=183)
                              predicate:((cd_marital_status = 'M') and (cd_education_status = '4 yr Degree'))
                              TableScan [TS_3] (rows=1861800 width=183)
                                default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status","cd_education_status"]
                      <-Reducer 7 [SIMPLE_EDGE]
                        SHUFFLE [RS_17]
                          PartitionCols:_col1
                          Merge Join Operator [MERGEJOIN_73] (rows=57024544 width=22)
                            Conds:RS_92._col0=RS_84._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                          <-Map 8 [SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_84]
                              PartitionCols:_col0
                              Select Operator [SEL_83] (rows=652 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_82] (rows=652 width=8)
                                  predicate:(d_year = 1998)
                                  TableScan [TS_9] (rows=73049 width=8)
                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                          <-Map 6 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_92]
                              PartitionCols:_col0
                              Select Operator [SEL_91] (rows=159705894 width=27)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                Filter Operator [FIL_90] (rows=159705894 width=233)
                                  predicate:((ss_sales_price BETWEEN 100 AND 150 or ss_sales_price BETWEEN 50 AND 100 or ss_sales_price BETWEEN 150 AND 200) and ss_cdemo_sk is not null and ss_sold_date_sk is not null and ss_addr_sk is not null and ss_store_sk is not null and ((ss_sales_price >= 100) or (ss_sales_price <= 150) or (ss_sales_price >= 50) or (ss_sales_price <= 100) or (ss_sales_price >= 150) or (ss_sales_price <= 200)) and ((ss_net_profit >= 0) or (ss_net_profit <= 2000) or (ss_net_profit >= 150) or (ss_net_profit <= 3000) or (ss_net_profit >= 50) or (ss_net_profit <= 25000)) and ss_sold_date_sk BETWEEN DynamicValue(RS_13_date_dim_d_date_sk_min) AND DynamicValue(RS_13_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_13_date_dim_d_date_sk_bloom_filter)))
                                  TableScan [TS_6] (rows=575995635 width=233)
                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_cdemo_sk","ss_addr_sk","ss_store_sk","ss_quantity","ss_sales_price","ss_net_profit"]
                                  <-Reducer 9 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_89]
                                      Group By Operator [GBY_88] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                      <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_87]
                                          Group By Operator [GBY_86] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                            Select Operator [SEL_85] (rows=652 width=4)
                                              Output:["_col0"]
                                               Please refer to the previous Select Operator [SEL_83]

