PREHOOK: query: explain
select c_last_name
       ,c_first_name
       ,c_salutation
       ,c_preferred_cust_flag 
       ,ss_ticket_number
       ,cnt from
   (select ss_ticket_number
          ,ss_customer_sk
          ,count(*) cnt
    from store_sales,date_dim,store,household_demographics
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and date_dim.d_dom between 1 and 2 
    and (household_demographics.hd_buy_potential = '>10000' or
         household_demographics.hd_buy_potential = 'unknown')
    and household_demographics.hd_vehicle_count > 0
    and case when household_demographics.hd_vehicle_count > 0 then 
             household_demographics.hd_dep_count/ household_demographics.hd_vehicle_count else null end > 1
    and date_dim.d_year in (2000,2000+1,2000+2)
    and store.s_county in ('Mobile County','Maverick County','Huron County','Kittitas County')
    group by ss_ticket_number,ss_customer_sk) dj,customer
    where ss_customer_sk = c_customer_sk
      and cnt between 1 and 5
    order by cnt desc
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select c_last_name
       ,c_first_name
       ,c_salutation
       ,c_preferred_cust_flag 
       ,ss_ticket_number
       ,cnt from
   (select ss_ticket_number
          ,ss_customer_sk
          ,count(*) cnt
    from store_sales,date_dim,store,household_demographics
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and date_dim.d_dom between 1 and 2 
    and (household_demographics.hd_buy_potential = '>10000' or
         household_demographics.hd_buy_potential = 'unknown')
    and household_demographics.hd_vehicle_count > 0
    and case when household_demographics.hd_vehicle_count > 0 then 
             household_demographics.hd_dep_count/ household_demographics.hd_vehicle_count else null end > 1
    and date_dim.d_year in (2000,2000+1,2000+2)
    and store.s_county in ('Mobile County','Maverick County','Huron County','Kittitas County')
    group by ss_ticket_number,ss_customer_sk) dj,customer
    where ss_customer_sk = c_customer_sk
      and cnt between 1 and 5
    order by cnt desc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 4 <- Reducer 10 (BROADCAST_EDGE), Reducer 12 (BROADCAST_EDGE), Reducer 14 (BROADCAST_EDGE)
Reducer 10 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 5 <- Map 4 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 6 <- Map 11 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 13 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3 vectorized
      File Output Operator [FS_134]
        Select Operator [SEL_133] (rows=59862 width=364)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
        <-Reducer 2 [SIMPLE_EDGE]
          SHUFFLE [RS_34]
            Select Operator [SEL_33] (rows=59862 width=364)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
              Merge Join Operator [MERGEJOIN_99] (rows=59862 width=364)
                Conds:RS_101._col0=RS_132._col1(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7"]
              <-Map 1 [SIMPLE_EDGE] vectorized
                SHUFFLE [RS_101]
                  PartitionCols:_col0
                  Select Operator [SEL_100] (rows=80000000 width=356)
                    Output:["_col0","_col1","_col2","_col3","_col4"]
                    TableScan [TS_0] (rows=80000000 width=356)
                      default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_salutation","c_first_name","c_last_name","c_preferred_cust_flag"]
              <-Reducer 8 [SIMPLE_EDGE] vectorized
                SHUFFLE [RS_132]
                  PartitionCols:_col1
                  Filter Operator [FIL_131] (rows=59862 width=12)
                    predicate:_col2 BETWEEN 1 AND 5
                    Select Operator [SEL_130] (rows=1197233 width=12)
                      Output:["_col0","_col1","_col2"]
                      Group By Operator [GBY_129] (rows=1197233 width=12)
                        Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                      <-Reducer 7 [SIMPLE_EDGE]
                        SHUFFLE [RS_25]
                          PartitionCols:_col0, _col1
                          Group By Operator [GBY_24] (rows=1197233 width=12)
                            Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col1, _col4
                            Merge Join Operator [MERGEJOIN_98] (rows=1197233 width=4)
                              Conds:RS_20._col3=RS_120._col0(Inner),Output:["_col1","_col4"]
                            <-Map 13 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_120]
                                PartitionCols:_col0
                                Select Operator [SEL_119] (rows=85 width=4)
                                  Output:["_col0"]
                                  Filter Operator [FIL_118] (rows=85 width=102)
                                    predicate:(s_county) IN ('Mobile County', 'Maverick County', 'Huron County', 'Kittitas County')
                                    TableScan [TS_11] (rows=1704 width=102)
                                      default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_county"]
                            <-Reducer 6 [SIMPLE_EDGE]
                              SHUFFLE [RS_20]
                                PartitionCols:_col3
                                Merge Join Operator [MERGEJOIN_97] (rows=2973700 width=4)
                                  Conds:RS_17._col2=RS_112._col0(Inner),Output:["_col1","_col3","_col4"]
                                <-Map 11 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_112]
                                    PartitionCols:_col0
                                    Select Operator [SEL_111] (rows=480 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_110] (rows=480 width=104)
                                        predicate:((hd_buy_potential) IN ('>10000', 'unknown') and (hd_vehicle_count > 0) and CASE WHEN ((hd_vehicle_count > 0)) THEN (((UDFToDouble(hd_dep_count) / UDFToDouble(hd_vehicle_count)) > 1.0D)) ELSE (null) END)
                                        TableScan [TS_8] (rows=7200 width=104)
                                          default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_buy_potential","hd_dep_count","hd_vehicle_count"]
                                <-Reducer 5 [SIMPLE_EDGE]
                                  SHUFFLE [RS_17]
                                    PartitionCols:_col2
                                    Merge Join Operator [MERGEJOIN_96] (rows=44605486 width=10)
                                      Conds:RS_128._col0=RS_104._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                    <-Map 9 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_104]
                                        PartitionCols:_col0
                                        Select Operator [SEL_103] (rows=170 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_102] (rows=170 width=12)
                                            predicate:((d_year) IN (2000, 2001, 2002) and d_dom BETWEEN 1 AND 2)
                                            TableScan [TS_5] (rows=73049 width=12)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_dom"]
                                    <-Map 4 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_128]
                                        PartitionCols:_col0
                                        Select Operator [SEL_127] (rows=479121995 width=19)
                                          Output:["_col0","_col1","_col2","_col3","_col4"]
                                          Filter Operator [FIL_126] (rows=479121995 width=19)
                                            predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_18_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_18_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_18_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_15_date_dim_d_date_sk_min) AND DynamicValue(RS_15_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_15_date_dim_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_21_store_s_store_sk_min) AND DynamicValue(RS_21_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_21_store_s_store_sk_bloom_filter))) and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                            TableScan [TS_2] (rows=575995635 width=19)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_hdemo_sk","ss_store_sk","ss_ticket_number"]
                                            <-Reducer 10 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_109]
                                                Group By Operator [GBY_108] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_107]
                                                    Group By Operator [GBY_106] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_105] (rows=170 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_103]
                                            <-Reducer 12 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_117]
                                                Group By Operator [GBY_116] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_115]
                                                    Group By Operator [GBY_114] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_113] (rows=480 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_111]
                                            <-Reducer 14 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_125]
                                                Group By Operator [GBY_124] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_123]
                                                    Group By Operator [GBY_122] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_121] (rows=85 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_119]

