PREHOOK: query: explain
select  i_item_desc 
      ,i_category 
      ,i_class 
      ,i_current_price
      ,sum(ws_ext_sales_price) as itemrevenue 
      ,sum(ws_ext_sales_price)*100/sum(sum(ws_ext_sales_price)) over
          (partition by i_class) as revenueratio
from	
	web_sales
    	,item 
    	,date_dim
where 
	ws_item_sk = i_item_sk 
  	and i_category in ('Jewelry', 'Sports', 'Books')
  	and ws_sold_date_sk = d_date_sk
	and d_date between cast('2001-01-12' as date) 
				and (cast('2001-01-12' as date) + 30 days)
group by 
	i_item_id
        ,i_item_desc 
        ,i_category
        ,i_class
        ,i_current_price
order by 
	i_category
        ,i_class
        ,i_item_id
        ,i_item_desc
        ,revenueratio
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  i_item_desc 
      ,i_category 
      ,i_class 
      ,i_current_price
      ,sum(ws_ext_sales_price) as itemrevenue 
      ,sum(ws_ext_sales_price)*100/sum(sum(ws_ext_sales_price)) over
          (partition by i_class) as revenueratio
from	
	web_sales
    	,item 
    	,date_dim
where 
	ws_item_sk = i_item_sk 
  	and i_category in ('Jewelry', 'Sports', 'Books')
  	and ws_sold_date_sk = d_date_sk
	and d_date between cast('2001-01-12' as date) 
				and (cast('2001-01-12' as date) + 30 days)
group by 
	i_item_id
        ,i_item_desc 
        ,i_category
        ,i_class
        ,i_current_price
order by 
	i_category
        ,i_class
        ,i_item_id
        ,i_item_desc
        ,revenueratio
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 6 <- Reducer 9 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 7 <- Map 6 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_84]
        Limit [LIM_83] (rows=100 width=802)
          Number of rows:100
          Select Operator [SEL_82] (rows=138600 width=801)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_81]
              Select Operator [SEL_80] (rows=138600 width=801)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                Top N Key Operator [TNK_79] (rows=138600 width=689)
                  keys:_col0, _col1, _col2, _col3, ((_col5 * 100) / sum_window_0),top n:100
                  PTF Operator [PTF_78] (rows=138600 width=689)
                    Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 ASC NULLS FIRST","partition by:":"_col1"}]
                    Select Operator [SEL_77] (rows=138600 width=689)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                    <-Reducer 3 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_76]
                        PartitionCols:_col1
                        Group By Operator [GBY_75] (rows=138600 width=689)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_18]
                            PartitionCols:_col0, _col1, _col2, _col3, _col4
                            Group By Operator [GBY_17] (rows=138600 width=689)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col8)"],keys:_col5, _col4, _col1, _col2, _col3
                              Merge Join Operator [MERGEJOIN_60] (rows=4798568 width=689)
                                Conds:RS_63._col0=RS_14._col1(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col8"]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_63]
                                  PartitionCols:_col0
                                  Select Operator [SEL_62] (rows=138600 width=581)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                    Filter Operator [FIL_61] (rows=138600 width=581)
                                      predicate:(i_category) IN ('Jewelry', 'Sports', 'Books')
                                      TableScan [TS_0] (rows=462000 width=581)
                                        default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id","i_item_desc","i_current_price","i_class","i_category"]
                              <-Reducer 7 [SIMPLE_EDGE]
                                SHUFFLE [RS_14]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_59] (rows=15995224 width=115)
                                    Conds:RS_74._col0=RS_66._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 8 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_66]
                                      PartitionCols:_col0
                                      Select Operator [SEL_65] (rows=8116 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_64] (rows=8116 width=98)
                                          predicate:CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'2001-01-12 00:00:00' AND TIMESTAMP'2001-02-11 00:00:00'
                                          TableScan [TS_6] (rows=73049 width=98)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                  <-Map 6 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_74]
                                      PartitionCols:_col0
                                      Select Operator [SEL_73] (rows=143966864 width=119)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_72] (rows=143966864 width=119)
                                          predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_10_date_dim_d_date_sk_min) AND DynamicValue(RS_10_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_10_date_dim_d_date_sk_bloom_filter)))
                                          TableScan [TS_3] (rows=144002668 width=119)
                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_ext_sales_price"]
                                          <-Reducer 9 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_71]
                                              Group By Operator [GBY_70] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_69]
                                                  Group By Operator [GBY_68] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_67] (rows=8116 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_65]

