PREHOOK: query: explain
with ws as
  (select d_year AS ws_sold_year, ws_item_sk,
    ws_bill_customer_sk ws_customer_sk,
    sum(ws_quantity) ws_qty,
    sum(ws_wholesale_cost) ws_wc,
    sum(ws_sales_price) ws_sp
   from web_sales
   left join web_returns on wr_order_number=ws_order_number and ws_item_sk=wr_item_sk
   join date_dim on ws_sold_date_sk = d_date_sk
   where wr_order_number is null
   group by d_year, ws_item_sk, ws_bill_customer_sk
   ),
cs as
  (select d_year AS cs_sold_year, cs_item_sk,
    cs_bill_customer_sk cs_customer_sk,
    sum(cs_quantity) cs_qty,
    sum(cs_wholesale_cost) cs_wc,
    sum(cs_sales_price) cs_sp
   from catalog_sales
   left join catalog_returns on cr_order_number=cs_order_number and cs_item_sk=cr_item_sk
   join date_dim on cs_sold_date_sk = d_date_sk
   where cr_order_number is null
   group by d_year, cs_item_sk, cs_bill_customer_sk
   ),
ss as
  (select d_year AS ss_sold_year, ss_item_sk,
    ss_customer_sk,
    sum(ss_quantity) ss_qty,
    sum(ss_wholesale_cost) ss_wc,
    sum(ss_sales_price) ss_sp
   from store_sales
   left join store_returns on sr_ticket_number=ss_ticket_number and ss_item_sk=sr_item_sk
   join date_dim on ss_sold_date_sk = d_date_sk
   where sr_ticket_number is null
   group by d_year, ss_item_sk, ss_customer_sk
   )
 select 
ss_sold_year, ss_item_sk, ss_customer_sk,
round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2) ratio,
ss_qty store_qty, ss_wc store_wholesale_cost, ss_sp store_sales_price,
coalesce(ws_qty,0)+coalesce(cs_qty,0) other_chan_qty,
coalesce(ws_wc,0)+coalesce(cs_wc,0) other_chan_wholesale_cost,
coalesce(ws_sp,0)+coalesce(cs_sp,0) other_chan_sales_price
from ss
left join ws on (ws_sold_year=ss_sold_year and ws_item_sk=ss_item_sk and ws_customer_sk=ss_customer_sk)
left join cs on (cs_sold_year=ss_sold_year and cs_item_sk=cs_item_sk and cs_customer_sk=ss_customer_sk)
where coalesce(ws_qty,0)>0 and coalesce(cs_qty, 0)>0 and ss_sold_year=2000
order by 
  ss_sold_year, ss_item_sk, ss_customer_sk,
  ss_qty desc, ss_wc desc, ss_sp desc,
  other_chan_qty,
  other_chan_wholesale_cost,
  other_chan_sales_price,
  round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2)
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ws as
  (select d_year AS ws_sold_year, ws_item_sk,
    ws_bill_customer_sk ws_customer_sk,
    sum(ws_quantity) ws_qty,
    sum(ws_wholesale_cost) ws_wc,
    sum(ws_sales_price) ws_sp
   from web_sales
   left join web_returns on wr_order_number=ws_order_number and ws_item_sk=wr_item_sk
   join date_dim on ws_sold_date_sk = d_date_sk
   where wr_order_number is null
   group by d_year, ws_item_sk, ws_bill_customer_sk
   ),
cs as
  (select d_year AS cs_sold_year, cs_item_sk,
    cs_bill_customer_sk cs_customer_sk,
    sum(cs_quantity) cs_qty,
    sum(cs_wholesale_cost) cs_wc,
    sum(cs_sales_price) cs_sp
   from catalog_sales
   left join catalog_returns on cr_order_number=cs_order_number and cs_item_sk=cr_item_sk
   join date_dim on cs_sold_date_sk = d_date_sk
   where cr_order_number is null
   group by d_year, cs_item_sk, cs_bill_customer_sk
   ),
ss as
  (select d_year AS ss_sold_year, ss_item_sk,
    ss_customer_sk,
    sum(ss_quantity) ss_qty,
    sum(ss_wholesale_cost) ss_wc,
    sum(ss_sales_price) ss_sp
   from store_sales
   left join store_returns on sr_ticket_number=ss_ticket_number and ss_item_sk=sr_item_sk
   join date_dim on ss_sold_date_sk = d_date_sk
   where sr_ticket_number is null
   group by d_year, ss_item_sk, ss_customer_sk
   )
 select 
ss_sold_year, ss_item_sk, ss_customer_sk,
round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2) ratio,
ss_qty store_qty, ss_wc store_wholesale_cost, ss_sp store_sales_price,
coalesce(ws_qty,0)+coalesce(cs_qty,0) other_chan_qty,
coalesce(ws_wc,0)+coalesce(cs_wc,0) other_chan_wholesale_cost,
coalesce(ws_sp,0)+coalesce(cs_sp,0) other_chan_sales_price
from ss
left join ws on (ws_sold_year=ss_sold_year and ws_item_sk=ss_item_sk and ws_customer_sk=ss_customer_sk)
left join cs on (cs_sold_year=ss_sold_year and cs_item_sk=cs_item_sk and cs_customer_sk=ss_customer_sk)
where coalesce(ws_qty,0)>0 and coalesce(cs_qty, 0)>0 and ss_sold_year=2000
order by 
  ss_sold_year, ss_item_sk, ss_customer_sk,
  ss_qty desc, ss_wc desc, ss_sp desc,
  other_chan_qty,
  other_chan_wholesale_cost,
  other_chan_sales_price,
  round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2)
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 13 <- Reducer 11 (BROADCAST_EDGE)
Map 16 <- Reducer 11 (BROADCAST_EDGE)
Map 19 <- Reducer 12 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 1 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 17 <- Map 16 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 5 <- Reducer 10 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 1 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 1 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_272]
        Limit [LIM_271] (rows=100 width=484)
          Number of rows:100
          Select Operator [SEL_270] (rows=75385523694 width=483)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
          <-Reducer 5 [SIMPLE_EDGE]
            SHUFFLE [RS_76]
              Select Operator [SEL_75] (rows=75385523694 width=719)
                Output:["_col0","_col1","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                Top N Key Operator [TNK_117] (rows=75385523694 width=703)
                  keys:_col0, _col1, _col2, _col3, _col4, (CASE WHEN (_col11 is not null) THEN (_col11) ELSE (0L) END + CASE WHEN (_col6 is not null) THEN (_col6) ELSE (0L) END), (CASE WHEN (_col12 is not null) THEN (_col12) ELSE (0) END + CASE WHEN (_col7 is not null) THEN (_col7) ELSE (0) END), (CASE WHEN (_col13 is not null) THEN (_col13) ELSE (0) END + CASE WHEN (_col8 is not null) THEN (_col8) ELSE (0) END), round((UDFToDouble(_col2) / UDFToDouble(CASE WHEN ((_col11 is not null and _col6 is not null)) THEN ((_col11 + _col6)) ELSE (1L) END)), 2),top n:100
                  Merge Join Operator [MERGEJOIN_224] (rows=75385523694 width=703)
                    Conds:RS_72._col0, _col1=RS_243._col0, _col1(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col6","_col7","_col8","_col11","_col12","_col13"]
                  <-Reducer 10 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_243]
                      PartitionCols:_col0, _col1
                      Filter Operator [FIL_242] (rows=1008632 width=239)
                        predicate:(_col2 > 0L)
                        Group By Operator [GBY_241] (rows=1008632 width=239)
                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1
                        <-Reducer 9 [SIMPLE_EDGE]
                          SHUFFLE [RS_65]
                            PartitionCols:_col0, _col1
                            Group By Operator [GBY_64] (rows=1008632 width=239)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col4)","sum(_col5)","sum(_col6)"],keys:_col2, _col3
                              Merge Join Operator [MERGEJOIN_222] (rows=1008632 width=227)
                                Conds:RS_229._col0=RS_61._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col6"]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_229]
                                  PartitionCols:_col0
                                  Select Operator [SEL_226] (rows=652 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_225] (rows=652 width=8)
                                      predicate:(d_year = 2000)
                                      TableScan [TS_0] (rows=73049 width=8)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                              <-Reducer 20 [SIMPLE_EDGE]
                                SHUFFLE [RS_61]
                                  PartitionCols:_col0
                                  Select Operator [SEL_59] (rows=2824825 width=236)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                    Merge Join Operator [MERGEJOIN_221] (rows=2824825 width=236)
                                      Conds:RS_237._col1, _col3=RS_240._col0, _col1(Anti),Output:["_col0","_col1","_col2","_col4","_col5","_col6"]
                                    <-Map 19 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_237]
                                        PartitionCols:_col1, _col3
                                        Select Operator [SEL_236] (rows=143930993 width=243)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                          Filter Operator [FIL_235] (rows=143930993 width=243)
                                            predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_60_date_dim_d_date_sk_min) AND DynamicValue(RS_60_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_60_date_dim_d_date_sk_bloom_filter)))
                                            TableScan [TS_49] (rows=144002668 width=243)
                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_order_number","ws_quantity","ws_wholesale_cost","ws_sales_price"]
                                            <-Reducer 12 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_234]
                                                Group By Operator [GBY_233] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_232]
                                                    Group By Operator [GBY_231] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_230] (rows=652 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_226]
                                    <-Map 21 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_240]
                                        PartitionCols:_col0, _col1
                                        Group By Operator [GBY_239] (rows=14398467 width=8)
                                          Output:["_col0","_col1"],keys:_col0, _col1
                                          Select Operator [SEL_238] (rows=14398467 width=8)
                                            Output:["_col0","_col1"]
                                            TableScan [TS_52] (rows=14398467 width=8)
                                              default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_item_sk","wr_order_number"]
                  <-Reducer 4 [SIMPLE_EDGE]
                    SHUFFLE [RS_72]
                      PartitionCols:_col0, _col1
                      Merge Join Operator [MERGEJOIN_223] (rows=13664108245 width=471)
                        Conds:RS_258._col1=RS_269._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col6","_col7","_col8"]
                      <-Reducer 3 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_258]
                          PartitionCols:_col1
                          Select Operator [SEL_257] (rows=187573258 width=239)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Group By Operator [GBY_256] (rows=187573258 width=239)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1
                            <-Reducer 2 [SIMPLE_EDGE]
                              SHUFFLE [RS_19]
                                PartitionCols:_col0, _col1
                                Group By Operator [GBY_18] (rows=187573258 width=239)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col4)","sum(_col5)","sum(_col6)"],keys:_col3, _col2
                                  Merge Join Operator [MERGEJOIN_218] (rows=187573258 width=206)
                                    Conds:RS_227._col0=RS_15._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col6"]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_227]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_226]
                                  <-Reducer 14 [SIMPLE_EDGE]
                                    SHUFFLE [RS_15]
                                      PartitionCols:_col0
                                      Select Operator [SEL_13] (rows=525327388 width=229)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                        Merge Join Operator [MERGEJOIN_217] (rows=525327388 width=229)
                                          Conds:RS_252._col1, _col3=RS_255._col0, _col1(Anti),Output:["_col0","_col1","_col2","_col4","_col5","_col6"]
                                        <-Map 13 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_252]
                                            PartitionCols:_col1, _col3
                                            Select Operator [SEL_251] (rows=525327388 width=233)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                              Filter Operator [FIL_250] (rows=525327388 width=233)
                                                predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_customer_sk BETWEEN DynamicValue(RS_73_web_sales_ws_bill_customer_sk_min) AND DynamicValue(RS_73_web_sales_ws_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_73_web_sales_ws_bill_customer_sk_bloom_filter)))
                                                TableScan [TS_3] (rows=575995635 width=233)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_ticket_number","ss_quantity","ss_wholesale_cost","ss_sales_price"]
                                                <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_248]
                                                    Group By Operator [GBY_247] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_246]
                                                        Group By Operator [GBY_245] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_244] (rows=1008632 width=7)
                                                            Output:["_col0"]
                                                             Please refer to the previous Filter Operator [FIL_242]
                                        <-Map 15 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_255]
                                            PartitionCols:_col0, _col1
                                            Group By Operator [GBY_254] (rows=57591150 width=8)
                                              Output:["_col0","_col1"],keys:_col0, _col1
                                              Select Operator [SEL_253] (rows=57591150 width=8)
                                                Output:["_col0","_col1"]
                                                TableScan [TS_6] (rows=57591150 width=8)
                                                  default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
                      <-Reducer 8 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_269]
                          PartitionCols:_col0
                          Select Operator [SEL_268] (rows=36821353 width=235)
                            Output:["_col0","_col1","_col2","_col3"]
                            Filter Operator [FIL_267] (rows=36821353 width=239)
                              predicate:(_col2 > 0L)
                              Select Operator [SEL_266] (rows=36821353 width=239)
                                Output:["_col1","_col2","_col3","_col4"]
                                Group By Operator [GBY_265] (rows=36821353 width=239)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1
                                <-Reducer 7 [SIMPLE_EDGE]
                                  SHUFFLE [RS_41]
                                    PartitionCols:_col0, _col1
                                    Group By Operator [GBY_40] (rows=36821353 width=239)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col4)","sum(_col5)","sum(_col6)"],keys:_col2, _col3
                                      Merge Join Operator [MERGEJOIN_220] (rows=36821353 width=227)
                                        Conds:RS_228._col0=RS_37._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col6"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_228]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_226]
                                      <-Reducer 17 [SIMPLE_EDGE]
                                        SHUFFLE [RS_37]
                                          PartitionCols:_col0
                                          Select Operator [SEL_35] (rows=103857961 width=236)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Merge Join Operator [MERGEJOIN_219] (rows=103857961 width=236)
                                              Conds:RS_261._col2, _col3=RS_264._col0, _col1(Anti),Output:["_col0","_col1","_col2","_col4","_col5","_col6"]
                                            <-Map 16 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_261]
                                                PartitionCols:_col2, _col3
                                                Select Operator [SEL_260] (rows=285117831 width=242)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                  Filter Operator [FIL_259] (rows=285117831 width=242)
                                                    predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_bill_customer_sk BETWEEN DynamicValue(RS_73_web_sales_ws_bill_customer_sk_min) AND DynamicValue(RS_73_web_sales_ws_bill_customer_sk_max) and in_bloom_filter(cs_bill_customer_sk, DynamicValue(RS_73_web_sales_ws_bill_customer_sk_bloom_filter)))
                                                    TableScan [TS_25] (rows=287989836 width=242)
                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_order_number","cs_quantity","cs_wholesale_cost","cs_sales_price"]
                                                    <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_249]
                                                         Please refer to the previous Group By Operator [GBY_247]
                                            <-Map 18 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_264]
                                                PartitionCols:_col0, _col1
                                                Group By Operator [GBY_263] (rows=28798881 width=8)
                                                  Output:["_col0","_col1"],keys:_col0, _col1
                                                  Select Operator [SEL_262] (rows=28798881 width=8)
                                                    Output:["_col0","_col1"]
                                                    TableScan [TS_28] (rows=28798881 width=8)
                                                      default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number"]

