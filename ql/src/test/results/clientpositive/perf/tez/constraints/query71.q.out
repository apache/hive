PREHOOK: query: explain
select i_brand_id brand_id, i_brand brand,t_hour,t_minute,
 	sum(ext_price) ext_price
 from item, (select ws_ext_sales_price as ext_price, 
                        ws_sold_date_sk as sold_date_sk,
                        ws_item_sk as sold_item_sk,
                        ws_sold_time_sk as time_sk  
                 from web_sales,date_dim
                 where d_date_sk = ws_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 union all
                 select cs_ext_sales_price as ext_price,
                        cs_sold_date_sk as sold_date_sk,
                        cs_item_sk as sold_item_sk,
                        cs_sold_time_sk as time_sk
                 from catalog_sales,date_dim
                 where d_date_sk = cs_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 union all
                 select ss_ext_sales_price as ext_price,
                        ss_sold_date_sk as sold_date_sk,
                        ss_item_sk as sold_item_sk,
                        ss_sold_time_sk as time_sk
                 from store_sales,date_dim
                 where d_date_sk = ss_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 ) as tmp,time_dim
 where
   sold_item_sk = i_item_sk
   and i_manager_id=1
   and time_sk = t_time_sk
   and (t_meal_time = 'breakfast' or t_meal_time = 'dinner')
 group by i_brand, i_brand_id,t_hour,t_minute
 order by ext_price desc, i_brand_id
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@time_dim
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select i_brand_id brand_id, i_brand brand,t_hour,t_minute,
 	sum(ext_price) ext_price
 from item, (select ws_ext_sales_price as ext_price, 
                        ws_sold_date_sk as sold_date_sk,
                        ws_item_sk as sold_item_sk,
                        ws_sold_time_sk as time_sk  
                 from web_sales,date_dim
                 where d_date_sk = ws_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 union all
                 select cs_ext_sales_price as ext_price,
                        cs_sold_date_sk as sold_date_sk,
                        cs_item_sk as sold_item_sk,
                        cs_sold_time_sk as time_sk
                 from catalog_sales,date_dim
                 where d_date_sk = cs_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 union all
                 select ss_ext_sales_price as ext_price,
                        ss_sold_date_sk as sold_date_sk,
                        ss_item_sk as sold_item_sk,
                        ss_sold_time_sk as time_sk
                 from store_sales,date_dim
                 where d_date_sk = ss_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 ) as tmp,time_dim
 where
   sold_item_sk = i_item_sk
   and i_manager_id=1
   and time_sk = t_time_sk
   and (t_meal_time = 'breakfast' or t_meal_time = 'dinner')
 group by i_brand, i_brand_id,t_hour,t_minute
 order by ext_price desc, i_brand_id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@time_dim
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 11 <- Reducer 14 (BROADCAST_EDGE)
Map 15 <- Reducer 18 (BROADCAST_EDGE)
Map 5 <- Reducer 10 (BROADCAST_EDGE)
Reducer 10 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 18 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 6 <- Map 5 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 8 <- Map 19 (SIMPLE_EDGE), Union 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_164]
        Select Operator [SEL_163] (rows=1991967 width=223)
          Output:["_col0","_col1","_col2","_col3","_col4"]
        <-Reducer 3 [SIMPLE_EDGE] vectorized
          SHUFFLE [RS_162]
            Select Operator [SEL_161] (rows=1991967 width=227)
              Output:["_col1","_col2","_col3","_col4","_col5"]
              Group By Operator [GBY_160] (rows=1991967 width=223)
                Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
              <-Reducer 2 [SIMPLE_EDGE]
                SHUFFLE [RS_47]
                  PartitionCols:_col0, _col1, _col2, _col3
                  Group By Operator [GBY_46] (rows=1991967 width=223)
                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)"],keys:_col7, _col1, _col2, _col8
                    Merge Join Operator [MERGEJOIN_141] (rows=1991967 width=112)
                      Conds:RS_156._col0=RS_43._col2(Inner),Output:["_col1","_col2","_col3","_col7","_col8"]
                    <-Map 1 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_156]
                        PartitionCols:_col0
                        Select Operator [SEL_155] (rows=43200 width=12)
                          Output:["_col0","_col1","_col2"]
                          Filter Operator [FIL_154] (rows=43200 width=99)
                            predicate:(t_meal_time) IN ('breakfast', 'dinner')
                            TableScan [TS_0] (rows=86400 width=99)
                              default@time_dim,time_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["t_time_sk","t_hour","t_minute","t_meal_time"]
                    <-Reducer 8 [SIMPLE_EDGE]
                      SHUFFLE [RS_43]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_140] (rows=3983933 width=104)
                          Conds:Union 7._col1=RS_159._col0(Inner),Output:["_col0","_col2","_col4","_col5"]
                        <-Map 19 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_159]
                            PartitionCols:_col0
                            Select Operator [SEL_158] (rows=7333 width=107)
                              Output:["_col0","_col1","_col2"]
                              Filter Operator [FIL_157] (rows=7333 width=111)
                                predicate:(i_manager_id = 1)
                                TableScan [TS_35] (rows=462000 width=111)
                                  default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_brand","i_manager_id"]
                        <-Union 7 [SIMPLE_EDGE]
                          <-Reducer 12 [CONTAINS]
                            Reduce Output Operator [RS_149]
                              PartitionCols:_col1
                              Select Operator [SEL_147] (rows=7751851 width=98)
                                Output:["_col0","_col1","_col2"]
                                Merge Join Operator [MERGEJOIN_146] (rows=7751851 width=98)
                                  Conds:RS_186._col0=RS_178._col0(Inner),Output:["_col1","_col2","_col3"]
                                <-Map 13 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_178]
                                    PartitionCols:_col0
                                    Select Operator [SEL_177] (rows=50 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_176] (rows=50 width=12)
                                        predicate:((d_year = 2001) and (d_moy = 12))
                                        TableScan [TS_16] (rows=73049 width=12)
                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                <-Map 11 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_186]
                                    PartitionCols:_col0
                                    Select Operator [SEL_185] (rows=285116947 width=123)
                                      Output:["_col0","_col1","_col2","_col3"]
                                      Filter Operator [FIL_184] (rows=285116947 width=123)
                                        predicate:(cs_sold_date_sk is not null and cs_sold_time_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_20_date_dim_d_date_sk_min) AND DynamicValue(RS_20_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_20_date_dim_d_date_sk_bloom_filter)))
                                        TableScan [TS_13] (rows=287989836 width=123)
                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_sold_time_sk","cs_item_sk","cs_ext_sales_price"]
                                        <-Reducer 14 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_183]
                                            Group By Operator [GBY_182] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_181]
                                                Group By Operator [GBY_180] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_179] (rows=50 width=4)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_177]
                          <-Reducer 16 [CONTAINS]
                            Reduce Output Operator [RS_153]
                              PartitionCols:_col1
                              Select Operator [SEL_151] (rows=14384397 width=4)
                                Output:["_col0","_col1","_col2"]
                                Merge Join Operator [MERGEJOIN_150] (rows=14384397 width=4)
                                  Conds:RS_197._col0=RS_189._col0(Inner),Output:["_col1","_col2","_col3"]
                                <-Map 17 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_189]
                                    PartitionCols:_col0
                                    Select Operator [SEL_188] (rows=50 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_187] (rows=50 width=12)
                                        predicate:((d_year = 2001) and (d_moy = 12))
                                        TableScan [TS_27] (rows=73049 width=12)
                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                <-Map 15 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_197]
                                    PartitionCols:_col0
                                    Select Operator [SEL_196] (rows=525325345 width=118)
                                      Output:["_col0","_col1","_col2","_col3"]
                                      Filter Operator [FIL_195] (rows=525325345 width=118)
                                        predicate:(ss_sold_date_sk is not null and ss_sold_time_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_31_date_dim_d_date_sk_min) AND DynamicValue(RS_31_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_31_date_dim_d_date_sk_bloom_filter)))
                                        TableScan [TS_24] (rows=575995635 width=118)
                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_sold_time_sk","ss_item_sk","ss_ext_sales_price"]
                                        <-Reducer 18 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_194]
                                            Group By Operator [GBY_193] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_192]
                                                Group By Operator [GBY_191] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_190] (rows=50 width=4)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_188]
                          <-Reducer 6 [CONTAINS]
                            Reduce Output Operator [RS_145]
                              PartitionCols:_col1
                              Select Operator [SEL_143] (rows=3941098 width=118)
                                Output:["_col0","_col1","_col2"]
                                Merge Join Operator [MERGEJOIN_142] (rows=3941098 width=118)
                                  Conds:RS_175._col0=RS_167._col0(Inner),Output:["_col1","_col2","_col3"]
                                <-Map 9 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_167]
                                    PartitionCols:_col0
                                    Select Operator [SEL_166] (rows=50 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_165] (rows=50 width=12)
                                        predicate:((d_year = 2001) and (d_moy = 12))
                                        TableScan [TS_6] (rows=73049 width=12)
                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                <-Map 5 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_175]
                                    PartitionCols:_col0
                                    Select Operator [SEL_174] (rows=143930836 width=123)
                                      Output:["_col0","_col1","_col2","_col3"]
                                      Filter Operator [FIL_173] (rows=143930836 width=123)
                                        predicate:(ws_sold_time_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_10_date_dim_d_date_sk_min) AND DynamicValue(RS_10_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_10_date_dim_d_date_sk_bloom_filter)))
                                        TableScan [TS_3] (rows=144002668 width=123)
                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_sold_time_sk","ws_item_sk","ws_ext_sales_price"]
                                        <-Reducer 10 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_172]
                                            Group By Operator [GBY_171] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_170]
                                                Group By Operator [GBY_169] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_168] (rows=50 width=4)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_166]

