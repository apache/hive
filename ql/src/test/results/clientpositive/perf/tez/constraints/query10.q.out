PREHOOK: query: explain
select  
  cd_gender,
  cd_marital_status,
  cd_education_status,
  count(*) cnt1,
  cd_purchase_estimate,
  count(*) cnt2,
  cd_credit_rating,
  count(*) cnt3,
  cd_dep_count,
  count(*) cnt4,
  cd_dep_employed_count,
  count(*) cnt5,
  cd_dep_college_count,
  count(*) cnt6
 from
  customer c,customer_address ca,customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  ca_county in ('Walker County','Richland County','Gaines County','Douglas County','Dona Ana County') and
  cd_demo_sk = c.c_current_cdemo_sk and 
  exists (select *
          from store_sales,date_dim
          where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 2002 and
                d_moy between 4 and 4+3) and
   (exists (select *
            from web_sales,date_dim
            where c.c_customer_sk = ws_bill_customer_sk and
                  ws_sold_date_sk = d_date_sk and
                  d_year = 2002 and
                  d_moy between 4 ANd 4+3) or 
    exists (select * 
            from catalog_sales,date_dim
            where c.c_customer_sk = cs_ship_customer_sk and
                  cs_sold_date_sk = d_date_sk and
                  d_year = 2002 and
                  d_moy between 4 and 4+3))
 group by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 order by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
  cd_gender,
  cd_marital_status,
  cd_education_status,
  count(*) cnt1,
  cd_purchase_estimate,
  count(*) cnt2,
  cd_credit_rating,
  count(*) cnt3,
  cd_dep_count,
  count(*) cnt4,
  cd_dep_employed_count,
  count(*) cnt5,
  cd_dep_college_count,
  count(*) cnt6
 from
  customer c,customer_address ca,customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  ca_county in ('Walker County','Richland County','Gaines County','Douglas County','Dona Ana County') and
  cd_demo_sk = c.c_current_cdemo_sk and 
  exists (select *
          from store_sales,date_dim
          where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 2002 and
                d_moy between 4 and 4+3) and
   (exists (select *
            from web_sales,date_dim
            where c.c_customer_sk = ws_bill_customer_sk and
                  ws_sold_date_sk = d_date_sk and
                  d_year = 2002 and
                  d_moy between 4 ANd 4+3) or 
    exists (select * 
            from catalog_sales,date_dim
            where c.c_customer_sk = cs_ship_customer_sk and
                  cs_sold_date_sk = d_date_sk and
                  d_year = 2002 and
                  d_moy between 4 and 4+3))
 group by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 order by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 13 <- Reducer 16 (BROADCAST_EDGE)
Map 21 <- Reducer 11 (BROADCAST_EDGE)
Map 22 <- Reducer 10 (BROADCAST_EDGE)
Reducer 10 <- Reducer 8 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 15 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Map 15 (SIMPLE_EDGE), Map 22 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 6 <- Map 12 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 14 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 18 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 20 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_234]
        Limit [LIM_233] (rows=3 width=419)
          Number of rows:100
          Select Operator [SEL_232] (rows=3 width=419)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
          <-Reducer 3 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_231]
              Select Operator [SEL_230] (rows=3 width=419)
                Output:["_col0","_col1","_col2","_col3","_col4","_col6","_col8","_col10","_col12"]
                Group By Operator [GBY_229] (rows=3 width=379)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7
                <-Reducer 2 [SIMPLE_EDGE]
                  SHUFFLE [RS_67]
                    PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                    Group By Operator [GBY_66] (rows=3 width=379)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["count()"],keys:_col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                      Top N Key Operator [TNK_111] (rows=156912 width=371)
                        keys:_col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8,top n:100
                        Merge Join Operator [MERGEJOIN_191] (rows=156912 width=371)
                          Conds:RS_193._col0=RS_63._col1(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                        <-Map 1 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_193]
                            PartitionCols:_col0
                            Select Operator [SEL_192] (rows=1861800 width=375)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                              TableScan [TS_0] (rows=1861800 width=375)
                                default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_gender","cd_marital_status","cd_education_status","cd_purchase_estimate","cd_credit_rating","cd_dep_count","cd_dep_employed_count","cd_dep_college_count"]
                        <-Reducer 9 [SIMPLE_EDGE]
                          SHUFFLE [RS_63]
                            PartitionCols:_col1
                            Select Operator [SEL_61] (rows=154725 width=11)
                              Output:["_col1"]
                              Filter Operator [FIL_60] (rows=154725 width=11)
                                predicate:(_col5 is not null or _col7 is not null)
                                Merge Join Operator [MERGEJOIN_190] (rows=154725 width=11)
                                  Conds:RS_57._col0=RS_228._col1(Left Outer),Output:["_col1","_col5","_col7"]
                                <-Reducer 8 [SIMPLE_EDGE]
                                  SHUFFLE [RS_57]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_188] (rows=155827 width=11)
                                      Conds:RS_54._col0=RS_220._col1(Left Outer),Output:["_col0","_col1","_col5"]
                                    <-Reducer 7 [SIMPLE_EDGE]
                                      SHUFFLE [RS_54]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_186] (rows=22703 width=4)
                                          Conds:RS_51._col0=RS_52._col0(Left Semi),Output:["_col0","_col1"]
                                        <-Reducer 14 [SIMPLE_EDGE]
                                          SHUFFLE [RS_52]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_50] (rows=155827 width=2)
                                              Output:["_col0"],keys:_col0
                                              Select Operator [SEL_17] (rows=57825495 width=2)
                                                Output:["_col0"]
                                                Merge Join Operator [MERGEJOIN_185] (rows=57825495 width=2)
                                                  Conds:RS_212._col0=RS_202._col0(Inner),Output:["_col1"]
                                                <-Map 15 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_202]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_201] (rows=201 width=4)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_200] (rows=201 width=12)
                                                        predicate:((d_year = 2002) and d_moy BETWEEN 4 AND 7)
                                                        TableScan [TS_11] (rows=73049 width=12)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                <-Map 13 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_212]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_211] (rows=525327388 width=7)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_210] (rows=525327388 width=7)
                                                        predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_15_date_dim_d_date_sk_min) AND DynamicValue(RS_15_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_15_date_dim_d_date_sk_bloom_filter)))
                                                        TableScan [TS_8] (rows=575995635 width=7)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk"]
                                                        <-Reducer 16 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_209]
                                                            Group By Operator [GBY_208] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_207]
                                                                Group By Operator [GBY_206] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_203] (rows=201 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_201]
                                        <-Reducer 6 [SIMPLE_EDGE]
                                          SHUFFLE [RS_51]
                                            PartitionCols:_col0
                                            Merge Join Operator [MERGEJOIN_184] (rows=224946 width=4)
                                              Conds:RS_196._col2=RS_199._col0(Inner),Output:["_col0","_col1"]
                                            <-Map 12 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_199]
                                                PartitionCols:_col0
                                                Select Operator [SEL_198] (rows=116550 width=102)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_197] (rows=116550 width=102)
                                                    predicate:(ca_county) IN ('Walker County', 'Richland County', 'Gaines County', 'Douglas County', 'Dona Ana County')
                                                    TableScan [TS_5] (rows=40000000 width=102)
                                                      default@customer_address,ca,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county"]
                                            <-Map 5 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_196]
                                                PartitionCols:_col2
                                                Select Operator [SEL_195] (rows=77201384 width=11)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_194] (rows=77201384 width=11)
                                                    predicate:(c_current_cdemo_sk is not null and c_current_addr_sk is not null)
                                                    TableScan [TS_2] (rows=80000000 width=11)
                                                      default@customer,c,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_addr_sk"]
                                    <-Reducer 18 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_220]
                                        PartitionCols:_col1
                                        Select Operator [SEL_219] (rows=155827 width=7)
                                          Output:["_col0","_col1"]
                                          Group By Operator [GBY_218] (rows=155827 width=3)
                                            Output:["_col0"],keys:KEY._col0
                                          <-Reducer 17 [SIMPLE_EDGE]
                                            SHUFFLE [RS_29]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_28] (rows=155827 width=3)
                                                Output:["_col0"],keys:_col1
                                                Merge Join Operator [MERGEJOIN_187] (rows=15843227 width=3)
                                                  Conds:RS_217._col0=RS_204._col0(Inner),Output:["_col1"]
                                                <-Map 15 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_204]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_201]
                                                <-Map 21 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_217]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_216] (rows=143930993 width=7)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_215] (rows=143930993 width=7)
                                                        predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_bill_customer_sk BETWEEN DynamicValue(RS_54_c_c_customer_sk_min) AND DynamicValue(RS_54_c_c_customer_sk_max) and in_bloom_filter(ws_bill_customer_sk, DynamicValue(RS_54_c_c_customer_sk_bloom_filter)))
                                                        TableScan [TS_18] (rows=144002668 width=7)
                                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk"]
                                                        <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_214]
                                                            Group By Operator [GBY_213] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Reducer 7 [CUSTOM_SIMPLE_EDGE]
                                                              SHUFFLE [RS_161]
                                                                Group By Operator [GBY_160] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_159] (rows=22703 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Merge Join Operator [MERGEJOIN_186]
                                <-Reducer 20 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_228]
                                    PartitionCols:_col1
                                    Select Operator [SEL_227] (rows=154725 width=7)
                                      Output:["_col0","_col1"]
                                      Group By Operator [GBY_226] (rows=154725 width=3)
                                        Output:["_col0"],keys:KEY._col0
                                      <-Reducer 19 [SIMPLE_EDGE]
                                        SHUFFLE [RS_43]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_42] (rows=154725 width=3)
                                            Output:["_col0"],keys:_col1
                                            Merge Join Operator [MERGEJOIN_189] (rows=31162251 width=3)
                                              Conds:RS_225._col0=RS_205._col0(Inner),Output:["_col1"]
                                            <-Map 15 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_205]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_201]
                                            <-Map 22 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_225]
                                                PartitionCols:_col0
                                                Select Operator [SEL_224] (rows=285115246 width=7)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_223] (rows=285115246 width=7)
                                                    predicate:(cs_ship_customer_sk is not null and cs_sold_date_sk is not null and cs_ship_customer_sk BETWEEN DynamicValue(RS_57_c_c_customer_sk_min) AND DynamicValue(RS_57_c_c_customer_sk_max) and in_bloom_filter(cs_ship_customer_sk, DynamicValue(RS_57_c_c_customer_sk_bloom_filter)))
                                                    TableScan [TS_32] (rows=287989836 width=7)
                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_ship_customer_sk"]
                                                    <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_222]
                                                        Group By Operator [GBY_221] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 8 [CUSTOM_SIMPLE_EDGE]
                                                          SHUFFLE [RS_176]
                                                            Group By Operator [GBY_175] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_174] (rows=155827 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Merge Join Operator [MERGEJOIN_188]

