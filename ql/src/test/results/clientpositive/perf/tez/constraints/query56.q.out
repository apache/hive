PREHOOK: query: explain
with ss as (
 select i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where i_item_id in (select
     i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -8 
 group by i_item_id),
 cs as (
 select i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -8 
 group by i_item_id),
 ws as (
 select i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -8
 group by i_item_id)
  select  i_item_id ,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by total_sales
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as (
 select i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where i_item_id in (select
     i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -8 
 group by i_item_id),
 cs as (
 select i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -8 
 group by i_item_id),
 ws as (
 select i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -8
 group by i_item_id)
  select  i_item_id ,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by total_sales
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE)
Map 26 <- Reducer 17 (BROADCAST_EDGE)
Map 27 <- Reducer 23 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 10 (SIMPLE_EDGE), Map 26 (SIMPLE_EDGE)
Reducer 13 <- Map 24 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 25 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 25 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 17 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 10 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE)
Reducer 19 <- Map 24 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 20 <- Map 25 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Map 25 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 23 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 24 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 25 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 25 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_357]
        Limit [LIM_356] (rows=100 width=212)
          Number of rows:100
          Select Operator [SEL_355] (rows=355 width=212)
            Output:["_col0","_col1"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_354]
              Top N Key Operator [TNK_353] (rows=355 width=212)
                keys:_col1,top n:100
                Group By Operator [GBY_352] (rows=355 width=212)
                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                <-Union 7 [SIMPLE_EDGE]
                  <-Reducer 16 [CONTAINS] vectorized
                    Reduce Output Operator [RS_365]
                      PartitionCols:_col0
                      Group By Operator [GBY_364] (rows=355 width=212)
                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                        Group By Operator [GBY_363] (rows=355 width=212)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 15 [SIMPLE_EDGE]
                          SHUFFLE [RS_65]
                            PartitionCols:_col0
                            Group By Operator [GBY_64] (rows=355 width=212)
                              Output:["_col0","_col1"],aggregations:["sum(_col3)"],keys:_col10
                              Merge Join Operator [MERGEJOIN_301] (rows=52381 width=100)
                                Conds:RS_60._col10=RS_347._col0(Left Semi),Output:["_col3","_col10"]
                              <-Map 25 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_347]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_345] (rows=10500 width=100)
                                    Output:["_col0"],keys:_col0
                                    Select Operator [SEL_344] (rows=21000 width=100)
                                      Output:["_col0"]
                                      Filter Operator [FIL_340] (rows=21000 width=189)
                                        predicate:(i_color) IN ('orchid', 'chiffon', 'lace')
                                        TableScan [TS_9] (rows=462000 width=104)
                                          default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id","i_color"]
                              <-Reducer 14 [SIMPLE_EDGE]
                                SHUFFLE [RS_60]
                                  PartitionCols:_col10
                                  Merge Join Operator [MERGEJOIN_296] (rows=1550375 width=109)
                                    Conds:RS_51._col2=RS_342._col0(Inner),Output:["_col3","_col10"]
                                  <-Map 25 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_342]
                                      PartitionCols:_col0
                                      Select Operator [SEL_339] (rows=462000 width=104)
                                        Output:["_col0","_col1"]
                                         Please refer to the previous TableScan [TS_9]
                                  <-Reducer 13 [SIMPLE_EDGE]
                                    SHUFFLE [RS_51]
                                      PartitionCols:_col2
                                      Merge Join Operator [MERGEJOIN_295] (rows=1550375 width=13)
                                        Conds:RS_48._col1=RS_337._col0(Inner),Output:["_col2","_col3"]
                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_337]
                                          PartitionCols:_col0
                                          Select Operator [SEL_335] (rows=8000000 width=116)
                                            Output:["_col0"]
                                            Filter Operator [FIL_334] (rows=8000000 width=112)
                                              predicate:(ca_gmt_offset = -8)
                                              TableScan [TS_6] (rows=40000000 width=112)
                                                default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_gmt_offset"]
                                      <-Reducer 12 [SIMPLE_EDGE]
                                        SHUFFLE [RS_48]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_294] (rows=7751872 width=98)
                                            Conds:RS_362._col0=RS_319._col0(Inner),Output:["_col1","_col2","_col3"]
                                          <-Map 10 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_319]
                                              PartitionCols:_col0
                                              Select Operator [SEL_316] (rows=50 width=12)
                                                Output:["_col0"]
                                                Filter Operator [FIL_315] (rows=50 width=12)
                                                  predicate:((d_year = 2000) and (d_moy = 1))
                                                  TableScan [TS_3] (rows=73049 width=12)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                          <-Map 26 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_362]
                                              PartitionCols:_col0
                                              Select Operator [SEL_361] (rows=285117733 width=123)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_360] (rows=285117733 width=123)
                                                  predicate:(cs_sold_date_sk is not null and cs_bill_addr_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_46_date_dim_d_date_sk_min) AND DynamicValue(RS_46_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_46_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_34] (rows=287989836 width=123)
                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_addr_sk","cs_item_sk","cs_ext_sales_price"]
                                                  <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_359]
                                                      Group By Operator [GBY_358] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_327]
                                                          Group By Operator [GBY_324] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_320] (rows=50 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_316]
                  <-Reducer 22 [CONTAINS] vectorized
                    Reduce Output Operator [RS_373]
                      PartitionCols:_col0
                      Group By Operator [GBY_372] (rows=355 width=212)
                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                        Group By Operator [GBY_371] (rows=355 width=212)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 21 [SIMPLE_EDGE]
                          SHUFFLE [RS_100]
                            PartitionCols:_col0
                            Group By Operator [GBY_99] (rows=355 width=212)
                              Output:["_col0","_col1"],aggregations:["sum(_col3)"],keys:_col10
                              Merge Join Operator [MERGEJOIN_302] (rows=26631 width=100)
                                Conds:RS_95._col10=RS_348._col0(Left Semi),Output:["_col3","_col10"]
                              <-Map 25 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_348]
                                  PartitionCols:_col0
                                   Please refer to the previous Group By Operator [GBY_345]
                              <-Reducer 20 [SIMPLE_EDGE]
                                SHUFFLE [RS_95]
                                  PartitionCols:_col10
                                  Merge Join Operator [MERGEJOIN_299] (rows=788222 width=206)
                                    Conds:RS_86._col1=RS_343._col0(Inner),Output:["_col3","_col10"]
                                  <-Map 25 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_343]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_339]
                                  <-Reducer 19 [SIMPLE_EDGE]
                                    SHUFFLE [RS_86]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_298] (rows=788222 width=110)
                                        Conds:RS_83._col2=RS_338._col0(Inner),Output:["_col1","_col3"]
                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_338]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_335]
                                      <-Reducer 18 [SIMPLE_EDGE]
                                        SHUFFLE [RS_83]
                                          PartitionCols:_col2
                                          Merge Join Operator [MERGEJOIN_297] (rows=3941109 width=118)
                                            Conds:RS_370._col0=RS_321._col0(Inner),Output:["_col1","_col2","_col3"]
                                          <-Map 10 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_321]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_316]
                                          <-Map 27 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_370]
                                              PartitionCols:_col0
                                              Select Operator [SEL_369] (rows=143931246 width=123)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_368] (rows=143931246 width=123)
                                                  predicate:(ws_sold_date_sk is not null and ws_bill_addr_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_81_date_dim_d_date_sk_min) AND DynamicValue(RS_81_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_81_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_69] (rows=144002668 width=123)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                                  <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_367]
                                                      Group By Operator [GBY_366] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_328]
                                                          Group By Operator [GBY_325] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_322] (rows=50 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_316]
                  <-Reducer 6 [CONTAINS] vectorized
                    Reduce Output Operator [RS_351]
                      PartitionCols:_col0
                      Group By Operator [GBY_350] (rows=355 width=212)
                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                        Group By Operator [GBY_349] (rows=355 width=212)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 5 [SIMPLE_EDGE]
                          SHUFFLE [RS_31]
                            PartitionCols:_col0
                            Group By Operator [GBY_30] (rows=355 width=212)
                              Output:["_col0","_col1"],aggregations:["sum(_col3)"],keys:_col10
                              Merge Join Operator [MERGEJOIN_300] (rows=97200 width=100)
                                Conds:RS_26._col10=RS_346._col0(Left Semi),Output:["_col3","_col10"]
                              <-Map 25 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_346]
                                  PartitionCols:_col0
                                   Please refer to the previous Group By Operator [GBY_345]
                              <-Reducer 4 [SIMPLE_EDGE]
                                SHUFFLE [RS_26]
                                  PartitionCols:_col10
                                  Merge Join Operator [MERGEJOIN_293] (rows=2876890 width=100)
                                    Conds:RS_17._col1=RS_341._col0(Inner),Output:["_col3","_col10"]
                                  <-Map 25 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_341]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_339]
                                  <-Reducer 3 [SIMPLE_EDGE]
                                    SHUFFLE [RS_17]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_292] (rows=2876890 width=4)
                                        Conds:RS_14._col2=RS_336._col0(Inner),Output:["_col1","_col3"]
                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_336]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_335]
                                      <-Reducer 2 [SIMPLE_EDGE]
                                        SHUFFLE [RS_14]
                                          PartitionCols:_col2
                                          Merge Join Operator [MERGEJOIN_291] (rows=14384447 width=4)
                                            Conds:RS_333._col0=RS_317._col0(Inner),Output:["_col1","_col2","_col3"]
                                          <-Map 10 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_317]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_316]
                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_333]
                                              PartitionCols:_col0
                                              Select Operator [SEL_332] (rows=525327191 width=118)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_331] (rows=525327191 width=118)
                                                  predicate:(ss_sold_date_sk is not null and ss_addr_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_12_date_dim_d_date_sk_min) AND DynamicValue(RS_12_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_12_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_0] (rows=575995635 width=118)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_addr_sk","ss_ext_sales_price"]
                                                  <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_330]
                                                      Group By Operator [GBY_329] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_326]
                                                          Group By Operator [GBY_323] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_318] (rows=50 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_316]

