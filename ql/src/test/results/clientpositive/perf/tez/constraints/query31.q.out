PREHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 19 (BROADCAST_EDGE)
Map 13 <- Reducer 18 (BROADCAST_EDGE)
Map 35 <- Reducer 25 (BROADCAST_EDGE)
Map 36 <- Reducer 29 (BROADCAST_EDGE)
Map 37 <- Reducer 33 (BROADCAST_EDGE)
Map 9 <- Reducer 20 (BROADCAST_EDGE)
Reducer 10 <- Map 17 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 11 <- Map 34 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 15 <- Map 34 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 18 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 20 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Map 17 (SIMPLE_EDGE), Map 35 (SIMPLE_EDGE)
Reducer 22 <- Map 34 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 25 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Map 17 (SIMPLE_EDGE), Map 36 (SIMPLE_EDGE)
Reducer 27 <- Map 34 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)
Reducer 28 <- Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 34 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 17 (SIMPLE_EDGE), Map 37 (SIMPLE_EDGE)
Reducer 31 <- Map 34 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE)
Reducer 32 <- Reducer 31 (SIMPLE_EDGE)
Reducer 33 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 12 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 16 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 24 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 32 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8
      File Output Operator [FS_143]
        Select Operator [SEL_142] (rows=16 width=550)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          Filter Operator [FIL_141] (rows=16 width=770)
            predicate:((_col5 / _col1) > (_col11 / _col7))
            Merge Join Operator [MERGEJOIN_464] (rows=48 width=770)
              Conds:RS_138._col6=RS_554._col0(Inner),Output:["_col1","_col3","_col5","_col6","_col7","_col9","_col11"]
            <-Reducer 32 [SIMPLE_EDGE] vectorized
              SHUFFLE [RS_554]
                PartitionCols:_col0
                Group By Operator [GBY_553] (rows=1605 width=210)
                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                <-Reducer 31 [SIMPLE_EDGE]
                  SHUFFLE [RS_125]
                    PartitionCols:_col0
                    Group By Operator [GBY_124] (rows=33705 width=210)
                      Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                      Merge Join Operator [MERGEJOIN_459] (rows=37399561 width=139)
                        Conds:RS_120._col1=RS_513._col0(Inner),Output:["_col2","_col5"]
                      <-Map 34 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_513]
                          PartitionCols:_col0
                          Select Operator [SEL_507] (rows=40000000 width=102)
                            Output:["_col0","_col1"]
                            Filter Operator [FIL_506] (rows=40000000 width=102)
                              predicate:ca_county is not null
                              TableScan [TS_48] (rows=40000000 width=102)
                                default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county"]
                      <-Reducer 30 [SIMPLE_EDGE]
                        SHUFFLE [RS_120]
                          PartitionCols:_col1
                          Merge Join Operator [MERGEJOIN_458] (rows=37399561 width=42)
                            Conds:RS_552._col0=RS_487._col0(Inner),Output:["_col1","_col2"]
                          <-Map 17 [SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_487]
                              PartitionCols:_col0
                              Select Operator [SEL_476] (rows=130 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_470] (rows=130 width=12)
                                  predicate:((d_year = 2000) and (d_qoy = 3))
                                  TableScan [TS_45] (rows=73049 width=12)
                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                          <-Map 37 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_552]
                              PartitionCols:_col0
                              Select Operator [SEL_551] (rows=525327191 width=114)
                                Output:["_col0","_col1","_col2"]
                                Filter Operator [FIL_550] (rows=525327191 width=114)
                                  predicate:(ss_sold_date_sk is not null and ss_addr_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_118_date_dim_d_date_sk_min) AND DynamicValue(RS_118_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_118_date_dim_d_date_sk_bloom_filter)))
                                  TableScan [TS_108] (rows=575995635 width=114)
                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                                  <-Reducer 33 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_549]
                                      Group By Operator [GBY_548] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                      <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_500]
                                          Group By Operator [GBY_494] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                            Select Operator [SEL_488] (rows=130 width=4)
                                              Output:["_col0"]
                                               Please refer to the previous Select Operator [SEL_476]
            <-Reducer 7 [SIMPLE_EDGE]
              SHUFFLE [RS_138]
                PartitionCols:_col6
                Filter Operator [FIL_137] (rows=48 width=658)
                  predicate:((_col1 / _col3) > (_col7 / _col9))
                  Merge Join Operator [MERGEJOIN_463] (rows=146 width=658)
                    Conds:RS_134._col2=RS_135._col0(Inner),Output:["_col1","_col3","_col5","_col6","_col7","_col9"]
                  <-Reducer 24 [SIMPLE_EDGE]
                    SHUFFLE [RS_135]
                      PartitionCols:_col0
                      Merge Join Operator [MERGEJOIN_462] (rows=535 width=322)
                        Conds:RS_539._col0=RS_547._col0(Inner),Output:["_col0","_col1","_col3"]
                      <-Reducer 23 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_539]
                          PartitionCols:_col0
                          Filter Operator [FIL_538] (rows=535 width=210)
                            predicate:(_col1 > 0)
                            Group By Operator [GBY_537] (rows=1605 width=210)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 22 [SIMPLE_EDGE]
                              SHUFFLE [RS_79]
                                PartitionCols:_col0
                                Group By Operator [GBY_78] (rows=33705 width=210)
                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                  Merge Join Operator [MERGEJOIN_455] (rows=37399561 width=139)
                                    Conds:RS_74._col1=RS_511._col0(Inner),Output:["_col2","_col5"]
                                  <-Map 34 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_511]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_507]
                                  <-Reducer 21 [SIMPLE_EDGE]
                                    SHUFFLE [RS_74]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_454] (rows=37399561 width=42)
                                        Conds:RS_536._col0=RS_483._col0(Inner),Output:["_col1","_col2"]
                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_483]
                                          PartitionCols:_col0
                                          Select Operator [SEL_474] (rows=130 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_468] (rows=130 width=12)
                                              predicate:((d_year = 2000) and (d_qoy = 2))
                                               Please refer to the previous TableScan [TS_45]
                                      <-Map 35 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_536]
                                          PartitionCols:_col0
                                          Select Operator [SEL_535] (rows=525327191 width=114)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_534] (rows=525327191 width=114)
                                              predicate:(ss_sold_date_sk is not null and ss_addr_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_72_date_dim_d_date_sk_min) AND DynamicValue(RS_72_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_72_date_dim_d_date_sk_bloom_filter)))
                                              TableScan [TS_62] (rows=575995635 width=114)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                                              <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_533]
                                                  Group By Operator [GBY_532] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_498]
                                                      Group By Operator [GBY_492] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_484] (rows=130 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_474]
                      <-Reducer 28 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_547]
                          PartitionCols:_col0
                          Filter Operator [FIL_546] (rows=535 width=210)
                            predicate:(_col1 > 0)
                            Group By Operator [GBY_545] (rows=1605 width=210)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 27 [SIMPLE_EDGE]
                              SHUFFLE [RS_100]
                                PartitionCols:_col0
                                Group By Operator [GBY_99] (rows=33705 width=210)
                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                  Merge Join Operator [MERGEJOIN_457] (rows=37399561 width=139)
                                    Conds:RS_95._col1=RS_512._col0(Inner),Output:["_col2","_col5"]
                                  <-Map 34 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_512]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_507]
                                  <-Reducer 26 [SIMPLE_EDGE]
                                    SHUFFLE [RS_95]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_456] (rows=37399561 width=42)
                                        Conds:RS_544._col0=RS_485._col0(Inner),Output:["_col1","_col2"]
                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_485]
                                          PartitionCols:_col0
                                          Select Operator [SEL_475] (rows=130 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_469] (rows=130 width=12)
                                              predicate:((d_year = 2000) and (d_qoy = 1))
                                               Please refer to the previous TableScan [TS_45]
                                      <-Map 36 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_544]
                                          PartitionCols:_col0
                                          Select Operator [SEL_543] (rows=525327191 width=114)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_542] (rows=525327191 width=114)
                                              predicate:(ss_sold_date_sk is not null and ss_addr_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_93_date_dim_d_date_sk_min) AND DynamicValue(RS_93_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_93_date_dim_d_date_sk_bloom_filter)))
                                              TableScan [TS_83] (rows=575995635 width=114)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                                              <-Reducer 29 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_541]
                                                  Group By Operator [GBY_540] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_499]
                                                      Group By Operator [GBY_493] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_486] (rows=130 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_475]
                  <-Reducer 6 [SIMPLE_EDGE]
                    SHUFFLE [RS_134]
                      PartitionCols:_col2
                      Merge Join Operator [MERGEJOIN_461] (rows=146 width=434)
                        Conds:RS_131._col2=RS_531._col0(Inner),Output:["_col1","_col2","_col3","_col5"]
                      <-Reducer 16 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_531]
                          PartitionCols:_col0
                          Group By Operator [GBY_530] (rows=440 width=210)
                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 15 [SIMPLE_EDGE]
                            SHUFFLE [RS_59]
                              PartitionCols:_col0
                              Group By Operator [GBY_58] (rows=3960 width=210)
                                Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                Merge Join Operator [MERGEJOIN_453] (rows=10246882 width=209)
                                  Conds:RS_54._col1=RS_508._col0(Inner),Output:["_col2","_col5"]
                                <-Map 34 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_508]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_507]
                                <-Reducer 14 [SIMPLE_EDGE]
                                  SHUFFLE [RS_54]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_452] (rows=10246882 width=115)
                                      Conds:RS_529._col0=RS_477._col0(Inner),Output:["_col1","_col2"]
                                    <-Map 17 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_477]
                                        PartitionCols:_col0
                                        Select Operator [SEL_471] (rows=130 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_465] (rows=130 width=12)
                                            predicate:((d_year = 2000) and (d_qoy = 3))
                                             Please refer to the previous TableScan [TS_45]
                                    <-Map 13 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_529]
                                        PartitionCols:_col0
                                        Select Operator [SEL_528] (rows=143931246 width=119)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_527] (rows=143931246 width=119)
                                            predicate:(ws_sold_date_sk is not null and ws_bill_addr_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_52_date_dim_d_date_sk_min) AND DynamicValue(RS_52_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_52_date_dim_d_date_sk_bloom_filter)))
                                            TableScan [TS_42] (rows=144002668 width=119)
                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                            <-Reducer 18 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_526]
                                                Group By Operator [GBY_525] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_495]
                                                    Group By Operator [GBY_489] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_478] (rows=130 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_471]
                      <-Reducer 5 [SIMPLE_EDGE]
                        SHUFFLE [RS_131]
                          PartitionCols:_col2
                          Merge Join Operator [MERGEJOIN_460] (rows=146 width=322)
                            Conds:RS_516._col0=RS_524._col0(Inner),Output:["_col1","_col2","_col3"]
                          <-Reducer 12 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_524]
                              PartitionCols:_col0
                              Filter Operator [FIL_523] (rows=146 width=210)
                                predicate:(_col1 > 0)
                                Group By Operator [GBY_522] (rows=440 width=210)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 11 [SIMPLE_EDGE]
                                  SHUFFLE [RS_38]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_37] (rows=3960 width=210)
                                      Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                      Merge Join Operator [MERGEJOIN_451] (rows=10246882 width=209)
                                        Conds:RS_33._col1=RS_510._col0(Inner),Output:["_col2","_col5"]
                                      <-Map 34 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_510]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_507]
                                      <-Reducer 10 [SIMPLE_EDGE]
                                        SHUFFLE [RS_33]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_450] (rows=10246882 width=115)
                                            Conds:RS_521._col0=RS_481._col0(Inner),Output:["_col1","_col2"]
                                          <-Map 17 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_481]
                                              PartitionCols:_col0
                                              Select Operator [SEL_473] (rows=130 width=4)
                                                Output:["_col0"]
                                                Filter Operator [FIL_467] (rows=130 width=12)
                                                  predicate:((d_year = 2000) and (d_qoy = 1))
                                                   Please refer to the previous TableScan [TS_45]
                                          <-Map 9 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_521]
                                              PartitionCols:_col0
                                              Select Operator [SEL_520] (rows=143931246 width=119)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_519] (rows=143931246 width=119)
                                                  predicate:(ws_sold_date_sk is not null and ws_bill_addr_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_31_date_dim_d_date_sk_min) AND DynamicValue(RS_31_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_31_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_21] (rows=144002668 width=119)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                                  <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_518]
                                                      Group By Operator [GBY_517] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_497]
                                                          Group By Operator [GBY_491] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_482] (rows=130 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_473]
                          <-Reducer 4 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_516]
                              PartitionCols:_col0
                              Filter Operator [FIL_515] (rows=146 width=210)
                                predicate:(_col1 > 0)
                                Group By Operator [GBY_514] (rows=440 width=210)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 3 [SIMPLE_EDGE]
                                  SHUFFLE [RS_17]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_16] (rows=3960 width=210)
                                      Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                      Merge Join Operator [MERGEJOIN_449] (rows=10246882 width=209)
                                        Conds:RS_12._col1=RS_509._col0(Inner),Output:["_col2","_col5"]
                                      <-Map 34 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_509]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_507]
                                      <-Reducer 2 [SIMPLE_EDGE]
                                        SHUFFLE [RS_12]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_448] (rows=10246882 width=115)
                                            Conds:RS_505._col0=RS_479._col0(Inner),Output:["_col1","_col2"]
                                          <-Map 17 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_479]
                                              PartitionCols:_col0
                                              Select Operator [SEL_472] (rows=130 width=4)
                                                Output:["_col0"]
                                                Filter Operator [FIL_466] (rows=130 width=12)
                                                  predicate:((d_year = 2000) and (d_qoy = 2))
                                                   Please refer to the previous TableScan [TS_45]
                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_505]
                                              PartitionCols:_col0
                                              Select Operator [SEL_504] (rows=143931246 width=119)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_503] (rows=143931246 width=119)
                                                  predicate:(ws_sold_date_sk is not null and ws_bill_addr_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_10_date_dim_d_date_sk_min) AND DynamicValue(RS_10_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_10_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_0] (rows=144002668 width=119)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                                  <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_502]
                                                      Group By Operator [GBY_501] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_496]
                                                          Group By Operator [GBY_490] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_480] (rows=130 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_472]

