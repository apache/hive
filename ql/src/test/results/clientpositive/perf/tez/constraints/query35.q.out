PREHOOK: query: explain
select   
  ca_state,
  cd_gender,
  cd_marital_status,
  count(*) cnt1,
  avg(cd_dep_count),
  max(cd_dep_count),
  sum(cd_dep_count),
  cd_dep_employed_count,
  count(*) cnt2,
  avg(cd_dep_employed_count),
  max(cd_dep_employed_count),
  sum(cd_dep_employed_count),
  cd_dep_college_count,
  count(*) cnt3,
  avg(cd_dep_college_count),
  max(cd_dep_college_count),
  sum(cd_dep_college_count)
 from
  customer c,customer_address ca,customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  cd_demo_sk = c.c_current_cdemo_sk and 
  exists (select *
          from store_sales,date_dim
          where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 1999 and
                d_qoy < 4) and
   (exists (select *
            from web_sales,date_dim
            where c.c_customer_sk = ws_bill_customer_sk and
                  ws_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_qoy < 4) or 
    exists (select * 
            from catalog_sales,date_dim
            where c.c_customer_sk = cs_ship_customer_sk and
                  cs_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_qoy < 4))
 group by ca_state,
          cd_gender,
          cd_marital_status,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 order by ca_state,
          cd_gender,
          cd_marital_status,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select   
  ca_state,
  cd_gender,
  cd_marital_status,
  count(*) cnt1,
  avg(cd_dep_count),
  max(cd_dep_count),
  sum(cd_dep_count),
  cd_dep_employed_count,
  count(*) cnt2,
  avg(cd_dep_employed_count),
  max(cd_dep_employed_count),
  sum(cd_dep_employed_count),
  cd_dep_college_count,
  count(*) cnt3,
  avg(cd_dep_college_count),
  max(cd_dep_college_count),
  sum(cd_dep_college_count)
 from
  customer c,customer_address ca,customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  cd_demo_sk = c.c_current_cdemo_sk and 
  exists (select *
          from store_sales,date_dim
          where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 1999 and
                d_qoy < 4) and
   (exists (select *
            from web_sales,date_dim
            where c.c_customer_sk = ws_bill_customer_sk and
                  ws_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_qoy < 4) or 
    exists (select * 
            from catalog_sales,date_dim
            where c.c_customer_sk = cs_ship_customer_sk and
                  cs_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_qoy < 4))
 group by ca_state,
          cd_gender,
          cd_marital_status,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 order by ca_state,
          cd_gender,
          cd_marital_status,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 11 <- Reducer 14 (BROADCAST_EDGE)
Map 20 <- Reducer 17 (BROADCAST_EDGE)
Map 21 <- Reducer 10 (BROADCAST_EDGE)
Reducer 10 <- Reducer 8 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 13 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 13 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 3 <- Map 22 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 7 <- Map 6 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 8 <- Reducer 16 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 19 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_241]
        Limit [LIM_240] (rows=16 width=352)
          Number of rows:100
          Select Operator [SEL_239] (rows=16 width=352)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_238]
              Select Operator [SEL_237] (rows=16 width=352)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col10","_col11","_col12","_col14","_col15","_col16","_col17"]
                Group By Operator [GBY_236] (rows=16 width=336)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","count(VALUE._col2)","max(VALUE._col3)","sum(VALUE._col4)","count(VALUE._col5)","max(VALUE._col6)","sum(VALUE._col7)","count(VALUE._col8)","max(VALUE._col9)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                <-Reducer 3 [SIMPLE_EDGE]
                  SHUFFLE [RS_66]
                    PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                    Group By Operator [GBY_65] (rows=16 width=336)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"],aggregations:["count()","sum(_col3)","count(_col3)","max(_col3)","sum(_col4)","count(_col4)","max(_col4)","sum(_col5)","count(_col5)","max(_col5)"],keys:_col14, _col1, _col2, _col3, _col4, _col5
                      Top N Key Operator [TNK_116] (rows=508988 width=268)
                        keys:_col14, _col1, _col2, _col3, _col4, _col5,top n:100
                        Merge Join Operator [MERGEJOIN_196] (rows=508988 width=268)
                          Conds:RS_61._col8=RS_235._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col14"]
                        <-Map 22 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_235]
                            PartitionCols:_col0
                            Select Operator [SEL_234] (rows=40000000 width=90)
                              Output:["_col0","_col1"]
                              TableScan [TS_56] (rows=40000000 width=90)
                                default@customer_address,ca,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state"]
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_61]
                            PartitionCols:_col8
                            Merge Join Operator [MERGEJOIN_195] (rows=508988 width=186)
                              Conds:RS_198._col0=RS_59._col1(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col8"]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_198]
                                PartitionCols:_col0
                                Select Operator [SEL_197] (rows=1861800 width=186)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                  TableScan [TS_0] (rows=1861800 width=186)
                                    default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_gender","cd_marital_status","cd_dep_count","cd_dep_employed_count","cd_dep_college_count"]
                            <-Reducer 9 [SIMPLE_EDGE]
                              SHUFFLE [RS_59]
                                PartitionCols:_col1
                                Select Operator [SEL_55] (rows=501891 width=12)
                                  Output:["_col1","_col2"]
                                  Filter Operator [FIL_54] (rows=501891 width=12)
                                    predicate:(_col3 is not null or _col5 is not null)
                                    Merge Join Operator [MERGEJOIN_194] (rows=501891 width=12)
                                      Conds:RS_51._col0=RS_233._col1(Left Outer),Output:["_col1","_col2","_col3","_col5"]
                                    <-Reducer 8 [SIMPLE_EDGE]
                                      SHUFFLE [RS_51]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_192] (rows=505464 width=12)
                                          Conds:RS_48._col0=RS_225._col1(Left Outer),Output:["_col0","_col1","_col2","_col3"]
                                        <-Reducer 16 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_225]
                                            PartitionCols:_col1
                                            Select Operator [SEL_224] (rows=505464 width=7)
                                              Output:["_col0","_col1"]
                                              Group By Operator [GBY_223] (rows=505464 width=3)
                                                Output:["_col0"],keys:KEY._col0
                                              <-Reducer 15 [SIMPLE_EDGE]
                                                SHUFFLE [RS_26]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_25] (rows=505464 width=3)
                                                    Output:["_col0"],keys:_col1
                                                    Merge Join Operator [MERGEJOIN_191] (rows=51391963 width=3)
                                                      Conds:RS_222._col0=RS_206._col0(Inner),Output:["_col1"]
                                                    <-Map 13 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_206]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_203] (rows=652 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_202] (rows=652 width=12)
                                                            predicate:((d_year = 1999) and (d_qoy < 4))
                                                            TableScan [TS_8] (rows=73049 width=12)
                                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                                                    <-Map 20 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_222]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_221] (rows=143930993 width=7)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_220] (rows=143930993 width=7)
                                                            predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_22_date_dim_d_date_sk_min) AND DynamicValue(RS_22_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_22_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_15] (rows=144002668 width=7)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk"]
                                                            <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_219]
                                                                Group By Operator [GBY_218] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_212]
                                                                    Group By Operator [GBY_210] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_207] (rows=652 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_203]
                                        <-Reducer 7 [SIMPLE_EDGE]
                                          SHUFFLE [RS_48]
                                            PartitionCols:_col0
                                            Merge Join Operator [MERGEJOIN_190] (rows=1463345 width=8)
                                              Conds:RS_201._col0=RS_46._col0(Left Semi),Output:["_col0","_col1","_col2"]
                                            <-Map 6 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_201]
                                                PartitionCols:_col0
                                                Select Operator [SEL_200] (rows=77201384 width=11)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_199] (rows=77201384 width=11)
                                                    predicate:(c_current_cdemo_sk is not null and c_current_addr_sk is not null)
                                                    TableScan [TS_2] (rows=80000000 width=11)
                                                      default@customer,c,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_addr_sk"]
                                            <-Reducer 12 [SIMPLE_EDGE]
                                              SHUFFLE [RS_46]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_44] (rows=1516392 width=3)
                                                  Output:["_col0"],keys:_col0
                                                  Select Operator [SEL_14] (rows=187573258 width=3)
                                                    Output:["_col0"]
                                                    Merge Join Operator [MERGEJOIN_189] (rows=187573258 width=3)
                                                      Conds:RS_217._col0=RS_204._col0(Inner),Output:["_col1"]
                                                    <-Map 13 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_204]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_203]
                                                    <-Map 11 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_217]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_216] (rows=525327388 width=7)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_215] (rows=525327388 width=7)
                                                            predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_12_date_dim_d_date_sk_min) AND DynamicValue(RS_12_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_12_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_5] (rows=575995635 width=7)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk"]
                                                            <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_214]
                                                                Group By Operator [GBY_213] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_211]
                                                                    Group By Operator [GBY_209] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_205] (rows=652 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_203]
                                    <-Reducer 19 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_233]
                                        PartitionCols:_col1
                                        Select Operator [SEL_232] (rows=501891 width=7)
                                          Output:["_col0","_col1"]
                                          Group By Operator [GBY_231] (rows=501891 width=3)
                                            Output:["_col0"],keys:KEY._col0
                                          <-Reducer 18 [SIMPLE_EDGE]
                                            SHUFFLE [RS_40]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_39] (rows=1003782 width=3)
                                                Output:["_col0"],keys:_col1
                                                Merge Join Operator [MERGEJOIN_193] (rows=101083527 width=3)
                                                  Conds:RS_230._col0=RS_208._col0(Inner),Output:["_col1"]
                                                <-Map 13 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_208]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_203]
                                                <-Map 21 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_230]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_229] (rows=285115246 width=7)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_228] (rows=285115246 width=7)
                                                        predicate:(cs_ship_customer_sk is not null and cs_sold_date_sk is not null and cs_ship_customer_sk BETWEEN DynamicValue(RS_51_c_c_customer_sk_min) AND DynamicValue(RS_51_c_c_customer_sk_max) and in_bloom_filter(cs_ship_customer_sk, DynamicValue(RS_51_c_c_customer_sk_bloom_filter)))
                                                        TableScan [TS_29] (rows=287989836 width=7)
                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_ship_customer_sk"]
                                                        <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_227]
                                                            Group By Operator [GBY_226] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Reducer 8 [CUSTOM_SIMPLE_EDGE]
                                                              SHUFFLE [RS_176]
                                                                Group By Operator [GBY_175] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_174] (rows=505464 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Merge Join Operator [MERGEJOIN_192]

