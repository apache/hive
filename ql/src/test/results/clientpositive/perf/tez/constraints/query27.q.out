PREHOOK: query: explain
select  i_item_id,
        s_state, grouping(s_state) g_state,
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4
 from store_sales, customer_demographics, date_dim, store, item
 where ss_sold_date_sk = d_date_sk and
       ss_item_sk = i_item_sk and
       ss_store_sk = s_store_sk and
       ss_cdemo_sk = cd_demo_sk and
       cd_gender = 'M' and
       cd_marital_status = 'U' and
       cd_education_status = '2 yr Degree' and
       d_year = 2001 and
       s_state in ('SD','FL', 'MI', 'LA', 'MO', 'SC')
 group by rollup (i_item_id, s_state)
 order by i_item_id
         ,s_state
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  i_item_id,
        s_state, grouping(s_state) g_state,
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4
 from store_sales, customer_demographics, date_dim, store, item
 where ss_sold_date_sk = d_date_sk and
       ss_item_sk = i_item_sk and
       ss_store_sk = s_store_sk and
       ss_cdemo_sk = cd_demo_sk and
       cd_gender = 'M' and
       cd_marital_status = 'U' and
       cd_education_status = '2 yr Degree' and
       d_year = 2001 and
       s_state in ('SD','FL', 'MI', 'LA', 'MO', 'SC')
 group by rollup (i_item_id, s_state)
 order by i_item_id
         ,s_state
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Map 10 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 11 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 12 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_129]
        Limit [LIM_128] (rows=100 width=538)
          Number of rows:100
          Select Operator [SEL_127] (rows=6526254 width=538)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_126]
              Select Operator [SEL_125] (rows=6526254 width=538)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                Group By Operator [GBY_124] (rows=6526254 width=570)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","sum(VALUE._col2)","count(VALUE._col3)","sum(VALUE._col4)","count(VALUE._col5)","sum(VALUE._col6)","count(VALUE._col7)"],keys:KEY._col0, KEY._col1, KEY._col2
                <-Reducer 5 [SIMPLE_EDGE]
                  SHUFFLE [RS_29]
                    PartitionCols:_col0, _col1, _col2
                    Group By Operator [GBY_28] (rows=13907934 width=570)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["sum(_col2)","count(_col2)","sum(_col3)","count(_col3)","sum(_col4)","count(_col4)","sum(_col5)","count(_col5)"],keys:_col0, _col1, 0L
                      Top N Key Operator [TNK_60] (rows=4635978 width=186)
                        keys:_col0, _col1, 0L,top n:100
                        Select Operator [SEL_26] (rows=4635978 width=186)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Top N Key Operator [TNK_58] (rows=4635978 width=186)
                            keys:_col13, _col11,top n:100
                            Merge Join Operator [MERGEJOIN_104] (rows=4635978 width=186)
                              Conds:RS_23._col1=RS_123._col0(Inner),Output:["_col4","_col5","_col6","_col7","_col11","_col13"]
                            <-Map 12 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_123]
                                PartitionCols:_col0
                                Select Operator [SEL_122] (rows=462000 width=104)
                                  Output:["_col0","_col1"]
                                  TableScan [TS_12] (rows=462000 width=104)
                                    default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id"]
                            <-Reducer 4 [SIMPLE_EDGE]
                              SHUFFLE [RS_23]
                                PartitionCols:_col1
                                Merge Join Operator [MERGEJOIN_103] (rows=4635978 width=90)
                                  Conds:RS_20._col3=RS_121._col0(Inner),Output:["_col1","_col4","_col5","_col6","_col7","_col11"]
                                <-Map 11 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_121]
                                    PartitionCols:_col0
                                    Select Operator [SEL_120] (rows=209 width=90)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_119] (rows=209 width=90)
                                        predicate:(s_state) IN ('SD', 'FL', 'MI', 'LA', 'MO', 'SC')
                                        TableScan [TS_9] (rows=1704 width=90)
                                          default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_state"]
                                <-Reducer 3 [SIMPLE_EDGE]
                                  SHUFFLE [RS_20]
                                    PartitionCols:_col3
                                    Merge Join Operator [MERGEJOIN_102] (rows=4635978 width=4)
                                      Conds:RS_17._col0=RS_118._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7"]
                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_118]
                                        PartitionCols:_col0
                                        Select Operator [SEL_117] (rows=652 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_116] (rows=652 width=8)
                                            predicate:(d_year = 2001)
                                            TableScan [TS_6] (rows=73049 width=8)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                    <-Reducer 2 [SIMPLE_EDGE]
                                      SHUFFLE [RS_17]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_101] (rows=4635978 width=4)
                                          Conds:RS_115._col2=RS_107._col0(Inner),Output:["_col0","_col1","_col3","_col4","_col5","_col6","_col7"]
                                        <-Map 8 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_107]
                                            PartitionCols:_col0
                                            Select Operator [SEL_106] (rows=14776 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_105] (rows=14776 width=268)
                                                predicate:((cd_marital_status = 'U') and (cd_education_status = '2 yr Degree') and (cd_gender = 'M'))
                                                TableScan [TS_3] (rows=1861800 width=268)
                                                  default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_gender","cd_marital_status","cd_education_status"]
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_115]
                                            PartitionCols:_col2
                                            Select Operator [SEL_114] (rows=501690006 width=340)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                              Filter Operator [FIL_113] (rows=501690006 width=340)
                                                predicate:(ss_cdemo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null and ss_cdemo_sk BETWEEN DynamicValue(RS_15_customer_demographics_cd_demo_sk_min) AND DynamicValue(RS_15_customer_demographics_cd_demo_sk_max) and in_bloom_filter(ss_cdemo_sk, DynamicValue(RS_15_customer_demographics_cd_demo_sk_bloom_filter)))
                                                TableScan [TS_0] (rows=575995635 width=340)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_cdemo_sk","ss_store_sk","ss_quantity","ss_list_price","ss_sales_price","ss_coupon_amt"]
                                                <-Reducer 9 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_112]
                                                    Group By Operator [GBY_111] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_110]
                                                        Group By Operator [GBY_109] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_108] (rows=14776 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_106]

