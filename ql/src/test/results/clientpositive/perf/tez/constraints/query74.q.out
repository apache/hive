PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,sum(ss_net_paid) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
   and d_year in (1998,1998+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,sum(ws_net_paid) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
   and d_year in (1998,1998+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         )
  select
        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.year = 1998
         and t_s_secyear.year = 1998+1
         and t_w_firstyear.year = 1998
         and t_w_secyear.year = 1998+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 3,1,2
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,sum(ss_net_paid) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
   and d_year in (1998,1998+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,sum(ws_net_paid) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
   and d_year in (1998,1998+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         )
  select
        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.year = 1998
         and t_s_secyear.year = 1998+1
         and t_w_firstyear.year = 1998
         and t_w_secyear.year = 1998+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 3,1,2
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE)
Map 25 <- Reducer 15 (BROADCAST_EDGE)
Map 26 <- Reducer 19 (BROADCAST_EDGE)
Map 27 <- Reducer 23 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 10 (SIMPLE_EDGE), Map 25 (SIMPLE_EDGE)
Reducer 13 <- Map 24 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 10 (SIMPLE_EDGE), Map 26 (SIMPLE_EDGE)
Reducer 17 <- Map 24 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 20 <- Map 10 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE)
Reducer 21 <- Map 24 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 24 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 14 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 18 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 22 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 24 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_386]
        Limit [LIM_385] (rows=100 width=280)
          Number of rows:100
          Select Operator [SEL_384] (rows=8888888 width=280)
            Output:["_col0","_col1","_col2"]
          <-Reducer 8 [SIMPLE_EDGE]
            SHUFFLE [RS_95]
              Select Operator [SEL_94] (rows=8888888 width=280)
                Output:["_col0","_col1","_col2"]
                Top N Key Operator [TNK_172] (rows=8888888 width=280)
                  keys:_col3, _col0, _col2,top n:100
                  Merge Join Operator [MERGEJOIN_322] (rows=8888888 width=280)
                    Conds:RS_91._col0=RS_358._col0(Inner),Output:["_col0","_col2","_col3"]
                  <-Map 24 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_358]
                      PartitionCols:_col0
                      Select Operator [SEL_353] (rows=80000000 width=280)
                        Output:["_col0","_col1","_col2"]
                        TableScan [TS_6] (rows=80000000 width=104)
                          default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name"]
                  <-Reducer 7 [SIMPLE_EDGE]
                    SHUFFLE [RS_91]
                      PartitionCols:_col0
                      Select Operator [SEL_88] (rows=7433360 width=100)
                        Output:["_col0"]
                        Filter Operator [FIL_87] (rows=7433360 width=548)
                          predicate:((_col5 / _col7) > (_col1 / _col3))
                          Merge Join Operator [MERGEJOIN_321] (rows=22300081 width=548)
                            Conds:RS_84._col0=RS_383._col0(Inner),Output:["_col0","_col1","_col3","_col5","_col7"]
                          <-Reducer 22 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_383]
                              PartitionCols:_col0
                              Filter Operator [FIL_382] (rows=14325562 width=212)
                                predicate:(_col1 > 0)
                                Group By Operator [GBY_381] (rows=42976686 width=212)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 21 [SIMPLE_EDGE]
                                  SHUFFLE [RS_74]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_73] (rows=51391963 width=212)
                                      Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                      Merge Join Operator [MERGEJOIN_318] (rows=51391963 width=211)
                                        Conds:RS_69._col1=RS_357._col0(Inner),Output:["_col2","_col5"]
                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_357]
                                          PartitionCols:_col0
                                          Select Operator [SEL_352] (rows=80000000 width=104)
                                            Output:["_col0","_col1"]
                                             Please refer to the previous TableScan [TS_6]
                                      <-Reducer 20 [SIMPLE_EDGE]
                                        SHUFFLE [RS_69]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_317] (rows=51391963 width=115)
                                            Conds:RS_380._col0=RS_337._col0(Inner),Output:["_col1","_col2"]
                                          <-Map 10 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_337]
                                              PartitionCols:_col0
                                              Select Operator [SEL_330] (rows=652 width=4)
                                                Output:["_col0"]
                                                Filter Operator [FIL_326] (rows=652 width=8)
                                                  predicate:(d_year = 1998)
                                                  TableScan [TS_3] (rows=73049 width=8)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                          <-Map 27 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_380]
                                              PartitionCols:_col0
                                              Select Operator [SEL_379] (rows=143930993 width=119)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_378] (rows=143930993 width=119)
                                                  predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_67_date_dim_d_date_sk_min) AND DynamicValue(RS_67_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_67_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_58] (rows=144002668 width=119)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_net_paid"]
                                                  <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_377]
                                                      Group By Operator [GBY_376] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_346]
                                                          Group By Operator [GBY_342] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_338] (rows=652 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_330]
                          <-Reducer 6 [SIMPLE_EDGE]
                            SHUFFLE [RS_84]
                              PartitionCols:_col0
                              Merge Join Operator [MERGEJOIN_320] (rows=22300081 width=436)
                                Conds:RS_81._col0=RS_375._col0(Inner),Output:["_col0","_col1","_col3","_col5"]
                              <-Reducer 18 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_375]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_374] (rows=42976686 width=212)
                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                  <-Reducer 17 [SIMPLE_EDGE]
                                    SHUFFLE [RS_55]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_54] (rows=51391963 width=212)
                                        Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                        Merge Join Operator [MERGEJOIN_316] (rows=51391963 width=211)
                                          Conds:RS_50._col1=RS_356._col0(Inner),Output:["_col2","_col5"]
                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_356]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_352]
                                        <-Reducer 16 [SIMPLE_EDGE]
                                          SHUFFLE [RS_50]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_315] (rows=51391963 width=115)
                                              Conds:RS_373._col0=RS_335._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 10 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_335]
                                                PartitionCols:_col0
                                                Select Operator [SEL_329] (rows=652 width=4)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_325] (rows=652 width=8)
                                                    predicate:(d_year = 1999)
                                                     Please refer to the previous TableScan [TS_3]
                                            <-Map 26 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_373]
                                                PartitionCols:_col0
                                                Select Operator [SEL_372] (rows=143930993 width=119)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_371] (rows=143930993 width=119)
                                                    predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_48_date_dim_d_date_sk_min) AND DynamicValue(RS_48_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_48_date_dim_d_date_sk_bloom_filter)))
                                                    TableScan [TS_39] (rows=144002668 width=119)
                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_net_paid"]
                                                    <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_370]
                                                        Group By Operator [GBY_369] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_345]
                                                            Group By Operator [GBY_341] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_336] (rows=652 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_329]
                              <-Reducer 5 [SIMPLE_EDGE]
                                SHUFFLE [RS_81]
                                  PartitionCols:_col0
                                  Merge Join Operator [MERGEJOIN_319] (rows=22300081 width=324)
                                    Conds:RS_360._col0=RS_368._col0(Inner),Output:["_col0","_col1","_col3"]
                                  <-Reducer 14 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_368]
                                      PartitionCols:_col0
                                      Filter Operator [FIL_367] (rows=22300081 width=212)
                                        predicate:(_col1 > 0)
                                        Group By Operator [GBY_366] (rows=66900244 width=212)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                        <-Reducer 13 [SIMPLE_EDGE]
                                          SHUFFLE [RS_35]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_34] (rows=80000000 width=212)
                                              Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                              Merge Join Operator [MERGEJOIN_314] (rows=187573258 width=197)
                                                Conds:RS_30._col1=RS_355._col0(Inner),Output:["_col2","_col5"]
                                              <-Map 24 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_355]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_352]
                                              <-Reducer 12 [SIMPLE_EDGE]
                                                SHUFFLE [RS_30]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_313] (rows=187573258 width=101)
                                                    Conds:RS_365._col0=RS_333._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_333]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_328] (rows=652 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_324] (rows=652 width=8)
                                                          predicate:(d_year = 1998)
                                                           Please refer to the previous TableScan [TS_3]
                                                  <-Map 25 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_365]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_364] (rows=525327388 width=114)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_363] (rows=525327388 width=114)
                                                          predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_28_date_dim_d_date_sk_min) AND DynamicValue(RS_28_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_28_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_19] (rows=575995635 width=114)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_net_paid"]
                                                          <-Reducer 15 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_362]
                                                              Group By Operator [GBY_361] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_344]
                                                                  Group By Operator [GBY_340] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_334] (rows=652 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_328]
                                  <-Reducer 4 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_360]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_359] (rows=66900244 width=212)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                      <-Reducer 3 [SIMPLE_EDGE]
                                        SHUFFLE [RS_16]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_15] (rows=80000000 width=212)
                                            Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                            Merge Join Operator [MERGEJOIN_312] (rows=187573258 width=197)
                                              Conds:RS_11._col1=RS_354._col0(Inner),Output:["_col2","_col5"]
                                            <-Map 24 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_354]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_352]
                                            <-Reducer 2 [SIMPLE_EDGE]
                                              SHUFFLE [RS_11]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_311] (rows=187573258 width=101)
                                                  Conds:RS_351._col0=RS_331._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 10 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_331]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_327] (rows=652 width=4)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_323] (rows=652 width=8)
                                                        predicate:(d_year = 1999)
                                                         Please refer to the previous TableScan [TS_3]
                                                <-Map 1 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_351]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_350] (rows=525327388 width=114)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_349] (rows=525327388 width=114)
                                                        predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_9_date_dim_d_date_sk_min) AND DynamicValue(RS_9_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_9_date_dim_d_date_sk_bloom_filter)))
                                                        TableScan [TS_0] (rows=575995635 width=114)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_net_paid"]
                                                        <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_348]
                                                            Group By Operator [GBY_347] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_343]
                                                                Group By Operator [GBY_339] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_332] (rows=652 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_327]

