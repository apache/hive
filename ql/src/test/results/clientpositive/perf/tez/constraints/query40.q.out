PREHOOK: query: explain
select  
   w_state
  ,i_item_id
  ,sum(case when (cast(d_date as date) < cast ('1998-04-08' as date)) 
 		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_before
  ,sum(case when (cast(d_date as date) >= cast ('1998-04-08' as date)) 
 		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_after
 from
   catalog_sales left outer join catalog_returns on
       (cs_order_number = cr_order_number 
        and cs_item_sk = cr_item_sk)
  ,warehouse 
  ,item
  ,date_dim
 where
     i_current_price between 0.99 and 1.49
 and i_item_sk          = cs_item_sk
 and cs_warehouse_sk    = w_warehouse_sk 
 and cs_sold_date_sk    = d_date_sk
 and d_date between (cast ('1998-04-08' as date) - 30 days)
                and (cast ('1998-04-08' as date) + 30 days) 
 group by
    w_state,i_item_id
 order by w_state,i_item_id
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@warehouse
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
   w_state
  ,i_item_id
  ,sum(case when (cast(d_date as date) < cast ('1998-04-08' as date)) 
 		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_before
  ,sum(case when (cast(d_date as date) >= cast ('1998-04-08' as date)) 
 		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_after
 from
   catalog_sales left outer join catalog_returns on
       (cs_order_number = cr_order_number 
        and cs_item_sk = cr_item_sk)
  ,warehouse 
  ,item
  ,date_dim
 where
     i_current_price between 0.99 and 1.49
 and i_item_sk          = cs_item_sk
 and cs_warehouse_sk    = w_warehouse_sk 
 and cs_sold_date_sk    = d_date_sk
 and d_date between (cast ('1998-04-08' as date) - 30 days)
                and (cast ('1998-04-08' as date) + 30 days) 
 group by
    w_state,i_item_id
 order by w_state,i_item_id
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@warehouse
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 5 <- Reducer 12 (BROADCAST_EDGE)
Reducer 12 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 6 <- Map 5 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 7 <- Map 10 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 11 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_128]
        Limit [LIM_127] (rows=100 width=410)
          Number of rows:100
          Select Operator [SEL_126] (rows=769995 width=410)
            Output:["_col0","_col1","_col2","_col3"]
          <-Reducer 3 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_125]
              Group By Operator [GBY_124] (rows=769995 width=410)
                Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1
              <-Reducer 2 [SIMPLE_EDGE]
                SHUFFLE [RS_29]
                  PartitionCols:_col0, _col1
                  Group By Operator [GBY_28] (rows=5757278 width=410)
                    Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col2)","sum(_col3)"],keys:_col0, _col1
                    Select Operator [SEL_26] (rows=5757278 width=278)
                      Output:["_col0","_col1","_col2","_col3"]
                      Top N Key Operator [TNK_57] (rows=5757278 width=278)
                        keys:_col1, _col14,top n:100
                        Merge Join Operator [MERGEJOIN_105] (rows=5757278 width=278)
                          Conds:RS_107._col0=RS_24._col1(Inner),Output:["_col1","_col6","_col9","_col11","_col12","_col14"]
                        <-Map 1 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_107]
                            PartitionCols:_col0
                            Select Operator [SEL_106] (rows=27 width=90)
                              Output:["_col0","_col1"]
                              TableScan [TS_0] (rows=27 width=90)
                                default@warehouse,warehouse,Tbl:COMPLETE,Col:COMPLETE,Output:["w_warehouse_sk","w_state"]
                        <-Reducer 8 [SIMPLE_EDGE]
                          SHUFFLE [RS_24]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_104] (rows=5757278 width=195)
                              Conds:RS_19._col2=RS_110._col0(Inner),Output:["_col1","_col4","_col7","_col9","_col10","_col12"]
                            <-Map 11 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_110]
                                PartitionCols:_col0
                                Select Operator [SEL_109] (rows=51333 width=104)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_108] (rows=51333 width=215)
                                    predicate:i_current_price BETWEEN 0.99 AND 1.49
                                    TableScan [TS_10] (rows=462000 width=215)
                                      default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id","i_current_price"]
                            <-Reducer 7 [SIMPLE_EDGE]
                              SHUFFLE [RS_19]
                                PartitionCols:_col2
                                Merge Join Operator [MERGEJOIN_103] (rows=51815831 width=124)
                                  Conds:RS_16._col0=RS_123._col0(Inner),Output:["_col1","_col2","_col4","_col7","_col9","_col10"]
                                <-Map 10 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_123]
                                    PartitionCols:_col0
                                    Select Operator [SEL_122] (rows=8116 width=12)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_121] (rows=8116 width=98)
                                        predicate:CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1998-03-09 00:00:00' AND TIMESTAMP'1998-05-08 00:00:00'
                                        TableScan [TS_7] (rows=73049 width=98)
                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                <-Reducer 6 [SIMPLE_EDGE]
                                  SHUFFLE [RS_16]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_102] (rows=466374405 width=167)
                                      Conds:RS_118._col2, _col3=RS_120._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col4","_col7"]
                                    <-Map 5 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_118]
                                        PartitionCols:_col2, _col3
                                        Select Operator [SEL_117] (rows=285115816 width=127)
                                          Output:["_col0","_col1","_col2","_col3","_col4"]
                                          Filter Operator [FIL_116] (rows=285115816 width=127)
                                            predicate:(cs_warehouse_sk is not null and cs_sold_date_sk is not null and cs_item_sk BETWEEN DynamicValue(RS_20_item_i_item_sk_min) AND DynamicValue(RS_20_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_20_item_i_item_sk_bloom_filter)))
                                            TableScan [TS_2] (rows=287989836 width=127)
                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_warehouse_sk","cs_item_sk","cs_order_number","cs_sales_price"]
                                            <-Reducer 12 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_115]
                                                Group By Operator [GBY_114] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_113]
                                                    Group By Operator [GBY_112] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_111] (rows=51333 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_109]
                                    <-Map 9 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_120]
                                        PartitionCols:_col0, _col1
                                        Select Operator [SEL_119] (rows=28798881 width=117)
                                          Output:["_col0","_col1","_col2"]
                                          TableScan [TS_5] (rows=28798881 width=117)
                                            default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_refunded_cash"]

