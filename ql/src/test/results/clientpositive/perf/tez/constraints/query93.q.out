PREHOOK: query: explain
select  ss_customer_sk
            ,sum(act_sales) sumsales
      from (select ss_item_sk
                  ,ss_ticket_number
                  ,ss_customer_sk
                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                            else (ss_quantity*ss_sales_price) end act_sales
            from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
                                                               and sr_ticket_number = ss_ticket_number)
                ,reason
            where sr_reason_sk = r_reason_sk
              and r_reason_desc = 'Did not like the warranty') t
      group by ss_customer_sk
      order by sumsales, ss_customer_sk
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@reason
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  ss_customer_sk
            ,sum(act_sales) sumsales
      from (select ss_item_sk
                  ,ss_ticket_number
                  ,ss_customer_sk
                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                            else (ss_quantity*ss_sales_price) end act_sales
            from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
                                                               and sr_ticket_number = ss_ticket_number)
                ,reason
            where sr_reason_sk = r_reason_sk
              and r_reason_desc = 'Did not like the warranty') t
      group by ss_customer_sk
      order by sumsales, ss_customer_sk
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@reason
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
Reducer 3 <- Map 7 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_76]
        Limit [LIM_75] (rows=100 width=115)
          Number of rows:100
          Select Operator [SEL_74] (rows=1398474 width=115)
            Output:["_col0","_col1"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_73]
              Group By Operator [GBY_72] (rows=1398474 width=115)
                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
              <-Reducer 3 [SIMPLE_EDGE]
                SHUFFLE [RS_17]
                  PartitionCols:_col0
                  Group By Operator [GBY_16] (rows=569016747 width=115)
                    Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                    Select Operator [SEL_14] (rows=569016747 width=118)
                      Output:["_col0","_col1"]
                      Merge Join Operator [MERGEJOIN_63] (rows=569016747 width=118)
                        Conds:RS_11._col0, _col2=RS_71._col0, _col2(Inner),Output:["_col3","_col6","_col8","_col9"]
                      <-Map 7 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_71]
                          PartitionCols:_col0, _col2
                          Select Operator [SEL_70] (rows=575995635 width=122)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            TableScan [TS_6] (rows=575995635 width=122)
                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk","ss_customer_sk","ss_ticket_number","ss_quantity","ss_sales_price"]
                      <-Reducer 2 [SIMPLE_EDGE]
                        SHUFFLE [RS_11]
                          PartitionCols:_col0, _col2
                          Merge Join Operator [MERGEJOIN_62] (rows=55574563 width=11)
                            Conds:RS_66._col1=RS_69._col0(Inner),Output:["_col0","_col2","_col3"]
                          <-Map 1 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_66]
                              PartitionCols:_col1
                              Select Operator [SEL_65] (rows=55574563 width=15)
                                Output:["_col0","_col1","_col2","_col3"]
                                Filter Operator [FIL_64] (rows=55574563 width=15)
                                  predicate:sr_reason_sk is not null
                                  TableScan [TS_0] (rows=57591150 width=15)
                                    default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_reason_sk","sr_ticket_number","sr_return_quantity"]
                          <-Map 6 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_69]
                              PartitionCols:_col0
                              Select Operator [SEL_68] (rows=1 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_67] (rows=1 width=101)
                                  predicate:(r_reason_desc = 'Did not like the warranty')
                                  TableScan [TS_3] (rows=72 width=101)
                                    default@reason,reason,Tbl:COMPLETE,Col:COMPLETE,Output:["r_reason_sk","r_reason_desc"]

