PREHOOK: query: explain
WITH web_v1 as (
select
  ws_item_sk item_sk, d_date,
  sum(sum(ws_sales_price))
      over (partition by ws_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from web_sales
    ,date_dim
where ws_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ws_item_sk is not NULL
group by ws_item_sk, d_date),
store_v1 as (
select
  ss_item_sk item_sk, d_date,
  sum(sum(ss_sales_price))
      over (partition by ss_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from store_sales
    ,date_dim
where ss_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ss_item_sk is not NULL
group by ss_item_sk, d_date)
 select  *
from (select item_sk
     ,d_date
     ,web_sales
     ,store_sales
     ,max(web_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) web_cumulative
     ,max(store_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) store_cumulative
     from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk
                 ,case when web.d_date is not null then web.d_date else store.d_date end d_date
                 ,web.cume_sales web_sales
                 ,store.cume_sales store_sales
           from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk
                                                          and web.d_date = store.d_date)
          )x )y
where web_cumulative > store_cumulative
order by item_sk
        ,d_date
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
WITH web_v1 as (
select
  ws_item_sk item_sk, d_date,
  sum(sum(ws_sales_price))
      over (partition by ws_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from web_sales
    ,date_dim
where ws_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ws_item_sk is not NULL
group by ws_item_sk, d_date),
store_v1 as (
select
  ss_item_sk item_sk, d_date,
  sum(sum(ss_sales_price))
      over (partition by ss_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from store_sales
    ,date_dim
where ss_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ss_item_sk is not NULL
group by ss_item_sk, d_date)
 select  *
from (select item_sk
     ,d_date
     ,web_sales
     ,store_sales
     ,max(web_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) web_cumulative
     ,max(store_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) store_cumulative
     from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk
                 ,case when web.d_date is not null then web.d_date else store.d_date end d_date
                 ,web.cume_sales web_sales
                 ,store.cume_sales store_sales
           from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk
                                                          and web.d_date = store.d_date)
          )x )y
where web_cumulative > store_cumulative
order by item_sk
        ,d_date
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Map 14 <- Reducer 13 (BROADCAST_EDGE)
Reducer 10 <- Map 14 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 12 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_125]
        Limit [LIM_124] (rows=100 width=636)
          Number of rows:100
          Select Operator [SEL_123] (rows=363803676 width=636)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_122]
              Select Operator [SEL_121] (rows=363803676 width=636)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Top N Key Operator [TNK_120] (rows=363803676 width=420)
                  keys:CASE WHEN (_col3 is not null) THEN (_col3) ELSE (_col0) END, CASE WHEN (_col4 is not null) THEN (_col4) ELSE (_col1) END,top n:100
                  Filter Operator [FIL_119] (rows=363803676 width=420)
                    predicate:(max_window_0 > max_window_1)
                    PTF Operator [PTF_118] (rows=1091411029 width=420)
                      Function definitions:[{},{"name:":"windowingtablefunction","order by:":"CASE WHEN (_col4 is not null) THEN (_col4) ELSE (_col1) END ASC NULLS LAST","partition by:":"CASE WHEN (_col3 is not null) THEN (_col3) ELSE (_col0) END"}]
                      Select Operator [SEL_117] (rows=1091411029 width=420)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                      <-Reducer 5 [SIMPLE_EDGE]
                        SHUFFLE [RS_41]
                          PartitionCols:CASE WHEN (_col3 is not null) THEN (_col3) ELSE (_col0) END
                          Merge Join Operator [MERGEJOIN_84] (rows=1091411029 width=420)
                            Conds:RS_105._col0, _col1=RS_116._col0, _col1(Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          <-Reducer 12 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_116]
                              PartitionCols:_col0, _col1
                              Select Operator [SEL_115] (rows=3442937 width=210)
                                Output:["_col0","_col1","_col2"]
                                PTF Operator [PTF_114] (rows=3442937 width=210)
                                  Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 ASC NULLS LAST","partition by:":"_col0"}]
                                  Select Operator [SEL_113] (rows=3442937 width=210)
                                    Output:["_col0","_col1","_col2"]
                                  <-Reducer 11 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_112]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_111] (rows=3442937 width=210)
                                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                      <-Reducer 10 [SIMPLE_EDGE]
                                        SHUFFLE [RS_30]
                                          PartitionCols:_col0, _col1
                                          Group By Operator [GBY_29] (rows=24992810 width=210)
                                            Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)"],keys:_col1, _col4
                                            Merge Join Operator [MERGEJOIN_83] (rows=24992810 width=209)
                                              Conds:RS_110._col0=RS_89._col0(Inner),Output:["_col1","_col2","_col4"]
                                            <-Map 8 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_89]
                                                PartitionCols:_col0
                                                Select Operator [SEL_86] (rows=317 width=98)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_85] (rows=317 width=102)
                                                    predicate:d_month_seq BETWEEN 1212 AND 1223
                                                    TableScan [TS_3] (rows=73049 width=102)
                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_month_seq"]
                                            <-Map 14 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_110]
                                                PartitionCols:_col0
                                                Select Operator [SEL_109] (rows=143966864 width=119)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_108] (rows=143966864 width=119)
                                                    predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_26_date_dim_d_date_sk_min) AND DynamicValue(RS_26_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_26_date_dim_d_date_sk_bloom_filter)))
                                                    TableScan [TS_19] (rows=144002668 width=119)
                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_sales_price"]
                                                    <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_107]
                                                        Group By Operator [GBY_106] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_94]
                                                            Group By Operator [GBY_92] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_90] (rows=317 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_86]
                          <-Reducer 4 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_105]
                              PartitionCols:_col0, _col1
                              Select Operator [SEL_104] (rows=3442937 width=210)
                                Output:["_col0","_col1","_col2"]
                                PTF Operator [PTF_103] (rows=3442937 width=210)
                                  Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 ASC NULLS LAST","partition by:":"_col0"}]
                                  Select Operator [SEL_102] (rows=3442937 width=210)
                                    Output:["_col0","_col1","_col2"]
                                  <-Reducer 3 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_101]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_100] (rows=3442937 width=210)
                                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                      <-Reducer 2 [SIMPLE_EDGE]
                                        SHUFFLE [RS_11]
                                          PartitionCols:_col0, _col1
                                          Group By Operator [GBY_10] (rows=95493908 width=210)
                                            Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)"],keys:_col1, _col4
                                            Merge Join Operator [MERGEJOIN_82] (rows=95493908 width=180)
                                              Conds:RS_99._col0=RS_87._col0(Inner),Output:["_col1","_col2","_col4"]
                                            <-Map 8 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_87]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_86]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_99]
                                                PartitionCols:_col0
                                                Select Operator [SEL_98] (rows=550076554 width=114)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_97] (rows=550076554 width=114)
                                                    predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_7_date_dim_d_date_sk_min) AND DynamicValue(RS_7_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_7_date_dim_d_date_sk_bloom_filter)))
                                                    TableScan [TS_0] (rows=575995635 width=114)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_sales_price"]
                                                    <-Reducer 9 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_96]
                                                        Group By Operator [GBY_95] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_93]
                                                            Group By Operator [GBY_91] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_88] (rows=317 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_86]

