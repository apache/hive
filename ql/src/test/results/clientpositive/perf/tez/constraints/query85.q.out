PREHOOK: query: explain
select  substr(r_reason_desc,1,20)
       ,avg(ws_quantity)
       ,avg(wr_refunded_cash)
       ,avg(wr_fee)
 from web_sales, web_returns, web_page, customer_demographics cd1,
      customer_demographics cd2, customer_address, date_dim, reason 
 where ws_web_page_sk = wp_web_page_sk
   and ws_item_sk = wr_item_sk
   and ws_order_number = wr_order_number
   and ws_sold_date_sk = d_date_sk and d_year = 1998
   and cd1.cd_demo_sk = wr_refunded_cdemo_sk 
   and cd2.cd_demo_sk = wr_returning_cdemo_sk
   and ca_address_sk = wr_refunded_addr_sk
   and r_reason_sk = wr_reason_sk
   and
   (
    (
     cd1.cd_marital_status = 'M'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = '4 yr Degree'
     and 
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 100.00 and 150.00
    )
   or
    (
     cd1.cd_marital_status = 'D'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = 'Primary' 
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 50.00 and 100.00
    )
   or
    (
     cd1.cd_marital_status = 'U'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = 'Advanced Degree'
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 150.00 and 200.00
    )
   )
   and
   (
    (
     ca_country = 'United States'
     and
     ca_state in ('KY', 'GA', 'NM')
     and ws_net_profit between 100 and 200  
    )
    or
    (
     ca_country = 'United States'
     and
     ca_state in ('MT', 'OR', 'IN')
     and ws_net_profit between 150 and 300  
    )
    or
    (
     ca_country = 'United States'
     and
     ca_state in ('WI', 'MO', 'WV')
     and ws_net_profit between 50 and 250  
    )
   )
group by r_reason_desc
order by substr(r_reason_desc,1,20)
        ,avg(ws_quantity)
        ,avg(wr_refunded_cash)
        ,avg(wr_fee)
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@reason
PREHOOK: Input: default@web_page
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  substr(r_reason_desc,1,20)
       ,avg(ws_quantity)
       ,avg(wr_refunded_cash)
       ,avg(wr_fee)
 from web_sales, web_returns, web_page, customer_demographics cd1,
      customer_demographics cd2, customer_address, date_dim, reason 
 where ws_web_page_sk = wp_web_page_sk
   and ws_item_sk = wr_item_sk
   and ws_order_number = wr_order_number
   and ws_sold_date_sk = d_date_sk and d_year = 1998
   and cd1.cd_demo_sk = wr_refunded_cdemo_sk 
   and cd2.cd_demo_sk = wr_returning_cdemo_sk
   and ca_address_sk = wr_refunded_addr_sk
   and r_reason_sk = wr_reason_sk
   and
   (
    (
     cd1.cd_marital_status = 'M'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = '4 yr Degree'
     and 
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 100.00 and 150.00
    )
   or
    (
     cd1.cd_marital_status = 'D'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = 'Primary' 
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 50.00 and 100.00
    )
   or
    (
     cd1.cd_marital_status = 'U'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = 'Advanced Degree'
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 150.00 and 200.00
    )
   )
   and
   (
    (
     ca_country = 'United States'
     and
     ca_state in ('KY', 'GA', 'NM')
     and ws_net_profit between 100 and 200  
    )
    or
    (
     ca_country = 'United States'
     and
     ca_state in ('MT', 'OR', 'IN')
     and ws_net_profit between 150 and 300  
    )
    or
    (
     ca_country = 'United States'
     and
     ca_state in ('WI', 'MO', 'WV')
     and ws_net_profit between 50 and 250  
    )
   )
group by r_reason_desc
order by substr(r_reason_desc,1,20)
        ,avg(ws_quantity)
        ,avg(wr_refunded_cash)
        ,avg(wr_fee)
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@reason
POSTHOOK: Input: default@web_page
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 10 <- Reducer 12 (BROADCAST_EDGE)
Reducer 12 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 3 <- Map 15 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 11 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 13 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 14 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 15 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_209]
        Limit [LIM_208] (rows=7 width=832)
          Number of rows:100
          Select Operator [SEL_207] (rows=7 width=832)
            Output:["_col0","_col1","_col2","_col3"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_206]
              Select Operator [SEL_205] (rows=7 width=832)
                Output:["_col4","_col5","_col6","_col7"]
                Group By Operator [GBY_204] (rows=7 width=353)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","sum(VALUE._col2)","count(VALUE._col3)","sum(VALUE._col4)","count(VALUE._col5)"],keys:KEY._col0
                <-Reducer 7 [SIMPLE_EDGE]
                  SHUFFLE [RS_42]
                    PartitionCols:_col0
                    Group By Operator [GBY_41] (rows=7 width=353)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col11)","count(_col11)","sum(_col7)","count(_col7)","sum(_col6)","count(_col6)"],keys:_col23
                      Select Operator [SEL_40] (rows=16740 width=136)
                        Output:["_col6","_col7","_col11","_col23"]
                        Filter Operator [FIL_39] (rows=16740 width=136)
                          predicate:((_col31 and _col32 and _col15) or (_col33 and _col34 and _col16) or (_col35 and _col36 and _col17))
                          Merge Join Operator [MERGEJOIN_179] (rows=44640 width=136)
                            Conds:RS_36._col1, _col19, _col20=RS_197._col0, _col1, _col2(Inner),Output:["_col6","_col7","_col11","_col15","_col16","_col17","_col23","_col31","_col32","_col33","_col34","_col35","_col36"]
                          <-Map 15 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_197]
                              PartitionCols:_col0, _col1, _col2
                              Select Operator [SEL_195] (rows=265971 width=207)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                Filter Operator [FIL_194] (rows=265971 width=183)
                                  predicate:((cd_education_status) IN ('4 yr Degree', 'Primary', 'Advanced Degree') and (cd_marital_status) IN ('M', 'D', 'U'))
                                  TableScan [TS_17] (rows=1861800 width=183)
                                    default@customer_demographics,cd1,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status","cd_education_status"]
                          <-Reducer 6 [SIMPLE_EDGE]
                            SHUFFLE [RS_36]
                              PartitionCols:_col1, _col19, _col20
                              Filter Operator [FIL_35] (rows=44640 width=315)
                                predicate:((_col25 and _col12) or (_col26 and _col13) or (_col27 and _col14))
                                Merge Join Operator [MERGEJOIN_178] (rows=59520 width=315)
                                  Conds:RS_32._col2=RS_203._col0(Inner),Output:["_col1","_col6","_col7","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col19","_col20","_col23","_col25","_col26","_col27"]
                                <-Map 14 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_203]
                                    PartitionCols:_col0
                                    Select Operator [SEL_202] (rows=3529412 width=16)
                                      Output:["_col0","_col1","_col2","_col3"]
                                      Filter Operator [FIL_201] (rows=3529412 width=187)
                                        predicate:((ca_country = 'United States') and (ca_state) IN ('KY', 'GA', 'NM', 'MT', 'OR', 'IN', 'WI', 'MO', 'WV'))
                                        TableScan [TS_14] (rows=40000000 width=187)
                                          default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state","ca_country"]
                                <-Reducer 5 [SIMPLE_EDGE]
                                  SHUFFLE [RS_32]
                                    PartitionCols:_col2
                                    Merge Join Operator [MERGEJOIN_177] (rows=674551 width=350)
                                      Conds:RS_29._col4=RS_200._col0(Inner),Output:["_col1","_col2","_col6","_col7","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col19","_col20","_col23"]
                                    <-Map 13 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_200]
                                        PartitionCols:_col0
                                        Select Operator [SEL_199] (rows=72 width=101)
                                          Output:["_col0","_col1"]
                                          TableScan [TS_12] (rows=72 width=101)
                                            default@reason,reason,Tbl:COMPLETE,Col:COMPLETE,Output:["r_reason_sk","r_reason_desc"]
                                    <-Reducer 4 [SIMPLE_EDGE]
                                      SHUFFLE [RS_29]
                                        PartitionCols:_col4
                                        Merge Join Operator [MERGEJOIN_176] (rows=674551 width=254)
                                          Conds:RS_26._col8=RS_185._col0(Inner),Output:["_col1","_col2","_col4","_col6","_col7","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col19","_col20"]
                                        <-Map 11 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_185]
                                            PartitionCols:_col0
                                            Select Operator [SEL_184] (rows=652 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_183] (rows=652 width=8)
                                                predicate:(d_year = 1998)
                                                TableScan [TS_9] (rows=73049 width=8)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                        <-Reducer 3 [SIMPLE_EDGE]
                                          SHUFFLE [RS_26]
                                            PartitionCols:_col8
                                            Merge Join Operator [MERGEJOIN_175] (rows=1889180 width=379)
                                              Conds:RS_23._col3=RS_198._col0(Inner),Output:["_col1","_col2","_col4","_col6","_col7","_col8","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col19","_col20"]
                                            <-Map 15 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_198]
                                                PartitionCols:_col0
                                                Select Operator [SEL_196] (rows=265971 width=183)
                                                  Output:["_col0","_col1","_col2"]
                                                   Please refer to the previous Filter Operator [FIL_194]
                                            <-Reducer 2 [SIMPLE_EDGE]
                                              SHUFFLE [RS_23]
                                                PartitionCols:_col3
                                                Merge Join Operator [MERGEJOIN_174] (rows=13039884 width=262)
                                                  Conds:RS_182._col0, _col5=RS_193._col1, _col2(Inner),Output:["_col1","_col2","_col3","_col4","_col6","_col7","_col8","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                                                <-Map 1 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_182]
                                                    PartitionCols:_col0, _col5
                                                    Select Operator [SEL_181] (rows=11975292 width=237)
                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                      Filter Operator [FIL_180] (rows=11975292 width=237)
                                                        predicate:(wr_reason_sk is not null and wr_refunded_addr_sk is not null and wr_refunded_cdemo_sk is not null and wr_returning_cdemo_sk is not null)
                                                        TableScan [TS_0] (rows=14398467 width=237)
                                                          default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_item_sk","wr_refunded_cdemo_sk","wr_refunded_addr_sk","wr_returning_cdemo_sk","wr_reason_sk","wr_order_number","wr_fee","wr_refunded_cash"]
                                                <-Map 10 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_193]
                                                    PartitionCols:_col1, _col2
                                                    Select Operator [SEL_192] (rows=15992347 width=39)
                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
                                                      Filter Operator [FIL_191] (rows=15992347 width=243)
                                                        predicate:((ws_net_profit BETWEEN 100 AND 200 or ws_net_profit BETWEEN 150 AND 300 or ws_net_profit BETWEEN 50 AND 250) and (ws_sales_price BETWEEN 100 AND 150 or ws_sales_price BETWEEN 50 AND 100 or ws_sales_price BETWEEN 150 AND 200) and (ws_sold_date_sk BETWEEN DynamicValue(RS_27_date_dim_d_date_sk_min) AND DynamicValue(RS_27_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_27_date_dim_d_date_sk_bloom_filter))) and ws_sold_date_sk is not null and ws_web_page_sk is not null)
                                                        TableScan [TS_3] (rows=144002668 width=243)
                                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_web_page_sk","ws_order_number","ws_quantity","ws_sales_price","ws_net_profit"]
                                                        <-Reducer 12 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_190]
                                                            Group By Operator [GBY_189] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_188]
                                                                Group By Operator [GBY_187] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_186] (rows=652 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_184]

