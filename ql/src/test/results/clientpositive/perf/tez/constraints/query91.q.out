PREHOOK: query: explain
select  
        cc_call_center_id Call_Center,
        cc_name Call_Center_Name,
        cc_manager Manager,
        sum(cr_net_loss) Returns_Loss
from
        call_center,
        catalog_returns,
        date_dim,
        customer,
        customer_address,
        customer_demographics,
        household_demographics
where
        cr_call_center_sk       = cc_call_center_sk
and     cr_returned_date_sk     = d_date_sk
and     cr_returning_customer_sk= c_customer_sk
and     cd_demo_sk              = c_current_cdemo_sk
and     hd_demo_sk              = c_current_hdemo_sk
and     ca_address_sk           = c_current_addr_sk
and     d_year                  = 1999 
and     d_moy                   = 11
and     ( (cd_marital_status       = 'M' and cd_education_status     = 'Unknown')
        or(cd_marital_status       = 'W' and cd_education_status     = 'Advanced Degree'))
and     hd_buy_potential like '0-500%'
and     ca_gmt_offset           = -7
group by cc_call_center_id,cc_name,cc_manager,cd_marital_status,cd_education_status
order by sum(cr_net_loss) desc
PREHOOK: type: QUERY
PREHOOK: Input: default@call_center
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
        cc_call_center_id Call_Center,
        cc_name Call_Center_Name,
        cc_manager Manager,
        sum(cr_net_loss) Returns_Loss
from
        call_center,
        catalog_returns,
        date_dim,
        customer,
        customer_address,
        customer_demographics,
        household_demographics
where
        cr_call_center_sk       = cc_call_center_sk
and     cr_returned_date_sk     = d_date_sk
and     cr_returning_customer_sk= c_customer_sk
and     cd_demo_sk              = c_current_cdemo_sk
and     hd_demo_sk              = c_current_hdemo_sk
and     ca_address_sk           = c_current_addr_sk
and     d_year                  = 1999 
and     d_moy                   = 11
and     ( (cd_marital_status       = 'M' and cd_education_status     = 'Unknown')
        or(cd_marital_status       = 'W' and cd_education_status     = 'Advanced Degree'))
and     hd_buy_potential like '0-500%'
and     ca_gmt_offset           = -7
group by cc_call_center_id,cc_name,cc_manager,cd_marital_status,cd_education_status
order by sum(cr_net_loss) desc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@call_center
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 3 <- Map 10 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 12 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 14 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 15 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_170]
        Select Operator [SEL_169] (rows=40890 width=406)
          Output:["_col0","_col1","_col2","_col3"]
        <-Reducer 7 [SIMPLE_EDGE] vectorized
          SHUFFLE [RS_168]
            Select Operator [SEL_167] (rows=40890 width=518)
              Output:["_col0","_col1","_col2","_col4"]
              Group By Operator [GBY_166] (rows=40890 width=585)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
              <-Reducer 6 [SIMPLE_EDGE]
                SHUFFLE [RS_41]
                  PartitionCols:_col0, _col1, _col2, _col3, _col4
                  Group By Operator [GBY_40] (rows=81780 width=585)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col11)"],keys:_col5, _col6, _col15, _col16, _col17
                    Merge Join Operator [MERGEJOIN_145] (rows=657590 width=490)
                      Conds:RS_36._col10=RS_165._col0(Inner),Output:["_col5","_col6","_col11","_col15","_col16","_col17"]
                    <-Map 15 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_165]
                        PartitionCols:_col0
                        Select Operator [SEL_164] (rows=60 width=298)
                          Output:["_col0","_col1","_col2","_col3"]
                          TableScan [TS_22] (rows=60 width=298)
                            default@call_center,call_center,Tbl:COMPLETE,Col:COMPLETE,Output:["cc_call_center_sk","cc_call_center_id","cc_name","cc_manager"]
                    <-Reducer 5 [SIMPLE_EDGE]
                      SHUFFLE [RS_36]
                        PartitionCols:_col10
                        Merge Join Operator [MERGEJOIN_144] (rows=657590 width=197)
                          Conds:RS_33._col2=RS_163._col0(Inner),Output:["_col5","_col6","_col10","_col11"]
                        <-Map 14 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_163]
                            PartitionCols:_col0
                            Select Operator [SEL_162] (rows=3600 width=4)
                              Output:["_col0"]
                              Filter Operator [FIL_161] (rows=3600 width=96)
                                predicate:(hd_buy_potential like '0-500%')
                                TableScan [TS_19] (rows=7200 width=96)
                                  default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_buy_potential"]
                        <-Reducer 4 [SIMPLE_EDGE]
                          SHUFFLE [RS_33]
                            PartitionCols:_col2
                            Merge Join Operator [MERGEJOIN_143] (rows=657590 width=199)
                              Conds:RS_30._col0=RS_31._col1(Inner),Output:["_col2","_col5","_col6","_col10","_col11"]
                            <-Reducer 12 [SIMPLE_EDGE]
                              SHUFFLE [RS_31]
                                PartitionCols:_col1
                                Merge Join Operator [MERGEJOIN_142] (rows=657590 width=19)
                                  Conds:RS_157._col0=RS_160._col0(Inner),Output:["_col1","_col2","_col3"]
                                <-Map 11 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_157]
                                    PartitionCols:_col0
                                    Select Operator [SEL_156] (rows=27658583 width=121)
                                      Output:["_col0","_col1","_col2","_col3"]
                                      Filter Operator [FIL_155] (rows=27658583 width=121)
                                        predicate:(cr_call_center_sk is not null and cr_returning_customer_sk is not null and cr_returned_date_sk is not null)
                                        TableScan [TS_9] (rows=28798881 width=121)
                                          default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_returned_date_sk","cr_returning_customer_sk","cr_call_center_sk","cr_net_loss"]
                                <-Map 13 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_160]
                                    PartitionCols:_col0
                                    Select Operator [SEL_159] (rows=50 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_158] (rows=50 width=12)
                                        predicate:((d_year = 1999) and (d_moy = 11))
                                        TableScan [TS_12] (rows=73049 width=12)
                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                            <-Reducer 3 [SIMPLE_EDGE]
                              SHUFFLE [RS_30]
                                PartitionCols:_col0
                                Merge Join Operator [MERGEJOIN_141] (rows=228944 width=183)
                                  Conds:RS_27._col3=RS_154._col0(Inner),Output:["_col0","_col2","_col5","_col6"]
                                <-Map 10 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_154]
                                    PartitionCols:_col0
                                    Select Operator [SEL_153] (rows=8000000 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_152] (rows=8000000 width=112)
                                        predicate:(ca_gmt_offset = -7)
                                        TableScan [TS_6] (rows=40000000 width=112)
                                          default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_gmt_offset"]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_27]
                                    PartitionCols:_col3
                                    Merge Join Operator [MERGEJOIN_140] (rows=1144719 width=187)
                                      Conds:RS_148._col1=RS_151._col0(Inner),Output:["_col0","_col2","_col3","_col5","_col6"]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_148]
                                        PartitionCols:_col1
                                        Select Operator [SEL_147] (rows=74500295 width=15)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Filter Operator [FIL_146] (rows=74500295 width=15)
                                            predicate:(c_current_hdemo_sk is not null and c_current_cdemo_sk is not null and c_current_addr_sk is not null)
                                            TableScan [TS_0] (rows=80000000 width=15)
                                              default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk"]
                                    <-Map 9 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_151]
                                        PartitionCols:_col0
                                        Select Operator [SEL_150] (rows=26269 width=183)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_149] (rows=26269 width=183)
                                            predicate:((cd_marital_status) IN ('M', 'W') and (cd_education_status) IN ('Unknown', 'Advanced Degree') and (struct(cd_marital_status,cd_education_status)) IN (const struct('M','Unknown'), const struct('W','Advanced Degree')))
                                            TableScan [TS_3] (rows=1861800 width=183)
                                              default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status","cd_education_status"]

