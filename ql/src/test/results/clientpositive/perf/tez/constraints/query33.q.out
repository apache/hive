PREHOOK: query: explain
with ss as (
 select
          i_manufact_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 3
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_manufact_id),
 cs as (
 select
          i_manufact_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id               in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 3
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_manufact_id),
 ws as (
 select
          i_manufact_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id               in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 3
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6
 group by i_manufact_id)
  select  i_manufact_id ,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_manufact_id
 order by total_sales
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as (
 select
          i_manufact_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 3
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_manufact_id),
 cs as (
 select
          i_manufact_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id               in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 3
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_manufact_id),
 ws as (
 select
          i_manufact_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id               in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 3
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6
 group by i_manufact_id)
  select  i_manufact_id ,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_manufact_id
 order by total_sales
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 17 <- Reducer 21 (BROADCAST_EDGE)
Map 29 <- Reducer 24 (BROADCAST_EDGE)
Map 30 <- Reducer 27 (BROADCAST_EDGE)
Reducer 10 <- Reducer 23 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 12 <- Map 1 (SIMPLE_EDGE)
Reducer 13 <- Map 1 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 16 <- Map 1 (SIMPLE_EDGE)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE)
Reducer 19 <- Map 28 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 21 <- Map 20 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Map 20 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 23 <- Map 28 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Map 20 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 20 (SIMPLE_EDGE), Map 30 (SIMPLE_EDGE)
Reducer 26 <- Map 28 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Map 20 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 19 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE)
Reducer 9 <- Map 1 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_373]
        Limit [LIM_372] (rows=59 width=115)
          Number of rows:100
          Select Operator [SEL_371] (rows=59 width=115)
            Output:["_col0","_col1"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_370]
              Top N Key Operator [TNK_369] (rows=59 width=115)
                keys:_col1,top n:100
                Group By Operator [GBY_368] (rows=59 width=115)
                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                <-Union 5 [SIMPLE_EDGE]
                  <-Reducer 11 [CONTAINS] vectorized
                    Reduce Output Operator [RS_383]
                      PartitionCols:_col0
                      Group By Operator [GBY_382] (rows=59 width=115)
                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                        Group By Operator [GBY_381] (rows=35 width=115)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 10 [SIMPLE_EDGE]
                          SHUFFLE [RS_71]
                            PartitionCols:_col0
                            Group By Operator [GBY_70] (rows=35 width=115)
                              Output:["_col0","_col1"],aggregations:["sum(_col7)"],keys:_col1
                              Merge Join Operator [MERGEJOIN_304] (rows=22352 width=3)
                                Conds:RS_66._col0=RS_67._col3(Inner),Output:["_col1","_col7"]
                              <-Reducer 23 [SIMPLE_EDGE]
                                SHUFFLE [RS_67]
                                  PartitionCols:_col3
                                  Select Operator [SEL_62] (rows=1550375 width=13)
                                    Output:["_col3","_col4"]
                                    Merge Join Operator [MERGEJOIN_299] (rows=1550375 width=13)
                                      Conds:RS_59._col1=RS_363._col0(Inner),Output:["_col2","_col3"]
                                    <-Map 28 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_363]
                                        PartitionCols:_col0
                                        Select Operator [SEL_361] (rows=8000000 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_360] (rows=8000000 width=112)
                                            predicate:(ca_gmt_offset = -6)
                                            TableScan [TS_16] (rows=40000000 width=112)
                                              default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_gmt_offset"]
                                    <-Reducer 22 [SIMPLE_EDGE]
                                      SHUFFLE [RS_59]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_298] (rows=7751872 width=98)
                                          Conds:RS_380._col0=RS_345._col0(Inner),Output:["_col1","_col2","_col3"]
                                        <-Map 20 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_345]
                                            PartitionCols:_col0
                                            Select Operator [SEL_342] (rows=50 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_341] (rows=50 width=12)
                                                predicate:((d_year = 1999) and (d_moy = 3))
                                                TableScan [TS_13] (rows=73049 width=12)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                        <-Map 29 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_380]
                                            PartitionCols:_col0
                                            Select Operator [SEL_379] (rows=285117733 width=123)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_378] (rows=285117733 width=123)
                                                predicate:(cs_sold_date_sk is not null and cs_bill_addr_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_57_date_dim_d_date_sk_min) AND DynamicValue(RS_57_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_57_date_dim_d_date_sk_bloom_filter)))
                                                TableScan [TS_47] (rows=287989836 width=123)
                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_addr_sk","cs_item_sk","cs_ext_sales_price"]
                                                <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_377]
                                                    Group By Operator [GBY_376] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_353]
                                                        Group By Operator [GBY_350] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_346] (rows=50 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_342]
                              <-Reducer 9 [SIMPLE_EDGE]
                                SHUFFLE [RS_66]
                                  PartitionCols:_col0
                                  Merge Join Operator [MERGEJOIN_297] (rows=461514 width=7)
                                    Conds:RS_332._col1=RS_375._col0(Inner),Output:["_col0","_col1"]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_332]
                                      PartitionCols:_col1
                                      Select Operator [SEL_326] (rows=460848 width=7)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_320] (rows=460848 width=7)
                                          predicate:i_manufact_id is not null
                                          TableScan [TS_0] (rows=462000 width=7)
                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_manufact_id","i_category"]
                                  <-Reducer 12 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_375]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_374] (rows=692 width=3)
                                        Output:["_col0"],keys:KEY._col0
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_337]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_333] (rows=692 width=3)
                                            Output:["_col0"],keys:i_manufact_id
                                            Select Operator [SEL_327] (rows=46085 width=93)
                                              Output:["i_manufact_id"]
                                              Filter Operator [FIL_321] (rows=46085 width=93)
                                                predicate:((i_category = 'Books') and i_manufact_id is not null)
                                                 Please refer to the previous TableScan [TS_0]
                  <-Reducer 15 [CONTAINS] vectorized
                    Reduce Output Operator [RS_393]
                      PartitionCols:_col0
                      Group By Operator [GBY_392] (rows=59 width=115)
                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                        Group By Operator [GBY_391] (rows=19 width=115)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 14 [SIMPLE_EDGE]
                          SHUFFLE [RS_109]
                            PartitionCols:_col0
                            Group By Operator [GBY_108] (rows=19 width=115)
                              Output:["_col0","_col1"],aggregations:["sum(_col7)"],keys:_col1
                              Merge Join Operator [MERGEJOIN_305] (rows=11364 width=3)
                                Conds:RS_104._col0=RS_105._col2(Inner),Output:["_col1","_col7"]
                              <-Reducer 13 [SIMPLE_EDGE]
                                SHUFFLE [RS_104]
                                  PartitionCols:_col0
                                  Merge Join Operator [MERGEJOIN_300] (rows=461514 width=7)
                                    Conds:RS_334._col1=RS_385._col0(Inner),Output:["_col0","_col1"]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_334]
                                      PartitionCols:_col1
                                      Select Operator [SEL_328] (rows=460848 width=7)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_322] (rows=460848 width=7)
                                          predicate:i_manufact_id is not null
                                           Please refer to the previous TableScan [TS_0]
                                  <-Reducer 16 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_385]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_384] (rows=692 width=3)
                                        Output:["_col0"],keys:KEY._col0
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_338]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_335] (rows=692 width=3)
                                            Output:["_col0"],keys:i_manufact_id
                                            Select Operator [SEL_329] (rows=46085 width=93)
                                              Output:["i_manufact_id"]
                                              Filter Operator [FIL_323] (rows=46085 width=93)
                                                predicate:((i_category = 'Books') and i_manufact_id is not null)
                                                 Please refer to the previous TableScan [TS_0]
                              <-Reducer 26 [SIMPLE_EDGE]
                                SHUFFLE [RS_105]
                                  PartitionCols:_col2
                                  Select Operator [SEL_100] (rows=788222 width=110)
                                    Output:["_col2","_col4"]
                                    Merge Join Operator [MERGEJOIN_302] (rows=788222 width=110)
                                      Conds:RS_97._col2=RS_364._col0(Inner),Output:["_col1","_col3"]
                                    <-Map 28 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_364]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_361]
                                    <-Reducer 25 [SIMPLE_EDGE]
                                      SHUFFLE [RS_97]
                                        PartitionCols:_col2
                                        Merge Join Operator [MERGEJOIN_301] (rows=3941109 width=118)
                                          Conds:RS_390._col0=RS_347._col0(Inner),Output:["_col1","_col2","_col3"]
                                        <-Map 20 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_347]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_342]
                                        <-Map 30 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_390]
                                            PartitionCols:_col0
                                            Select Operator [SEL_389] (rows=143931246 width=123)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_388] (rows=143931246 width=123)
                                                predicate:(ws_sold_date_sk is not null and ws_bill_addr_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_95_date_dim_d_date_sk_min) AND DynamicValue(RS_95_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_95_date_dim_d_date_sk_bloom_filter)))
                                                TableScan [TS_85] (rows=144002668 width=123)
                                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                                <-Reducer 27 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_387]
                                                    Group By Operator [GBY_386] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_354]
                                                        Group By Operator [GBY_351] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_348] (rows=50 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_342]
                  <-Reducer 4 [CONTAINS] vectorized
                    Reduce Output Operator [RS_367]
                      PartitionCols:_col0
                      Group By Operator [GBY_366] (rows=59 width=115)
                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                        Group By Operator [GBY_365] (rows=64 width=115)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 3 [SIMPLE_EDGE]
                          SHUFFLE [RS_34]
                            PartitionCols:_col0
                            Group By Operator [GBY_33] (rows=64 width=115)
                              Output:["_col0","_col1"],aggregations:["sum(_col7)"],keys:_col1
                              Merge Join Operator [MERGEJOIN_303] (rows=41476 width=3)
                                Conds:RS_29._col0=RS_30._col2(Inner),Output:["_col1","_col7"]
                              <-Reducer 19 [SIMPLE_EDGE]
                                SHUFFLE [RS_30]
                                  PartitionCols:_col2
                                  Select Operator [SEL_25] (rows=2876890 width=4)
                                    Output:["_col2","_col4"]
                                    Merge Join Operator [MERGEJOIN_296] (rows=2876890 width=4)
                                      Conds:RS_22._col2=RS_362._col0(Inner),Output:["_col1","_col3"]
                                    <-Map 28 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_362]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_361]
                                    <-Reducer 18 [SIMPLE_EDGE]
                                      SHUFFLE [RS_22]
                                        PartitionCols:_col2
                                        Merge Join Operator [MERGEJOIN_295] (rows=14384447 width=4)
                                          Conds:RS_359._col0=RS_343._col0(Inner),Output:["_col1","_col2","_col3"]
                                        <-Map 20 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_343]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_342]
                                        <-Map 17 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_359]
                                            PartitionCols:_col0
                                            Select Operator [SEL_358] (rows=525327191 width=118)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_357] (rows=525327191 width=118)
                                                predicate:(ss_sold_date_sk is not null and ss_addr_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_20_date_dim_d_date_sk_min) AND DynamicValue(RS_20_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_20_date_dim_d_date_sk_bloom_filter)))
                                                TableScan [TS_10] (rows=575995635 width=118)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_addr_sk","ss_ext_sales_price"]
                                                <-Reducer 21 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_356]
                                                    Group By Operator [GBY_355] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_352]
                                                        Group By Operator [GBY_349] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_344] (rows=50 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_342]
                              <-Reducer 2 [SIMPLE_EDGE]
                                SHUFFLE [RS_29]
                                  PartitionCols:_col0
                                  Merge Join Operator [MERGEJOIN_294] (rows=461514 width=7)
                                    Conds:RS_330._col1=RS_340._col0(Inner),Output:["_col0","_col1"]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_330]
                                      PartitionCols:_col1
                                      Select Operator [SEL_324] (rows=460848 width=7)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_318] (rows=460848 width=7)
                                          predicate:i_manufact_id is not null
                                           Please refer to the previous TableScan [TS_0]
                                  <-Reducer 8 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_340]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_339] (rows=692 width=3)
                                        Output:["_col0"],keys:KEY._col0
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_336]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_331] (rows=692 width=3)
                                            Output:["_col0"],keys:i_manufact_id
                                            Select Operator [SEL_325] (rows=46085 width=93)
                                              Output:["i_manufact_id"]
                                              Filter Operator [FIL_319] (rows=46085 width=93)
                                                predicate:((i_category = 'Books') and i_manufact_id is not null)
                                                 Please refer to the previous TableScan [TS_0]

