PREHOOK: query: explain
with ss as (
 select
          i_manufact_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 3
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_manufact_id),
 cs as (
 select
          i_manufact_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id               in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 3
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_manufact_id),
 ws as (
 select
          i_manufact_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id               in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 3
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6
 group by i_manufact_id)
  select  i_manufact_id ,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_manufact_id
 order by total_sales
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as (
 select
          i_manufact_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 3
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_manufact_id),
 cs as (
 select
          i_manufact_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id               in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 3
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_manufact_id),
 ws as (
 select
          i_manufact_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id               in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 3
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6
 group by i_manufact_id)
  select  i_manufact_id ,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_manufact_id
 order by total_sales
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE)
Map 26 <- Reducer 17 (BROADCAST_EDGE)
Map 27 <- Reducer 23 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 10 (SIMPLE_EDGE), Map 26 (SIMPLE_EDGE)
Reducer 13 <- Map 24 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 25 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 25 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 17 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 10 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE)
Reducer 19 <- Map 24 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 20 <- Map 25 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Map 25 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 23 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 24 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 25 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 25 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_361]
        Limit [LIM_360] (rows=100 width=116)
          Number of rows:100
          Select Operator [SEL_359] (rows=692 width=115)
            Output:["_col0","_col1"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_358]
              Top N Key Operator [TNK_357] (rows=692 width=116)
                keys:_col1,top n:100
                Group By Operator [GBY_356] (rows=692 width=116)
                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                <-Union 7 [SIMPLE_EDGE]
                  <-Reducer 16 [CONTAINS] vectorized
                    Reduce Output Operator [RS_369]
                      PartitionCols:_col0
                      Group By Operator [GBY_368] (rows=692 width=116)
                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                        Group By Operator [GBY_367] (rows=692 width=116)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 15 [SIMPLE_EDGE]
                          SHUFFLE [RS_67]
                            PartitionCols:_col0
                            Group By Operator [GBY_66] (rows=692 width=116)
                              Output:["_col0","_col1"],aggregations:["sum(_col3)"],keys:_col10
                              Merge Join Operator [MERGEJOIN_304] (rows=1546510 width=12)
                                Conds:RS_62._col10=RS_351._col0(Left Semi),Output:["_col3","_col10"]
                              <-Map 25 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_351]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_349] (rows=692 width=3)
                                    Output:["_col0"],keys:_col0
                                    Select Operator [SEL_345] (rows=46085 width=3)
                                      Output:["_col0"]
                                      Filter Operator [FIL_343] (rows=46085 width=93)
                                        predicate:((i_category = 'Books') and i_manufact_id is not null)
                                        TableScan [TS_9] (rows=462000 width=7)
                                          default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_manufact_id","i_category"]
                              <-Reducer 14 [SIMPLE_EDGE]
                                SHUFFLE [RS_62]
                                  PartitionCols:_col10
                                  Merge Join Operator [MERGEJOIN_299] (rows=1546510 width=12)
                                    Conds:RS_53._col2=RS_347._col0(Inner),Output:["_col3","_col10"]
                                  <-Map 25 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_347]
                                      PartitionCols:_col0
                                      Select Operator [SEL_344] (rows=460848 width=7)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_342] (rows=460848 width=7)
                                          predicate:i_manufact_id is not null
                                           Please refer to the previous TableScan [TS_9]
                                  <-Reducer 13 [SIMPLE_EDGE]
                                    SHUFFLE [RS_53]
                                      PartitionCols:_col2
                                      Merge Join Operator [MERGEJOIN_298] (rows=1550375 width=13)
                                        Conds:RS_50._col1=RS_340._col0(Inner),Output:["_col2","_col3"]
                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_340]
                                          PartitionCols:_col0
                                          Select Operator [SEL_338] (rows=8000000 width=116)
                                            Output:["_col0"]
                                            Filter Operator [FIL_337] (rows=8000000 width=112)
                                              predicate:(ca_gmt_offset = -6)
                                              TableScan [TS_6] (rows=40000000 width=112)
                                                default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_gmt_offset"]
                                      <-Reducer 12 [SIMPLE_EDGE]
                                        SHUFFLE [RS_50]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_297] (rows=7751872 width=98)
                                            Conds:RS_366._col0=RS_322._col0(Inner),Output:["_col1","_col2","_col3"]
                                          <-Map 10 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_322]
                                              PartitionCols:_col0
                                              Select Operator [SEL_319] (rows=50 width=12)
                                                Output:["_col0"]
                                                Filter Operator [FIL_318] (rows=50 width=12)
                                                  predicate:((d_year = 1999) and (d_moy = 3))
                                                  TableScan [TS_3] (rows=73049 width=12)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                          <-Map 26 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_366]
                                              PartitionCols:_col0
                                              Select Operator [SEL_365] (rows=285117733 width=123)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_364] (rows=285117733 width=123)
                                                  predicate:(cs_sold_date_sk is not null and cs_bill_addr_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_48_date_dim_d_date_sk_min) AND DynamicValue(RS_48_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_48_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_35] (rows=287989836 width=123)
                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_addr_sk","cs_item_sk","cs_ext_sales_price"]
                                                  <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_363]
                                                      Group By Operator [GBY_362] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_330]
                                                          Group By Operator [GBY_327] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_323] (rows=50 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_319]
                  <-Reducer 22 [CONTAINS] vectorized
                    Reduce Output Operator [RS_377]
                      PartitionCols:_col0
                      Group By Operator [GBY_376] (rows=692 width=116)
                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                        Group By Operator [GBY_375] (rows=692 width=116)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 21 [SIMPLE_EDGE]
                          SHUFFLE [RS_103]
                            PartitionCols:_col0
                            Group By Operator [GBY_102] (rows=692 width=116)
                              Output:["_col0","_col1"],aggregations:["sum(_col3)"],keys:_col10
                              Merge Join Operator [MERGEJOIN_305] (rows=786257 width=110)
                                Conds:RS_98._col10=RS_352._col0(Left Semi),Output:["_col3","_col10"]
                              <-Map 25 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_352]
                                  PartitionCols:_col0
                                   Please refer to the previous Group By Operator [GBY_349]
                              <-Reducer 20 [SIMPLE_EDGE]
                                SHUFFLE [RS_98]
                                  PartitionCols:_col10
                                  Merge Join Operator [MERGEJOIN_302] (rows=786257 width=110)
                                    Conds:RS_89._col1=RS_348._col0(Inner),Output:["_col3","_col10"]
                                  <-Map 25 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_348]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_344]
                                  <-Reducer 19 [SIMPLE_EDGE]
                                    SHUFFLE [RS_89]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_301] (rows=788222 width=110)
                                        Conds:RS_86._col2=RS_341._col0(Inner),Output:["_col1","_col3"]
                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_341]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_338]
                                      <-Reducer 18 [SIMPLE_EDGE]
                                        SHUFFLE [RS_86]
                                          PartitionCols:_col2
                                          Merge Join Operator [MERGEJOIN_300] (rows=3941109 width=118)
                                            Conds:RS_374._col0=RS_324._col0(Inner),Output:["_col1","_col2","_col3"]
                                          <-Map 10 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_324]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_319]
                                          <-Map 27 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_374]
                                              PartitionCols:_col0
                                              Select Operator [SEL_373] (rows=143931246 width=123)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_372] (rows=143931246 width=123)
                                                  predicate:(ws_sold_date_sk is not null and ws_bill_addr_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_84_date_dim_d_date_sk_min) AND DynamicValue(RS_84_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_84_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_71] (rows=144002668 width=123)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                                  <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_371]
                                                      Group By Operator [GBY_370] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_331]
                                                          Group By Operator [GBY_328] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_325] (rows=50 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_319]
                  <-Reducer 6 [CONTAINS] vectorized
                    Reduce Output Operator [RS_355]
                      PartitionCols:_col0
                      Group By Operator [GBY_354] (rows=692 width=116)
                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                        Group By Operator [GBY_353] (rows=691 width=116)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 5 [SIMPLE_EDGE]
                          SHUFFLE [RS_32]
                            PartitionCols:_col0
                            Group By Operator [GBY_31] (rows=692 width=116)
                              Output:["_col0","_col1"],aggregations:["sum(_col3)"],keys:_col10
                              Merge Join Operator [MERGEJOIN_303] (rows=2869717 width=3)
                                Conds:RS_27._col10=RS_350._col0(Left Semi),Output:["_col3","_col10"]
                              <-Map 25 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_350]
                                  PartitionCols:_col0
                                   Please refer to the previous Group By Operator [GBY_349]
                              <-Reducer 4 [SIMPLE_EDGE]
                                SHUFFLE [RS_27]
                                  PartitionCols:_col10
                                  Merge Join Operator [MERGEJOIN_296] (rows=2869717 width=3)
                                    Conds:RS_18._col1=RS_346._col0(Inner),Output:["_col3","_col10"]
                                  <-Map 25 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_346]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_344]
                                  <-Reducer 3 [SIMPLE_EDGE]
                                    SHUFFLE [RS_18]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_295] (rows=2876890 width=4)
                                        Conds:RS_15._col2=RS_339._col0(Inner),Output:["_col1","_col3"]
                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_339]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_338]
                                      <-Reducer 2 [SIMPLE_EDGE]
                                        SHUFFLE [RS_15]
                                          PartitionCols:_col2
                                          Merge Join Operator [MERGEJOIN_294] (rows=14384447 width=4)
                                            Conds:RS_336._col0=RS_320._col0(Inner),Output:["_col1","_col2","_col3"]
                                          <-Map 10 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_320]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_319]
                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_336]
                                              PartitionCols:_col0
                                              Select Operator [SEL_335] (rows=525327191 width=118)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_334] (rows=525327191 width=118)
                                                  predicate:(ss_sold_date_sk is not null and ss_addr_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_13_date_dim_d_date_sk_min) AND DynamicValue(RS_13_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_13_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_0] (rows=575995635 width=118)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_addr_sk","ss_ext_sales_price"]
                                                  <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_333]
                                                      Group By Operator [GBY_332] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_329]
                                                          Group By Operator [GBY_326] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_321] (rows=50 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_319]

