PREHOOK: query: explain
select  
  cd_gender,
  cd_marital_status,
  cd_education_status,
  count(*) cnt1,
  cd_purchase_estimate,
  count(*) cnt2,
  cd_credit_rating,
  count(*) cnt3
 from
  customer c,customer_address ca,customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  ca_state in ('CO','IL','MN') and
  cd_demo_sk = c.c_current_cdemo_sk and 
  exists (select *
          from store_sales,date_dim
          where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 1999 and
                d_moy between 1 and 1+2) and
   (not exists (select *
            from web_sales,date_dim
            where c.c_customer_sk = ws_bill_customer_sk and
                  ws_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_moy between 1 and 1+2) and
    not exists (select * 
            from catalog_sales,date_dim
            where c.c_customer_sk = cs_ship_customer_sk and
                  cs_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_moy between 1 and 1+2))
 group by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
 order by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
  cd_gender,
  cd_marital_status,
  cd_education_status,
  count(*) cnt1,
  cd_purchase_estimate,
  count(*) cnt2,
  cd_credit_rating,
  count(*) cnt3
 from
  customer c,customer_address ca,customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  ca_state in ('CO','IL','MN') and
  cd_demo_sk = c.c_current_cdemo_sk and 
  exists (select *
          from store_sales,date_dim
          where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 1999 and
                d_moy between 1 and 1+2) and
   (not exists (select *
            from web_sales,date_dim
            where c.c_customer_sk = ws_bill_customer_sk and
                  ws_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_moy between 1 and 1+2) and
    not exists (select * 
            from catalog_sales,date_dim
            where c.c_customer_sk = cs_ship_customer_sk and
                  cs_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_moy between 1 and 1+2))
 group by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
 order by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 13 <- Reducer 16 (BROADCAST_EDGE)
Map 21 <- Reducer 10 (BROADCAST_EDGE)
Map 22 <- Reducer 9 (BROADCAST_EDGE)
Reducer 10 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 15 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Map 15 (SIMPLE_EDGE), Map 22 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 11 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE)
Reducer 3 <- Map 12 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 14 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 18 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 20 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 5 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_231]
        Limit [LIM_230] (rows=1 width=383)
          Number of rows:100
          Select Operator [SEL_229] (rows=1 width=383)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 7 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_228]
              Select Operator [SEL_227] (rows=1 width=383)
                Output:["_col0","_col1","_col2","_col3","_col4","_col6"]
                Group By Operator [GBY_226] (rows=1 width=367)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Reducer 6 [SIMPLE_EDGE]
                  SHUFFLE [RS_68]
                    PartitionCols:_col0, _col1, _col2, _col3, _col4
                    Group By Operator [GBY_67] (rows=1 width=367)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["count()"],keys:_col6, _col7, _col8, _col9, _col10
                      Select Operator [SEL_66] (rows=1 width=363)
                        Output:["_col6","_col7","_col8","_col9","_col10"]
                        Top N Key Operator [TNK_107] (rows=1 width=363)
                          keys:_col6, _col7, _col8, _col9, _col10,top n:100
                          Filter Operator [FIL_65] (rows=1 width=363)
                            predicate:_col13 is null
                            Merge Join Operator [MERGEJOIN_188] (rows=115467 width=363)
                              Conds:RS_62._col0=RS_225._col1(Left Outer),Output:["_col6","_col7","_col8","_col9","_col10","_col13"]
                            <-Reducer 5 [SIMPLE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_62]
                                PartitionCols:_col0
                                Select Operator [SEL_47] (rows=1 width=367)
                                  Output:["_col0","_col6","_col7","_col8","_col9","_col10"]
                                  Filter Operator [FIL_46] (rows=1 width=367)
                                    predicate:_col11 is null
                                    Merge Join Operator [MERGEJOIN_187] (rows=116289 width=367)
                                      Conds:RS_43._col0=RS_217._col1(Left Outer),Output:["_col0","_col6","_col7","_col8","_col9","_col10","_col11"]
                                    <-Reducer 4 [SIMPLE_EDGE]
                                      SHUFFLE [RS_43]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_186] (rows=6841 width=363)
                                          Conds:RS_40._col0=RS_41._col0(Left Semi),Output:["_col0","_col6","_col7","_col8","_col9","_col10"]
                                        <-Reducer 14 [SIMPLE_EDGE]
                                          SHUFFLE [RS_41]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_39] (rows=116289 width=1)
                                              Output:["_col0"],keys:_col0
                                              Select Operator [SEL_17] (rows=43153353 width=1)
                                                Output:["_col0"]
                                                Merge Join Operator [MERGEJOIN_183] (rows=43153353 width=1)
                                                  Conds:RS_209._col0=RS_199._col0(Inner),Output:["_col1"]
                                                <-Map 15 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_199]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_198] (rows=150 width=4)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_197] (rows=150 width=12)
                                                        predicate:((d_year = 1999) and d_moy BETWEEN 1 AND 3)
                                                        TableScan [TS_11] (rows=73049 width=12)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                <-Map 13 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_209]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_208] (rows=525327388 width=7)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_207] (rows=525327388 width=7)
                                                        predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_15_date_dim_d_date_sk_min) AND DynamicValue(RS_15_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_15_date_dim_d_date_sk_bloom_filter)))
                                                        TableScan [TS_8] (rows=575995635 width=7)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk"]
                                                        <-Reducer 16 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_206]
                                                            Group By Operator [GBY_205] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_204]
                                                                Group By Operator [GBY_203] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_200] (rows=150 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_198]
                                        <-Reducer 3 [SIMPLE_EDGE]
                                          SHUFFLE [RS_40]
                                            PartitionCols:_col0
                                            Merge Join Operator [MERGEJOIN_182] (rows=4605476 width=363)
                                              Conds:RS_35._col1=RS_196._col0(Inner),Output:["_col0","_col6","_col7","_col8","_col9","_col10"]
                                            <-Map 12 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_196]
                                                PartitionCols:_col0
                                                Select Operator [SEL_195] (rows=1861800 width=363)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                  TableScan [TS_6] (rows=1861800 width=363)
                                                    default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_gender","cd_marital_status","cd_education_status","cd_purchase_estimate","cd_credit_rating"]
                                            <-Reducer 2 [SIMPLE_EDGE]
                                              SHUFFLE [RS_35]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_181] (rows=4541258 width=5)
                                                  Conds:RS_191._col2=RS_194._col0(Inner),Output:["_col0","_col1"]
                                                <-Map 1 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_191]
                                                    PartitionCols:_col2
                                                    Select Operator [SEL_190] (rows=77201384 width=11)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_189] (rows=77201384 width=11)
                                                        predicate:(c_current_cdemo_sk is not null and c_current_addr_sk is not null)
                                                        TableScan [TS_0] (rows=80000000 width=11)
                                                          default@customer,c,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_addr_sk"]
                                                <-Map 11 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_194]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_193] (rows=2352941 width=90)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_192] (rows=2352941 width=90)
                                                        predicate:(ca_state) IN ('CO', 'IL', 'MN')
                                                        TableScan [TS_3] (rows=40000000 width=90)
                                                          default@customer_address,ca,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state"]
                                    <-Reducer 18 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_217]
                                        PartitionCols:_col1
                                        Select Operator [SEL_216] (rows=116289 width=7)
                                          Output:["_col0","_col1"]
                                          Group By Operator [GBY_215] (rows=116289 width=3)
                                            Output:["_col0"],keys:KEY._col0
                                          <-Reducer 17 [SIMPLE_EDGE]
                                            SHUFFLE [RS_29]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_28] (rows=116289 width=3)
                                                Output:["_col0"],keys:_col1
                                                Merge Join Operator [MERGEJOIN_184] (rows=11823304 width=3)
                                                  Conds:RS_214._col0=RS_201._col0(Inner),Output:["_col1"]
                                                <-Map 15 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_201]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_198]
                                                <-Map 21 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_214]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_213] (rows=143930993 width=7)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_212] (rows=143930993 width=7)
                                                        predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_bill_customer_sk BETWEEN DynamicValue(RS_43_c_c_customer_sk_min) AND DynamicValue(RS_43_c_c_customer_sk_max) and in_bloom_filter(ws_bill_customer_sk, DynamicValue(RS_43_c_c_customer_sk_bloom_filter)))
                                                        TableScan [TS_18] (rows=144002668 width=7)
                                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk"]
                                                        <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_211]
                                                            Group By Operator [GBY_210] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
                                                              SHUFFLE [RS_157]
                                                                Group By Operator [GBY_156] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_155] (rows=6841 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Merge Join Operator [MERGEJOIN_186]
                            <-Reducer 20 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_225]
                                PartitionCols:_col1
                                Select Operator [SEL_224] (rows=115467 width=7)
                                  Output:["_col0","_col1"]
                                  Group By Operator [GBY_223] (rows=115467 width=3)
                                    Output:["_col0"],keys:KEY._col0
                                  <-Reducer 19 [SIMPLE_EDGE]
                                    SHUFFLE [RS_59]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_58] (rows=115467 width=3)
                                        Output:["_col0"],keys:_col1
                                        Merge Join Operator [MERGEJOIN_185] (rows=23255411 width=3)
                                          Conds:RS_222._col0=RS_202._col0(Inner),Output:["_col1"]
                                        <-Map 15 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_202]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_198]
                                        <-Map 22 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_222]
                                            PartitionCols:_col0
                                            Select Operator [SEL_221] (rows=285115246 width=7)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_220] (rows=285115246 width=7)
                                                predicate:(cs_ship_customer_sk is not null and cs_sold_date_sk is not null and cs_ship_customer_sk BETWEEN DynamicValue(RS_62_c_c_customer_sk_min) AND DynamicValue(RS_62_c_c_customer_sk_max) and in_bloom_filter(cs_ship_customer_sk, DynamicValue(RS_62_c_c_customer_sk_bloom_filter)))
                                                TableScan [TS_48] (rows=287989836 width=7)
                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_ship_customer_sk"]
                                                <-Reducer 9 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_219]
                                                    Group By Operator [GBY_218] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Reducer 5 [CUSTOM_SIMPLE_EDGE]
                                                      PARTITION_ONLY_SHUFFLE [RS_172]
                                                        Group By Operator [GBY_171] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_170] (rows=1 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_47]

