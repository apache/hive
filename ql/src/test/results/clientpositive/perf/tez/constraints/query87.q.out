PREHOOK: query: explain
select count(*) 
from ((select distinct c_last_name, c_first_name, d_date
       from store_sales, date_dim, customer
       where store_sales.ss_sold_date_sk = date_dim.d_date_sk
         and store_sales.ss_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from catalog_sales, date_dim, customer
       where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
         and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from web_sales, date_dim, customer
       where web_sales.ws_sold_date_sk = date_dim.d_date_sk
         and web_sales.ws_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
) cool_cust
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select count(*) 
from ((select distinct c_last_name, c_first_name, d_date
       from store_sales, date_dim, customer
       where store_sales.ss_sold_date_sk = date_dim.d_date_sk
         and store_sales.ss_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from catalog_sales, date_dim, customer
       where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
         and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from web_sales, date_dim, customer
       where web_sales.ws_sold_date_sk = date_dim.d_date_sk
         and web_sales.ws_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
) cool_cust
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE)
Map 19 <- Reducer 11 (BROADCAST_EDGE)
Map 20 <- Reducer 11 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 10 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 13 <- Map 18 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 15 <- Map 10 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE)
Reducer 16 <- Map 18 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 3 <- Map 18 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_264]
        Group By Operator [GBY_263] (rows=1 width=8)
          Output:["_col0"],aggregations:["count(VALUE._col0)"]
        <-Reducer 8 [CUSTOM_SIMPLE_EDGE] vectorized
          PARTITION_ONLY_SHUFFLE [RS_262]
            Group By Operator [GBY_261] (rows=1 width=8)
              Output:["_col0"],aggregations:["count()"]
              Select Operator [SEL_260] (rows=8062883 width=16)
                Filter Operator [FIL_259] (rows=8062883 width=16)
                  predicate:((_col3 > 0L) and ((_col3 * 2L) = _col4))
                  Select Operator [SEL_258] (rows=48377300 width=16)
                    Output:["_col3","_col4"]
                    Group By Operator [GBY_257] (rows=48377300 width=290)
                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                    <-Union 7 [SIMPLE_EDGE]
                      <-Reducer 17 [CONTAINS] vectorized
                        Reduce Output Operator [RS_284]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_283] (rows=48377300 width=290)
                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","sum(_col4)"],keys:_col0, _col1, _col2
                            Select Operator [SEL_282] (rows=48377300 width=290)
                              Output:["_col0","_col1","_col2","_col3","_col4"]
                              Select Operator [SEL_281] (rows=24986582 width=290)
                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                Group By Operator [GBY_280] (rows=24986582 width=282)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                  Select Operator [SEL_279] (rows=24986582 width=274)
                                    Output:["_col0","_col1","_col2"]
                                    Group By Operator [GBY_278] (rows=24986582 width=274)
                                      Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 16 [SIMPLE_EDGE]
                                      SHUFFLE [RS_77]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_76] (rows=24986582 width=274)
                                          Output:["_col0","_col1","_col2"],keys:_col6, _col5, _col3
                                          Merge Join Operator [MERGEJOIN_189] (rows=24986582 width=274)
                                            Conds:RS_72._col1=RS_241._col0(Inner),Output:["_col3","_col5","_col6"]
                                          <-Map 18 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_241]
                                              PartitionCols:_col0
                                              Select Operator [SEL_238] (rows=80000000 width=184)
                                                Output:["_col0","_col1","_col2"]
                                                TableScan [TS_6] (rows=80000000 width=184)
                                                  default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_first_name","c_last_name"]
                                          <-Reducer 15 [SIMPLE_EDGE]
                                            SHUFFLE [RS_72]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_188] (rows=24986582 width=97)
                                                Conds:RS_277._col0=RS_228._col0(Inner),Output:["_col1","_col3"]
                                              <-Map 10 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_228]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_224] (rows=317 width=98)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_223] (rows=317 width=102)
                                                      predicate:d_month_seq BETWEEN 1212 AND 1223
                                                      TableScan [TS_3] (rows=73049 width=102)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_month_seq"]
                                              <-Map 20 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_277]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_276] (rows=143930993 width=7)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_275] (rows=143930993 width=7)
                                                      predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_70_date_dim_d_date_sk_min) AND DynamicValue(RS_70_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_70_date_dim_d_date_sk_bloom_filter)))
                                                      TableScan [TS_61] (rows=144002668 width=7)
                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk"]
                                                      <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_234]
                                                          Group By Operator [GBY_231] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_230]
                                                              Group By Operator [GBY_229] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_226] (rows=317 width=4)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_224]
                      <-Reducer 6 [CONTAINS] vectorized
                        Reduce Output Operator [RS_256]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_255] (rows=48377300 width=290)
                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","sum(_col4)"],keys:_col0, _col1, _col2
                            Select Operator [SEL_254] (rows=48377300 width=290)
                              Output:["_col0","_col1","_col2","_col3","_col4"]
                              Select Operator [SEL_253] (rows=23390718 width=290)
                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                Group By Operator [GBY_252] (rows=23390718 width=282)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col0, _col1, _col2
                                  Select Operator [SEL_251] (rows=23390718 width=290)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_250] (rows=23390718 width=290)
                                      predicate:((_col3 > 0L) and ((_col3 * 2L) = _col4))
                                      Group By Operator [GBY_249] (rows=140344308 width=290)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                      <-Union 5 [SIMPLE_EDGE]
                                        <-Reducer 14 [CONTAINS] vectorized
                                          Reduce Output Operator [RS_274]
                                            PartitionCols:_col0, _col1, _col2
                                            Group By Operator [GBY_273] (rows=140344308 width=290)
                                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","sum(_col4)"],keys:_col0, _col1, _col2
                                              Select Operator [SEL_272] (rows=140344308 width=290)
                                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                                Select Operator [SEL_271] (rows=49146883 width=290)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  Group By Operator [GBY_270] (rows=49146883 width=282)
                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                                    Select Operator [SEL_269] (rows=49146883 width=274)
                                                      Output:["_col0","_col1","_col2"]
                                                      Group By Operator [GBY_268] (rows=49146883 width=274)
                                                        Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                                      <-Reducer 13 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_40]
                                                          PartitionCols:_col0, _col1, _col2
                                                          Group By Operator [GBY_39] (rows=49146883 width=274)
                                                            Output:["_col0","_col1","_col2"],keys:_col6, _col5, _col3
                                                            Merge Join Operator [MERGEJOIN_187] (rows=49146883 width=274)
                                                              Conds:RS_35._col1=RS_240._col0(Inner),Output:["_col3","_col5","_col6"]
                                                            <-Map 18 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_240]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Select Operator [SEL_238]
                                                            <-Reducer 12 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_35]
                                                                PartitionCols:_col1
                                                                Merge Join Operator [MERGEJOIN_186] (rows=49146883 width=97)
                                                                  Conds:RS_267._col0=RS_227._col0(Inner),Output:["_col1","_col3"]
                                                                <-Map 10 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_227]
                                                                    PartitionCols:_col0
                                                                     Please refer to the previous Select Operator [SEL_224]
                                                                <-Map 19 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_267]
                                                                    PartitionCols:_col0
                                                                    Select Operator [SEL_266] (rows=285117831 width=7)
                                                                      Output:["_col0","_col1"]
                                                                      Filter Operator [FIL_265] (rows=285117831 width=7)
                                                                        predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_33_date_dim_d_date_sk_min) AND DynamicValue(RS_33_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_33_date_dim_d_date_sk_bloom_filter)))
                                                                        TableScan [TS_24] (rows=287989836 width=7)
                                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk"]
                                                                        <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                                          BROADCAST [RS_233]
                                                                             Please refer to the previous Group By Operator [GBY_231]
                                        <-Reducer 4 [CONTAINS] vectorized
                                          Reduce Output Operator [RS_248]
                                            PartitionCols:_col0, _col1, _col2
                                            Group By Operator [GBY_247] (rows=140344308 width=290)
                                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","sum(_col4)"],keys:_col0, _col1, _col2
                                              Select Operator [SEL_246] (rows=140344308 width=290)
                                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                                Select Operator [SEL_245] (rows=91197425 width=290)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  Group By Operator [GBY_244] (rows=91197425 width=282)
                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                                    Select Operator [SEL_243] (rows=91197425 width=274)
                                                      Output:["_col0","_col1","_col2"]
                                                      Group By Operator [GBY_242] (rows=91197425 width=274)
                                                        Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                                      <-Reducer 3 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_16]
                                                          PartitionCols:_col0, _col1, _col2
                                                          Group By Operator [GBY_15] (rows=91197425 width=274)
                                                            Output:["_col0","_col1","_col2"],keys:_col6, _col5, _col3
                                                            Merge Join Operator [MERGEJOIN_185] (rows=91197425 width=274)
                                                              Conds:RS_11._col1=RS_239._col0(Inner),Output:["_col3","_col5","_col6"]
                                                            <-Map 18 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_239]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Select Operator [SEL_238]
                                                            <-Reducer 2 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_11]
                                                                PartitionCols:_col1
                                                                Merge Join Operator [MERGEJOIN_184] (rows=91197425 width=96)
                                                                  Conds:RS_237._col0=RS_225._col0(Inner),Output:["_col1","_col3"]
                                                                <-Map 10 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_225]
                                                                    PartitionCols:_col0
                                                                     Please refer to the previous Select Operator [SEL_224]
                                                                <-Map 1 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_237]
                                                                    PartitionCols:_col0
                                                                    Select Operator [SEL_236] (rows=525327388 width=7)
                                                                      Output:["_col0","_col1"]
                                                                      Filter Operator [FIL_235] (rows=525327388 width=7)
                                                                        predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_9_date_dim_d_date_sk_min) AND DynamicValue(RS_9_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_9_date_dim_d_date_sk_bloom_filter)))
                                                                        TableScan [TS_0] (rows=575995635 width=7)
                                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk"]
                                                                        <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                                          BROADCAST [RS_232]
                                                                             Please refer to the previous Group By Operator [GBY_231]

