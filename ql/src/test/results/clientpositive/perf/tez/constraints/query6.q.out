Warning: Map Join MAPJOIN[170][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 7 (BROADCAST_EDGE)
Map 10 <- Reducer 13 (BROADCAST_EDGE)
Map 14 <- Reducer 16 (BROADCAST_EDGE)
Map 15 <- Reducer 8 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (SIMPLE_EDGE), Map 14 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 15 (BROADCAST_EDGE), Map 9 (SIMPLE_EDGE), Reducer 11 (BROADCAST_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 6 <- Map 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 5 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_236]
        Limit [LIM_235] (rows=1 width=94)
          Number of rows:100
          Select Operator [SEL_234] (rows=1 width=94)
            Output:["_col0","_col1"]
          <-Reducer 3 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_233]
              Top N Key Operator [TNK_232] (rows=1 width=94)
                keys:_col1,top n:100
                Filter Operator [FIL_231] (rows=1 width=94)
                  predicate:(_col1 >= 10L)
                  Group By Operator [GBY_230] (rows=1 width=94)
                    Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                  <-Reducer 2 [SIMPLE_EDGE]
                    SHUFFLE [RS_69]
                      PartitionCols:_col0
                      Group By Operator [GBY_68] (rows=1 width=94)
                        Output:["_col0","_col1"],aggregations:["count()"],keys:_col4
                        Map Join Operator [MAPJOIN_176] (rows=36482 width=86)
                          Conds:MAPJOIN_175._col5=RS_221._col0(Inner),Output:["_col4"]
                        <-Map 15 [BROADCAST_EDGE] vectorized
                          BROADCAST [RS_221]
                            PartitionCols:_col0
                            Map Join Operator [MAPJOIN_220] (rows=660 width=4)
                              Conds:SEL_219._col1=RS_217._col0(Inner),Output:["_col0"]
                            <-Reducer 8 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_217]
                                PartitionCols:_col0
                                Group By Operator [GBY_216] (rows=25 width=4)
                                  Output:["_col0"],keys:KEY._col0
                                <-Map 5 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_189]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_187] (rows=25 width=4)
                                      Output:["_col0"],keys:d_month_seq
                                      Select Operator [SEL_185] (rows=50 width=12)
                                        Output:["d_month_seq"]
                                        Filter Operator [FIL_183] (rows=50 width=12)
                                          predicate:((d_year = 2000) and (d_moy = 2) and d_month_seq is not null)
                                          TableScan [TS_3] (rows=73049 width=12)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_month_seq","d_year","d_moy"]
                            <-Select Operator [SEL_219] (rows=73049 width=8)
                                Output:["_col0","_col1"]
                                Filter Operator [FIL_218] (rows=73049 width=8)
                                  predicate:d_month_seq is not null
                                  TableScan [TS_41] (rows=73049 width=8)
                                    default@date_dim,d,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_month_seq"]
                        <-Map Join Operator [MAPJOIN_175] (rows=36482 width=86)
                            Conds:MERGEJOIN_171._col0=RS_62._col2(Inner),Output:["_col4","_col5"]
                          <-Reducer 11 [BROADCAST_EDGE]
                            BROADCAST [RS_62]
                              PartitionCols:_col2
                              Select Operator [SEL_40] (rows=36482 width=0)
                                Output:["_col0","_col2"]
                                Merge Join Operator [MERGEJOIN_173] (rows=36482 width=0)
                                  Conds:RS_215._col0=RS_229._col1(Inner),Output:["_col5","_col7"]
                                <-Map 10 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_215]
                                    PartitionCols:_col0
                                    Filter Operator [FIL_214] (rows=153611 width=227)
                                      predicate:(_col1 > _col4)
                                      Map Join Operator [MAPJOIN_213] (rows=460833 width=227)
                                        Conds:SEL_212._col2=RS_210._col0(Inner),Output:["_col0","_col1","_col4"]
                                      <-Reducer 13 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_210]
                                          PartitionCols:_col0
                                          Select Operator [SEL_209] (rows=10 width=202)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_208] (rows=10 width=210)
                                              predicate:CAST( CAST( (_col1 / _col2) AS decimal(11,6)) AS decimal(16,6)) is not null
                                              Group By Operator [GBY_207] (rows=10 width=210)
                                                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                                              <-Map 12 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_206]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_205] (rows=10 width=210)
                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(i_current_price)","count(i_current_price)"],keys:i_category
                                                    Filter Operator [FIL_204] (rows=462000 width=201)
                                                      predicate:i_category is not null
                                                      TableScan [TS_22] (rows=462000 width=201)
                                                        default@item,j,Tbl:COMPLETE,Col:COMPLETE,Output:["i_current_price","i_category"]
                                      <-Select Operator [SEL_212] (rows=460833 width=205)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_211] (rows=460833 width=205)
                                            predicate:(i_current_price is not null and i_category is not null)
                                            TableScan [TS_19] (rows=462000 width=205)
                                              default@item,i,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_category"]
                                <-Map 14 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_229]
                                    PartitionCols:_col1
                                    Select Operator [SEL_228] (rows=525327388 width=11)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_227] (rows=525327388 width=11)
                                        predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_65_d_d_date_sk_min) AND DynamicValue(RS_65_d_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_65_d_d_date_sk_bloom_filter)))
                                        TableScan [TS_30] (rows=575995635 width=11)
                                          default@store_sales,s,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk"]
                                        <-Reducer 16 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_226]
                                            Group By Operator [GBY_225] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                          <-Merge Join Operator [MERGEJOIN_171] (rows=80000000 width=90)
                              Conds:RS_201._col1=RS_203._col0(Inner),Output:["_col0","_col4"]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_201]
                                PartitionCols:_col1
                                Map Join Operator [MAPJOIN_200] (rows=80000000 width=8)
                                  Conds:(Inner),Output:["_col0","_col1"]
                                <-Reducer 7 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_197]
                                    Select Operator [SEL_196] (rows=1 width=8)
                                      Filter Operator [FIL_195] (rows=1 width=8)
                                        predicate:(sq_count_check(_col0) <= 1)
                                        Group By Operator [GBY_194] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                        <-Reducer 6 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_193]
                                            Group By Operator [GBY_192] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count()"]
                                              Select Operator [SEL_191] (rows=25 width=4)
                                                Group By Operator [GBY_190] (rows=25 width=4)
                                                  Output:["_col0"],keys:KEY._col0
                                                <-Map 5 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_188]
                                                    PartitionCols:_col0
                                                    Group By Operator [GBY_186] (rows=25 width=4)
                                                      Output:["_col0"],keys:d_month_seq
                                                      Select Operator [SEL_184] (rows=50 width=12)
                                                        Output:["d_month_seq"]
                                                        Filter Operator [FIL_182] (rows=50 width=12)
                                                          predicate:((d_year = 2000) and (d_moy = 2))
                                                           Please refer to the previous TableScan [TS_3]
                                <-Select Operator [SEL_199] (rows=80000000 width=8)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_198] (rows=80000000 width=8)
                                      predicate:c_current_addr_sk is not null
                                      TableScan [TS_0] (rows=80000000 width=8)
                                        default@customer,c,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_addr_sk"]
                            <-Map 9 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_203]
                                PartitionCols:_col0
                                Select Operator [SEL_202] (rows=40000000 width=90)
                                  Output:["_col0","_col1"]
                                  TableScan [TS_17] (rows=40000000 width=90)
                                    default@customer_address,a,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state"]

