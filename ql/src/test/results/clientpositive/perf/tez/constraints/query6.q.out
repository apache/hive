Warning: Map Join MAPJOIN[170][bigTable=?] in task 'Map 8' is a cross product
PREHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 3 (BROADCAST_EDGE)
Map 11 <- Reducer 15 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE)
Map 6 <- Map 1 (BROADCAST_EDGE)
Map 8 <- Reducer 5 (BROADCAST_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE)
Reducer 3 <- Map 2 (SIMPLE_EDGE)
Reducer 4 <- Map 2 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Map 6 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 9 <- Map 10 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 13 vectorized
      File Output Operator [FS_231]
        Limit [LIM_230] (rows=1 width=94)
          Number of rows:100
          Select Operator [SEL_229] (rows=1 width=94)
            Output:["_col0","_col1"]
          <-Reducer 12 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_228]
              Filter Operator [FIL_227] (rows=1 width=94)
                predicate:(_col1 >= 10L)
                Group By Operator [GBY_226] (rows=1 width=94)
                  Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                <-Map 11 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_225]
                    PartitionCols:_col0
                    Group By Operator [GBY_224] (rows=1 width=94)
                      Output:["_col0","_col1"],aggregations:["count()"],keys:_col10
                      Map Join Operator [MAPJOIN_223] (rows=1 width=86)
                        Conds:RS_63._col4=SEL_222._col0(Inner),HybridGraceHashJoin:true,Output:["_col10"]
                      <-Reducer 7 [BROADCAST_EDGE]
                        BROADCAST [RS_63]
                          PartitionCols:_col4
                          Merge Join Operator [MERGEJOIN_173] (rows=4923 width=90)
                            Conds:RS_197._col5=RS_61._col0(Inner),Output:["_col4","_col10"]
                          <-Map 6 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_197]
                              PartitionCols:_col5
                              Map Join Operator [MAPJOIN_196] (rows=7192227 width=4)
                                Conds:RS_193._col0=SEL_195._col0(Inner),HybridGraceHashJoin:true,Output:["_col4","_col5"]
                              <-Map 1 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_193]
                                  PartitionCols:_col0
                                  Map Join Operator [MAPJOIN_192] (rows=660 width=4)
                                    Conds:SEL_191._col1=RS_189._col0(Inner),HybridGraceHashJoin:true,Output:["_col0"]
                                  <-Reducer 3 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_189]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_188] (rows=25 width=4)
                                        Output:["_col0"],keys:KEY._col0
                                      <-Map 2 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_186]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_184] (rows=25 width=4)
                                            Output:["_col0"],keys:d_month_seq
                                            Select Operator [SEL_182] (rows=50 width=12)
                                              Output:["d_month_seq"]
                                              Filter Operator [FIL_180] (rows=50 width=12)
                                                predicate:((d_moy = 2) and (d_year = 2000) and d_month_seq is not null)
                                                TableScan [TS_3] (rows=73049 width=12)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_month_seq","d_year","d_moy"]
                                  <-Select Operator [SEL_191] (rows=73049 width=8)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_190] (rows=73049 width=8)
                                        predicate:d_month_seq is not null
                                        TableScan [TS_0] (rows=73049 width=8)
                                          default@date_dim,d,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_month_seq"]
                              <-Select Operator [SEL_195] (rows=525327388 width=11)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_194] (rows=525327388 width=11)
                                    predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                    TableScan [TS_10] (rows=575995635 width=11)
                                      default@store_sales,s,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk"]
                          <-Reducer 9 [SIMPLE_EDGE]
                            SHUFFLE [RS_61]
                              PartitionCols:_col0
                              Merge Join Operator [MERGEJOIN_171] (rows=80000000 width=90)
                                Conds:RS_209._col1=RS_211._col0(Inner),Output:["_col0","_col4"]
                              <-Map 10 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_211]
                                  PartitionCols:_col0
                                  Select Operator [SEL_210] (rows=40000000 width=90)
                                    Output:["_col0","_col1"]
                                    TableScan [TS_30] (rows=40000000 width=90)
                                      default@customer_address,a,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state"]
                              <-Map 8 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_209]
                                  PartitionCols:_col1
                                  Map Join Operator [MAPJOIN_208] (rows=80000000 width=8)
                                    Conds:(Inner),Output:["_col0","_col1"]
                                  <-Reducer 5 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_205]
                                      Select Operator [SEL_204] (rows=1 width=8)
                                        Filter Operator [FIL_203] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_202] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Reducer 4 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_201]
                                              Group By Operator [GBY_200] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count()"]
                                                Select Operator [SEL_199] (rows=25 width=4)
                                                  Group By Operator [GBY_198] (rows=25 width=4)
                                                    Output:["_col0"],keys:KEY._col0
                                                  <-Map 2 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_187]
                                                      PartitionCols:_col0
                                                      Group By Operator [GBY_185] (rows=25 width=4)
                                                        Output:["_col0"],keys:d_month_seq
                                                        Select Operator [SEL_183] (rows=50 width=12)
                                                          Output:["d_month_seq"]
                                                          Filter Operator [FIL_181] (rows=50 width=12)
                                                            predicate:((d_moy = 2) and (d_year = 2000))
                                                             Please refer to the previous TableScan [TS_3]
                                  <-Select Operator [SEL_207] (rows=80000000 width=8)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_206] (rows=80000000 width=8)
                                        predicate:c_current_addr_sk is not null
                                        TableScan [TS_13] (rows=80000000 width=8)
                                          default@customer,c,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_addr_sk"]
                      <-Select Operator [SEL_222] (rows=154000 width=227)
                          Output:["_col0"]
                          Filter Operator [FIL_221] (rows=154000 width=227)
                            predicate:(_col1 > _col4)
                            Map Join Operator [MAPJOIN_220] (rows=462000 width=227)
                              Conds:SEL_219._col2=RS_217._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col4"]
                            <-Reducer 15 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_217]
                                PartitionCols:_col0
                                Select Operator [SEL_216] (rows=10 width=202)
                                  Output:["_col0","_col1"]
                                  Group By Operator [GBY_215] (rows=10 width=210)
                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                                  <-Map 14 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_214]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_213] (rows=10 width=210)
                                        Output:["_col0","_col1","_col2"],aggregations:["sum(i_current_price)","count(i_current_price)"],keys:i_category
                                        Filter Operator [FIL_212] (rows=462000 width=201)
                                          predicate:i_category is not null
                                          TableScan [TS_42] (rows=462000 width=201)
                                            default@item,j,Tbl:COMPLETE,Col:COMPLETE,Output:["i_current_price","i_category"]
                            <-Select Operator [SEL_219] (rows=462000 width=205)
                                Output:["_col0","_col1","_col2"]
                                Filter Operator [FIL_218] (rows=462000 width=205)
                                  predicate:i_category is not null
                                  TableScan [TS_39] (rows=462000 width=205)
                                    default@item,i,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_category"]

