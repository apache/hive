PREHOOK: query: explain
select  count(*) from (
    select distinct c_last_name, c_first_name, d_date
    from store_sales, date_dim, customer
          where store_sales.ss_sold_date_sk = date_dim.d_date_sk
      and store_sales.ss_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from catalog_sales, date_dim, customer
          where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
      and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from web_sales, date_dim, customer
          where web_sales.ws_sold_date_sk = date_dim.d_date_sk
      and web_sales.ws_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
) hot_cust
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  count(*) from (
    select distinct c_last_name, c_first_name, d_date
    from store_sales, date_dim, customer
          where store_sales.ss_sold_date_sk = date_dim.d_date_sk
      and store_sales.ss_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from catalog_sales, date_dim, customer
          where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
      and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from web_sales, date_dim, customer
          where web_sales.ws_sold_date_sk = date_dim.d_date_sk
      and web_sales.ws_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
) hot_cust
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Map 19 <- Reducer 13 (BROADCAST_EDGE)
Map 20 <- Reducer 17 (BROADCAST_EDGE)
Reducer 10 <- Map 19 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Map 18 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 13 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 20 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 15 <- Map 18 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 17 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Map 18 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_230]
        Group By Operator [GBY_229] (rows=1 width=8)
          Output:["_col0"],aggregations:["count(VALUE._col0)"]
        <-Reducer 6 [CUSTOM_SIMPLE_EDGE] vectorized
          PARTITION_ONLY_SHUFFLE [RS_228]
            Group By Operator [GBY_227] (rows=1 width=8)
              Output:["_col0"],aggregations:["count()"]
              Select Operator [SEL_226] (rows=1 width=8)
                Filter Operator [FIL_225] (rows=1 width=8)
                  predicate:(_col3 = 3L)
                  Select Operator [SEL_224] (rows=165330890 width=8)
                    Output:["_col3"]
                    Group By Operator [GBY_223] (rows=165330890 width=282)
                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                    <-Union 5 [SIMPLE_EDGE]
                      <-Reducer 12 [CONTAINS] vectorized
                        Reduce Output Operator [RS_240]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_239] (rows=165330890 width=282)
                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                            Group By Operator [GBY_238] (rows=49146883 width=282)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                              Select Operator [SEL_237] (rows=49146883 width=274)
                                Output:["_col0","_col1","_col2"]
                                Group By Operator [GBY_236] (rows=49146883 width=274)
                                  Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                <-Reducer 11 [SIMPLE_EDGE]
                                  SHUFFLE [RS_40]
                                    PartitionCols:_col0, _col1, _col2
                                    Group By Operator [GBY_39] (rows=49146883 width=274)
                                      Output:["_col0","_col1","_col2"],keys:_col6, _col5, _col3
                                      Merge Join Operator [MERGEJOIN_174] (rows=49146883 width=274)
                                        Conds:RS_35._col1=RS_216._col0(Inner),Output:["_col3","_col5","_col6"]
                                      <-Map 18 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_216]
                                          PartitionCols:_col0
                                          Select Operator [SEL_214] (rows=80000000 width=184)
                                            Output:["_col0","_col1","_col2"]
                                            TableScan [TS_6] (rows=80000000 width=184)
                                              default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_first_name","c_last_name"]
                                      <-Reducer 10 [SIMPLE_EDGE]
                                        SHUFFLE [RS_35]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_173] (rows=49146883 width=97)
                                            Conds:RS_235._col0=RS_199._col0(Inner),Output:["_col1","_col3"]
                                          <-Map 8 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_199]
                                              PartitionCols:_col0
                                              Select Operator [SEL_196] (rows=317 width=98)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_195] (rows=317 width=102)
                                                  predicate:d_month_seq BETWEEN 1212 AND 1223
                                                  TableScan [TS_3] (rows=73049 width=102)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_month_seq"]
                                          <-Map 19 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_235]
                                              PartitionCols:_col0
                                              Select Operator [SEL_234] (rows=285117831 width=7)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_233] (rows=285117831 width=7)
                                                  predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_33_date_dim_d_date_sk_min) AND DynamicValue(RS_33_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_33_date_dim_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                  TableScan [TS_24] (rows=287989836 width=7)
                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk"]
                                                  <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_232]
                                                      Group By Operator [GBY_231] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_207]
                                                          Group By Operator [GBY_204] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_200] (rows=317 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_196]
                      <-Reducer 16 [CONTAINS] vectorized
                        Reduce Output Operator [RS_250]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_249] (rows=165330890 width=282)
                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                            Group By Operator [GBY_248] (rows=24986582 width=282)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                              Select Operator [SEL_247] (rows=24986582 width=274)
                                Output:["_col0","_col1","_col2"]
                                Group By Operator [GBY_246] (rows=24986582 width=274)
                                  Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                <-Reducer 15 [SIMPLE_EDGE]
                                  SHUFFLE [RS_65]
                                    PartitionCols:_col0, _col1, _col2
                                    Group By Operator [GBY_64] (rows=24986582 width=274)
                                      Output:["_col0","_col1","_col2"],keys:_col6, _col5, _col3
                                      Merge Join Operator [MERGEJOIN_176] (rows=24986582 width=274)
                                        Conds:RS_60._col1=RS_217._col0(Inner),Output:["_col3","_col5","_col6"]
                                      <-Map 18 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_217]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_214]
                                      <-Reducer 14 [SIMPLE_EDGE]
                                        SHUFFLE [RS_60]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_175] (rows=24986582 width=97)
                                            Conds:RS_245._col0=RS_201._col0(Inner),Output:["_col1","_col3"]
                                          <-Map 8 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_201]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_196]
                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_245]
                                              PartitionCols:_col0
                                              Select Operator [SEL_244] (rows=143930993 width=7)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_243] (rows=143930993 width=7)
                                                  predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_58_date_dim_d_date_sk_min) AND DynamicValue(RS_58_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_58_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                  TableScan [TS_49] (rows=144002668 width=7)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk"]
                                                  <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_242]
                                                      Group By Operator [GBY_241] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_208]
                                                          Group By Operator [GBY_205] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_202] (rows=317 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_196]
                      <-Reducer 4 [CONTAINS] vectorized
                        Reduce Output Operator [RS_222]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_221] (rows=165330890 width=282)
                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                            Group By Operator [GBY_220] (rows=91197425 width=282)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                              Select Operator [SEL_219] (rows=91197425 width=274)
                                Output:["_col0","_col1","_col2"]
                                Group By Operator [GBY_218] (rows=91197425 width=274)
                                  Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                <-Reducer 3 [SIMPLE_EDGE]
                                  SHUFFLE [RS_16]
                                    PartitionCols:_col0, _col1, _col2
                                    Group By Operator [GBY_15] (rows=91197425 width=274)
                                      Output:["_col0","_col1","_col2"],keys:_col6, _col5, _col3
                                      Merge Join Operator [MERGEJOIN_172] (rows=91197425 width=274)
                                        Conds:RS_11._col1=RS_215._col0(Inner),Output:["_col3","_col5","_col6"]
                                      <-Map 18 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_215]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_214]
                                      <-Reducer 2 [SIMPLE_EDGE]
                                        SHUFFLE [RS_11]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_171] (rows=91197425 width=96)
                                            Conds:RS_213._col0=RS_197._col0(Inner),Output:["_col1","_col3"]
                                          <-Map 8 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_197]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_196]
                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_213]
                                              PartitionCols:_col0
                                              Select Operator [SEL_212] (rows=525327388 width=7)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_211] (rows=525327388 width=7)
                                                  predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_9_date_dim_d_date_sk_min) AND DynamicValue(RS_9_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_9_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                  TableScan [TS_0] (rows=575995635 width=7)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk"]
                                                  <-Reducer 9 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_210]
                                                      Group By Operator [GBY_209] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_206]
                                                          Group By Operator [GBY_203] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_198] (rows=317 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_196]

