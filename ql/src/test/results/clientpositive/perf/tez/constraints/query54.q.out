Warning: Shuffle Join MERGEJOIN[286][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
Warning: Shuffle Join MERGEJOIN[292][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 3' is a cross product
Warning: Shuffle Join MERGEJOIN[291][tables = [$hdt$_4, $hdt$_5]] in Stage 'Reducer 15' is a cross product
Warning: Shuffle Join MERGEJOIN[294][tables = [$hdt$_4, $hdt$_5, $hdt$_6]] in Stage 'Reducer 16' is a cross product
PREHOOK: query: explain
with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   web_sales
         ) cs_or_ws_sales,
         item,
         date_dim,
         customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Jewelry'
         and i_class = 'consignment'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 3
         and d_year = 1999
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        store_sales,
        customer_address,
        store,
        date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   date_dim where d_year = 1999 and d_moy = 3)
                           and  (select distinct d_month_seq+3
                                 from   date_dim where d_year = 1999 and d_moy = 3)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   web_sales
         ) cs_or_ws_sales,
         item,
         date_dim,
         customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Jewelry'
         and i_class = 'consignment'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 3
         and d_year = 1999
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        store_sales,
        customer_address,
        store,
        date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   date_dim where d_year = 1999 and d_moy = 3)
                           and  (select distinct d_month_seq+3
                                 from   date_dim where d_year = 1999 and d_moy = 3)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 24 <- Reducer 22 (BROADCAST_EDGE), Union 25 (CONTAINS)
Map 26 <- Reducer 22 (BROADCAST_EDGE), Union 25 (CONTAINS)
Reducer 10 <- Map 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 9 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 9 (SIMPLE_EDGE)
Reducer 15 <- Map 9 (CUSTOM_SIMPLE_EDGE), Reducer 14 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 17 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 9 (SIMPLE_EDGE)
Reducer 18 <- Map 9 (SIMPLE_EDGE), Union 25 (SIMPLE_EDGE)
Reducer 19 <- Map 27 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 20 <- Map 23 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 22 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 28 (SIMPLE_EDGE), Map 30 (SIMPLE_EDGE)
Reducer 3 <- Reducer 13 (CUSTOM_SIMPLE_EDGE), Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 21 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 16 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_377]
        Limit [LIM_376] (rows=1 width=16)
          Number of rows:100
          Select Operator [SEL_375] (rows=1 width=16)
            Output:["_col0","_col1","_col2"]
          <-Reducer 7 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_374]
              Select Operator [SEL_373] (rows=1 width=16)
                Output:["_col0","_col1","_col2"]
                Top N Key Operator [TNK_372] (rows=1 width=12)
                  keys:_col0, _col1,top n:100
                  Group By Operator [GBY_371] (rows=1 width=12)
                    Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                  <-Reducer 6 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_370]
                      PartitionCols:_col0
                      Group By Operator [GBY_369] (rows=1 width=12)
                        Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                        Select Operator [SEL_368] (rows=1 width=116)
                          Output:["_col0"]
                          Top N Key Operator [TNK_367] (rows=1 width=116)
                            keys:UDFToInteger((_col1 / 50)),top n:100
                            Group By Operator [GBY_366] (rows=1 width=116)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 5 [SIMPLE_EDGE]
                              SHUFFLE [RS_118]
                                PartitionCols:_col0
                                Group By Operator [GBY_117] (rows=228 width=116)
                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                  Merge Join Operator [MERGEJOIN_296] (rows=525327388 width=110)
                                    Conds:RS_113._col0=RS_114._col0(Inner),Output:["_col2","_col5"]
                                  <-Reducer 16 [SIMPLE_EDGE]
                                    SHUFFLE [RS_114]
                                      PartitionCols:_col0
                                      Select Operator [SEL_103] (rows=5072841 width=12)
                                        Output:["_col0"]
                                        Filter Operator [FIL_102] (rows=5072841 width=12)
                                          predicate:(_col1 <= _col3)
                                          Merge Join Operator [MERGEJOIN_294] (rows=15218525 width=12)
                                            Conds:(Inner),Output:["_col0","_col1","_col3"]
                                          <-Reducer 15 [CUSTOM_SIMPLE_EDGE]
                                            PARTITION_ONLY_SHUFFLE [RS_99]
                                              Filter Operator [FIL_98] (rows=608741 width=12)
                                                predicate:(_col2 <= _col1)
                                                Merge Join Operator [MERGEJOIN_291] (rows=1826225 width=12)
                                                  Conds:(Inner),Output:["_col0","_col1","_col2"]
                                                <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_327]
                                                    Select Operator [SEL_320] (rows=73049 width=8)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_314] (rows=73049 width=8)
                                                        predicate:d_month_seq is not null
                                                        TableScan [TS_3] (rows=73049 width=12)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_month_seq","d_year","d_moy","d_date_sk"]
                                                <-Reducer 14 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_363]
                                                    Group By Operator [GBY_362] (rows=25 width=4)
                                                      Output:["_col0"],keys:KEY._col0
                                                    <-Map 9 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_330]
                                                        PartitionCols:_col0
                                                        Group By Operator [GBY_323] (rows=25 width=4)
                                                          Output:["_col0"],keys:_col0
                                                          Select Operator [SEL_317] (rows=50 width=12)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_311] (rows=50 width=12)
                                                              predicate:((d_year = 1999) and (d_moy = 3) and d_month_seq is not null)
                                                               Please refer to the previous TableScan [TS_3]
                                          <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_365]
                                              Group By Operator [GBY_364] (rows=25 width=4)
                                                Output:["_col0"],keys:KEY._col0
                                              <-Map 9 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_331]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_324] (rows=25 width=4)
                                                    Output:["_col0"],keys:_col0
                                                    Select Operator [SEL_318] (rows=50 width=12)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_312] (rows=50 width=12)
                                                        predicate:((d_year = 1999) and (d_moy = 3) and d_month_seq is not null)
                                                         Please refer to the previous TableScan [TS_3]
                                  <-Reducer 4 [SIMPLE_EDGE]
                                    SHUFFLE [RS_113]
                                      PartitionCols:_col0
                                      Merge Join Operator [MERGEJOIN_295] (rows=525327388 width=114)
                                        Conds:RS_110._col1=RS_111._col0(Inner),Output:["_col0","_col2","_col5"]
                                      <-Reducer 21 [SIMPLE_EDGE]
                                        SHUFFLE [RS_111]
                                          PartitionCols:_col0
                                          Merge Join Operator [MERGEJOIN_293] (rows=365 width=4)
                                            Conds:RS_72._col1=RS_73._col0(Inner),Output:["_col0"]
                                          <-Reducer 20 [SIMPLE_EDGE]
                                            SHUFFLE [RS_72]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_289] (rows=365 width=8)
                                                Conds:RS_355._col0=RS_70._col0(Left Semi),Output:["_col0","_col1"]
                                              <-Map 23 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_355]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_354] (rows=80000000 width=8)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_353] (rows=80000000 width=8)
                                                      predicate:c_current_addr_sk is not null
                                                      TableScan [TS_33] (rows=80000000 width=8)
                                                        default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_addr_sk"]
                                              <-Reducer 19 [SIMPLE_EDGE]
                                                SHUFFLE [RS_70]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_68] (rows=365 width=0)
                                                    Output:["_col0"],keys:_col0
                                                    Select Operator [SEL_56] (rows=110092 width=0)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_288] (rows=110092 width=0)
                                                        Conds:RS_53._col2=RS_352._col0(Inner),Output:["_col1"]
                                                      <-Map 27 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_352]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_351] (rows=453 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_350] (rows=453 width=186)
                                                              predicate:((i_class = 'consignment') and (i_category = 'Jewelry'))
                                                              TableScan [TS_47] (rows=462000 width=186)
                                                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_class","i_category"]
                                                      <-Reducer 18 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_53]
                                                          PartitionCols:_col2
                                                          Merge Join Operator [MERGEJOIN_287] (rows=11665117 width=7)
                                                            Conds:Union 25._col0=RS_325._col0(Inner),Output:["_col1","_col2"]
                                                          <-Map 9 [SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_325]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_319] (rows=50 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_313] (rows=50 width=12)
                                                                  predicate:((d_year = 1999) and (d_moy = 3))
                                                                   Please refer to the previous TableScan [TS_3]
                                                          <-Union 25 [SIMPLE_EDGE]
                                                            <-Map 24 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_383]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_382] (rows=285117831 width=11)
                                                                  Output:["_col0","_col1","_col2"]
                                                                  Filter Operator [FIL_381] (rows=285117831 width=11)
                                                                    predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_51_date_dim_d_date_sk_min) AND DynamicValue(RS_51_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_51_date_dim_d_date_sk_bloom_filter)))
                                                                    TableScan [TS_297] (rows=287989836 width=11)
                                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk"]
                                                                    <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                                      BROADCAST [RS_379]
                                                                        Group By Operator [GBY_378] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                        <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                          PARTITION_ONLY_SHUFFLE [RS_333]
                                                                            Group By Operator [GBY_332] (rows=1 width=12)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                              Select Operator [SEL_326] (rows=50 width=4)
                                                                                Output:["_col0"]
                                                                                 Please refer to the previous Select Operator [SEL_319]
                                                            <-Map 26 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_386]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_385] (rows=143930993 width=11)
                                                                  Output:["_col0","_col1","_col2"]
                                                                  Filter Operator [FIL_384] (rows=143930993 width=11)
                                                                    predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_51_date_dim_d_date_sk_min) AND DynamicValue(RS_51_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_51_date_dim_d_date_sk_bloom_filter)))
                                                                    TableScan [TS_302] (rows=144002668 width=11)
                                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk"]
                                                                    <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                                      BROADCAST [RS_380]
                                                                         Please refer to the previous Group By Operator [GBY_378]
                                          <-Reducer 29 [SIMPLE_EDGE]
                                            SHUFFLE [RS_73]
                                              PartitionCols:_col0
                                              Merge Join Operator [MERGEJOIN_290] (rows=39720279 width=4)
                                                Conds:RS_358._col1, _col2=RS_361._col0, _col1(Inner),Output:["_col0"]
                                              <-Map 28 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_358]
                                                  PartitionCols:_col1, _col2
                                                  Select Operator [SEL_357] (rows=40000000 width=188)
                                                    Output:["_col0","_col1","_col2"]
                                                    Filter Operator [FIL_356] (rows=40000000 width=188)
                                                      predicate:(ca_county is not null and ca_state is not null)
                                                      TableScan [TS_57] (rows=40000000 width=188)
                                                        default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county","ca_state"]
                                              <-Map 30 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_361]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_360] (rows=1704 width=184)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_359] (rows=1704 width=184)
                                                      predicate:(s_county is not null and s_state is not null)
                                                      TableScan [TS_60] (rows=1704 width=184)
                                                        default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_county","s_state"]
                                      <-Reducer 3 [SIMPLE_EDGE]
                                        SHUFFLE [RS_110]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_292] (rows=525327388 width=114)
                                            Conds:(Inner),Output:["_col0","_col1","_col2"]
                                          <-Reducer 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_349]
                                              Select Operator [SEL_348] (rows=1 width=8)
                                                Filter Operator [FIL_347] (rows=1 width=8)
                                                  predicate:(sq_count_check(_col0) <= 1)
                                                  Group By Operator [GBY_346] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                  <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_345]
                                                      Group By Operator [GBY_344] (rows=1 width=8)
                                                        Output:["_col0"],aggregations:["count()"]
                                                        Select Operator [SEL_343] (rows=25 width=4)
                                                          Group By Operator [GBY_342] (rows=25 width=4)
                                                            Output:["_col0"],keys:KEY._col0
                                                          <-Map 9 [SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_329]
                                                              PartitionCols:_col0
                                                              Group By Operator [GBY_322] (rows=25 width=4)
                                                                Output:["_col0"],keys:_col0
                                                                Select Operator [SEL_316] (rows=50 width=12)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_310] (rows=50 width=12)
                                                                    predicate:((d_year = 1999) and (d_moy = 3))
                                                                     Please refer to the previous TableScan [TS_3]
                                          <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                            PARTITION_ONLY_SHUFFLE [RS_107]
                                              Merge Join Operator [MERGEJOIN_286] (rows=525327388 width=114)
                                                Conds:(Inner),Output:["_col0","_col1","_col2"]
                                              <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_309]
                                                  Select Operator [SEL_308] (rows=525327388 width=114)
                                                    Output:["_col0","_col1","_col2"]
                                                    Filter Operator [FIL_307] (rows=525327388 width=114)
                                                      predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null)
                                                      TableScan [TS_0] (rows=575995635 width=114)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_sales_price"]
                                              <-Reducer 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_341]
                                                  Select Operator [SEL_340] (rows=1 width=8)
                                                    Filter Operator [FIL_339] (rows=1 width=8)
                                                      predicate:(sq_count_check(_col0) <= 1)
                                                      Group By Operator [GBY_338] (rows=1 width=8)
                                                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                      <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_337]
                                                          Group By Operator [GBY_336] (rows=1 width=8)
                                                            Output:["_col0"],aggregations:["count()"]
                                                            Select Operator [SEL_335] (rows=25 width=4)
                                                              Group By Operator [GBY_334] (rows=25 width=4)
                                                                Output:["_col0"],keys:KEY._col0
                                                              <-Map 9 [SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_328]
                                                                  PartitionCols:_col0
                                                                  Group By Operator [GBY_321] (rows=25 width=4)
                                                                    Output:["_col0"],keys:_col0
                                                                    Select Operator [SEL_315] (rows=50 width=12)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Filter Operator [FIL_310]

