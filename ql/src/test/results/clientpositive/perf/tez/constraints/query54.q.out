Warning: Shuffle Join MERGEJOIN[274][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
Warning: Shuffle Join MERGEJOIN[280][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 3' is a cross product
Warning: Shuffle Join MERGEJOIN[279][tables = [$hdt$_4, $hdt$_5]] in Stage 'Reducer 15' is a cross product
Warning: Shuffle Join MERGEJOIN[282][tables = [$hdt$_4, $hdt$_5, $hdt$_6]] in Stage 'Reducer 16' is a cross product
PREHOOK: query: explain
with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   web_sales
         ) cs_or_ws_sales,
         item,
         date_dim,
         customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Jewelry'
         and i_class = 'consignment'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 3
         and d_year = 1999
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        store_sales,
        customer_address,
        store,
        date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   date_dim where d_year = 1999 and d_moy = 3)
                           and  (select distinct d_month_seq+3
                                 from   date_dim where d_year = 1999 and d_moy = 3)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   web_sales
         ) cs_or_ws_sales,
         item,
         date_dim,
         customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Jewelry'
         and i_class = 'consignment'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 3
         and d_year = 1999
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        store_sales,
        customer_address,
        store,
        date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   date_dim where d_year = 1999 and d_moy = 3)
                           and  (select distinct d_month_seq+3
                                 from   date_dim where d_year = 1999 and d_moy = 3)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 22 <- Reducer 30 (BROADCAST_EDGE), Union 23 (CONTAINS)
Map 28 <- Reducer 30 (BROADCAST_EDGE), Union 23 (CONTAINS)
Reducer 10 <- Map 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 9 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 9 (SIMPLE_EDGE)
Reducer 15 <- Map 33 (CUSTOM_SIMPLE_EDGE), Reducer 14 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 17 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 9 (SIMPLE_EDGE)
Reducer 19 <- Map 18 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 24 <- Map 29 (SIMPLE_EDGE), Union 23 (SIMPLE_EDGE)
Reducer 25 <- Map 31 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Map 32 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (SIMPLE_EDGE)
Reducer 3 <- Reducer 13 (CUSTOM_SIMPLE_EDGE), Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 30 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 20 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 16 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_363]
        Limit [LIM_362] (rows=1 width=16)
          Number of rows:100
          Select Operator [SEL_361] (rows=1 width=16)
            Output:["_col0","_col1","_col2"]
          <-Reducer 7 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_360]
              Select Operator [SEL_359] (rows=1 width=16)
                Output:["_col0","_col1","_col2"]
                Group By Operator [GBY_358] (rows=1 width=12)
                  Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                <-Reducer 6 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_357]
                    PartitionCols:_col0
                    Group By Operator [GBY_356] (rows=1 width=12)
                      Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                      Select Operator [SEL_355] (rows=1 width=116)
                        Output:["_col0"]
                        Group By Operator [GBY_354] (rows=1 width=116)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 5 [SIMPLE_EDGE]
                          SHUFFLE [RS_118]
                            PartitionCols:_col0
                            Group By Operator [GBY_117] (rows=1 width=116)
                              Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                              Merge Join Operator [MERGEJOIN_284] (rows=998811 width=4)
                                Conds:RS_113._col0=RS_114._col0(Inner),Output:["_col2","_col5"]
                              <-Reducer 16 [SIMPLE_EDGE]
                                SHUFFLE [RS_114]
                                  PartitionCols:_col0
                                  Select Operator [SEL_103] (rows=5072841 width=12)
                                    Output:["_col0"]
                                    Filter Operator [FIL_102] (rows=5072841 width=12)
                                      predicate:(_col1 <= _col3)
                                      Merge Join Operator [MERGEJOIN_282] (rows=15218525 width=12)
                                        Conds:(Inner),Output:["_col0","_col1","_col3"]
                                      <-Reducer 15 [CUSTOM_SIMPLE_EDGE]
                                        PARTITION_ONLY_SHUFFLE [RS_99]
                                          Filter Operator [FIL_98] (rows=608741 width=12)
                                            predicate:(_col2 <= _col1)
                                            Merge Join Operator [MERGEJOIN_279] (rows=1826225 width=12)
                                              Conds:(Inner),Output:["_col0","_col1","_col2"]
                                            <-Map 33 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_351]
                                                Select Operator [SEL_350] (rows=73049 width=8)
                                                  Output:["_col0","_col1"]
                                                  TableScan [TS_77] (rows=73049 width=8)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_month_seq"]
                                            <-Reducer 14 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_349]
                                                Group By Operator [GBY_348] (rows=25 width=4)
                                                  Output:["_col0"],keys:KEY._col0
                                                <-Map 9 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_309]
                                                    PartitionCols:_col0
                                                    Group By Operator [GBY_305] (rows=25 width=4)
                                                      Output:["_col0"],keys:_col0
                                                      Select Operator [SEL_301] (rows=50 width=12)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_298] (rows=50 width=12)
                                                          predicate:((d_moy = 3) and (d_year = 1999))
                                                          TableScan [TS_3] (rows=73049 width=12)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_month_seq","d_year","d_moy"]
                                      <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_353]
                                          Group By Operator [GBY_352] (rows=25 width=4)
                                            Output:["_col0"],keys:KEY._col0
                                          <-Map 9 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_310]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_306] (rows=25 width=4)
                                                Output:["_col0"],keys:_col0
                                                Select Operator [SEL_302] (rows=50 width=12)
                                                  Output:["_col0"]
                                                   Please refer to the previous Filter Operator [FIL_298]
                              <-Reducer 4 [SIMPLE_EDGE]
                                SHUFFLE [RS_113]
                                  PartitionCols:_col0
                                  Merge Join Operator [MERGEJOIN_283] (rows=8989304 width=4)
                                    Conds:RS_110._col1=RS_111._col0(Inner),Output:["_col0","_col2","_col5"]
                                  <-Reducer 20 [SIMPLE_EDGE]
                                    SHUFFLE [RS_111]
                                      PartitionCols:_col0
                                      Select Operator [SEL_76] (rows=55046 width=4)
                                        Output:["_col0"]
                                        Merge Join Operator [MERGEJOIN_281] (rows=55046 width=4)
                                          Conds:RS_73._col0=RS_347._col1(Inner),Output:["_col5"]
                                        <-Reducer 19 [SIMPLE_EDGE]
                                          SHUFFLE [RS_73]
                                            PartitionCols:_col0
                                            Merge Join Operator [MERGEJOIN_275] (rows=39720279 width=4)
                                              Conds:RS_329._col1, _col2=RS_332._col0, _col1(Inner),Output:["_col0"]
                                            <-Map 18 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_329]
                                                PartitionCols:_col1, _col2
                                                Select Operator [SEL_328] (rows=40000000 width=188)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_327] (rows=40000000 width=188)
                                                    predicate:(ca_county is not null and ca_state is not null)
                                                    TableScan [TS_33] (rows=40000000 width=188)
                                                      default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county","ca_state"]
                                            <-Map 21 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_332]
                                                PartitionCols:_col0, _col1
                                                Select Operator [SEL_331] (rows=1704 width=184)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_330] (rows=1704 width=184)
                                                    predicate:(s_county is not null and s_state is not null)
                                                    TableScan [TS_36] (rows=1704 width=184)
                                                      default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_county","s_state"]
                                        <-Reducer 27 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_347]
                                            PartitionCols:_col1
                                            Select Operator [SEL_346] (rows=55046 width=8)
                                              Output:["_col0","_col1"]
                                              Group By Operator [GBY_345] (rows=55046 width=8)
                                                Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                              <-Reducer 26 [SIMPLE_EDGE]
                                                SHUFFLE [RS_67]
                                                  PartitionCols:_col0, _col1
                                                  Group By Operator [GBY_66] (rows=55046 width=8)
                                                    Output:["_col0","_col1"],keys:_col6, _col5
                                                    Merge Join Operator [MERGEJOIN_278] (rows=110092 width=8)
                                                      Conds:RS_62._col1=RS_344._col0(Inner),Output:["_col5","_col6"]
                                                    <-Map 32 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_344]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_343] (rows=80000000 width=8)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_342] (rows=80000000 width=8)
                                                            predicate:c_current_addr_sk is not null
                                                            TableScan [TS_53] (rows=80000000 width=8)
                                                              default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_addr_sk"]
                                                    <-Reducer 25 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_62]
                                                        PartitionCols:_col1
                                                        Merge Join Operator [MERGEJOIN_277] (rows=110092 width=0)
                                                          Conds:RS_59._col2=RS_341._col0(Inner),Output:["_col1"]
                                                        <-Map 31 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_341]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_340] (rows=453 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_339] (rows=453 width=186)
                                                                predicate:((i_category = 'Jewelry') and (i_class = 'consignment'))
                                                                TableScan [TS_50] (rows=462000 width=186)
                                                                  default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_class","i_category"]
                                                        <-Reducer 24 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_59]
                                                            PartitionCols:_col2
                                                            Merge Join Operator [MERGEJOIN_276] (rows=11665117 width=7)
                                                              Conds:Union 23._col0=RS_335._col0(Inner),Output:["_col1","_col2"]
                                                            <-Map 29 [SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_335]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_334] (rows=50 width=4)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_333] (rows=50 width=12)
                                                                    predicate:((d_moy = 3) and (d_year = 1999))
                                                                    TableScan [TS_47] (rows=73049 width=12)
                                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                            <-Union 23 [SIMPLE_EDGE]
                                                              <-Map 22 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_369]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_368] (rows=285117831 width=11)
                                                                    Output:["_col0","_col1","_col2"]
                                                                    Filter Operator [FIL_367] (rows=285117831 width=11)
                                                                      predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_57_date_dim_d_date_sk_min) AND DynamicValue(RS_57_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_57_date_dim_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                                      TableScan [TS_285] (rows=287989836 width=11)
                                                                        Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk"]
                                                                      <-Reducer 30 [BROADCAST_EDGE] vectorized
                                                                        BROADCAST [RS_365]
                                                                          Group By Operator [GBY_364] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                          <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_338]
                                                                              Group By Operator [GBY_337] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                Select Operator [SEL_336] (rows=50 width=4)
                                                                                  Output:["_col0"]
                                                                                   Please refer to the previous Select Operator [SEL_334]
                                                              <-Map 28 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_372]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_371] (rows=143930993 width=11)
                                                                    Output:["_col0","_col1","_col2"]
                                                                    Filter Operator [FIL_370] (rows=143930993 width=11)
                                                                      predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_57_date_dim_d_date_sk_min) AND DynamicValue(RS_57_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_57_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                                      TableScan [TS_290] (rows=144002668 width=11)
                                                                        Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk"]
                                                                      <-Reducer 30 [BROADCAST_EDGE] vectorized
                                                                        BROADCAST [RS_366]
                                                                           Please refer to the previous Group By Operator [GBY_364]
                                  <-Reducer 3 [SIMPLE_EDGE]
                                    SHUFFLE [RS_110]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_280] (rows=525327388 width=114)
                                        Conds:(Inner),Output:["_col0","_col1","_col2"]
                                      <-Reducer 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_326]
                                          Select Operator [SEL_325] (rows=1 width=8)
                                            Filter Operator [FIL_324] (rows=1 width=8)
                                              predicate:(sq_count_check(_col0) <= 1)
                                              Group By Operator [GBY_323] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                              <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_322]
                                                  Group By Operator [GBY_321] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count()"]
                                                    Select Operator [SEL_320] (rows=25 width=4)
                                                      Group By Operator [GBY_319] (rows=25 width=4)
                                                        Output:["_col0"],keys:KEY._col0
                                                      <-Map 9 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_308]
                                                          PartitionCols:_col0
                                                          Group By Operator [GBY_304] (rows=25 width=4)
                                                            Output:["_col0"],keys:_col0
                                                            Select Operator [SEL_300] (rows=50 width=12)
                                                              Output:["_col0"]
                                                               Please refer to the previous Filter Operator [FIL_298]
                                      <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                        PARTITION_ONLY_SHUFFLE [RS_107]
                                          Merge Join Operator [MERGEJOIN_274] (rows=525327388 width=114)
                                            Conds:(Inner),Output:["_col0","_col1","_col2"]
                                          <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_297]
                                              Select Operator [SEL_296] (rows=525327388 width=114)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_295] (rows=525327388 width=114)
                                                  predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                  TableScan [TS_0] (rows=575995635 width=114)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_sales_price"]
                                          <-Reducer 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_318]
                                              Select Operator [SEL_317] (rows=1 width=8)
                                                Filter Operator [FIL_316] (rows=1 width=8)
                                                  predicate:(sq_count_check(_col0) <= 1)
                                                  Group By Operator [GBY_315] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                  <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_314]
                                                      Group By Operator [GBY_313] (rows=1 width=8)
                                                        Output:["_col0"],aggregations:["count()"]
                                                        Select Operator [SEL_312] (rows=25 width=4)
                                                          Group By Operator [GBY_311] (rows=25 width=4)
                                                            Output:["_col0"],keys:KEY._col0
                                                          <-Map 9 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_307]
                                                              PartitionCols:_col0
                                                              Group By Operator [GBY_303] (rows=25 width=4)
                                                                Output:["_col0"],keys:_col0
                                                                Select Operator [SEL_299] (rows=50 width=12)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Filter Operator [FIL_298]

