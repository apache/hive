Warning: Shuffle Join MERGEJOIN[270][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3]] in Stage 'Reducer 4' is a cross product
Warning: Shuffle Join MERGEJOIN[271][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[269][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 32' is a cross product
Warning: Shuffle Join MERGEJOIN[272][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 6' is a cross product
PREHOOK: query: explain cbo
with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   web_sales
         ) cs_or_ws_sales,
         item,
         date_dim,
         customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Jewelry'
         and i_class = 'consignment'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 3
         and d_year = 1999
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        store_sales,
        customer_address,
        store,
        date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   date_dim where d_year = 1999 and d_moy = 3)
                           and  (select distinct d_month_seq+3
                                 from   date_dim where d_year = 1999 and d_moy = 3)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain cbo
with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   web_sales
         ) cs_or_ws_sales,
         item,
         date_dim,
         customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Jewelry'
         and i_class = 'consignment'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 3
         and d_year = 1999
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        store_sales,
        customer_address,
        store,
        date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   date_dim where d_year = 1999 and d_moy = 3)
                           and  (select distinct d_month_seq+3
                                 from   date_dim where d_year = 1999 and d_moy = 3)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
CBO PLAN:
HiveSortLimit(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC], fetch=[100])
  HiveProject(segment=[$0], num_customers=[$1], segment_base=[*($0, 50)])
    HiveAggregate(group=[{0}], agg#0=[count()])
      HiveProject(segment=[CAST(/($1, CAST(50):DECIMAL(10, 0))):INTEGER])
        HiveAggregate(group=[{0}], agg#0=[sum($1)])
          HiveFilter(condition=[BETWEEN(false, $2, $3, $4)])
            HiveProject(c_customer_sk=[$0], ss_ext_sales_price=[$4], d_month_seq=[$11], _o__c0=[$13], $f0=[$14])
              HiveJoin(condition=[true], joinType=[inner], algorithm=[none], cost=[not available])
                HiveProject($f0=[$10], $f1=[$11], ss_sold_date_sk=[$0], ss_customer_sk=[$1], ss_ext_sales_price=[$2], ca_address_sk=[$5], ca_county=[$6], ca_state=[$7], s_county=[$8], s_state=[$9], d_date_sk=[$3], d_month_seq=[$4], cnt=[$12], $f00=[$13])
                  HiveJoin(condition=[true], joinType=[left], algorithm=[none], cost=[not available])
                    HiveJoin(condition=[true], joinType=[inner], algorithm=[none], cost=[not available])
                      HiveJoin(condition=[=($10, $1)], joinType=[inner], algorithm=[none], cost=[not available])
                        HiveJoin(condition=[=($0, $3)], joinType=[inner], algorithm=[none], cost=[not available])
                          HiveProject(ss_sold_date_sk=[$0], ss_customer_sk=[$3], ss_ext_sales_price=[$15])
                            HiveFilter(condition=[AND(IS NOT NULL($3), IS NOT NULL($0))])
                              HiveTableScan(table=[[default, store_sales]], table:alias=[store_sales])
                          HiveProject(d_date_sk=[$0], d_month_seq=[$3])
                            HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
                        HiveProject(ca_address_sk=[$0], ca_county=[$1], ca_state=[$2], s_county=[$3], s_state=[$4], c_customer_sk=[$5], c_current_addr_sk=[$6])
                          HiveJoin(condition=[=($6, $0)], joinType=[inner], algorithm=[none], cost=[not available])
                            HiveJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[inner], algorithm=[none], cost=[not available])
                              HiveProject(ca_address_sk=[$0], ca_county=[$7], ca_state=[$8])
                                HiveFilter(condition=[AND(IS NOT NULL($7), IS NOT NULL($8))])
                                  HiveTableScan(table=[[default, customer_address]], table:alias=[customer_address])
                              HiveProject(s_county=[$23], s_state=[$24])
                                HiveFilter(condition=[AND(IS NOT NULL($23), IS NOT NULL($24))])
                                  HiveTableScan(table=[[default, store]], table:alias=[store])
                            HiveProject(c_customer_sk=[$0], c_current_addr_sk=[$1])
                              HiveAggregate(group=[{0, 1}])
                                HiveJoin(condition=[=($0, $3)], joinType=[inner], algorithm=[none], cost=[not available])
                                  HiveProject(c_customer_sk=[$0], c_current_addr_sk=[$4])
                                    HiveFilter(condition=[IS NOT NULL($4)])
                                      HiveTableScan(table=[[default, customer]], table:alias=[customer])
                                  HiveJoin(condition=[=($2, $4)], joinType=[inner], algorithm=[none], cost=[not available])
                                    HiveJoin(condition=[=($0, $3)], joinType=[inner], algorithm=[none], cost=[not available])
                                      HiveProject(cs_sold_date_sk=[$0], cs_bill_customer_sk=[$1], cs_item_sk=[$2])
                                        HiveUnion(all=[true])
                                          HiveProject(cs_sold_date_sk=[$0], cs_bill_customer_sk=[$3], cs_item_sk=[$15])
                                            HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($3))])
                                              HiveTableScan(table=[[default, catalog_sales]], table:alias=[catalog_sales])
                                          HiveProject(sold_date_sk=[$0], customer_sk=[$4], item_sk=[$3])
                                            HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($4))])
                                              HiveTableScan(table=[[default, web_sales]], table:alias=[web_sales])
                                      HiveProject(d_date_sk=[$0])
                                        HiveFilter(condition=[AND(=($8, 3), =($6, 1999))])
                                          HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
                                    HiveProject(i_item_sk=[$0])
                                      HiveFilter(condition=[AND(=($12, _UTF-16LE'Jewelry'), =($10, _UTF-16LE'consignment'))])
                                        HiveTableScan(table=[[default, item]], table:alias=[item])
                      HiveProject(cnt=[$0])
                        HiveFilter(condition=[<=(sq_count_check($0), 1)])
                          HiveProject(cnt=[$0])
                            HiveAggregate(group=[{}], cnt=[COUNT()])
                              HiveProject($f0=[$0])
                                HiveAggregate(group=[{0}])
                                  HiveProject($f0=[+($3, 1)])
                                    HiveFilter(condition=[AND(=($6, 1999), =($8, 3))])
                                      HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
                    HiveProject($f0=[$0])
                      HiveAggregate(group=[{0}])
                        HiveProject($f0=[+($3, 1)])
                          HiveFilter(condition=[AND(=($6, 1999), =($8, 3))])
                            HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
                HiveJoin(condition=[true], joinType=[right], algorithm=[none], cost=[not available])
                  HiveProject($f0=[$0])
                    HiveAggregate(group=[{0}])
                      HiveProject($f0=[+($3, 3)])
                        HiveFilter(condition=[AND(=($6, 1999), =($8, 3))])
                          HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
                  HiveProject(cnt=[$0])
                    HiveFilter(condition=[<=(sq_count_check($0), 1)])
                      HiveProject(cnt=[$0])
                        HiveAggregate(group=[{}], cnt=[COUNT()])
                          HiveProject($f0=[$0])
                            HiveAggregate(group=[{0}])
                              HiveProject($f0=[+($3, 3)])
                                HiveFilter(condition=[AND(=($6, 1999), =($8, 3))])
                                  HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])

