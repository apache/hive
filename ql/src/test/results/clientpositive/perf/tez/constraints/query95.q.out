PREHOOK: query: explain
with ws_wh as
(select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2
 from web_sales ws1,web_sales ws2
 where ws1.ws_order_number = ws2.ws_order_number
   and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
 select  
   count(distinct ws_order_number) as `order count`
  ,sum(ws_ext_ship_cost) as `total shipping cost`
  ,sum(ws_net_profit) as `total net profit`
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-5-01' and 
           (cast('1999-5-01' as date) + 60 days)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TX'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and ws1.ws_order_number in (select ws_order_number
                            from ws_wh)
and ws1.ws_order_number in (select wr_order_number
                            from web_returns,ws_wh
                            where wr_order_number = ws_wh.ws_order_number)
order by count(distinct ws_order_number)
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Input: default@web_site
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ws_wh as
(select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2
 from web_sales ws1,web_sales ws2
 where ws1.ws_order_number = ws2.ws_order_number
   and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
 select  
   count(distinct ws_order_number) as `order count`
  ,sum(ws_ext_ship_cost) as `total shipping cost`
  ,sum(ws_net_profit) as `total net profit`
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-5-01' and 
           (cast('1999-5-01' as date) + 60 days)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TX'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and ws1.ws_order_number in (select ws_order_number
                            from ws_wh)
and ws1.ws_order_number in (select wr_order_number
                            from web_returns,ws_wh
                            where wr_order_number = ws_wh.ws_order_number)
order by count(distinct ws_order_number)
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Input: default@web_site
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 12 (BROADCAST_EDGE)
Map 19 <- Reducer 10 (BROADCAST_EDGE)
Reducer 10 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 17 <- Map 15 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 18 <- Map 15 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 11 (SIMPLE_EDGE)
Reducer 3 <- Map 13 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 14 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 16 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 17 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_254]
        Limit [LIM_253] (rows=1 width=240)
          Number of rows:100
          Select Operator [SEL_252] (rows=1 width=240)
            Output:["_col0","_col1","_col2"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_251]
              Select Operator [SEL_250] (rows=1 width=240)
                Output:["_col1","_col2","_col3"]
                Top N Key Operator [TNK_249] (rows=1 width=232)
                  keys:_col0,top n:100
                  Group By Operator [GBY_248] (rows=1 width=232)
                    Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"]
                  <-Reducer 7 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_247]
                      Group By Operator [GBY_246] (rows=1 width=232)
                        Output:["_col0","_col1","_col2"],aggregations:["count(_col0)","sum(_col1)","sum(_col2)"]
                        Group By Operator [GBY_245] (rows=5022875 width=228)
                          Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                        <-Reducer 6 [SIMPLE_EDGE]
                          SHUFFLE [RS_106]
                            PartitionCols:_col0
                            Group By Operator [GBY_105] (rows=5022875 width=228)
                              Output:["_col0","_col2","_col3"],aggregations:["sum(_col1)","sum(_col2)"],keys:_col0
                              Merge Join Operator [MERGEJOIN_216] (rows=5022875 width=227)
                                Conds:RS_52._col0=RS_53._col0(Left Semi),Output:["_col0","_col1","_col2"]
                              <-Reducer 17 [SIMPLE_EDGE]
                                SHUFFLE [RS_53]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_51] (rows=1384229733 width=4)
                                    Output:["_col0"],keys:_col0
                                    Select Operator [SEL_44] (rows=1384229733 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_43] (rows=1384229733 width=11)
                                        predicate:(_col0 <> _col3)
                                        Merge Join Operator [MERGEJOIN_214] (rows=1384229733 width=11)
                                          Conds:RS_40._col1=RS_236._col1(Inner),Output:["_col0","_col2","_col3"]
                                        <-Map 15 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_236]
                                            PartitionCols:_col1
                                            Select Operator [SEL_234] (rows=144002668 width=7)
                                              Output:["_col0","_col1"]
                                              TableScan [TS_22] (rows=144002668 width=7)
                                                default@web_sales,ws1,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_warehouse_sk","ws_order_number"]
                                        <-Reducer 18 [SIMPLE_EDGE]
                                          SHUFFLE [RS_40]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_213] (rows=141176436 width=11)
                                              Conds:RS_237._col1=RS_244._col0(Inner),Output:["_col0","_col1","_col2"]
                                            <-Map 15 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_237]
                                                PartitionCols:_col1
                                                 Please refer to the previous Select Operator [SEL_234]
                                            <-Map 20 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_244]
                                                PartitionCols:_col0
                                                Select Operator [SEL_243] (rows=14398467 width=4)
                                                  Output:["_col0"]
                                                  TableScan [TS_33] (rows=14398467 width=4)
                                                    default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_order_number"]
                              <-Reducer 5 [SIMPLE_EDGE]
                                SHUFFLE [RS_52]
                                  PartitionCols:_col0
                                  Merge Join Operator [MERGEJOIN_215] (rows=5022875 width=227)
                                    Conds:RS_47._col0=RS_48._col0(Left Semi),Output:["_col0","_col1","_col2"]
                                  <-Reducer 4 [SIMPLE_EDGE]
                                    SHUFFLE [RS_47]
                                      PartitionCols:_col0
                                      Select Operator [SEL_21] (rows=5022875 width=227)
                                        Output:["_col0","_col1","_col2"]
                                        Merge Join Operator [MERGEJOIN_211] (rows=5022875 width=227)
                                          Conds:RS_18._col2=RS_233._col0(Inner),Output:["_col3","_col4","_col5"]
                                        <-Map 14 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_233]
                                            PartitionCols:_col0
                                            Select Operator [SEL_232] (rows=12 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_231] (rows=12 width=92)
                                                predicate:(web_company_name = 'pri')
                                                TableScan [TS_9] (rows=84 width=92)
                                                  default@web_site,web_site,Tbl:COMPLETE,Col:COMPLETE,Output:["web_site_sk","web_company_name"]
                                        <-Reducer 3 [SIMPLE_EDGE]
                                          SHUFFLE [RS_18]
                                            PartitionCols:_col2
                                            Merge Join Operator [MERGEJOIN_210] (rows=15673790 width=231)
                                              Conds:RS_15._col0=RS_230._col0(Inner),Output:["_col2","_col3","_col4","_col5"]
                                            <-Map 13 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_230]
                                                PartitionCols:_col0
                                                Select Operator [SEL_229] (rows=8116 width=98)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_228] (rows=8116 width=98)
                                                    predicate:CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1999-05-01 00:00:00' AND TIMESTAMP'1999-06-30 00:00:00'
                                                    TableScan [TS_6] (rows=73049 width=98)
                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                            <-Reducer 2 [SIMPLE_EDGE]
                                              SHUFFLE [RS_15]
                                                PartitionCols:_col0
                                                Merge Join Operator [MERGEJOIN_209] (rows=141073766 width=235)
                                                  Conds:RS_227._col1=RS_219._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5"]
                                                <-Map 11 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_219]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_218] (rows=784314 width=4)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_217] (rows=784314 width=90)
                                                        predicate:(ca_state = 'TX')
                                                        TableScan [TS_3] (rows=40000000 width=90)
                                                          default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state"]
                                                <-Map 1 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_227]
                                                    PartitionCols:_col1
                                                    Select Operator [SEL_226] (rows=143895019 width=239)
                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                      Filter Operator [FIL_225] (rows=143895019 width=239)
                                                        predicate:(ws_web_site_sk is not null and ws_ship_addr_sk is not null and ws_ship_date_sk is not null and ws_ship_addr_sk BETWEEN DynamicValue(RS_13_customer_address_ca_address_sk_min) AND DynamicValue(RS_13_customer_address_ca_address_sk_max) and in_bloom_filter(ws_ship_addr_sk, DynamicValue(RS_13_customer_address_ca_address_sk_bloom_filter)))
                                                        TableScan [TS_0] (rows=144002668 width=239)
                                                          default@web_sales,ws1,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_ship_date_sk","ws_ship_addr_sk","ws_web_site_sk","ws_order_number","ws_ext_ship_cost","ws_net_profit"]
                                                        <-Reducer 12 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_224]
                                                            Group By Operator [GBY_223] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_222]
                                                                Group By Operator [GBY_221] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_220] (rows=784314 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_218]
                                  <-Reducer 16 [SIMPLE_EDGE]
                                    SHUFFLE [RS_48]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_46] (rows=144002668 width=4)
                                        Output:["_col0"],keys:_col0
                                        Select Operator [SEL_30] (rows=1411940834 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_29] (rows=1411940834 width=11)
                                            predicate:(_col0 <> _col2)
                                            Merge Join Operator [MERGEJOIN_212] (rows=1411940834 width=11)
                                              Conds:RS_235._col1=RS_242._col1(Inner),Output:["_col0","_col1","_col2"]
                                            <-Map 15 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_235]
                                                PartitionCols:_col1
                                                 Please refer to the previous Select Operator [SEL_234]
                                            <-Map 19 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_242]
                                                PartitionCols:_col1
                                                Select Operator [SEL_241] (rows=144002668 width=7)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_240] (rows=144002668 width=7)
                                                    predicate:(ws_order_number BETWEEN DynamicValue(RS_47_ws1_ws_order_number_min) AND DynamicValue(RS_47_ws1_ws_order_number_max) and in_bloom_filter(ws_order_number, DynamicValue(RS_47_ws1_ws_order_number_bloom_filter)))
                                                    TableScan [TS_24] (rows=144002668 width=7)
                                                      default@web_sales,ws2,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_warehouse_sk","ws_order_number"]
                                                    <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_239]
                                                        Group By Operator [GBY_238] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
                                                          SHUFFLE [RS_165]
                                                            Group By Operator [GBY_164] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_163] (rows=5022875 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_21]

