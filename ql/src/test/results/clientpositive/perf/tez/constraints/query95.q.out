PREHOOK: query: explain
with ws_wh as
(select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2
 from web_sales ws1,web_sales ws2
 where ws1.ws_order_number = ws2.ws_order_number
   and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
 select  
   count(distinct ws_order_number) as `order count`
  ,sum(ws_ext_ship_cost) as `total shipping cost`
  ,sum(ws_net_profit) as `total net profit`
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-5-01' and 
           (cast('1999-5-01' as date) + 60 days)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TX'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and ws1.ws_order_number in (select ws_order_number
                            from ws_wh)
and ws1.ws_order_number in (select wr_order_number
                            from web_returns,ws_wh
                            where wr_order_number = ws_wh.ws_order_number)
order by count(distinct ws_order_number)
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Input: default@web_site
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ws_wh as
(select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2
 from web_sales ws1,web_sales ws2
 where ws1.ws_order_number = ws2.ws_order_number
   and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
 select  
   count(distinct ws_order_number) as `order count`
  ,sum(ws_ext_ship_cost) as `total shipping cost`
  ,sum(ws_net_profit) as `total net profit`
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-5-01' and 
           (cast('1999-5-01' as date) + 60 days)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TX'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and ws1.ws_order_number in (select ws_order_number
                            from ws_wh)
and ws1.ws_order_number in (select wr_order_number
                            from web_returns,ws_wh
                            where wr_order_number = ws_wh.ws_order_number)
order by count(distinct ws_order_number)
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Input: default@web_site
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 12 (BROADCAST_EDGE), Reducer 14 (BROADCAST_EDGE), Reducer 16 (BROADCAST_EDGE)
Map 17 <- Reducer 10 (BROADCAST_EDGE)
Map 20 <- Reducer 10 (BROADCAST_EDGE)
Reducer 10 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE)
Reducer 19 <- Map 21 (SIMPLE_EDGE), Reducer 18 (ONE_TO_ONE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 11 (SIMPLE_EDGE)
Reducer 3 <- Map 13 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 15 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 18 (ONE_TO_ONE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 19 (ONE_TO_ONE_EDGE), Reducer 5 (ONE_TO_ONE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_265]
        Limit [LIM_264] (rows=1 width=240)
          Number of rows:100
          Select Operator [SEL_263] (rows=1 width=240)
            Output:["_col0","_col1","_col2"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_262]
              Select Operator [SEL_261] (rows=1 width=240)
                Output:["_col1","_col2","_col3"]
                Group By Operator [GBY_260] (rows=1 width=232)
                  Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"]
                <-Reducer 7 [CUSTOM_SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_259]
                    Group By Operator [GBY_258] (rows=1 width=232)
                      Output:["_col0","_col1","_col2"],aggregations:["count(_col0)","sum(_col1)","sum(_col2)"]
                      Group By Operator [GBY_257] (rows=143895019 width=228)
                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                      <-Reducer 6 [SIMPLE_EDGE]
                        SHUFFLE [RS_101]
                          PartitionCols:_col0
                          Group By Operator [GBY_100] (rows=143895019 width=228)
                            Output:["_col0","_col2","_col3"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col3
                            Merge Join Operator [MERGEJOIN_219] (rows=83469759007 width=227)
                              Conds:RS_47._col3=RS_48._col0(Inner),Output:["_col3","_col4","_col5"]
                            <-Reducer 19 [ONE_TO_ONE_EDGE]
                              FORWARD [RS_48]
                                PartitionCols:_col0
                                Select Operator [SEL_34] (rows=1384229738 width=4)
                                  Output:["_col0"]
                                  Merge Join Operator [MERGEJOIN_213] (rows=1384229738 width=4)
                                    Conds:RS_31._col0=RS_256.wr_order_number(Inner),Output:["_col14"]
                                  <-Reducer 18 [ONE_TO_ONE_EDGE]
                                    FORWARD [RS_31]
                                      PartitionCols:_col0
                                      Select Operator [SEL_29] (rows=1411940834 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_28] (rows=1411940834 width=11)
                                          predicate:(_col0 <> _col2)
                                          Merge Join Operator [MERGEJOIN_212] (rows=1411940834 width=11)
                                            Conds:RS_252._col1=RS_255._col1(Inner),Output:["_col0","_col1","_col2"]
                                          <-Map 17 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_252]
                                              PartitionCols:_col1
                                              Select Operator [SEL_251] (rows=144002668 width=7)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_250] (rows=144002668 width=7)
                                                  predicate:(in_bloom_filter(ws_order_number, DynamicValue(RS_44_ws1_ws_order_number_bloom_filter)) and ws_order_number BETWEEN DynamicValue(RS_44_ws1_ws_order_number_min) AND DynamicValue(RS_44_ws1_ws_order_number_max))
                                                  TableScan [TS_21] (rows=144002668 width=7)
                                                    default@web_sales,ws1,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_warehouse_sk","ws_order_number"]
                                                  <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_248]
                                                      Group By Operator [GBY_247] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
                                                        SHUFFLE [RS_163]
                                                          Group By Operator [GBY_162] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_161] (rows=5022875 width=8)
                                                              Output:["_col0"]
                                                              Merge Join Operator [MERGEJOIN_216] (rows=5022875 width=227)
                                                                Conds:RS_41._col2=RS_238._col0(Inner),Output:["_col3","_col4","_col5"]
                                                              <-Map 15 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_238]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_237] (rows=12 width=4)
                                                                    Output:["_col0"]
                                                                    Filter Operator [FIL_236] (rows=12 width=92)
                                                                      predicate:(web_company_name = 'pri')
                                                                      TableScan [TS_9] (rows=84 width=92)
                                                                        default@web_site,web_site,Tbl:COMPLETE,Col:COMPLETE,Output:["web_site_sk","web_company_name"]
                                                              <-Reducer 3 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_41]
                                                                  PartitionCols:_col2
                                                                  Merge Join Operator [MERGEJOIN_215] (rows=15673790 width=231)
                                                                    Conds:RS_38._col1=RS_230._col0(Inner),Output:["_col2","_col3","_col4","_col5"]
                                                                  <-Map 13 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_230]
                                                                      PartitionCols:_col0
                                                                      Select Operator [SEL_229] (rows=784314 width=4)
                                                                        Output:["_col0"]
                                                                        Filter Operator [FIL_228] (rows=784314 width=90)
                                                                          predicate:(ca_state = 'TX')
                                                                          TableScan [TS_6] (rows=40000000 width=90)
                                                                            default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state"]
                                                                  <-Reducer 2 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_38]
                                                                      PartitionCols:_col1
                                                                      Merge Join Operator [MERGEJOIN_214] (rows=15987241 width=235)
                                                                        Conds:RS_246._col0=RS_222._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                                                      <-Map 11 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_222]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_221] (rows=8116 width=98)
                                                                            Output:["_col0"]
                                                                            Filter Operator [FIL_220] (rows=8116 width=98)
                                                                              predicate:CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1999-05-01 00:00:00' AND TIMESTAMP'1999-06-30 00:00:00'
                                                                              TableScan [TS_3] (rows=73049 width=98)
                                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_246]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_245] (rows=143895019 width=239)
                                                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                            Filter Operator [FIL_244] (rows=143895019 width=239)
                                                                              predicate:((ws_ship_addr_sk BETWEEN DynamicValue(RS_39_customer_address_ca_address_sk_min) AND DynamicValue(RS_39_customer_address_ca_address_sk_max) and in_bloom_filter(ws_ship_addr_sk, DynamicValue(RS_39_customer_address_ca_address_sk_bloom_filter))) and (ws_ship_date_sk BETWEEN DynamicValue(RS_36_date_dim_d_date_sk_min) AND DynamicValue(RS_36_date_dim_d_date_sk_max) and in_bloom_filter(ws_ship_date_sk, DynamicValue(RS_36_date_dim_d_date_sk_bloom_filter))) and (ws_web_site_sk BETWEEN DynamicValue(RS_42_web_site_web_site_sk_min) AND DynamicValue(RS_42_web_site_web_site_sk_max) and in_bloom_filter(ws_web_site_sk, DynamicValue(RS_42_web_site_web_site_sk_bloom_filter))) and ws_ship_addr_sk is not null and ws_ship_date_sk is not null and ws_web_site_sk is not null)
                                                                              TableScan [TS_0] (rows=144002668 width=239)
                                                                                default@web_sales,ws1,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_ship_date_sk","ws_ship_addr_sk","ws_web_site_sk","ws_order_number","ws_ext_ship_cost","ws_net_profit"]
                                                                              <-Reducer 12 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_227]
                                                                                  Group By Operator [GBY_226] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                  <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    SHUFFLE [RS_225]
                                                                                      Group By Operator [GBY_224] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                        Select Operator [SEL_223] (rows=8116 width=4)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Select Operator [SEL_221]
                                                                              <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_235]
                                                                                  Group By Operator [GBY_234] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                  <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    SHUFFLE [RS_233]
                                                                                      Group By Operator [GBY_232] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                        Select Operator [SEL_231] (rows=784314 width=4)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Select Operator [SEL_229]
                                                                              <-Reducer 16 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_243]
                                                                                  Group By Operator [GBY_242] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                  <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    SHUFFLE [RS_241]
                                                                                      Group By Operator [GBY_240] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                        Select Operator [SEL_239] (rows=12 width=4)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Select Operator [SEL_237]
                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_255]
                                              PartitionCols:_col1
                                              Select Operator [SEL_254] (rows=144002668 width=7)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_253] (rows=144002668 width=7)
                                                  predicate:(in_bloom_filter(ws_order_number, DynamicValue(RS_44_ws1_ws_order_number_bloom_filter)) and ws_order_number BETWEEN DynamicValue(RS_44_ws1_ws_order_number_min) AND DynamicValue(RS_44_ws1_ws_order_number_max))
                                                  TableScan [TS_23] (rows=144002668 width=7)
                                                    default@web_sales,ws2,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_warehouse_sk","ws_order_number"]
                                                  <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_249]
                                                       Please refer to the previous Group By Operator [GBY_247]
                                  <-Map 21 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_256]
                                      PartitionCols:wr_order_number
                                      TableScan [TS_30] (rows=14398467 width=4)
                                        default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_order_number"]
                            <-Reducer 5 [ONE_TO_ONE_EDGE]
                              FORWARD [RS_47]
                                PartitionCols:_col3
                                Merge Join Operator [MERGEJOIN_218] (rows=482885639 width=227)
                                  Conds:RS_44._col3=RS_45._col0(Inner),Output:["_col3","_col4","_col5"]
                                <-Reducer 18 [ONE_TO_ONE_EDGE]
                                  FORWARD [RS_45]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_29]
                                <-Reducer 4 [SIMPLE_EDGE]
                                  SHUFFLE [RS_44]
                                    PartitionCols:_col3
                                     Please refer to the previous Merge Join Operator [MERGEJOIN_216]

