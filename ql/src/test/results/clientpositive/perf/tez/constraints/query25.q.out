PREHOOK: query: explain
select  
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 ,sum(ss_net_profit) as store_sales_profit
 ,sum(sr_net_loss) as store_returns_loss
 ,sum(cs_net_profit) as catalog_sales_profit
 from
 store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where
 d1.d_moy = 4
 and d1.d_year = 2000
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_moy               between 4 and  10
 and d2.d_year              = 2000
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_moy               between 4 and  10 
 and d3.d_year              = 2000
 group by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 order by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 ,sum(ss_net_profit) as store_sales_profit
 ,sum(sr_net_loss) as store_returns_loss
 ,sum(cs_net_profit) as catalog_sales_profit
 from
 store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where
 d1.d_moy = 4
 and d1.d_year = 2000
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_moy               between 4 and  10
 and d2.d_year              = 2000
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_moy               between 4 and  10 
 and d3.d_year              = 2000
 group by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 order by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Map 14 <- Reducer 12 (BROADCAST_EDGE)
Reducer 10 <- Map 14 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 12 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Map 15 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Reducer 11 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 16 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 17 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_246]
        Limit [LIM_245] (rows=100 width=808)
          Number of rows:100
          Select Operator [SEL_244] (rows=97302218301 width=808)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_243]
              Group By Operator [GBY_242] (rows=97302218301 width=808)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
              <-Reducer 5 [SIMPLE_EDGE]
                SHUFFLE [RS_47]
                  PartitionCols:_col0, _col1, _col2, _col3
                  Group By Operator [GBY_46] (rows=97302218301 width=808)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col10)","sum(_col16)","sum(_col3)"],keys:_col22, _col23, _col19, _col20
                    Top N Key Operator [TNK_93] (rows=97302218301 width=807)
                      keys:_col22, _col23, _col19, _col20,top n:100
                      Merge Join Operator [MERGEJOIN_209] (rows=97302218301 width=807)
                        Conds:RS_42._col6=RS_241._col0(Inner),Output:["_col3","_col10","_col16","_col19","_col20","_col22","_col23"]
                      <-Map 17 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_241]
                          PartitionCols:_col0
                          Select Operator [SEL_240] (rows=462000 width=288)
                            Output:["_col0","_col1","_col2"]
                            TableScan [TS_31] (rows=462000 width=288)
                              default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id","i_item_desc"]
                      <-Reducer 4 [SIMPLE_EDGE]
                        SHUFFLE [RS_42]
                          PartitionCols:_col6
                          Merge Join Operator [MERGEJOIN_208] (rows=97302218301 width=527)
                            Conds:RS_39._col8=RS_239._col0(Inner),Output:["_col3","_col6","_col10","_col16","_col19","_col20"]
                          <-Map 16 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_239]
                              PartitionCols:_col0
                              Select Operator [SEL_238] (rows=1704 width=192)
                                Output:["_col0","_col1","_col2"]
                                TableScan [TS_29] (rows=1704 width=192)
                                  default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id","s_store_name"]
                          <-Reducer 3 [SIMPLE_EDGE]
                            SHUFFLE [RS_39]
                              PartitionCols:_col8
                              Merge Join Operator [MERGEJOIN_207] (rows=97302218301 width=343)
                                Conds:RS_36._col1, _col2=RS_37._col9, _col8(Inner),Output:["_col3","_col6","_col8","_col10","_col16"]
                              <-Reducer 11 [SIMPLE_EDGE]
                                SHUFFLE [RS_37]
                                  PartitionCols:_col9, _col8
                                  Merge Join Operator [MERGEJOIN_206] (rows=478292911 width=234)
                                    Conds:RS_25._col2, _col1, _col4=RS_26._col2, _col1, _col3(Inner),Output:["_col1","_col3","_col5","_col8","_col9","_col11"]
                                  <-Reducer 10 [SIMPLE_EDGE]
                                    SHUFFLE [RS_25]
                                      PartitionCols:_col2, _col1, _col4
                                      Merge Join Operator [MERGEJOIN_204] (rows=501694138 width=122)
                                        Conds:RS_234._col0=RS_218._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_218]
                                          PartitionCols:_col0
                                          Select Operator [SEL_214] (rows=50 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_211] (rows=50 width=12)
                                              predicate:((d_year = 2000) and (d_moy = 4))
                                              TableScan [TS_3] (rows=73049 width=12)
                                                default@date_dim,d3,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                      <-Map 14 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_234]
                                          PartitionCols:_col0
                                          Select Operator [SEL_233] (rows=501694138 width=126)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_232] (rows=501694138 width=126)
                                              predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_store_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_23_d1_d_date_sk_min) AND DynamicValue(RS_23_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_23_d1_d_date_sk_bloom_filter)))
                                              TableScan [TS_6] (rows=575995635 width=126)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_net_profit"]
                                              <-Reducer 12 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_231]
                                                  Group By Operator [GBY_230] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_224]
                                                      Group By Operator [GBY_222] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_219] (rows=50 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_214]
                                  <-Reducer 13 [SIMPLE_EDGE]
                                    SHUFFLE [RS_26]
                                      PartitionCols:_col2, _col1, _col3
                                      Merge Join Operator [MERGEJOIN_205] (rows=53632139 width=119)
                                        Conds:RS_237._col0=RS_220._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_220]
                                          PartitionCols:_col0
                                          Select Operator [SEL_215] (rows=351 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_212] (rows=351 width=12)
                                              predicate:((d_year = 2000) and d_moy BETWEEN 4 AND 10)
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 15 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_237]
                                          PartitionCols:_col0
                                          Select Operator [SEL_236] (rows=53632139 width=123)
                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                            Filter Operator [FIL_235] (rows=53632139 width=123)
                                              predicate:(sr_customer_sk is not null and sr_returned_date_sk is not null)
                                              TableScan [TS_12] (rows=57591150 width=123)
                                                default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_returned_date_sk","sr_item_sk","sr_customer_sk","sr_ticket_number","sr_net_loss"]
                              <-Reducer 2 [SIMPLE_EDGE]
                                SHUFFLE [RS_36]
                                  PartitionCols:_col1, _col2
                                  Merge Join Operator [MERGEJOIN_203] (rows=285117831 width=119)
                                    Conds:RS_229._col0=RS_216._col0(Inner),Output:["_col1","_col2","_col3"]
                                  <-Map 8 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_216]
                                      PartitionCols:_col0
                                      Select Operator [SEL_213] (rows=351 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_210] (rows=351 width=12)
                                          predicate:((d_year = 2000) and d_moy BETWEEN 4 AND 10)
                                           Please refer to the previous TableScan [TS_3]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_229]
                                      PartitionCols:_col0
                                      Select Operator [SEL_228] (rows=285117831 width=123)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Filter Operator [FIL_227] (rows=285117831 width=123)
                                          predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_34_d3_d_date_sk_min) AND DynamicValue(RS_34_d3_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_34_d3_d_date_sk_bloom_filter)))
                                          TableScan [TS_0] (rows=287989836 width=123)
                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_net_profit"]
                                          <-Reducer 9 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_226]
                                              Group By Operator [GBY_225] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_223]
                                                  Group By Operator [GBY_221] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_217] (rows=351 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_213]

