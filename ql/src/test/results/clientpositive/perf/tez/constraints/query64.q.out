PREHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@income_band
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@income_band
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 48 (BROADCAST_EDGE)
Map 38 <- Reducer 20 (BROADCAST_EDGE)
Map 52 <- Reducer 49 (BROADCAST_EDGE)
Map 53 <- Reducer 36 (BROADCAST_EDGE)
Reducer 10 <- Map 47 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 47 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Map 50 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Map 50 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 51 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 51 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE), Reducer 35 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Map 19 (SIMPLE_EDGE), Map 52 (SIMPLE_EDGE)
Reducer 22 <- Map 47 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 37 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE), Reducer 43 (SIMPLE_EDGE)
Reducer 25 <- Map 44 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Map 45 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Map 46 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)
Reducer 28 <- Map 46 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Map 47 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 3 <- Map 47 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 47 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Map 50 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE)
Reducer 32 <- Map 50 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 33 <- Map 51 (SIMPLE_EDGE), Reducer 32 (SIMPLE_EDGE)
Reducer 34 <- Map 51 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 35 <- Reducer 34 (SIMPLE_EDGE)
Reducer 36 <- Map 19 (CUSTOM_SIMPLE_EDGE)
Reducer 39 <- Map 38 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 4 <- Map 37 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Reducer 39 (SIMPLE_EDGE)
Reducer 42 <- Map 41 (SIMPLE_EDGE), Map 53 (SIMPLE_EDGE)
Reducer 43 <- Reducer 42 (SIMPLE_EDGE)
Reducer 48 <- Map 47 (CUSTOM_SIMPLE_EDGE)
Reducer 49 <- Map 47 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE), Reducer 40 (SIMPLE_EDGE)
Reducer 6 <- Map 44 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 45 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 46 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 46 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 18 vectorized
      File Output Operator [FS_1128]
        Select Operator [SEL_1127] (rows=104628491644 width=1702)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20"]
        <-Reducer 17 [SIMPLE_EDGE]
          SHUFFLE [RS_201]
            Select Operator [SEL_200] (rows=104628491644 width=1694)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18"]
              Filter Operator [FIL_199] (rows=104628491644 width=1694)
                predicate:(_col3 <= _col19)
                Merge Join Operator [MERGEJOIN_1027] (rows=313885474933 width=1694)
                  Conds:RS_1107._col1, _col0, _col2=RS_1126._col2, _col1, _col3(Inner),Output:["_col3","_col4","_col5","_col6","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22"]
                <-Reducer 16 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_1107]
                    PartitionCols:_col1, _col0, _col2
                    Select Operator [SEL_1106] (rows=21304422 width=525)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                      Filter Operator [FIL_1105] (rows=21304422 width=1255)
                        predicate:_col13 is not null
                        Select Operator [SEL_1104] (rows=21304422 width=1255)
                          Output:["_col0","_col1","_col2","_col13","_col14","_col15","_col16"]
                          Group By Operator [GBY_1103] (rows=21304422 width=1255)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12
                          <-Reducer 15 [SIMPLE_EDGE]
                            SHUFFLE [RS_93]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                              Group By Operator [GBY_92] (rows=21304422 width=1255)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16"],aggregations:["count()","sum(_col8)","sum(_col9)","sum(_col10)"],keys:_col24, _col11, _col25, _col29, _col31, _col37, _col38, _col39, _col40, _col42, _col43, _col44, _col45
                                Merge Join Operator [MERGEJOIN_1011] (rows=21304422 width=1048)
                                  Conds:RS_88._col17=RS_1100._col0(Inner),Output:["_col8","_col9","_col10","_col11","_col24","_col25","_col29","_col31","_col37","_col38","_col39","_col40","_col42","_col43","_col44","_col45"]
                                <-Map 51 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_1100]
                                    PartitionCols:_col0
                                    Select Operator [SEL_1098] (rows=40000000 width=365)
                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                      TableScan [TS_44] (rows=40000000 width=365)
                                        default@customer_address,ad1,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_street_number","ca_street_name","ca_city","ca_zip"]
                                <-Reducer 14 [SIMPLE_EDGE]
                                  SHUFFLE [RS_88]
                                    PartitionCols:_col17
                                    Merge Join Operator [MERGEJOIN_1010] (rows=21304422 width=691)
                                      Conds:RS_85._col5=RS_1099._col0(Inner),Output:["_col8","_col9","_col10","_col11","_col17","_col24","_col25","_col29","_col31","_col37","_col38","_col39","_col40"]
                                    <-Map 51 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_1099]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_1098]
                                    <-Reducer 13 [SIMPLE_EDGE]
                                      SHUFFLE [RS_85]
                                        PartitionCols:_col5
                                        Filter Operator [FIL_84] (rows=21304422 width=502)
                                          predicate:(_col33 <> _col35)
                                          Merge Join Operator [MERGEJOIN_1009] (rows=21304422 width=502)
                                            Conds:RS_81._col15=RS_1095._col0(Inner),Output:["_col5","_col8","_col9","_col10","_col11","_col17","_col24","_col25","_col29","_col31","_col33","_col35"]
                                          <-Map 50 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1095]
                                              PartitionCols:_col0
                                              Select Operator [SEL_1093] (rows=1861800 width=89)
                                                Output:["_col0","_col1"]
                                                TableScan [TS_40] (rows=1861800 width=89)
                                                  default@customer_demographics,cd1,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status"]
                                          <-Reducer 12 [SIMPLE_EDGE]
                                            SHUFFLE [RS_81]
                                              PartitionCols:_col15
                                              Merge Join Operator [MERGEJOIN_1008] (rows=21007353 width=418)
                                                Conds:RS_78._col3=RS_1094._col0(Inner),Output:["_col5","_col8","_col9","_col10","_col11","_col15","_col17","_col24","_col25","_col29","_col31","_col33"]
                                              <-Map 50 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1094]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1093]
                                              <-Reducer 11 [SIMPLE_EDGE]
                                                SHUFFLE [RS_78]
                                                  PartitionCols:_col3
                                                  Merge Join Operator [MERGEJOIN_1007] (rows=20714426 width=331)
                                                    Conds:RS_75._col18=RS_1034._col0(Inner),Output:["_col3","_col5","_col8","_col9","_col10","_col11","_col15","_col17","_col24","_col25","_col29","_col31"]
                                                  <-Map 47 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1034]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1028] (rows=73049 width=8)
                                                        Output:["_col0","_col1"]
                                                        TableScan [TS_38] (rows=73049 width=8)
                                                          default@date_dim,d3,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Reducer 10 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_75]
                                                      PartitionCols:_col18
                                                      Merge Join Operator [MERGEJOIN_1006] (rows=20714426 width=331)
                                                        Conds:RS_72._col19=RS_1036._col0(Inner),Output:["_col3","_col5","_col8","_col9","_col10","_col11","_col15","_col17","_col18","_col24","_col25","_col29"]
                                                      <-Map 47 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_1036]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1030] (rows=73049 width=8)
                                                            Output:["_col0","_col1"]
                                                             Please refer to the previous TableScan [TS_38]
                                                      <-Reducer 9 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_72]
                                                          PartitionCols:_col19
                                                          Merge Join Operator [MERGEJOIN_1005] (rows=20714426 width=330)
                                                            Conds:RS_69._col16=RS_1090._col0(Inner),Output:["_col3","_col5","_col8","_col9","_col10","_col11","_col15","_col17","_col18","_col19","_col24","_col25"]
                                                          <-Map 46 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1090]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1088] (rows=7200 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_1087] (rows=7200 width=8)
                                                                  predicate:hd_income_band_sk is not null
                                                                  TableScan [TS_30] (rows=7200 width=8)
                                                                    default@household_demographics,hd1,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_income_band_sk"]
                                                          <-Reducer 8 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_69]
                                                              PartitionCols:_col16
                                                              Merge Join Operator [MERGEJOIN_1004] (rows=20714426 width=334)
                                                                Conds:RS_66._col4=RS_1089._col0(Inner),Output:["_col3","_col5","_col8","_col9","_col10","_col11","_col15","_col16","_col17","_col18","_col19","_col24","_col25"]
                                                              <-Map 46 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_1089]
                                                                  PartitionCols:_col0
                                                                   Please refer to the previous Select Operator [SEL_1088]
                                                              <-Reducer 7 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_66]
                                                                  PartitionCols:_col4
                                                                  Merge Join Operator [MERGEJOIN_1003] (rows=20714426 width=336)
                                                                    Conds:RS_63._col6=RS_1085._col0(Inner),Output:["_col3","_col4","_col5","_col8","_col9","_col10","_col11","_col15","_col16","_col17","_col18","_col19","_col24","_col25"]
                                                                  <-Map 45 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_1085]
                                                                      PartitionCols:_col0
                                                                      Select Operator [SEL_1084] (rows=1704 width=181)
                                                                        Output:["_col0","_col1","_col2"]
                                                                        Filter Operator [FIL_1083] (rows=1704 width=181)
                                                                          predicate:(s_store_name is not null and s_zip is not null)
                                                                          TableScan [TS_27] (rows=1704 width=181)
                                                                            default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_zip"]
                                                                  <-Reducer 6 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_63]
                                                                      PartitionCols:_col6
                                                                      Merge Join Operator [MERGEJOIN_1002] (rows=20714426 width=160)
                                                                        Conds:RS_60._col1, _col7=RS_1081._col0, _col1(Inner),Output:["_col3","_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col15","_col16","_col17","_col18","_col19"]
                                                                      <-Map 44 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1081]
                                                                          PartitionCols:_col0, _col1
                                                                          Select Operator [SEL_1080] (rows=57591150 width=8)
                                                                            Output:["_col0","_col1"]
                                                                            TableScan [TS_25] (rows=57591150 width=8)
                                                                              default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
                                                                      <-Reducer 5 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_60]
                                                                          PartitionCols:_col1, _col7
                                                                          Merge Join Operator [MERGEJOIN_1001] (rows=12564038 width=28)
                                                                            Conds:RS_57._col1=RS_1079._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col15","_col16","_col17","_col18","_col19"]
                                                                          <-Reducer 4 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_57]
                                                                              PartitionCols:_col1
                                                                              Merge Join Operator [MERGEJOIN_999] (rows=12564038 width=28)
                                                                                Conds:RS_54._col2=RS_1066._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col15","_col16","_col17","_col18","_col19"]
                                                                              <-Map 37 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1066]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_1065] (rows=69376329 width=23)
                                                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                                    Filter Operator [FIL_1064] (rows=69376329 width=23)
                                                                                      predicate:(c_first_shipto_date_sk is not null and c_first_sales_date_sk is not null and c_current_hdemo_sk is not null and c_current_cdemo_sk is not null and c_current_addr_sk is not null)
                                                                                      TableScan [TS_9] (rows=80000000 width=23)
                                                                                        default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk","c_first_shipto_date_sk","c_first_sales_date_sk"]
                                                                              <-Reducer 3 [SIMPLE_EDGE]
                                                                                SHUFFLE [RS_54]
                                                                                  PartitionCols:_col2
                                                                                  Merge Join Operator [MERGEJOIN_998] (rows=14487982 width=12)
                                                                                    Conds:RS_51._col0=RS_1040._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                                                  <-Map 47 [SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_1040]
                                                                                      PartitionCols:_col0
                                                                                      Select Operator [SEL_1035] (rows=652 width=4)
                                                                                        Output:["_col0"]
                                                                                        Filter Operator [FIL_1029] (rows=652 width=8)
                                                                                          predicate:(d_year = 2001)
                                                                                           Please refer to the previous TableScan [TS_38]
                                                                                  <-Reducer 2 [SIMPLE_EDGE]
                                                                                    SHUFFLE [RS_51]
                                                                                      PartitionCols:_col0
                                                                                      Merge Join Operator [MERGEJOIN_997] (rows=40575792 width=205)
                                                                                        Conds:RS_1052._col1=RS_1056._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                                                      <-Map 19 [SIMPLE_EDGE] vectorized
                                                                                        PARTITION_ONLY_SHUFFLE [RS_1056]
                                                                                          PartitionCols:_col0
                                                                                          Select Operator [SEL_1054] (rows=4667 width=4)
                                                                                            Output:["_col0"]
                                                                                            Filter Operator [FIL_1053] (rows=4667 width=204)
                                                                                              predicate:(i_current_price BETWEEN 36 AND 45 and (i_color) IN ('maroon', 'burnished', 'dim', 'steel', 'navajo', 'chocolate'))
                                                                                              TableScan [TS_3] (rows=462000 width=204)
                                                                                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_color","i_product_name"]
                                                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                                                        SHUFFLE [RS_1052]
                                                                                          PartitionCols:_col1
                                                                                          Select Operator [SEL_1051] (rows=417313408 width=351)
                                                                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                                                                                            Filter Operator [FIL_1050] (rows=417313408 width=355)
                                                                                              predicate:(ss_cdemo_sk is not null and ss_sold_date_sk is not null and ss_promo_sk is not null and ss_addr_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_52_d1_d_date_sk_min) AND DynamicValue(RS_52_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_52_d1_d_date_sk_bloom_filter)))
                                                                                              TableScan [TS_0] (rows=575995635 width=355)
                                                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                                              <-Reducer 48 [BROADCAST_EDGE] vectorized
                                                                                                BROADCAST [RS_1049]
                                                                                                  Group By Operator [GBY_1048] (rows=1 width=12)
                                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                                  <-Map 47 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                                    PARTITION_ONLY_SHUFFLE [RS_1046]
                                                                                                      Group By Operator [GBY_1044] (rows=1 width=12)
                                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                        Select Operator [SEL_1041] (rows=652 width=4)
                                                                                                          Output:["_col0"]
                                                                                                           Please refer to the previous Select Operator [SEL_1035]
                                                                          <-Reducer 40 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1079]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1078] (rows=13257 width=4)
                                                                                Output:["_col0"]
                                                                                Filter Operator [FIL_1077] (rows=13257 width=228)
                                                                                  predicate:(_col1 > (2 * _col2))
                                                                                  Group By Operator [GBY_1076] (rows=39773 width=228)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                                                  <-Reducer 39 [SIMPLE_EDGE]
                                                                                    SHUFFLE [RS_21]
                                                                                      PartitionCols:_col0
                                                                                      Group By Operator [GBY_20] (rows=6482999 width=228)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col5)"],keys:_col0
                                                                                        Merge Join Operator [MERGEJOIN_1000] (rows=183085709 width=227)
                                                                                          Conds:RS_1072._col0, _col1=RS_1074._col0, _col1(Inner),Output:["_col0","_col2","_col5"]
                                                                                        <-Map 41 [SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1074]
                                                                                            PartitionCols:_col0, _col1
                                                                                            Select Operator [SEL_1073] (rows=28798881 width=120)
                                                                                              Output:["_col0","_col1","_col2"]
                                                                                              TableScan [TS_14] (rows=28798881 width=337)
                                                                                                default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_refunded_cash","cr_reversed_charge","cr_store_credit"]
                                                                                        <-Map 38 [SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1072]
                                                                                            PartitionCols:_col0, _col1
                                                                                            Select Operator [SEL_1071] (rows=287989836 width=119)
                                                                                              Output:["_col0","_col1","_col2"]
                                                                                              Filter Operator [FIL_1070] (rows=287989836 width=119)
                                                                                                predicate:(cs_item_sk BETWEEN DynamicValue(RS_49_item_i_item_sk_min) AND DynamicValue(RS_49_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_49_item_i_item_sk_bloom_filter)))
                                                                                                TableScan [TS_12] (rows=287989836 width=119)
                                                                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                                                <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                                                                  BROADCAST [RS_1069]
                                                                                                    Group By Operator [GBY_1068] (rows=1 width=12)
                                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                                    <-Map 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                                      PARTITION_ONLY_SHUFFLE [RS_1062]
                                                                                                        Group By Operator [GBY_1060] (rows=1 width=12)
                                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                          Select Operator [SEL_1057] (rows=4667 width=4)
                                                                                                            Output:["_col0"]
                                                                                                             Please refer to the previous Select Operator [SEL_1054]
                <-Reducer 35 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_1126]
                    PartitionCols:_col2, _col1, _col3
                    Select Operator [SEL_1125] (rows=21304422 width=1354)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                      Filter Operator [FIL_1124] (rows=21304422 width=1362)
                        predicate:_col14 is not null
                        Select Operator [SEL_1123] (rows=21304422 width=1362)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col14","_col15","_col16","_col17"]
                          Group By Operator [GBY_1122] (rows=21304422 width=1362)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                          <-Reducer 34 [SIMPLE_EDGE]
                            SHUFFLE [RS_191]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                              Group By Operator [GBY_190] (rows=21304422 width=1362)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col8)","sum(_col9)","sum(_col10)"],keys:_col24, _col11, _col25, _col12, _col29, _col31, _col37, _col38, _col39, _col40, _col42, _col43, _col44, _col45
                                Merge Join Operator [MERGEJOIN_1026] (rows=21304422 width=1155)
                                  Conds:RS_186._col17=RS_1102._col0(Inner),Output:["_col8","_col9","_col10","_col11","_col12","_col24","_col25","_col29","_col31","_col37","_col38","_col39","_col40","_col42","_col43","_col44","_col45"]
                                <-Map 51 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_1102]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_1098]
                                <-Reducer 33 [SIMPLE_EDGE]
                                  SHUFFLE [RS_186]
                                    PartitionCols:_col17
                                    Merge Join Operator [MERGEJOIN_1025] (rows=21304422 width=798)
                                      Conds:RS_183._col5=RS_1101._col0(Inner),Output:["_col8","_col9","_col10","_col11","_col12","_col17","_col24","_col25","_col29","_col31","_col37","_col38","_col39","_col40"]
                                    <-Map 51 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_1101]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_1098]
                                    <-Reducer 32 [SIMPLE_EDGE]
                                      SHUFFLE [RS_183]
                                        PartitionCols:_col5
                                        Filter Operator [FIL_182] (rows=21304422 width=609)
                                          predicate:(_col33 <> _col35)
                                          Merge Join Operator [MERGEJOIN_1024] (rows=21304422 width=609)
                                            Conds:RS_179._col15=RS_1097._col0(Inner),Output:["_col5","_col8","_col9","_col10","_col11","_col12","_col17","_col24","_col25","_col29","_col31","_col33","_col35"]
                                          <-Map 50 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1097]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_1093]
                                          <-Reducer 31 [SIMPLE_EDGE]
                                            SHUFFLE [RS_179]
                                              PartitionCols:_col15
                                              Merge Join Operator [MERGEJOIN_1023] (rows=21007353 width=525)
                                                Conds:RS_176._col3=RS_1096._col0(Inner),Output:["_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col17","_col24","_col25","_col29","_col31","_col33"]
                                              <-Map 50 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1096]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1093]
                                              <-Reducer 30 [SIMPLE_EDGE]
                                                SHUFFLE [RS_176]
                                                  PartitionCols:_col3
                                                  Merge Join Operator [MERGEJOIN_1022] (rows=20714426 width=438)
                                                    Conds:RS_173._col18=RS_1038._col0(Inner),Output:["_col3","_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col17","_col24","_col25","_col29","_col31"]
                                                  <-Map 47 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1038]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1032] (rows=73049 width=8)
                                                        Output:["_col0","_col1"]
                                                         Please refer to the previous TableScan [TS_38]
                                                  <-Reducer 29 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_173]
                                                      PartitionCols:_col18
                                                      Merge Join Operator [MERGEJOIN_1021] (rows=20714426 width=438)
                                                        Conds:RS_170._col19=RS_1037._col0(Inner),Output:["_col3","_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col17","_col18","_col24","_col25","_col29"]
                                                      <-Map 47 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_1037]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1031] (rows=73049 width=8)
                                                            Output:["_col0","_col1"]
                                                             Please refer to the previous TableScan [TS_38]
                                                      <-Reducer 28 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_170]
                                                          PartitionCols:_col19
                                                          Merge Join Operator [MERGEJOIN_1020] (rows=20714426 width=437)
                                                            Conds:RS_167._col16=RS_1092._col0(Inner),Output:["_col3","_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col17","_col18","_col19","_col24","_col25"]
                                                          <-Map 46 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1092]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1088]
                                                          <-Reducer 27 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_167]
                                                              PartitionCols:_col16
                                                              Merge Join Operator [MERGEJOIN_1019] (rows=20714426 width=441)
                                                                Conds:RS_164._col4=RS_1091._col0(Inner),Output:["_col3","_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col16","_col17","_col18","_col19","_col24","_col25"]
                                                              <-Map 46 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_1091]
                                                                  PartitionCols:_col0
                                                                   Please refer to the previous Select Operator [SEL_1088]
                                                              <-Reducer 26 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_164]
                                                                  PartitionCols:_col4
                                                                  Merge Join Operator [MERGEJOIN_1018] (rows=20714426 width=443)
                                                                    Conds:RS_161._col6=RS_1086._col0(Inner),Output:["_col3","_col4","_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col16","_col17","_col18","_col19","_col24","_col25"]
                                                                  <-Map 45 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_1086]
                                                                      PartitionCols:_col0
                                                                       Please refer to the previous Select Operator [SEL_1084]
                                                                  <-Reducer 25 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_161]
                                                                      PartitionCols:_col6
                                                                      Merge Join Operator [MERGEJOIN_1017] (rows=20714426 width=267)
                                                                        Conds:RS_158._col1, _col7=RS_1082._col0, _col1(Inner),Output:["_col3","_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col15","_col16","_col17","_col18","_col19"]
                                                                      <-Map 44 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1082]
                                                                          PartitionCols:_col0, _col1
                                                                           Please refer to the previous Select Operator [SEL_1080]
                                                                      <-Reducer 24 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_158]
                                                                          PartitionCols:_col1, _col7
                                                                          Merge Join Operator [MERGEJOIN_1016] (rows=12564038 width=135)
                                                                            Conds:RS_155._col1=RS_1121._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15","_col16","_col17","_col18","_col19"]
                                                                          <-Reducer 23 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_155]
                                                                              PartitionCols:_col1
                                                                              Merge Join Operator [MERGEJOIN_1014] (rows=12564038 width=135)
                                                                                Conds:RS_152._col2=RS_1067._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15","_col16","_col17","_col18","_col19"]
                                                                              <-Map 37 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1067]
                                                                                  PartitionCols:_col0
                                                                                   Please refer to the previous Select Operator [SEL_1065]
                                                                              <-Reducer 22 [SIMPLE_EDGE]
                                                                                SHUFFLE [RS_152]
                                                                                  PartitionCols:_col2
                                                                                  Merge Join Operator [MERGEJOIN_1013] (rows=14487982 width=119)
                                                                                    Conds:RS_149._col0=RS_1042._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                                                  <-Map 47 [SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_1042]
                                                                                      PartitionCols:_col0
                                                                                      Select Operator [SEL_1039] (rows=652 width=4)
                                                                                        Output:["_col0"]
                                                                                        Filter Operator [FIL_1033] (rows=652 width=8)
                                                                                          predicate:(d_year = 2000)
                                                                                           Please refer to the previous TableScan [TS_38]
                                                                                  <-Reducer 21 [SIMPLE_EDGE]
                                                                                    SHUFFLE [RS_149]
                                                                                      PartitionCols:_col0
                                                                                      Merge Join Operator [MERGEJOIN_1012] (rows=40575792 width=312)
                                                                                        Conds:RS_1112._col1=RS_1058._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                                                      <-Map 19 [SIMPLE_EDGE] vectorized
                                                                                        PARTITION_ONLY_SHUFFLE [RS_1058]
                                                                                          PartitionCols:_col0
                                                                                          Select Operator [SEL_1055] (rows=4667 width=111)
                                                                                            Output:["_col0","_col1"]
                                                                                             Please refer to the previous Filter Operator [FIL_1053]
                                                                                      <-Map 52 [SIMPLE_EDGE] vectorized
                                                                                        SHUFFLE [RS_1112]
                                                                                          PartitionCols:_col1
                                                                                          Select Operator [SEL_1111] (rows=417313408 width=351)
                                                                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                                                                                            Filter Operator [FIL_1110] (rows=417313408 width=355)
                                                                                              predicate:(ss_cdemo_sk is not null and ss_sold_date_sk is not null and ss_promo_sk is not null and ss_addr_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_150_d1_d_date_sk_min) AND DynamicValue(RS_150_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_150_d1_d_date_sk_bloom_filter)))
                                                                                              TableScan [TS_98] (rows=575995635 width=355)
                                                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                                              <-Reducer 49 [BROADCAST_EDGE] vectorized
                                                                                                BROADCAST [RS_1109]
                                                                                                  Group By Operator [GBY_1108] (rows=1 width=12)
                                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                                  <-Map 47 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                                    PARTITION_ONLY_SHUFFLE [RS_1047]
                                                                                                      Group By Operator [GBY_1045] (rows=1 width=12)
                                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                        Select Operator [SEL_1043] (rows=652 width=4)
                                                                                                          Output:["_col0"]
                                                                                                           Please refer to the previous Select Operator [SEL_1039]
                                                                          <-Reducer 43 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1121]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1120] (rows=13257 width=4)
                                                                                Output:["_col0"]
                                                                                Filter Operator [FIL_1119] (rows=13257 width=228)
                                                                                  predicate:(_col1 > (2 * _col2))
                                                                                  Group By Operator [GBY_1118] (rows=39773 width=228)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                                                  <-Reducer 42 [SIMPLE_EDGE]
                                                                                    SHUFFLE [RS_119]
                                                                                      PartitionCols:_col0
                                                                                      Group By Operator [GBY_118] (rows=6482999 width=228)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col5)"],keys:_col0
                                                                                        Merge Join Operator [MERGEJOIN_1015] (rows=183085709 width=227)
                                                                                          Conds:RS_1117._col0, _col1=RS_1075._col0, _col1(Inner),Output:["_col0","_col2","_col5"]
                                                                                        <-Map 41 [SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1075]
                                                                                            PartitionCols:_col0, _col1
                                                                                             Please refer to the previous Select Operator [SEL_1073]
                                                                                        <-Map 53 [SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1117]
                                                                                            PartitionCols:_col0, _col1
                                                                                            Select Operator [SEL_1116] (rows=287989836 width=119)
                                                                                              Output:["_col0","_col1","_col2"]
                                                                                              Filter Operator [FIL_1115] (rows=287989836 width=119)
                                                                                                predicate:(cs_item_sk BETWEEN DynamicValue(RS_147_item_i_item_sk_min) AND DynamicValue(RS_147_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_147_item_i_item_sk_bloom_filter)))
                                                                                                TableScan [TS_110] (rows=287989836 width=119)
                                                                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                                                <-Reducer 36 [BROADCAST_EDGE] vectorized
                                                                                                  BROADCAST [RS_1114]
                                                                                                    Group By Operator [GBY_1113] (rows=1 width=12)
                                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                                    <-Map 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                                      PARTITION_ONLY_SHUFFLE [RS_1063]
                                                                                                        Group By Operator [GBY_1061] (rows=1 width=12)
                                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                          Select Operator [SEL_1059] (rows=4667 width=4)
                                                                                                            Output:["_col0"]
                                                                                                             Please refer to the previous Select Operator [SEL_1055]

