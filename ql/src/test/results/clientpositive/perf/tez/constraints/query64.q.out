PREHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@income_band
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@income_band
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 25 <- Reducer 30 (BROADCAST_EDGE), Reducer 36 (BROADCAST_EDGE), Reducer 42 (BROADCAST_EDGE)
Map 39 <- Reducer 30 (BROADCAST_EDGE)
Map 51 <- Reducer 16 (BROADCAST_EDGE), Reducer 34 (BROADCAST_EDGE), Reducer 37 (BROADCAST_EDGE), Reducer 46 (BROADCAST_EDGE)
Map 52 <- Reducer 34 (BROADCAST_EDGE)
Reducer 10 <- Map 48 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 49 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Map 50 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 13 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Reducer 33 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 18 <- Map 38 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE), Reducer 45 (ONE_TO_ONE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 49 (SIMPLE_EDGE)
Reducer 20 <- Map 47 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Map 48 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 49 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 50 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE)
Reducer 26 <- Map 25 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 27 <- Map 35 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)
Reducer 28 <- Map 38 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 3 <- Map 47 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Map 29 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE)
Reducer 32 <- Map 35 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 33 <- Map 38 (SIMPLE_EDGE), Reducer 32 (SIMPLE_EDGE)
Reducer 34 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 36 <- Map 35 (CUSTOM_SIMPLE_EDGE)
Reducer 37 <- Map 35 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Map 35 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Map 39 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE)
Reducer 41 <- Reducer 40 (SIMPLE_EDGE)
Reducer 42 <- Reducer 41 (CUSTOM_SIMPLE_EDGE)
Reducer 44 <- Map 43 (SIMPLE_EDGE), Map 52 (SIMPLE_EDGE)
Reducer 45 <- Reducer 44 (SIMPLE_EDGE)
Reducer 46 <- Reducer 45 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Map 35 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 28 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 38 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 41 (ONE_TO_ONE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 47 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 15 vectorized
      File Output Operator [FS_1045]
        Select Operator [SEL_1044] (rows=732552381 width=1702)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20"]
        <-Reducer 14 [SIMPLE_EDGE]
          SHUFFLE [RS_199]
            Select Operator [SEL_198] (rows=732552381 width=1694)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18"]
              Filter Operator [FIL_197] (rows=732552381 width=1694)
                predicate:(_col19 <= _col12)
                Merge Join Operator [MERGEJOIN_939] (rows=2197657144 width=1694)
                  Conds:RS_1015._col2, _col1, _col3=RS_1043._col1, _col0, _col2(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col19","_col20","_col21","_col22"]
                <-Reducer 13 [SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_1015]
                    PartitionCols:_col2, _col1, _col3
                    Select Operator [SEL_1014] (rows=1434227 width=1354)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                      Group By Operator [GBY_1013] (rows=1434227 width=1362)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                      <-Reducer 12 [SIMPLE_EDGE]
                        SHUFFLE [RS_94]
                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                          Group By Operator [GBY_93] (rows=1434227 width=1362)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col26)","sum(_col27)","sum(_col28)"],keys:_col37, _col29, _col38, _col40, _col41, _col42, _col43, _col7, _col8, _col9, _col10, _col13, _col15, _col30
                            Merge Join Operator [MERGEJOIN_923] (rows=2364621 width=1153)
                              Conds:RS_89._col19, _col25=RS_1011._col0, _col1(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col26","_col27","_col28","_col29","_col30","_col37","_col38","_col40","_col41","_col42","_col43"]
                            <-Map 50 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_1011]
                                PartitionCols:_col0, _col1
                                Select Operator [SEL_1010] (rows=57591150 width=8)
                                  Output:["_col0","_col1"]
                                  TableScan [TS_56] (rows=57591150 width=8)
                                    default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
                            <-Reducer 11 [SIMPLE_EDGE]
                              SHUFFLE [RS_89]
                                PartitionCols:_col19, _col25
                                Merge Join Operator [MERGEJOIN_922] (rows=1434227 width=1030)
                                  Conds:RS_86._col23=RS_944._col0(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col19","_col25","_col26","_col27","_col28","_col29","_col30","_col37","_col38","_col40","_col41","_col42","_col43"]
                                <-Map 49 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_944]
                                    PartitionCols:_col0
                                    Select Operator [SEL_943] (rows=40000000 width=365)
                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                      TableScan [TS_54] (rows=40000000 width=365)
                                        default@customer_address,ad1,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_street_number","ca_street_name","ca_city","ca_zip"]
                                <-Reducer 10 [SIMPLE_EDGE]
                                  SHUFFLE [RS_86]
                                    PartitionCols:_col23
                                    Merge Join Operator [MERGEJOIN_921] (rows=1434227 width=669)
                                      Conds:RS_83._col24=RS_1008._col0(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col19","_col23","_col25","_col26","_col27","_col28","_col29","_col30","_col37","_col38"]
                                    <-Map 48 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_1008]
                                        PartitionCols:_col0
                                        Select Operator [SEL_1007] (rows=1704 width=181)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_1006] (rows=1704 width=181)
                                            predicate:(s_store_name is not null and s_zip is not null)
                                            TableScan [TS_51] (rows=1704 width=181)
                                              default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_zip"]
                                    <-Reducer 9 [SIMPLE_EDGE]
                                      SHUFFLE [RS_83]
                                        PartitionCols:_col24
                                        Merge Join Operator [MERGEJOIN_920] (rows=1434227 width=492)
                                          Conds:RS_80._col22=RS_949._col0(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col19","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                                        <-Map 47 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_949]
                                            PartitionCols:_col0
                                            Select Operator [SEL_948] (rows=7200 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_947] (rows=7200 width=8)
                                                predicate:hd_income_band_sk is not null
                                                TableScan [TS_48] (rows=7200 width=8)
                                                  default@household_demographics,hd1,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_income_band_sk"]
                                        <-Reducer 8 [SIMPLE_EDGE]
                                          SHUFFLE [RS_80]
                                            PartitionCols:_col22
                                            Merge Join Operator [MERGEJOIN_919] (rows=1434227 width=492)
                                              Conds:RS_77._col19=RS_992._col0(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col19","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                                            <-Reducer 41 [ONE_TO_ONE_EDGE] vectorized
                                              FORWARD [RS_992]
                                                PartitionCols:_col0
                                                Select Operator [SEL_991] (rows=13257 width=4)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_990] (rows=13257 width=228)
                                                    predicate:(_col1 > (2 * _col2))
                                                    Group By Operator [GBY_989] (rows=39773 width=228)
                                                      Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                    <-Reducer 40 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_44]
                                                        PartitionCols:_col0
                                                        Group By Operator [GBY_43] (rows=6482999 width=228)
                                                          Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col5)"],keys:_col0
                                                          Merge Join Operator [MERGEJOIN_918] (rows=183085709 width=227)
                                                            Conds:RS_985._col0, _col1=RS_987._col0, _col1(Inner),Output:["_col0","_col2","_col5"]
                                                          <-Map 43 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_987]
                                                              PartitionCols:_col0, _col1
                                                              Select Operator [SEL_986] (rows=28798881 width=120)
                                                                Output:["_col0","_col1","_col2"]
                                                                TableScan [TS_37] (rows=28798881 width=337)
                                                                  default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_refunded_cash","cr_reversed_charge","cr_store_credit"]
                                                          <-Map 39 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_985]
                                                              PartitionCols:_col0, _col1
                                                              Select Operator [SEL_984] (rows=287989836 width=119)
                                                                Output:["_col0","_col1","_col2"]
                                                                Filter Operator [FIL_983] (rows=287989836 width=119)
                                                                  predicate:(cs_item_sk BETWEEN DynamicValue(RS_24_item_i_item_sk_min) AND DynamicValue(RS_24_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_24_item_i_item_sk_bloom_filter)))
                                                                  TableScan [TS_35] (rows=287989836 width=119)
                                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                  <-Reducer 30 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_980]
                                                                      Group By Operator [GBY_978] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_976]
                                                                          Group By Operator [GBY_974] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_971] (rows=518 width=4)
                                                                              Output:["_col0"]
                                                                              Select Operator [SEL_969] (rows=518 width=111)
                                                                                Output:["_col0","_col1"]
                                                                                Filter Operator [FIL_968] (rows=518 width=312)
                                                                                  predicate:((i_color) IN ('maroon', 'burnished', 'dim', 'steel', 'navajo', 'chocolate') and i_current_price BETWEEN 35 AND 45 and i_current_price BETWEEN 36 AND 50)
                                                                                  TableScan [TS_15] (rows=462000 width=311)
                                                                                    default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_color","i_product_name"]
                                            <-Reducer 7 [SIMPLE_EDGE]
                                              SHUFFLE [RS_77]
                                                PartitionCols:_col19
                                                Filter Operator [FIL_76] (rows=1434227 width=662)
                                                  predicate:(_col17 <> _col33)
                                                  Merge Join Operator [MERGEJOIN_917] (rows=1434227 width=662)
                                                    Conds:RS_73._col1=RS_1003._col0(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col17","_col19","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30","_col33"]
                                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1003]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1001] (rows=1861800 width=89)
                                                        Output:["_col0","_col1"]
                                                        TableScan [TS_21] (rows=1861800 width=89)
                                                          default@customer_demographics,cd1,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status"]
                                                  <-Reducer 6 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_73]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_916] (rows=1414229 width=573)
                                                        Conds:RS_70._col0=RS_71._col4(Inner),Output:["_col1","_col7","_col8","_col9","_col10","_col13","_col15","_col17","_col19","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                                                      <-Reducer 5 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_70]
                                                          PartitionCols:_col0
                                                          Merge Join Operator [MERGEJOIN_912] (rows=69376329 width=376)
                                                            Conds:RS_67._col4=RS_958._col0(Inner),Output:["_col0","_col1","_col7","_col8","_col9","_col10","_col13","_col15"]
                                                          <-Map 35 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_958]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_954] (rows=73049 width=8)
                                                                Output:["_col0","_col1"]
                                                                TableScan [TS_18] (rows=73049 width=8)
                                                                  default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                          <-Reducer 4 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_67]
                                                              PartitionCols:_col4
                                                              Merge Join Operator [MERGEJOIN_911] (rows=69376329 width=376)
                                                                Conds:RS_64._col5=RS_957._col0(Inner),Output:["_col0","_col1","_col4","_col7","_col8","_col9","_col10","_col13"]
                                                              <-Map 35 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_957]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_953] (rows=73049 width=8)
                                                                    Output:["_col0","_col1"]
                                                                     Please refer to the previous TableScan [TS_18]
                                                              <-Reducer 3 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_64]
                                                                  PartitionCols:_col5
                                                                  Merge Join Operator [MERGEJOIN_910] (rows=69376329 width=376)
                                                                    Conds:RS_61._col2=RS_950._col0(Inner),Output:["_col0","_col1","_col4","_col5","_col7","_col8","_col9","_col10"]
                                                                  <-Map 47 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_950]
                                                                      PartitionCols:_col0
                                                                       Please refer to the previous Select Operator [SEL_948]
                                                                  <-Reducer 2 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_61]
                                                                      PartitionCols:_col2
                                                                      Merge Join Operator [MERGEJOIN_909] (rows=69376329 width=380)
                                                                        Conds:RS_942._col3=RS_945._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5","_col7","_col8","_col9","_col10"]
                                                                      <-Map 49 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_945]
                                                                          PartitionCols:_col0
                                                                           Please refer to the previous Select Operator [SEL_943]
                                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_942]
                                                                          PartitionCols:_col3
                                                                          Select Operator [SEL_941] (rows=69376329 width=23)
                                                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                            Filter Operator [FIL_940] (rows=69376329 width=23)
                                                                              predicate:(c_current_addr_sk is not null and c_current_cdemo_sk is not null and c_current_hdemo_sk is not null and c_first_sales_date_sk is not null and c_first_shipto_date_sk is not null)
                                                                              TableScan [TS_0] (rows=80000000 width=23)
                                                                                default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk","c_first_shipto_date_sk","c_first_sales_date_sk"]
                                                      <-Reducer 28 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_71]
                                                          PartitionCols:_col4
                                                          Select Operator [SEL_32] (rows=1630791 width=208)
                                                            Output:["_col1","_col3","_col4","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
                                                            Merge Join Operator [MERGEJOIN_915] (rows=1630791 width=208)
                                                              Conds:RS_29._col3=RS_1002._col0(Inner),Output:["_col1","_col2","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15"]
                                                            <-Map 38 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_1002]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Select Operator [SEL_1001]
                                                            <-Reducer 27 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_29]
                                                                PartitionCols:_col3
                                                                Merge Join Operator [MERGEJOIN_914] (rows=1608052 width=119)
                                                                  Conds:RS_26._col0=RS_960._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                                <-Map 35 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_960]
                                                                    PartitionCols:_col0
                                                                    Select Operator [SEL_956] (rows=652 width=4)
                                                                      Output:["_col0"]
                                                                      Filter Operator [FIL_952] (rows=652 width=8)
                                                                        predicate:(d_year = 2000)
                                                                         Please refer to the previous TableScan [TS_18]
                                                                <-Reducer 26 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_26]
                                                                    PartitionCols:_col0
                                                                    Merge Join Operator [MERGEJOIN_913] (rows=4503592 width=119)
                                                                      Conds:RS_1000._col1=RS_970._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                                    <-Map 29 [SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_970]
                                                                        PartitionCols:_col0
                                                                         Please refer to the previous Select Operator [SEL_969]
                                                                    <-Map 25 [SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_1000]
                                                                        PartitionCols:_col1
                                                                        Select Operator [SEL_999] (rows=417313408 width=351)
                                                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                                                                          Filter Operator [FIL_998] (rows=417313408 width=355)
                                                                            predicate:((ss_item_sk BETWEEN DynamicValue(RS_24_item_i_item_sk_min) AND DynamicValue(RS_24_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_24_item_i_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_78_catalog_sales_cs_item_sk_min) AND DynamicValue(RS_78_catalog_sales_cs_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_78_catalog_sales_cs_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_27_d1_d_date_sk_min) AND DynamicValue(RS_27_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_27_d1_d_date_sk_bloom_filter))) and ss_addr_sk is not null and ss_cdemo_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                                            TableScan [TS_12] (rows=575995635 width=355)
                                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                            <-Reducer 30 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_979]
                                                                                 Please refer to the previous Group By Operator [GBY_978]
                                                                            <-Reducer 36 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_982]
                                                                                Group By Operator [GBY_981] (rows=1 width=12)
                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                <-Map 35 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_966]
                                                                                    Group By Operator [GBY_964] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                      Select Operator [SEL_961] (rows=652 width=4)
                                                                                        Output:["_col0"]
                                                                                         Please refer to the previous Select Operator [SEL_956]
                                                                            <-Reducer 42 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_997]
                                                                                Group By Operator [GBY_996] (rows=1 width=12)
                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                <-Reducer 41 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                  FORWARD [RS_995]
                                                                                    Group By Operator [GBY_994] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                      Select Operator [SEL_993] (rows=13257 width=4)
                                                                                        Output:["_col0"]
                                                                                         Please refer to the previous Select Operator [SEL_991]
                <-Reducer 24 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_1043]
                    PartitionCols:_col1, _col0, _col2
                    Select Operator [SEL_1042] (rows=1434227 width=525)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                      Group By Operator [GBY_1041] (rows=1434227 width=1362)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                      <-Reducer 23 [SIMPLE_EDGE]
                        SHUFFLE [RS_191]
                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                          Group By Operator [GBY_190] (rows=1434227 width=1362)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col26)","sum(_col27)","sum(_col28)"],keys:_col37, _col29, _col38, _col40, _col41, _col42, _col43, _col7, _col8, _col9, _col10, _col13, _col15, _col30
                            Merge Join Operator [MERGEJOIN_938] (rows=2364621 width=1153)
                              Conds:RS_186._col19, _col25=RS_1012._col0, _col1(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col26","_col27","_col28","_col29","_col30","_col37","_col38","_col40","_col41","_col42","_col43"]
                            <-Map 50 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_1012]
                                PartitionCols:_col0, _col1
                                 Please refer to the previous Select Operator [SEL_1010]
                            <-Reducer 22 [SIMPLE_EDGE]
                              SHUFFLE [RS_186]
                                PartitionCols:_col19, _col25
                                Merge Join Operator [MERGEJOIN_937] (rows=1434227 width=1030)
                                  Conds:RS_183._col23=RS_946._col0(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col19","_col25","_col26","_col27","_col28","_col29","_col30","_col37","_col38","_col40","_col41","_col42","_col43"]
                                <-Map 49 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_946]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_943]
                                <-Reducer 21 [SIMPLE_EDGE]
                                  SHUFFLE [RS_183]
                                    PartitionCols:_col23
                                    Merge Join Operator [MERGEJOIN_936] (rows=1434227 width=669)
                                      Conds:RS_180._col24=RS_1009._col0(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col19","_col23","_col25","_col26","_col27","_col28","_col29","_col30","_col37","_col38"]
                                    <-Map 48 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_1009]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_1007]
                                    <-Reducer 20 [SIMPLE_EDGE]
                                      SHUFFLE [RS_180]
                                        PartitionCols:_col24
                                        Merge Join Operator [MERGEJOIN_935] (rows=1434227 width=492)
                                          Conds:RS_177._col22=RS_951._col0(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col19","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                                        <-Map 47 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_951]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_948]
                                        <-Reducer 19 [SIMPLE_EDGE]
                                          SHUFFLE [RS_177]
                                            PartitionCols:_col22
                                            Merge Join Operator [MERGEJOIN_934] (rows=1434227 width=492)
                                              Conds:RS_174._col19=RS_1030._col0(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col19","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                                            <-Reducer 45 [ONE_TO_ONE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_1030]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1029] (rows=13257 width=4)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_1028] (rows=13257 width=228)
                                                    predicate:(_col1 > (2 * _col2))
                                                    Group By Operator [GBY_1027] (rows=39773 width=228)
                                                      Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                    <-Reducer 44 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_141]
                                                        PartitionCols:_col0
                                                        Group By Operator [GBY_140] (rows=6482999 width=228)
                                                          Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col5)"],keys:_col0
                                                          Merge Join Operator [MERGEJOIN_933] (rows=183085709 width=227)
                                                            Conds:RS_1026._col0, _col1=RS_988._col0, _col1(Inner),Output:["_col0","_col2","_col5"]
                                                          <-Map 43 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_988]
                                                              PartitionCols:_col0, _col1
                                                               Please refer to the previous Select Operator [SEL_986]
                                                          <-Map 52 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1026]
                                                              PartitionCols:_col0, _col1
                                                              Select Operator [SEL_1025] (rows=287989836 width=119)
                                                                Output:["_col0","_col1","_col2"]
                                                                Filter Operator [FIL_1024] (rows=287989836 width=119)
                                                                  predicate:(cs_item_sk BETWEEN DynamicValue(RS_121_item_i_item_sk_min) AND DynamicValue(RS_121_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_121_item_i_item_sk_bloom_filter)))
                                                                  TableScan [TS_132] (rows=287989836 width=119)
                                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                  <-Reducer 34 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_1021]
                                                                      Group By Operator [GBY_1019] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_977]
                                                                          Group By Operator [GBY_975] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_973] (rows=518 width=4)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Select Operator [SEL_969]
                                            <-Reducer 18 [SIMPLE_EDGE]
                                              SHUFFLE [RS_174]
                                                PartitionCols:_col19
                                                Filter Operator [FIL_173] (rows=1434227 width=662)
                                                  predicate:(_col17 <> _col33)
                                                  Merge Join Operator [MERGEJOIN_932] (rows=1434227 width=662)
                                                    Conds:RS_170._col1=RS_1005._col0(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col17","_col19","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30","_col33"]
                                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1005]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1001]
                                                  <-Reducer 17 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_170]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_931] (rows=1414229 width=573)
                                                        Conds:RS_167._col0=RS_168._col4(Inner),Output:["_col1","_col7","_col8","_col9","_col10","_col13","_col15","_col17","_col19","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                                                      <-Reducer 5 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_167]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Merge Join Operator [MERGEJOIN_912]
                                                      <-Reducer 33 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_168]
                                                          PartitionCols:_col4
                                                          Select Operator [SEL_129] (rows=1630791 width=208)
                                                            Output:["_col1","_col3","_col4","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
                                                            Merge Join Operator [MERGEJOIN_930] (rows=1630791 width=208)
                                                              Conds:RS_126._col3=RS_1004._col0(Inner),Output:["_col1","_col2","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15"]
                                                            <-Map 38 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_1004]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Select Operator [SEL_1001]
                                                            <-Reducer 32 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_126]
                                                                PartitionCols:_col3
                                                                Merge Join Operator [MERGEJOIN_929] (rows=1608052 width=119)
                                                                  Conds:RS_123._col0=RS_962._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                                <-Map 35 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_962]
                                                                    PartitionCols:_col0
                                                                    Select Operator [SEL_959] (rows=652 width=4)
                                                                      Output:["_col0"]
                                                                      Filter Operator [FIL_955] (rows=652 width=8)
                                                                        predicate:(d_year = 2001)
                                                                         Please refer to the previous TableScan [TS_18]
                                                                <-Reducer 31 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_123]
                                                                    PartitionCols:_col0
                                                                    Merge Join Operator [MERGEJOIN_928] (rows=4503592 width=119)
                                                                      Conds:RS_1040._col1=RS_972._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                                    <-Map 29 [SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_972]
                                                                        PartitionCols:_col0
                                                                         Please refer to the previous Select Operator [SEL_969]
                                                                    <-Map 51 [SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_1040]
                                                                        PartitionCols:_col1
                                                                        Select Operator [SEL_1039] (rows=417313408 width=351)
                                                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                                                                          Filter Operator [FIL_1038] (rows=417313408 width=355)
                                                                            predicate:((ss_item_sk BETWEEN DynamicValue(RS_121_item_i_item_sk_min) AND DynamicValue(RS_121_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_121_item_i_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_175_catalog_sales_cs_item_sk_min) AND DynamicValue(RS_175_catalog_sales_cs_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_175_catalog_sales_cs_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_194_item_i_item_sk_min) AND DynamicValue(RS_194_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_194_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_124_d1_d_date_sk_min) AND DynamicValue(RS_124_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_124_d1_d_date_sk_bloom_filter))) and ss_addr_sk is not null and ss_cdemo_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                                            TableScan [TS_109] (rows=575995635 width=355)
                                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                            <-Reducer 34 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_1020]
                                                                                 Please refer to the previous Group By Operator [GBY_1019]
                                                                            <-Reducer 16 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_1037]
                                                                                Group By Operator [GBY_1036] (rows=1 width=12)
                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                <-Reducer 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                  PARTITION_ONLY_SHUFFLE [RS_1018]
                                                                                    Group By Operator [GBY_1017] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                      Select Operator [SEL_1016] (rows=1434227 width=8)
                                                                                        Output:["_col0"]
                                                                                         Please refer to the previous Select Operator [SEL_1014]
                                                                            <-Reducer 37 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_1023]
                                                                                Group By Operator [GBY_1022] (rows=1 width=12)
                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                <-Map 35 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_967]
                                                                                    Group By Operator [GBY_965] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                      Select Operator [SEL_963] (rows=652 width=4)
                                                                                        Output:["_col0"]
                                                                                         Please refer to the previous Select Operator [SEL_959]
                                                                            <-Reducer 46 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_1035]
                                                                                Group By Operator [GBY_1034] (rows=1 width=12)
                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                <-Reducer 45 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                  PARTITION_ONLY_SHUFFLE [RS_1033]
                                                                                    Group By Operator [GBY_1032] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                      Select Operator [SEL_1031] (rows=13257 width=4)
                                                                                        Output:["_col0"]
                                                                                         Please refer to the previous Select Operator [SEL_1029]

