PREHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@income_band
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@income_band
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 20 (BROADCAST_EDGE)
Map 38 <- Reducer 20 (BROADCAST_EDGE)
Map 50 <- Reducer 36 (BROADCAST_EDGE)
Map 51 <- Reducer 36 (BROADCAST_EDGE)
Reducer 10 <- Map 47 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 47 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Map 48 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Map 48 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 49 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 49 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE), Reducer 35 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Map 19 (SIMPLE_EDGE), Map 50 (SIMPLE_EDGE)
Reducer 22 <- Map 47 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 37 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE), Reducer 43 (ONE_TO_ONE_EDGE)
Reducer 25 <- Map 44 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Map 45 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Map 46 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)
Reducer 28 <- Map 46 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Map 47 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 3 <- Map 47 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 47 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Map 48 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE)
Reducer 32 <- Map 48 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 33 <- Map 49 (SIMPLE_EDGE), Reducer 32 (SIMPLE_EDGE)
Reducer 34 <- Map 49 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 35 <- Reducer 34 (SIMPLE_EDGE)
Reducer 36 <- Map 19 (CUSTOM_SIMPLE_EDGE)
Reducer 39 <- Map 38 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 4 <- Map 37 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Reducer 39 (SIMPLE_EDGE)
Reducer 42 <- Map 41 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE)
Reducer 43 <- Reducer 42 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE), Reducer 40 (ONE_TO_ONE_EDGE)
Reducer 6 <- Map 44 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 45 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 46 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 46 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 18 vectorized
      File Output Operator [FS_1061]
        Select Operator [SEL_1060] (rows=1991254249 width=1702)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20"]
        <-Reducer 17 [SIMPLE_EDGE]
          SHUFFLE [RS_197]
            Select Operator [SEL_196] (rows=1991254249 width=1694)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18"]
              Filter Operator [FIL_195] (rows=1991254249 width=1694)
                predicate:(_col19 <= _col12)
                Merge Join Operator [MERGEJOIN_973] (rows=5973762748 width=1694)
                  Conds:RS_1043._col2, _col1, _col3=RS_1059._col1, _col0, _col2(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col19","_col20","_col21","_col22"]
                <-Reducer 16 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_1043]
                    PartitionCols:_col2, _col1, _col3
                    Select Operator [SEL_1042] (rows=2364623 width=1354)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                      Group By Operator [GBY_1041] (rows=2364623 width=1362)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                      <-Reducer 15 [SIMPLE_EDGE]
                        SHUFFLE [RS_93]
                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                          Group By Operator [GBY_92] (rows=2364623 width=1362)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col8)","sum(_col9)","sum(_col10)"],keys:_col24, _col11, _col25, _col12, _col29, _col31, _col37, _col38, _col39, _col40, _col42, _col43, _col44, _col45
                            Merge Join Operator [MERGEJOIN_957] (rows=2364623 width=1155)
                              Conds:RS_88._col17=RS_1038._col0(Inner),Output:["_col8","_col9","_col10","_col11","_col12","_col24","_col25","_col29","_col31","_col37","_col38","_col39","_col40","_col42","_col43","_col44","_col45"]
                            <-Map 49 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_1038]
                                PartitionCols:_col0
                                Select Operator [SEL_1036] (rows=40000000 width=365)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  TableScan [TS_44] (rows=40000000 width=365)
                                    default@customer_address,ad1,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_street_number","ca_street_name","ca_city","ca_zip"]
                            <-Reducer 14 [SIMPLE_EDGE]
                              SHUFFLE [RS_88]
                                PartitionCols:_col17
                                Merge Join Operator [MERGEJOIN_956] (rows=2364623 width=798)
                                  Conds:RS_85._col5=RS_1037._col0(Inner),Output:["_col8","_col9","_col10","_col11","_col12","_col17","_col24","_col25","_col29","_col31","_col37","_col38","_col39","_col40"]
                                <-Map 49 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_1037]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_1036]
                                <-Reducer 13 [SIMPLE_EDGE]
                                  SHUFFLE [RS_85]
                                    PartitionCols:_col5
                                    Filter Operator [FIL_84] (rows=2364623 width=609)
                                      predicate:(_col33 <> _col35)
                                      Merge Join Operator [MERGEJOIN_955] (rows=2364623 width=609)
                                        Conds:RS_81._col15=RS_1033._col0(Inner),Output:["_col5","_col8","_col9","_col10","_col11","_col12","_col17","_col24","_col25","_col29","_col31","_col33","_col35"]
                                      <-Map 48 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_1033]
                                          PartitionCols:_col0
                                          Select Operator [SEL_1031] (rows=1861800 width=89)
                                            Output:["_col0","_col1"]
                                            TableScan [TS_40] (rows=1861800 width=89)
                                              default@customer_demographics,cd1,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status"]
                                      <-Reducer 12 [SIMPLE_EDGE]
                                        SHUFFLE [RS_81]
                                          PartitionCols:_col15
                                          Merge Join Operator [MERGEJOIN_954] (rows=2331651 width=523)
                                            Conds:RS_78._col3=RS_1032._col0(Inner),Output:["_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col17","_col24","_col25","_col29","_col31","_col33"]
                                          <-Map 48 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1032]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_1031]
                                          <-Reducer 11 [SIMPLE_EDGE]
                                            SHUFFLE [RS_78]
                                              PartitionCols:_col3
                                              Merge Join Operator [MERGEJOIN_953] (rows=2299139 width=436)
                                                Conds:RS_75._col18=RS_996._col0(Inner),Output:["_col3","_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col17","_col24","_col25","_col29","_col31"]
                                              <-Map 47 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_996]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_990] (rows=73049 width=8)
                                                    Output:["_col0","_col1"]
                                                    TableScan [TS_38] (rows=73049 width=8)
                                                      default@date_dim,d3,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                              <-Reducer 10 [SIMPLE_EDGE]
                                                SHUFFLE [RS_75]
                                                  PartitionCols:_col18
                                                  Merge Join Operator [MERGEJOIN_952] (rows=2299139 width=434)
                                                    Conds:RS_72._col19=RS_998._col0(Inner),Output:["_col3","_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col17","_col18","_col24","_col25","_col29"]
                                                  <-Map 47 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_998]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_992] (rows=73049 width=8)
                                                        Output:["_col0","_col1"]
                                                         Please refer to the previous TableScan [TS_38]
                                                  <-Reducer 9 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_72]
                                                      PartitionCols:_col19
                                                      Merge Join Operator [MERGEJOIN_951] (rows=2299139 width=432)
                                                        Conds:RS_69._col16=RS_1028._col0(Inner),Output:["_col3","_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col17","_col18","_col19","_col24","_col25"]
                                                      <-Map 46 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1028]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1026] (rows=7200 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_1025] (rows=7200 width=8)
                                                              predicate:hd_income_band_sk is not null
                                                              TableScan [TS_30] (rows=7200 width=8)
                                                                default@household_demographics,hd1,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_income_band_sk"]
                                                      <-Reducer 8 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_69]
                                                          PartitionCols:_col16
                                                          Merge Join Operator [MERGEJOIN_950] (rows=2299139 width=433)
                                                            Conds:RS_66._col4=RS_1027._col0(Inner),Output:["_col3","_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col16","_col17","_col18","_col19","_col24","_col25"]
                                                          <-Map 46 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1027]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1026]
                                                          <-Reducer 7 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_66]
                                                              PartitionCols:_col4
                                                              Merge Join Operator [MERGEJOIN_949] (rows=2299139 width=435)
                                                                Conds:RS_63._col6=RS_1023._col0(Inner),Output:["_col3","_col4","_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col16","_col17","_col18","_col19","_col24","_col25"]
                                                              <-Map 45 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_1023]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_1022] (rows=1704 width=181)
                                                                    Output:["_col0","_col1","_col2"]
                                                                    Filter Operator [FIL_1021] (rows=1704 width=181)
                                                                      predicate:(s_store_name is not null and s_zip is not null)
                                                                      TableScan [TS_27] (rows=1704 width=181)
                                                                        default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_zip"]
                                                              <-Reducer 6 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_63]
                                                                  PartitionCols:_col6
                                                                  Merge Join Operator [MERGEJOIN_948] (rows=2299139 width=259)
                                                                    Conds:RS_60._col1, _col7=RS_1019._col0, _col1(Inner),Output:["_col3","_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col15","_col16","_col17","_col18","_col19"]
                                                                  <-Map 44 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_1019]
                                                                      PartitionCols:_col0, _col1
                                                                      Select Operator [SEL_1018] (rows=57591150 width=8)
                                                                        Output:["_col0","_col1"]
                                                                        TableScan [TS_25] (rows=57591150 width=8)
                                                                          default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
                                                                  <-Reducer 5 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_60]
                                                                      PartitionCols:_col1, _col7
                                                                      Merge Join Operator [MERGEJOIN_947] (rows=1394510 width=123)
                                                                        Conds:RS_57._col1=RS_1017._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15","_col16","_col17","_col18","_col19"]
                                                                      <-Reducer 4 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_57]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_945] (rows=1394510 width=123)
                                                                            Conds:RS_54._col2=RS_1006._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15","_col16","_col17","_col18","_col19"]
                                                                          <-Map 37 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1006]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1005] (rows=69376329 width=23)
                                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                                Filter Operator [FIL_1004] (rows=69376329 width=23)
                                                                                  predicate:(c_current_addr_sk is not null and c_current_cdemo_sk is not null and c_current_hdemo_sk is not null and c_first_sales_date_sk is not null and c_first_shipto_date_sk is not null)
                                                                                  TableScan [TS_9] (rows=80000000 width=23)
                                                                                    default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk","c_first_shipto_date_sk","c_first_sales_date_sk"]
                                                                          <-Reducer 3 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_54]
                                                                              PartitionCols:_col2
                                                                              Merge Join Operator [MERGEJOIN_944] (rows=1608052 width=119)
                                                                                Conds:RS_51._col0=RS_1002._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                                              <-Map 47 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1002]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_997] (rows=652 width=4)
                                                                                    Output:["_col0"]
                                                                                    Filter Operator [FIL_991] (rows=652 width=8)
                                                                                      predicate:(d_year = 2000)
                                                                                       Please refer to the previous TableScan [TS_38]
                                                                              <-Reducer 2 [SIMPLE_EDGE]
                                                                                SHUFFLE [RS_51]
                                                                                  PartitionCols:_col0
                                                                                  Merge Join Operator [MERGEJOIN_943] (rows=4503592 width=119)
                                                                                    Conds:RS_989._col1=RS_976._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                                                  <-Map 19 [SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_976]
                                                                                      PartitionCols:_col0
                                                                                      Select Operator [SEL_975] (rows=518 width=111)
                                                                                        Output:["_col0","_col1"]
                                                                                        Filter Operator [FIL_974] (rows=518 width=312)
                                                                                          predicate:((i_color) IN ('maroon', 'burnished', 'dim', 'steel', 'navajo', 'chocolate') and i_current_price BETWEEN 35 AND 45 and i_current_price BETWEEN 36 AND 50)
                                                                                          TableScan [TS_3] (rows=462000 width=311)
                                                                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_color","i_product_name"]
                                                                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                                                                    SHUFFLE [RS_989]
                                                                                      PartitionCols:_col1
                                                                                      Select Operator [SEL_988] (rows=417313408 width=351)
                                                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                                                                                        Filter Operator [FIL_987] (rows=417313408 width=355)
                                                                                          predicate:((ss_item_sk BETWEEN DynamicValue(RS_49_item_i_item_sk_min) AND DynamicValue(RS_49_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_49_item_i_item_sk_bloom_filter))) and ss_addr_sk is not null and ss_cdemo_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                                                          TableScan [TS_0] (rows=575995635 width=355)
                                                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                                          <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                                                            BROADCAST [RS_985]
                                                                                              Group By Operator [GBY_984] (rows=1 width=12)
                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                              <-Map 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                                PARTITION_ONLY_SHUFFLE [RS_982]
                                                                                                  Group By Operator [GBY_980] (rows=1 width=12)
                                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                    Select Operator [SEL_977] (rows=518 width=4)
                                                                                                      Output:["_col0"]
                                                                                                       Please refer to the previous Select Operator [SEL_975]
                                                                      <-Reducer 40 [ONE_TO_ONE_EDGE] vectorized
                                                                        FORWARD [RS_1017]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1016] (rows=13257 width=4)
                                                                            Output:["_col0"]
                                                                            Filter Operator [FIL_1015] (rows=13257 width=228)
                                                                              predicate:(_col1 > (2 * _col2))
                                                                              Group By Operator [GBY_1014] (rows=39773 width=228)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                                              <-Reducer 39 [SIMPLE_EDGE]
                                                                                SHUFFLE [RS_21]
                                                                                  PartitionCols:_col0
                                                                                  Group By Operator [GBY_20] (rows=6482999 width=228)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col5)"],keys:_col0
                                                                                    Merge Join Operator [MERGEJOIN_946] (rows=183085709 width=227)
                                                                                      Conds:RS_1010._col0, _col1=RS_1012._col0, _col1(Inner),Output:["_col0","_col2","_col5"]
                                                                                    <-Map 41 [SIMPLE_EDGE] vectorized
                                                                                      SHUFFLE [RS_1012]
                                                                                        PartitionCols:_col0, _col1
                                                                                        Select Operator [SEL_1011] (rows=28798881 width=120)
                                                                                          Output:["_col0","_col1","_col2"]
                                                                                          TableScan [TS_14] (rows=28798881 width=337)
                                                                                            default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_refunded_cash","cr_reversed_charge","cr_store_credit"]
                                                                                    <-Map 38 [SIMPLE_EDGE] vectorized
                                                                                      SHUFFLE [RS_1010]
                                                                                        PartitionCols:_col0, _col1
                                                                                        Select Operator [SEL_1009] (rows=287989836 width=119)
                                                                                          Output:["_col0","_col1","_col2"]
                                                                                          Filter Operator [FIL_1008] (rows=287989836 width=119)
                                                                                            predicate:(cs_item_sk BETWEEN DynamicValue(RS_49_item_i_item_sk_min) AND DynamicValue(RS_49_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_49_item_i_item_sk_bloom_filter)))
                                                                                            TableScan [TS_12] (rows=287989836 width=119)
                                                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                                            <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                                                              BROADCAST [RS_986]
                                                                                                 Please refer to the previous Group By Operator [GBY_984]
                <-Reducer 35 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_1059]
                    PartitionCols:_col1, _col0, _col2
                    Select Operator [SEL_1058] (rows=2364623 width=525)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                      Group By Operator [GBY_1057] (rows=2364623 width=1362)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                      <-Reducer 34 [SIMPLE_EDGE]
                        SHUFFLE [RS_189]
                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                          Group By Operator [GBY_188] (rows=2364623 width=1362)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col8)","sum(_col9)","sum(_col10)"],keys:_col24, _col11, _col25, _col12, _col29, _col31, _col37, _col38, _col39, _col40, _col42, _col43, _col44, _col45
                            Merge Join Operator [MERGEJOIN_972] (rows=2364623 width=1155)
                              Conds:RS_184._col17=RS_1040._col0(Inner),Output:["_col8","_col9","_col10","_col11","_col12","_col24","_col25","_col29","_col31","_col37","_col38","_col39","_col40","_col42","_col43","_col44","_col45"]
                            <-Map 49 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_1040]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_1036]
                            <-Reducer 33 [SIMPLE_EDGE]
                              SHUFFLE [RS_184]
                                PartitionCols:_col17
                                Merge Join Operator [MERGEJOIN_971] (rows=2364623 width=798)
                                  Conds:RS_181._col5=RS_1039._col0(Inner),Output:["_col8","_col9","_col10","_col11","_col12","_col17","_col24","_col25","_col29","_col31","_col37","_col38","_col39","_col40"]
                                <-Map 49 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_1039]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_1036]
                                <-Reducer 32 [SIMPLE_EDGE]
                                  SHUFFLE [RS_181]
                                    PartitionCols:_col5
                                    Filter Operator [FIL_180] (rows=2364623 width=609)
                                      predicate:(_col33 <> _col35)
                                      Merge Join Operator [MERGEJOIN_970] (rows=2364623 width=609)
                                        Conds:RS_177._col15=RS_1035._col0(Inner),Output:["_col5","_col8","_col9","_col10","_col11","_col12","_col17","_col24","_col25","_col29","_col31","_col33","_col35"]
                                      <-Map 48 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_1035]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_1031]
                                      <-Reducer 31 [SIMPLE_EDGE]
                                        SHUFFLE [RS_177]
                                          PartitionCols:_col15
                                          Merge Join Operator [MERGEJOIN_969] (rows=2331651 width=523)
                                            Conds:RS_174._col3=RS_1034._col0(Inner),Output:["_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col17","_col24","_col25","_col29","_col31","_col33"]
                                          <-Map 48 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1034]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_1031]
                                          <-Reducer 30 [SIMPLE_EDGE]
                                            SHUFFLE [RS_174]
                                              PartitionCols:_col3
                                              Merge Join Operator [MERGEJOIN_968] (rows=2299139 width=436)
                                                Conds:RS_171._col18=RS_1000._col0(Inner),Output:["_col3","_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col17","_col24","_col25","_col29","_col31"]
                                              <-Map 47 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1000]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_994] (rows=73049 width=8)
                                                    Output:["_col0","_col1"]
                                                     Please refer to the previous TableScan [TS_38]
                                              <-Reducer 29 [SIMPLE_EDGE]
                                                SHUFFLE [RS_171]
                                                  PartitionCols:_col18
                                                  Merge Join Operator [MERGEJOIN_967] (rows=2299139 width=434)
                                                    Conds:RS_168._col19=RS_999._col0(Inner),Output:["_col3","_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col17","_col18","_col24","_col25","_col29"]
                                                  <-Map 47 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_999]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_993] (rows=73049 width=8)
                                                        Output:["_col0","_col1"]
                                                         Please refer to the previous TableScan [TS_38]
                                                  <-Reducer 28 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_168]
                                                      PartitionCols:_col19
                                                      Merge Join Operator [MERGEJOIN_966] (rows=2299139 width=432)
                                                        Conds:RS_165._col16=RS_1030._col0(Inner),Output:["_col3","_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col17","_col18","_col19","_col24","_col25"]
                                                      <-Map 46 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1030]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1026]
                                                      <-Reducer 27 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_165]
                                                          PartitionCols:_col16
                                                          Merge Join Operator [MERGEJOIN_965] (rows=2299139 width=433)
                                                            Conds:RS_162._col4=RS_1029._col0(Inner),Output:["_col3","_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col16","_col17","_col18","_col19","_col24","_col25"]
                                                          <-Map 46 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1029]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1026]
                                                          <-Reducer 26 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_162]
                                                              PartitionCols:_col4
                                                              Merge Join Operator [MERGEJOIN_964] (rows=2299139 width=435)
                                                                Conds:RS_159._col6=RS_1024._col0(Inner),Output:["_col3","_col4","_col5","_col8","_col9","_col10","_col11","_col12","_col15","_col16","_col17","_col18","_col19","_col24","_col25"]
                                                              <-Map 45 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_1024]
                                                                  PartitionCols:_col0
                                                                   Please refer to the previous Select Operator [SEL_1022]
                                                              <-Reducer 25 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_159]
                                                                  PartitionCols:_col6
                                                                  Merge Join Operator [MERGEJOIN_963] (rows=2299139 width=259)
                                                                    Conds:RS_156._col1, _col7=RS_1020._col0, _col1(Inner),Output:["_col3","_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col15","_col16","_col17","_col18","_col19"]
                                                                  <-Map 44 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_1020]
                                                                      PartitionCols:_col0, _col1
                                                                       Please refer to the previous Select Operator [SEL_1018]
                                                                  <-Reducer 24 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_156]
                                                                      PartitionCols:_col1, _col7
                                                                      Merge Join Operator [MERGEJOIN_962] (rows=1394510 width=123)
                                                                        Conds:RS_153._col1=RS_1056._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15","_col16","_col17","_col18","_col19"]
                                                                      <-Reducer 23 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_153]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_960] (rows=1394510 width=123)
                                                                            Conds:RS_150._col2=RS_1007._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15","_col16","_col17","_col18","_col19"]
                                                                          <-Map 37 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1007]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1005]
                                                                          <-Reducer 22 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_150]
                                                                              PartitionCols:_col2
                                                                              Merge Join Operator [MERGEJOIN_959] (rows=1608052 width=119)
                                                                                Conds:RS_147._col0=RS_1003._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                                              <-Map 47 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1003]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_1001] (rows=652 width=4)
                                                                                    Output:["_col0"]
                                                                                    Filter Operator [FIL_995] (rows=652 width=8)
                                                                                      predicate:(d_year = 2001)
                                                                                       Please refer to the previous TableScan [TS_38]
                                                                              <-Reducer 21 [SIMPLE_EDGE]
                                                                                SHUFFLE [RS_147]
                                                                                  PartitionCols:_col0
                                                                                  Merge Join Operator [MERGEJOIN_958] (rows=4503592 width=119)
                                                                                    Conds:RS_1049._col1=RS_978._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                                                  <-Map 19 [SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_978]
                                                                                      PartitionCols:_col0
                                                                                       Please refer to the previous Select Operator [SEL_975]
                                                                                  <-Map 50 [SIMPLE_EDGE] vectorized
                                                                                    SHUFFLE [RS_1049]
                                                                                      PartitionCols:_col1
                                                                                      Select Operator [SEL_1048] (rows=417313408 width=351)
                                                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                                                                                        Filter Operator [FIL_1047] (rows=417313408 width=355)
                                                                                          predicate:((ss_item_sk BETWEEN DynamicValue(RS_145_item_i_item_sk_min) AND DynamicValue(RS_145_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_145_item_i_item_sk_bloom_filter))) and ss_addr_sk is not null and ss_cdemo_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                                                          TableScan [TS_96] (rows=575995635 width=355)
                                                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                                          <-Reducer 36 [BROADCAST_EDGE] vectorized
                                                                                            BROADCAST [RS_1045]
                                                                                              Group By Operator [GBY_1044] (rows=1 width=12)
                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                              <-Map 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                                PARTITION_ONLY_SHUFFLE [RS_983]
                                                                                                  Group By Operator [GBY_981] (rows=1 width=12)
                                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                    Select Operator [SEL_979] (rows=518 width=4)
                                                                                                      Output:["_col0"]
                                                                                                       Please refer to the previous Select Operator [SEL_975]
                                                                      <-Reducer 43 [ONE_TO_ONE_EDGE] vectorized
                                                                        FORWARD [RS_1056]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1055] (rows=13257 width=4)
                                                                            Output:["_col0"]
                                                                            Filter Operator [FIL_1054] (rows=13257 width=228)
                                                                              predicate:(_col1 > (2 * _col2))
                                                                              Group By Operator [GBY_1053] (rows=39773 width=228)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                                              <-Reducer 42 [SIMPLE_EDGE]
                                                                                SHUFFLE [RS_117]
                                                                                  PartitionCols:_col0
                                                                                  Group By Operator [GBY_116] (rows=6482999 width=228)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col5)"],keys:_col0
                                                                                    Merge Join Operator [MERGEJOIN_961] (rows=183085709 width=227)
                                                                                      Conds:RS_1052._col0, _col1=RS_1013._col0, _col1(Inner),Output:["_col0","_col2","_col5"]
                                                                                    <-Map 41 [SIMPLE_EDGE] vectorized
                                                                                      SHUFFLE [RS_1013]
                                                                                        PartitionCols:_col0, _col1
                                                                                         Please refer to the previous Select Operator [SEL_1011]
                                                                                    <-Map 51 [SIMPLE_EDGE] vectorized
                                                                                      SHUFFLE [RS_1052]
                                                                                        PartitionCols:_col0, _col1
                                                                                        Select Operator [SEL_1051] (rows=287989836 width=119)
                                                                                          Output:["_col0","_col1","_col2"]
                                                                                          Filter Operator [FIL_1050] (rows=287989836 width=119)
                                                                                            predicate:(cs_item_sk BETWEEN DynamicValue(RS_145_item_i_item_sk_min) AND DynamicValue(RS_145_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_145_item_i_item_sk_bloom_filter)))
                                                                                            TableScan [TS_108] (rows=287989836 width=119)
                                                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                                            <-Reducer 36 [BROADCAST_EDGE] vectorized
                                                                                              BROADCAST [RS_1046]
                                                                                                 Please refer to the previous Group By Operator [GBY_1044]

