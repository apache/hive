PREHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@income_band
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@income_band
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 33 <- Reducer 29 (BROADCAST_EDGE), Reducer 36 (BROADCAST_EDGE), Reducer 42 (BROADCAST_EDGE)
Map 39 <- Reducer 36 (BROADCAST_EDGE)
Map 50 <- Reducer 12 (BROADCAST_EDGE), Reducer 32 (BROADCAST_EDGE), Reducer 38 (BROADCAST_EDGE), Reducer 46 (BROADCAST_EDGE)
Map 51 <- Reducer 38 (BROADCAST_EDGE)
Reducer 10 <- Reducer 15 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 9 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 20 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 14 <- Map 49 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 17 <- Map 16 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
Reducer 18 <- Map 48 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Map 16 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 16 (SIMPLE_EDGE)
Reducer 20 <- Map 48 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 22 <- Map 21 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 23 <- Map 47 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Map 21 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 25 <- Map 47 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 27 <- Map 26 (SIMPLE_EDGE), Reducer 34 (SIMPLE_EDGE)
Reducer 28 <- Reducer 27 (SIMPLE_EDGE), Reducer 41 (ONE_TO_ONE_EDGE)
Reducer 29 <- Map 26 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 21 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 26 (SIMPLE_EDGE), Reducer 37 (SIMPLE_EDGE)
Reducer 31 <- Reducer 30 (SIMPLE_EDGE), Reducer 45 (ONE_TO_ONE_EDGE)
Reducer 32 <- Map 26 (CUSTOM_SIMPLE_EDGE)
Reducer 34 <- Map 33 (SIMPLE_EDGE), Map 35 (SIMPLE_EDGE)
Reducer 36 <- Map 35 (CUSTOM_SIMPLE_EDGE)
Reducer 37 <- Map 35 (SIMPLE_EDGE), Map 50 (SIMPLE_EDGE)
Reducer 38 <- Map 35 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Map 26 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Map 39 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE)
Reducer 41 <- Reducer 40 (SIMPLE_EDGE)
Reducer 42 <- Reducer 41 (CUSTOM_SIMPLE_EDGE)
Reducer 44 <- Map 43 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE)
Reducer 45 <- Reducer 44 (SIMPLE_EDGE)
Reducer 46 <- Reducer 45 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Map 26 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 49 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 18 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 49 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 11 vectorized
      File Output Operator [FS_1001]
        Select Operator [SEL_1000] (rows=2169965329 width=1702)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20"]
        <-Reducer 10 [SIMPLE_EDGE]
          SHUFFLE [RS_199]
            Select Operator [SEL_198] (rows=2169965329 width=1694)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18"]
              Filter Operator [FIL_197] (rows=2169965329 width=1694)
                predicate:(_col19 <= _col12)
                Merge Join Operator [MERGEJOIN_897] (rows=6509895988 width=1694)
                  Conds:RS_971._col2, _col1, _col3=RS_999._col1, _col0, _col2(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col19","_col20","_col21","_col22"]
                <-Reducer 9 [SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_971]
                    PartitionCols:_col2, _col1, _col3
                    Select Operator [SEL_970] (rows=2299138 width=1354)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                      Group By Operator [GBY_969] (rows=2299138 width=1362)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                      <-Reducer 8 [SIMPLE_EDGE]
                        SHUFFLE [RS_94]
                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                          Group By Operator [GBY_93] (rows=2299138 width=1362)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col37)","sum(_col38)","sum(_col39)"],keys:_col26, _col40, _col27, _col7, _col8, _col9, _col10, _col13, _col15, _col21, _col22, _col23, _col24, _col41
                            Select Operator [SEL_92] (rows=2331650 width=1292)
                              Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col21","_col22","_col23","_col24","_col26","_col27","_col37","_col38","_col39","_col40","_col41"]
                              Filter Operator [FIL_91] (rows=2331650 width=1292)
                                predicate:(_col45 <> _col17)
                                Merge Join Operator [MERGEJOIN_881] (rows=2331650 width=1292)
                                  Conds:RS_88._col32=RS_926._col0(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col17","_col21","_col22","_col23","_col24","_col26","_col27","_col37","_col38","_col39","_col40","_col41","_col45"]
                                <-Map 49 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_926]
                                    PartitionCols:_col0
                                    Select Operator [SEL_925] (rows=1861800 width=89)
                                      Output:["_col0","_col1"]
                                      TableScan [TS_68] (rows=1861800 width=89)
                                        default@customer_demographics,cd1,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status"]
                                <-Reducer 7 [SIMPLE_EDGE]
                                  SHUFFLE [RS_88]
                                    PartitionCols:_col32
                                    Merge Join Operator [MERGEJOIN_880] (rows=2299138 width=1205)
                                      Conds:RS_85._col0=RS_86._col13(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col17","_col21","_col22","_col23","_col24","_col26","_col27","_col32","_col37","_col38","_col39","_col40","_col41"]
                                    <-Reducer 6 [SIMPLE_EDGE]
                                      SHUFFLE [RS_85]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_871] (rows=70357394 width=458)
                                          Conds:RS_82._col1=RS_927._col0(Inner),Output:["_col0","_col7","_col8","_col9","_col10","_col13","_col15","_col17"]
                                        <-Map 49 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_927]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_925]
                                        <-Reducer 5 [SIMPLE_EDGE]
                                          SHUFFLE [RS_82]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_870] (rows=69376329 width=376)
                                              Conds:RS_79._col4=RS_914._col0(Inner),Output:["_col0","_col1","_col7","_col8","_col9","_col10","_col13","_col15"]
                                            <-Map 26 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_914]
                                                PartitionCols:_col0
                                                Select Operator [SEL_910] (rows=73049 width=8)
                                                  Output:["_col0","_col1"]
                                                  TableScan [TS_8] (rows=73049 width=8)
                                                    default@date_dim,d2,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                            <-Reducer 4 [SIMPLE_EDGE]
                                              SHUFFLE [RS_79]
                                                PartitionCols:_col4
                                                Merge Join Operator [MERGEJOIN_869] (rows=69376329 width=376)
                                                  Conds:RS_76._col5=RS_913._col0(Inner),Output:["_col0","_col1","_col4","_col7","_col8","_col9","_col10","_col13"]
                                                <-Map 26 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_913]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_910]
                                                <-Reducer 3 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_76]
                                                    PartitionCols:_col5
                                                    Merge Join Operator [MERGEJOIN_868] (rows=69376329 width=376)
                                                      Conds:RS_73._col2=RS_907._col0(Inner),Output:["_col0","_col1","_col4","_col5","_col7","_col8","_col9","_col10"]
                                                    <-Map 21 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_907]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_906] (rows=7200 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_905] (rows=7200 width=8)
                                                            predicate:hd_income_band_sk is not null
                                                            TableScan [TS_5] (rows=7200 width=8)
                                                              default@household_demographics,hd2,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_income_band_sk"]
                                                    <-Reducer 2 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_73]
                                                        PartitionCols:_col2
                                                        Merge Join Operator [MERGEJOIN_867] (rows=69376329 width=380)
                                                          Conds:RS_900._col3=RS_902._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5","_col7","_col8","_col9","_col10"]
                                                        <-Map 16 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_902]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_901] (rows=40000000 width=365)
                                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                                              TableScan [TS_3] (rows=40000000 width=365)
                                                                default@customer_address,ad2,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_street_number","ca_street_name","ca_city","ca_zip"]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_900]
                                                            PartitionCols:_col3
                                                            Select Operator [SEL_899] (rows=69376329 width=23)
                                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                              Filter Operator [FIL_898] (rows=69376329 width=23)
                                                                predicate:(c_current_addr_sk is not null and c_current_cdemo_sk is not null and c_current_hdemo_sk is not null and c_first_sales_date_sk is not null and c_first_shipto_date_sk is not null)
                                                                TableScan [TS_0] (rows=80000000 width=23)
                                                                  default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk","c_first_shipto_date_sk","c_first_sales_date_sk"]
                                    <-Reducer 18 [SIMPLE_EDGE]
                                      SHUFFLE [RS_86]
                                        PartitionCols:_col13
                                        Select Operator [SEL_67] (rows=2651207 width=784)
                                          Output:["_col3","_col4","_col5","_col6","_col8","_col9","_col13","_col14","_col19","_col20","_col21","_col22","_col23"]
                                          Merge Join Operator [MERGEJOIN_879] (rows=2651207 width=784)
                                            Conds:RS_64._col1, _col7=RS_967._col0, _col1(Inner),Output:["_col2","_col3","_col8","_col9","_col10","_col11","_col12","_col17","_col18","_col20","_col21","_col22","_col23"]
                                          <-Map 48 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_967]
                                              PartitionCols:_col0, _col1
                                              Select Operator [SEL_966] (rows=57591150 width=8)
                                                Output:["_col0","_col1"]
                                                TableScan [TS_44] (rows=57591150 width=8)
                                                  default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
                                          <-Reducer 17 [SIMPLE_EDGE]
                                            SHUFFLE [RS_64]
                                              PartitionCols:_col1, _col7
                                              Merge Join Operator [MERGEJOIN_878] (rows=1608052 width=657)
                                                Conds:RS_61._col5=RS_903._col0(Inner),Output:["_col1","_col2","_col3","_col7","_col8","_col9","_col10","_col11","_col12","_col17","_col18","_col20","_col21","_col22","_col23"]
                                              <-Map 16 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_903]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_901]
                                              <-Reducer 23 [SIMPLE_EDGE]
                                                SHUFFLE [RS_61]
                                                  PartitionCols:_col5
                                                  Merge Join Operator [MERGEJOIN_877] (rows=1608052 width=296)
                                                    Conds:RS_58._col6=RS_964._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col7","_col8","_col9","_col10","_col11","_col12","_col17","_col18"]
                                                  <-Map 47 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_964]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_963] (rows=1704 width=181)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_962] (rows=1704 width=181)
                                                          predicate:(s_store_name is not null and s_zip is not null)
                                                          TableScan [TS_39] (rows=1704 width=181)
                                                            default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_zip"]
                                                  <-Reducer 22 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_58]
                                                      PartitionCols:_col6
                                                      Merge Join Operator [MERGEJOIN_876] (rows=1608052 width=119)
                                                        Conds:RS_55._col4=RS_908._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                      <-Map 21 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_908]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_906]
                                                      <-Reducer 28 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_55]
                                                          PartitionCols:_col4
                                                          Merge Join Operator [MERGEJOIN_875] (rows=1608052 width=119)
                                                            Conds:RS_52._col1=RS_953._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                          <-Reducer 41 [ONE_TO_ONE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_953]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_952] (rows=13257 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_951] (rows=13257 width=228)
                                                                  predicate:(_col1 > (2 * _col2))
                                                                  Group By Operator [GBY_950] (rows=39773 width=228)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                                  <-Reducer 40 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_32]
                                                                      PartitionCols:_col0
                                                                      Group By Operator [GBY_31] (rows=6482999 width=228)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col5)"],keys:_col0
                                                                        Merge Join Operator [MERGEJOIN_874] (rows=183085709 width=227)
                                                                          Conds:RS_946._col0, _col1=RS_948._col0, _col1(Inner),Output:["_col0","_col2","_col5"]
                                                                        <-Map 43 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_948]
                                                                            PartitionCols:_col0, _col1
                                                                            Select Operator [SEL_947] (rows=28798881 width=120)
                                                                              Output:["_col0","_col1","_col2"]
                                                                              TableScan [TS_25] (rows=28798881 width=337)
                                                                                default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_refunded_cash","cr_reversed_charge","cr_store_credit"]
                                                                        <-Map 39 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_946]
                                                                            PartitionCols:_col0, _col1
                                                                            Select Operator [SEL_945] (rows=287989836 width=119)
                                                                              Output:["_col0","_col1","_col2"]
                                                                              Filter Operator [FIL_944] (rows=287989836 width=119)
                                                                                predicate:(cs_item_sk BETWEEN DynamicValue(RS_47_item_i_item_sk_min) AND DynamicValue(RS_47_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_47_item_i_item_sk_bloom_filter)))
                                                                                TableScan [TS_23] (rows=287989836 width=119)
                                                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                                <-Reducer 36 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_941]
                                                                                    Group By Operator [GBY_939] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                    <-Map 35 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      PARTITION_ONLY_SHUFFLE [RS_937]
                                                                                        Group By Operator [GBY_935] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                          Select Operator [SEL_932] (rows=518 width=4)
                                                                                            Output:["_col0"]
                                                                                            Select Operator [SEL_930] (rows=518 width=111)
                                                                                              Output:["_col0","_col1"]
                                                                                              Filter Operator [FIL_929] (rows=518 width=312)
                                                                                                predicate:((i_color) IN ('maroon', 'burnished', 'dim', 'steel', 'navajo', 'chocolate') and i_current_price BETWEEN 35 AND 45 and i_current_price BETWEEN 36 AND 50)
                                                                                                TableScan [TS_17] (rows=462000 width=311)
                                                                                                  default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_color","i_product_name"]
                                                          <-Reducer 27 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_52]
                                                              PartitionCols:_col1
                                                              Merge Join Operator [MERGEJOIN_873] (rows=1608052 width=119)
                                                                Conds:RS_49._col0=RS_917._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                              <-Map 26 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_917]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_915] (rows=652 width=4)
                                                                    Output:["_col0"]
                                                                    Filter Operator [FIL_911] (rows=652 width=8)
                                                                      predicate:(d_year = 2000)
                                                                       Please refer to the previous TableScan [TS_8]
                                                              <-Reducer 34 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_49]
                                                                  PartitionCols:_col0
                                                                  Merge Join Operator [MERGEJOIN_872] (rows=4503592 width=119)
                                                                    Conds:RS_961._col1=RS_931._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                                  <-Map 35 [SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_931]
                                                                      PartitionCols:_col0
                                                                       Please refer to the previous Select Operator [SEL_930]
                                                                  <-Map 33 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_961]
                                                                      PartitionCols:_col1
                                                                      Select Operator [SEL_960] (rows=417313408 width=351)
                                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                                                                        Filter Operator [FIL_959] (rows=417313408 width=355)
                                                                          predicate:((ss_item_sk BETWEEN DynamicValue(RS_47_item_i_item_sk_min) AND DynamicValue(RS_47_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_47_item_i_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_53_catalog_sales_cs_item_sk_min) AND DynamicValue(RS_53_catalog_sales_cs_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_53_catalog_sales_cs_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_50_d1_d_date_sk_min) AND DynamicValue(RS_50_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_50_d1_d_date_sk_bloom_filter))) and ss_addr_sk is not null and ss_cdemo_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                                          TableScan [TS_14] (rows=575995635 width=355)
                                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                          <-Reducer 36 [BROADCAST_EDGE] vectorized
                                                                            BROADCAST [RS_940]
                                                                               Please refer to the previous Group By Operator [GBY_939]
                                                                          <-Reducer 29 [BROADCAST_EDGE] vectorized
                                                                            BROADCAST [RS_943]
                                                                              Group By Operator [GBY_942] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                              <-Map 26 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_923]
                                                                                  Group By Operator [GBY_921] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                    Select Operator [SEL_918] (rows=652 width=4)
                                                                                      Output:["_col0"]
                                                                                       Please refer to the previous Select Operator [SEL_915]
                                                                          <-Reducer 42 [BROADCAST_EDGE] vectorized
                                                                            BROADCAST [RS_958]
                                                                              Group By Operator [GBY_957] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                              <-Reducer 41 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                PARTITION_ONLY_SHUFFLE [RS_956]
                                                                                  Group By Operator [GBY_955] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                    Select Operator [SEL_954] (rows=13257 width=4)
                                                                                      Output:["_col0"]
                                                                                       Please refer to the previous Select Operator [SEL_952]
                <-Reducer 15 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_999]
                    PartitionCols:_col1, _col0, _col2
                    Select Operator [SEL_998] (rows=2299138 width=525)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                      Group By Operator [GBY_997] (rows=2299138 width=1362)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                      <-Reducer 14 [SIMPLE_EDGE]
                        SHUFFLE [RS_191]
                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                          Group By Operator [GBY_190] (rows=2299138 width=1362)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col37)","sum(_col38)","sum(_col39)"],keys:_col26, _col40, _col27, _col7, _col8, _col9, _col10, _col13, _col15, _col21, _col22, _col23, _col24, _col41
                            Select Operator [SEL_189] (rows=2331650 width=1292)
                              Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col21","_col22","_col23","_col24","_col26","_col27","_col37","_col38","_col39","_col40","_col41"]
                              Filter Operator [FIL_188] (rows=2331650 width=1292)
                                predicate:(_col45 <> _col17)
                                Merge Join Operator [MERGEJOIN_896] (rows=2331650 width=1292)
                                  Conds:RS_185._col32=RS_928._col0(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col17","_col21","_col22","_col23","_col24","_col26","_col27","_col37","_col38","_col39","_col40","_col41","_col45"]
                                <-Map 49 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_928]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_925]
                                <-Reducer 13 [SIMPLE_EDGE]
                                  SHUFFLE [RS_185]
                                    PartitionCols:_col32
                                    Merge Join Operator [MERGEJOIN_895] (rows=2299138 width=1205)
                                      Conds:RS_182._col0=RS_183._col13(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col17","_col21","_col22","_col23","_col24","_col26","_col27","_col32","_col37","_col38","_col39","_col40","_col41"]
                                    <-Reducer 6 [SIMPLE_EDGE]
                                      SHUFFLE [RS_182]
                                        PartitionCols:_col0
                                         Please refer to the previous Merge Join Operator [MERGEJOIN_871]
                                    <-Reducer 20 [SIMPLE_EDGE]
                                      SHUFFLE [RS_183]
                                        PartitionCols:_col13
                                        Select Operator [SEL_164] (rows=2651207 width=784)
                                          Output:["_col3","_col4","_col5","_col6","_col8","_col9","_col13","_col14","_col19","_col20","_col21","_col22","_col23"]
                                          Merge Join Operator [MERGEJOIN_894] (rows=2651207 width=784)
                                            Conds:RS_161._col1, _col7=RS_968._col0, _col1(Inner),Output:["_col2","_col3","_col8","_col9","_col10","_col11","_col12","_col17","_col18","_col20","_col21","_col22","_col23"]
                                          <-Map 48 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_968]
                                              PartitionCols:_col0, _col1
                                               Please refer to the previous Select Operator [SEL_966]
                                          <-Reducer 19 [SIMPLE_EDGE]
                                            SHUFFLE [RS_161]
                                              PartitionCols:_col1, _col7
                                              Merge Join Operator [MERGEJOIN_893] (rows=1608052 width=657)
                                                Conds:RS_158._col5=RS_904._col0(Inner),Output:["_col1","_col2","_col3","_col7","_col8","_col9","_col10","_col11","_col12","_col17","_col18","_col20","_col21","_col22","_col23"]
                                              <-Map 16 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_904]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_901]
                                              <-Reducer 25 [SIMPLE_EDGE]
                                                SHUFFLE [RS_158]
                                                  PartitionCols:_col5
                                                  Merge Join Operator [MERGEJOIN_892] (rows=1608052 width=296)
                                                    Conds:RS_155._col6=RS_965._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col7","_col8","_col9","_col10","_col11","_col12","_col17","_col18"]
                                                  <-Map 47 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_965]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_963]
                                                  <-Reducer 24 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_155]
                                                      PartitionCols:_col6
                                                      Merge Join Operator [MERGEJOIN_891] (rows=1608052 width=119)
                                                        Conds:RS_152._col4=RS_909._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                      <-Map 21 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_909]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_906]
                                                      <-Reducer 31 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_152]
                                                          PartitionCols:_col4
                                                          Merge Join Operator [MERGEJOIN_890] (rows=1608052 width=119)
                                                            Conds:RS_149._col1=RS_986._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                          <-Reducer 45 [ONE_TO_ONE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_986]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_985] (rows=13257 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_984] (rows=13257 width=228)
                                                                  predicate:(_col1 > (2 * _col2))
                                                                  Group By Operator [GBY_983] (rows=39773 width=228)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                                  <-Reducer 44 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_129]
                                                                      PartitionCols:_col0
                                                                      Group By Operator [GBY_128] (rows=6482999 width=228)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col5)"],keys:_col0
                                                                        Merge Join Operator [MERGEJOIN_889] (rows=183085709 width=227)
                                                                          Conds:RS_982._col0, _col1=RS_949._col0, _col1(Inner),Output:["_col0","_col2","_col5"]
                                                                        <-Map 43 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_949]
                                                                            PartitionCols:_col0, _col1
                                                                             Please refer to the previous Select Operator [SEL_947]
                                                                        <-Map 51 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_982]
                                                                            PartitionCols:_col0, _col1
                                                                            Select Operator [SEL_981] (rows=287989836 width=119)
                                                                              Output:["_col0","_col1","_col2"]
                                                                              Filter Operator [FIL_980] (rows=287989836 width=119)
                                                                                predicate:(cs_item_sk BETWEEN DynamicValue(RS_144_item_i_item_sk_min) AND DynamicValue(RS_144_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_144_item_i_item_sk_bloom_filter)))
                                                                                TableScan [TS_120] (rows=287989836 width=119)
                                                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                                <-Reducer 38 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_977]
                                                                                    Group By Operator [GBY_975] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                    <-Map 35 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      PARTITION_ONLY_SHUFFLE [RS_938]
                                                                                        Group By Operator [GBY_936] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                          Select Operator [SEL_934] (rows=518 width=4)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Select Operator [SEL_930]
                                                          <-Reducer 30 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_149]
                                                              PartitionCols:_col1
                                                              Merge Join Operator [MERGEJOIN_888] (rows=1608052 width=119)
                                                                Conds:RS_146._col0=RS_919._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                              <-Map 26 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_919]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_916] (rows=652 width=4)
                                                                    Output:["_col0"]
                                                                    Filter Operator [FIL_912] (rows=652 width=8)
                                                                      predicate:(d_year = 2001)
                                                                       Please refer to the previous TableScan [TS_8]
                                                              <-Reducer 37 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_146]
                                                                  PartitionCols:_col0
                                                                  Merge Join Operator [MERGEJOIN_887] (rows=4503592 width=119)
                                                                    Conds:RS_996._col1=RS_933._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                                  <-Map 35 [SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_933]
                                                                      PartitionCols:_col0
                                                                       Please refer to the previous Select Operator [SEL_930]
                                                                  <-Map 50 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_996]
                                                                      PartitionCols:_col1
                                                                      Select Operator [SEL_995] (rows=417313408 width=351)
                                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                                                                        Filter Operator [FIL_994] (rows=417313408 width=355)
                                                                          predicate:((ss_item_sk BETWEEN DynamicValue(RS_144_item_i_item_sk_min) AND DynamicValue(RS_144_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_144_item_i_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_150_catalog_sales_cs_item_sk_min) AND DynamicValue(RS_150_catalog_sales_cs_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_150_catalog_sales_cs_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_194_item_i_item_sk_min) AND DynamicValue(RS_194_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_194_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_147_d1_d_date_sk_min) AND DynamicValue(RS_147_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_147_d1_d_date_sk_bloom_filter))) and ss_addr_sk is not null and ss_cdemo_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                                          TableScan [TS_111] (rows=575995635 width=355)
                                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                          <-Reducer 38 [BROADCAST_EDGE] vectorized
                                                                            BROADCAST [RS_976]
                                                                               Please refer to the previous Group By Operator [GBY_975]
                                                                          <-Reducer 12 [BROADCAST_EDGE] vectorized
                                                                            BROADCAST [RS_993]
                                                                              Group By Operator [GBY_992] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                              <-Reducer 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                PARTITION_ONLY_SHUFFLE [RS_974]
                                                                                  Group By Operator [GBY_973] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                    Select Operator [SEL_972] (rows=2299138 width=8)
                                                                                      Output:["_col0"]
                                                                                       Please refer to the previous Select Operator [SEL_970]
                                                                          <-Reducer 32 [BROADCAST_EDGE] vectorized
                                                                            BROADCAST [RS_979]
                                                                              Group By Operator [GBY_978] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                              <-Map 26 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_924]
                                                                                  Group By Operator [GBY_922] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                    Select Operator [SEL_920] (rows=652 width=4)
                                                                                      Output:["_col0"]
                                                                                       Please refer to the previous Select Operator [SEL_916]
                                                                          <-Reducer 46 [BROADCAST_EDGE] vectorized
                                                                            BROADCAST [RS_991]
                                                                              Group By Operator [GBY_990] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                              <-Reducer 45 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                PARTITION_ONLY_SHUFFLE [RS_989]
                                                                                  Group By Operator [GBY_988] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                    Select Operator [SEL_987] (rows=13257 width=4)
                                                                                      Output:["_col0"]
                                                                                       Please refer to the previous Select Operator [SEL_985]

