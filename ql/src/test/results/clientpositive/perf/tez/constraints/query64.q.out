PREHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@income_band
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@income_band
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 31 <- Reducer 37 (BROADCAST_EDGE)
Map 40 <- Reducer 35 (BROADCAST_EDGE)
Map 50 <- Reducer 39 (BROADCAST_EDGE)
Map 54 <- Reducer 53 (BROADCAST_EDGE)
Reducer 10 <- Map 49 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 49 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 1 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE)
Reducer 16 <- Map 46 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Map 47 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Map 47 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Map 36 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 20 <- Map 36 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Map 48 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 48 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 49 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Map 49 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (SIMPLE_EDGE)
Reducer 27 <- Map 26 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 28 <- Reducer 27 (SIMPLE_EDGE), Reducer 42 (SIMPLE_EDGE)
Reducer 29 <- Map 26 (SIMPLE_EDGE), Reducer 38 (SIMPLE_EDGE)
Reducer 3 <- Map 46 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (SIMPLE_EDGE), Reducer 45 (SIMPLE_EDGE)
Reducer 32 <- Map 31 (SIMPLE_EDGE), Map 34 (SIMPLE_EDGE)
Reducer 33 <- Map 36 (SIMPLE_EDGE), Reducer 32 (SIMPLE_EDGE)
Reducer 35 <- Map 34 (CUSTOM_SIMPLE_EDGE)
Reducer 37 <- Map 36 (CUSTOM_SIMPLE_EDGE)
Reducer 38 <- Map 36 (SIMPLE_EDGE), Reducer 51 (SIMPLE_EDGE)
Reducer 39 <- Map 36 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Map 47 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 41 <- Map 40 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE)
Reducer 42 <- Reducer 41 (SIMPLE_EDGE)
Reducer 44 <- Map 43 (SIMPLE_EDGE), Map 54 (SIMPLE_EDGE)
Reducer 45 <- Reducer 44 (SIMPLE_EDGE)
Reducer 5 <- Map 47 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 51 <- Map 50 (SIMPLE_EDGE), Map 52 (SIMPLE_EDGE)
Reducer 53 <- Map 52 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Map 36 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 36 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 48 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 48 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 14 vectorized
      File Output Operator [FS_1079]
        Select Operator [SEL_1078] (rows=104628491644 width=1702)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20"]
        <-Reducer 13 [SIMPLE_EDGE]
          SHUFFLE [RS_205]
            Select Operator [SEL_204] (rows=104628491644 width=1694)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18"]
              Filter Operator [FIL_203] (rows=104628491644 width=1694)
                predicate:(_col3 <= _col19)
                Merge Join Operator [MERGEJOIN_977] (rows=313885474933 width=1694)
                  Conds:RS_1052._col1, _col0, _col2=RS_1077._col2, _col1, _col3(Inner),Output:["_col3","_col4","_col5","_col6","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22"]
                <-Reducer 12 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_1052]
                    PartitionCols:_col1, _col0, _col2
                    Select Operator [SEL_1051] (rows=21304422 width=525)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                      Filter Operator [FIL_1050] (rows=21304422 width=1255)
                        predicate:_col13 is not null
                        Select Operator [SEL_1049] (rows=21304422 width=1255)
                          Output:["_col0","_col1","_col2","_col13","_col14","_col15","_col16"]
                          Group By Operator [GBY_1048] (rows=21304422 width=1255)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12
                          <-Reducer 11 [SIMPLE_EDGE]
                            SHUFFLE [RS_95]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                              Group By Operator [GBY_94] (rows=21304422 width=1255)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16"],aggregations:["count()","sum(_col16)","sum(_col17)","sum(_col18)"],keys:_col24, _col19, _col25, _col29, _col31, _col37, _col38, _col39, _col40, _col42, _col43, _col44, _col45
                                Merge Join Operator [MERGEJOIN_961] (rows=21304422 width=1048)
                                  Conds:RS_90._col5=RS_1044._col0(Inner),Output:["_col16","_col17","_col18","_col19","_col24","_col25","_col29","_col31","_col37","_col38","_col39","_col40","_col42","_col43","_col44","_col45"]
                                <-Map 49 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_1044]
                                    PartitionCols:_col0
                                    Select Operator [SEL_1043] (rows=40000000 width=365)
                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                      TableScan [TS_60] (rows=40000000 width=365)
                                        default@customer_address,ad2,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_street_number","ca_street_name","ca_city","ca_zip"]
                                <-Reducer 10 [SIMPLE_EDGE]
                                  SHUFFLE [RS_90]
                                    PartitionCols:_col5
                                    Merge Join Operator [MERGEJOIN_960] (rows=21304422 width=691)
                                      Conds:RS_87._col13=RS_1045._col0(Inner),Output:["_col5","_col16","_col17","_col18","_col19","_col24","_col25","_col29","_col31","_col37","_col38","_col39","_col40"]
                                    <-Map 49 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_1045]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_1043]
                                    <-Reducer 9 [SIMPLE_EDGE]
                                      SHUFFLE [RS_87]
                                        PartitionCols:_col13
                                        Filter Operator [FIL_86] (rows=21304422 width=502)
                                          predicate:(_col33 <> _col35)
                                          Merge Join Operator [MERGEJOIN_959] (rows=21304422 width=502)
                                            Conds:RS_83._col3=RS_1040._col0(Inner),Output:["_col5","_col13","_col16","_col17","_col18","_col19","_col24","_col25","_col29","_col31","_col33","_col35"]
                                          <-Map 48 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1040]
                                              PartitionCols:_col0
                                              Select Operator [SEL_1038] (rows=1861800 width=89)
                                                Output:["_col0","_col1"]
                                                TableScan [TS_54] (rows=1861800 width=89)
                                                  default@customer_demographics,cd1,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status"]
                                          <-Reducer 8 [SIMPLE_EDGE]
                                            SHUFFLE [RS_83]
                                              PartitionCols:_col3
                                              Merge Join Operator [MERGEJOIN_958] (rows=21007353 width=418)
                                                Conds:RS_80._col11=RS_1039._col0(Inner),Output:["_col3","_col5","_col13","_col16","_col17","_col18","_col19","_col24","_col25","_col29","_col31","_col33"]
                                              <-Map 48 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1039]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1038]
                                              <-Reducer 7 [SIMPLE_EDGE]
                                                SHUFFLE [RS_80]
                                                  PartitionCols:_col11
                                                  Merge Join Operator [MERGEJOIN_957] (rows=20714426 width=331)
                                                    Conds:RS_77._col6=RS_993._col0(Inner),Output:["_col3","_col5","_col11","_col13","_col16","_col17","_col18","_col19","_col24","_col25","_col29","_col31"]
                                                  <-Map 36 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_993]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_987] (rows=73049 width=8)
                                                        Output:["_col0","_col1"]
                                                        TableScan [TS_11] (rows=73049 width=8)
                                                          default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Reducer 6 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_77]
                                                      PartitionCols:_col6
                                                      Merge Join Operator [MERGEJOIN_956] (rows=20714426 width=331)
                                                        Conds:RS_74._col7=RS_992._col0(Inner),Output:["_col3","_col5","_col6","_col11","_col13","_col16","_col17","_col18","_col19","_col24","_col25","_col29"]
                                                      <-Map 36 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_992]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_986] (rows=73049 width=8)
                                                            Output:["_col0","_col1"]
                                                             Please refer to the previous TableScan [TS_11]
                                                      <-Reducer 5 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_74]
                                                          PartitionCols:_col7
                                                          Merge Join Operator [MERGEJOIN_955] (rows=20714426 width=330)
                                                            Conds:RS_71._col4=RS_1035._col0(Inner),Output:["_col3","_col5","_col6","_col7","_col11","_col13","_col16","_col17","_col18","_col19","_col24","_col25"]
                                                          <-Map 47 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1035]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1033] (rows=7200 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_1032] (rows=7200 width=8)
                                                                  predicate:hd_income_band_sk is not null
                                                                  TableScan [TS_44] (rows=7200 width=8)
                                                                    default@household_demographics,hd1,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_income_band_sk"]
                                                          <-Reducer 4 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_71]
                                                              PartitionCols:_col4
                                                              Merge Join Operator [MERGEJOIN_954] (rows=20714426 width=334)
                                                                Conds:RS_68._col12=RS_1034._col0(Inner),Output:["_col3","_col4","_col5","_col6","_col7","_col11","_col13","_col16","_col17","_col18","_col19","_col24","_col25"]
                                                              <-Map 47 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_1034]
                                                                  PartitionCols:_col0
                                                                   Please refer to the previous Select Operator [SEL_1033]
                                                              <-Reducer 3 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_68]
                                                                  PartitionCols:_col12
                                                                  Merge Join Operator [MERGEJOIN_953] (rows=20714426 width=336)
                                                                    Conds:RS_65._col14=RS_1030._col0(Inner),Output:["_col3","_col4","_col5","_col6","_col7","_col11","_col12","_col13","_col16","_col17","_col18","_col19","_col24","_col25"]
                                                                  <-Map 46 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_1030]
                                                                      PartitionCols:_col0
                                                                      Select Operator [SEL_1029] (rows=1704 width=181)
                                                                        Output:["_col0","_col1","_col2"]
                                                                        Filter Operator [FIL_1028] (rows=1704 width=181)
                                                                          predicate:(s_store_name is not null and s_zip is not null)
                                                                          TableScan [TS_41] (rows=1704 width=181)
                                                                            default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_zip"]
                                                                  <-Reducer 2 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_65]
                                                                      PartitionCols:_col14
                                                                      Merge Join Operator [MERGEJOIN_952] (rows=20714426 width=160)
                                                                        Conds:RS_979._col0, _col1=RS_63._col7, _col13(Inner),Output:["_col3","_col4","_col5","_col6","_col7","_col11","_col12","_col13","_col14","_col16","_col17","_col18","_col19"]
                                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_979]
                                                                          PartitionCols:_col0, _col1
                                                                          Select Operator [SEL_978] (rows=57591150 width=8)
                                                                            Output:["_col0","_col1"]
                                                                            TableScan [TS_0] (rows=57591150 width=8)
                                                                              default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
                                                                      <-Reducer 28 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_63]
                                                                          PartitionCols:_col7, _col13
                                                                          Merge Join Operator [MERGEJOIN_951] (rows=12564038 width=28)
                                                                            Conds:RS_37._col7=RS_1027._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                                                                          <-Reducer 27 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_37]
                                                                              PartitionCols:_col7
                                                                              Merge Join Operator [MERGEJOIN_949] (rows=12564038 width=28)
                                                                                Conds:RS_983._col0=RS_35._col2(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                                                                              <-Map 26 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_983]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_982] (rows=69376329 width=23)
                                                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                                    Filter Operator [FIL_981] (rows=69376329 width=23)
                                                                                      predicate:(c_first_shipto_date_sk is not null and c_first_sales_date_sk is not null and c_current_hdemo_sk is not null and c_current_cdemo_sk is not null and c_current_addr_sk is not null)
                                                                                      TableScan [TS_2] (rows=80000000 width=23)
                                                                                        default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk","c_first_shipto_date_sk","c_first_sales_date_sk"]
                                                                              <-Reducer 33 [SIMPLE_EDGE]
                                                                                SHUFFLE [RS_35]
                                                                                  PartitionCols:_col2
                                                                                  Merge Join Operator [MERGEJOIN_948] (rows=14487982 width=12)
                                                                                    Conds:RS_17._col0=RS_997._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                                                  <-Map 36 [SIMPLE_EDGE] vectorized
                                                                                    SHUFFLE [RS_997]
                                                                                      PartitionCols:_col0
                                                                                      Select Operator [SEL_991] (rows=652 width=4)
                                                                                        Output:["_col0"]
                                                                                        Filter Operator [FIL_985] (rows=652 width=8)
                                                                                          predicate:(d_year = 2001)
                                                                                           Please refer to the previous TableScan [TS_11]
                                                                                  <-Reducer 32 [SIMPLE_EDGE]
                                                                                    SHUFFLE [RS_17]
                                                                                      PartitionCols:_col0
                                                                                      Merge Join Operator [MERGEJOIN_947] (rows=40575792 width=205)
                                                                                        Conds:RS_1009._col1=RS_1012._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                                                      <-Map 34 [SIMPLE_EDGE] vectorized
                                                                                        PARTITION_ONLY_SHUFFLE [RS_1012]
                                                                                          PartitionCols:_col0
                                                                                          Select Operator [SEL_1011] (rows=4667 width=4)
                                                                                            Output:["_col0"]
                                                                                            Filter Operator [FIL_1010] (rows=4667 width=204)
                                                                                              predicate:(i_current_price BETWEEN 36 AND 45 and (i_color) IN ('maroon', 'burnished', 'dim', 'steel', 'navajo', 'chocolate'))
                                                                                              TableScan [TS_8] (rows=462000 width=204)
                                                                                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_color"]
                                                                                      <-Map 31 [SIMPLE_EDGE] vectorized
                                                                                        SHUFFLE [RS_1009]
                                                                                          PartitionCols:_col1
                                                                                          Select Operator [SEL_1008] (rows=417313408 width=351)
                                                                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                                                                                            Filter Operator [FIL_1007] (rows=417313408 width=355)
                                                                                              predicate:(ss_cdemo_sk is not null and ss_sold_date_sk is not null and ss_promo_sk is not null and ss_addr_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_18_d1_d_date_sk_min) AND DynamicValue(RS_18_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_18_d1_d_date_sk_bloom_filter)))
                                                                                              TableScan [TS_5] (rows=575995635 width=355)
                                                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                                              <-Reducer 37 [BROADCAST_EDGE] vectorized
                                                                                                BROADCAST [RS_1006]
                                                                                                  Group By Operator [GBY_1005] (rows=1 width=12)
                                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                                  <-Map 36 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                                    SHUFFLE [RS_1003]
                                                                                                      Group By Operator [GBY_1001] (rows=1 width=12)
                                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                        Select Operator [SEL_998] (rows=652 width=4)
                                                                                                          Output:["_col0"]
                                                                                                           Please refer to the previous Select Operator [SEL_991]
                                                                          <-Reducer 42 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1027]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1026] (rows=13257 width=4)
                                                                                Output:["_col0"]
                                                                                Filter Operator [FIL_1025] (rows=13257 width=228)
                                                                                  predicate:(_col1 > (2 * _col2))
                                                                                  Group By Operator [GBY_1024] (rows=39773 width=228)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                                                  <-Reducer 41 [SIMPLE_EDGE]
                                                                                    SHUFFLE [RS_30]
                                                                                      PartitionCols:_col0
                                                                                      Group By Operator [GBY_29] (rows=6482999 width=228)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col5)"],keys:_col0
                                                                                        Merge Join Operator [MERGEJOIN_950] (rows=183085709 width=227)
                                                                                          Conds:RS_1020._col0, _col1=RS_1022._col0, _col1(Inner),Output:["_col0","_col2","_col5"]
                                                                                        <-Map 43 [SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1022]
                                                                                            PartitionCols:_col0, _col1
                                                                                            Select Operator [SEL_1021] (rows=28798881 width=120)
                                                                                              Output:["_col0","_col1","_col2"]
                                                                                              TableScan [TS_23] (rows=28798881 width=337)
                                                                                                default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_refunded_cash","cr_reversed_charge","cr_store_credit"]
                                                                                        <-Map 40 [SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1020]
                                                                                            PartitionCols:_col0, _col1
                                                                                            Select Operator [SEL_1019] (rows=287989836 width=119)
                                                                                              Output:["_col0","_col1","_col2"]
                                                                                              Filter Operator [FIL_1018] (rows=287989836 width=119)
                                                                                                predicate:(cs_item_sk BETWEEN DynamicValue(RS_15_item_i_item_sk_min) AND DynamicValue(RS_15_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_15_item_i_item_sk_bloom_filter)))
                                                                                                TableScan [TS_21] (rows=287989836 width=119)
                                                                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                                                <-Reducer 35 [BROADCAST_EDGE] vectorized
                                                                                                  BROADCAST [RS_1017]
                                                                                                    Group By Operator [GBY_1016] (rows=1 width=12)
                                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                                    <-Map 34 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                                      PARTITION_ONLY_SHUFFLE [RS_1015]
                                                                                                        Group By Operator [GBY_1014] (rows=1 width=12)
                                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                          Select Operator [SEL_1013] (rows=4667 width=4)
                                                                                                            Output:["_col0"]
                                                                                                             Please refer to the previous Select Operator [SEL_1011]
                <-Reducer 25 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_1077]
                    PartitionCols:_col2, _col1, _col3
                    Select Operator [SEL_1076] (rows=21304422 width=1354)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                      Filter Operator [FIL_1075] (rows=21304422 width=1362)
                        predicate:_col14 is not null
                        Select Operator [SEL_1074] (rows=21304422 width=1362)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col14","_col15","_col16","_col17"]
                          Group By Operator [GBY_1073] (rows=21304422 width=1362)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                          <-Reducer 24 [SIMPLE_EDGE]
                            SHUFFLE [RS_195]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                              Group By Operator [GBY_194] (rows=21304422 width=1362)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col16)","sum(_col17)","sum(_col18)"],keys:_col24, _col19, _col25, _col20, _col29, _col31, _col37, _col38, _col39, _col40, _col42, _col43, _col44, _col45
                                Merge Join Operator [MERGEJOIN_976] (rows=21304422 width=1155)
                                  Conds:RS_190._col5=RS_1047._col0(Inner),Output:["_col16","_col17","_col18","_col19","_col20","_col24","_col25","_col29","_col31","_col37","_col38","_col39","_col40","_col42","_col43","_col44","_col45"]
                                <-Map 49 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_1047]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_1043]
                                <-Reducer 23 [SIMPLE_EDGE]
                                  SHUFFLE [RS_190]
                                    PartitionCols:_col5
                                    Merge Join Operator [MERGEJOIN_975] (rows=21304422 width=798)
                                      Conds:RS_187._col13=RS_1046._col0(Inner),Output:["_col5","_col16","_col17","_col18","_col19","_col20","_col24","_col25","_col29","_col31","_col37","_col38","_col39","_col40"]
                                    <-Map 49 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_1046]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_1043]
                                    <-Reducer 22 [SIMPLE_EDGE]
                                      SHUFFLE [RS_187]
                                        PartitionCols:_col13
                                        Filter Operator [FIL_186] (rows=21304422 width=609)
                                          predicate:(_col33 <> _col35)
                                          Merge Join Operator [MERGEJOIN_974] (rows=21304422 width=609)
                                            Conds:RS_183._col3=RS_1042._col0(Inner),Output:["_col5","_col13","_col16","_col17","_col18","_col19","_col20","_col24","_col25","_col29","_col31","_col33","_col35"]
                                          <-Map 48 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1042]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_1038]
                                          <-Reducer 21 [SIMPLE_EDGE]
                                            SHUFFLE [RS_183]
                                              PartitionCols:_col3
                                              Merge Join Operator [MERGEJOIN_973] (rows=21007353 width=525)
                                                Conds:RS_180._col11=RS_1041._col0(Inner),Output:["_col3","_col5","_col13","_col16","_col17","_col18","_col19","_col20","_col24","_col25","_col29","_col31","_col33"]
                                              <-Map 48 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1041]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1038]
                                              <-Reducer 20 [SIMPLE_EDGE]
                                                SHUFFLE [RS_180]
                                                  PartitionCols:_col11
                                                  Merge Join Operator [MERGEJOIN_972] (rows=20714426 width=438)
                                                    Conds:RS_177._col6=RS_996._col0(Inner),Output:["_col3","_col5","_col11","_col13","_col16","_col17","_col18","_col19","_col20","_col24","_col25","_col29","_col31"]
                                                  <-Map 36 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_996]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_990] (rows=73049 width=8)
                                                        Output:["_col0","_col1"]
                                                         Please refer to the previous TableScan [TS_11]
                                                  <-Reducer 19 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_177]
                                                      PartitionCols:_col6
                                                      Merge Join Operator [MERGEJOIN_971] (rows=20714426 width=438)
                                                        Conds:RS_174._col7=RS_995._col0(Inner),Output:["_col3","_col5","_col6","_col11","_col13","_col16","_col17","_col18","_col19","_col20","_col24","_col25","_col29"]
                                                      <-Map 36 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_995]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_989] (rows=73049 width=8)
                                                            Output:["_col0","_col1"]
                                                             Please refer to the previous TableScan [TS_11]
                                                      <-Reducer 18 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_174]
                                                          PartitionCols:_col7
                                                          Merge Join Operator [MERGEJOIN_970] (rows=20714426 width=437)
                                                            Conds:RS_171._col4=RS_1037._col0(Inner),Output:["_col3","_col5","_col6","_col7","_col11","_col13","_col16","_col17","_col18","_col19","_col20","_col24","_col25"]
                                                          <-Map 47 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1037]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1033]
                                                          <-Reducer 17 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_171]
                                                              PartitionCols:_col4
                                                              Merge Join Operator [MERGEJOIN_969] (rows=20714426 width=441)
                                                                Conds:RS_168._col12=RS_1036._col0(Inner),Output:["_col3","_col4","_col5","_col6","_col7","_col11","_col13","_col16","_col17","_col18","_col19","_col20","_col24","_col25"]
                                                              <-Map 47 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_1036]
                                                                  PartitionCols:_col0
                                                                   Please refer to the previous Select Operator [SEL_1033]
                                                              <-Reducer 16 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_168]
                                                                  PartitionCols:_col12
                                                                  Merge Join Operator [MERGEJOIN_968] (rows=20714426 width=443)
                                                                    Conds:RS_165._col14=RS_1031._col0(Inner),Output:["_col3","_col4","_col5","_col6","_col7","_col11","_col12","_col13","_col16","_col17","_col18","_col19","_col20","_col24","_col25"]
                                                                  <-Map 46 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_1031]
                                                                      PartitionCols:_col0
                                                                       Please refer to the previous Select Operator [SEL_1029]
                                                                  <-Reducer 15 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_165]
                                                                      PartitionCols:_col14
                                                                      Merge Join Operator [MERGEJOIN_967] (rows=20714426 width=267)
                                                                        Conds:RS_980._col0, _col1=RS_163._col7, _col13(Inner),Output:["_col3","_col4","_col5","_col6","_col7","_col11","_col12","_col13","_col14","_col16","_col17","_col18","_col19","_col20"]
                                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_980]
                                                                          PartitionCols:_col0, _col1
                                                                           Please refer to the previous Select Operator [SEL_978]
                                                                      <-Reducer 30 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_163]
                                                                          PartitionCols:_col7, _col13
                                                                          Merge Join Operator [MERGEJOIN_966] (rows=12564038 width=135)
                                                                            Conds:RS_137._col7=RS_1072._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18"]
                                                                          <-Reducer 29 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_137]
                                                                              PartitionCols:_col7
                                                                              Merge Join Operator [MERGEJOIN_964] (rows=12564038 width=135)
                                                                                Conds:RS_984._col0=RS_135._col2(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18"]
                                                                              <-Map 26 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_984]
                                                                                  PartitionCols:_col0
                                                                                   Please refer to the previous Select Operator [SEL_982]
                                                                              <-Reducer 38 [SIMPLE_EDGE]
                                                                                SHUFFLE [RS_135]
                                                                                  PartitionCols:_col2
                                                                                  Merge Join Operator [MERGEJOIN_963] (rows=14487982 width=119)
                                                                                    Conds:RS_117._col0=RS_999._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                                                  <-Map 36 [SIMPLE_EDGE] vectorized
                                                                                    SHUFFLE [RS_999]
                                                                                      PartitionCols:_col0
                                                                                      Select Operator [SEL_994] (rows=652 width=4)
                                                                                        Output:["_col0"]
                                                                                        Filter Operator [FIL_988] (rows=652 width=8)
                                                                                          predicate:(d_year = 2000)
                                                                                           Please refer to the previous TableScan [TS_11]
                                                                                  <-Reducer 51 [SIMPLE_EDGE]
                                                                                    SHUFFLE [RS_117]
                                                                                      PartitionCols:_col0
                                                                                      Merge Join Operator [MERGEJOIN_962] (rows=40575792 width=312)
                                                                                        Conds:RS_1057._col1=RS_1060._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                                                      <-Map 52 [SIMPLE_EDGE] vectorized
                                                                                        PARTITION_ONLY_SHUFFLE [RS_1060]
                                                                                          PartitionCols:_col0
                                                                                          Select Operator [SEL_1059] (rows=4667 width=111)
                                                                                            Output:["_col0","_col1"]
                                                                                            Filter Operator [FIL_1058] (rows=4667 width=311)
                                                                                              predicate:(i_current_price BETWEEN 36 AND 45 and (i_color) IN ('maroon', 'burnished', 'dim', 'steel', 'navajo', 'chocolate'))
                                                                                              TableScan [TS_108] (rows=462000 width=311)
                                                                                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_color","i_product_name"]
                                                                                      <-Map 50 [SIMPLE_EDGE] vectorized
                                                                                        SHUFFLE [RS_1057]
                                                                                          PartitionCols:_col1
                                                                                          Select Operator [SEL_1056] (rows=417313408 width=351)
                                                                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                                                                                            Filter Operator [FIL_1055] (rows=417313408 width=355)
                                                                                              predicate:(ss_cdemo_sk is not null and ss_sold_date_sk is not null and ss_promo_sk is not null and ss_addr_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_118_d1_d_date_sk_min) AND DynamicValue(RS_118_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_118_d1_d_date_sk_bloom_filter)))
                                                                                              TableScan [TS_105] (rows=575995635 width=355)
                                                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                                              <-Reducer 39 [BROADCAST_EDGE] vectorized
                                                                                                BROADCAST [RS_1054]
                                                                                                  Group By Operator [GBY_1053] (rows=1 width=12)
                                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                                  <-Map 36 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                                    SHUFFLE [RS_1004]
                                                                                                      Group By Operator [GBY_1002] (rows=1 width=12)
                                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                        Select Operator [SEL_1000] (rows=652 width=4)
                                                                                                          Output:["_col0"]
                                                                                                           Please refer to the previous Select Operator [SEL_994]
                                                                          <-Reducer 45 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1072]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1071] (rows=13257 width=4)
                                                                                Output:["_col0"]
                                                                                Filter Operator [FIL_1070] (rows=13257 width=228)
                                                                                  predicate:(_col1 > (2 * _col2))
                                                                                  Group By Operator [GBY_1069] (rows=39773 width=228)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                                                  <-Reducer 44 [SIMPLE_EDGE]
                                                                                    SHUFFLE [RS_130]
                                                                                      PartitionCols:_col0
                                                                                      Group By Operator [GBY_129] (rows=6482999 width=228)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col5)"],keys:_col0
                                                                                        Merge Join Operator [MERGEJOIN_965] (rows=183085709 width=227)
                                                                                          Conds:RS_1068._col0, _col1=RS_1023._col0, _col1(Inner),Output:["_col0","_col2","_col5"]
                                                                                        <-Map 43 [SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1023]
                                                                                            PartitionCols:_col0, _col1
                                                                                             Please refer to the previous Select Operator [SEL_1021]
                                                                                        <-Map 54 [SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1068]
                                                                                            PartitionCols:_col0, _col1
                                                                                            Select Operator [SEL_1067] (rows=287989836 width=119)
                                                                                              Output:["_col0","_col1","_col2"]
                                                                                              Filter Operator [FIL_1066] (rows=287989836 width=119)
                                                                                                predicate:(cs_item_sk BETWEEN DynamicValue(RS_115_item_i_item_sk_min) AND DynamicValue(RS_115_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_115_item_i_item_sk_bloom_filter)))
                                                                                                TableScan [TS_121] (rows=287989836 width=119)
                                                                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                                                <-Reducer 53 [BROADCAST_EDGE] vectorized
                                                                                                  BROADCAST [RS_1065]
                                                                                                    Group By Operator [GBY_1064] (rows=1 width=12)
                                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                                    <-Map 52 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                                      PARTITION_ONLY_SHUFFLE [RS_1063]
                                                                                                        Group By Operator [GBY_1062] (rows=1 width=12)
                                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                          Select Operator [SEL_1061] (rows=4667 width=4)
                                                                                                            Output:["_col0"]
                                                                                                             Please refer to the previous Select Operator [SEL_1059]

