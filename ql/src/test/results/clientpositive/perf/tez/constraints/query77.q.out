Warning: Shuffle Join MERGEJOIN[225][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 14' is a cross product
PREHOOK: query: explain
with ss as
 (select s_store_sk,
         sum(ss_ext_sales_price) as sales,
         sum(ss_net_profit) as profit
 from store_sales,
      date_dim,
      store
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  30 days) 
       and ss_store_sk = s_store_sk
 group by s_store_sk)
 ,
 sr as
 (select s_store_sk,
         sum(sr_return_amt) as returns,
         sum(sr_net_loss) as profit_loss
 from store_returns,
      date_dim,
      store
 where sr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and sr_store_sk = s_store_sk
 group by s_store_sk), 
 cs as
 (select cs_call_center_sk,
        sum(cs_ext_sales_price) as sales,
        sum(cs_net_profit) as profit
 from catalog_sales,
      date_dim
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
 group by cs_call_center_sk 
 ), 
 cr as
 (select
        sum(cr_return_amount) as returns,
        sum(cr_net_loss) as profit_loss
 from catalog_returns,
      date_dim
 where cr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
 ), 
 ws as
 ( select wp_web_page_sk,
        sum(ws_ext_sales_price) as sales,
        sum(ws_net_profit) as profit
 from web_sales,
      date_dim,
      web_page
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and ws_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk), 
 wr as
 (select wp_web_page_sk,
        sum(wr_return_amt) as returns,
        sum(wr_net_loss) as profit_loss
 from web_returns,
      date_dim,
      web_page
 where wr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and wr_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , ss.s_store_sk as id
        , sales
        , coalesce(returns, 0) as returns
        , (profit - coalesce(profit_loss,0)) as profit
 from   ss left join sr
        on  ss.s_store_sk = sr.s_store_sk
 union all
 select 'catalog channel' as channel
        , cs_call_center_sk as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from  cs
       , cr
 union all
 select 'web channel' as channel
        , ws.wp_web_page_sk as id
        , sales
        , coalesce(returns, 0) returns
        , (profit - coalesce(profit_loss,0)) as profit
 from   ws left join wr
        on  ws.wp_web_page_sk = wr.wp_web_page_sk
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_page
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as
 (select s_store_sk,
         sum(ss_ext_sales_price) as sales,
         sum(ss_net_profit) as profit
 from store_sales,
      date_dim,
      store
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  30 days) 
       and ss_store_sk = s_store_sk
 group by s_store_sk)
 ,
 sr as
 (select s_store_sk,
         sum(sr_return_amt) as returns,
         sum(sr_net_loss) as profit_loss
 from store_returns,
      date_dim,
      store
 where sr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and sr_store_sk = s_store_sk
 group by s_store_sk), 
 cs as
 (select cs_call_center_sk,
        sum(cs_ext_sales_price) as sales,
        sum(cs_net_profit) as profit
 from catalog_sales,
      date_dim
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
 group by cs_call_center_sk 
 ), 
 cr as
 (select
        sum(cr_return_amount) as returns,
        sum(cr_net_loss) as profit_loss
 from catalog_returns,
      date_dim
 where cr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
 ), 
 ws as
 ( select wp_web_page_sk,
        sum(ws_ext_sales_price) as sales,
        sum(ws_net_profit) as profit
 from web_sales,
      date_dim,
      web_page
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and ws_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk), 
 wr as
 (select wp_web_page_sk,
        sum(wr_return_amt) as returns,
        sum(wr_net_loss) as profit_loss
 from web_returns,
      date_dim,
      web_page
 where wr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and wr_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , ss.s_store_sk as id
        , sales
        , coalesce(returns, 0) as returns
        , (profit - coalesce(profit_loss,0)) as profit
 from   ss left join sr
        on  ss.s_store_sk = sr.s_store_sk
 union all
 select 'catalog channel' as channel
        , cs_call_center_sk as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from  cs
       , cr
 union all
 select 'web channel' as channel
        , ws.wp_web_page_sk as id
        , sales
        , coalesce(returns, 0) returns
        , (profit - coalesce(profit_loss,0)) as profit
 from   ws left join wr
        on  ws.wp_web_page_sk = wr.wp_web_page_sk
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_page
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Map 25 <- Reducer 15 (BROADCAST_EDGE)
Map 27 <- Reducer 21 (BROADCAST_EDGE)
Reducer 10 <- Map 24 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Map 25 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (CUSTOM_SIMPLE_EDGE), Reducer 17 (CUSTOM_SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 15 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 26 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 27 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 21 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Map 28 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 11 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_271]
        Limit [LIM_270] (rows=100 width=438)
          Number of rows:100
          Select Operator [SEL_269] (rows=564 width=438)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_268]
              Select Operator [SEL_267] (rows=564 width=438)
                Output:["_col0","_col1","_col2","_col3","_col4"]
                Group By Operator [GBY_266] (rows=564 width=446)
                  Output:["_col0","_col1","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2
                <-Union 5 [SIMPLE_EDGE]
                  <-Reducer 14 [CONTAINS]
                    Reduce Output Operator [RS_230]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_229] (rows=564 width=446)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_228] (rows=531 width=435)
                          keys:_col0, _col1, 0L,top n:100
                          Select Operator [SEL_226] (rows=10 width=439)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Merge Join Operator [MERGEJOIN_225] (rows=10 width=452)
                              Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
                            <-Reducer 13 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_278]
                                Group By Operator [GBY_277] (rows=10 width=228)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                <-Reducer 12 [SIMPLE_EDGE]
                                  SHUFFLE [RS_45]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_44] (rows=2550 width=227)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col3)"],keys:_col1
                                      Merge Join Operator [MERGEJOIN_212] (rows=286549727 width=227)
                                        Conds:RS_276._col0=RS_242._col0(Inner),Output:["_col1","_col2","_col3"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_242]
                                          PartitionCols:_col0
                                          Select Operator [SEL_238] (rows=8116 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_237] (rows=8116 width=98)
                                              predicate:CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1998-08-04 00:00:00' AND TIMESTAMP'1998-09-03 00:00:00'
                                              TableScan [TS_3] (rows=73049 width=98)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                      <-Map 25 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_276]
                                          PartitionCols:_col0
                                          Select Operator [SEL_275] (rows=286549727 width=231)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Filter Operator [FIL_274] (rows=286549727 width=231)
                                              predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_41_date_dim_d_date_sk_min) AND DynamicValue(RS_41_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_41_date_dim_d_date_sk_bloom_filter)))
                                              TableScan [TS_34] (rows=287989836 width=231)
                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_call_center_sk","cs_ext_sales_price","cs_net_profit"]
                                              <-Reducer 15 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_273]
                                                  Group By Operator [GBY_272] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_252]
                                                      Group By Operator [GBY_249] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_243] (rows=8116 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_238]
                            <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_283]
                                Group By Operator [GBY_282] (rows=1 width=224)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"]
                                <-Reducer 16 [CUSTOM_SIMPLE_EDGE]
                                  PARTITION_ONLY_SHUFFLE [RS_59]
                                    Group By Operator [GBY_58] (rows=1 width=224)
                                      Output:["_col0","_col1"],aggregations:["sum(_col1)","sum(_col2)"]
                                      Merge Join Operator [MERGEJOIN_213] (rows=3199657 width=183)
                                        Conds:RS_281._col0=RS_244._col0(Inner),Output:["_col1","_col2"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_244]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_238]
                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_281]
                                          PartitionCols:_col0
                                          Select Operator [SEL_280] (rows=28798881 width=223)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_279] (rows=28798881 width=223)
                                              predicate:cr_returned_date_sk is not null
                                              TableScan [TS_48] (rows=28798881 width=223)
                                                default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_returned_date_sk","cr_return_amount","cr_net_loss"]
                  <-Reducer 20 [CONTAINS]
                    Reduce Output Operator [RS_236]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_235] (rows=564 width=446)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_234] (rows=531 width=435)
                          keys:_col0, _col1, 0L,top n:100
                          Select Operator [SEL_232] (rows=394 width=435)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Merge Join Operator [MERGEJOIN_231] (rows=394 width=335)
                              Conds:RS_290._col0=RS_295._col0(Left Outer),Output:["_col0","_col1","_col2","_col4","_col5"]
                            <-Reducer 19 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_290]
                                PartitionCols:_col0
                                Group By Operator [GBY_289] (rows=206 width=228)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                <-Reducer 18 [SIMPLE_EDGE]
                                  SHUFFLE [RS_79]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_78] (rows=26574 width=227)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","sum(_col2)"],keys:_col0
                                      Select Operator [SEL_76] (rows=143931136 width=227)
                                        Output:["_col0","_col1","_col2"]
                                        Merge Join Operator [MERGEJOIN_214] (rows=143931136 width=227)
                                          Conds:RS_288._col0=RS_245._col0(Inner),Output:["_col1","_col2","_col3"]
                                        <-Map 8 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_245]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_238]
                                        <-Map 27 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_288]
                                            PartitionCols:_col0
                                            Select Operator [SEL_287] (rows=143931136 width=231)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_286] (rows=143931136 width=231)
                                                predicate:(ws_sold_date_sk is not null and ws_web_page_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_74_date_dim_d_date_sk_min) AND DynamicValue(RS_74_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_74_date_dim_d_date_sk_bloom_filter)))
                                                TableScan [TS_67] (rows=144002668 width=231)
                                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_web_page_sk","ws_ext_sales_price","ws_net_profit"]
                                                <-Reducer 21 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_285]
                                                    Group By Operator [GBY_284] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_253]
                                                        Group By Operator [GBY_250] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_246] (rows=8116 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_238]
                            <-Reducer 23 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_295]
                                PartitionCols:_col0
                                Group By Operator [GBY_294] (rows=188 width=227)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                <-Reducer 22 [SIMPLE_EDGE]
                                  SHUFFLE [RS_94]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_93] (rows=2256 width=227)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","sum(_col2)"],keys:_col0
                                      Select Operator [SEL_91] (rows=13129719 width=217)
                                        Output:["_col0","_col1","_col2"]
                                        Merge Join Operator [MERGEJOIN_215] (rows=13129719 width=217)
                                          Conds:RS_293._col0=RS_247._col0(Inner),Output:["_col1","_col2","_col3"]
                                        <-Map 8 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_247]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_238]
                                        <-Map 28 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_293]
                                            PartitionCols:_col0
                                            Select Operator [SEL_292] (rows=13129719 width=221)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_291] (rows=13129719 width=221)
                                                predicate:(wr_web_page_sk is not null and wr_returned_date_sk is not null)
                                                TableScan [TS_82] (rows=14398467 width=221)
                                                  default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_returned_date_sk","wr_web_page_sk","wr_return_amt","wr_net_loss"]
                  <-Reducer 4 [CONTAINS]
                    Reduce Output Operator [RS_224]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_223] (rows=564 width=446)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_222] (rows=531 width=435)
                          keys:_col0, _col1, 0L,top n:100
                          Select Operator [SEL_220] (rows=127 width=436)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Merge Join Operator [MERGEJOIN_219] (rows=127 width=379)
                              Conds:RS_260._col0=RS_265._col0(Left Outer),Output:["_col0","_col1","_col2","_col4","_col5"]
                            <-Reducer 11 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_265]
                                PartitionCols:_col0
                                Group By Operator [GBY_264] (rows=85 width=227)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                <-Reducer 10 [SIMPLE_EDGE]
                                  SHUFFLE [RS_27]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_26] (rows=3995 width=227)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","sum(_col2)"],keys:_col0
                                      Select Operator [SEL_24] (rows=53634860 width=220)
                                        Output:["_col0","_col1","_col2"]
                                        Merge Join Operator [MERGEJOIN_211] (rows=53634860 width=220)
                                          Conds:RS_263._col0=RS_241._col0(Inner),Output:["_col1","_col2","_col3"]
                                        <-Map 8 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_241]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_238]
                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_263]
                                            PartitionCols:_col0
                                            Select Operator [SEL_262] (rows=53634860 width=223)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_261] (rows=53634860 width=223)
                                                predicate:(sr_store_sk is not null and sr_returned_date_sk is not null)
                                                TableScan [TS_15] (rows=57591150 width=223)
                                                  default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_returned_date_sk","sr_store_sk","sr_return_amt","sr_net_loss"]
                            <-Reducer 3 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_260]
                                PartitionCols:_col0
                                Group By Operator [GBY_259] (rows=84 width=227)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_12]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_11] (rows=37548 width=227)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","sum(_col2)"],keys:_col0
                                      Select Operator [SEL_9] (rows=525329897 width=217)
                                        Output:["_col0","_col1","_col2"]
                                        Merge Join Operator [MERGEJOIN_210] (rows=525329897 width=217)
                                          Conds:RS_258._col0=RS_239._col0(Inner),Output:["_col1","_col2","_col3"]
                                        <-Map 8 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_239]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_238]
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_258]
                                            PartitionCols:_col0
                                            Select Operator [SEL_257] (rows=525329897 width=221)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_256] (rows=525329897 width=221)
                                                predicate:(ss_sold_date_sk is not null and ss_store_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_7_date_dim_d_date_sk_min) AND DynamicValue(RS_7_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_7_date_dim_d_date_sk_bloom_filter)))
                                                TableScan [TS_0] (rows=575995635 width=221)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_store_sk","ss_ext_sales_price","ss_net_profit"]
                                                <-Reducer 9 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_255]
                                                    Group By Operator [GBY_254] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_251]
                                                        Group By Operator [GBY_248] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_240] (rows=8116 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_238]

