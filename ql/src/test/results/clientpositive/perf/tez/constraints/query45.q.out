PREHOOK: query: explain
select  ca_zip, ca_county, sum(ws_sales_price)
 from web_sales, customer, customer_address, date_dim, item
 where ws_bill_customer_sk = c_customer_sk
 	and c_current_addr_sk = ca_address_sk 
 	and ws_item_sk = i_item_sk 
 	and ( substr(ca_zip,1,5) in ('85669', '86197','88274','83405','86475', '85392', '85460', '80348', '81792')
 	      or 
 	      i_item_id in (select i_item_id
                             from item
                             where i_item_sk in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)
                             )
 	    )
 	and ws_sold_date_sk = d_date_sk
 	and d_qoy = 2 and d_year = 2000
 group by ca_zip, ca_county
 order by ca_zip, ca_county
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  ca_zip, ca_county, sum(ws_sales_price)
 from web_sales, customer, customer_address, date_dim, item
 where ws_bill_customer_sk = c_customer_sk
 	and c_current_addr_sk = ca_address_sk 
 	and ws_item_sk = i_item_sk 
 	and ( substr(ca_zip,1,5) in ('85669', '86197','88274','83405','86475', '85392', '85460', '80348', '81792')
 	      or 
 	      i_item_id in (select i_item_id
                             from item
                             where i_item_sk in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)
                             )
 	    )
 	and ws_sold_date_sk = d_date_sk
 	and d_qoy = 2 and d_year = 2000
 group by ca_zip, ca_county
 order by ca_zip, ca_county
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 11 <- Reducer 14 (BROADCAST_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 1 (SIMPLE_EDGE)
Reducer 8 <- Map 10 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 12 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_154]
        Limit [LIM_153] (rows=100 width=299)
          Number of rows:100
          Select Operator [SEL_152] (rows=285780 width=299)
            Output:["_col0","_col1","_col2"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_151]
              Group By Operator [GBY_150] (rows=285780 width=299)
                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
              <-Reducer 3 [SIMPLE_EDGE]
                SHUFFLE [RS_41]
                  PartitionCols:_col0, _col1
                  Group By Operator [GBY_40] (rows=3715140 width=299)
                    Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col8, _col7
                    Select Operator [SEL_39] (rows=10246864 width=302)
                      Output:["_col3","_col7","_col8"]
                      Top N Key Operator [TNK_72] (rows=10246864 width=302)
                        keys:_col8, _col7,top n:100
                        Filter Operator [FIL_38] (rows=10246864 width=302)
                          predicate:(_col15 is not null or (substr(_col8, 1, 5)) IN ('85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'))
                          Select Operator [SEL_37] (rows=10246864 width=302)
                            Output:["_col3","_col7","_col8","_col15"]
                            Merge Join Operator [MERGEJOIN_124] (rows=10246864 width=302)
                              Conds:RS_34._col0=RS_35._col6(Inner),Output:["_col3","_col7","_col8","_col12"]
                            <-Reducer 2 [SIMPLE_EDGE]
                              SHUFFLE [RS_34]
                                PartitionCols:_col0
                                Merge Join Operator [MERGEJOIN_120] (rows=462007 width=4)
                                  Conds:RS_127._col1=RS_133._col0(Left Outer),Output:["_col0","_col3"]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_127]
                                    PartitionCols:_col1
                                    Select Operator [SEL_125] (rows=462000 width=104)
                                      Output:["_col0","_col1"]
                                      TableScan [TS_0] (rows=462000 width=104)
                                        default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id"]
                                <-Reducer 6 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_133]
                                    PartitionCols:_col0
                                    Select Operator [SEL_132] (rows=5 width=104)
                                      Output:["_col0","_col1"]
                                      Group By Operator [GBY_131] (rows=5 width=100)
                                        Output:["_col0"],keys:KEY._col0
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_130]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_129] (rows=5 width=100)
                                            Output:["_col0"],keys:i_item_id
                                            Select Operator [SEL_128] (rows=11 width=104)
                                              Output:["i_item_id"]
                                              Filter Operator [FIL_126] (rows=11 width=104)
                                                predicate:(i_item_sk) IN (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)
                                                 Please refer to the previous TableScan [TS_0]
                            <-Reducer 9 [SIMPLE_EDGE]
                              SHUFFLE [RS_35]
                                PartitionCols:_col6
                                Merge Join Operator [MERGEJOIN_123] (rows=10246864 width=302)
                                  Conds:RS_27._col0=RS_28._col2(Inner),Output:["_col3","_col4","_col6","_col8"]
                                <-Reducer 12 [SIMPLE_EDGE]
                                  SHUFFLE [RS_28]
                                    PartitionCols:_col2
                                    Merge Join Operator [MERGEJOIN_122] (rows=10246864 width=119)
                                      Conds:RS_149._col0=RS_141._col0(Inner),Output:["_col1","_col2","_col3"]
                                    <-Map 13 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_141]
                                        PartitionCols:_col0
                                        Select Operator [SEL_140] (rows=130 width=12)
                                          Output:["_col0"]
                                          Filter Operator [FIL_139] (rows=130 width=12)
                                            predicate:((d_year = 2000) and (d_qoy = 2))
                                            TableScan [TS_17] (rows=73049 width=12)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                                    <-Map 11 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_149]
                                        PartitionCols:_col0
                                        Select Operator [SEL_148] (rows=143930993 width=123)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Filter Operator [FIL_147] (rows=143930993 width=123)
                                            predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_21_date_dim_d_date_sk_min) AND DynamicValue(RS_21_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_21_date_dim_d_date_sk_bloom_filter)))
                                            TableScan [TS_14] (rows=144002668 width=123)
                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_sales_price"]
                                            <-Reducer 14 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_146]
                                                Group By Operator [GBY_145] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_144]
                                                    Group By Operator [GBY_143] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_142] (rows=130 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_140]
                                <-Reducer 8 [SIMPLE_EDGE]
                                  SHUFFLE [RS_27]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_121] (rows=80000000 width=191)
                                      Conds:RS_136._col1=RS_138._col0(Inner),Output:["_col0","_col3","_col4"]
                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_138]
                                        PartitionCols:_col0
                                        Select Operator [SEL_137] (rows=40000000 width=191)
                                          Output:["_col0","_col1","_col2"]
                                          TableScan [TS_12] (rows=40000000 width=191)
                                            default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county","ca_zip"]
                                    <-Map 7 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_136]
                                        PartitionCols:_col1
                                        Select Operator [SEL_135] (rows=80000000 width=8)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_134] (rows=80000000 width=8)
                                            predicate:c_current_addr_sk is not null
                                            TableScan [TS_9] (rows=80000000 width=8)
                                              default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_addr_sk"]

