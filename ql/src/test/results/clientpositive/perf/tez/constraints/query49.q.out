PREHOOK: query: explain
select  
 'web' as channel
 ,web.item
 ,web.return_ratio
 ,web.return_rank
 ,web.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select ws.ws_item_sk as item
 		,(cast(sum(coalesce(wr.wr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(wr.wr_return_amt,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		 web_sales ws left outer join web_returns wr 
 			on (ws.ws_order_number = wr.wr_order_number and 
 			ws.ws_item_sk = wr.wr_item_sk)
                 ,date_dim
 		where 
 			wr.wr_return_amt > 10000 
 			and ws.ws_net_profit > 1
                         and ws.ws_net_paid > 0
                         and ws.ws_quantity > 0
                         and ws_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by ws.ws_item_sk
 	) in_web
 ) web
 where 
 (
 web.return_rank <= 10
 or
 web.currency_rank <= 10
 )
 union
 select 
 'catalog' as channel
 ,catalog.item
 ,catalog.return_ratio
 ,catalog.return_rank
 ,catalog.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select 
 		cs.cs_item_sk as item
 		,(cast(sum(coalesce(cr.cr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(cr.cr_return_amount,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		catalog_sales cs left outer join catalog_returns cr
 			on (cs.cs_order_number = cr.cr_order_number and 
 			cs.cs_item_sk = cr.cr_item_sk)
                ,date_dim
 		where 
 			cr.cr_return_amount > 10000 
 			and cs.cs_net_profit > 1
                         and cs.cs_net_paid > 0
                         and cs.cs_quantity > 0
                         and cs_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
                 group by cs.cs_item_sk
 	) in_cat
 ) catalog
 where 
 (
 catalog.return_rank <= 10
 or
 catalog.currency_rank <=10
 )
 union
 select 
 'store' as channel
 ,store.item
 ,store.return_ratio
 ,store.return_rank
 ,store.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select sts.ss_item_sk as item
 		,(cast(sum(coalesce(sr.sr_return_quantity,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(sr.sr_return_amt,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		store_sales sts left outer join store_returns sr
 			on (sts.ss_ticket_number = sr.sr_ticket_number and sts.ss_item_sk = sr.sr_item_sk)
                ,date_dim
 		where 
 			sr.sr_return_amt > 10000 
 			and sts.ss_net_profit > 1
                         and sts.ss_net_paid > 0 
                         and sts.ss_quantity > 0
                         and ss_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by sts.ss_item_sk
 	) in_store
 ) store
 where  (
 store.return_rank <= 10
 or 
 store.currency_rank <= 10
 )
 order by 1,4,5
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
 'web' as channel
 ,web.item
 ,web.return_ratio
 ,web.return_rank
 ,web.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select ws.ws_item_sk as item
 		,(cast(sum(coalesce(wr.wr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(wr.wr_return_amt,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		 web_sales ws left outer join web_returns wr 
 			on (ws.ws_order_number = wr.wr_order_number and 
 			ws.ws_item_sk = wr.wr_item_sk)
                 ,date_dim
 		where 
 			wr.wr_return_amt > 10000 
 			and ws.ws_net_profit > 1
                         and ws.ws_net_paid > 0
                         and ws.ws_quantity > 0
                         and ws_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by ws.ws_item_sk
 	) in_web
 ) web
 where 
 (
 web.return_rank <= 10
 or
 web.currency_rank <= 10
 )
 union
 select 
 'catalog' as channel
 ,catalog.item
 ,catalog.return_ratio
 ,catalog.return_rank
 ,catalog.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select 
 		cs.cs_item_sk as item
 		,(cast(sum(coalesce(cr.cr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(cr.cr_return_amount,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		catalog_sales cs left outer join catalog_returns cr
 			on (cs.cs_order_number = cr.cr_order_number and 
 			cs.cs_item_sk = cr.cr_item_sk)
                ,date_dim
 		where 
 			cr.cr_return_amount > 10000 
 			and cs.cs_net_profit > 1
                         and cs.cs_net_paid > 0
                         and cs.cs_quantity > 0
                         and cs_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
                 group by cs.cs_item_sk
 	) in_cat
 ) catalog
 where 
 (
 catalog.return_rank <= 10
 or
 catalog.currency_rank <=10
 )
 union
 select 
 'store' as channel
 ,store.item
 ,store.return_ratio
 ,store.return_rank
 ,store.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select sts.ss_item_sk as item
 		,(cast(sum(coalesce(sr.sr_return_quantity,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(sr.sr_return_amt,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		store_sales sts left outer join store_returns sr
 			on (sts.ss_ticket_number = sr.sr_ticket_number and sts.ss_item_sk = sr.sr_item_sk)
                ,date_dim
 		where 
 			sr.sr_return_amt > 10000 
 			and sts.ss_net_profit > 1
                         and sts.ss_net_paid > 0 
                         and sts.ss_quantity > 0
                         and ss_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by sts.ss_item_sk
 	) in_store
 ) store
 where  (
 store.return_rank <= 10
 or 
 store.currency_rank <= 10
 )
 order by 1,4,5
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 11 <- Reducer 14 (BROADCAST_EDGE)
Map 28 <- Reducer 20 (BROADCAST_EDGE)
Map 30 <- Reducer 26 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 13 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 16 <- Map 27 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 20 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Map 13 (SIMPLE_EDGE), Map 30 (SIMPLE_EDGE)
Reducer 22 <- Map 29 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 26 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 7 <- Union 6 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 9 <- Union 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 10 vectorized
      File Output Operator [FS_318]
        Limit [LIM_317] (rows=100 width=215)
          Number of rows:100
          Select Operator [SEL_316] (rows=3418 width=215)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 9 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_315]
              Select Operator [SEL_314] (rows=3418 width=215)
                Output:["_col0","_col1","_col2","_col3","_col4"]
                Group By Operator [GBY_313] (rows=3418 width=215)
                  Output:["_col0","_col1","_col2","_col3","_col4"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 8 [SIMPLE_EDGE]
                  <-Reducer 25 [CONTAINS] vectorized
                    Reduce Output Operator [RS_359]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_358] (rows=3418 width=215)
                        Output:["_col0","_col1","_col2","_col3","_col4"],keys:_col0, _col3, _col4, _col1, _col2
                        Top N Key Operator [TNK_357] (rows=3418 width=214)
                          keys:_col0, _col3, _col4, _col1, _col2,top n:100
                          Select Operator [SEL_356] (rows=1142 width=213)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Filter Operator [FIL_355] (rows=1142 width=248)
                              predicate:((_col0 <= 10) or (rank_window_1 <= 10))
                              PTF Operator [PTF_354] (rows=1714 width=248)
                                Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col4 AS decimal(15,4)) / CAST( _col5 AS decimal(15,4))) ASC NULLS LAST","partition by:":"0"}]
                                Select Operator [SEL_353] (rows=1714 width=248)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                <-Reducer 24 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_352]
                                    PartitionCols:0
                                    Select Operator [SEL_351] (rows=1714 width=244)
                                      Output:["rank_window_0","_col0","_col1","_col2","_col3","_col4"]
                                      PTF Operator [PTF_350] (rows=1714 width=244)
                                        Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col1 AS decimal(15,4)) / CAST( _col2 AS decimal(15,4))) ASC NULLS LAST","partition by:":"0"}]
                                        Select Operator [SEL_349] (rows=1714 width=244)
                                          Output:["_col0","_col1","_col2","_col3","_col4"]
                                        <-Reducer 23 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_348]
                                            PartitionCols:0
                                            Group By Operator [GBY_347] (rows=1714 width=244)
                                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                                            <-Reducer 22 [SIMPLE_EDGE]
                                              SHUFFLE [RS_92]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_91] (rows=1714 width=244)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0
                                                  Select Operator [SEL_89] (rows=1673571 width=73)
                                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                                    Merge Join Operator [MERGEJOIN_245] (rows=1673571 width=73)
                                                      Conds:RS_346._col0, _col1=RS_87._col1, _col2(Inner),Output:["_col2","_col3","_col5","_col7","_col8"]
                                                    <-Map 29 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_346]
                                                        PartitionCols:_col0, _col1
                                                        Select Operator [SEL_345] (rows=19197050 width=119)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_344] (rows=19197050 width=119)
                                                            predicate:(sr_return_amt > 10000)
                                                            TableScan [TS_73] (rows=57591150 width=119)
                                                              default@store_returns,sr,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number","sr_return_quantity","sr_return_amt"]
                                                    <-Reducer 21 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_87]
                                                        PartitionCols:_col1, _col2
                                                        Merge Join Operator [MERGEJOIN_244] (rows=1673571 width=8)
                                                          Conds:RS_343._col0=RS_283._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                        <-Map 13 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_283]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_278] (rows=50 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_277] (rows=50 width=12)
                                                                predicate:((d_year = 2000) and (d_moy = 12))
                                                                TableScan [TS_6] (rows=73049 width=12)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                        <-Map 30 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_343]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_342] (rows=61119617 width=229)
                                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                                              Filter Operator [FIL_341] (rows=61119617 width=229)
                                                                predicate:((ss_net_profit > 1) and (ss_net_paid > 0) and (ss_quantity > 0) and ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_83_date_dim_d_date_sk_min) AND DynamicValue(RS_83_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_83_date_dim_d_date_sk_bloom_filter)))
                                                                TableScan [TS_76] (rows=575995635 width=229)
                                                                  default@store_sales,sts,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_ticket_number","ss_quantity","ss_net_paid","ss_net_profit"]
                                                                <-Reducer 26 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_340]
                                                                    Group By Operator [GBY_339] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_290]
                                                                        Group By Operator [GBY_287] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_284] (rows=50 width=4)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_278]
                  <-Reducer 7 [CONTAINS] vectorized
                    Reduce Output Operator [RS_312]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_311] (rows=3418 width=215)
                        Output:["_col0","_col1","_col2","_col3","_col4"],keys:_col0, _col3, _col4, _col1, _col2
                        Top N Key Operator [TNK_310] (rows=3418 width=214)
                          keys:_col0, _col3, _col4, _col1, _col2,top n:100
                          Select Operator [SEL_309] (rows=2276 width=215)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Group By Operator [GBY_308] (rows=2276 width=215)
                              Output:["_col0","_col1","_col2","_col3","_col4"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                            <-Union 6 [SIMPLE_EDGE]
                              <-Reducer 19 [CONTAINS] vectorized
                                Reduce Output Operator [RS_338]
                                  PartitionCols:_col0, _col1, _col2, _col3, _col4
                                  Group By Operator [GBY_337] (rows=2276 width=215)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],keys:_col0, _col3, _col4, _col1, _col2
                                    Select Operator [SEL_336] (rows=1134 width=215)
                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                      Filter Operator [FIL_335] (rows=1134 width=248)
                                        predicate:((_col0 <= 10) or (rank_window_1 <= 10))
                                        PTF Operator [PTF_334] (rows=1701 width=248)
                                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col4 AS decimal(15,4)) / CAST( _col5 AS decimal(15,4))) ASC NULLS LAST","partition by:":"0"}]
                                          Select Operator [SEL_333] (rows=1701 width=248)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          <-Reducer 18 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_332]
                                              PartitionCols:0
                                              Select Operator [SEL_331] (rows=1701 width=244)
                                                Output:["rank_window_0","_col0","_col1","_col2","_col3","_col4"]
                                                PTF Operator [PTF_330] (rows=1701 width=244)
                                                  Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col1 AS decimal(15,4)) / CAST( _col2 AS decimal(15,4))) ASC NULLS LAST","partition by:":"0"}]
                                                  Select Operator [SEL_329] (rows=1701 width=244)
                                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  <-Reducer 17 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_328]
                                                      PartitionCols:0
                                                      Group By Operator [GBY_327] (rows=1701 width=244)
                                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                                                      <-Reducer 16 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_52]
                                                          PartitionCols:_col0
                                                          Group By Operator [GBY_51] (rows=1701 width=244)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0
                                                            Select Operator [SEL_49] (rows=865646 width=188)
                                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                                              Merge Join Operator [MERGEJOIN_243] (rows=865646 width=188)
                                                                Conds:RS_326._col0, _col1=RS_47._col1, _col2(Inner),Output:["_col2","_col3","_col5","_col7","_col8"]
                                                              <-Map 27 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_326]
                                                                  PartitionCols:_col0, _col1
                                                                  Select Operator [SEL_325] (rows=9599627 width=121)
                                                                    Output:["_col0","_col1","_col2","_col3"]
                                                                    Filter Operator [FIL_324] (rows=9599627 width=121)
                                                                      predicate:(cr_return_amount > 10000)
                                                                      TableScan [TS_33] (rows=28798881 width=121)
                                                                        default@catalog_returns,cr,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_return_quantity","cr_return_amount"]
                                                              <-Reducer 15 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_47]
                                                                  PartitionCols:_col1, _col2
                                                                  Merge Join Operator [MERGEJOIN_242] (rows=865646 width=102)
                                                                    Conds:RS_323._col0=RS_281._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                                  <-Map 13 [SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_281]
                                                                      PartitionCols:_col0
                                                                       Please refer to the previous Select Operator [SEL_278]
                                                                  <-Map 28 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_323]
                                                                      PartitionCols:_col0
                                                                      Select Operator [SEL_322] (rows=31838858 width=239)
                                                                        Output:["_col0","_col1","_col2","_col3","_col4"]
                                                                        Filter Operator [FIL_321] (rows=31838858 width=239)
                                                                          predicate:((cs_net_profit > 1) and (cs_net_paid > 0) and (cs_quantity > 0) and cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_43_date_dim_d_date_sk_min) AND DynamicValue(RS_43_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_43_date_dim_d_date_sk_bloom_filter)))
                                                                          TableScan [TS_36] (rows=287989836 width=239)
                                                                            default@catalog_sales,cs,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_order_number","cs_quantity","cs_net_paid","cs_net_profit"]
                                                                          <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                                            BROADCAST [RS_320]
                                                                              Group By Operator [GBY_319] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                              <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                PARTITION_ONLY_SHUFFLE [RS_289]
                                                                                  Group By Operator [GBY_286] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                    Select Operator [SEL_282] (rows=50 width=4)
                                                                                      Output:["_col0"]
                                                                                       Please refer to the previous Select Operator [SEL_278]
                              <-Reducer 5 [CONTAINS] vectorized
                                Reduce Output Operator [RS_307]
                                  PartitionCols:_col0, _col1, _col2, _col3, _col4
                                  Group By Operator [GBY_306] (rows=2276 width=215)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],keys:_col0, _col3, _col4, _col1, _col2
                                    Select Operator [SEL_305] (rows=1142 width=211)
                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                      Filter Operator [FIL_304] (rows=1142 width=248)
                                        predicate:((_col0 <= 10) or (rank_window_1 <= 10))
                                        PTF Operator [PTF_303] (rows=1714 width=248)
                                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col4 AS decimal(15,4)) / CAST( _col5 AS decimal(15,4))) ASC NULLS LAST","partition by:":"0"}]
                                          Select Operator [SEL_302] (rows=1714 width=248)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          <-Reducer 4 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_301]
                                              PartitionCols:0
                                              Select Operator [SEL_300] (rows=1714 width=244)
                                                Output:["rank_window_0","_col0","_col1","_col2","_col3","_col4"]
                                                PTF Operator [PTF_299] (rows=1714 width=244)
                                                  Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col1 AS decimal(15,4)) / CAST( _col2 AS decimal(15,4))) ASC NULLS LAST","partition by:":"0"}]
                                                  Select Operator [SEL_298] (rows=1714 width=244)
                                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  <-Reducer 3 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_297]
                                                      PartitionCols:0
                                                      Group By Operator [GBY_296] (rows=1714 width=244)
                                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                                                      <-Reducer 2 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_19]
                                                          PartitionCols:_col0
                                                          Group By Operator [GBY_18] (rows=1714 width=244)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0
                                                            Select Operator [SEL_16] (rows=438010 width=177)
                                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                                              Merge Join Operator [MERGEJOIN_241] (rows=438010 width=177)
                                                                Conds:RS_276._col0, _col1=RS_14._col1, _col2(Inner),Output:["_col2","_col3","_col5","_col7","_col8"]
                                                              <-Map 1 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_276]
                                                                  PartitionCols:_col0, _col1
                                                                  Select Operator [SEL_275] (rows=4799489 width=118)
                                                                    Output:["_col0","_col1","_col2","_col3"]
                                                                    Filter Operator [FIL_274] (rows=4799489 width=118)
                                                                      predicate:(wr_return_amt > 10000)
                                                                      TableScan [TS_0] (rows=14398467 width=118)
                                                                        default@web_returns,wr,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_item_sk","wr_order_number","wr_return_quantity","wr_return_amt"]
                                                              <-Reducer 12 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_14]
                                                                  PartitionCols:_col1, _col2
                                                                  Merge Join Operator [MERGEJOIN_240] (rows=438010 width=122)
                                                                    Conds:RS_295._col0=RS_279._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                                  <-Map 13 [SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_279]
                                                                      PartitionCols:_col0
                                                                       Please refer to the previous Select Operator [SEL_278]
                                                                  <-Map 11 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_295]
                                                                      PartitionCols:_col0
                                                                      Select Operator [SEL_294] (rows=15996318 width=239)
                                                                        Output:["_col0","_col1","_col2","_col3","_col4"]
                                                                        Filter Operator [FIL_293] (rows=15996318 width=239)
                                                                          predicate:((ws_net_profit > 1) and (ws_net_paid > 0) and (ws_quantity > 0) and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_10_date_dim_d_date_sk_min) AND DynamicValue(RS_10_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_10_date_dim_d_date_sk_bloom_filter)))
                                                                          TableScan [TS_3] (rows=144002668 width=239)
                                                                            default@web_sales,ws,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_order_number","ws_quantity","ws_net_paid","ws_net_profit"]
                                                                          <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                                            BROADCAST [RS_292]
                                                                              Group By Operator [GBY_291] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                              <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                PARTITION_ONLY_SHUFFLE [RS_288]
                                                                                  Group By Operator [GBY_285] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                    Select Operator [SEL_280] (rows=50 width=4)
                                                                                      Output:["_col0"]
                                                                                       Please refer to the previous Select Operator [SEL_278]

