PREHOOK: query: explain
select  sum(cs_ext_discount_amt)  as `excess discount amount` 
from 
   catalog_sales 
   ,item 
   ,date_dim
where
i_manufact_id = 269
and i_item_sk = cs_item_sk 
and d_date between '1998-03-18' and 
        (cast('1998-03-18' as date) + 90 days)
and d_date_sk = cs_sold_date_sk 
and cs_ext_discount_amt  
     > ( 
         select 
            1.3 * avg(cs_ext_discount_amt) 
         from 
            catalog_sales 
           ,date_dim
         where 
              cs_item_sk = i_item_sk 
          and d_date between '1998-03-18' and
                             (cast('1998-03-18' as date) + 90 days)
          and d_date_sk = cs_sold_date_sk 
      ) 
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  sum(cs_ext_discount_amt)  as `excess discount amount` 
from 
   catalog_sales 
   ,item 
   ,date_dim
where
i_manufact_id = 269
and i_item_sk = cs_item_sk 
and d_date between '1998-03-18' and 
        (cast('1998-03-18' as date) + 90 days)
and d_date_sk = cs_sold_date_sk 
and cs_ext_discount_amt  
     > ( 
         select 
            1.3 * avg(cs_ext_discount_amt) 
         from 
            catalog_sales 
           ,date_dim
         where 
              cs_item_sk = i_item_sk 
          and d_date between '1998-03-18' and
                             (cast('1998-03-18' as date) + 90 days)
          and d_date_sk = cs_sold_date_sk 
      ) 
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 10 (BROADCAST_EDGE)
Reducer 10 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Map 9 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_127]
        Group By Operator [GBY_126] (rows=1 width=112)
          Output:["_col0"],aggregations:["sum(VALUE._col0)"]
        <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
          PARTITION_ONLY_SHUFFLE [RS_36]
            Group By Operator [GBY_35] (rows=1 width=112)
              Output:["_col0"],aggregations:["sum(_col2)"]
              Select Operator [SEL_34] (rows=20854 width=112)
                Output:["_col2"]
                Filter Operator [FIL_33] (rows=20854 width=112)
                  predicate:(_col2 > _col6)
                  Merge Join Operator [MERGEJOIN_103] (rows=62562 width=112)
                    Conds:RS_30._col4=RS_125._col0(Inner),Output:["_col2","_col6"]
                  <-Reducer 3 [SIMPLE_EDGE]
                    SHUFFLE [RS_30]
                      PartitionCols:_col4
                      Merge Join Operator [MERGEJOIN_101] (rows=3973887 width=75)
                        Conds:RS_27._col1=RS_106._col0(Inner),Output:["_col2","_col4"]
                      <-Map 9 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_106]
                          PartitionCols:_col0
                          Select Operator [SEL_105] (rows=669 width=4)
                            Output:["_col0"]
                            Filter Operator [FIL_104] (rows=669 width=7)
                              predicate:(i_manufact_id = 269)
                              TableScan [TS_6] (rows=462000 width=7)
                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_manufact_id"]
                      <-Reducer 2 [SIMPLE_EDGE]
                        SHUFFLE [RS_27]
                          PartitionCols:_col1
                          Merge Join Operator [MERGEJOIN_100] (rows=285116600 width=115)
                            Conds:RS_116._col0=RS_120._col0(Inner),Output:["_col1","_col2"]
                          <-Map 1 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_116]
                              PartitionCols:_col0
                              Select Operator [SEL_114] (rows=285116600 width=119)
                                Output:["_col0","_col1","_col2"]
                                Filter Operator [FIL_112] (rows=285116600 width=119)
                                  predicate:(cs_ext_discount_amt is not null and cs_sold_date_sk is not null and cs_item_sk BETWEEN DynamicValue(RS_28_item_i_item_sk_min) AND DynamicValue(RS_28_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_28_item_i_item_sk_bloom_filter)))
                                  TableScan [TS_0] (rows=287989836 width=119)
                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_ext_discount_amt"]
                                  <-Reducer 10 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_111]
                                      Group By Operator [GBY_110] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                      <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_109]
                                          Group By Operator [GBY_108] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                            Select Operator [SEL_107] (rows=669 width=4)
                                              Output:["_col0"]
                                               Please refer to the previous Select Operator [SEL_105]
                          <-Map 8 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_120]
                              PartitionCols:_col0
                              Select Operator [SEL_119] (rows=8116 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_118] (rows=8116 width=98)
                                  predicate:CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1998-03-18 00:00:00' AND TIMESTAMP'1998-06-16 00:00:00'
                                  TableScan [TS_3] (rows=73049 width=98)
                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                  <-Reducer 7 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_125]
                      PartitionCols:_col0
                      Select Operator [SEL_124] (rows=62562 width=116)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_123] (rows=62562 width=124)
                          predicate:CAST( (1.3 * (_col1 / _col2)) AS decimal(14,7)) is not null
                          Group By Operator [GBY_122] (rows=62562 width=124)
                            Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                          <-Reducer 6 [SIMPLE_EDGE]
                            SHUFFLE [RS_20]
                              PartitionCols:_col0
                              Group By Operator [GBY_19] (rows=8133060 width=124)
                                Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","count(_col2)"],keys:_col1
                                Merge Join Operator [MERGEJOIN_102] (rows=286549727 width=115)
                                  Conds:RS_117._col0=RS_121._col0(Inner),Output:["_col1","_col2"]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_117]
                                    PartitionCols:_col0
                                    Select Operator [SEL_115] (rows=286549727 width=119)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_113] (rows=286549727 width=119)
                                        predicate:(cs_sold_date_sk is not null and cs_item_sk BETWEEN DynamicValue(RS_28_item_i_item_sk_min) AND DynamicValue(RS_28_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_28_item_i_item_sk_bloom_filter)))
                                         Please refer to the previous TableScan [TS_0]
                                <-Map 8 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_121]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_119]

