Warning: Shuffle Join MERGEJOIN[298][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 7' is a cross product
PREHOOK: query: explain
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_current_addr_sk = ca_address_sk
  and c_birth_country <> upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_current_addr_sk = ca_address_sk
  and c_birth_country <> upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 17 <- Reducer 20 (BROADCAST_EDGE), Reducer 22 (BROADCAST_EDGE)
Map 25 <- Reducer 13 (BROADCAST_EDGE), Reducer 14 (BROADCAST_EDGE)
Reducer 10 <- Map 19 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 8 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Reducer 8 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 23 (SIMPLE_EDGE), Map 25 (SIMPLE_EDGE)
Reducer 3 <- Reducer 18 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 21 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 23 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 12 (CUSTOM_SIMPLE_EDGE), Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 9 <- Reducer 24 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 7
      File Output Operator [FS_92]
        Select Operator [SEL_91] (rows=37400 width=380)
          Output:["_col0","_col1","_col2","_col3"]
          Filter Operator [FIL_90] (rows=37400 width=492)
            predicate:(_col3 > _col4)
            Merge Join Operator [MERGEJOIN_298] (rows=112200 width=492)
              Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
            <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized
              PARTITION_ONLY_SHUFFLE [RS_350]
                Select Operator [SEL_349] (rows=1 width=112)
                  Output:["_col0"]
                  Group By Operator [GBY_348] (rows=1 width=120)
                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                  <-Reducer 11 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_347]
                      Group By Operator [GBY_346] (rows=1 width=120)
                        Output:["_col0","_col1"],aggregations:["sum(_col10)","count(_col10)"]
                        Select Operator [SEL_345] (rows=589731268 width=932)
                          Output:["_col10"]
                          Group By Operator [GBY_344] (rows=589731268 width=932)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9
                          <-Reducer 10 [SIMPLE_EDGE]
                            SHUFFLE [RS_79]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                              Group By Operator [GBY_78] (rows=589731268 width=932)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["sum(_col4)"],keys:_col9, _col10, _col13, _col17, _col18, _col21, _col22, _col23, _col24, _col25
                                Merge Join Operator [MERGEJOIN_297] (rows=589731268 width=928)
                                  Conds:RS_74._col0=RS_310._col0(Inner),Output:["_col4","_col9","_col10","_col13","_col17","_col18","_col21","_col22","_col23","_col24","_col25"]
                                <-Map 19 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_310]
                                    PartitionCols:_col0
                                    Select Operator [SEL_308] (rows=462000 width=384)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                      TableScan [TS_9] (rows=462000 width=384)
                                        default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_size","i_color","i_units","i_manager_id"]
                                <-Reducer 9 [SIMPLE_EDGE]
                                  SHUFFLE [RS_74]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_296] (rows=589731268 width=551)
                                      Conds:RS_71._col2, _col1=RS_72._col9, _col0(Inner),Output:["_col0","_col4","_col9","_col10","_col13","_col17","_col18"]
                                    <-Reducer 8 [SIMPLE_EDGE]
                                      SHUFFLE [RS_72]
                                        PartitionCols:_col9, _col0
                                        Select Operator [SEL_65] (rows=7276996 width=724)
                                          Output:["_col0","_col2","_col3","_col6","_col9","_col10","_col11"]
                                          Filter Operator [FIL_64] (rows=7276996 width=724)
                                            predicate:(_col12 <> _col3)
                                            Merge Join Operator [MERGEJOIN_295] (rows=7276996 width=724)
                                              Conds:RS_61._col0=RS_302._col1(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col8","_col10","_col11","_col12"]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_302]
                                                PartitionCols:_col1
                                                Select Operator [SEL_300] (rows=80000000 width=280)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  Filter Operator [FIL_299] (rows=80000000 width=280)
                                                    predicate:c_current_addr_sk is not null
                                                    TableScan [TS_0] (rows=80000000 width=280)
                                                      default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_addr_sk","c_first_name","c_last_name","c_birth_country"]
                                            <-Reducer 16 [SIMPLE_EDGE]
                                              SHUFFLE [RS_61]
                                                PartitionCols:_col0
                                                Merge Join Operator [MERGEJOIN_294] (rows=611379 width=452)
                                                  Conds:RS_306._col2=RS_321._col3(Inner),Output:["_col0","_col1","_col3","_col4","_col5","_col6"]
                                                <-Map 21 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_321]
                                                    PartitionCols:_col3
                                                    Select Operator [SEL_318] (rows=155 width=267)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_317] (rows=155 width=271)
                                                        predicate:((s_market_id = 7) and s_zip is not null)
                                                        TableScan [TS_16] (rows=1704 width=270)
                                                          default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_market_id","s_state","s_zip"]
                                                <-Map 15 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_306]
                                                    PartitionCols:_col2
                                                    Select Operator [SEL_304] (rows=40000000 width=363)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_303] (rows=40000000 width=276)
                                                        predicate:ca_zip is not null
                                                        TableScan [TS_3] (rows=40000000 width=276)
                                                          default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state","ca_zip","ca_country"]
                                    <-Reducer 24 [SIMPLE_EDGE]
                                      SHUFFLE [RS_71]
                                        PartitionCols:_col2, _col1
                                        Merge Join Operator [MERGEJOIN_293] (rows=537799798 width=118)
                                          Conds:RS_343._col0, _col3=RS_331._col0, _col1(Inner),Output:["_col0","_col1","_col2","_col4"]
                                        <-Map 23 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_331]
                                            PartitionCols:_col0, _col1
                                            Select Operator [SEL_329] (rows=57591150 width=8)
                                              Output:["_col0","_col1"]
                                              TableScan [TS_19] (rows=57591150 width=8)
                                                default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
                                        <-Map 25 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_343]
                                            PartitionCols:_col0, _col3
                                            Select Operator [SEL_342] (rows=525333486 width=122)
                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                              Filter Operator [FIL_341] (rows=525333486 width=122)
                                                predicate:((ss_customer_sk BETWEEN DynamicValue(RS_72_customer_c_customer_sk_min) AND DynamicValue(RS_72_customer_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_72_customer_c_customer_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_72_store_s_store_sk_min) AND DynamicValue(RS_72_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_72_store_s_store_sk_bloom_filter))) and ss_customer_sk is not null and ss_store_sk is not null)
                                                TableScan [TS_44] (rows=575995635 width=122)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_sales_price"]
                                                <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_338]
                                                    Group By Operator [GBY_337] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Reducer 8 [CUSTOM_SIMPLE_EDGE]
                                                      SHUFFLE [RS_227]
                                                        Group By Operator [GBY_226] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_225] (rows=7276996 width=8)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_65]
                                                <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_340]
                                                    Group By Operator [GBY_339] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=6636187)"]
                                                    <-Reducer 8 [CUSTOM_SIMPLE_EDGE]
                                                      SHUFFLE [RS_232]
                                                        Group By Operator [GBY_231] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=6636187)"]
                                                          Select Operator [SEL_230] (rows=7276996 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_65]
            <-Reducer 6 [CUSTOM_SIMPLE_EDGE] vectorized
              PARTITION_ONLY_SHUFFLE [RS_336]
                Select Operator [SEL_335] (rows=112200 width=380)
                  Output:["_col0","_col1","_col2","_col3"]
                  Group By Operator [GBY_334] (rows=112200 width=380)
                    Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col9)"],keys:_col0, _col1, _col7
                    Select Operator [SEL_333] (rows=1222708 width=843)
                      Output:["_col0","_col1","_col7","_col9"]
                      Group By Operator [GBY_332] (rows=1222708 width=843)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8
                      <-Reducer 5 [SIMPLE_EDGE]
                        SHUFFLE [RS_36]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_35] (rows=1222708 width=843)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"],aggregations:["sum(_col13)"],keys:_col2, _col3, _col20, _col6, _col15, _col16, _col17, _col18, _col21
                            Merge Join Operator [MERGEJOIN_292] (rows=2015888 width=776)
                              Conds:RS_31._col9, _col12=RS_330._col0, _col1(Inner),Output:["_col2","_col3","_col6","_col13","_col15","_col16","_col17","_col18","_col20","_col21"]
                            <-Map 23 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_330]
                                PartitionCols:_col0, _col1
                                 Please refer to the previous Select Operator [SEL_329]
                            <-Reducer 4 [SIMPLE_EDGE]
                              SHUFFLE [RS_31]
                                PartitionCols:_col9, _col12
                                Merge Join Operator [MERGEJOIN_291] (rows=1222708 width=739)
                                  Conds:RS_28._col11, _col7=RS_319._col0, _col3(Inner),Output:["_col2","_col3","_col6","_col9","_col12","_col13","_col15","_col16","_col17","_col18","_col20","_col21"]
                                <-Map 21 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_319]
                                    PartitionCols:_col0, _col3
                                     Please refer to the previous Select Operator [SEL_318]
                                <-Reducer 3 [SIMPLE_EDGE]
                                  SHUFFLE [RS_28]
                                    PartitionCols:_col11, _col7
                                    Merge Join Operator [MERGEJOIN_290] (rows=76612563 width=735)
                                      Conds:RS_25._col0=RS_26._col1(Inner),Output:["_col2","_col3","_col6","_col7","_col9","_col11","_col12","_col13","_col15","_col16","_col17","_col18"]
                                    <-Reducer 18 [SIMPLE_EDGE]
                                      SHUFFLE [RS_26]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_289] (rows=76612563 width=382)
                                          Conds:RS_328._col0=RS_311._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col6","_col7","_col8","_col9"]
                                        <-Map 19 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_311]
                                            PartitionCols:_col0
                                            Select Operator [SEL_309] (rows=7000 width=295)
                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                              Filter Operator [FIL_307] (rows=7000 width=384)
                                                predicate:(i_color = 'orchid')
                                                 Please refer to the previous TableScan [TS_9]
                                        <-Map 17 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_328]
                                            PartitionCols:_col0
                                            Select Operator [SEL_327] (rows=525333486 width=122)
                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                              Filter Operator [FIL_326] (rows=525333486 width=122)
                                                predicate:((ss_item_sk BETWEEN DynamicValue(RS_13_item_i_item_sk_min) AND DynamicValue(RS_13_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_13_item_i_item_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_29_store_s_store_sk_min) AND DynamicValue(RS_29_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_29_store_s_store_sk_bloom_filter))) and ss_customer_sk is not null and ss_store_sk is not null)
                                                TableScan [TS_6] (rows=575995635 width=122)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_sales_price"]
                                                <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_316]
                                                    Group By Operator [GBY_315] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_314]
                                                        Group By Operator [GBY_313] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_312] (rows=7000 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_309]
                                                <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_325]
                                                    Group By Operator [GBY_324] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_323]
                                                        Group By Operator [GBY_322] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_320] (rows=155 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_318]
                                    <-Reducer 2 [SIMPLE_EDGE]
                                      SHUFFLE [RS_25]
                                        PartitionCols:_col0
                                        Filter Operator [FIL_24] (rows=80000000 width=635)
                                          predicate:(_col4 <> _col8)
                                          Merge Join Operator [MERGEJOIN_288] (rows=80000000 width=635)
                                            Conds:RS_301._col1=RS_305._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col6","_col7","_col8"]
                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_301]
                                              PartitionCols:_col1
                                               Please refer to the previous Select Operator [SEL_300]
                                          <-Map 15 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_305]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_304]

