PREHOOK: query: use tpch_0_001
PREHOOK: type: SWITCHDATABASE
PREHOOK: Input: database:tpch_0_001
POSTHOOK: query: use tpch_0_001
POSTHOOK: type: SWITCHDATABASE
POSTHOOK: Input: database:tpch_0_001
PREHOOK: query: alter table orders add constraint pk_o primary key (o_orderkey) disable novalidate rely
PREHOOK: type: ALTERTABLE_ADDCONSTRAINT
POSTHOOK: query: alter table orders add constraint pk_o primary key (o_orderkey) disable novalidate rely
POSTHOOK: type: ALTERTABLE_ADDCONSTRAINT
PREHOOK: query: alter table customer add constraint pk_c primary key (c_custkey) disable novalidate rely
PREHOOK: type: ALTERTABLE_ADDCONSTRAINT
POSTHOOK: query: alter table customer add constraint pk_c primary key (c_custkey) disable novalidate rely
POSTHOOK: type: ALTERTABLE_ADDCONSTRAINT
PREHOOK: query: alter table lineitem add constraint li_o foreign key  (l_orderkey) references orders (o_orderkey) disable novalidate rely
PREHOOK: type: ALTERTABLE_ADDCONSTRAINT
POSTHOOK: query: alter table lineitem add constraint li_o foreign key  (l_orderkey) references orders (o_orderkey) disable novalidate rely
POSTHOOK: type: ALTERTABLE_ADDCONSTRAINT
PREHOOK: query: alter table orders   add constraint or_c foreign key  (o_custkey) references customer (c_custkey) disable novalidate rely
PREHOOK: type: ALTERTABLE_ADDCONSTRAINT
POSTHOOK: query: alter table orders   add constraint or_c foreign key  (o_custkey) references customer (c_custkey) disable novalidate rely
POSTHOOK: type: ALTERTABLE_ADDCONSTRAINT
PREHOOK: query: create view q18_tmp_cached as
select
	l_orderkey,
	sum(l_quantity) as t_sum_quantity
from
	lineitem
where
	l_orderkey is not null
group by
	l_orderkey
PREHOOK: type: CREATEVIEW
PREHOOK: Input: tpch_0_001@lineitem
PREHOOK: Output: database:tpch_0_001
PREHOOK: Output: tpch_0_001@q18_tmp_cached
POSTHOOK: query: create view q18_tmp_cached as
select
	l_orderkey,
	sum(l_quantity) as t_sum_quantity
from
	lineitem
where
	l_orderkey is not null
group by
	l_orderkey
POSTHOOK: type: CREATEVIEW
POSTHOOK: Input: tpch_0_001@lineitem
POSTHOOK: Output: database:tpch_0_001
POSTHOOK: Output: tpch_0_001@q18_tmp_cached
POSTHOOK: Lineage: q18_tmp_cached.l_orderkey SIMPLE [(lineitem)lineitem.FieldSchema(name:l_orderkey, type:int, comment:null), ]
POSTHOOK: Lineage: q18_tmp_cached.t_sum_quantity EXPRESSION [(lineitem)lineitem.FieldSchema(name:l_quantity, type:double, comment:null), ]
PREHOOK: query: explain cbo select
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity)
from
	customer,
	orders,
	q18_tmp_cached t,
	lineitem l
where
c_custkey = o_custkey
and o_orderkey = t.l_orderkey
and o_orderkey is not null
and t.t_sum_quantity > 300
and o_orderkey = l.l_orderkey
and l.l_orderkey is not null
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice
order by
o_totalprice desc,
o_orderdate
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: tpch_0_001@customer
PREHOOK: Input: tpch_0_001@lineitem
PREHOOK: Input: tpch_0_001@orders
PREHOOK: Input: tpch_0_001@q18_tmp_cached
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain cbo select
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity)
from
	customer,
	orders,
	q18_tmp_cached t,
	lineitem l
where
c_custkey = o_custkey
and o_orderkey = t.l_orderkey
and o_orderkey is not null
and t.t_sum_quantity > 300
and o_orderkey = l.l_orderkey
and l.l_orderkey is not null
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice
order by
o_totalprice desc,
o_orderdate
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: tpch_0_001@customer
POSTHOOK: Input: tpch_0_001@lineitem
POSTHOOK: Input: tpch_0_001@orders
POSTHOOK: Input: tpch_0_001@q18_tmp_cached
POSTHOOK: Output: hdfs://### HDFS PATH ###
CBO PLAN:
HiveSortLimit(sort0=[$4], sort1=[$3], dir0=[DESC], dir1=[ASC], fetch=[100])
  HiveProject(c_name=[$9], c_custkey=[$8], o_orderkey=[$2], o_orderdate=[$5], o_totalprice=[$4], $f5=[$7])
    HiveJoin(condition=[=($8, $3)], joinType=[inner], algorithm=[CommonJoin], cost=[not available])
      HiveProject(l_orderkey=[$0], l_quantity=[$1], o_orderkey=[$2], o_custkey=[$3], o_totalprice=[$4], o_orderdate=[$5], $f0=[$7], $f6=[$6])
        HiveJoin(condition=[=($2, $7)], joinType=[inner], algorithm=[CommonJoin], cost=[not available])
          HiveProject(l_orderkey=[$0], l_quantity=[$1], o_orderkey=[$3], o_custkey=[$4], o_totalprice=[$5], o_orderdate=[$6], $f2=[$2])
            HiveJoin(condition=[=($3, $0)], joinType=[inner], algorithm=[CommonJoin], cost=[not available])
              HiveProject(l_orderkey=[$0], l_quantity=[$1], $f2=[$2])
                HiveAggregate(group=[{0, 1}], agg#0=[sum($1)])
                  HiveProject(l_orderkey=[$0], l_quantity=[$4])
                    HiveTableScan(table=[[tpch_0_001, lineitem]], table:alias=[l])
              HiveProject(o_orderkey=[$0], o_custkey=[$1], o_totalprice=[$3], o_orderdate=[$4])
                HiveTableScan(table=[[tpch_0_001, orders]], table:alias=[orders])
          HiveProject($f0=[$0])
            HiveFilter(condition=[>($1, 3E2)])
              HiveAggregate(group=[{0}], agg#0=[sum($4)])
                HiveTableScan(table=[[tpch_0_001, lineitem]], table:alias=[lineitem])
      HiveProject(c_custkey=[$0], c_name=[$1])
        HiveTableScan(table=[[tpch_0_001, customer]], table:alias=[customer])

PREHOOK: query: explain select
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity)
from
	customer,
	orders,
	q18_tmp_cached t,
	lineitem l
where
c_custkey = o_custkey
and o_orderkey = t.l_orderkey
and o_orderkey is not null
and t.t_sum_quantity > 300
and o_orderkey = l.l_orderkey
and l.l_orderkey is not null
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice
order by
o_totalprice desc,
o_orderdate
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: tpch_0_001@customer
PREHOOK: Input: tpch_0_001@lineitem
PREHOOK: Input: tpch_0_001@orders
PREHOOK: Input: tpch_0_001@q18_tmp_cached
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain select
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity)
from
	customer,
	orders,
	q18_tmp_cached t,
	lineitem l
where
c_custkey = o_custkey
and o_orderkey = t.l_orderkey
and o_orderkey is not null
and t.t_sum_quantity > 300
and o_orderkey = l.l_orderkey
and l.l_orderkey is not null
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice
order by
o_totalprice desc,
o_orderdate
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: tpch_0_001@customer
POSTHOOK: Input: tpch_0_001@lineitem
POSTHOOK: Input: tpch_0_001@orders
POSTHOOK: Input: tpch_0_001@q18_tmp_cached
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Map 7 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 5 <- Map 10 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_102]
        Limit [LIM_101] (rows=100 width=286)
          Number of rows:100
          Select Operator [SEL_100] (rows=1523 width=286)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 5 [SIMPLE_EDGE]
            SHUFFLE [RS_30]
              Select Operator [SEL_29] (rows=1523 width=286)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Top N Key Operator [TNK_47] (rows=1523 width=286)
                  keys:_col4, _col5,top n:100
                  Merge Join Operator [MERGEJOIN_83] (rows=1523 width=286)
                    Conds:RS_26._col3=RS_99._col0(Inner),Output:["_col2","_col4","_col5","_col7","_col8","_col9"]
                  <-Map 10 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_99]
                      PartitionCols:_col0
                      Select Operator [SEL_98] (rows=150 width=106)
                        Output:["_col0","_col1"]
                        TableScan [TS_24] (rows=150 width=106)
                          tpch_0_001@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_custkey","c_name"]
                  <-Reducer 4 [SIMPLE_EDGE]
                    SHUFFLE [RS_26]
                      PartitionCols:_col3
                      Select Operator [SEL_23] (rows=1523 width=184)
                        Output:["_col2","_col3","_col4","_col5","_col7"]
                        Merge Join Operator [MERGEJOIN_82] (rows=1523 width=184)
                          Conds:RS_20._col2=RS_97._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col6"]
                        <-Reducer 3 [SIMPLE_EDGE]
                          SHUFFLE [RS_20]
                            PartitionCols:_col2
                            Select Operator [SEL_12] (rows=3002 width=184)
                              Output:["_col2","_col3","_col4","_col5","_col6"]
                              Merge Join Operator [MERGEJOIN_81] (rows=3002 width=184)
                                Conds:RS_89._col0=RS_91._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col6"]
                              <-Map 7 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_91]
                                  PartitionCols:_col0
                                  Select Operator [SEL_90] (rows=1500 width=176)
                                    Output:["_col0","_col1","_col2","_col3"]
                                    TableScan [TS_7] (rows=1500 width=176)
                                      tpch_0_001@orders,orders,Tbl:COMPLETE,Col:COMPLETE,Output:["o_orderkey","o_custkey","o_totalprice","o_orderdate"]
                              <-Reducer 2 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_89]
                                  PartitionCols:_col0
                                  Select Operator [SEL_88] (rows=3002 width=20)
                                    Output:["_col0","_col2"]
                                    Group By Operator [GBY_87] (rows=3002 width=20)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_86]
                                        PartitionCols:_col0, _col1
                                        Group By Operator [GBY_85] (rows=3002 width=20)
                                          Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)"],keys:_col0, _col1
                                          Select Operator [SEL_84] (rows=6005 width=12)
                                            Output:["_col0","_col1"]
                                            TableScan [TS_0] (rows=6005 width=12)
                                              tpch_0_001@lineitem,l,Tbl:COMPLETE,Col:COMPLETE,Output:["l_orderkey","l_quantity"]
                        <-Reducer 9 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_97]
                            PartitionCols:_col0
                            Select Operator [SEL_96] (rows=1523 width=4)
                              Output:["_col0"]
                              Filter Operator [FIL_95] (rows=1523 width=12)
                                predicate:(_col1 > 300.0D)
                                Group By Operator [GBY_94] (rows=1523 width=12)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Map 8 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_93]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_92] (rows=1523 width=12)
                                      Output:["_col0","_col1"],aggregations:["sum(l_quantity)"],keys:l_orderkey
                                      TableScan [TS_13] (rows=6005 width=12)
                                        tpch_0_001@lineitem,lineitem,Tbl:COMPLETE,Col:COMPLETE,Output:["l_orderkey","l_quantity"],properties:{"insideView":"TRUE"}

