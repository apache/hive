PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ss_ext_list_price-ss_ext_discount_amt) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ws_ext_list_price-ws_ext_discount_amt) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select
                  t_s_secyear.customer_id
                 ,t_s_secyear.customer_first_name
                 ,t_s_secyear.customer_last_name
                 ,t_s_secyear.customer_birth_country
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.dyear = 1999
         and t_s_secyear.dyear = 1999+1
         and t_w_firstyear.dyear = 1999
         and t_w_secyear.dyear = 1999+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else 0.0 end
             > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else 0.0 end
 order by t_s_secyear.customer_id
         ,t_s_secyear.customer_first_name
         ,t_s_secyear.customer_last_name
         ,t_s_secyear.customer_birth_country
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ss_ext_list_price-ss_ext_discount_amt) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ws_ext_list_price-ws_ext_discount_amt) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select
                  t_s_secyear.customer_id
                 ,t_s_secyear.customer_first_name
                 ,t_s_secyear.customer_last_name
                 ,t_s_secyear.customer_birth_country
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.dyear = 1999
         and t_s_secyear.dyear = 1999+1
         and t_w_firstyear.dyear = 1999
         and t_w_secyear.dyear = 1999+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else 0.0 end
             > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else 0.0 end
 order by t_s_secyear.customer_id
         ,t_s_secyear.customer_first_name
         ,t_s_secyear.customer_last_name
         ,t_s_secyear.customer_birth_country
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 10 (BROADCAST_EDGE)
Map 24 <- Reducer 14 (BROADCAST_EDGE)
Map 26 <- Reducer 18 (BROADCAST_EDGE)
Map 27 <- Reducer 22 (BROADCAST_EDGE)
Reducer 10 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Map 24 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 12 <- Map 25 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 26 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 16 <- Map 25 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 27 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 20 <- Map 25 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 23 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 13 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 17 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 21 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_346]
        Limit [LIM_345] (rows=100 width=372)
          Number of rows:100
          Select Operator [SEL_344] (rows=13333333 width=372)
            Output:["_col0","_col1","_col2","_col3"]
          <-Reducer 7 [SIMPLE_EDGE]
            SHUFFLE [RS_89]
              Select Operator [SEL_88] (rows=13333333 width=372)
                Output:["_col0","_col1","_col2","_col3"]
                Top N Key Operator [TNK_152] (rows=13333333 width=824)
                  keys:_col0, _col1, _col2, _col3,top n:100
                  Filter Operator [FIL_87] (rows=13333333 width=824)
                    predicate:CASE WHEN (_col6 is not null) THEN (CASE WHEN (_col11) THEN (((_col8 / _col10) > (_col4 / _col6))) ELSE ((0 > (_col4 / _col6))) END) ELSE (CASE WHEN (_col11) THEN (((_col8 / _col10) > 0)) ELSE (false) END) END
                    Merge Join Operator [MERGEJOIN_282] (rows=26666666 width=824)
                      Conds:RS_84._col0=RS_343._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col6","_col8","_col10","_col11"]
                    <-Reducer 21 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_343]
                        PartitionCols:_col0
                        Select Operator [SEL_342] (rows=14325562 width=216)
                          Output:["_col0","_col1","_col2"]
                          Filter Operator [FIL_341] (rows=14325562 width=212)
                            predicate:(_col1 > 0)
                            Group By Operator [GBY_340] (rows=42976686 width=212)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 20 [SIMPLE_EDGE]
                              SHUFFLE [RS_74]
                                PartitionCols:_col0
                                Group By Operator [GBY_73] (rows=51391963 width=212)
                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                  Merge Join Operator [MERGEJOIN_279] (rows=51391963 width=212)
                                    Conds:RS_69._col1=RS_324._col0(Inner),Output:["_col2","_col5"]
                                  <-Map 25 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_324]
                                      PartitionCols:_col0
                                      Select Operator [SEL_321] (rows=80000000 width=104)
                                        Output:["_col0","_col1"]
                                        TableScan [TS_25] (rows=80000000 width=104)
                                          default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id"]
                                  <-Reducer 19 [SIMPLE_EDGE]
                                    SHUFFLE [RS_69]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_278] (rows=51391963 width=115)
                                        Conds:RS_339._col0=RS_297._col0(Inner),Output:["_col1","_col2"]
                                      <-Map 9 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_297]
                                          PartitionCols:_col0
                                          Select Operator [SEL_290] (rows=652 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_286] (rows=652 width=8)
                                              predicate:(d_year = 1999)
                                              TableScan [TS_3] (rows=73049 width=8)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                      <-Map 27 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_339]
                                          PartitionCols:_col0
                                          Select Operator [SEL_338] (rows=143930993 width=119)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_337] (rows=143930993 width=231)
                                              predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_67_date_dim_d_date_sk_min) AND DynamicValue(RS_67_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_67_date_dim_d_date_sk_bloom_filter)))
                                              TableScan [TS_58] (rows=144002668 width=231)
                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_list_price"]
                                              <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_336]
                                                  Group By Operator [GBY_335] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_306]
                                                      Group By Operator [GBY_302] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_298] (rows=652 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_290]
                    <-Reducer 6 [SIMPLE_EDGE]
                      SHUFFLE [RS_84]
                        PartitionCols:_col0
                        Merge Join Operator [MERGEJOIN_281] (rows=26666666 width=708)
                          Conds:RS_81._col0=RS_334._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col6","_col8"]
                        <-Reducer 17 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_334]
                            PartitionCols:_col0
                            Group By Operator [GBY_333] (rows=42976686 width=212)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 16 [SIMPLE_EDGE]
                              SHUFFLE [RS_55]
                                PartitionCols:_col0
                                Group By Operator [GBY_54] (rows=51391963 width=212)
                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                  Merge Join Operator [MERGEJOIN_277] (rows=51391963 width=212)
                                    Conds:RS_50._col1=RS_323._col0(Inner),Output:["_col2","_col5"]
                                  <-Map 25 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_323]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_321]
                                  <-Reducer 15 [SIMPLE_EDGE]
                                    SHUFFLE [RS_50]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_276] (rows=51391963 width=115)
                                        Conds:RS_332._col0=RS_295._col0(Inner),Output:["_col1","_col2"]
                                      <-Map 9 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_295]
                                          PartitionCols:_col0
                                          Select Operator [SEL_289] (rows=652 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_285] (rows=652 width=8)
                                              predicate:(d_year = 2000)
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_332]
                                          PartitionCols:_col0
                                          Select Operator [SEL_331] (rows=143930993 width=119)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_330] (rows=143930993 width=231)
                                              predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_48_date_dim_d_date_sk_min) AND DynamicValue(RS_48_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_48_date_dim_d_date_sk_bloom_filter)))
                                              TableScan [TS_39] (rows=144002668 width=231)
                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_list_price"]
                                              <-Reducer 18 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_329]
                                                  Group By Operator [GBY_328] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_305]
                                                      Group By Operator [GBY_301] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_296] (rows=652 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_289]
                        <-Reducer 5 [SIMPLE_EDGE]
                          SHUFFLE [RS_81]
                            PartitionCols:_col0
                            Merge Join Operator [MERGEJOIN_280] (rows=26666666 width=596)
                              Conds:RS_315._col0=RS_327._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col6"]
                            <-Reducer 13 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_327]
                                PartitionCols:_col0
                                Filter Operator [FIL_326] (rows=22300081 width=212)
                                  predicate:(_col1 > 0)
                                  Group By Operator [GBY_325] (rows=66900244 width=212)
                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                  <-Reducer 12 [SIMPLE_EDGE]
                                    SHUFFLE [RS_35]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_34] (rows=80000000 width=212)
                                        Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                        Merge Join Operator [MERGEJOIN_275] (rows=187573258 width=212)
                                          Conds:RS_30._col1=RS_322._col0(Inner),Output:["_col2","_col5"]
                                        <-Map 25 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_322]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_321]
                                        <-Reducer 11 [SIMPLE_EDGE]
                                          SHUFFLE [RS_30]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_274] (rows=187573258 width=115)
                                              Conds:RS_320._col0=RS_293._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 9 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_293]
                                                PartitionCols:_col0
                                                Select Operator [SEL_288] (rows=652 width=4)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_284] (rows=652 width=8)
                                                    predicate:(d_year = 1999)
                                                     Please refer to the previous TableScan [TS_3]
                                            <-Map 24 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_320]
                                                PartitionCols:_col0
                                                Select Operator [SEL_319] (rows=525327388 width=119)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_318] (rows=525327388 width=221)
                                                    predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_28_date_dim_d_date_sk_min) AND DynamicValue(RS_28_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_28_date_dim_d_date_sk_bloom_filter)))
                                                    TableScan [TS_19] (rows=575995635 width=221)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_list_price"]
                                                    <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_317]
                                                        Group By Operator [GBY_316] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_304]
                                                            Group By Operator [GBY_300] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_294] (rows=652 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_288]
                            <-Reducer 4 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_315]
                                PartitionCols:_col0
                                Group By Operator [GBY_314] (rows=80000000 width=484)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                <-Reducer 3 [SIMPLE_EDGE]
                                  SHUFFLE [RS_16]
                                    PartitionCols:_col0, _col1, _col2, _col3
                                    Group By Operator [GBY_15] (rows=80000000 width=484)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col9
                                      Merge Join Operator [MERGEJOIN_273] (rows=187573258 width=484)
                                        Conds:RS_11._col1=RS_313._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col9"]
                                      <-Map 23 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_313]
                                          PartitionCols:_col0
                                          Select Operator [SEL_312] (rows=80000000 width=376)
                                            Output:["_col0","_col1","_col2","_col3","_col5"]
                                            TableScan [TS_6] (rows=80000000 width=376)
                                              default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name","c_birth_country"]
                                      <-Reducer 2 [SIMPLE_EDGE]
                                        SHUFFLE [RS_11]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_272] (rows=187573258 width=115)
                                            Conds:RS_311._col0=RS_291._col0(Inner),Output:["_col1","_col2"]
                                          <-Map 9 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_291]
                                              PartitionCols:_col0
                                              Select Operator [SEL_287] (rows=652 width=4)
                                                Output:["_col0"]
                                                Filter Operator [FIL_283] (rows=652 width=8)
                                                  predicate:(d_year = 2000)
                                                   Please refer to the previous TableScan [TS_3]
                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_311]
                                              PartitionCols:_col0
                                              Select Operator [SEL_310] (rows=525327388 width=119)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_309] (rows=525327388 width=221)
                                                  predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_9_date_dim_d_date_sk_min) AND DynamicValue(RS_9_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_9_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_0] (rows=575995635 width=221)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_list_price"]
                                                  <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_308]
                                                      Group By Operator [GBY_307] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_303]
                                                          Group By Operator [GBY_299] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_292] (rows=652 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_287]

