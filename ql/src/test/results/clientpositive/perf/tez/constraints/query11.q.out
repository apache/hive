PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ss_ext_list_price-ss_ext_discount_amt) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ws_ext_list_price-ws_ext_discount_amt) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select
                  t_s_secyear.customer_id
                 ,t_s_secyear.customer_first_name
                 ,t_s_secyear.customer_last_name
                 ,t_s_secyear.customer_birth_country
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.dyear = 1999
         and t_s_secyear.dyear = 1999+1
         and t_w_firstyear.dyear = 1999
         and t_w_secyear.dyear = 1999+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else 0.0 end
             > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else 0.0 end
 order by t_s_secyear.customer_id
         ,t_s_secyear.customer_first_name
         ,t_s_secyear.customer_last_name
         ,t_s_secyear.customer_birth_country
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ss_ext_list_price-ss_ext_discount_amt) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ws_ext_list_price-ws_ext_discount_amt) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select
                  t_s_secyear.customer_id
                 ,t_s_secyear.customer_first_name
                 ,t_s_secyear.customer_last_name
                 ,t_s_secyear.customer_birth_country
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.dyear = 1999
         and t_s_secyear.dyear = 1999+1
         and t_w_firstyear.dyear = 1999
         and t_w_secyear.dyear = 1999+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else 0.0 end
             > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else 0.0 end
 order by t_s_secyear.customer_id
         ,t_s_secyear.customer_first_name
         ,t_s_secyear.customer_last_name
         ,t_s_secyear.customer_birth_country
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 14 (BROADCAST_EDGE), Reducer 18 (BROADCAST_EDGE)
Map 23 <- Reducer 14 (BROADCAST_EDGE), Reducer 18 (BROADCAST_EDGE)
Reducer 10 <- Map 1 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 11 <- Map 22 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 13 (SIMPLE_EDGE), Map 23 (SIMPLE_EDGE)
Reducer 16 <- Map 22 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 13 (SIMPLE_EDGE), Map 23 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 20 <- Map 22 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 3 <- Map 22 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 12 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 17 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 21 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 22 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_396]
        Limit [LIM_395] (rows=100 width=372)
          Number of rows:100
          Select Operator [SEL_394] (rows=15944136 width=372)
            Output:["_col0","_col1","_col2","_col3"]
          <-Reducer 8 [SIMPLE_EDGE]
            SHUFFLE [RS_103]
              Select Operator [SEL_102] (rows=15944136 width=372)
                Output:["_col0","_col1","_col2","_col3"]
                Top N Key Operator [TNK_180] (rows=15944136 width=372)
                  keys:_col0, _col2, _col3, _col4,top n:100
                  Merge Join Operator [MERGEJOIN_330] (rows=15944136 width=372)
                    Conds:RS_99._col0=RS_371._col0(Inner),Output:["_col0","_col2","_col3","_col4"]
                  <-Map 22 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_371]
                      PartitionCols:_col0
                      Select Operator [SEL_366] (rows=80000000 width=372)
                        Output:["_col0","_col1","_col2","_col3"]
                        TableScan [TS_8] (rows=80000000 width=196)
                          default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_birth_country","c_first_name","c_last_name"]
                  <-Reducer 7 [SIMPLE_EDGE]
                    SHUFFLE [RS_99]
                      PartitionCols:_col0
                      Select Operator [SEL_96] (rows=13333333 width=100)
                        Output:["_col0"]
                        Filter Operator [FIL_95] (rows=13333333 width=552)
                          predicate:CASE WHEN (_col4 is not null) THEN (CASE WHEN (_col9) THEN (((_col6 / _col8) > (_col2 / _col4))) ELSE ((0 > (_col2 / _col4))) END) ELSE (CASE WHEN (_col9) THEN (((_col6 / _col8) > 0)) ELSE (false) END) END
                          Merge Join Operator [MERGEJOIN_329] (rows=26666666 width=552)
                            Conds:RS_92._col0=RS_393._col0(Inner),Output:["_col0","_col2","_col4","_col6","_col8","_col9"]
                          <-Reducer 21 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_393]
                              PartitionCols:_col0
                              Select Operator [SEL_392] (rows=14325562 width=216)
                                Output:["_col0","_col1","_col2"]
                                Filter Operator [FIL_391] (rows=14325562 width=212)
                                  predicate:(_col1 > 0)
                                  Group By Operator [GBY_390] (rows=42976686 width=212)
                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                  <-Reducer 20 [SIMPLE_EDGE]
                                    SHUFFLE [RS_82]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_81] (rows=51391963 width=212)
                                        Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                        Merge Join Operator [MERGEJOIN_326] (rows=51391963 width=212)
                                          Conds:RS_77._col1=RS_370._col0(Inner),Output:["_col2","_col5"]
                                        <-Map 22 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_370]
                                            PartitionCols:_col0
                                            Select Operator [SEL_365] (rows=80000000 width=104)
                                              Output:["_col0","_col1"]
                                               Please refer to the previous TableScan [TS_8]
                                        <-Reducer 19 [SIMPLE_EDGE]
                                          SHUFFLE [RS_77]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_322] (rows=51391963 width=115)
                                              Conds:RS_387._col0=RS_341._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 13 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_341]
                                                PartitionCols:_col0
                                                Select Operator [SEL_335] (rows=652 width=4)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_333] (rows=652 width=8)
                                                    predicate:(_col1 = 1999)
                                                    Select Operator [SEL_331] (rows=73049 width=8)
                                                      Output:["_col0","_col1"]
                                                      TableScan [TS_4] (rows=73049 width=8)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                            <-Map 23 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_387]
                                                PartitionCols:_col0
                                                Select Operator [SEL_385] (rows=143930993 width=119)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_383] (rows=143930993 width=231)
                                                    predicate:(_col0 is not null and _col1 is not null)
                                                    Select Operator [SEL_381] (rows=144002668 width=231)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_379] (rows=144002668 width=231)
                                                        predicate:(ws_sold_date_sk BETWEEN DynamicValue(RS_75_date_dim_d_date_sk_min) AND DynamicValue(RS_75_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_75_date_dim_d_date_sk_bloom_filter)))
                                                        TableScan [TS_43] (rows=144002668 width=231)
                                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_list_price"]
                                                        <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_348]
                                                            Group By Operator [GBY_346] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_344]
                                                                Group By Operator [GBY_342] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_337] (rows=652 width=4)
                                                                    Output:["_col0"]
                                                                    Select Operator [SEL_334] (rows=652 width=4)
                                                                      Output:["_col0"]
                                                                      Filter Operator [FIL_332] (rows=652 width=8)
                                                                        predicate:(_col1 = 2000)
                                                                         Please refer to the previous Select Operator [SEL_331]
                                                        <-Reducer 18 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_351]
                                                            Group By Operator [GBY_349] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_345]
                                                                Group By Operator [GBY_343] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_340] (rows=652 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_335]
                          <-Reducer 6 [SIMPLE_EDGE]
                            SHUFFLE [RS_92]
                              PartitionCols:_col0
                              Merge Join Operator [MERGEJOIN_328] (rows=26666666 width=436)
                                Conds:RS_89._col0=RS_389._col0(Inner),Output:["_col0","_col2","_col4","_col6"]
                              <-Reducer 17 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_389]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_388] (rows=42976686 width=212)
                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                  <-Reducer 16 [SIMPLE_EDGE]
                                    SHUFFLE [RS_61]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_60] (rows=51391963 width=212)
                                        Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                        Merge Join Operator [MERGEJOIN_325] (rows=51391963 width=212)
                                          Conds:RS_56._col1=RS_369._col0(Inner),Output:["_col2","_col5"]
                                        <-Map 22 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_369]
                                            PartitionCols:_col0
                                            Select Operator [SEL_364] (rows=80000000 width=104)
                                              Output:["_col0","_col1"]
                                               Please refer to the previous TableScan [TS_8]
                                        <-Reducer 15 [SIMPLE_EDGE]
                                          SHUFFLE [RS_56]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_321] (rows=51391963 width=115)
                                              Conds:RS_386._col0=RS_338._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 13 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_338]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_334]
                                            <-Map 23 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_386]
                                                PartitionCols:_col0
                                                Select Operator [SEL_384] (rows=143930993 width=119)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_382] (rows=143930993 width=231)
                                                    predicate:(_col0 is not null and _col1 is not null)
                                                    Select Operator [SEL_380] (rows=144002668 width=231)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_378] (rows=144002668 width=231)
                                                        predicate:(ws_sold_date_sk BETWEEN DynamicValue(RS_54_date_dim_d_date_sk_min) AND DynamicValue(RS_54_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_54_date_dim_d_date_sk_bloom_filter)))
                                                         Please refer to the previous TableScan [TS_43]
                              <-Reducer 5 [SIMPLE_EDGE]
                                SHUFFLE [RS_89]
                                  PartitionCols:_col0
                                  Merge Join Operator [MERGEJOIN_327] (rows=26666666 width=324)
                                    Conds:RS_374._col0=RS_377._col0(Inner),Output:["_col0","_col2","_col4"]
                                  <-Reducer 12 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_377]
                                      PartitionCols:_col0
                                      Filter Operator [FIL_376] (rows=22300081 width=212)
                                        predicate:(_col1 > 0)
                                        Group By Operator [GBY_375] (rows=66900244 width=212)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                        <-Reducer 11 [SIMPLE_EDGE]
                                          SHUFFLE [RS_39]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_38] (rows=80000000 width=212)
                                              Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                              Merge Join Operator [MERGEJOIN_324] (rows=187573258 width=212)
                                                Conds:RS_34._col1=RS_368._col0(Inner),Output:["_col2","_col5"]
                                              <-Map 22 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_368]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_363] (rows=80000000 width=104)
                                                    Output:["_col0","_col1"]
                                                     Please refer to the previous TableScan [TS_8]
                                              <-Reducer 10 [SIMPLE_EDGE]
                                                SHUFFLE [RS_34]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_320] (rows=187573258 width=115)
                                                    Conds:RS_361._col0=RS_339._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 13 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_339]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_335]
                                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_361]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_359] (rows=525327388 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_357] (rows=525327388 width=221)
                                                          predicate:(_col0 is not null and _col1 is not null)
                                                          Select Operator [SEL_355] (rows=575995635 width=221)
                                                            Output:["_col0","_col1","_col2","_col3"]
                                                            Filter Operator [FIL_353] (rows=575995635 width=221)
                                                              predicate:(ss_sold_date_sk BETWEEN DynamicValue(RS_32_date_dim_d_date_sk_min) AND DynamicValue(RS_32_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_32_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_0] (rows=575995635 width=221)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_list_price"]
                                                              <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_347]
                                                                   Please refer to the previous Group By Operator [GBY_346]
                                                              <-Reducer 18 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_350]
                                                                   Please refer to the previous Group By Operator [GBY_349]
                                  <-Reducer 4 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_374]
                                      PartitionCols:_col0
                                      Select Operator [SEL_373] (rows=80000000 width=304)
                                        Output:["_col0","_col2"]
                                        Group By Operator [GBY_372] (rows=80000000 width=304)
                                          Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                        <-Reducer 3 [SIMPLE_EDGE]
                                          SHUFFLE [RS_18]
                                            PartitionCols:_col0, _col1
                                            Group By Operator [GBY_17] (rows=80000000 width=304)
                                              Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)"],keys:_col5, _col8
                                              Merge Join Operator [MERGEJOIN_323] (rows=187573258 width=304)
                                                Conds:RS_13._col1=RS_367._col0(Inner),Output:["_col2","_col5","_col8"]
                                              <-Map 22 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_367]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_362] (rows=80000000 width=196)
                                                    Output:["_col0","_col1","_col4"]
                                                     Please refer to the previous TableScan [TS_8]
                                              <-Reducer 2 [SIMPLE_EDGE]
                                                SHUFFLE [RS_13]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_319] (rows=187573258 width=115)
                                                    Conds:RS_360._col0=RS_336._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 13 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_336]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_334]
                                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_360]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_358] (rows=525327388 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_356] (rows=525327388 width=221)
                                                          predicate:(_col0 is not null and _col1 is not null)
                                                          Select Operator [SEL_354] (rows=575995635 width=221)
                                                            Output:["_col0","_col1","_col2","_col3"]
                                                            Filter Operator [FIL_352] (rows=575995635 width=221)
                                                              predicate:(ss_sold_date_sk BETWEEN DynamicValue(RS_11_date_dim_d_date_sk_min) AND DynamicValue(RS_11_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_11_date_dim_d_date_sk_bloom_filter)))
                                                               Please refer to the previous TableScan [TS_0]

