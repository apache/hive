PREHOOK: query: explain
with ss as (
 select
          i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 cs as (
 select
          i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 ws as (
 select
          i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6
 group by i_item_id)
  select   
  i_item_id
,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by i_item_id
      ,total_sales
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as (
 select
          i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 cs as (
 select
          i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 ws as (
 select
          i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6
 group by i_item_id)
  select   
  i_item_id
,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by i_item_id
      ,total_sales
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 17 <- Reducer 21 (BROADCAST_EDGE)
Map 29 <- Reducer 24 (BROADCAST_EDGE)
Map 30 <- Reducer 27 (BROADCAST_EDGE)
Reducer 10 <- Reducer 23 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 12 <- Map 1 (SIMPLE_EDGE)
Reducer 13 <- Map 1 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 16 <- Map 1 (SIMPLE_EDGE)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE)
Reducer 19 <- Map 28 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 21 <- Map 20 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Map 20 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 23 <- Map 28 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Map 20 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 20 (SIMPLE_EDGE), Map 30 (SIMPLE_EDGE)
Reducer 26 <- Map 28 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Map 20 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 19 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE)
Reducer 9 <- Map 1 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_376]
        Limit [LIM_375] (rows=100 width=212)
          Number of rows:100
          Select Operator [SEL_374] (rows=1717 width=212)
            Output:["_col0","_col1"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_373]
              Top N Key Operator [TNK_372] (rows=1717 width=212)
                keys:_col0, _col1,top n:100
                Group By Operator [GBY_371] (rows=1717 width=212)
                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                <-Union 5 [SIMPLE_EDGE]
                  <-Reducer 11 [CONTAINS] vectorized
                    Reduce Output Operator [RS_387]
                      PartitionCols:_col0
                      Group By Operator [GBY_386] (rows=1717 width=212)
                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                        Top N Key Operator [TNK_385] (rows=5151 width=212)
                          keys:_col0,top n:100
                          Group By Operator [GBY_384] (rows=1717 width=212)
                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 10 [SIMPLE_EDGE]
                            SHUFFLE [RS_69]
                              PartitionCols:_col0
                              Group By Operator [GBY_68] (rows=1717 width=212)
                                Output:["_col0","_col1"],aggregations:["sum(_col7)"],keys:_col1
                                Merge Join Operator [MERGEJOIN_306] (rows=746132 width=100)
                                  Conds:RS_64._col0=RS_65._col3(Inner),Output:["_col1","_col7"]
                                <-Reducer 23 [SIMPLE_EDGE]
                                  SHUFFLE [RS_65]
                                    PartitionCols:_col3
                                    Select Operator [SEL_60] (rows=1550375 width=13)
                                      Output:["_col3","_col4"]
                                      Merge Join Operator [MERGEJOIN_301] (rows=1550375 width=13)
                                        Conds:RS_57._col1=RS_365._col0(Inner),Output:["_col2","_col3"]
                                      <-Map 28 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_365]
                                          PartitionCols:_col0
                                          Select Operator [SEL_363] (rows=8000000 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_362] (rows=8000000 width=112)
                                              predicate:(ca_gmt_offset = -6)
                                              TableScan [TS_15] (rows=40000000 width=112)
                                                default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_gmt_offset"]
                                      <-Reducer 22 [SIMPLE_EDGE]
                                        SHUFFLE [RS_57]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_300] (rows=7751872 width=98)
                                            Conds:RS_383._col0=RS_347._col0(Inner),Output:["_col1","_col2","_col3"]
                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_347]
                                              PartitionCols:_col0
                                              Select Operator [SEL_344] (rows=50 width=4)
                                                Output:["_col0"]
                                                Filter Operator [FIL_343] (rows=50 width=12)
                                                  predicate:((d_year = 1999) and (d_moy = 9))
                                                  TableScan [TS_12] (rows=73049 width=12)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                          <-Map 29 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_383]
                                              PartitionCols:_col0
                                              Select Operator [SEL_382] (rows=285117733 width=123)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_381] (rows=285117733 width=123)
                                                  predicate:(cs_sold_date_sk is not null and cs_bill_addr_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_55_date_dim_d_date_sk_min) AND DynamicValue(RS_55_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_55_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_45] (rows=287989836 width=123)
                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_addr_sk","cs_item_sk","cs_ext_sales_price"]
                                                  <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_380]
                                                      Group By Operator [GBY_379] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_355]
                                                          Group By Operator [GBY_352] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_348] (rows=50 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_344]
                                <-Reducer 9 [SIMPLE_EDGE]
                                  SHUFFLE [RS_64]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_299] (rows=34340 width=104)
                                      Conds:RS_331._col1=RS_378._col0(Inner),Output:["_col0","_col1"]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_331]
                                        PartitionCols:_col1
                                        Select Operator [SEL_325] (rows=462000 width=104)
                                          Output:["_col0","_col1"]
                                          TableScan [TS_0] (rows=462000 width=104)
                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id","i_category"]
                                    <-Reducer 12 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_378]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_377] (rows=23100 width=100)
                                          Output:["_col0"],keys:KEY._col0
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_339]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_336] (rows=23100 width=100)
                                              Output:["_col0"],keys:i_item_id
                                              Select Operator [SEL_332] (rows=46200 width=190)
                                                Output:["i_item_id"]
                                                Filter Operator [FIL_326] (rows=46200 width=190)
                                                  predicate:(i_category = 'Children')
                                                   Please refer to the previous TableScan [TS_0]
                  <-Reducer 15 [CONTAINS] vectorized
                    Reduce Output Operator [RS_398]
                      PartitionCols:_col0
                      Group By Operator [GBY_397] (rows=1717 width=212)
                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                        Top N Key Operator [TNK_396] (rows=5151 width=212)
                          keys:_col0,top n:100
                          Group By Operator [GBY_395] (rows=1717 width=212)
                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 14 [SIMPLE_EDGE]
                            SHUFFLE [RS_106]
                              PartitionCols:_col0
                              Group By Operator [GBY_105] (rows=1717 width=212)
                                Output:["_col0","_col1"],aggregations:["sum(_col7)"],keys:_col1
                                Merge Join Operator [MERGEJOIN_307] (rows=379339 width=201)
                                  Conds:RS_101._col0=RS_102._col2(Inner),Output:["_col1","_col7"]
                                <-Reducer 13 [SIMPLE_EDGE]
                                  SHUFFLE [RS_101]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_302] (rows=34340 width=104)
                                      Conds:RS_333._col1=RS_389._col0(Inner),Output:["_col0","_col1"]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_333]
                                        PartitionCols:_col1
                                        Select Operator [SEL_327] (rows=462000 width=104)
                                          Output:["_col0","_col1"]
                                           Please refer to the previous TableScan [TS_0]
                                    <-Reducer 16 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_389]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_388] (rows=23100 width=100)
                                          Output:["_col0"],keys:KEY._col0
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_340]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_337] (rows=23100 width=100)
                                              Output:["_col0"],keys:i_item_id
                                              Select Operator [SEL_334] (rows=46200 width=190)
                                                Output:["i_item_id"]
                                                Filter Operator [FIL_328] (rows=46200 width=190)
                                                  predicate:(i_category = 'Children')
                                                   Please refer to the previous TableScan [TS_0]
                                <-Reducer 26 [SIMPLE_EDGE]
                                  SHUFFLE [RS_102]
                                    PartitionCols:_col2
                                    Select Operator [SEL_97] (rows=788222 width=110)
                                      Output:["_col2","_col4"]
                                      Merge Join Operator [MERGEJOIN_304] (rows=788222 width=110)
                                        Conds:RS_94._col2=RS_366._col0(Inner),Output:["_col1","_col3"]
                                      <-Map 28 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_366]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_363]
                                      <-Reducer 25 [SIMPLE_EDGE]
                                        SHUFFLE [RS_94]
                                          PartitionCols:_col2
                                          Merge Join Operator [MERGEJOIN_303] (rows=3941109 width=118)
                                            Conds:RS_394._col0=RS_349._col0(Inner),Output:["_col1","_col2","_col3"]
                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_349]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_344]
                                          <-Map 30 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_394]
                                              PartitionCols:_col0
                                              Select Operator [SEL_393] (rows=143931246 width=123)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_392] (rows=143931246 width=123)
                                                  predicate:(ws_sold_date_sk is not null and ws_bill_addr_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_92_date_dim_d_date_sk_min) AND DynamicValue(RS_92_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_92_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_82] (rows=144002668 width=123)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                                  <-Reducer 27 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_391]
                                                      Group By Operator [GBY_390] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_356]
                                                          Group By Operator [GBY_353] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_350] (rows=50 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_344]
                  <-Reducer 4 [CONTAINS] vectorized
                    Reduce Output Operator [RS_370]
                      PartitionCols:_col0
                      Group By Operator [GBY_369] (rows=1717 width=212)
                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                        Top N Key Operator [TNK_368] (rows=5151 width=212)
                          keys:_col0,top n:100
                          Group By Operator [GBY_367] (rows=1717 width=212)
                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 3 [SIMPLE_EDGE]
                            SHUFFLE [RS_33]
                              PartitionCols:_col0
                              Group By Operator [GBY_32] (rows=1717 width=212)
                                Output:["_col0","_col1"],aggregations:["sum(_col7)"],keys:_col1
                                Merge Join Operator [MERGEJOIN_305] (rows=1384530 width=100)
                                  Conds:RS_28._col0=RS_29._col2(Inner),Output:["_col1","_col7"]
                                <-Reducer 19 [SIMPLE_EDGE]
                                  SHUFFLE [RS_29]
                                    PartitionCols:_col2
                                    Select Operator [SEL_24] (rows=2876890 width=4)
                                      Output:["_col2","_col4"]
                                      Merge Join Operator [MERGEJOIN_298] (rows=2876890 width=4)
                                        Conds:RS_21._col2=RS_364._col0(Inner),Output:["_col1","_col3"]
                                      <-Map 28 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_364]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_363]
                                      <-Reducer 18 [SIMPLE_EDGE]
                                        SHUFFLE [RS_21]
                                          PartitionCols:_col2
                                          Merge Join Operator [MERGEJOIN_297] (rows=14384447 width=4)
                                            Conds:RS_361._col0=RS_345._col0(Inner),Output:["_col1","_col2","_col3"]
                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_345]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_344]
                                          <-Map 17 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_361]
                                              PartitionCols:_col0
                                              Select Operator [SEL_360] (rows=525327191 width=118)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_359] (rows=525327191 width=118)
                                                  predicate:(ss_sold_date_sk is not null and ss_addr_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_19_date_dim_d_date_sk_min) AND DynamicValue(RS_19_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_19_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_9] (rows=575995635 width=118)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_addr_sk","ss_ext_sales_price"]
                                                  <-Reducer 21 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_358]
                                                      Group By Operator [GBY_357] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_354]
                                                          Group By Operator [GBY_351] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_346] (rows=50 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_344]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_28]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_296] (rows=34340 width=104)
                                      Conds:RS_329._col1=RS_342._col0(Inner),Output:["_col0","_col1"]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_329]
                                        PartitionCols:_col1
                                        Select Operator [SEL_323] (rows=462000 width=104)
                                          Output:["_col0","_col1"]
                                           Please refer to the previous TableScan [TS_0]
                                    <-Reducer 8 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_342]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_341] (rows=23100 width=100)
                                          Output:["_col0"],keys:KEY._col0
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_338]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_335] (rows=23100 width=100)
                                              Output:["_col0"],keys:i_item_id
                                              Select Operator [SEL_330] (rows=46200 width=190)
                                                Output:["i_item_id"]
                                                Filter Operator [FIL_324] (rows=46200 width=190)
                                                  predicate:(i_category = 'Children')
                                                   Please refer to the previous TableScan [TS_0]

