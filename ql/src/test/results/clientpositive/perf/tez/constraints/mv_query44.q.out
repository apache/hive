PREHOOK: query: CREATE MATERIALIZED VIEW mv_store_sales_item_customer PARTITIONED ON (ss_sold_date_sk)
AS
  select ss_item_sk, ss_store_sk, ss_customer_sk,  ss_sold_date_sk, count(*) cnt, sum(ss_quantity) as ss_quantity, sum(ss_ext_wholesale_cost) as ss_ext_wholesale_cost,sum(ss_net_paid) as ss_net_paid,sum(ss_net_profit) as ss_net_profit, sum(ss_ext_sales_price) as ss_ext_sales_price, sum(ss_coupon_amt) amt, sum(ss_sales_price) ss_sales_price, sum(ss_quantity*ss_sales_price) ssales
  from store_sales
  group by ss_store_sk, 
  ss_item_sk,  ss_customer_sk, ss_sold_date_sk
PREHOOK: type: CREATE_MATERIALIZED_VIEW
PREHOOK: Input: default@store_sales
PREHOOK: Output: database:default
PREHOOK: Output: default@mv_store_sales_item_customer
PREHOOK: Output: default@mv_store_sales_item_customer
POSTHOOK: query: CREATE MATERIALIZED VIEW mv_store_sales_item_customer PARTITIONED ON (ss_sold_date_sk)
AS
  select ss_item_sk, ss_store_sk, ss_customer_sk,  ss_sold_date_sk, count(*) cnt, sum(ss_quantity) as ss_quantity, sum(ss_ext_wholesale_cost) as ss_ext_wholesale_cost,sum(ss_net_paid) as ss_net_paid,sum(ss_net_profit) as ss_net_profit, sum(ss_ext_sales_price) as ss_ext_sales_price, sum(ss_coupon_amt) amt, sum(ss_sales_price) ss_sales_price, sum(ss_quantity*ss_sales_price) ssales
  from store_sales
  group by ss_store_sk, 
  ss_item_sk,  ss_customer_sk, ss_sold_date_sk
POSTHOOK: type: CREATE_MATERIALIZED_VIEW
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: database:default
POSTHOOK: Output: default@mv_store_sales_item_customer
Warning: Shuffle Join MERGEJOIN[153][tables = [$hdt$_2, $hdt$_3]] in Stage 'Reducer 4' is a cross product
Warning: Shuffle Join MERGEJOIN[154][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 5' is a cross product
PREHOOK: query: explain
select  asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing
from(select *
     from (select item_sk,rank() over (order by rank_col asc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col 
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V1)V11
     where rnk  < 11) asceding,
    (select *
     from (select item_sk,rank() over (order by rank_col desc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V2)V21
     where rnk  < 11) descending,
item i1,
item i2
where asceding.rnk = descending.rnk 
  and i1.i_item_sk=asceding.item_sk
  and i2.i_item_sk=descending.item_sk
order by asceding.rnk
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing
from(select *
     from (select item_sk,rank() over (order by rank_col asc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col 
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V1)V11
     where rnk  < 11) asceding,
    (select *
     from (select item_sk,rank() over (order by rank_col desc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V2)V21
     where rnk  < 11) descending,
item i1,
item i2
where asceding.rnk = descending.rnk 
  and i1.i_item_sk=asceding.item_sk
  and i2.i_item_sk=descending.item_sk
order by asceding.rnk
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 5 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 13 (CUSTOM_SIMPLE_EDGE), Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 11 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 16 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 16 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 10 vectorized
      File Output Operator [FS_204]
        Limit [LIM_203] (rows=100 width=218)
          Number of rows:100
          Select Operator [SEL_202] (rows=6951 width=218)
            Output:["_col0","_col1","_col2"]
          <-Reducer 9 [SIMPLE_EDGE]
            SHUFFLE [RS_106]
              Select Operator [SEL_105] (rows=6951 width=218)
                Output:["_col0","_col1","_col2"]
                Merge Join Operator [MERGEJOIN_159] (rows=6951 width=218)
                  Conds:RS_102._col2=RS_201._col0(Inner),Output:["_col1","_col5","_col7"]
                <-Map 16 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_201]
                    PartitionCols:_col0
                    Select Operator [SEL_199] (rows=462000 width=111)
                      Output:["_col0","_col1"]
                      TableScan [TS_92] (rows=462000 width=111)
                        default@item,i1,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_product_name"]
                <-Reducer 8 [SIMPLE_EDGE]
                  SHUFFLE [RS_102]
                    PartitionCols:_col2
                    Merge Join Operator [MERGEJOIN_158] (rows=6951 width=115)
                      Conds:RS_99._col0=RS_200._col0(Inner),Output:["_col1","_col2","_col5"]
                    <-Map 16 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_200]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_199]
                    <-Reducer 7 [SIMPLE_EDGE]
                      SHUFFLE [RS_99]
                        PartitionCols:_col0
                        Merge Join Operator [MERGEJOIN_157] (rows=6951 width=12)
                          Conds:RS_193._col1=RS_198._col1(Inner),Output:["_col0","_col1","_col2"]
                        <-Reducer 11 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_198]
                            PartitionCols:_col1
                            Select Operator [SEL_197] (rows=6951 width=8)
                              Output:["_col0","_col1"]
                              Filter Operator [FIL_196] (rows=6951 width=116)
                                predicate:(rank_window_0 < 11)
                                PTF Operator [PTF_195] (rows=20854 width=116)
                                  Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 DESC NULLS LAST","partition by:":"0"}]
                                  Select Operator [SEL_194] (rows=20854 width=116)
                                    Output:["_col2","_col3"]
                                  <-Reducer 5 [SIMPLE_EDGE]
                                    SHUFFLE [RS_85]
                                      PartitionCols:0
                                      Filter Operator [FIL_38] (rows=20854 width=228)
                                        predicate:(_col3 > _col1)
                                        Merge Join Operator [MERGEJOIN_154] (rows=62562 width=228)
                                          Conds:(Inner),Output:["_col1","_col2","_col3"]
                                        <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_188]
                                            Select Operator [SEL_187] (rows=62562 width=116)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_186] (rows=62562 width=124)
                                                predicate:(_col1 is not null and _col2 is not null)
                                                Group By Operator [GBY_185] (rows=62562 width=124)
                                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                                                <-Map 14 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_184]
                                                    PartitionCols:_col0
                                                    Group By Operator [GBY_183] (rows=3199976 width=124)
                                                      Output:["_col0","_col1","_col2"],aggregations:["sum(ss_net_profit)","count(ss_net_profit)"],keys:ss_item_sk
                                                      Select Operator [SEL_182] (rows=6399952 width=114)
                                                        Output:["ss_item_sk","ss_net_profit"]
                                                        Filter Operator [FIL_181] (rows=6399952 width=114)
                                                          predicate:(ss_store_sk = 410)
                                                          TableScan [TS_24] (rows=575995635 width=114)
                                                            default@store_sales,ss1,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk","ss_store_sk","ss_net_profit"]
                                        <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
                                          PARTITION_ONLY_SHUFFLE [RS_35]
                                            Merge Join Operator [MERGEJOIN_153] (rows=1 width=112)
                                              Conds:(Inner),Output:["_col1"]
                                            <-Reducer 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_180]
                                                Select Operator [SEL_179] (rows=1 width=112)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_178] (rows=1 width=120)
                                                    predicate:(_col1 is not null and _col2 is not null)
                                                    Select Operator [SEL_177] (rows=1 width=120)
                                                      Output:["_col1","_col2"]
                                                      Group By Operator [GBY_176] (rows=1 width=124)
                                                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                                                      <-Map 12 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_175]
                                                          PartitionCols:_col0
                                                          Group By Operator [GBY_174] (rows=258 width=124)
                                                            Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","count(_col1)"],keys:true
                                                            Select Operator [SEL_173] (rows=287946 width=114)
                                                              Output:["_col1"]
                                                              Filter Operator [FIL_172] (rows=287946 width=114)
                                                                predicate:(ss_hdemo_sk is null and (ss_store_sk = 410))
                                                                TableScan [TS_15] (rows=575995635 width=114)
                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_hdemo_sk","ss_store_sk","ss_net_profit"]
                                            <-Reducer 3 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_171]
                                                Select Operator [SEL_170] (rows=1 width=8)
                                                  Filter Operator [FIL_169] (rows=1 width=8)
                                                    predicate:(sq_count_check(_col0) <= 1)
                                                    Group By Operator [GBY_168] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                    <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_167]
                                                        Group By Operator [GBY_166] (rows=1 width=8)
                                                          Output:["_col0"],aggregations:["count()"]
                                                          Select Operator [SEL_165] (rows=1 width=4)
                                                            Group By Operator [GBY_164] (rows=1 width=4)
                                                              Output:["_col0"],keys:KEY._col0
                                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_163]
                                                                PartitionCols:_col0
                                                                Group By Operator [GBY_162] (rows=18 width=4)
                                                                  Output:["_col0"],keys:true
                                                                  Select Operator [SEL_161] (rows=287946 width=7)
                                                                    Filter Operator [FIL_160] (rows=287946 width=7)
                                                                      predicate:(ss_hdemo_sk is null and (ss_store_sk = 410))
                                                                      TableScan [TS_0] (rows=575995635 width=7)
                                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_hdemo_sk","ss_store_sk"]
                        <-Reducer 6 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_193]
                            PartitionCols:_col1
                            Select Operator [SEL_192] (rows=6951 width=8)
                              Output:["_col0","_col1"]
                              Filter Operator [FIL_191] (rows=6951 width=116)
                                predicate:(rank_window_0 < 11)
                                PTF Operator [PTF_190] (rows=20854 width=116)
                                  Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 ASC NULLS LAST","partition by:":"0"}]
                                  Select Operator [SEL_189] (rows=20854 width=116)
                                    Output:["_col2","_col3"]
                                  <-Reducer 5 [SIMPLE_EDGE]
                                    SHUFFLE [RS_39]
                                      PartitionCols:0
                                       Please refer to the previous Filter Operator [FIL_38]

