PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 20 <- Reducer 23 (BROADCAST_EDGE)
Map 34 <- Reducer 25 (BROADCAST_EDGE)
Map 35 <- Reducer 27 (BROADCAST_EDGE)
Map 36 <- Reducer 29 (BROADCAST_EDGE)
Map 37 <- Reducer 31 (BROADCAST_EDGE)
Map 38 <- Reducer 33 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 12 <- Map 1 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 16 <- Map 1 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Map 1 (SIMPLE_EDGE), Reducer 32 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 21 <- Map 20 (SIMPLE_EDGE), Map 22 (SIMPLE_EDGE)
Reducer 23 <- Map 22 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 22 (SIMPLE_EDGE), Map 34 (SIMPLE_EDGE)
Reducer 25 <- Map 22 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Map 22 (SIMPLE_EDGE), Map 35 (SIMPLE_EDGE)
Reducer 27 <- Map 22 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 22 (SIMPLE_EDGE), Map 36 (SIMPLE_EDGE)
Reducer 29 <- Map 22 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 22 (SIMPLE_EDGE), Map 37 (SIMPLE_EDGE)
Reducer 31 <- Map 22 (CUSTOM_SIMPLE_EDGE)
Reducer 32 <- Map 22 (SIMPLE_EDGE), Map 38 (SIMPLE_EDGE)
Reducer 33 <- Map 22 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 1 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 11 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 1 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_566]
        Limit [LIM_565] (rows=100 width=85)
          Number of rows:100
          Select Operator [SEL_564] (rows=7323197 width=85)
            Output:["_col0"]
          <-Reducer 4 [SIMPLE_EDGE]
            SHUFFLE [RS_144]
              Select Operator [SEL_143] (rows=7323197 width=85)
                Output:["_col0"]
                Top N Key Operator [TNK_259] (rows=7323197 width=537)
                  keys:_col1,top n:100
                  Filter Operator [FIL_142] (rows=7323197 width=537)
                    predicate:CASE WHEN (_col11 is not null) THEN (CASE WHEN (_col14) THEN (((_col6 / _col13) > (_col2 / _col11))) ELSE (false) END) ELSE (false) END
                    Merge Join Operator [MERGEJOIN_470] (rows=14646395 width=537)
                      Conds:RS_517._col0=RS_140._col7(Inner),Output:["_col1","_col2","_col6","_col11","_col13","_col14"]
                    <-Reducer 3 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_517]
                        PartitionCols:_col0
                        Select Operator [SEL_516] (rows=80000000 width=297)
                          Output:["_col0","_col1","_col2"]
                          Group By Operator [GBY_515] (rows=80000000 width=764)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                          <-Reducer 2 [SIMPLE_EDGE]
                            SHUFFLE [RS_17]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                              Group By Operator [GBY_16] (rows=80000000 width=764)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col10)"],keys:_col1, _col2, _col3, _col4, _col5, _col6, _col7
                                Merge Join Operator [MERGEJOIN_455] (rows=187573258 width=764)
                                  Conds:RS_472._col0=RS_13._col1(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col10"]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_472]
                                    PartitionCols:_col0
                                    Select Operator [SEL_471] (rows=80000000 width=656)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                      TableScan [TS_0] (rows=80000000 width=656)
                                        default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name","c_preferred_cust_flag","c_birth_country","c_login","c_email_address"]
                                <-Reducer 21 [SIMPLE_EDGE]
                                  SHUFFLE [RS_13]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_454] (rows=187573258 width=115)
                                      Conds:RS_514._col0=RS_486._col0(Inner),Output:["_col1","_col2"]
                                    <-Map 22 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_486]
                                        PartitionCols:_col0
                                        Select Operator [SEL_482] (rows=652 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_478] (rows=652 width=8)
                                            predicate:(d_year = 2002)
                                            TableScan [TS_5] (rows=73049 width=8)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                    <-Map 20 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_514]
                                        PartitionCols:_col0
                                        Select Operator [SEL_513] (rows=525327388 width=119)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_512] (rows=525327388 width=435)
                                            predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_9_date_dim_d_date_sk_min) AND DynamicValue(RS_9_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_9_date_dim_d_date_sk_bloom_filter)))
                                            TableScan [TS_2] (rows=575995635 width=435)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                                            <-Reducer 23 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_511]
                                                Group By Operator [GBY_510] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 22 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_504]
                                                    Group By Operator [GBY_498] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_487] (rows=652 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_482]
                    <-Reducer 8 [SIMPLE_EDGE]
                      SHUFFLE [RS_140]
                        PartitionCols:_col7
                        Select Operator [SEL_138] (rows=12248093 width=668)
                          Output:["_col3","_col7","_col8","_col10","_col11"]
                          Filter Operator [FIL_137] (rows=12248093 width=668)
                            predicate:CASE WHEN (_col6) THEN (CASE WHEN (_col11) THEN (((_col3 / _col10) > (_col1 / _col5))) ELSE (false) END) ELSE (false) END
                            Merge Join Operator [MERGEJOIN_469] (rows=24496187 width=668)
                              Conds:RS_525._col0=RS_135._col5(Inner),Output:["_col1","_col3","_col5","_col6","_col7","_col8","_col10","_col11"]
                            <-Reducer 11 [SIMPLE_EDGE]
                              SHUFFLE [RS_135]
                                PartitionCols:_col5
                                Merge Join Operator [MERGEJOIN_468] (rows=20485012 width=556)
                                  Conds:RS_533._col0=RS_131._col3(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col8","_col9"]
                                <-Reducer 10 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_533]
                                    PartitionCols:_col0
                                    Select Operator [SEL_532] (rows=80000000 width=212)
                                      Output:["_col0","_col1"]
                                      Group By Operator [GBY_531] (rows=80000000 width=764)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                      <-Reducer 9 [SIMPLE_EDGE]
                                        SHUFFLE [RS_57]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                          Group By Operator [GBY_56] (rows=80000000 width=764)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col10)"],keys:_col1, _col2, _col3, _col4, _col5, _col6, _col7
                                            Merge Join Operator [MERGEJOIN_459] (rows=101084444 width=764)
                                              Conds:RS_474._col0=RS_53._col1(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col10"]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_474]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_471]
                                            <-Reducer 26 [SIMPLE_EDGE]
                                              SHUFFLE [RS_53]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_458] (rows=101084444 width=115)
                                                  Conds:RS_530._col0=RS_490._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 22 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_490]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_482]
                                                <-Map 35 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_530]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_529] (rows=285117831 width=119)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_528] (rows=285117831 width=453)
                                                        predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_49_date_dim_d_date_sk_min) AND DynamicValue(RS_49_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_49_date_dim_d_date_sk_bloom_filter)))
                                                        TableScan [TS_42] (rows=287989836 width=453)
                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                                                        <-Reducer 27 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_527]
                                                            Group By Operator [GBY_526] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 22 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_506]
                                                                Group By Operator [GBY_500] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_491] (rows=652 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_482]
                                <-Reducer 15 [SIMPLE_EDGE]
                                  SHUFFLE [RS_131]
                                    PartitionCols:_col3
                                    Merge Join Operator [MERGEJOIN_467] (rows=17130654 width=444)
                                      Conds:RS_126._col3=RS_563._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col6","_col7"]
                                    <-Reducer 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_126]
                                        PartitionCols:_col3
                                        Merge Join Operator [MERGEJOIN_466] (rows=17130654 width=328)
                                          Conds:RS_543._col0=RS_553._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                        <-Reducer 13 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_543]
                                            PartitionCols:_col0
                                            Select Operator [SEL_542] (rows=17130654 width=216)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_541] (rows=17130654 width=212)
                                                predicate:(_col7 > 0)
                                                Select Operator [SEL_540] (rows=51391963 width=212)
                                                  Output:["_col0","_col7"]
                                                  Group By Operator [GBY_539] (rows=51391963 width=764)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                                  <-Reducer 12 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_77]
                                                      PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                                      Group By Operator [GBY_76] (rows=51391963 width=764)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col10)"],keys:_col1, _col2, _col3, _col4, _col5, _col6, _col7
                                                        Merge Join Operator [MERGEJOIN_461] (rows=51391963 width=764)
                                                          Conds:RS_475._col0=RS_73._col1(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col10"]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_475]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_471]
                                                        <-Reducer 28 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_73]
                                                            PartitionCols:_col1
                                                            Merge Join Operator [MERGEJOIN_460] (rows=51391963 width=115)
                                                              Conds:RS_538._col0=RS_492._col0(Inner),Output:["_col1","_col2"]
                                                            <-Map 22 [SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_492]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_483] (rows=652 width=4)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_479] (rows=652 width=8)
                                                                    predicate:(d_year = 2001)
                                                                     Please refer to the previous TableScan [TS_5]
                                                            <-Map 36 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_538]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_537] (rows=143930993 width=119)
                                                                  Output:["_col0","_col1","_col2"]
                                                                  Filter Operator [FIL_536] (rows=143930993 width=455)
                                                                    predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_69_date_dim_d_date_sk_min) AND DynamicValue(RS_69_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_69_date_dim_d_date_sk_bloom_filter)))
                                                                    TableScan [TS_62] (rows=144002668 width=455)
                                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                                                                    <-Reducer 29 [BROADCAST_EDGE] vectorized
                                                                      BROADCAST [RS_535]
                                                                        Group By Operator [GBY_534] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                        <-Map 22 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                          PARTITION_ONLY_SHUFFLE [RS_507]
                                                                            Group By Operator [GBY_501] (rows=1 width=12)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                              Select Operator [SEL_493] (rows=652 width=4)
                                                                                Output:["_col0"]
                                                                                 Please refer to the previous Select Operator [SEL_483]
                                        <-Reducer 17 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_553]
                                            PartitionCols:_col0
                                            Select Operator [SEL_552] (rows=26666666 width=212)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_551] (rows=26666666 width=212)
                                                predicate:(_col7 > 0)
                                                Select Operator [SEL_550] (rows=80000000 width=212)
                                                  Output:["_col0","_col7"]
                                                  Group By Operator [GBY_549] (rows=80000000 width=764)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                                  <-Reducer 16 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_98]
                                                      PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                                      Group By Operator [GBY_97] (rows=80000000 width=764)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col10)"],keys:_col1, _col2, _col3, _col4, _col5, _col6, _col7
                                                        Merge Join Operator [MERGEJOIN_463] (rows=187573258 width=764)
                                                          Conds:RS_476._col0=RS_94._col1(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col10"]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_476]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_471]
                                                        <-Reducer 30 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_94]
                                                            PartitionCols:_col1
                                                            Merge Join Operator [MERGEJOIN_462] (rows=187573258 width=115)
                                                              Conds:RS_548._col0=RS_494._col0(Inner),Output:["_col1","_col2"]
                                                            <-Map 22 [SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_494]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_484] (rows=652 width=4)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_480] (rows=652 width=8)
                                                                    predicate:(d_year = 2001)
                                                                     Please refer to the previous TableScan [TS_5]
                                                            <-Map 37 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_548]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_547] (rows=525327388 width=119)
                                                                  Output:["_col0","_col1","_col2"]
                                                                  Filter Operator [FIL_546] (rows=525327388 width=435)
                                                                    predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_90_date_dim_d_date_sk_min) AND DynamicValue(RS_90_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_90_date_dim_d_date_sk_bloom_filter)))
                                                                    TableScan [TS_83] (rows=575995635 width=435)
                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                                                                    <-Reducer 31 [BROADCAST_EDGE] vectorized
                                                                      BROADCAST [RS_545]
                                                                        Group By Operator [GBY_544] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                        <-Map 22 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                          PARTITION_ONLY_SHUFFLE [RS_508]
                                                                            Group By Operator [GBY_502] (rows=1 width=12)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                              Select Operator [SEL_495] (rows=652 width=4)
                                                                                Output:["_col0"]
                                                                                 Please refer to the previous Select Operator [SEL_484]
                                    <-Reducer 19 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_563]
                                        PartitionCols:_col0
                                        Select Operator [SEL_562] (rows=26666666 width=216)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_561] (rows=26666666 width=212)
                                            predicate:(_col7 > 0)
                                            Select Operator [SEL_560] (rows=80000000 width=212)
                                              Output:["_col0","_col7"]
                                              Group By Operator [GBY_559] (rows=80000000 width=764)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                              <-Reducer 18 [SIMPLE_EDGE]
                                                SHUFFLE [RS_119]
                                                  PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                                  Group By Operator [GBY_118] (rows=80000000 width=764)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col10)"],keys:_col1, _col2, _col3, _col4, _col5, _col6, _col7
                                                    Merge Join Operator [MERGEJOIN_465] (rows=101084444 width=764)
                                                      Conds:RS_477._col0=RS_115._col1(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col10"]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_477]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_471]
                                                    <-Reducer 32 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_115]
                                                        PartitionCols:_col1
                                                        Merge Join Operator [MERGEJOIN_464] (rows=101084444 width=115)
                                                          Conds:RS_558._col0=RS_496._col0(Inner),Output:["_col1","_col2"]
                                                        <-Map 22 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_496]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_485] (rows=652 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_481] (rows=652 width=8)
                                                                predicate:(d_year = 2001)
                                                                 Please refer to the previous TableScan [TS_5]
                                                        <-Map 38 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_558]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_557] (rows=285117831 width=119)
                                                              Output:["_col0","_col1","_col2"]
                                                              Filter Operator [FIL_556] (rows=285117831 width=453)
                                                                predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_111_date_dim_d_date_sk_min) AND DynamicValue(RS_111_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_111_date_dim_d_date_sk_bloom_filter)))
                                                                TableScan [TS_104] (rows=287989836 width=453)
                                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                                                                <-Reducer 33 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_555]
                                                                    Group By Operator [GBY_554] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 22 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_509]
                                                                        Group By Operator [GBY_503] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_497] (rows=652 width=4)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_485]
                            <-Reducer 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_525]
                                PartitionCols:_col0
                                Select Operator [SEL_524] (rows=51391963 width=212)
                                  Output:["_col0","_col1"]
                                  Group By Operator [GBY_523] (rows=51391963 width=764)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                  <-Reducer 6 [SIMPLE_EDGE]
                                    SHUFFLE [RS_37]
                                      PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                      Group By Operator [GBY_36] (rows=51391963 width=764)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col10)"],keys:_col1, _col2, _col3, _col4, _col5, _col6, _col7
                                        Merge Join Operator [MERGEJOIN_457] (rows=51391963 width=764)
                                          Conds:RS_473._col0=RS_33._col1(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col10"]
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_473]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_471]
                                        <-Reducer 24 [SIMPLE_EDGE]
                                          SHUFFLE [RS_33]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_456] (rows=51391963 width=115)
                                              Conds:RS_522._col0=RS_488._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 22 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_488]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_482]
                                            <-Map 34 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_522]
                                                PartitionCols:_col0
                                                Select Operator [SEL_521] (rows=143930993 width=119)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_520] (rows=143930993 width=455)
                                                    predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_29_date_dim_d_date_sk_min) AND DynamicValue(RS_29_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_29_date_dim_d_date_sk_bloom_filter)))
                                                    TableScan [TS_22] (rows=144002668 width=455)
                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                                                    <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_519]
                                                        Group By Operator [GBY_518] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 22 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_505]
                                                            Group By Operator [GBY_499] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_489] (rows=652 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_482]

