PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select
                  t_s_secyear.customer_id
                 ,t_s_secyear.customer_first_name
                 ,t_s_secyear.customer_last_name
                 ,t_s_secyear.customer_birth_country
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  1999
   and t_s_secyear.dyear = 1999+1
   and t_c_firstyear.dyear =  1999
   and t_c_secyear.dyear =  1999+1
   and t_w_firstyear.dyear = 1999
   and t_w_secyear.dyear = 1999+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_id
         ,t_s_secyear.customer_first_name
         ,t_s_secyear.customer_last_name
         ,t_s_secyear.customer_birth_country
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select
                  t_s_secyear.customer_id
                 ,t_s_secyear.customer_first_name
                 ,t_s_secyear.customer_last_name
                 ,t_s_secyear.customer_birth_country
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  1999
   and t_s_secyear.dyear = 1999+1
   and t_c_firstyear.dyear =  1999
   and t_c_secyear.dyear =  1999+1
   and t_w_firstyear.dyear = 1999
   and t_w_secyear.dyear = 1999+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_id
         ,t_s_secyear.customer_first_name
         ,t_s_secyear.customer_last_name
         ,t_s_secyear.customer_birth_country
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 30 (BROADCAST_EDGE)
Map 12 <- Reducer 31 (BROADCAST_EDGE)
Map 16 <- Reducer 32 (BROADCAST_EDGE)
Map 20 <- Reducer 33 (BROADCAST_EDGE)
Map 24 <- Reducer 29 (BROADCAST_EDGE)
Map 39 <- Reducer 37 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 14 <- Map 38 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 17 <- Map 16 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 18 <- Map 38 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 21 <- Map 20 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 22 <- Map 38 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (SIMPLE_EDGE)
Reducer 25 <- Map 24 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 26 <- Map 38 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (SIMPLE_EDGE)
Reducer 29 <- Map 28 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 11 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 28 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Map 28 (CUSTOM_SIMPLE_EDGE)
Reducer 32 <- Map 28 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 28 (CUSTOM_SIMPLE_EDGE)
Reducer 34 <- Map 28 (SIMPLE_EDGE), Map 39 (SIMPLE_EDGE)
Reducer 35 <- Map 38 (SIMPLE_EDGE), Reducer 34 (SIMPLE_EDGE)
Reducer 36 <- Reducer 35 (SIMPLE_EDGE)
Reducer 37 <- Map 28 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 15 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 19 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 23 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 27 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 36 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 10 vectorized
      File Output Operator [FS_556]
        Limit [LIM_555] (rows=100 width=372)
          Number of rows:100
          Select Operator [SEL_554] (rows=6666666 width=372)
            Output:["_col0","_col1","_col2","_col3"]
          <-Reducer 9 [SIMPLE_EDGE]
            SHUFFLE [RS_135]
              Select Operator [SEL_134] (rows=6666666 width=372)
                Output:["_col0","_col1","_col2","_col3"]
                Top N Key Operator [TNK_247] (rows=6666666 width=828)
                  keys:_col0, _col1, _col2, _col3,top n:100
                  Filter Operator [FIL_133] (rows=6666666 width=828)
                    predicate:CASE WHEN (_col16) THEN (CASE WHEN (_col11) THEN (((_col8 / _col10) > (_col13 / _col15))) ELSE (false) END) ELSE (false) END
                    Merge Join Operator [MERGEJOIN_464] (rows=13333333 width=828)
                      Conds:RS_130._col0=RS_553._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col8","_col10","_col11","_col13","_col15","_col16"]
                    <-Reducer 36 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_553]
                        PartitionCols:_col0
                        Select Operator [SEL_552] (rows=14325562 width=216)
                          Output:["_col0","_col1","_col2"]
                          Filter Operator [FIL_551] (rows=14325562 width=212)
                            predicate:(_col1 > 0)
                            Group By Operator [GBY_550] (rows=42976686 width=212)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 35 [SIMPLE_EDGE]
                              SHUFFLE [RS_113]
                                PartitionCols:_col0
                                Group By Operator [GBY_112] (rows=51391963 width=212)
                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                  Merge Join Operator [MERGEJOIN_459] (rows=51391963 width=212)
                                    Conds:RS_108._col1=RS_518._col0(Inner),Output:["_col2","_col5"]
                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_518]
                                      PartitionCols:_col0
                                      Select Operator [SEL_513] (rows=80000000 width=104)
                                        Output:["_col0","_col1"]
                                        TableScan [TS_84] (rows=80000000 width=104)
                                          default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id"]
                                  <-Reducer 34 [SIMPLE_EDGE]
                                    SHUFFLE [RS_108]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_458] (rows=51391963 width=115)
                                        Conds:RS_549._col0=RS_485._col0(Inner),Output:["_col1","_col2"]
                                      <-Map 28 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_485]
                                          PartitionCols:_col0
                                          Select Operator [SEL_474] (rows=652 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_469] (rows=652 width=8)
                                              predicate:(d_year = 1999)
                                              TableScan [TS_81] (rows=73049 width=8)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                      <-Map 39 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_549]
                                          PartitionCols:_col0
                                          Select Operator [SEL_548] (rows=143930993 width=119)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_547] (rows=143930993 width=455)
                                              predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_106_date_dim_d_date_sk_min) AND DynamicValue(RS_106_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_106_date_dim_d_date_sk_bloom_filter)))
                                              TableScan [TS_97] (rows=144002668 width=455)
                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                                              <-Reducer 37 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_546]
                                                  Group By Operator [GBY_545] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_498]
                                                      Group By Operator [GBY_492] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_486] (rows=652 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_474]
                    <-Reducer 8 [SIMPLE_EDGE]
                      SHUFFLE [RS_130]
                        PartitionCols:_col0
                        Merge Join Operator [MERGEJOIN_463] (rows=13333333 width=712)
                          Conds:RS_127._col0=RS_544._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col8","_col10","_col11","_col13"]
                        <-Reducer 27 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_544]
                            PartitionCols:_col0
                            Group By Operator [GBY_543] (rows=42976686 width=212)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 26 [SIMPLE_EDGE]
                              SHUFFLE [RS_94]
                                PartitionCols:_col0
                                Group By Operator [GBY_93] (rows=51391963 width=212)
                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                  Merge Join Operator [MERGEJOIN_457] (rows=51391963 width=212)
                                    Conds:RS_89._col1=RS_514._col0(Inner),Output:["_col2","_col5"]
                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_514]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_513]
                                  <-Reducer 25 [SIMPLE_EDGE]
                                    SHUFFLE [RS_89]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_456] (rows=51391963 width=115)
                                        Conds:RS_542._col0=RS_475._col0(Inner),Output:["_col1","_col2"]
                                      <-Map 28 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_475]
                                          PartitionCols:_col0
                                          Select Operator [SEL_470] (rows=652 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_465] (rows=652 width=8)
                                              predicate:(d_year = 2000)
                                               Please refer to the previous TableScan [TS_81]
                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_542]
                                          PartitionCols:_col0
                                          Select Operator [SEL_541] (rows=143930993 width=119)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_540] (rows=143930993 width=455)
                                              predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_87_date_dim_d_date_sk_min) AND DynamicValue(RS_87_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_87_date_dim_d_date_sk_bloom_filter)))
                                              TableScan [TS_78] (rows=144002668 width=455)
                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                                              <-Reducer 29 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_539]
                                                  Group By Operator [GBY_538] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_493]
                                                      Group By Operator [GBY_487] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_476] (rows=652 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_470]
                        <-Reducer 7 [SIMPLE_EDGE]
                          SHUFFLE [RS_127]
                            PartitionCols:_col0
                            Filter Operator [FIL_126] (rows=13333333 width=824)
                              predicate:CASE WHEN (_col6 is not null) THEN (CASE WHEN (_col11) THEN (((_col8 / _col10) > (_col4 / _col6))) ELSE (false) END) ELSE (false) END
                              Merge Join Operator [MERGEJOIN_462] (rows=26666666 width=824)
                                Conds:RS_123._col0=RS_537._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col6","_col8","_col10","_col11"]
                              <-Reducer 23 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_537]
                                  PartitionCols:_col0
                                  Select Operator [SEL_536] (rows=22300081 width=216)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_535] (rows=22300081 width=212)
                                      predicate:(_col1 > 0)
                                      Group By Operator [GBY_534] (rows=66900244 width=212)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                      <-Reducer 22 [SIMPLE_EDGE]
                                        SHUFFLE [RS_74]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_73] (rows=80000000 width=212)
                                            Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                            Merge Join Operator [MERGEJOIN_455] (rows=101084444 width=212)
                                              Conds:RS_69._col1=RS_517._col0(Inner),Output:["_col2","_col5"]
                                            <-Map 38 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_517]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_513]
                                            <-Reducer 21 [SIMPLE_EDGE]
                                              SHUFFLE [RS_69]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_454] (rows=101084444 width=115)
                                                  Conds:RS_533._col0=RS_483._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 28 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_483]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_473] (rows=652 width=4)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_468] (rows=652 width=8)
                                                        predicate:(d_year = 1999)
                                                         Please refer to the previous TableScan [TS_81]
                                                <-Map 20 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_533]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_532] (rows=285117831 width=119)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_531] (rows=285117831 width=453)
                                                        predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_67_date_dim_d_date_sk_min) AND DynamicValue(RS_67_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_67_date_dim_d_date_sk_bloom_filter)))
                                                        TableScan [TS_58] (rows=287989836 width=453)
                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                                                        <-Reducer 33 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_530]
                                                            Group By Operator [GBY_529] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_497]
                                                                Group By Operator [GBY_491] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_484] (rows=652 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_473]
                              <-Reducer 6 [SIMPLE_EDGE]
                                SHUFFLE [RS_123]
                                  PartitionCols:_col0
                                  Merge Join Operator [MERGEJOIN_461] (rows=26666666 width=708)
                                    Conds:RS_120._col0=RS_528._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col6","_col8"]
                                  <-Reducer 19 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_528]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_527] (rows=66900244 width=212)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                      <-Reducer 18 [SIMPLE_EDGE]
                                        SHUFFLE [RS_55]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_54] (rows=80000000 width=212)
                                            Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                            Merge Join Operator [MERGEJOIN_453] (rows=101084444 width=212)
                                              Conds:RS_50._col1=RS_516._col0(Inner),Output:["_col2","_col5"]
                                            <-Map 38 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_516]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_513]
                                            <-Reducer 17 [SIMPLE_EDGE]
                                              SHUFFLE [RS_50]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_452] (rows=101084444 width=115)
                                                  Conds:RS_526._col0=RS_481._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 28 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_481]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_472] (rows=652 width=4)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_467] (rows=652 width=8)
                                                        predicate:(d_year = 2000)
                                                         Please refer to the previous TableScan [TS_81]
                                                <-Map 16 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_526]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_525] (rows=285117831 width=119)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_524] (rows=285117831 width=453)
                                                        predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_48_date_dim_d_date_sk_min) AND DynamicValue(RS_48_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_48_date_dim_d_date_sk_bloom_filter)))
                                                        TableScan [TS_39] (rows=287989836 width=453)
                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                                                        <-Reducer 32 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_523]
                                                            Group By Operator [GBY_522] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_496]
                                                                Group By Operator [GBY_490] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_482] (rows=652 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_472]
                                  <-Reducer 5 [SIMPLE_EDGE]
                                    SHUFFLE [RS_120]
                                      PartitionCols:_col0
                                      Merge Join Operator [MERGEJOIN_460] (rows=26666666 width=596)
                                        Conds:RS_507._col0=RS_521._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col6"]
                                      <-Reducer 15 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_521]
                                          PartitionCols:_col0
                                          Filter Operator [FIL_520] (rows=22300081 width=212)
                                            predicate:(_col1 > 0)
                                            Group By Operator [GBY_519] (rows=66900244 width=212)
                                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                            <-Reducer 14 [SIMPLE_EDGE]
                                              SHUFFLE [RS_35]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_34] (rows=80000000 width=212)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                                  Merge Join Operator [MERGEJOIN_451] (rows=187573258 width=212)
                                                    Conds:RS_30._col1=RS_515._col0(Inner),Output:["_col2","_col5"]
                                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_515]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_513]
                                                  <-Reducer 13 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_30]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_450] (rows=187573258 width=115)
                                                        Conds:RS_512._col0=RS_479._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 28 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_479]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_471] (rows=652 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_466] (rows=652 width=8)
                                                              predicate:(d_year = 1999)
                                                               Please refer to the previous TableScan [TS_81]
                                                      <-Map 12 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_512]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_511] (rows=525327388 width=119)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_510] (rows=525327388 width=435)
                                                              predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_28_date_dim_d_date_sk_min) AND DynamicValue(RS_28_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_28_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_19] (rows=575995635 width=435)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                                                              <-Reducer 31 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_509]
                                                                  Group By Operator [GBY_508] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_495]
                                                                      Group By Operator [GBY_489] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_480] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_471]
                                      <-Reducer 4 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_507]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_506] (rows=80000000 width=484)
                                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                          <-Reducer 3 [SIMPLE_EDGE]
                                            SHUFFLE [RS_16]
                                              PartitionCols:_col0, _col1, _col2, _col3
                                              Group By Operator [GBY_15] (rows=80000000 width=484)
                                                Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col9
                                                Merge Join Operator [MERGEJOIN_449] (rows=187573258 width=484)
                                                  Conds:RS_11._col1=RS_505._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col9"]
                                                <-Map 11 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_505]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_504] (rows=80000000 width=376)
                                                      Output:["_col0","_col1","_col2","_col3","_col5"]
                                                      TableScan [TS_6] (rows=80000000 width=376)
                                                        default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name","c_birth_country"]
                                                <-Reducer 2 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_11]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_448] (rows=187573258 width=115)
                                                      Conds:RS_503._col0=RS_477._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 28 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_477]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_470]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_503]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_502] (rows=525327388 width=119)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_501] (rows=525327388 width=435)
                                                            predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_9_date_dim_d_date_sk_min) AND DynamicValue(RS_9_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_9_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_0] (rows=575995635 width=435)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                                                            <-Reducer 30 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_500]
                                                                Group By Operator [GBY_499] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_494]
                                                                    Group By Operator [GBY_488] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_478] (rows=652 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_470]

