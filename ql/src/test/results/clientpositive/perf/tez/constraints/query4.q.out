PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select
                  t_s_secyear.customer_id
                 ,t_s_secyear.customer_first_name
                 ,t_s_secyear.customer_last_name
                 ,t_s_secyear.customer_birth_country
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  1999
   and t_s_secyear.dyear = 1999+1
   and t_c_firstyear.dyear =  1999
   and t_c_secyear.dyear =  1999+1
   and t_w_firstyear.dyear = 1999
   and t_w_secyear.dyear = 1999+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_id
         ,t_s_secyear.customer_first_name
         ,t_s_secyear.customer_last_name
         ,t_s_secyear.customer_birth_country
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select
                  t_s_secyear.customer_id
                 ,t_s_secyear.customer_first_name
                 ,t_s_secyear.customer_last_name
                 ,t_s_secyear.customer_birth_country
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  1999
   and t_s_secyear.dyear = 1999+1
   and t_c_firstyear.dyear =  1999
   and t_c_secyear.dyear =  1999+1
   and t_w_firstyear.dyear = 1999
   and t_w_secyear.dyear = 1999+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_id
         ,t_s_secyear.customer_first_name
         ,t_s_secyear.customer_last_name
         ,t_s_secyear.customer_birth_country
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 30 (BROADCAST_EDGE), Reducer 31 (BROADCAST_EDGE)
Map 15 <- Reducer 30 (BROADCAST_EDGE), Reducer 31 (BROADCAST_EDGE)
Map 22 <- Reducer 30 (BROADCAST_EDGE), Reducer 31 (BROADCAST_EDGE)
Reducer 10 <- Map 32 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Map 1 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 13 <- Map 32 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 17 <- Map 32 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Map 15 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 20 <- Map 32 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 23 <- Map 22 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 24 <- Map 32 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Map 22 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 27 <- Map 32 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)
Reducer 28 <- Reducer 27 (SIMPLE_EDGE)
Reducer 3 <- Map 32 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 14 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 18 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 21 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 25 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 28 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 11 vectorized
      File Output Operator [FS_618]
        Limit [LIM_617] (rows=100 width=372)
          Number of rows:100
          Select Operator [SEL_616] (rows=7972067 width=372)
            Output:["_col0","_col1","_col2","_col3"]
          <-Reducer 10 [SIMPLE_EDGE]
            SHUFFLE [RS_153]
              Select Operator [SEL_152] (rows=7972067 width=372)
                Output:["_col0","_col1","_col2","_col3"]
                Top N Key Operator [TNK_285] (rows=7972067 width=372)
                  keys:_col0, _col2, _col3, _col4,top n:100
                  Merge Join Operator [MERGEJOIN_528] (rows=7972067 width=372)
                    Conds:RS_149._col0=RS_577._col0(Inner),Output:["_col0","_col2","_col3","_col4"]
                  <-Map 32 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_577]
                      PartitionCols:_col0
                      Select Operator [SEL_570] (rows=80000000 width=372)
                        Output:["_col0","_col1","_col2","_col3"]
                        TableScan [TS_94] (rows=80000000 width=104)
                          default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_birth_country","c_first_name","c_last_name"]
                  <-Reducer 9 [SIMPLE_EDGE]
                    SHUFFLE [RS_149]
                      PartitionCols:_col0
                      Select Operator [SEL_146] (rows=6666666 width=100)
                        Output:["_col0"]
                        Filter Operator [FIL_145] (rows=6666666 width=556)
                          predicate:CASE WHEN (_col14) THEN (CASE WHEN (_col9) THEN (((_col6 / _col8) > (_col11 / _col13))) ELSE (false) END) ELSE (false) END
                          Merge Join Operator [MERGEJOIN_527] (rows=13333333 width=556)
                            Conds:RS_142._col0=RS_615._col0(Inner),Output:["_col0","_col6","_col8","_col9","_col11","_col13","_col14"]
                          <-Reducer 28 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_615]
                              PartitionCols:_col0
                              Select Operator [SEL_614] (rows=14325562 width=216)
                                Output:["_col0","_col1","_col2"]
                                Filter Operator [FIL_613] (rows=14325562 width=212)
                                  predicate:(_col1 > 0)
                                  Group By Operator [GBY_612] (rows=42976686 width=212)
                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                  <-Reducer 27 [SIMPLE_EDGE]
                                    SHUFFLE [RS_125]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_124] (rows=51391963 width=212)
                                        Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                        Merge Join Operator [MERGEJOIN_522] (rows=51391963 width=212)
                                          Conds:RS_120._col1=RS_576._col0(Inner),Output:["_col2","_col5"]
                                        <-Map 32 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_576]
                                            PartitionCols:_col0
                                            Select Operator [SEL_569] (rows=80000000 width=104)
                                              Output:["_col0","_col1"]
                                               Please refer to the previous TableScan [TS_94]
                                        <-Reducer 26 [SIMPLE_EDGE]
                                          SHUFFLE [RS_120]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_521] (rows=51391963 width=115)
                                              Conds:RS_609._col0=RS_541._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 29 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_541]
                                                PartitionCols:_col0
                                                Select Operator [SEL_533] (rows=652 width=4)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_531] (rows=652 width=8)
                                                    predicate:(_col1 = 1999)
                                                    Select Operator [SEL_529] (rows=73049 width=8)
                                                      Output:["_col0","_col1"]
                                                      TableScan [TS_90] (rows=73049 width=8)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                            <-Map 22 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_609]
                                                PartitionCols:_col0
                                                Select Operator [SEL_607] (rows=143930993 width=119)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_605] (rows=143930993 width=455)
                                                    predicate:(_col0 is not null and _col1 is not null)
                                                    Select Operator [SEL_603] (rows=144002668 width=455)
                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                      Filter Operator [FIL_601] (rows=144002668 width=455)
                                                        predicate:(ws_sold_date_sk BETWEEN DynamicValue(RS_118_date_dim_d_date_sk_min) AND DynamicValue(RS_118_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_118_date_dim_d_date_sk_bloom_filter)))
                                                        TableScan [TS_86] (rows=144002668 width=455)
                                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                                                        <-Reducer 30 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_547]
                                                            Group By Operator [GBY_546] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_544]
                                                                Group By Operator [GBY_542] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_535] (rows=652 width=4)
                                                                    Output:["_col0"]
                                                                    Select Operator [SEL_532] (rows=652 width=4)
                                                                      Output:["_col0"]
                                                                      Filter Operator [FIL_530] (rows=652 width=8)
                                                                        predicate:(_col1 = 2000)
                                                                         Please refer to the previous Select Operator [SEL_529]
                                                        <-Reducer 31 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_553]
                                                            Group By Operator [GBY_550] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_545]
                                                                Group By Operator [GBY_543] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_539] (rows=652 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_533]
                          <-Reducer 8 [SIMPLE_EDGE]
                            SHUFFLE [RS_142]
                              PartitionCols:_col0
                              Merge Join Operator [MERGEJOIN_526] (rows=13333333 width=440)
                                Conds:RS_139._col0=RS_611._col0(Inner),Output:["_col0","_col6","_col8","_col9","_col11"]
                              <-Reducer 25 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_611]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_610] (rows=42976686 width=212)
                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                  <-Reducer 24 [SIMPLE_EDGE]
                                    SHUFFLE [RS_104]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_103] (rows=51391963 width=212)
                                        Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                        Merge Join Operator [MERGEJOIN_520] (rows=51391963 width=212)
                                          Conds:RS_99._col1=RS_571._col0(Inner),Output:["_col2","_col5"]
                                        <-Map 32 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_571]
                                            PartitionCols:_col0
                                            Select Operator [SEL_564] (rows=80000000 width=104)
                                              Output:["_col0","_col1"]
                                               Please refer to the previous TableScan [TS_94]
                                        <-Reducer 23 [SIMPLE_EDGE]
                                          SHUFFLE [RS_99]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_519] (rows=51391963 width=115)
                                              Conds:RS_608._col0=RS_534._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 29 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_534]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_532]
                                            <-Map 22 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_608]
                                                PartitionCols:_col0
                                                Select Operator [SEL_606] (rows=143930993 width=119)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_604] (rows=143930993 width=455)
                                                    predicate:(_col0 is not null and _col1 is not null)
                                                    Select Operator [SEL_602] (rows=144002668 width=455)
                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                      Filter Operator [FIL_600] (rows=144002668 width=455)
                                                        predicate:(ws_sold_date_sk BETWEEN DynamicValue(RS_97_date_dim_d_date_sk_min) AND DynamicValue(RS_97_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_97_date_dim_d_date_sk_bloom_filter)))
                                                         Please refer to the previous TableScan [TS_86]
                              <-Reducer 7 [SIMPLE_EDGE]
                                SHUFFLE [RS_139]
                                  PartitionCols:_col0
                                  Filter Operator [FIL_138] (rows=13333333 width=552)
                                    predicate:CASE WHEN (_col4 is not null) THEN (CASE WHEN (_col9) THEN (((_col6 / _col8) > (_col2 / _col4))) ELSE (false) END) ELSE (false) END
                                    Merge Join Operator [MERGEJOIN_525] (rows=26666666 width=552)
                                      Conds:RS_135._col0=RS_599._col0(Inner),Output:["_col0","_col2","_col4","_col6","_col8","_col9"]
                                    <-Reducer 21 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_599]
                                        PartitionCols:_col0
                                        Select Operator [SEL_598] (rows=22300081 width=216)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_597] (rows=22300081 width=212)
                                            predicate:(_col1 > 0)
                                            Group By Operator [GBY_596] (rows=66900244 width=212)
                                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                            <-Reducer 20 [SIMPLE_EDGE]
                                              SHUFFLE [RS_82]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_81] (rows=80000000 width=212)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                                  Merge Join Operator [MERGEJOIN_518] (rows=101084444 width=212)
                                                    Conds:RS_77._col1=RS_575._col0(Inner),Output:["_col2","_col5"]
                                                  <-Map 32 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_575]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_568] (rows=80000000 width=104)
                                                        Output:["_col0","_col1"]
                                                         Please refer to the previous TableScan [TS_94]
                                                  <-Reducer 19 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_77]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_517] (rows=101084444 width=115)
                                                        Conds:RS_593._col0=RS_540._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 29 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_540]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_533]
                                                      <-Map 15 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_593]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_591] (rows=285117831 width=119)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_589] (rows=285117831 width=453)
                                                              predicate:(_col0 is not null and _col1 is not null)
                                                              Select Operator [SEL_587] (rows=287989836 width=453)
                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                Filter Operator [FIL_585] (rows=287989836 width=453)
                                                                  predicate:(cs_sold_date_sk BETWEEN DynamicValue(RS_75_date_dim_d_date_sk_min) AND DynamicValue(RS_75_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_75_date_dim_d_date_sk_bloom_filter)))
                                                                  TableScan [TS_43] (rows=287989836 width=453)
                                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                                                                  <-Reducer 30 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_549]
                                                                       Please refer to the previous Group By Operator [GBY_546]
                                                                  <-Reducer 31 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_552]
                                                                       Please refer to the previous Group By Operator [GBY_550]
                                    <-Reducer 6 [SIMPLE_EDGE]
                                      SHUFFLE [RS_135]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_524] (rows=26666666 width=436)
                                          Conds:RS_132._col0=RS_595._col0(Inner),Output:["_col0","_col2","_col4","_col6"]
                                        <-Reducer 18 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_595]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_594] (rows=66900244 width=212)
                                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                            <-Reducer 17 [SIMPLE_EDGE]
                                              SHUFFLE [RS_61]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_60] (rows=80000000 width=212)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                                  Merge Join Operator [MERGEJOIN_516] (rows=101084444 width=212)
                                                    Conds:RS_56._col1=RS_574._col0(Inner),Output:["_col2","_col5"]
                                                  <-Map 32 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_574]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_567] (rows=80000000 width=104)
                                                        Output:["_col0","_col1"]
                                                         Please refer to the previous TableScan [TS_94]
                                                  <-Reducer 16 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_56]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_515] (rows=101084444 width=115)
                                                        Conds:RS_592._col0=RS_537._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 29 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_537]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_532]
                                                      <-Map 15 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_592]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_590] (rows=285117831 width=119)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_588] (rows=285117831 width=453)
                                                              predicate:(_col0 is not null and _col1 is not null)
                                                              Select Operator [SEL_586] (rows=287989836 width=453)
                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                Filter Operator [FIL_584] (rows=287989836 width=453)
                                                                  predicate:(cs_sold_date_sk BETWEEN DynamicValue(RS_54_date_dim_d_date_sk_min) AND DynamicValue(RS_54_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_54_date_dim_d_date_sk_bloom_filter)))
                                                                   Please refer to the previous TableScan [TS_43]
                                        <-Reducer 5 [SIMPLE_EDGE]
                                          SHUFFLE [RS_132]
                                            PartitionCols:_col0
                                            Merge Join Operator [MERGEJOIN_523] (rows=26666666 width=324)
                                              Conds:RS_580._col0=RS_583._col0(Inner),Output:["_col0","_col2","_col4"]
                                            <-Reducer 14 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_583]
                                                PartitionCols:_col0
                                                Filter Operator [FIL_582] (rows=22300081 width=212)
                                                  predicate:(_col1 > 0)
                                                  Group By Operator [GBY_581] (rows=66900244 width=212)
                                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                                  <-Reducer 13 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_39]
                                                      PartitionCols:_col0
                                                      Group By Operator [GBY_38] (rows=80000000 width=212)
                                                        Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                                        Merge Join Operator [MERGEJOIN_514] (rows=187573258 width=212)
                                                          Conds:RS_34._col1=RS_573._col0(Inner),Output:["_col2","_col5"]
                                                        <-Map 32 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_573]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_566] (rows=80000000 width=104)
                                                              Output:["_col0","_col1"]
                                                               Please refer to the previous TableScan [TS_94]
                                                        <-Reducer 12 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_34]
                                                            PartitionCols:_col1
                                                            Merge Join Operator [MERGEJOIN_513] (rows=187573258 width=115)
                                                              Conds:RS_563._col0=RS_538._col0(Inner),Output:["_col1","_col2"]
                                                            <-Map 29 [SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_538]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Select Operator [SEL_533]
                                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_563]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_561] (rows=525327388 width=119)
                                                                  Output:["_col0","_col1","_col2"]
                                                                  Filter Operator [FIL_559] (rows=525327388 width=435)
                                                                    predicate:(_col0 is not null and _col1 is not null)
                                                                    Select Operator [SEL_557] (rows=575995635 width=435)
                                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                      Filter Operator [FIL_555] (rows=575995635 width=435)
                                                                        predicate:(ss_sold_date_sk BETWEEN DynamicValue(RS_32_date_dim_d_date_sk_min) AND DynamicValue(RS_32_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_32_date_dim_d_date_sk_bloom_filter)))
                                                                        TableScan [TS_0] (rows=575995635 width=435)
                                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                                                                        <-Reducer 30 [BROADCAST_EDGE] vectorized
                                                                          BROADCAST [RS_548]
                                                                             Please refer to the previous Group By Operator [GBY_546]
                                                                        <-Reducer 31 [BROADCAST_EDGE] vectorized
                                                                          BROADCAST [RS_551]
                                                                             Please refer to the previous Group By Operator [GBY_550]
                                            <-Reducer 4 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_580]
                                                PartitionCols:_col0
                                                Select Operator [SEL_579] (rows=80000000 width=304)
                                                  Output:["_col0","_col2"]
                                                  Group By Operator [GBY_578] (rows=80000000 width=304)
                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                                  <-Reducer 3 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_18]
                                                      PartitionCols:_col0, _col1
                                                      Group By Operator [GBY_17] (rows=80000000 width=304)
                                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)"],keys:_col5, _col8
                                                        Merge Join Operator [MERGEJOIN_512] (rows=187573258 width=304)
                                                          Conds:RS_13._col1=RS_572._col0(Inner),Output:["_col2","_col5","_col8"]
                                                        <-Map 32 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_572]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_565] (rows=80000000 width=196)
                                                              Output:["_col0","_col1","_col4"]
                                                               Please refer to the previous TableScan [TS_94]
                                                        <-Reducer 2 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_13]
                                                            PartitionCols:_col1
                                                            Merge Join Operator [MERGEJOIN_511] (rows=187573258 width=115)
                                                              Conds:RS_562._col0=RS_536._col0(Inner),Output:["_col1","_col2"]
                                                            <-Map 29 [SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_536]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Select Operator [SEL_532]
                                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_562]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_560] (rows=525327388 width=119)
                                                                  Output:["_col0","_col1","_col2"]
                                                                  Filter Operator [FIL_558] (rows=525327388 width=435)
                                                                    predicate:(_col0 is not null and _col1 is not null)
                                                                    Select Operator [SEL_556] (rows=575995635 width=435)
                                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                      Filter Operator [FIL_554] (rows=575995635 width=435)
                                                                        predicate:(ss_sold_date_sk BETWEEN DynamicValue(RS_11_date_dim_d_date_sk_min) AND DynamicValue(RS_11_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_11_date_dim_d_date_sk_bloom_filter)))
                                                                         Please refer to the previous TableScan [TS_0]

