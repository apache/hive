PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select
                  t_s_secyear.customer_id
                 ,t_s_secyear.customer_first_name
                 ,t_s_secyear.customer_last_name
                 ,t_s_secyear.customer_birth_country
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  1999
   and t_s_secyear.dyear = 1999+1
   and t_c_firstyear.dyear =  1999
   and t_c_secyear.dyear =  1999+1
   and t_w_firstyear.dyear = 1999
   and t_w_secyear.dyear = 1999+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_id
         ,t_s_secyear.customer_first_name
         ,t_s_secyear.customer_last_name
         ,t_s_secyear.customer_birth_country
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select
                  t_s_secyear.customer_id
                 ,t_s_secyear.customer_first_name
                 ,t_s_secyear.customer_last_name
                 ,t_s_secyear.customer_birth_country
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  1999
   and t_s_secyear.dyear = 1999+1
   and t_c_firstyear.dyear =  1999
   and t_c_secyear.dyear =  1999+1
   and t_w_firstyear.dyear = 1999
   and t_w_secyear.dyear = 1999+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_id
         ,t_s_secyear.customer_first_name
         ,t_s_secyear.customer_last_name
         ,t_s_secyear.customer_birth_country
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 13 (BROADCAST_EDGE)
Map 35 <- Reducer 17 (BROADCAST_EDGE)
Map 36 <- Reducer 21 (BROADCAST_EDGE)
Map 37 <- Reducer 25 (BROADCAST_EDGE)
Map 38 <- Reducer 29 (BROADCAST_EDGE)
Map 39 <- Reducer 33 (BROADCAST_EDGE)
Reducer 10 <- Map 34 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 12 (SIMPLE_EDGE), Map 35 (SIMPLE_EDGE)
Reducer 15 <- Map 34 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Map 12 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 12 (SIMPLE_EDGE), Map 36 (SIMPLE_EDGE)
Reducer 19 <- Map 34 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 12 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Map 12 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Map 12 (SIMPLE_EDGE), Map 37 (SIMPLE_EDGE)
Reducer 23 <- Map 34 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Map 12 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Map 12 (SIMPLE_EDGE), Map 38 (SIMPLE_EDGE)
Reducer 27 <- Map 34 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)
Reducer 28 <- Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Map 12 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 34 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 12 (SIMPLE_EDGE), Map 39 (SIMPLE_EDGE)
Reducer 31 <- Map 34 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE)
Reducer 32 <- Reducer 31 (SIMPLE_EDGE)
Reducer 33 <- Map 12 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 16 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 20 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 24 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 28 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 32 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 11 vectorized
      File Output Operator [FS_611]
        Limit [LIM_610] (rows=100 width=372)
          Number of rows:100
          Select Operator [SEL_609] (rows=3543140 width=372)
            Output:["_col0","_col1","_col2","_col3"]
          <-Reducer 10 [SIMPLE_EDGE]
            SHUFFLE [RS_141]
              Select Operator [SEL_140] (rows=3543140 width=372)
                Output:["_col0","_col1","_col2","_col3"]
                Top N Key Operator [TNK_273] (rows=3543140 width=372)
                  keys:_col0, _col2, _col3, _col4,top n:100
                  Merge Join Operator [MERGEJOIN_516] (rows=3543140 width=372)
                    Conds:RS_137._col0=RS_567._col0(Inner),Output:["_col0","_col2","_col3","_col4"]
                  <-Map 34 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_567]
                      PartitionCols:_col0
                      Select Operator [SEL_560] (rows=80000000 width=372)
                        Output:["_col0","_col1","_col2","_col3"]
                        TableScan [TS_6] (rows=80000000 width=196)
                          default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_birth_country","c_first_name","c_last_name"]
                  <-Reducer 9 [SIMPLE_EDGE]
                    SHUFFLE [RS_137]
                      PartitionCols:_col0
                      Select Operator [SEL_134] (rows=2962962 width=100)
                        Output:["_col0"]
                        Filter Operator [FIL_133] (rows=2962962 width=548)
                          predicate:((_col6 / _col10) > (_col8 / _col12))
                          Merge Join Operator [MERGEJOIN_515] (rows=8888888 width=548)
                            Conds:RS_130._col0=RS_608._col0(Inner),Output:["_col0","_col6","_col8","_col10","_col12"]
                          <-Reducer 32 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_608]
                              PartitionCols:_col0
                              Filter Operator [FIL_607] (rows=14325562 width=212)
                                predicate:(_col1 > 0)
                                Group By Operator [GBY_606] (rows=42976686 width=212)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 31 [SIMPLE_EDGE]
                                  SHUFFLE [RS_113]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_112] (rows=51391963 width=212)
                                      Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                      Merge Join Operator [MERGEJOIN_510] (rows=51391963 width=212)
                                        Conds:RS_108._col1=RS_566._col0(Inner),Output:["_col2","_col5"]
                                      <-Map 34 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_566]
                                          PartitionCols:_col0
                                          Select Operator [SEL_559] (rows=80000000 width=104)
                                            Output:["_col0","_col1"]
                                             Please refer to the previous TableScan [TS_6]
                                      <-Reducer 30 [SIMPLE_EDGE]
                                        SHUFFLE [RS_108]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_509] (rows=51391963 width=115)
                                            Conds:RS_605._col0=RS_539._col0(Inner),Output:["_col1","_col2"]
                                          <-Map 12 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_539]
                                              PartitionCols:_col0
                                              Select Operator [SEL_528] (rows=652 width=4)
                                                Output:["_col0"]
                                                Filter Operator [FIL_522] (rows=652 width=8)
                                                  predicate:(d_year = 1999)
                                                  TableScan [TS_3] (rows=73049 width=8)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                          <-Map 39 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_605]
                                              PartitionCols:_col0
                                              Select Operator [SEL_604] (rows=143930993 width=119)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_603] (rows=143930993 width=455)
                                                  predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_106_date_dim_d_date_sk_min) AND DynamicValue(RS_106_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_106_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_97] (rows=144002668 width=455)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                                                  <-Reducer 33 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_602]
                                                      Group By Operator [GBY_601] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_552]
                                                          Group By Operator [GBY_546] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_540] (rows=652 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_528]
                          <-Reducer 8 [SIMPLE_EDGE]
                            SHUFFLE [RS_130]
                              PartitionCols:_col0
                              Filter Operator [FIL_129] (rows=8888888 width=660)
                                predicate:((_col6 / _col10) > (_col2 / _col4))
                                Merge Join Operator [MERGEJOIN_514] (rows=26666666 width=660)
                                  Conds:RS_126._col0=RS_600._col0(Inner),Output:["_col0","_col2","_col4","_col6","_col8","_col10"]
                                <-Reducer 28 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_600]
                                    PartitionCols:_col0
                                    Filter Operator [FIL_599] (rows=22300081 width=212)
                                      predicate:(_col1 > 0)
                                      Group By Operator [GBY_598] (rows=66900244 width=212)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                      <-Reducer 27 [SIMPLE_EDGE]
                                        SHUFFLE [RS_93]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_92] (rows=80000000 width=212)
                                            Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                            Merge Join Operator [MERGEJOIN_508] (rows=101084444 width=212)
                                              Conds:RS_88._col1=RS_565._col0(Inner),Output:["_col2","_col5"]
                                            <-Map 34 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_565]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_559]
                                            <-Reducer 26 [SIMPLE_EDGE]
                                              SHUFFLE [RS_88]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_507] (rows=101084444 width=115)
                                                  Conds:RS_597._col0=RS_537._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 12 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_537]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_527] (rows=652 width=4)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_521] (rows=652 width=8)
                                                        predicate:(d_year = 1999)
                                                         Please refer to the previous TableScan [TS_3]
                                                <-Map 38 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_597]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_596] (rows=285117831 width=119)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_595] (rows=285117831 width=453)
                                                        predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_86_date_dim_d_date_sk_min) AND DynamicValue(RS_86_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_86_date_dim_d_date_sk_bloom_filter)))
                                                        TableScan [TS_77] (rows=287989836 width=453)
                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                                                        <-Reducer 29 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_594]
                                                            Group By Operator [GBY_593] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_551]
                                                                Group By Operator [GBY_545] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_538] (rows=652 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_527]
                                <-Reducer 7 [SIMPLE_EDGE]
                                  SHUFFLE [RS_126]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_513] (rows=26666666 width=548)
                                      Conds:RS_123._col0=RS_592._col0(Inner),Output:["_col0","_col2","_col4","_col6","_col8"]
                                    <-Reducer 24 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_592]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_591] (rows=42976686 width=212)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                        <-Reducer 23 [SIMPLE_EDGE]
                                          SHUFFLE [RS_74]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_73] (rows=51391963 width=212)
                                              Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                              Merge Join Operator [MERGEJOIN_506] (rows=51391963 width=212)
                                                Conds:RS_69._col1=RS_564._col0(Inner),Output:["_col2","_col5"]
                                              <-Map 34 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_564]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_559]
                                              <-Reducer 22 [SIMPLE_EDGE]
                                                SHUFFLE [RS_69]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_505] (rows=51391963 width=115)
                                                    Conds:RS_590._col0=RS_535._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 12 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_535]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_526] (rows=652 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_520] (rows=652 width=8)
                                                          predicate:(d_year = 2000)
                                                           Please refer to the previous TableScan [TS_3]
                                                  <-Map 37 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_590]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_589] (rows=143930993 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_588] (rows=143930993 width=455)
                                                          predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_67_date_dim_d_date_sk_min) AND DynamicValue(RS_67_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_67_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_58] (rows=144002668 width=455)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                                                          <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_587]
                                                              Group By Operator [GBY_586] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_550]
                                                                  Group By Operator [GBY_544] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_536] (rows=652 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_526]
                                    <-Reducer 6 [SIMPLE_EDGE]
                                      SHUFFLE [RS_123]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_512] (rows=26666666 width=436)
                                          Conds:RS_120._col0=RS_585._col0(Inner),Output:["_col0","_col2","_col4","_col6"]
                                        <-Reducer 20 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_585]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_584] (rows=66900244 width=212)
                                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                            <-Reducer 19 [SIMPLE_EDGE]
                                              SHUFFLE [RS_55]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_54] (rows=80000000 width=212)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                                  Merge Join Operator [MERGEJOIN_504] (rows=101084444 width=212)
                                                    Conds:RS_50._col1=RS_563._col0(Inner),Output:["_col2","_col5"]
                                                  <-Map 34 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_563]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_559]
                                                  <-Reducer 18 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_50]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_503] (rows=101084444 width=115)
                                                        Conds:RS_583._col0=RS_533._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 12 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_533]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_525] (rows=652 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_519] (rows=652 width=8)
                                                              predicate:(d_year = 2000)
                                                               Please refer to the previous TableScan [TS_3]
                                                      <-Map 36 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_583]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_582] (rows=285117831 width=119)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_581] (rows=285117831 width=453)
                                                              predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_48_date_dim_d_date_sk_min) AND DynamicValue(RS_48_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_48_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_39] (rows=287989836 width=453)
                                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                                                              <-Reducer 21 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_580]
                                                                  Group By Operator [GBY_579] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_549]
                                                                      Group By Operator [GBY_543] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_534] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_525]
                                        <-Reducer 5 [SIMPLE_EDGE]
                                          SHUFFLE [RS_120]
                                            PartitionCols:_col0
                                            Merge Join Operator [MERGEJOIN_511] (rows=26666666 width=324)
                                              Conds:RS_570._col0=RS_578._col0(Inner),Output:["_col0","_col2","_col4"]
                                            <-Reducer 16 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_578]
                                                PartitionCols:_col0
                                                Filter Operator [FIL_577] (rows=22300081 width=212)
                                                  predicate:(_col1 > 0)
                                                  Group By Operator [GBY_576] (rows=66900244 width=212)
                                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                                  <-Reducer 15 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_35]
                                                      PartitionCols:_col0
                                                      Group By Operator [GBY_34] (rows=80000000 width=212)
                                                        Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                                        Merge Join Operator [MERGEJOIN_502] (rows=187573258 width=212)
                                                          Conds:RS_30._col1=RS_562._col0(Inner),Output:["_col2","_col5"]
                                                        <-Map 34 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_562]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_559]
                                                        <-Reducer 14 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_30]
                                                            PartitionCols:_col1
                                                            Merge Join Operator [MERGEJOIN_501] (rows=187573258 width=115)
                                                              Conds:RS_575._col0=RS_531._col0(Inner),Output:["_col1","_col2"]
                                                            <-Map 12 [SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_531]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_524] (rows=652 width=4)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_518] (rows=652 width=8)
                                                                    predicate:(d_year = 1999)
                                                                     Please refer to the previous TableScan [TS_3]
                                                            <-Map 35 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_575]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_574] (rows=525327388 width=119)
                                                                  Output:["_col0","_col1","_col2"]
                                                                  Filter Operator [FIL_573] (rows=525327388 width=435)
                                                                    predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_28_date_dim_d_date_sk_min) AND DynamicValue(RS_28_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_28_date_dim_d_date_sk_bloom_filter)))
                                                                    TableScan [TS_19] (rows=575995635 width=435)
                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                                                                    <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                                      BROADCAST [RS_572]
                                                                        Group By Operator [GBY_571] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                        <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                          PARTITION_ONLY_SHUFFLE [RS_548]
                                                                            Group By Operator [GBY_542] (rows=1 width=12)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                              Select Operator [SEL_532] (rows=652 width=4)
                                                                                Output:["_col0"]
                                                                                 Please refer to the previous Select Operator [SEL_524]
                                            <-Reducer 4 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_570]
                                                PartitionCols:_col0
                                                Select Operator [SEL_569] (rows=80000000 width=304)
                                                  Output:["_col0","_col2"]
                                                  Group By Operator [GBY_568] (rows=80000000 width=304)
                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                                  <-Reducer 3 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_16]
                                                      PartitionCols:_col0, _col1
                                                      Group By Operator [GBY_15] (rows=80000000 width=304)
                                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)"],keys:_col5, _col8
                                                        Merge Join Operator [MERGEJOIN_500] (rows=187573258 width=304)
                                                          Conds:RS_11._col1=RS_561._col0(Inner),Output:["_col2","_col5","_col8"]
                                                        <-Map 34 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_561]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_558] (rows=80000000 width=196)
                                                              Output:["_col0","_col1","_col4"]
                                                               Please refer to the previous TableScan [TS_6]
                                                        <-Reducer 2 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_11]
                                                            PartitionCols:_col1
                                                            Merge Join Operator [MERGEJOIN_499] (rows=187573258 width=115)
                                                              Conds:RS_557._col0=RS_529._col0(Inner),Output:["_col1","_col2"]
                                                            <-Map 12 [SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_529]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_523] (rows=652 width=4)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_517] (rows=652 width=8)
                                                                    predicate:(d_year = 2000)
                                                                     Please refer to the previous TableScan [TS_3]
                                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_557]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_556] (rows=525327388 width=119)
                                                                  Output:["_col0","_col1","_col2"]
                                                                  Filter Operator [FIL_555] (rows=525327388 width=435)
                                                                    predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_9_date_dim_d_date_sk_min) AND DynamicValue(RS_9_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_9_date_dim_d_date_sk_bloom_filter)))
                                                                    TableScan [TS_0] (rows=575995635 width=435)
                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                                                                    <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                                      BROADCAST [RS_554]
                                                                        Group By Operator [GBY_553] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                        <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                          PARTITION_ONLY_SHUFFLE [RS_547]
                                                                            Group By Operator [GBY_541] (rows=1 width=12)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                              Select Operator [SEL_530] (rows=652 width=4)
                                                                                Output:["_col0"]
                                                                                 Please refer to the previous Select Operator [SEL_523]

