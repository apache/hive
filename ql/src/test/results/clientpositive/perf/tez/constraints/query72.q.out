PREHOOK: query: explain
select  i_item_desc
      ,w_warehouse_name
      ,d1.d_week_seq
      ,count(case when p_promo_sk is null then 1 else 0 end) no_promo
      ,count(case when p_promo_sk is not null then 1 else 0 end) promo
      ,count(*) total_cnt
from catalog_sales
join inventory on (cs_item_sk = inv_item_sk)
join warehouse on (w_warehouse_sk=inv_warehouse_sk)
join item on (i_item_sk = cs_item_sk)
join customer_demographics on (cs_bill_cdemo_sk = cd_demo_sk)
join household_demographics on (cs_bill_hdemo_sk = hd_demo_sk)
join date_dim d1 on (cs_sold_date_sk = d1.d_date_sk)
join date_dim d2 on (inv_date_sk = d2.d_date_sk)
join date_dim d3 on (cs_ship_date_sk = d3.d_date_sk)
left outer join promotion on (cs_promo_sk=p_promo_sk)
left outer join catalog_returns on (cr_item_sk = cs_item_sk and cr_order_number = cs_order_number)
where d1.d_week_seq = d2.d_week_seq
  and inv_quantity_on_hand < cs_quantity 
  and d3.d_date > d1.d_date + 5
  and hd_buy_potential = '1001-5000'
  and d1.d_year = 2001
  and hd_buy_potential = '1001-5000'
  and cd_marital_status = 'M'
  and d1.d_year = 2001
group by i_item_desc,w_warehouse_name,d1.d_week_seq
order by total_cnt desc, i_item_desc, w_warehouse_name, d_week_seq
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@inventory
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@warehouse
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  i_item_desc
      ,w_warehouse_name
      ,d1.d_week_seq
      ,count(case when p_promo_sk is null then 1 else 0 end) no_promo
      ,count(case when p_promo_sk is not null then 1 else 0 end) promo
      ,count(*) total_cnt
from catalog_sales
join inventory on (cs_item_sk = inv_item_sk)
join warehouse on (w_warehouse_sk=inv_warehouse_sk)
join item on (i_item_sk = cs_item_sk)
join customer_demographics on (cs_bill_cdemo_sk = cd_demo_sk)
join household_demographics on (cs_bill_hdemo_sk = hd_demo_sk)
join date_dim d1 on (cs_sold_date_sk = d1.d_date_sk)
join date_dim d2 on (inv_date_sk = d2.d_date_sk)
join date_dim d3 on (cs_ship_date_sk = d3.d_date_sk)
left outer join promotion on (cs_promo_sk=p_promo_sk)
left outer join catalog_returns on (cr_item_sk = cs_item_sk and cr_order_number = cs_order_number)
where d1.d_week_seq = d2.d_week_seq
  and inv_quantity_on_hand < cs_quantity 
  and d3.d_date > d1.d_date + 5
  and hd_buy_potential = '1001-5000'
  and d1.d_year = 2001
  and hd_buy_potential = '1001-5000'
  and cd_marital_status = 'M'
  and d1.d_year = 2001
group by i_item_desc,w_warehouse_name,d1.d_week_seq
order by total_cnt desc, i_item_desc, w_warehouse_name, d_week_seq
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@inventory
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@warehouse
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 17 (BROADCAST_EDGE)
Reducer 10 <- Map 23 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 3 <- Map 14 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 16 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 19 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 20 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 15 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 21 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 22 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 12 vectorized
      File Output Operator [FS_302]
        Limit [LIM_301] (rows=100 width=312)
          Number of rows:100
          Select Operator [SEL_300] (rows=471834849 width=312)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 11 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_299]
              Top N Key Operator [TNK_298] (rows=471834849 width=312)
                keys:_col5, _col0, _col1, _col2,top n:100
                Group By Operator [GBY_297] (rows=471834849 width=312)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["count(VALUE._col0)","count(VALUE._col1)","count(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2
                <-Reducer 10 [SIMPLE_EDGE]
                  SHUFFLE [RS_66]
                    PartitionCols:_col0, _col1, _col2
                    Group By Operator [GBY_65] (rows=471834849 width=312)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["count(_col3)","count(_col4)","count()"],keys:_col0, _col1, _col2
                      Select Operator [SEL_63] (rows=471834849 width=292)
                        Output:["_col0","_col1","_col2","_col3","_col4"]
                        Merge Join Operator [MERGEJOIN_265] (rows=471834849 width=292)
                          Conds:RS_60._col4=RS_296._col0(Inner),Output:["_col15","_col21","_col25","_col27"]
                        <-Map 23 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_296]
                            PartitionCols:_col0
                            Select Operator [SEL_295] (rows=462000 width=188)
                              Output:["_col0","_col1"]
                              TableScan [TS_52] (rows=462000 width=188)
                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_desc"]
                        <-Reducer 9 [SIMPLE_EDGE]
                          SHUFFLE [RS_60]
                            PartitionCols:_col4
                            Merge Join Operator [MERGEJOIN_264] (rows=471834849 width=112)
                              Conds:RS_57._col10=RS_294._col0(Inner),Output:["_col4","_col15","_col21","_col25"]
                            <-Map 22 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_294]
                                PartitionCols:_col0
                                Select Operator [SEL_293] (rows=27 width=104)
                                  Output:["_col0","_col1"]
                                  TableScan [TS_50] (rows=27 width=104)
                                    default@warehouse,warehouse,Tbl:COMPLETE,Col:COMPLETE,Output:["w_warehouse_sk","w_warehouse_name"]
                            <-Reducer 8 [SIMPLE_EDGE]
                              SHUFFLE [RS_57]
                                PartitionCols:_col10
                                Merge Join Operator [MERGEJOIN_263] (rows=471834849 width=16)
                                  Conds:RS_54._col4, _col6=RS_292._col0, _col1(Left Outer),Output:["_col4","_col10","_col15","_col21"]
                                <-Map 21 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_292]
                                    PartitionCols:_col0, _col1
                                    Select Operator [SEL_291] (rows=28798881 width=8)
                                      Output:["_col0","_col1"]
                                      TableScan [TS_48] (rows=28798881 width=8)
                                        default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number"]
                                <-Reducer 7 [SIMPLE_EDGE]
                                  SHUFFLE [RS_54]
                                    PartitionCols:_col4, _col6
                                    Select Operator [SEL_47] (rows=182953402 width=36)
                                      Output:["_col4","_col6","_col10","_col15","_col21"]
                                      Filter Operator [FIL_46] (rows=182953402 width=36)
                                        predicate:(_col21 > _col14)
                                        Merge Join Operator [MERGEJOIN_262] (rows=548860207 width=36)
                                          Conds:RS_43._col1=RS_271._col0(Inner),Output:["_col4","_col6","_col13","_col14","_col17","_col19","_col21"]
                                        <-Map 15 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_271]
                                            PartitionCols:_col0
                                            Select Operator [SEL_269] (rows=73049 width=12)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_267] (rows=73049 width=98)
                                                predicate:UDFToDouble(d_date) is not null
                                                TableScan [TS_9] (rows=73049 width=8)
                                                  default@date_dim,d2,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_week_seq","d_date"]
                                        <-Reducer 6 [SIMPLE_EDGE]
                                          SHUFFLE [RS_43]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_261] (rows=548860207 width=31)
                                              Conds:RS_40._col5=RS_290._col0(Left Outer),Output:["_col1","_col4","_col6","_col13","_col14","_col17","_col19"]
                                            <-Map 20 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_290]
                                                PartitionCols:_col0
                                                Select Operator [SEL_289] (rows=2300 width=4)
                                                  Output:["_col0"]
                                                  TableScan [TS_22] (rows=2300 width=4)
                                                    default@promotion,promotion,Tbl:COMPLETE,Col:COMPLETE,Output:["p_promo_sk"]
                                            <-Reducer 5 [SIMPLE_EDGE]
                                              SHUFFLE [RS_40]
                                                PartitionCols:_col5
                                                Filter Operator [FIL_39] (rows=548860207 width=39)
                                                  predicate:(_col18 < _col7)
                                                  Merge Join Operator [MERGEJOIN_260] (rows=1646580622 width=39)
                                                    Conds:RS_36._col10, _col4=RS_288._col0, _col1(Inner),Output:["_col1","_col4","_col5","_col6","_col7","_col13","_col14","_col17","_col18"]
                                                  <-Map 19 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_288]
                                                      PartitionCols:_col0, _col1
                                                      Select Operator [SEL_287] (rows=35703276 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_286] (rows=35703276 width=15)
                                                          predicate:inv_quantity_on_hand is not null
                                                          TableScan [TS_19] (rows=37584000 width=15)
                                                            default@inventory,inventory,Tbl:COMPLETE,Col:COMPLETE,Output:["inv_date_sk","inv_item_sk","inv_warehouse_sk","inv_quantity_on_hand"]
                                                  <-Reducer 4 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_36]
                                                      PartitionCols:_col10, _col4
                                                      Merge Join Operator [MERGEJOIN_259] (rows=2885264 width=30)
                                                        Conds:RS_33._col0=RS_34._col2(Inner),Output:["_col1","_col4","_col5","_col6","_col7","_col10","_col13","_col14"]
                                                      <-Reducer 16 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_34]
                                                          PartitionCols:_col2
                                                          Merge Join Operator [MERGEJOIN_258] (rows=3621 width=20)
                                                            Conds:RS_270._col1=RS_274._col1(Inner),Output:["_col0","_col2","_col3","_col4"]
                                                          <-Map 15 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_270]
                                                              PartitionCols:_col1
                                                              Select Operator [SEL_268] (rows=73049 width=8)
                                                                Output:["_col0","_col1"]
                                                                Filter Operator [FIL_266] (rows=73049 width=8)
                                                                  predicate:d_week_seq is not null
                                                                   Please refer to the previous TableScan [TS_9]
                                                          <-Map 18 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_274]
                                                              PartitionCols:_col1
                                                              Select Operator [SEL_273] (rows=652 width=16)
                                                                Output:["_col0","_col1","_col2"]
                                                                Filter Operator [FIL_272] (rows=652 width=106)
                                                                  predicate:((d_year = 2001) and d_week_seq is not null and UDFToDouble(d_date) is not null)
                                                                  TableScan [TS_12] (rows=73049 width=106)
                                                                    default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_week_seq","d_year"]
                                                      <-Reducer 3 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_33]
                                                          PartitionCols:_col0
                                                          Merge Join Operator [MERGEJOIN_257] (rows=8138146 width=21)
                                                            Conds:RS_30._col3=RS_285._col0(Inner),Output:["_col0","_col1","_col4","_col5","_col6","_col7"]
                                                          <-Map 14 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_285]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_284] (rows=1440 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_283] (rows=1440 width=96)
                                                                  predicate:(hd_buy_potential = '1001-5000')
                                                                  TableScan [TS_6] (rows=7200 width=96)
                                                                    default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_buy_potential"]
                                                          <-Reducer 2 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_30]
                                                              PartitionCols:_col3
                                                              Merge Join Operator [MERGEJOIN_256] (rows=40690727 width=27)
                                                                Conds:RS_279._col2=RS_282._col0(Inner),Output:["_col0","_col1","_col3","_col4","_col5","_col6","_col7"]
                                                              <-Map 1 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_279]
                                                                  PartitionCols:_col2
                                                                  Select Operator [SEL_278] (rows=280863798 width=31)
                                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                                    Filter Operator [FIL_277] (rows=280863798 width=31)
                                                                      predicate:(cs_sold_date_sk is not null and cs_bill_cdemo_sk is not null and cs_ship_date_sk is not null and cs_quantity is not null and cs_bill_hdemo_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_34_d1_d_date_sk_min) AND DynamicValue(RS_34_d1_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_34_d1_d_date_sk_bloom_filter)))
                                                                      TableScan [TS_0] (rows=287989836 width=31)
                                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_ship_date_sk","cs_bill_cdemo_sk","cs_bill_hdemo_sk","cs_item_sk","cs_promo_sk","cs_order_number","cs_quantity"]
                                                                      <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                                        BROADCAST [RS_276]
                                                                          Group By Operator [GBY_275] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                          <-Reducer 16 [CUSTOM_SIMPLE_EDGE]
                                                                            SHUFFLE [RS_146]
                                                                              Group By Operator [GBY_145] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                Select Operator [SEL_144] (rows=3621 width=8)
                                                                                  Output:["_col0"]
                                                                                   Please refer to the previous Merge Join Operator [MERGEJOIN_258]
                                                              <-Map 13 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_282]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_281] (rows=265971 width=4)
                                                                    Output:["_col0"]
                                                                    Filter Operator [FIL_280] (rows=265971 width=89)
                                                                      predicate:(cd_marital_status = 'M')
                                                                      TableScan [TS_3] (rows=1861800 width=89)
                                                                        default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status"]

