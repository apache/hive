PREHOOK: query: explain
select  i_item_desc
      ,w_warehouse_name
      ,d1.d_week_seq
      ,count(case when p_promo_sk is null then 1 else 0 end) no_promo
      ,count(case when p_promo_sk is not null then 1 else 0 end) promo
      ,count(*) total_cnt
from catalog_sales
join inventory on (cs_item_sk = inv_item_sk)
join warehouse on (w_warehouse_sk=inv_warehouse_sk)
join item on (i_item_sk = cs_item_sk)
join customer_demographics on (cs_bill_cdemo_sk = cd_demo_sk)
join household_demographics on (cs_bill_hdemo_sk = hd_demo_sk)
join date_dim d1 on (cs_sold_date_sk = d1.d_date_sk)
join date_dim d2 on (inv_date_sk = d2.d_date_sk)
join date_dim d3 on (cs_ship_date_sk = d3.d_date_sk)
left outer join promotion on (cs_promo_sk=p_promo_sk)
left outer join catalog_returns on (cr_item_sk = cs_item_sk and cr_order_number = cs_order_number)
where d1.d_week_seq = d2.d_week_seq
  and inv_quantity_on_hand < cs_quantity 
  and d3.d_date > d1.d_date + 5
  and hd_buy_potential = '1001-5000'
  and d1.d_year = 2001
  and hd_buy_potential = '1001-5000'
  and cd_marital_status = 'M'
  and d1.d_year = 2001
group by i_item_desc,w_warehouse_name,d1.d_week_seq
order by total_cnt desc, i_item_desc, w_warehouse_name, d_week_seq
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@inventory
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@warehouse
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  i_item_desc
      ,w_warehouse_name
      ,d1.d_week_seq
      ,count(case when p_promo_sk is null then 1 else 0 end) no_promo
      ,count(case when p_promo_sk is not null then 1 else 0 end) promo
      ,count(*) total_cnt
from catalog_sales
join inventory on (cs_item_sk = inv_item_sk)
join warehouse on (w_warehouse_sk=inv_warehouse_sk)
join item on (i_item_sk = cs_item_sk)
join customer_demographics on (cs_bill_cdemo_sk = cd_demo_sk)
join household_demographics on (cs_bill_hdemo_sk = hd_demo_sk)
join date_dim d1 on (cs_sold_date_sk = d1.d_date_sk)
join date_dim d2 on (inv_date_sk = d2.d_date_sk)
join date_dim d3 on (cs_ship_date_sk = d3.d_date_sk)
left outer join promotion on (cs_promo_sk=p_promo_sk)
left outer join catalog_returns on (cr_item_sk = cs_item_sk and cr_order_number = cs_order_number)
where d1.d_week_seq = d2.d_week_seq
  and inv_quantity_on_hand < cs_quantity 
  and d3.d_date > d1.d_date + 5
  and hd_buy_potential = '1001-5000'
  and d1.d_year = 2001
  and hd_buy_potential = '1001-5000'
  and cd_marital_status = 'M'
  and d1.d_year = 2001
group by i_item_desc,w_warehouse_name,d1.d_week_seq
order by total_cnt desc, i_item_desc, w_warehouse_name, d_week_seq
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@inventory
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@warehouse
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 9 <- Reducer 17 (BROADCAST_EDGE), Reducer 19 (BROADCAST_EDGE), Reducer 21 (BROADCAST_EDGE)
Reducer 10 <- Map 16 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 11 <- Map 18 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Map 20 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Map 22 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 23 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 24 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 17 <- Map 16 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 21 <- Map 20 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 15 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 25 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 26 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_293]
        Limit [LIM_292] (rows=100 width=312)
          Number of rows:100
          Select Operator [SEL_291] (rows=384313734 width=312)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_290]
              Group By Operator [GBY_289] (rows=384313734 width=312)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["count(VALUE._col0)","count(VALUE._col1)","count(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2
              <-Reducer 5 [SIMPLE_EDGE]
                SHUFFLE [RS_64]
                  PartitionCols:_col0, _col1, _col2
                  Group By Operator [GBY_63] (rows=610435044 width=312)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["count(_col3)","count(_col4)","count()"],keys:_col0, _col1, _col2
                    Select Operator [SEL_61] (rows=1574305390 width=292)
                      Output:["_col0","_col1","_col2","_col3","_col4"]
                      Merge Join Operator [MERGEJOIN_246] (rows=1574305390 width=292)
                        Conds:RS_58._col4, _col6=RS_288._col0, _col1(Left Outer),Output:["_col13","_col15","_col19","_col25"]
                      <-Map 26 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_288]
                          PartitionCols:_col0, _col1
                          Select Operator [SEL_287] (rows=28798881 width=8)
                            Output:["_col0","_col1"]
                            TableScan [TS_56] (rows=28798881 width=8)
                              default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number"]
                      <-Reducer 4 [SIMPLE_EDGE]
                        SHUFFLE [RS_58]
                          PartitionCols:_col4, _col6
                          Select Operator [SEL_55] (rows=610435044 width=300)
                            Output:["_col4","_col6","_col13","_col15","_col19","_col25"]
                            Merge Join Operator [MERGEJOIN_245] (rows=610435044 width=300)
                              Conds:RS_52._col0, _col19=RS_286._col0, _col1(Inner),Output:["_col5","_col9","_col14","_col16","_col19","_col23"]
                            <-Map 25 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_286]
                                PartitionCols:_col0, _col1
                                Select Operator [SEL_285] (rows=73049 width=8)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_284] (rows=73049 width=8)
                                    predicate:d_week_seq is not null
                                    TableScan [TS_42] (rows=73049 width=8)
                                      default@date_dim,d2,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_week_seq"]
                            <-Reducer 3 [SIMPLE_EDGE]
                              SHUFFLE [RS_52]
                                PartitionCols:_col0, _col19
                                Filter Operator [FIL_51] (rows=545947820 width=311)
                                  predicate:(_col3 < _col17)
                                  Merge Join Operator [MERGEJOIN_244] (rows=1637843460 width=311)
                                    Conds:RS_48._col1=RS_49._col8(Inner),Output:["_col0","_col3","_col5","_col9","_col14","_col16","_col17","_col19","_col23"]
                                  <-Reducer 15 [SIMPLE_EDGE]
                                    SHUFFLE [RS_49]
                                      PartitionCols:_col8
                                      Select Operator [SEL_41] (rows=2726340 width=219)
                                        Output:["_col3","_col8","_col10","_col11","_col13","_col17"]
                                        Filter Operator [FIL_40] (rows=2726340 width=219)
                                          predicate:(_col17 > _col10)
                                          Merge Join Operator [MERGEJOIN_243] (rows=8179022 width=219)
                                            Conds:RS_37._col1=RS_283._col0(Inner),Output:["_col4","_col6","_col7","_col9","_col10","_col13","_col15","_col17"]
                                          <-Map 24 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_283]
                                              PartitionCols:_col0
                                              Select Operator [SEL_282] (rows=73049 width=12)
                                                Output:["_col0","_col1"]
                                                TableScan [TS_20] (rows=73049 width=98)
                                                  default@date_dim,d3,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                          <-Reducer 14 [SIMPLE_EDGE]
                                            SHUFFLE [RS_37]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_242] (rows=8179022 width=214)
                                                Conds:RS_34._col4=RS_281._col0(Inner),Output:["_col1","_col4","_col6","_col7","_col9","_col10","_col13","_col15"]
                                              <-Map 23 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_281]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_280] (rows=462000 width=188)
                                                    Output:["_col0","_col1"]
                                                    TableScan [TS_18] (rows=462000 width=188)
                                                      default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_desc"]
                                              <-Reducer 13 [SIMPLE_EDGE]
                                                SHUFFLE [RS_34]
                                                  PartitionCols:_col4
                                                  Merge Join Operator [MERGEJOIN_241] (rows=8179022 width=30)
                                                    Conds:RS_31._col5=RS_279._col0(Left Outer),Output:["_col1","_col4","_col6","_col7","_col9","_col10","_col13"]
                                                  <-Map 22 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_279]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_278] (rows=2300 width=4)
                                                        Output:["_col0"]
                                                        TableScan [TS_16] (rows=2300 width=4)
                                                          default@promotion,promotion,Tbl:COMPLETE,Col:COMPLETE,Output:["p_promo_sk"]
                                                  <-Reducer 12 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_31]
                                                      PartitionCols:_col5
                                                      Merge Join Operator [MERGEJOIN_240] (rows=8179022 width=29)
                                                        Conds:RS_28._col3=RS_269._col0(Inner),Output:["_col1","_col4","_col5","_col6","_col7","_col9","_col10"]
                                                      <-Map 20 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_269]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_268] (rows=1440 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_267] (rows=1440 width=96)
                                                              predicate:(hd_buy_potential = '1001-5000')
                                                              TableScan [TS_13] (rows=7200 width=96)
                                                                default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_buy_potential"]
                                                      <-Reducer 11 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_28]
                                                          PartitionCols:_col3
                                                          Merge Join Operator [MERGEJOIN_239] (rows=40895108 width=35)
                                                            Conds:RS_25._col2=RS_261._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col9","_col10"]
                                                          <-Map 18 [SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_261]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_260] (rows=265971 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_259] (rows=265971 width=89)
                                                                  predicate:(cd_marital_status = 'M')
                                                                  TableScan [TS_10] (rows=1861800 width=89)
                                                                    default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status"]
                                                          <-Reducer 10 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_25]
                                                              PartitionCols:_col2
                                                              Merge Join Operator [MERGEJOIN_238] (rows=100076475 width=39)
                                                                Conds:RS_277._col0=RS_253._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col10"]
                                                              <-Map 16 [SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_253]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_252] (rows=652 width=16)
                                                                    Output:["_col0","_col1","_col2"]
                                                                    Filter Operator [FIL_251] (rows=652 width=106)
                                                                      predicate:((d_year = 2001) and d_week_seq is not null)
                                                                      TableScan [TS_7] (rows=73049 width=106)
                                                                        default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_week_seq","d_year"]
                                                              <-Map 9 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_277]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_276] (rows=282274763 width=31)
                                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                                    Filter Operator [FIL_275] (rows=282274763 width=31)
                                                                      predicate:((cs_bill_cdemo_sk BETWEEN DynamicValue(RS_26_customer_demographics_cd_demo_sk_min) AND DynamicValue(RS_26_customer_demographics_cd_demo_sk_max) and in_bloom_filter(cs_bill_cdemo_sk, DynamicValue(RS_26_customer_demographics_cd_demo_sk_bloom_filter))) and (cs_bill_hdemo_sk BETWEEN DynamicValue(RS_29_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_29_household_demographics_hd_demo_sk_max) and in_bloom_filter(cs_bill_hdemo_sk, DynamicValue(RS_29_household_demographics_hd_demo_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_23_d1_d_date_sk_min) AND DynamicValue(RS_23_d1_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_23_d1_d_date_sk_bloom_filter))) and cs_bill_cdemo_sk is not null and cs_bill_hdemo_sk is not null and cs_ship_date_sk is not null and cs_sold_date_sk is not null)
                                                                      TableScan [TS_4] (rows=287989836 width=31)
                                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_ship_date_sk","cs_bill_cdemo_sk","cs_bill_hdemo_sk","cs_item_sk","cs_promo_sk","cs_order_number","cs_quantity"]
                                                                      <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                                        BROADCAST [RS_258]
                                                                          Group By Operator [GBY_257] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                          <-Map 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_256]
                                                                              Group By Operator [GBY_255] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                Select Operator [SEL_254] (rows=652 width=4)
                                                                                  Output:["_col0"]
                                                                                   Please refer to the previous Select Operator [SEL_252]
                                                                      <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                                        BROADCAST [RS_266]
                                                                          Group By Operator [GBY_265] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                          <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_264]
                                                                              Group By Operator [GBY_263] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                Select Operator [SEL_262] (rows=265971 width=4)
                                                                                  Output:["_col0"]
                                                                                   Please refer to the previous Select Operator [SEL_260]
                                                                      <-Reducer 21 [BROADCAST_EDGE] vectorized
                                                                        BROADCAST [RS_274]
                                                                          Group By Operator [GBY_273] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                          <-Map 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_272]
                                                                              Group By Operator [GBY_271] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                Select Operator [SEL_270] (rows=1440 width=4)
                                                                                  Output:["_col0"]
                                                                                   Please refer to the previous Select Operator [SEL_268]
                                  <-Reducer 2 [SIMPLE_EDGE]
                                    SHUFFLE [RS_48]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_237] (rows=37584000 width=111)
                                        Conds:RS_248._col2=RS_250._col0(Inner),Output:["_col0","_col1","_col3","_col5"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_248]
                                          PartitionCols:_col2
                                          Select Operator [SEL_247] (rows=37584000 width=15)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            TableScan [TS_0] (rows=37584000 width=15)
                                              default@inventory,inventory,Tbl:COMPLETE,Col:COMPLETE,Output:["inv_date_sk","inv_item_sk","inv_warehouse_sk","inv_quantity_on_hand"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_250]
                                          PartitionCols:_col0
                                          Select Operator [SEL_249] (rows=27 width=104)
                                            Output:["_col0","_col1"]
                                            TableScan [TS_2] (rows=27 width=104)
                                              default@warehouse,warehouse,Tbl:COMPLETE,Col:COMPLETE,Output:["w_warehouse_sk","w_warehouse_name"]

