Warning: Shuffle Join MERGEJOIN[1129][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 17' is a cross product
Warning: Shuffle Join MERGEJOIN[1165][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 18' is a cross product
Warning: Shuffle Join MERGEJOIN[1140][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 22' is a cross product
Warning: Shuffle Join MERGEJOIN[1172][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 23' is a cross product
Warning: Shuffle Join MERGEJOIN[1151][tables = [$hdt$_2, $hdt$_3]] in Stage 'Reducer 24' is a cross product
Warning: Shuffle Join MERGEJOIN[1179][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 25' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@avg_sales
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@avg_sales
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 6 (BROADCAST_EDGE)
Map 11 <- Reducer 14 (BROADCAST_EDGE)
Map 7 <- Reducer 10 (BROADCAST_EDGE)
Reducer 10 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 4 <- Union 3 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Map 5 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 7 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE), Union 3 (CONTAINS)

Vertex dependency in Stage-4
Map 26 <- Reducer 33 (BROADCAST_EDGE)
Map 74 <- Reducer 58 (BROADCAST_EDGE)
Map 75 <- Reducer 65 (BROADCAST_EDGE)
Map 76 <- Reducer 72 (BROADCAST_EDGE)
Map 77 <- Reducer 39 (BROADCAST_EDGE)
Map 78 <- Reducer 45 (BROADCAST_EDGE)
Reducer 16 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 15 (CUSTOM_SIMPLE_EDGE), Reducer 16 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 31 (CUSTOM_SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 20 <- Union 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 15 (CUSTOM_SIMPLE_EDGE), Reducer 16 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (CUSTOM_SIMPLE_EDGE), Reducer 38 (CUSTOM_SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 24 <- Map 15 (CUSTOM_SIMPLE_EDGE), Reducer 16 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (CUSTOM_SIMPLE_EDGE), Reducer 44 (CUSTOM_SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 27 <- Map 26 (SIMPLE_EDGE), Map 32 (SIMPLE_EDGE)
Reducer 28 <- Map 73 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Reducer 28 (SIMPLE_EDGE), Reducer 50 (SIMPLE_EDGE)
Reducer 30 <- Map 73 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Reducer 30 (SIMPLE_EDGE)
Reducer 33 <- Map 32 (CUSTOM_SIMPLE_EDGE)
Reducer 34 <- Map 32 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE)
Reducer 35 <- Map 73 (SIMPLE_EDGE), Reducer 34 (SIMPLE_EDGE)
Reducer 36 <- Reducer 35 (SIMPLE_EDGE), Reducer 54 (SIMPLE_EDGE)
Reducer 37 <- Map 73 (SIMPLE_EDGE), Reducer 36 (SIMPLE_EDGE)
Reducer 38 <- Reducer 37 (SIMPLE_EDGE)
Reducer 39 <- Map 32 (CUSTOM_SIMPLE_EDGE)
Reducer 40 <- Map 32 (SIMPLE_EDGE), Map 78 (SIMPLE_EDGE)
Reducer 41 <- Map 73 (SIMPLE_EDGE), Reducer 40 (SIMPLE_EDGE)
Reducer 42 <- Reducer 41 (SIMPLE_EDGE), Reducer 57 (SIMPLE_EDGE)
Reducer 43 <- Map 73 (SIMPLE_EDGE), Reducer 42 (SIMPLE_EDGE)
Reducer 44 <- Reducer 43 (SIMPLE_EDGE)
Reducer 45 <- Map 32 (CUSTOM_SIMPLE_EDGE)
Reducer 46 <- Map 32 (SIMPLE_EDGE), Map 74 (SIMPLE_EDGE)
Reducer 47 <- Map 73 (SIMPLE_EDGE), Reducer 46 (SIMPLE_EDGE)
Reducer 48 <- Reducer 47 (SIMPLE_EDGE), Union 49 (CONTAINS)
Reducer 50 <- Union 49 (SIMPLE_EDGE)
Reducer 51 <- Map 73 (SIMPLE_EDGE), Reducer 46 (SIMPLE_EDGE)
Reducer 52 <- Reducer 51 (SIMPLE_EDGE), Union 53 (CONTAINS)
Reducer 54 <- Union 53 (SIMPLE_EDGE)
Reducer 55 <- Reducer 51 (SIMPLE_EDGE), Union 56 (CONTAINS)
Reducer 57 <- Union 56 (SIMPLE_EDGE)
Reducer 58 <- Map 32 (CUSTOM_SIMPLE_EDGE)
Reducer 59 <- Map 32 (SIMPLE_EDGE), Map 75 (SIMPLE_EDGE)
Reducer 60 <- Map 73 (SIMPLE_EDGE), Reducer 59 (SIMPLE_EDGE)
Reducer 61 <- Reducer 60 (SIMPLE_EDGE), Union 49 (CONTAINS)
Reducer 62 <- Map 73 (SIMPLE_EDGE), Reducer 59 (SIMPLE_EDGE)
Reducer 63 <- Reducer 62 (SIMPLE_EDGE), Union 53 (CONTAINS)
Reducer 64 <- Reducer 62 (SIMPLE_EDGE), Union 56 (CONTAINS)
Reducer 65 <- Map 32 (CUSTOM_SIMPLE_EDGE)
Reducer 66 <- Map 32 (SIMPLE_EDGE), Map 76 (SIMPLE_EDGE)
Reducer 67 <- Map 73 (SIMPLE_EDGE), Reducer 66 (SIMPLE_EDGE)
Reducer 68 <- Reducer 67 (SIMPLE_EDGE), Union 49 (CONTAINS)
Reducer 69 <- Map 73 (SIMPLE_EDGE), Reducer 66 (SIMPLE_EDGE)
Reducer 70 <- Reducer 69 (SIMPLE_EDGE), Union 53 (CONTAINS)
Reducer 71 <- Reducer 69 (SIMPLE_EDGE), Union 56 (CONTAINS)
Reducer 72 <- Map 32 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Fetch Operator
    limit:100
    Stage-4
      Reducer 21 vectorized
      File Output Operator [FS_1308]
        Limit [LIM_1307] (rows=100 width=253)
          Number of rows:100
          Select Operator [SEL_1306] (rows=205 width=253)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 20 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1305]
              Select Operator [SEL_1304] (rows=205 width=253)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1303] (rows=205 width=253)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 19 [SIMPLE_EDGE]
                  <-Reducer 18 [CONTAINS]
                    Reduce Output Operator [RS_1171]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1170] (rows=410 width=253)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1169] (rows=82 width=253)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1167] (rows=45 width=253)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1166] (rows=45 width=253)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1165] (rows=136 width=253)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 17 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_249]
                                  Merge Join Operator [MERGEJOIN_1129] (rows=1 width=121)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1227]
                                      Select Operator [SEL_1225] (rows=1 width=112)
                                        Output:["_col0"]
                                        Filter Operator [FIL_1223] (rows=1 width=112)
                                          predicate:average_sales is not null
                                          TableScan [TS_137] (rows=1 width=0)
                                            default@avg_sales,avg_sales,Tbl:PARTIAL,Col:COMPLETE,Output:["average_sales"]
                                  <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1233]
                                      Select Operator [SEL_1232] (rows=1 width=8)
                                        Filter Operator [FIL_1231] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_1230] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_1226]
                                              Group By Operator [GBY_1224] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count()"]
                                                Select Operator [SEL_1222] (rows=1 width=0)
                                                   Please refer to the previous TableScan [TS_137]
                              <-Reducer 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1302]
                                  Filter Operator [FIL_1301] (rows=136 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1300] (rows=136 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 30 [SIMPLE_EDGE]
                                      SHUFFLE [RS_242]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_241] (rows=136 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_239] (rows=23620 width=11)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1139] (rows=23620 width=11)
                                              Conds:RS_236._col1=RS_1279._col0(Inner),Output:["_col2","_col3","_col13","_col14","_col15"]
                                            <-Map 73 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1279]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1270] (rows=462000 width=15)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                  TableScan [TS_154] (rows=462000 width=15)
                                                    default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                            <-Reducer 29 [SIMPLE_EDGE]
                                              SHUFFLE [RS_236]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1138] (rows=23620 width=4)
                                                  Conds:RS_233._col6, _col7, _col8=RS_1299._col0, _col1, _col2(Inner),Output:["_col1","_col2","_col3"]
                                                <-Reducer 28 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_233]
                                                    PartitionCols:_col6, _col7, _col8
                                                    Merge Join Operator [MERGEJOIN_1131] (rows=14951676 width=15)
                                                      Conds:RS_230._col1=RS_1287._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                    <-Map 73 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1287]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1278] (rows=458612 width=15)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1269] (rows=458612 width=15)
                                                            predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                             Please refer to the previous TableScan [TS_154]
                                                    <-Reducer 27 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_230]
                                                        PartitionCols:_col1
                                                        Merge Join Operator [MERGEJOIN_1130] (rows=15062131 width=4)
                                                          Conds:RS_1268._col0=RS_1240._col0(Inner),Output:["_col1","_col2","_col3"]
                                                        <-Map 32 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_1240]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1238] (rows=50 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_1236] (rows=50 width=12)
                                                                predicate:((d_year = 2000) and (d_moy = 11))
                                                                TableScan [TS_151] (rows=73049 width=12)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                        <-Map 26 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1268]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1267] (rows=550076554 width=118)
                                                              Output:["_col0","_col1","_col2","_col3"]
                                                              Filter Operator [FIL_1266] (rows=550076554 width=118)
                                                                predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_228_date_dim_d_date_sk_min) AND DynamicValue(RS_228_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_228_date_dim_d_date_sk_bloom_filter)))
                                                                TableScan [TS_148] (rows=575995635 width=118)
                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                                <-Reducer 33 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_1265]
                                                                    Group By Operator [GBY_1264] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_1258]
                                                                        Group By Operator [GBY_1252] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_1241] (rows=50 width=4)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_1238]
                                                <-Reducer 50 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1299]
                                                    PartitionCols:_col0, _col1, _col2
                                                    Select Operator [SEL_1298] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1297] (rows=1 width=20)
                                                        predicate:(_col3 = 3L)
                                                        Group By Operator [GBY_1296] (rows=121728 width=19)
                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                        <-Union 49 [SIMPLE_EDGE]
                                                          <-Reducer 48 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1340]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1339] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1338] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 47 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_174]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_173] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1133] (rows=14628613 width=11)
                                                                        Conds:RS_169._col1=RS_1288._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 73 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1288]
                                                                          PartitionCols:_col0
                                                                           Please refer to the previous Select Operator [SEL_1278]
                                                                      <-Reducer 46 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_169]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_1132] (rows=14736682 width=4)
                                                                            Conds:RS_1337._col0=RS_1246._col0(Inner),Output:["_col1"]
                                                                          <-Map 32 [SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_1246]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1239] (rows=1957 width=4)
                                                                                Output:["_col0"]
                                                                                Filter Operator [FIL_1237] (rows=1957 width=8)
                                                                                  predicate:d_year BETWEEN 1999 AND 2001
                                                                                   Please refer to the previous TableScan [TS_151]
                                                                          <-Map 74 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1337]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1336] (rows=550076554 width=7)
                                                                                Output:["_col0","_col1"]
                                                                                Filter Operator [FIL_1335] (rows=550076554 width=7)
                                                                                  predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_167_d1_d_date_sk_min) AND DynamicValue(RS_167_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_167_d1_d_date_sk_bloom_filter)))
                                                                                  TableScan [TS_157] (rows=575995635 width=7)
                                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                                                  <-Reducer 58 [BROADCAST_EDGE] vectorized
                                                                                    BROADCAST [RS_1334]
                                                                                      Group By Operator [GBY_1333] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                      <-Map 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                        PARTITION_ONLY_SHUFFLE [RS_1261]
                                                                                          Group By Operator [GBY_1255] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                            Select Operator [SEL_1247] (rows=1957 width=4)
                                                                                              Output:["_col0"]
                                                                                               Please refer to the previous Select Operator [SEL_1239]
                                                          <-Reducer 61 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1354]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1353] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1352] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 60 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_194]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_193] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1135] (rows=7620440 width=11)
                                                                        Conds:RS_189._col1=RS_1289._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 73 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1289]
                                                                          PartitionCols:_col0
                                                                           Please refer to the previous Select Operator [SEL_1278]
                                                                      <-Reducer 59 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_189]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_1134] (rows=7676736 width=4)
                                                                            Conds:RS_1351._col0=RS_1248._col0(Inner),Output:["_col1"]
                                                                          <-Map 32 [SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_1248]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1239]
                                                                          <-Map 75 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1351]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1350] (rows=286549727 width=7)
                                                                                Output:["_col0","_col1"]
                                                                                Filter Operator [FIL_1349] (rows=286549727 width=7)
                                                                                  predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_187_d2_d_date_sk_min) AND DynamicValue(RS_187_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_187_d2_d_date_sk_bloom_filter)))
                                                                                  TableScan [TS_177] (rows=287989836 width=7)
                                                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                  <-Reducer 65 [BROADCAST_EDGE] vectorized
                                                                                    BROADCAST [RS_1348]
                                                                                      Group By Operator [GBY_1347] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                      <-Map 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                        PARTITION_ONLY_SHUFFLE [RS_1262]
                                                                                          Group By Operator [GBY_1256] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                            Select Operator [SEL_1249] (rows=1957 width=4)
                                                                                              Output:["_col0"]
                                                                                               Please refer to the previous Select Operator [SEL_1239]
                                                          <-Reducer 68 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1368]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1367] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1366] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 67 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_215]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_214] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1137] (rows=3828623 width=11)
                                                                        Conds:RS_210._col1=RS_1290._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 73 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1290]
                                                                          PartitionCols:_col0
                                                                           Please refer to the previous Select Operator [SEL_1278]
                                                                      <-Reducer 66 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_210]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_1136] (rows=3856907 width=4)
                                                                            Conds:RS_1365._col0=RS_1250._col0(Inner),Output:["_col1"]
                                                                          <-Map 32 [SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_1250]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1239]
                                                                          <-Map 76 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1365]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1364] (rows=143966864 width=7)
                                                                                Output:["_col0","_col1"]
                                                                                Filter Operator [FIL_1363] (rows=143966864 width=7)
                                                                                  predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_208_d3_d_date_sk_min) AND DynamicValue(RS_208_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_208_d3_d_date_sk_bloom_filter)))
                                                                                  TableScan [TS_198] (rows=144002668 width=7)
                                                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                  <-Reducer 72 [BROADCAST_EDGE] vectorized
                                                                                    BROADCAST [RS_1362]
                                                                                      Group By Operator [GBY_1361] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                      <-Map 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                        PARTITION_ONLY_SHUFFLE [RS_1263]
                                                                                          Group By Operator [GBY_1257] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                            Select Operator [SEL_1251] (rows=1957 width=4)
                                                                                              Output:["_col0"]
                                                                                               Please refer to the previous Select Operator [SEL_1239]
                  <-Reducer 23 [CONTAINS]
                    Reduce Output Operator [RS_1178]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1177] (rows=410 width=253)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1176] (rows=82 width=253)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1174] (rows=24 width=253)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1173] (rows=24 width=253)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1172] (rows=72 width=253)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 22 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_366]
                                  Merge Join Operator [MERGEJOIN_1140] (rows=1 width=121)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1228]
                                       Please refer to the previous Select Operator [SEL_1225]
                                  <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1234]
                                       Please refer to the previous Select Operator [SEL_1232]
                              <-Reducer 38 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1320]
                                  Filter Operator [FIL_1319] (rows=72 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1318] (rows=72 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 37 [SIMPLE_EDGE]
                                      SHUFFLE [RS_359]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_358] (rows=72 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_356] (rows=12217 width=10)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1150] (rows=12217 width=10)
                                              Conds:RS_353._col1=RS_1284._col0(Inner),Output:["_col2","_col3","_col13","_col14","_col15"]
                                            <-Map 73 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1284]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1275] (rows=462000 width=15)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                   Please refer to the previous TableScan [TS_154]
                                            <-Reducer 36 [SIMPLE_EDGE]
                                              SHUFFLE [RS_353]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1149] (rows=12217 width=4)
                                                  Conds:RS_350._col6, _col7, _col8=RS_1317._col0, _col1, _col2(Inner),Output:["_col1","_col2","_col3"]
                                                <-Reducer 35 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_350]
                                                    PartitionCols:_col6, _col7, _col8
                                                    Merge Join Operator [MERGEJOIN_1142] (rows=7733674 width=110)
                                                      Conds:RS_347._col1=RS_1291._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                    <-Map 73 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1291]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1280] (rows=458612 width=15)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1271] (rows=458612 width=15)
                                                            predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                             Please refer to the previous TableScan [TS_154]
                                                    <-Reducer 34 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_347]
                                                        PartitionCols:_col1
                                                        Merge Join Operator [MERGEJOIN_1141] (rows=7790806 width=98)
                                                          Conds:RS_1313._col0=RS_1242._col0(Inner),Output:["_col1","_col2","_col3"]
                                                        <-Map 32 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_1242]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1238]
                                                        <-Map 77 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1313]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1312] (rows=286549727 width=123)
                                                              Output:["_col0","_col1","_col2","_col3"]
                                                              Filter Operator [FIL_1311] (rows=286549727 width=123)
                                                                predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_345_date_dim_d_date_sk_min) AND DynamicValue(RS_345_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_345_date_dim_d_date_sk_bloom_filter)))
                                                                TableScan [TS_265] (rows=287989836 width=123)
                                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                                <-Reducer 39 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_1310]
                                                                    Group By Operator [GBY_1309] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_1259]
                                                                        Group By Operator [GBY_1253] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_1243] (rows=50 width=4)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_1238]
                                                <-Reducer 54 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1317]
                                                    PartitionCols:_col0, _col1, _col2
                                                    Select Operator [SEL_1316] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1315] (rows=1 width=20)
                                                        predicate:(_col3 = 3L)
                                                        Group By Operator [GBY_1314] (rows=121728 width=19)
                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                        <-Union 53 [SIMPLE_EDGE]
                                                          <-Reducer 52 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1343]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1342] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1341] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 51 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_291]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_290] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1144] (rows=14628613 width=11)
                                                                        Conds:RS_286._col1=RS_1292._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 73 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1292]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1281] (rows=458612 width=15)
                                                                            Output:["_col0","_col1","_col2","_col3"]
                                                                            Filter Operator [FIL_1272] (rows=458612 width=15)
                                                                              predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                               Please refer to the previous TableScan [TS_154]
                                                                      <-Reducer 46 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_286]
                                                                          PartitionCols:_col1
                                                                           Please refer to the previous Merge Join Operator [MERGEJOIN_1132]
                                                          <-Reducer 63 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1357]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1356] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1355] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 62 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_311]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_310] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1146] (rows=7620440 width=11)
                                                                        Conds:RS_306._col1=RS_1293._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 73 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1293]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1282] (rows=458612 width=15)
                                                                            Output:["_col0","_col1","_col2","_col3"]
                                                                            Filter Operator [FIL_1273] (rows=458612 width=15)
                                                                              predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                               Please refer to the previous TableScan [TS_154]
                                                                      <-Reducer 59 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_306]
                                                                          PartitionCols:_col1
                                                                           Please refer to the previous Merge Join Operator [MERGEJOIN_1134]
                                                          <-Reducer 70 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1371]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1370] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1369] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 69 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_332]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_331] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1148] (rows=3828623 width=11)
                                                                        Conds:RS_327._col1=RS_1294._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 73 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1294]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1283] (rows=458612 width=15)
                                                                            Output:["_col0","_col1","_col2","_col3"]
                                                                            Filter Operator [FIL_1274] (rows=458612 width=15)
                                                                              predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                               Please refer to the previous TableScan [TS_154]
                                                                      <-Reducer 66 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_327]
                                                                          PartitionCols:_col1
                                                                           Please refer to the previous Merge Join Operator [MERGEJOIN_1136]
                  <-Reducer 25 [CONTAINS]
                    Reduce Output Operator [RS_1185]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1184] (rows=410 width=253)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1183] (rows=82 width=253)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1181] (rows=13 width=252)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1180] (rows=13 width=252)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1179] (rows=40 width=252)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 24 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_484]
                                  Merge Join Operator [MERGEJOIN_1151] (rows=1 width=121)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1229]
                                       Please refer to the previous Select Operator [SEL_1225]
                                  <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1235]
                                       Please refer to the previous Select Operator [SEL_1232]
                              <-Reducer 44 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1332]
                                  Filter Operator [FIL_1331] (rows=40 width=130)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1330] (rows=40 width=130)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 43 [SIMPLE_EDGE]
                                      SHUFFLE [RS_477]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_476] (rows=40 width=130)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_474] (rows=6181 width=9)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1161] (rows=6181 width=9)
                                              Conds:RS_471._col1=RS_1286._col0(Inner),Output:["_col2","_col3","_col13","_col14","_col15"]
                                            <-Map 73 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1286]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1277] (rows=462000 width=15)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                   Please refer to the previous TableScan [TS_154]
                                            <-Reducer 42 [SIMPLE_EDGE]
                                              SHUFFLE [RS_471]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1160] (rows=6181 width=4)
                                                  Conds:RS_468._col6, _col7, _col8=RS_1329._col0, _col1, _col2(Inner),Output:["_col1","_col2","_col3"]
                                                <-Reducer 41 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_468]
                                                    PartitionCols:_col6, _col7, _col8
                                                    Merge Join Operator [MERGEJOIN_1153] (rows=3913176 width=130)
                                                      Conds:RS_465._col1=RS_1295._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                    <-Map 73 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1295]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1285] (rows=458612 width=15)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1276] (rows=458612 width=15)
                                                            predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                             Please refer to the previous TableScan [TS_154]
                                                    <-Reducer 40 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_465]
                                                        PartitionCols:_col1
                                                        Merge Join Operator [MERGEJOIN_1152] (rows=3942084 width=118)
                                                          Conds:RS_1325._col0=RS_1244._col0(Inner),Output:["_col1","_col2","_col3"]
                                                        <-Map 32 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_1244]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1238]
                                                        <-Map 78 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1325]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1324] (rows=143966864 width=123)
                                                              Output:["_col0","_col1","_col2","_col3"]
                                                              Filter Operator [FIL_1323] (rows=143966864 width=123)
                                                                predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_463_date_dim_d_date_sk_min) AND DynamicValue(RS_463_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_463_date_dim_d_date_sk_bloom_filter)))
                                                                TableScan [TS_383] (rows=144002668 width=123)
                                                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                                <-Reducer 45 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_1322]
                                                                    Group By Operator [GBY_1321] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_1260]
                                                                        Group By Operator [GBY_1254] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_1245] (rows=50 width=4)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_1238]
                                                <-Reducer 57 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1329]
                                                    PartitionCols:_col0, _col1, _col2
                                                    Select Operator [SEL_1328] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1327] (rows=1 width=20)
                                                        predicate:(_col3 = 3L)
                                                        Group By Operator [GBY_1326] (rows=121728 width=19)
                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                        <-Union 56 [SIMPLE_EDGE]
                                                          <-Reducer 55 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1346]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1345] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1344] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 51 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_409]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_290]
                                                          <-Reducer 64 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1360]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1359] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1358] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 62 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_429]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_310]
                                                          <-Reducer 71 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1374]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1373] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1372] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 69 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_450]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_331]
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 4 vectorized
              File Output Operator [FS_114]
                table:{"name:":"default.avg_sales"}
                Select Operator [SEL_113] (rows=1 width=112)
                  Output:["_col0"]
                  Group By Operator [GBY_112] (rows=1 width=120)
                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                  <-Union 3 [CUSTOM_SIMPLE_EDGE]
                    <-Reducer 12 [CONTAINS]
                      Reduce Output Operator [RS_100]
                        Group By Operator [GBY_99] (rows=1 width=120)
                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                          Select Operator [SEL_98] (rows=26270325 width=44)
                            Output:["_col0"]
                            Select Operator [SEL_96] (rows=3856907 width=114)
                              Output:["_col0","_col1"]
                              Merge Join Operator [MERGEJOIN_95] (rows=3856907 width=114)
                                Conds:RS_136._col0=RS_128._col0(Inner),Output:["_col1","_col2"]
                              <-Map 13 [SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_128]
                                  PartitionCols:_col0
                                  Select Operator [SEL_127] (rows=1957 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_126] (rows=1957 width=8)
                                      predicate:d_year BETWEEN 1998 AND 2000
                                      TableScan [TS_24] (rows=73049 width=8)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                              <-Map 11 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_136]
                                  PartitionCols:_col0
                                  Select Operator [SEL_135] (rows=143966864 width=119)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_134] (rows=143966864 width=119)
                                      predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_28_date_dim_d_date_sk_min) AND DynamicValue(RS_28_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_28_date_dim_d_date_sk_bloom_filter)))
                                      TableScan [TS_21] (rows=144002668 width=119)
                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                      <-Reducer 14 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_133]
                                          Group By Operator [GBY_132] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_131]
                                              Group By Operator [GBY_130] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_129] (rows=1957 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_127]
                    <-Reducer 2 [CONTAINS]
                      Reduce Output Operator [RS_88]
                        Group By Operator [GBY_87] (rows=1 width=120)
                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                          Select Operator [SEL_86] (rows=26270325 width=44)
                            Output:["_col0"]
                            Select Operator [SEL_84] (rows=14736682 width=0)
                              Output:["_col0","_col1"]
                              Merge Join Operator [MERGEJOIN_83] (rows=14736682 width=0)
                                Conds:RS_111._col0=RS_103._col0(Inner),Output:["_col1","_col2"]
                              <-Map 5 [SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_103]
                                  PartitionCols:_col0
                                  Select Operator [SEL_102] (rows=1957 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_101] (rows=1957 width=8)
                                      predicate:d_year BETWEEN 1999 AND 2001
                                      TableScan [TS_3] (rows=73049 width=8)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_111]
                                  PartitionCols:_col0
                                  Select Operator [SEL_110] (rows=550076554 width=114)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_109] (rows=550076554 width=114)
                                      predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_7_date_dim_d_date_sk_min) AND DynamicValue(RS_7_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_7_date_dim_d_date_sk_bloom_filter)))
                                      TableScan [TS_0] (rows=575995635 width=114)
                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                                      <-Reducer 6 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_108]
                                          Group By Operator [GBY_107] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 5 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_106]
                                              Group By Operator [GBY_105] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_104] (rows=1957 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_102]
                    <-Reducer 8 [CONTAINS]
                      Reduce Output Operator [RS_94]
                        Group By Operator [GBY_93] (rows=1 width=120)
                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                          Select Operator [SEL_92] (rows=26270325 width=44)
                            Output:["_col0"]
                            Select Operator [SEL_90] (rows=7676736 width=94)
                              Output:["_col0","_col1"]
                              Merge Join Operator [MERGEJOIN_89] (rows=7676736 width=94)
                                Conds:RS_125._col0=RS_117._col0(Inner),Output:["_col1","_col2"]
                              <-Map 9 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_117]
                                  PartitionCols:_col0
                                  Select Operator [SEL_116] (rows=1957 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_115] (rows=1957 width=8)
                                      predicate:d_year BETWEEN 1998 AND 2000
                                      TableScan [TS_13] (rows=73049 width=8)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                              <-Map 7 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_125]
                                  PartitionCols:_col0
                                  Select Operator [SEL_124] (rows=286549727 width=119)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_123] (rows=286549727 width=119)
                                      predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_17_date_dim_d_date_sk_min) AND DynamicValue(RS_17_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_17_date_dim_d_date_sk_bloom_filter)))
                                      TableScan [TS_10] (rows=287989836 width=119)
                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                      <-Reducer 10 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_122]
                                          Group By Operator [GBY_121] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_120]
                                              Group By Operator [GBY_119] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_118] (rows=1957 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_116]
        Stage-0
          Move Operator
             Please refer to the previous Stage-1

