Warning: Shuffle Join MERGEJOIN[1202][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[1209][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 16' is a cross product
Warning: Shuffle Join MERGEJOIN[1216][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 22' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE)
Map 60 <- Reducer 43 (BROADCAST_EDGE)
Map 61 <- Reducer 49 (BROADCAST_EDGE)
Map 63 <- Reducer 68 (BROADCAST_EDGE)
Map 69 <- Reducer 74 (BROADCAST_EDGE)
Map 75 <- Reducer 17 (BROADCAST_EDGE)
Map 76 <- Reducer 23 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 10 (SIMPLE_EDGE), Map 75 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 14 <- Map 62 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 55 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 17 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 10 (SIMPLE_EDGE), Map 76 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE), Reducer 37 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 20 <- Map 62 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (CUSTOM_SIMPLE_EDGE), Reducer 58 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 23 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 10 (SIMPLE_EDGE), Map 59 (SIMPLE_EDGE)
Reducer 25 <- Map 62 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 28 <- Union 27 (SIMPLE_EDGE)
Reducer 29 <- Map 62 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 30 <- Reducer 25 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 32 <- Union 31 (SIMPLE_EDGE)
Reducer 33 <- Map 62 (SIMPLE_EDGE), Reducer 32 (SIMPLE_EDGE)
Reducer 34 <- Reducer 25 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 36 <- Union 35 (SIMPLE_EDGE)
Reducer 37 <- Map 62 (SIMPLE_EDGE), Reducer 36 (SIMPLE_EDGE)
Reducer 38 <- Map 10 (SIMPLE_EDGE), Map 60 (SIMPLE_EDGE)
Reducer 39 <- Map 62 (SIMPLE_EDGE), Reducer 38 (SIMPLE_EDGE)
Reducer 4 <- Map 62 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Reducer 39 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 41 <- Reducer 39 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 42 <- Reducer 39 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 43 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 44 <- Map 10 (SIMPLE_EDGE), Map 61 (SIMPLE_EDGE)
Reducer 45 <- Map 62 (SIMPLE_EDGE), Reducer 44 (SIMPLE_EDGE)
Reducer 46 <- Reducer 45 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 47 <- Reducer 45 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 48 <- Reducer 45 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 49 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 50 <- Map 10 (SIMPLE_EDGE), Map 59 (SIMPLE_EDGE), Union 51 (CONTAINS)
Reducer 52 <- Union 51 (CUSTOM_SIMPLE_EDGE)
Reducer 53 <- Map 10 (SIMPLE_EDGE), Map 59 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 55 <- Union 54 (CUSTOM_SIMPLE_EDGE)
Reducer 56 <- Map 10 (SIMPLE_EDGE), Map 59 (SIMPLE_EDGE), Union 57 (CONTAINS)
Reducer 58 <- Union 57 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE), Reducer 52 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 64 <- Map 63 (SIMPLE_EDGE), Map 67 (SIMPLE_EDGE), Union 51 (CONTAINS)
Reducer 65 <- Map 63 (SIMPLE_EDGE), Map 67 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 66 <- Map 63 (SIMPLE_EDGE), Map 67 (SIMPLE_EDGE), Union 57 (CONTAINS)
Reducer 68 <- Map 67 (CUSTOM_SIMPLE_EDGE)
Reducer 70 <- Map 69 (SIMPLE_EDGE), Map 73 (SIMPLE_EDGE), Union 51 (CONTAINS)
Reducer 71 <- Map 69 (SIMPLE_EDGE), Map 73 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 72 <- Map 69 (SIMPLE_EDGE), Map 73 (SIMPLE_EDGE), Union 57 (CONTAINS)
Reducer 74 <- Map 73 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_1386]
        Limit [LIM_1385] (rows=100 width=223)
          Number of rows:100
          Select Operator [SEL_1384] (rows=304320 width=222)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1383]
              Select Operator [SEL_1382] (rows=304320 width=222)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1381] (rows=304320 width=230)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 7 [SIMPLE_EDGE]
                  <-Reducer 16 [CONTAINS]
                    Reduce Output Operator [RS_1215]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1214] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1213] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1211] (rows=40576 width=222)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1210] (rows=40576 width=243)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1209] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1398]
                                  Filter Operator [FIL_1397] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1396] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_242]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_241] (rows=486912 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_239] (rows=7790806 width=106)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1182] (rows=7790806 width=106)
                                              Conds:RS_236._col1=RS_1364._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                            <-Map 62 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1364]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1355] (rows=462000 width=15)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                  TableScan [TS_81] (rows=462000 width=15)
                                                    default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                            <-Reducer 13 [SIMPLE_EDGE]
                                              SHUFFLE [RS_236]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1181] (rows=7790806 width=98)
                                                  Conds:RS_233._col1=RS_234._col0(Left Semi),Output:["_col1","_col2","_col3"]
                                                <-Reducer 12 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_233]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1173] (rows=7790806 width=98)
                                                      Conds:RS_1391._col0=RS_1319._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1319]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1315] (rows=50 width=12)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_1313] (rows=50 width=12)
                                                            predicate:((d_year = 2000) and (d_moy = 11))
                                                            TableScan [TS_3] (rows=73049 width=12)
                                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                    <-Map 75 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1391]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1390] (rows=286549727 width=123)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1389] (rows=286549727 width=123)
                                                            predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_229_date_dim_d_date_sk_min) AND DynamicValue(RS_229_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_229_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_145] (rows=287989836 width=123)
                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                            <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1388]
                                                                Group By Operator [GBY_1387] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_1337]
                                                                    Group By Operator [GBY_1332] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1320] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1315]
                                                <-Reducer 33 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_234]
                                                    PartitionCols:_col0
                                                    Group By Operator [GBY_232] (rows=362 width=4)
                                                      Output:["_col0"],keys:_col0
                                                      Merge Join Operator [MERGEJOIN_1180] (rows=724 width=4)
                                                        Conds:RS_1372._col1, _col2, _col3=RS_1395._col0, _col1, _col2(Inner),Output:["_col0"]
                                                      <-Map 62 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1372]
                                                          PartitionCols:_col1, _col2, _col3
                                                          Select Operator [SEL_1365] (rows=458612 width=15)
                                                            Output:["_col0","_col1","_col2","_col3"]
                                                            Filter Operator [FIL_1356] (rows=458612 width=15)
                                                              predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                               Please refer to the previous TableScan [TS_81]
                                                      <-Reducer 32 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1395]
                                                          PartitionCols:_col0, _col1, _col2
                                                          Select Operator [SEL_1394] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_1393] (rows=1 width=20)
                                                              predicate:(_col3 = 3L)
                                                              Group By Operator [GBY_1392] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                              <-Union 31 [SIMPLE_EDGE]
                                                                <-Reducer 30 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1432]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1431] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1430] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 25 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_171]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                          Group By Operator [GBY_25] (rows=121728 width=19)
                                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                            Merge Join Operator [MERGEJOIN_1162] (rows=14628613 width=11)
                                                                              Conds:RS_21._col1=RS_1369._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                            <-Map 62 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1369]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1361] (rows=458612 width=15)
                                                                                  Output:["_col0","_col1","_col2","_col3"]
                                                                                  Filter Operator [FIL_1352] (rows=458612 width=15)
                                                                                    predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                                     Please refer to the previous TableScan [TS_81]
                                                                            <-Reducer 24 [SIMPLE_EDGE]
                                                                              SHUFFLE [RS_21]
                                                                                PartitionCols:_col1
                                                                                Merge Join Operator [MERGEJOIN_1161] (rows=14736682 width=4)
                                                                                  Conds:RS_1423._col0=RS_1323._col0(Inner),Output:["_col1"]
                                                                                <-Map 10 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1323]
                                                                                    PartitionCols:_col0
                                                                                    Select Operator [SEL_1316] (rows=1957 width=4)
                                                                                      Output:["_col0"]
                                                                                      Filter Operator [FIL_1314] (rows=1957 width=8)
                                                                                        predicate:d_year BETWEEN 1999 AND 2001
                                                                                         Please refer to the previous TableScan [TS_3]
                                                                                <-Map 59 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1423]
                                                                                    PartitionCols:_col0
                                                                                    Select Operator [SEL_1421] (rows=550076554 width=7)
                                                                                      Output:["_col0","_col1"]
                                                                                      Filter Operator [FIL_1419] (rows=550076554 width=7)
                                                                                        predicate:ss_sold_date_sk is not null
                                                                                        TableScan [TS_9] (rows=575995635 width=7)
                                                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                                <-Reducer 41 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1446]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1445] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1444] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 39 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_191]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                          Group By Operator [GBY_45] (rows=121728 width=19)
                                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                            Merge Join Operator [MERGEJOIN_1164] (rows=7620440 width=11)
                                                                              Conds:RS_41._col1=RS_1370._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                            <-Map 62 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1370]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1362] (rows=458612 width=15)
                                                                                  Output:["_col0","_col1","_col2","_col3"]
                                                                                  Filter Operator [FIL_1353] (rows=458612 width=15)
                                                                                    predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                                     Please refer to the previous TableScan [TS_81]
                                                                            <-Reducer 38 [SIMPLE_EDGE]
                                                                              SHUFFLE [RS_41]
                                                                                PartitionCols:_col1
                                                                                Merge Join Operator [MERGEJOIN_1163] (rows=7676736 width=4)
                                                                                  Conds:RS_1440._col0=RS_1324._col0(Inner),Output:["_col1"]
                                                                                <-Map 10 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1324]
                                                                                    PartitionCols:_col0
                                                                                     Please refer to the previous Select Operator [SEL_1316]
                                                                                <-Map 60 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1440]
                                                                                    PartitionCols:_col0
                                                                                    Select Operator [SEL_1439] (rows=286549727 width=7)
                                                                                      Output:["_col0","_col1"]
                                                                                      Filter Operator [FIL_1438] (rows=286549727 width=7)
                                                                                        predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_39_d2_d_date_sk_min) AND DynamicValue(RS_39_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_39_d2_d_date_sk_bloom_filter)))
                                                                                        TableScan [TS_29] (rows=287989836 width=7)
                                                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                        <-Reducer 43 [BROADCAST_EDGE] vectorized
                                                                                          BROADCAST [RS_1437]
                                                                                            Group By Operator [GBY_1436] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                            <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                              SHUFFLE [RS_1339]
                                                                                                Group By Operator [GBY_1334] (rows=1 width=12)
                                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                  Select Operator [SEL_1325] (rows=1957 width=4)
                                                                                                    Output:["_col0"]
                                                                                                     Please refer to the previous Select Operator [SEL_1316]
                                                                <-Reducer 47 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1460]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1459] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1458] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 45 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_212]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                          Group By Operator [GBY_66] (rows=121728 width=19)
                                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                            Merge Join Operator [MERGEJOIN_1166] (rows=3828623 width=11)
                                                                              Conds:RS_62._col1=RS_1371._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                            <-Map 62 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1371]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1363] (rows=458612 width=15)
                                                                                  Output:["_col0","_col1","_col2","_col3"]
                                                                                  Filter Operator [FIL_1354] (rows=458612 width=15)
                                                                                    predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                                     Please refer to the previous TableScan [TS_81]
                                                                            <-Reducer 44 [SIMPLE_EDGE]
                                                                              SHUFFLE [RS_62]
                                                                                PartitionCols:_col1
                                                                                Merge Join Operator [MERGEJOIN_1165] (rows=3856907 width=4)
                                                                                  Conds:RS_1454._col0=RS_1326._col0(Inner),Output:["_col1"]
                                                                                <-Map 10 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1326]
                                                                                    PartitionCols:_col0
                                                                                     Please refer to the previous Select Operator [SEL_1316]
                                                                                <-Map 61 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1454]
                                                                                    PartitionCols:_col0
                                                                                    Select Operator [SEL_1453] (rows=143966864 width=7)
                                                                                      Output:["_col0","_col1"]
                                                                                      Filter Operator [FIL_1452] (rows=143966864 width=7)
                                                                                        predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_60_d3_d_date_sk_min) AND DynamicValue(RS_60_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_60_d3_d_date_sk_bloom_filter)))
                                                                                        TableScan [TS_50] (rows=144002668 width=7)
                                                                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                        <-Reducer 49 [BROADCAST_EDGE] vectorized
                                                                                          BROADCAST [RS_1451]
                                                                                            Group By Operator [GBY_1450] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                            <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                              SHUFFLE [RS_1340]
                                                                                                Group By Operator [GBY_1335] (rows=1 width=12)
                                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                  Select Operator [SEL_1327] (rows=1957 width=4)
                                                                                                    Output:["_col0"]
                                                                                                     Please refer to the previous Select Operator [SEL_1316]
                              <-Reducer 55 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1402]
                                  Select Operator [SEL_1401] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1400] (rows=1 width=120)
                                      predicate:CAST( (_col0 / _col1) AS decimal(22,6)) is not null
                                      Group By Operator [GBY_1399] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 54 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 53 [CONTAINS]
                                          Reduce Output Operator [RS_1270]
                                            Group By Operator [GBY_1269] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1268] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1266] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1265] (rows=14736682 width=0)
                                                    Conds:RS_1425._col0=RS_1329._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1329]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1316]
                                                  <-Map 59 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1425]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1422] (rows=550076554 width=114)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1420] (rows=550076554 width=114)
                                                          predicate:(ss_sold_date_sk is not null and ss_sold_date_sk is not null)
                                                           Please refer to the previous TableScan [TS_9]
                                        <-Reducer 65 [CONTAINS]
                                          Reduce Output Operator [RS_1288]
                                            Group By Operator [GBY_1287] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1286] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1284] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1283] (rows=7676736 width=94)
                                                    Conds:RS_1477._col0=RS_1468._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1468]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1465] (rows=1957 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1464] (rows=1957 width=8)
                                                          predicate:d_year BETWEEN 1998 AND 2000
                                                          TableScan [TS_114] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Map 63 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1477]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1475] (rows=286549727 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1474] (rows=286549727 width=119)
                                                          predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_118_date_dim_d_date_sk_min) AND DynamicValue(RS_118_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_118_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_111] (rows=287989836 width=119)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                                          <-Reducer 68 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1473]
                                                              Group By Operator [GBY_1472] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 67 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1471]
                                                                  Group By Operator [GBY_1470] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1467] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1465]
                                        <-Reducer 71 [CONTAINS]
                                          Reduce Output Operator [RS_1306]
                                            Group By Operator [GBY_1305] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1304] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1302] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1301] (rows=3856907 width=114)
                                                    Conds:RS_1492._col0=RS_1483._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1483]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1480] (rows=1957 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1479] (rows=1957 width=8)
                                                          predicate:d_year BETWEEN 1998 AND 2000
                                                          TableScan [TS_125] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Map 69 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1492]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1490] (rows=143966864 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1489] (rows=143966864 width=119)
                                                          predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_129_date_dim_d_date_sk_min) AND DynamicValue(RS_129_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_129_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_122] (rows=144002668 width=119)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                                          <-Reducer 74 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1488]
                                                              Group By Operator [GBY_1487] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 73 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1486]
                                                                  Group By Operator [GBY_1485] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1482] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1480]
                  <-Reducer 22 [CONTAINS]
                    Reduce Output Operator [RS_1222]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1221] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1220] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1218] (rows=40576 width=218)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1217] (rows=40576 width=243)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1216] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1414]
                                  Filter Operator [FIL_1413] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1412] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 20 [SIMPLE_EDGE]
                                      SHUFFLE [RS_388]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_387] (rows=243456 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_385] (rows=3942084 width=126)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1195] (rows=3942084 width=126)
                                              Conds:RS_382._col1=RS_1366._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                            <-Map 62 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1366]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1357] (rows=462000 width=15)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                   Please refer to the previous TableScan [TS_81]
                                            <-Reducer 19 [SIMPLE_EDGE]
                                              SHUFFLE [RS_382]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1194] (rows=3942084 width=118)
                                                  Conds:RS_379._col1=RS_380._col0(Left Semi),Output:["_col1","_col2","_col3"]
                                                <-Reducer 18 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_379]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1186] (rows=3942084 width=118)
                                                      Conds:RS_1407._col0=RS_1321._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1321]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1315]
                                                    <-Map 76 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1407]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1406] (rows=143966864 width=123)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1405] (rows=143966864 width=123)
                                                            predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_375_date_dim_d_date_sk_min) AND DynamicValue(RS_375_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_375_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_291] (rows=144002668 width=123)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                            <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1404]
                                                                Group By Operator [GBY_1403] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_1338]
                                                                    Group By Operator [GBY_1333] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1322] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1315]
                                                <-Reducer 37 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_380]
                                                    PartitionCols:_col0
                                                    Group By Operator [GBY_378] (rows=362 width=4)
                                                      Output:["_col0"],keys:_col0
                                                      Merge Join Operator [MERGEJOIN_1193] (rows=724 width=4)
                                                        Conds:RS_1373._col1, _col2, _col3=RS_1411._col0, _col1, _col2(Inner),Output:["_col0"]
                                                      <-Map 62 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1373]
                                                          PartitionCols:_col1, _col2, _col3
                                                          Select Operator [SEL_1367] (rows=458612 width=15)
                                                            Output:["_col0","_col1","_col2","_col3"]
                                                            Filter Operator [FIL_1358] (rows=458612 width=15)
                                                              predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                               Please refer to the previous TableScan [TS_81]
                                                      <-Reducer 36 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1411]
                                                          PartitionCols:_col0, _col1, _col2
                                                          Select Operator [SEL_1410] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_1409] (rows=1 width=20)
                                                              predicate:(_col3 = 3L)
                                                              Group By Operator [GBY_1408] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                              <-Union 35 [SIMPLE_EDGE]
                                                                <-Reducer 34 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1435]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1434] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1433] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 25 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_317]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                           Please refer to the previous Group By Operator [GBY_25]
                                                                <-Reducer 42 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1449]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1448] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1447] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 39 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_337]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                           Please refer to the previous Group By Operator [GBY_45]
                                                                <-Reducer 48 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1463]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1462] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1461] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 45 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_358]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                           Please refer to the previous Group By Operator [GBY_66]
                              <-Reducer 58 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1418]
                                  Select Operator [SEL_1417] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1416] (rows=1 width=120)
                                      predicate:CAST( (_col0 / _col1) AS decimal(22,6)) is not null
                                      Group By Operator [GBY_1415] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 57 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 56 [CONTAINS]
                                          Reduce Output Operator [RS_1276]
                                            Group By Operator [GBY_1275] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1274] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1272] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1271] (rows=14736682 width=0)
                                                    Conds:RS_1426._col0=RS_1330._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1330]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1316]
                                                  <-Map 59 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1426]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1422]
                                        <-Reducer 66 [CONTAINS]
                                          Reduce Output Operator [RS_1294]
                                            Group By Operator [GBY_1293] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1292] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1290] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1289] (rows=7676736 width=94)
                                                    Conds:RS_1478._col0=RS_1469._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1469]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1465]
                                                  <-Map 63 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1478]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1475]
                                        <-Reducer 72 [CONTAINS]
                                          Reduce Output Operator [RS_1312]
                                            Group By Operator [GBY_1311] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1310] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1308] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1307] (rows=3856907 width=114)
                                                    Conds:RS_1493._col0=RS_1484._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1484]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1480]
                                                  <-Map 69 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1493]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1490]
                  <-Reducer 6 [CONTAINS]
                    Reduce Output Operator [RS_1208]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1207] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1206] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1204] (rows=40576 width=220)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1203] (rows=40576 width=243)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1202] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1376]
                                  Filter Operator [FIL_1375] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1374] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 4 [SIMPLE_EDGE]
                                      SHUFFLE [RS_97]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_96] (rows=121728 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_94] (rows=15062131 width=11)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1169] (rows=15062131 width=11)
                                              Conds:RS_91._col1=RS_1359._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                            <-Map 62 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1359]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1350] (rows=462000 width=15)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                   Please refer to the previous TableScan [TS_81]
                                            <-Reducer 3 [SIMPLE_EDGE]
                                              SHUFFLE [RS_91]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1168] (rows=15062131 width=4)
                                                  Conds:RS_88._col1=RS_89._col0(Left Semi),Output:["_col1","_col2","_col3"]
                                                <-Reducer 2 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_88]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1160] (rows=15062131 width=4)
                                                      Conds:RS_1345._col0=RS_1317._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1317]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1315]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1345]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1344] (rows=550076554 width=118)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1343] (rows=550076554 width=118)
                                                            predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_84_date_dim_d_date_sk_min) AND DynamicValue(RS_84_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_84_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_0] (rows=575995635 width=118)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                            <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1342]
                                                                Group By Operator [GBY_1341] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_1336]
                                                                    Group By Operator [GBY_1331] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1318] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1315]
                                                <-Reducer 29 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_89]
                                                    PartitionCols:_col0
                                                    Group By Operator [GBY_87] (rows=362 width=4)
                                                      Output:["_col0"],keys:_col0
                                                      Merge Join Operator [MERGEJOIN_1167] (rows=724 width=4)
                                                        Conds:RS_1368._col1, _col2, _col3=RS_1349._col0, _col1, _col2(Inner),Output:["_col0"]
                                                      <-Map 62 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1368]
                                                          PartitionCols:_col1, _col2, _col3
                                                          Select Operator [SEL_1360] (rows=458612 width=15)
                                                            Output:["_col0","_col1","_col2","_col3"]
                                                            Filter Operator [FIL_1351] (rows=458612 width=15)
                                                              predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                               Please refer to the previous TableScan [TS_81]
                                                      <-Reducer 28 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1349]
                                                          PartitionCols:_col0, _col1, _col2
                                                          Select Operator [SEL_1348] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_1347] (rows=1 width=20)
                                                              predicate:(_col3 = 3L)
                                                              Group By Operator [GBY_1346] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                              <-Union 27 [SIMPLE_EDGE]
                                                                <-Reducer 26 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1429]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1428] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1427] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 25 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_26]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                           Please refer to the previous Group By Operator [GBY_25]
                                                                <-Reducer 40 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1443]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1442] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1441] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 39 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_46]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                           Please refer to the previous Group By Operator [GBY_45]
                                                                <-Reducer 46 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1457]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1456] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1455] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 45 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_67]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                           Please refer to the previous Group By Operator [GBY_66]
                              <-Reducer 52 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1380]
                                  Select Operator [SEL_1379] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1378] (rows=1 width=120)
                                      predicate:CAST( (_col0 / _col1) AS decimal(22,6)) is not null
                                      Group By Operator [GBY_1377] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 51 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 50 [CONTAINS]
                                          Reduce Output Operator [RS_1264]
                                            Group By Operator [GBY_1263] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1262] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1260] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1259] (rows=14736682 width=0)
                                                    Conds:RS_1424._col0=RS_1328._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1328]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1316]
                                                  <-Map 59 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1424]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1422]
                                        <-Reducer 64 [CONTAINS]
                                          Reduce Output Operator [RS_1282]
                                            Group By Operator [GBY_1281] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1280] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1278] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1277] (rows=7676736 width=94)
                                                    Conds:RS_1476._col0=RS_1466._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1466]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1465]
                                                  <-Map 63 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1476]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1475]
                                        <-Reducer 70 [CONTAINS]
                                          Reduce Output Operator [RS_1300]
                                            Group By Operator [GBY_1299] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1298] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1296] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1295] (rows=3856907 width=114)
                                                    Conds:RS_1491._col0=RS_1481._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1481]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1480]
                                                  <-Map 69 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1491]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1490]

