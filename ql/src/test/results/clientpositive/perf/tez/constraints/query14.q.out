Warning: Shuffle Join MERGEJOIN[1232][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 7' is a cross product
Warning: Shuffle Join MERGEJOIN[1239][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 18' is a cross product
Warning: Shuffle Join MERGEJOIN[1246][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 25' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 12 (BROADCAST_EDGE)
Map 64 <- Reducer 45 (BROADCAST_EDGE)
Map 65 <- Reducer 52 (BROADCAST_EDGE)
Map 66 <- Reducer 71 (BROADCAST_EDGE)
Map 72 <- Reducer 77 (BROADCAST_EDGE)
Map 78 <- Reducer 19 (BROADCAST_EDGE)
Map 79 <- Reducer 26 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 12 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Map 11 (SIMPLE_EDGE), Map 78 (SIMPLE_EDGE)
Reducer 14 <- Map 62 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE), Reducer 35 (SIMPLE_EDGE)
Reducer 16 <- Map 62 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 58 (CUSTOM_SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 19 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 11 (SIMPLE_EDGE)
Reducer 20 <- Map 11 (SIMPLE_EDGE), Map 79 (SIMPLE_EDGE)
Reducer 21 <- Map 62 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE), Reducer 38 (SIMPLE_EDGE)
Reducer 23 <- Map 62 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (CUSTOM_SIMPLE_EDGE), Reducer 61 (CUSTOM_SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 26 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Map 11 (SIMPLE_EDGE), Map 63 (SIMPLE_EDGE)
Reducer 28 <- Map 62 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Reducer 28 (SIMPLE_EDGE), Union 30 (CONTAINS)
Reducer 3 <- Map 62 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 31 <- Union 30 (SIMPLE_EDGE)
Reducer 32 <- Map 62 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 33 <- Reducer 32 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 35 <- Union 34 (SIMPLE_EDGE)
Reducer 36 <- Reducer 32 (SIMPLE_EDGE), Union 37 (CONTAINS)
Reducer 38 <- Union 37 (SIMPLE_EDGE)
Reducer 39 <- Map 11 (SIMPLE_EDGE), Map 64 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 40 <- Map 62 (SIMPLE_EDGE), Reducer 39 (SIMPLE_EDGE)
Reducer 41 <- Reducer 40 (SIMPLE_EDGE), Union 30 (CONTAINS)
Reducer 42 <- Map 62 (SIMPLE_EDGE), Reducer 39 (SIMPLE_EDGE)
Reducer 43 <- Reducer 42 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 44 <- Reducer 42 (SIMPLE_EDGE), Union 37 (CONTAINS)
Reducer 45 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 46 <- Map 11 (SIMPLE_EDGE), Map 65 (SIMPLE_EDGE)
Reducer 47 <- Map 62 (SIMPLE_EDGE), Reducer 46 (SIMPLE_EDGE)
Reducer 48 <- Reducer 47 (SIMPLE_EDGE), Union 30 (CONTAINS)
Reducer 49 <- Map 62 (SIMPLE_EDGE), Reducer 46 (SIMPLE_EDGE)
Reducer 5 <- Map 62 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 50 <- Reducer 49 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 51 <- Reducer 49 (SIMPLE_EDGE), Union 37 (CONTAINS)
Reducer 52 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 53 <- Map 11 (SIMPLE_EDGE), Map 63 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 55 <- Union 54 (CUSTOM_SIMPLE_EDGE)
Reducer 56 <- Map 11 (SIMPLE_EDGE), Map 63 (SIMPLE_EDGE), Union 57 (CONTAINS)
Reducer 58 <- Union 57 (CUSTOM_SIMPLE_EDGE)
Reducer 59 <- Map 11 (SIMPLE_EDGE), Map 63 (SIMPLE_EDGE), Union 60 (CONTAINS)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 61 <- Union 60 (CUSTOM_SIMPLE_EDGE)
Reducer 67 <- Map 66 (SIMPLE_EDGE), Map 70 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 68 <- Map 66 (SIMPLE_EDGE), Map 70 (SIMPLE_EDGE), Union 57 (CONTAINS)
Reducer 69 <- Map 66 (SIMPLE_EDGE), Map 70 (SIMPLE_EDGE), Union 60 (CONTAINS)
Reducer 7 <- Reducer 55 (CUSTOM_SIMPLE_EDGE), Reducer 6 (CUSTOM_SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 71 <- Map 70 (CUSTOM_SIMPLE_EDGE)
Reducer 73 <- Map 72 (SIMPLE_EDGE), Map 76 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 74 <- Map 72 (SIMPLE_EDGE), Map 76 (SIMPLE_EDGE), Union 57 (CONTAINS)
Reducer 75 <- Map 72 (SIMPLE_EDGE), Map 76 (SIMPLE_EDGE), Union 60 (CONTAINS)
Reducer 77 <- Map 76 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Union 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 10 vectorized
      File Output Operator [FS_1419]
        Limit [LIM_1418] (rows=100 width=220)
          Number of rows:100
          Select Operator [SEL_1417] (rows=205 width=220)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 9 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1416]
              Select Operator [SEL_1415] (rows=205 width=220)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1414] (rows=205 width=228)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 8 [SIMPLE_EDGE]
                  <-Reducer 18 [CONTAINS]
                    Reduce Output Operator [RS_1245]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1244] (rows=205 width=228)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1243] (rows=82 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1241] (rows=24 width=222)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1240] (rows=24 width=243)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1239] (rows=72 width=243)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1431]
                                  Filter Operator [FIL_1430] (rows=72 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1429] (rows=72 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 16 [SIMPLE_EDGE]
                                      SHUFFLE [RS_236]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_235] (rows=72 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_233] (rows=12217 width=10)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1212] (rows=12217 width=10)
                                              Conds:RS_230._col1=RS_1391._col0(Inner),Output:["_col2","_col3","_col13","_col14","_col15"]
                                            <-Map 62 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1391]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1382] (rows=462000 width=15)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                  TableScan [TS_6] (rows=462000 width=15)
                                                    default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                            <-Reducer 15 [SIMPLE_EDGE]
                                              SHUFFLE [RS_230]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1211] (rows=12217 width=4)
                                                  Conds:RS_227._col6, _col7, _col8=RS_1428._col0, _col1, _col2(Inner),Output:["_col1","_col2","_col3"]
                                                <-Reducer 14 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_227]
                                                    PartitionCols:_col6, _col7, _col8
                                                    Merge Join Operator [MERGEJOIN_1204] (rows=7733674 width=110)
                                                      Conds:RS_224._col1=RS_1398._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                    <-Map 62 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1398]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1387] (rows=458612 width=15)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1378] (rows=458612 width=15)
                                                            predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                             Please refer to the previous TableScan [TS_6]
                                                    <-Reducer 13 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_224]
                                                        PartitionCols:_col1
                                                        Merge Join Operator [MERGEJOIN_1203] (rows=7790806 width=98)
                                                          Conds:RS_1424._col0=RS_1349._col0(Inner),Output:["_col1","_col2","_col3"]
                                                        <-Map 11 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1349]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1345] (rows=50 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_1343] (rows=50 width=12)
                                                                predicate:((d_year = 2000) and (d_moy = 11))
                                                                TableScan [TS_3] (rows=73049 width=12)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                        <-Map 78 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1424]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1423] (rows=286549727 width=123)
                                                              Output:["_col0","_col1","_col2","_col3"]
                                                              Filter Operator [FIL_1422] (rows=286549727 width=123)
                                                                predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_222_date_dim_d_date_sk_min) AND DynamicValue(RS_222_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_222_date_dim_d_date_sk_bloom_filter)))
                                                                TableScan [TS_142] (rows=287989836 width=123)
                                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                                <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_1421]
                                                                    Group By Operator [GBY_1420] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_1367]
                                                                        Group By Operator [GBY_1362] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_1350] (rows=50 width=4)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_1345]
                                                <-Reducer 35 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1428]
                                                    PartitionCols:_col0, _col1, _col2
                                                    Select Operator [SEL_1427] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1426] (rows=1 width=20)
                                                        predicate:(_col3 = 3L)
                                                        Group By Operator [GBY_1425] (rows=121728 width=19)
                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                        <-Union 34 [SIMPLE_EDGE]
                                                          <-Reducer 33 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1465]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1464] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1463] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 32 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_168]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_167] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1206] (rows=14628613 width=11)
                                                                        Conds:RS_163._col1=RS_1399._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 62 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1399]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1388] (rows=458612 width=15)
                                                                            Output:["_col0","_col1","_col2","_col3"]
                                                                            Filter Operator [FIL_1379] (rows=458612 width=15)
                                                                              predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                               Please refer to the previous TableScan [TS_6]
                                                                      <-Reducer 27 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_163]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_1192] (rows=14736682 width=4)
                                                                            Conds:RS_1456._col0=RS_1353._col0(Inner),Output:["_col1"]
                                                                          <-Map 11 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1353]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1346] (rows=1957 width=4)
                                                                                Output:["_col0"]
                                                                                Filter Operator [FIL_1344] (rows=1957 width=8)
                                                                                  predicate:d_year BETWEEN 1999 AND 2001
                                                                                   Please refer to the previous TableScan [TS_3]
                                                                          <-Map 63 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1456]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1454] (rows=550076554 width=7)
                                                                                Output:["_col0","_col1"]
                                                                                Filter Operator [FIL_1452] (rows=550076554 width=7)
                                                                                  predicate:ss_sold_date_sk is not null
                                                                                  TableScan [TS_9] (rows=575995635 width=7)
                                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                          <-Reducer 43 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1479]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1478] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1477] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 42 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_188]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_187] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1208] (rows=7620440 width=11)
                                                                        Conds:RS_183._col1=RS_1400._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 62 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1400]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1389] (rows=458612 width=15)
                                                                            Output:["_col0","_col1","_col2","_col3"]
                                                                            Filter Operator [FIL_1380] (rows=458612 width=15)
                                                                              predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                               Please refer to the previous TableScan [TS_6]
                                                                      <-Reducer 39 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_183]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_1194] (rows=7676736 width=4)
                                                                            Conds:RS_1473._col0=RS_1354._col0(Inner),Output:["_col1"]
                                                                          <-Map 11 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1354]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1346]
                                                                          <-Map 64 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1473]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1472] (rows=286549727 width=7)
                                                                                Output:["_col0","_col1"]
                                                                                Filter Operator [FIL_1471] (rows=286549727 width=7)
                                                                                  predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_39_d2_d_date_sk_min) AND DynamicValue(RS_39_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_39_d2_d_date_sk_bloom_filter)))
                                                                                  TableScan [TS_29] (rows=287989836 width=7)
                                                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                  <-Reducer 45 [BROADCAST_EDGE] vectorized
                                                                                    BROADCAST [RS_1470]
                                                                                      Group By Operator [GBY_1469] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                      <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                        SHUFFLE [RS_1369]
                                                                                          Group By Operator [GBY_1364] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                            Select Operator [SEL_1355] (rows=1957 width=4)
                                                                                              Output:["_col0"]
                                                                                               Please refer to the previous Select Operator [SEL_1346]
                                                          <-Reducer 50 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1493]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1492] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1491] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 49 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_209]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_208] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1210] (rows=3828623 width=11)
                                                                        Conds:RS_204._col1=RS_1401._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 62 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1401]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1390] (rows=458612 width=15)
                                                                            Output:["_col0","_col1","_col2","_col3"]
                                                                            Filter Operator [FIL_1381] (rows=458612 width=15)
                                                                              predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                               Please refer to the previous TableScan [TS_6]
                                                                      <-Reducer 46 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_204]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_1196] (rows=3856907 width=4)
                                                                            Conds:RS_1487._col0=RS_1356._col0(Inner),Output:["_col1"]
                                                                          <-Map 11 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1356]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1346]
                                                                          <-Map 65 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1487]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1486] (rows=143966864 width=7)
                                                                                Output:["_col0","_col1"]
                                                                                Filter Operator [FIL_1485] (rows=143966864 width=7)
                                                                                  predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_60_d3_d_date_sk_min) AND DynamicValue(RS_60_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_60_d3_d_date_sk_bloom_filter)))
                                                                                  TableScan [TS_50] (rows=144002668 width=7)
                                                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                  <-Reducer 52 [BROADCAST_EDGE] vectorized
                                                                                    BROADCAST [RS_1484]
                                                                                      Group By Operator [GBY_1483] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                      <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                        SHUFFLE [RS_1370]
                                                                                          Group By Operator [GBY_1365] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                            Select Operator [SEL_1357] (rows=1957 width=4)
                                                                                              Output:["_col0"]
                                                                                               Please refer to the previous Select Operator [SEL_1346]
                              <-Reducer 58 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1435]
                                  Select Operator [SEL_1434] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1433] (rows=1 width=120)
                                      predicate:CAST( (_col0 / _col1) AS decimal(22,6)) is not null
                                      Group By Operator [GBY_1432] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 57 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 56 [CONTAINS]
                                          Reduce Output Operator [RS_1300]
                                            Group By Operator [GBY_1299] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1298] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1296] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1295] (rows=14736682 width=0)
                                                    Conds:RS_1458._col0=RS_1359._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 11 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1359]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1346]
                                                  <-Map 63 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1458]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1455] (rows=550076554 width=114)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1453] (rows=550076554 width=114)
                                                          predicate:(ss_sold_date_sk is not null and ss_sold_date_sk is not null)
                                                           Please refer to the previous TableScan [TS_9]
                                        <-Reducer 68 [CONTAINS]
                                          Reduce Output Operator [RS_1318]
                                            Group By Operator [GBY_1317] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1316] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1314] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1313] (rows=7676736 width=94)
                                                    Conds:RS_1510._col0=RS_1501._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 70 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1501]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1498] (rows=1957 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1497] (rows=1957 width=8)
                                                          predicate:d_year BETWEEN 1998 AND 2000
                                                          TableScan [TS_111] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Map 66 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1510]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1508] (rows=286549727 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1507] (rows=286549727 width=119)
                                                          predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_115_date_dim_d_date_sk_min) AND DynamicValue(RS_115_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_115_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_108] (rows=287989836 width=119)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                                          <-Reducer 71 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1506]
                                                              Group By Operator [GBY_1505] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 70 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1504]
                                                                  Group By Operator [GBY_1503] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1500] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1498]
                                        <-Reducer 74 [CONTAINS]
                                          Reduce Output Operator [RS_1336]
                                            Group By Operator [GBY_1335] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1334] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1332] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1331] (rows=3856907 width=114)
                                                    Conds:RS_1525._col0=RS_1516._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 76 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1516]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1513] (rows=1957 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1512] (rows=1957 width=8)
                                                          predicate:d_year BETWEEN 1998 AND 2000
                                                          TableScan [TS_122] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Map 72 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1525]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1523] (rows=143966864 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1522] (rows=143966864 width=119)
                                                          predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_126_date_dim_d_date_sk_min) AND DynamicValue(RS_126_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_126_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_119] (rows=144002668 width=119)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                                          <-Reducer 77 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1521]
                                                              Group By Operator [GBY_1520] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 76 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1519]
                                                                  Group By Operator [GBY_1518] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1515] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1513]
                  <-Reducer 25 [CONTAINS]
                    Reduce Output Operator [RS_1252]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1251] (rows=205 width=228)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1250] (rows=82 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1248] (rows=13 width=218)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1247] (rows=13 width=243)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1246] (rows=40 width=242)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1447]
                                  Filter Operator [FIL_1446] (rows=40 width=130)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1445] (rows=40 width=130)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 23 [SIMPLE_EDGE]
                                      SHUFFLE [RS_379]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_378] (rows=40 width=130)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_376] (rows=6181 width=9)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1225] (rows=6181 width=9)
                                              Conds:RS_373._col1=RS_1393._col0(Inner),Output:["_col2","_col3","_col13","_col14","_col15"]
                                            <-Map 62 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1393]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1384] (rows=462000 width=15)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                   Please refer to the previous TableScan [TS_6]
                                            <-Reducer 22 [SIMPLE_EDGE]
                                              SHUFFLE [RS_373]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1224] (rows=6181 width=4)
                                                  Conds:RS_370._col6, _col7, _col8=RS_1444._col0, _col1, _col2(Inner),Output:["_col1","_col2","_col3"]
                                                <-Reducer 21 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_370]
                                                    PartitionCols:_col6, _col7, _col8
                                                    Merge Join Operator [MERGEJOIN_1217] (rows=3913176 width=130)
                                                      Conds:RS_367._col1=RS_1402._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                    <-Map 62 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1402]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1392] (rows=458612 width=15)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1383] (rows=458612 width=15)
                                                            predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                             Please refer to the previous TableScan [TS_6]
                                                    <-Reducer 20 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_367]
                                                        PartitionCols:_col1
                                                        Merge Join Operator [MERGEJOIN_1216] (rows=3942084 width=118)
                                                          Conds:RS_1440._col0=RS_1351._col0(Inner),Output:["_col1","_col2","_col3"]
                                                        <-Map 11 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1351]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1345]
                                                        <-Map 79 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1440]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1439] (rows=143966864 width=123)
                                                              Output:["_col0","_col1","_col2","_col3"]
                                                              Filter Operator [FIL_1438] (rows=143966864 width=123)
                                                                predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_365_date_dim_d_date_sk_min) AND DynamicValue(RS_365_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_365_date_dim_d_date_sk_bloom_filter)))
                                                                TableScan [TS_285] (rows=144002668 width=123)
                                                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                                <-Reducer 26 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_1437]
                                                                    Group By Operator [GBY_1436] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_1368]
                                                                        Group By Operator [GBY_1363] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_1352] (rows=50 width=4)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_1345]
                                                <-Reducer 38 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1444]
                                                    PartitionCols:_col0, _col1, _col2
                                                    Select Operator [SEL_1443] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1442] (rows=1 width=20)
                                                        predicate:(_col3 = 3L)
                                                        Group By Operator [GBY_1441] (rows=121728 width=19)
                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                        <-Union 37 [SIMPLE_EDGE]
                                                          <-Reducer 36 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1468]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1467] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1466] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 32 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_311]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_167]
                                                          <-Reducer 44 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1482]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1481] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1480] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 42 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_331]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_187]
                                                          <-Reducer 51 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1496]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1495] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1494] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 49 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_352]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_208]
                              <-Reducer 61 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1451]
                                  Select Operator [SEL_1450] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1449] (rows=1 width=120)
                                      predicate:CAST( (_col0 / _col1) AS decimal(22,6)) is not null
                                      Group By Operator [GBY_1448] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 60 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 59 [CONTAINS]
                                          Reduce Output Operator [RS_1306]
                                            Group By Operator [GBY_1305] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1304] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1302] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1301] (rows=14736682 width=0)
                                                    Conds:RS_1459._col0=RS_1360._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 11 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1360]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1346]
                                                  <-Map 63 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1459]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1455]
                                        <-Reducer 69 [CONTAINS]
                                          Reduce Output Operator [RS_1324]
                                            Group By Operator [GBY_1323] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1322] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1320] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1319] (rows=7676736 width=94)
                                                    Conds:RS_1511._col0=RS_1502._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 70 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1502]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1498]
                                                  <-Map 66 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1511]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1508]
                                        <-Reducer 75 [CONTAINS]
                                          Reduce Output Operator [RS_1342]
                                            Group By Operator [GBY_1341] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1340] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1338] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1337] (rows=3856907 width=114)
                                                    Conds:RS_1526._col0=RS_1517._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 76 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1517]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1513]
                                                  <-Map 72 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1526]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1523]
                  <-Reducer 7 [CONTAINS]
                    Reduce Output Operator [RS_1238]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1237] (rows=205 width=228)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1236] (rows=82 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1234] (rows=45 width=220)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1233] (rows=45 width=243)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1232] (rows=136 width=243)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 55 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1413]
                                  Select Operator [SEL_1412] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1411] (rows=1 width=120)
                                      predicate:CAST( (_col0 / _col1) AS decimal(22,6)) is not null
                                      Group By Operator [GBY_1410] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 54 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 53 [CONTAINS]
                                          Reduce Output Operator [RS_1294]
                                            Group By Operator [GBY_1293] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1292] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1290] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1289] (rows=14736682 width=0)
                                                    Conds:RS_1457._col0=RS_1358._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 11 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1358]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1346]
                                                  <-Map 63 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1457]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1455]
                                        <-Reducer 67 [CONTAINS]
                                          Reduce Output Operator [RS_1312]
                                            Group By Operator [GBY_1311] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1310] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1308] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1307] (rows=7676736 width=94)
                                                    Conds:RS_1509._col0=RS_1499._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 70 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1499]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1498]
                                                  <-Map 66 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1509]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1508]
                                        <-Reducer 73 [CONTAINS]
                                          Reduce Output Operator [RS_1330]
                                            Group By Operator [GBY_1329] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1328] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1326] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1325] (rows=3856907 width=114)
                                                    Conds:RS_1524._col0=RS_1514._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 76 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1514]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1513]
                                                  <-Map 72 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1524]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1523]
                              <-Reducer 6 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1409]
                                  Filter Operator [FIL_1408] (rows=136 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1407] (rows=136 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 5 [SIMPLE_EDGE]
                                      SHUFFLE [RS_94]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_93] (rows=136 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_91] (rows=23620 width=11)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1199] (rows=23620 width=11)
                                              Conds:RS_88._col1=RS_1386._col0(Inner),Output:["_col2","_col3","_col13","_col14","_col15"]
                                            <-Map 62 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1386]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1377] (rows=462000 width=15)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                   Please refer to the previous TableScan [TS_6]
                                            <-Reducer 4 [SIMPLE_EDGE]
                                              SHUFFLE [RS_88]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1198] (rows=23620 width=4)
                                                  Conds:RS_85._col6, _col7, _col8=RS_1406._col0, _col1, _col2(Inner),Output:["_col1","_col2","_col3"]
                                                <-Reducer 3 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_85]
                                                    PartitionCols:_col6, _col7, _col8
                                                    Merge Join Operator [MERGEJOIN_1191] (rows=14951676 width=15)
                                                      Conds:RS_82._col1=RS_1394._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                    <-Map 62 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1394]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1385] (rows=458612 width=15)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1376] (rows=458612 width=15)
                                                            predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                             Please refer to the previous TableScan [TS_6]
                                                    <-Reducer 2 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_82]
                                                        PartitionCols:_col1
                                                        Merge Join Operator [MERGEJOIN_1190] (rows=15062131 width=4)
                                                          Conds:RS_1375._col0=RS_1347._col0(Inner),Output:["_col1","_col2","_col3"]
                                                        <-Map 11 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1347]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1345]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1375]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1374] (rows=550076554 width=118)
                                                              Output:["_col0","_col1","_col2","_col3"]
                                                              Filter Operator [FIL_1373] (rows=550076554 width=118)
                                                                predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_80_date_dim_d_date_sk_min) AND DynamicValue(RS_80_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_80_date_dim_d_date_sk_bloom_filter)))
                                                                TableScan [TS_0] (rows=575995635 width=118)
                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                                <-Reducer 12 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_1372]
                                                                    Group By Operator [GBY_1371] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_1366]
                                                                        Group By Operator [GBY_1361] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_1348] (rows=50 width=4)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_1345]
                                                <-Reducer 31 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1406]
                                                    PartitionCols:_col0, _col1, _col2
                                                    Select Operator [SEL_1405] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1404] (rows=1 width=20)
                                                        predicate:(_col3 = 3L)
                                                        Group By Operator [GBY_1403] (rows=121728 width=19)
                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                        <-Union 30 [SIMPLE_EDGE]
                                                          <-Reducer 29 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1462]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1461] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1460] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 28 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_26]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_25] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1193] (rows=14628613 width=11)
                                                                        Conds:RS_21._col1=RS_1395._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 62 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1395]
                                                                          PartitionCols:_col0
                                                                           Please refer to the previous Select Operator [SEL_1385]
                                                                      <-Reducer 27 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_21]
                                                                          PartitionCols:_col1
                                                                           Please refer to the previous Merge Join Operator [MERGEJOIN_1192]
                                                          <-Reducer 41 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1476]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1475] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1474] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 40 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_46]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_45] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1195] (rows=7620440 width=11)
                                                                        Conds:RS_41._col1=RS_1396._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 62 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1396]
                                                                          PartitionCols:_col0
                                                                           Please refer to the previous Select Operator [SEL_1385]
                                                                      <-Reducer 39 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_41]
                                                                          PartitionCols:_col1
                                                                           Please refer to the previous Merge Join Operator [MERGEJOIN_1194]
                                                          <-Reducer 48 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1490]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1489] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1488] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 47 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_67]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_66] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1197] (rows=3828623 width=11)
                                                                        Conds:RS_62._col1=RS_1397._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 62 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1397]
                                                                          PartitionCols:_col0
                                                                           Please refer to the previous Select Operator [SEL_1385]
                                                                      <-Reducer 46 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_62]
                                                                          PartitionCols:_col1
                                                                           Please refer to the previous Merge Join Operator [MERGEJOIN_1196]

