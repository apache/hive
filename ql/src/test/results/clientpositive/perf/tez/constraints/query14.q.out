Warning: Shuffle Join MERGEJOIN[1191][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[1198][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 16' is a cross product
Warning: Shuffle Join MERGEJOIN[1205][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 22' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE)
Map 24 <- Reducer 40 (BROADCAST_EDGE)
Map 63 <- Reducer 46 (BROADCAST_EDGE)
Map 64 <- Reducer 52 (BROADCAST_EDGE)
Map 66 <- Reducer 56 (BROADCAST_EDGE)
Map 67 <- Reducer 72 (BROADCAST_EDGE)
Map 73 <- Reducer 78 (BROADCAST_EDGE)
Map 79 <- Reducer 17 (BROADCAST_EDGE)
Map 80 <- Reducer 23 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 10 (SIMPLE_EDGE), Map 79 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE), Reducer 34 (SIMPLE_EDGE)
Reducer 14 <- Map 65 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 59 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 17 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 10 (SIMPLE_EDGE), Map 80 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE), Reducer 38 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 20 <- Map 65 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (CUSTOM_SIMPLE_EDGE), Reducer 62 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 23 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 24 (SIMPLE_EDGE), Map 39 (SIMPLE_EDGE)
Reducer 26 <- Map 65 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (SIMPLE_EDGE), Union 28 (CONTAINS)
Reducer 29 <- Union 28 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE)
Reducer 30 <- Map 65 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Reducer 26 (SIMPLE_EDGE), Union 32 (CONTAINS)
Reducer 33 <- Union 32 (SIMPLE_EDGE)
Reducer 34 <- Map 65 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 35 <- Reducer 26 (SIMPLE_EDGE), Union 36 (CONTAINS)
Reducer 37 <- Union 36 (SIMPLE_EDGE)
Reducer 38 <- Map 65 (SIMPLE_EDGE), Reducer 37 (SIMPLE_EDGE)
Reducer 4 <- Map 65 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Map 39 (CUSTOM_SIMPLE_EDGE)
Reducer 41 <- Map 39 (SIMPLE_EDGE), Map 63 (SIMPLE_EDGE)
Reducer 42 <- Map 65 (SIMPLE_EDGE), Reducer 41 (SIMPLE_EDGE)
Reducer 43 <- Reducer 42 (SIMPLE_EDGE), Union 28 (CONTAINS)
Reducer 44 <- Reducer 42 (SIMPLE_EDGE), Union 32 (CONTAINS)
Reducer 45 <- Reducer 42 (SIMPLE_EDGE), Union 36 (CONTAINS)
Reducer 46 <- Map 39 (CUSTOM_SIMPLE_EDGE)
Reducer 47 <- Map 39 (SIMPLE_EDGE), Map 64 (SIMPLE_EDGE)
Reducer 48 <- Map 65 (SIMPLE_EDGE), Reducer 47 (SIMPLE_EDGE)
Reducer 49 <- Reducer 48 (SIMPLE_EDGE), Union 28 (CONTAINS)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 50 <- Reducer 48 (SIMPLE_EDGE), Union 32 (CONTAINS)
Reducer 51 <- Reducer 48 (SIMPLE_EDGE), Union 36 (CONTAINS)
Reducer 52 <- Map 39 (CUSTOM_SIMPLE_EDGE)
Reducer 53 <- Map 39 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 55 <- Union 54 (CUSTOM_SIMPLE_EDGE)
Reducer 56 <- Map 39 (CUSTOM_SIMPLE_EDGE)
Reducer 57 <- Map 39 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE), Union 58 (CONTAINS)
Reducer 59 <- Union 58 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE), Reducer 55 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 60 <- Map 39 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE), Union 61 (CONTAINS)
Reducer 62 <- Union 61 (CUSTOM_SIMPLE_EDGE)
Reducer 68 <- Map 67 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 69 <- Map 67 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE), Union 58 (CONTAINS)
Reducer 70 <- Map 67 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE), Union 61 (CONTAINS)
Reducer 72 <- Map 71 (CUSTOM_SIMPLE_EDGE)
Reducer 74 <- Map 73 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 75 <- Map 73 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 58 (CONTAINS)
Reducer 76 <- Map 73 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 61 (CONTAINS)
Reducer 78 <- Map 77 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_1361]
        Limit [LIM_1360] (rows=100 width=223)
          Number of rows:100
          Select Operator [SEL_1359] (rows=304320 width=223)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1358]
              Select Operator [SEL_1357] (rows=304320 width=223)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1356] (rows=304320 width=231)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 7 [SIMPLE_EDGE]
                  <-Reducer 16 [CONTAINS]
                    Reduce Output Operator [RS_1204]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1203] (rows=304320 width=231)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1202] (rows=121728 width=221)
                          keys:_col0, _col1, _col2, _col3, 0L,top n:100
                          Select Operator [SEL_1200] (rows=40576 width=223)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1199] (rows=40576 width=244)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1198] (rows=121728 width=244)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1373]
                                  Filter Operator [FIL_1372] (rows=121728 width=132)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1371] (rows=121728 width=132)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_238]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_237] (rows=17407104 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_235] (rows=286549727 width=127)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1171] (rows=286549727 width=127)
                                              Conds:RS_232._col1=RS_1339._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9"]
                                            <-Map 65 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1339]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1330] (rows=462000 width=15)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                  TableScan [TS_81] (rows=462000 width=15)
                                                    default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                            <-Reducer 13 [SIMPLE_EDGE]
                                              SHUFFLE [RS_232]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1170] (rows=286549727 width=119)
                                                  Conds:RS_229._col1=RS_230._col0(Inner),Output:["_col1","_col2","_col3"]
                                                <-Reducer 12 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_229]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1162] (rows=286549727 width=119)
                                                      Conds:RS_1366._col0=RS_1306._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1306]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1303] (rows=50 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_1302] (rows=50 width=12)
                                                            predicate:((d_year = 2000) and (d_moy = 11))
                                                            TableScan [TS_3] (rows=73049 width=12)
                                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                    <-Map 79 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1366]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1365] (rows=286549727 width=123)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1364] (rows=286549727 width=123)
                                                            predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_227_date_dim_d_date_sk_min) AND DynamicValue(RS_227_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_227_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_143] (rows=287989836 width=123)
                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                            <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1363]
                                                                Group By Operator [GBY_1362] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1314]
                                                                    Group By Operator [GBY_1311] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1307] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1303]
                                                <-Reducer 34 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_230]
                                                    PartitionCols:_col0
                                                    Merge Join Operator [MERGEJOIN_1169] (rows=729 width=4)
                                                      Conds:RS_1347._col1, _col2, _col3=RS_1370._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 65 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1347]
                                                        PartitionCols:_col1, _col2, _col3
                                                        Select Operator [SEL_1340] (rows=458612 width=15)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1331] (rows=458612 width=15)
                                                            predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                             Please refer to the previous TableScan [TS_81]
                                                    <-Reducer 33 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1370]
                                                        PartitionCols:_col0, _col1, _col2
                                                        Select Operator [SEL_1369] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1368] (rows=1 width=20)
                                                            predicate:(_col3 = 3L)
                                                            Group By Operator [GBY_1367] (rows=120960 width=20)
                                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Union 32 [SIMPLE_EDGE]
                                                              <-Reducer 31 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1424]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1423] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1422] (rows=120960 width=20)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 26 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_169]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_25] (rows=3144960 width=19)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                          Merge Join Operator [MERGEJOIN_1151] (rows=546042657 width=11)
                                                                            Conds:RS_21._col1=RS_1344._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                          <-Map 65 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1344]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1336] (rows=458612 width=15)
                                                                                Output:["_col0","_col1","_col2","_col3"]
                                                                                Filter Operator [FIL_1327] (rows=458612 width=15)
                                                                                  predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                                   Please refer to the previous TableScan [TS_81]
                                                                          <-Reducer 25 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_21]
                                                                              PartitionCols:_col1
                                                                              Merge Join Operator [MERGEJOIN_1150] (rows=550076554 width=4)
                                                                                Conds:RS_1418._col0=RS_1396._col0(Inner),Output:["_col1"]
                                                                              <-Map 39 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1396]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_1395] (rows=1957 width=4)
                                                                                    Output:["_col0"]
                                                                                    Filter Operator [FIL_1394] (rows=1957 width=8)
                                                                                      predicate:d_year BETWEEN 1999 AND 2001
                                                                                      TableScan [TS_12] (rows=73049 width=8)
                                                                                        default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                                              <-Map 24 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1418]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_1417] (rows=550076554 width=7)
                                                                                    Output:["_col0","_col1"]
                                                                                    Filter Operator [FIL_1416] (rows=550076554 width=7)
                                                                                      predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_19_d1_d_date_sk_min) AND DynamicValue(RS_19_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_19_d1_d_date_sk_bloom_filter)))
                                                                                      TableScan [TS_9] (rows=575995635 width=7)
                                                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                                                      <-Reducer 40 [BROADCAST_EDGE] vectorized
                                                                                        BROADCAST [RS_1415]
                                                                                          Group By Operator [GBY_1414] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                          <-Map 39 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                            SHUFFLE [RS_1410]
                                                                                              Group By Operator [GBY_1406] (rows=1 width=12)
                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                Select Operator [SEL_1397] (rows=1957 width=4)
                                                                                                  Output:["_col0"]
                                                                                                   Please refer to the previous Select Operator [SEL_1395]
                                                              <-Reducer 44 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1438]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1437] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1436] (rows=120960 width=20)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 42 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_189]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_45] (rows=1693440 width=19)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                          Merge Join Operator [MERGEJOIN_1153] (rows=284448361 width=11)
                                                                            Conds:RS_41._col1=RS_1345._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                          <-Map 65 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1345]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1337] (rows=458612 width=15)
                                                                                Output:["_col0","_col1","_col2","_col3"]
                                                                                Filter Operator [FIL_1328] (rows=458612 width=15)
                                                                                  predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                                   Please refer to the previous TableScan [TS_81]
                                                                          <-Reducer 41 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_41]
                                                                              PartitionCols:_col1
                                                                              Merge Join Operator [MERGEJOIN_1152] (rows=286549727 width=4)
                                                                                Conds:RS_1432._col0=RS_1398._col0(Inner),Output:["_col1"]
                                                                              <-Map 39 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1398]
                                                                                  PartitionCols:_col0
                                                                                   Please refer to the previous Select Operator [SEL_1395]
                                                                              <-Map 63 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1432]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_1431] (rows=286549727 width=7)
                                                                                    Output:["_col0","_col1"]
                                                                                    Filter Operator [FIL_1430] (rows=286549727 width=7)
                                                                                      predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_39_d2_d_date_sk_min) AND DynamicValue(RS_39_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_39_d2_d_date_sk_bloom_filter)))
                                                                                      TableScan [TS_29] (rows=287989836 width=7)
                                                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                      <-Reducer 46 [BROADCAST_EDGE] vectorized
                                                                                        BROADCAST [RS_1429]
                                                                                          Group By Operator [GBY_1428] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                          <-Map 39 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                            SHUFFLE [RS_1411]
                                                                                              Group By Operator [GBY_1407] (rows=1 width=12)
                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                Select Operator [SEL_1399] (rows=1957 width=4)
                                                                                                  Output:["_col0"]
                                                                                                   Please refer to the previous Select Operator [SEL_1395]
                                                              <-Reducer 50 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1452]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1451] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1450] (rows=120960 width=20)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 48 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_210]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_66] (rows=846720 width=19)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                          Merge Join Operator [MERGEJOIN_1155] (rows=142911107 width=11)
                                                                            Conds:RS_62._col1=RS_1346._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                          <-Map 65 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1346]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1338] (rows=458612 width=15)
                                                                                Output:["_col0","_col1","_col2","_col3"]
                                                                                Filter Operator [FIL_1329] (rows=458612 width=15)
                                                                                  predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                                   Please refer to the previous TableScan [TS_81]
                                                                          <-Reducer 47 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_62]
                                                                              PartitionCols:_col1
                                                                              Merge Join Operator [MERGEJOIN_1154] (rows=143966864 width=4)
                                                                                Conds:RS_1446._col0=RS_1400._col0(Inner),Output:["_col1"]
                                                                              <-Map 39 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1400]
                                                                                  PartitionCols:_col0
                                                                                   Please refer to the previous Select Operator [SEL_1395]
                                                                              <-Map 64 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1446]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_1445] (rows=143966864 width=7)
                                                                                    Output:["_col0","_col1"]
                                                                                    Filter Operator [FIL_1444] (rows=143966864 width=7)
                                                                                      predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_60_d3_d_date_sk_min) AND DynamicValue(RS_60_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_60_d3_d_date_sk_bloom_filter)))
                                                                                      TableScan [TS_50] (rows=144002668 width=7)
                                                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                      <-Reducer 52 [BROADCAST_EDGE] vectorized
                                                                                        BROADCAST [RS_1443]
                                                                                          Group By Operator [GBY_1442] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                          <-Map 39 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                            SHUFFLE [RS_1412]
                                                                                              Group By Operator [GBY_1408] (rows=1 width=12)
                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                Select Operator [SEL_1401] (rows=1957 width=4)
                                                                                                  Output:["_col0"]
                                                                                                   Please refer to the previous Select Operator [SEL_1395]
                              <-Reducer 59 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1377]
                                  Select Operator [SEL_1376] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1375] (rows=1 width=120)
                                      predicate:(_col0 is not null and _col1 is not null)
                                      Group By Operator [GBY_1374] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 58 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 57 [CONTAINS]
                                          Reduce Output Operator [RS_1259]
                                            Group By Operator [GBY_1258] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1257] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1255] (rows=550076554 width=110)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1254] (rows=550076554 width=110)
                                                    Conds:RS_1461._col0=RS_1404._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 39 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1404]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1395]
                                                  <-Map 66 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1461]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1459] (rows=550076554 width=114)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1458] (rows=550076554 width=114)
                                                          predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_106_date_dim_d_date_sk_min) AND DynamicValue(RS_106_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_106_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_99] (rows=575995635 width=114)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                                                          <-Reducer 56 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1457]
                                                              Group By Operator [GBY_1456] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 39 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_1413]
                                                                  Group By Operator [GBY_1409] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1403] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1395]
                                        <-Reducer 69 [CONTAINS]
                                          Reduce Output Operator [RS_1277]
                                            Group By Operator [GBY_1276] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1275] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1273] (rows=286549727 width=115)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1272] (rows=286549727 width=115)
                                                    Conds:RS_1476._col0=RS_1467._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 71 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1467]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1464] (rows=1957 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1463] (rows=1957 width=8)
                                                          predicate:d_year BETWEEN 1998 AND 2000
                                                          TableScan [TS_112] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1476]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1474] (rows=286549727 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1473] (rows=286549727 width=119)
                                                          predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_116_date_dim_d_date_sk_min) AND DynamicValue(RS_116_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_116_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_109] (rows=287989836 width=119)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                                          <-Reducer 72 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1472]
                                                              Group By Operator [GBY_1471] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 71 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1470]
                                                                  Group By Operator [GBY_1469] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1466] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1464]
                                        <-Reducer 75 [CONTAINS]
                                          Reduce Output Operator [RS_1295]
                                            Group By Operator [GBY_1294] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1293] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1291] (rows=143966864 width=115)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1290] (rows=143966864 width=115)
                                                    Conds:RS_1491._col0=RS_1482._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 77 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1482]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1479] (rows=1957 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1478] (rows=1957 width=8)
                                                          predicate:d_year BETWEEN 1998 AND 2000
                                                          TableScan [TS_123] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1491]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1489] (rows=143966864 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1488] (rows=143966864 width=119)
                                                          predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_127_date_dim_d_date_sk_min) AND DynamicValue(RS_127_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_127_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_120] (rows=144002668 width=119)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                                          <-Reducer 78 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1487]
                                                              Group By Operator [GBY_1486] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 77 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1485]
                                                                  Group By Operator [GBY_1484] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1481] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1479]
                  <-Reducer 22 [CONTAINS]
                    Reduce Output Operator [RS_1211]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1210] (rows=304320 width=231)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1209] (rows=121728 width=221)
                          keys:_col0, _col1, _col2, _col3, 0L,top n:100
                          Select Operator [SEL_1207] (rows=40576 width=219)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1206] (rows=40576 width=244)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1205] (rows=121728 width=244)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1389]
                                  Filter Operator [FIL_1388] (rows=121728 width=132)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1387] (rows=121728 width=132)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 20 [SIMPLE_EDGE]
                                      SHUFFLE [RS_382]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_381] (rows=8764416 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_379] (rows=143966864 width=127)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1184] (rows=143966864 width=127)
                                              Conds:RS_376._col1=RS_1341._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9"]
                                            <-Map 65 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1341]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1332] (rows=462000 width=15)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                   Please refer to the previous TableScan [TS_81]
                                            <-Reducer 19 [SIMPLE_EDGE]
                                              SHUFFLE [RS_376]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1183] (rows=143966864 width=119)
                                                  Conds:RS_373._col1=RS_374._col0(Inner),Output:["_col1","_col2","_col3"]
                                                <-Reducer 18 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_373]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1175] (rows=143966864 width=119)
                                                      Conds:RS_1382._col0=RS_1308._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1308]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1303]
                                                    <-Map 80 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1382]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1381] (rows=143966864 width=123)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1380] (rows=143966864 width=123)
                                                            predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_371_date_dim_d_date_sk_min) AND DynamicValue(RS_371_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_371_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_287] (rows=144002668 width=123)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                            <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1379]
                                                                Group By Operator [GBY_1378] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1315]
                                                                    Group By Operator [GBY_1312] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1309] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1303]
                                                <-Reducer 38 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_374]
                                                    PartitionCols:_col0
                                                    Merge Join Operator [MERGEJOIN_1182] (rows=729 width=4)
                                                      Conds:RS_1348._col1, _col2, _col3=RS_1386._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 65 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1348]
                                                        PartitionCols:_col1, _col2, _col3
                                                        Select Operator [SEL_1342] (rows=458612 width=15)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1333] (rows=458612 width=15)
                                                            predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                             Please refer to the previous TableScan [TS_81]
                                                    <-Reducer 37 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1386]
                                                        PartitionCols:_col0, _col1, _col2
                                                        Select Operator [SEL_1385] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1384] (rows=1 width=20)
                                                            predicate:(_col3 = 3L)
                                                            Group By Operator [GBY_1383] (rows=120960 width=20)
                                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Union 36 [SIMPLE_EDGE]
                                                              <-Reducer 35 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1427]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1426] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1425] (rows=120960 width=20)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 26 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_313]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_25]
                                                              <-Reducer 45 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1441]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1440] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1439] (rows=120960 width=20)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 42 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_333]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_45]
                                                              <-Reducer 51 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1455]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1454] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1453] (rows=120960 width=20)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 48 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_354]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_66]
                              <-Reducer 62 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1393]
                                  Select Operator [SEL_1392] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1391] (rows=1 width=120)
                                      predicate:(_col0 is not null and _col1 is not null)
                                      Group By Operator [GBY_1390] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 61 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 60 [CONTAINS]
                                          Reduce Output Operator [RS_1265]
                                            Group By Operator [GBY_1264] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1263] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1261] (rows=550076554 width=110)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1260] (rows=550076554 width=110)
                                                    Conds:RS_1462._col0=RS_1405._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 39 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1405]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1395]
                                                  <-Map 66 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1462]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1459]
                                        <-Reducer 70 [CONTAINS]
                                          Reduce Output Operator [RS_1283]
                                            Group By Operator [GBY_1282] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1281] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1279] (rows=286549727 width=115)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1278] (rows=286549727 width=115)
                                                    Conds:RS_1477._col0=RS_1468._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 71 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1468]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1464]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1477]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1474]
                                        <-Reducer 76 [CONTAINS]
                                          Reduce Output Operator [RS_1301]
                                            Group By Operator [GBY_1300] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1299] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1297] (rows=143966864 width=115)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1296] (rows=143966864 width=115)
                                                    Conds:RS_1492._col0=RS_1483._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 77 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1483]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1479]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1492]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1489]
                  <-Reducer 6 [CONTAINS]
                    Reduce Output Operator [RS_1197]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1196] (rows=304320 width=231)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1195] (rows=121728 width=221)
                          keys:_col0, _col1, _col2, _col3, 0L,top n:100
                          Select Operator [SEL_1193] (rows=40576 width=221)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1192] (rows=40576 width=244)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1191] (rows=121728 width=244)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1351]
                                  Filter Operator [FIL_1350] (rows=121728 width=132)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1349] (rows=121728 width=132)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 4 [SIMPLE_EDGE]
                                      SHUFFLE [RS_95]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_94] (rows=32136192 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_92] (rows=550076554 width=122)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1158] (rows=550076554 width=122)
                                              Conds:RS_89._col1=RS_1334._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9"]
                                            <-Map 65 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1334]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1325] (rows=462000 width=15)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                   Please refer to the previous TableScan [TS_81]
                                            <-Reducer 3 [SIMPLE_EDGE]
                                              SHUFFLE [RS_89]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1157] (rows=550076554 width=114)
                                                  Conds:RS_86._col1=RS_87._col0(Inner),Output:["_col1","_col2","_col3"]
                                                <-Reducer 2 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_86]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1149] (rows=550076554 width=114)
                                                      Conds:RS_1320._col0=RS_1304._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1304]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1303]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1320]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1319] (rows=550076554 width=118)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1318] (rows=550076554 width=118)
                                                            predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_84_date_dim_d_date_sk_min) AND DynamicValue(RS_84_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_84_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_0] (rows=575995635 width=118)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                            <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1317]
                                                                Group By Operator [GBY_1316] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1313]
                                                                    Group By Operator [GBY_1310] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1305] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1303]
                                                <-Reducer 30 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_87]
                                                    PartitionCols:_col0
                                                    Merge Join Operator [MERGEJOIN_1156] (rows=729 width=4)
                                                      Conds:RS_1343._col1, _col2, _col3=RS_1324._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 65 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1343]
                                                        PartitionCols:_col1, _col2, _col3
                                                        Select Operator [SEL_1335] (rows=458612 width=15)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1326] (rows=458612 width=15)
                                                            predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                             Please refer to the previous TableScan [TS_81]
                                                    <-Reducer 29 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1324]
                                                        PartitionCols:_col0, _col1, _col2
                                                        Select Operator [SEL_1323] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1322] (rows=1 width=20)
                                                            predicate:(_col3 = 3L)
                                                            Group By Operator [GBY_1321] (rows=120960 width=20)
                                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Union 28 [SIMPLE_EDGE]
                                                              <-Reducer 27 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1421]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1420] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1419] (rows=120960 width=20)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 26 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_26]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_25]
                                                              <-Reducer 43 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1435]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1434] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1433] (rows=120960 width=20)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 42 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_46]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_45]
                                                              <-Reducer 49 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1449]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1448] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1447] (rows=120960 width=20)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 48 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_67]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_66]
                              <-Reducer 55 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1355]
                                  Select Operator [SEL_1354] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1353] (rows=1 width=120)
                                      predicate:(_col0 is not null and _col1 is not null)
                                      Group By Operator [GBY_1352] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 54 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 53 [CONTAINS]
                                          Reduce Output Operator [RS_1253]
                                            Group By Operator [GBY_1252] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1251] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1249] (rows=550076554 width=110)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1248] (rows=550076554 width=110)
                                                    Conds:RS_1460._col0=RS_1402._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 39 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1402]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1395]
                                                  <-Map 66 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1460]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1459]
                                        <-Reducer 68 [CONTAINS]
                                          Reduce Output Operator [RS_1271]
                                            Group By Operator [GBY_1270] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1269] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1267] (rows=286549727 width=115)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1266] (rows=286549727 width=115)
                                                    Conds:RS_1475._col0=RS_1465._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 71 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1465]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1464]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1475]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1474]
                                        <-Reducer 74 [CONTAINS]
                                          Reduce Output Operator [RS_1289]
                                            Group By Operator [GBY_1288] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1287] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1285] (rows=143966864 width=115)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1284] (rows=143966864 width=115)
                                                    Conds:RS_1490._col0=RS_1480._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 77 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1480]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1479]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1490]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1489]

