Warning: Shuffle Join MERGEJOIN[1466][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[1478][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[1468][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 13' is a cross product
Warning: Shuffle Join MERGEJOIN[1490][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 14' is a cross product
Warning: Shuffle Join MERGEJOIN[1470][tables = [$hdt$_2, $hdt$_3]] in Stage 'Reducer 18' is a cross product
Warning: Shuffle Join MERGEJOIN[1502][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 19' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 98 (BROADCAST_EDGE)
Map 100 <- Reducer 91 (BROADCAST_EDGE)
Map 101 <- Reducer 97 (BROADCAST_EDGE)
Map 103 <- Reducer 63 (BROADCAST_EDGE)
Map 104 <- Reducer 68 (BROADCAST_EDGE)
Map 20 <- Reducer 25 (BROADCAST_EDGE)
Map 36 <- Reducer 41 (BROADCAST_EDGE)
Map 46 <- Reducer 99 (BROADCAST_EDGE)
Map 50 <- Reducer 29 (BROADCAST_EDGE)
Map 51 <- Reducer 43 (BROADCAST_EDGE)
Map 52 <- Reducer 58 (BROADCAST_EDGE)
Map 69 <- Reducer 85 (BROADCAST_EDGE)
Reducer 10 <- Map 1 (SIMPLE_EDGE), Map 84 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 12 <- Union 11 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE), Reducer 32 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (CUSTOM_SIMPLE_EDGE), Reducer 62 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 15 <- Map 1 (SIMPLE_EDGE), Map 84 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 17 <- Union 16 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 35 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (CUSTOM_SIMPLE_EDGE), Reducer 67 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 84 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 21 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 22 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 23 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 25 <- Map 24 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Map 24 (SIMPLE_EDGE), Map 50 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 28 <- Union 27 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 24 (CUSTOM_SIMPLE_EDGE)
Reducer 30 <- Map 24 (SIMPLE_EDGE), Map 50 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 32 <- Union 31 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 24 (SIMPLE_EDGE), Map 50 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 35 <- Union 34 (CUSTOM_SIMPLE_EDGE)
Reducer 37 <- Map 36 (SIMPLE_EDGE), Map 40 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 38 <- Map 36 (SIMPLE_EDGE), Map 40 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 39 <- Map 36 (SIMPLE_EDGE), Map 40 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 4 <- Union 3 (CUSTOM_SIMPLE_EDGE)
Reducer 41 <- Map 40 (CUSTOM_SIMPLE_EDGE)
Reducer 42 <- Map 40 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 43 <- Map 40 (CUSTOM_SIMPLE_EDGE)
Reducer 44 <- Map 40 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 45 <- Map 40 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 47 <- Map 46 (SIMPLE_EDGE), Map 84 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 48 <- Map 46 (SIMPLE_EDGE), Map 84 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 49 <- Map 46 (SIMPLE_EDGE), Map 84 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 5 <- Reducer 28 (CUSTOM_SIMPLE_EDGE), Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 53 <- Map 52 (SIMPLE_EDGE), Map 57 (SIMPLE_EDGE)
Reducer 54 <- Reducer 53 (SIMPLE_EDGE), Reducer 75 (SIMPLE_EDGE)
Reducer 55 <- Map 102 (SIMPLE_EDGE), Reducer 54 (SIMPLE_EDGE)
Reducer 56 <- Reducer 55 (SIMPLE_EDGE)
Reducer 58 <- Map 57 (CUSTOM_SIMPLE_EDGE)
Reducer 59 <- Map 103 (SIMPLE_EDGE), Map 57 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE), Reducer 56 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 60 <- Reducer 59 (SIMPLE_EDGE), Reducer 79 (SIMPLE_EDGE)
Reducer 61 <- Map 102 (SIMPLE_EDGE), Reducer 60 (SIMPLE_EDGE)
Reducer 62 <- Reducer 61 (SIMPLE_EDGE)
Reducer 63 <- Map 57 (CUSTOM_SIMPLE_EDGE)
Reducer 64 <- Map 104 (SIMPLE_EDGE), Map 57 (SIMPLE_EDGE)
Reducer 65 <- Reducer 64 (SIMPLE_EDGE), Reducer 83 (SIMPLE_EDGE)
Reducer 66 <- Map 102 (SIMPLE_EDGE), Reducer 65 (SIMPLE_EDGE)
Reducer 67 <- Reducer 66 (SIMPLE_EDGE)
Reducer 68 <- Map 57 (CUSTOM_SIMPLE_EDGE)
Reducer 70 <- Map 69 (SIMPLE_EDGE), Map 84 (SIMPLE_EDGE)
Reducer 71 <- Map 102 (SIMPLE_EDGE), Reducer 70 (SIMPLE_EDGE)
Reducer 72 <- Reducer 71 (SIMPLE_EDGE), Union 73 (CONTAINS)
Reducer 74 <- Union 73 (SIMPLE_EDGE)
Reducer 75 <- Map 102 (SIMPLE_EDGE), Reducer 74 (SIMPLE_EDGE)
Reducer 76 <- Reducer 71 (SIMPLE_EDGE), Union 77 (CONTAINS)
Reducer 78 <- Union 77 (SIMPLE_EDGE)
Reducer 79 <- Map 102 (SIMPLE_EDGE), Reducer 78 (SIMPLE_EDGE)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 80 <- Reducer 71 (SIMPLE_EDGE), Union 81 (CONTAINS)
Reducer 82 <- Union 81 (SIMPLE_EDGE)
Reducer 83 <- Map 102 (SIMPLE_EDGE), Reducer 82 (SIMPLE_EDGE)
Reducer 85 <- Map 84 (CUSTOM_SIMPLE_EDGE)
Reducer 86 <- Map 100 (SIMPLE_EDGE), Map 84 (SIMPLE_EDGE)
Reducer 87 <- Map 102 (SIMPLE_EDGE), Reducer 86 (SIMPLE_EDGE)
Reducer 88 <- Reducer 87 (SIMPLE_EDGE), Union 73 (CONTAINS)
Reducer 89 <- Reducer 87 (SIMPLE_EDGE), Union 77 (CONTAINS)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)
Reducer 90 <- Reducer 87 (SIMPLE_EDGE), Union 81 (CONTAINS)
Reducer 91 <- Map 84 (CUSTOM_SIMPLE_EDGE)
Reducer 92 <- Map 101 (SIMPLE_EDGE), Map 84 (SIMPLE_EDGE)
Reducer 93 <- Map 102 (SIMPLE_EDGE), Reducer 92 (SIMPLE_EDGE)
Reducer 94 <- Reducer 93 (SIMPLE_EDGE), Union 73 (CONTAINS)
Reducer 95 <- Reducer 93 (SIMPLE_EDGE), Union 77 (CONTAINS)
Reducer 96 <- Reducer 93 (SIMPLE_EDGE), Union 81 (CONTAINS)
Reducer 97 <- Map 84 (CUSTOM_SIMPLE_EDGE)
Reducer 98 <- Map 84 (CUSTOM_SIMPLE_EDGE)
Reducer 99 <- Map 84 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_1732]
        Limit [LIM_1731] (rows=7 width=212)
          Number of rows:100
          Select Operator [SEL_1730] (rows=7 width=212)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1729]
              Select Operator [SEL_1728] (rows=7 width=212)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1727] (rows=7 width=220)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 7 [SIMPLE_EDGE]
                  <-Reducer 14 [CONTAINS]
                    Reduce Output Operator [RS_1495]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1494] (rows=7 width=220)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Select Operator [SEL_1492] (rows=1 width=223)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Filter Operator [FIL_1491] (rows=1 width=244)
                            predicate:(_col5 > _col1)
                            Merge Join Operator [MERGEJOIN_1490] (rows=1 width=244)
                              Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                            <-Reducer 13 [CUSTOM_SIMPLE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_377]
                                Merge Join Operator [MERGEJOIN_1468] (rows=1 width=112)
                                  Conds:(Inner),Output:["_col1"]
                                <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1738]
                                    Select Operator [SEL_1737] (rows=1 width=8)
                                      Filter Operator [FIL_1736] (rows=1 width=8)
                                        predicate:(sq_count_check(_col0) <= 1)
                                        Group By Operator [GBY_1735] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count()"]
                                          Select Operator [SEL_1734] (rows=1 width=8)
                                            Group By Operator [GBY_1733] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Union 11 [CUSTOM_SIMPLE_EDGE]
                                              <-Reducer 10 [CONTAINS]
                                                Reduce Output Operator [RS_1489]
                                                  Group By Operator [GBY_1488] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_1487] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_1485] (rows=14736682 width=0)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_1484] (rows=14736682 width=0)
                                                          Conds:RS_1665._col0=RS_1646._col0(Inner),Output:["_col1"]
                                                        <-Map 84 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_1646]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1635] (rows=1957 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_1634] (rows=1957 width=8)
                                                                predicate:d_year BETWEEN 1999 AND 2001
                                                                TableScan [TS_96] (rows=73049 width=8)
                                                                  default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1665]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1663] (rows=550076554 width=7)
                                                              Output:["_col0","_col1"]
                                                              Filter Operator [FIL_1662] (rows=550076554 width=7)
                                                                predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_7_date_dim_d_date_sk_min) AND DynamicValue(RS_7_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_7_date_dim_d_date_sk_bloom_filter)))
                                                                TableScan [TS_0] (rows=575995635 width=7)
                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity"]
                                                                <-Reducer 98 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_1661]
                                                                    Group By Operator [GBY_1660] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 84 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_1658]
                                                                        Group By Operator [GBY_1653] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_1643] (rows=1957 width=4)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_1635]
                                              <-Reducer 22 [CONTAINS]
                                                Reduce Output Operator [RS_1519]
                                                  Group By Operator [GBY_1518] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_1517] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_1515] (rows=7676736 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_1514] (rows=7676736 width=3)
                                                          Conds:RS_1796._col0=RS_1783._col0(Inner),Output:["_col1"]
                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1783]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1778] (rows=1957 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_1777] (rows=1957 width=8)
                                                                predicate:d_year BETWEEN 1998 AND 2000
                                                                TableScan [TS_13] (rows=73049 width=8)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                        <-Map 20 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1796]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1794] (rows=286549727 width=7)
                                                              Output:["_col0","_col1"]
                                                              Filter Operator [FIL_1793] (rows=286549727 width=7)
                                                                predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_17_date_dim_d_date_sk_min) AND DynamicValue(RS_17_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_17_date_dim_d_date_sk_bloom_filter)))
                                                                TableScan [TS_10] (rows=287989836 width=7)
                                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity"]
                                                                <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_1792]
                                                                    Group By Operator [GBY_1791] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_1789]
                                                                        Group By Operator [GBY_1787] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_1780] (rows=1957 width=4)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_1778]
                                              <-Reducer 38 [CONTAINS]
                                                Reduce Output Operator [RS_1555]
                                                  Group By Operator [GBY_1554] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_1553] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_1551] (rows=3856907 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_1550] (rows=3856907 width=3)
                                                          Conds:RS_1824._col0=RS_1811._col0(Inner),Output:["_col1"]
                                                        <-Map 40 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1811]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1806] (rows=1957 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_1805] (rows=1957 width=8)
                                                                predicate:d_year BETWEEN 1998 AND 2000
                                                                TableScan [TS_24] (rows=73049 width=8)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                        <-Map 36 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1824]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1822] (rows=143966864 width=7)
                                                              Output:["_col0","_col1"]
                                                              Filter Operator [FIL_1821] (rows=143966864 width=7)
                                                                predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_28_date_dim_d_date_sk_min) AND DynamicValue(RS_28_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_28_date_dim_d_date_sk_bloom_filter)))
                                                                TableScan [TS_21] (rows=144002668 width=7)
                                                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity"]
                                                                <-Reducer 41 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_1820]
                                                                    Group By Operator [GBY_1819] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_1817]
                                                                        Group By Operator [GBY_1815] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_1808] (rows=1957 width=4)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_1806]
                                <-Reducer 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1742]
                                    Select Operator [SEL_1741] (rows=1 width=112)
                                      Output:["_col0"]
                                      Filter Operator [FIL_1740] (rows=1 width=120)
                                        predicate:(_col0 is not null and _col1 is not null)
                                        Group By Operator [GBY_1739] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                        <-Union 31 [CUSTOM_SIMPLE_EDGE]
                                          <-Reducer 30 [CONTAINS]
                                            Reduce Output Operator [RS_1537]
                                              Group By Operator [GBY_1536] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1535] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1533] (rows=7676736 width=94)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1532] (rows=7676736 width=94)
                                                      Conds:RS_1803._col0=RS_1784._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1784]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1778]
                                                    <-Map 50 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1803]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1801] (rows=286549727 width=119)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1800] (rows=286549727 width=119)
                                                            predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_62_date_dim_d_date_sk_min) AND DynamicValue(RS_62_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_62_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_55] (rows=287989836 width=119)
                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                                            <-Reducer 29 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1799]
                                                                Group By Operator [GBY_1798] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_1790]
                                                                    Group By Operator [GBY_1788] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1782] (rows=1957 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1778]
                                          <-Reducer 44 [CONTAINS]
                                            Reduce Output Operator [RS_1573]
                                              Group By Operator [GBY_1572] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1571] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1569] (rows=3856907 width=114)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1568] (rows=3856907 width=114)
                                                      Conds:RS_1831._col0=RS_1812._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 40 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1812]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1806]
                                                    <-Map 51 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1831]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1829] (rows=143966864 width=119)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1828] (rows=143966864 width=119)
                                                            predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_73_date_dim_d_date_sk_min) AND DynamicValue(RS_73_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_73_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_66] (rows=144002668 width=119)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                                            <-Reducer 43 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1827]
                                                                Group By Operator [GBY_1826] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_1818]
                                                                    Group By Operator [GBY_1816] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1810] (rows=1957 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1806]
                                          <-Reducer 48 [CONTAINS]
                                            Reduce Output Operator [RS_1591]
                                              Group By Operator [GBY_1590] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1589] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1587] (rows=14736682 width=0)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1586] (rows=14736682 width=0)
                                                      Conds:RS_1838._col0=RS_1647._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 84 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1647]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1635]
                                                    <-Map 46 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1838]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1836] (rows=550076554 width=114)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1835] (rows=550076554 width=114)
                                                            predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_52_date_dim_d_date_sk_min) AND DynamicValue(RS_52_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_52_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_45] (rows=575995635 width=114)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                                                            <-Reducer 99 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1834]
                                                                Group By Operator [GBY_1833] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 84 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1659]
                                                                    Group By Operator [GBY_1654] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1645] (rows=1957 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1635]
                            <-Reducer 62 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1754]
                                Filter Operator [FIL_1753] (rows=1 width=132)
                                  predicate:_col3 is not null
                                  Group By Operator [GBY_1752] (rows=1 width=132)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 61 [SIMPLE_EDGE]
                                    SHUFFLE [RS_370]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_369] (rows=1 width=132)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_367] (rows=1 width=128)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_1449] (rows=1 width=128)
                                            Conds:RS_364._col1=RS_1714._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9"]
                                          <-Map 102 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1714]
                                              PartitionCols:_col0
                                              Select Operator [SEL_1705] (rows=462000 width=15)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                TableScan [TS_165] (rows=462000 width=15)
                                                  default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                          <-Reducer 60 [SIMPLE_EDGE]
                                            SHUFFLE [RS_364]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_1448] (rows=1 width=120)
                                                Conds:RS_361._col1=RS_362._col0(Inner),Output:["_col1","_col2","_col3"]
                                              <-Reducer 59 [SIMPLE_EDGE]
                                                SHUFFLE [RS_361]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_1440] (rows=7790806 width=98)
                                                    Conds:RS_1747._col0=RS_1681._col0(Inner),Output:["_col1","_col2","_col3"]
                                                  <-Map 57 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1681]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1678] (rows=50 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1677] (rows=50 width=12)
                                                          predicate:((d_year = 2000) and (d_moy = 11))
                                                          TableScan [TS_87] (rows=73049 width=12)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                  <-Map 103 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1747]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1746] (rows=286549727 width=123)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1745] (rows=286549727 width=123)
                                                          predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_359_date_dim_d_date_sk_min) AND DynamicValue(RS_359_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_359_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_275] (rows=287989836 width=123)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                          <-Reducer 63 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1744]
                                                              Group By Operator [GBY_1743] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 57 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1689]
                                                                  Group By Operator [GBY_1686] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1682] (rows=50 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1678]
                                              <-Reducer 79 [SIMPLE_EDGE]
                                                SHUFFLE [RS_362]
                                                  PartitionCols:_col0
                                                  Merge Join Operator [MERGEJOIN_1447] (rows=729 width=4)
                                                    Conds:RS_1722._col1, _col2, _col3=RS_1751._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 102 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1722]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1715] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1706] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                           Please refer to the previous TableScan [TS_165]
                                                  <-Reducer 78 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1751]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1750] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1749] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1748] (rows=120960 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 77 [SIMPLE_EDGE]
                                                            <-Reducer 76 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1850]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1849] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1848] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 71 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_301]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_109] (rows=120960 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1426] (rows=14628613 width=11)
                                                                          Conds:RS_105._col1=RS_1719._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 102 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1719]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1711] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1702] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                                 Please refer to the previous TableScan [TS_165]
                                                                        <-Reducer 70 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_105]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1425] (rows=14736682 width=4)
                                                                              Conds:RS_1844._col0=RS_1636._col0(Inner),Output:["_col1"]
                                                                            <-Map 84 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1636]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1635]
                                                                            <-Map 69 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1844]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1843] (rows=550076554 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1842] (rows=550076554 width=7)
                                                                                    predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_103_d1_d_date_sk_min) AND DynamicValue(RS_103_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_103_d1_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_93] (rows=575995635 width=7)
                                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                                                    <-Reducer 85 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1841]
                                                                                        Group By Operator [GBY_1840] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 84 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1655]
                                                                                            Group By Operator [GBY_1650] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1637] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1635]
                                                            <-Reducer 89 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1864]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1863] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1862] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 87 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_321]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_129] (rows=120960 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1428] (rows=7620440 width=11)
                                                                          Conds:RS_125._col1=RS_1720._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 102 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1720]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1712] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1703] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                                 Please refer to the previous TableScan [TS_165]
                                                                        <-Reducer 86 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_125]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1427] (rows=7676736 width=4)
                                                                              Conds:RS_1858._col0=RS_1638._col0(Inner),Output:["_col1"]
                                                                            <-Map 84 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1638]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1635]
                                                                            <-Map 100 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1858]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1857] (rows=286549727 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1856] (rows=286549727 width=7)
                                                                                    predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_123_d2_d_date_sk_min) AND DynamicValue(RS_123_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_123_d2_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_113] (rows=287989836 width=7)
                                                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                    <-Reducer 91 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1855]
                                                                                        Group By Operator [GBY_1854] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 84 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1656]
                                                                                            Group By Operator [GBY_1651] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1639] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1635]
                                                            <-Reducer 95 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1878]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1877] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1876] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 93 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_342]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_150] (rows=120960 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1430] (rows=3828623 width=11)
                                                                          Conds:RS_146._col1=RS_1721._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 102 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1721]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1713] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1704] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                                 Please refer to the previous TableScan [TS_165]
                                                                        <-Reducer 92 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_146]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1429] (rows=3856907 width=4)
                                                                              Conds:RS_1872._col0=RS_1640._col0(Inner),Output:["_col1"]
                                                                            <-Map 84 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1640]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1635]
                                                                            <-Map 101 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1872]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1871] (rows=143966864 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1870] (rows=143966864 width=7)
                                                                                    predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_144_d3_d_date_sk_min) AND DynamicValue(RS_144_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_144_d3_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_134] (rows=144002668 width=7)
                                                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                    <-Reducer 97 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1869]
                                                                                        Group By Operator [GBY_1868] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 84 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1657]
                                                                                            Group By Operator [GBY_1652] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1641] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1635]
                  <-Reducer 19 [CONTAINS]
                    Reduce Output Operator [RS_1507]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1506] (rows=7 width=220)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Select Operator [SEL_1504] (rows=1 width=219)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Filter Operator [FIL_1503] (rows=1 width=244)
                            predicate:(_col5 > _col1)
                            Merge Join Operator [MERGEJOIN_1502] (rows=1 width=244)
                              Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                            <-Reducer 18 [CUSTOM_SIMPLE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_569]
                                Merge Join Operator [MERGEJOIN_1470] (rows=1 width=112)
                                  Conds:(Inner),Output:["_col1"]
                                <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1760]
                                    Select Operator [SEL_1759] (rows=1 width=8)
                                      Filter Operator [FIL_1758] (rows=1 width=8)
                                        predicate:(sq_count_check(_col0) <= 1)
                                        Group By Operator [GBY_1757] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count()"]
                                          Select Operator [SEL_1756] (rows=1 width=8)
                                            Group By Operator [GBY_1755] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Union 16 [CUSTOM_SIMPLE_EDGE]
                                              <-Reducer 15 [CONTAINS]
                                                Reduce Output Operator [RS_1501]
                                                  Group By Operator [GBY_1500] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_1499] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_1497] (rows=14736682 width=0)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_1496] (rows=14736682 width=0)
                                                          Conds:RS_1666._col0=RS_1648._col0(Inner),Output:["_col1"]
                                                        <-Map 84 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_1648]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1635]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1666]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1663]
                                              <-Reducer 23 [CONTAINS]
                                                Reduce Output Operator [RS_1525]
                                                  Group By Operator [GBY_1524] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_1523] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_1521] (rows=7676736 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_1520] (rows=7676736 width=3)
                                                          Conds:RS_1797._col0=RS_1785._col0(Inner),Output:["_col1"]
                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1785]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1778]
                                                        <-Map 20 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1797]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1794]
                                              <-Reducer 39 [CONTAINS]
                                                Reduce Output Operator [RS_1561]
                                                  Group By Operator [GBY_1560] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_1559] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_1557] (rows=3856907 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_1556] (rows=3856907 width=3)
                                                          Conds:RS_1825._col0=RS_1813._col0(Inner),Output:["_col1"]
                                                        <-Map 40 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1813]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1806]
                                                        <-Map 36 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1825]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1822]
                                <-Reducer 35 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1764]
                                    Select Operator [SEL_1763] (rows=1 width=112)
                                      Output:["_col0"]
                                      Filter Operator [FIL_1762] (rows=1 width=120)
                                        predicate:(_col0 is not null and _col1 is not null)
                                        Group By Operator [GBY_1761] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                        <-Union 34 [CUSTOM_SIMPLE_EDGE]
                                          <-Reducer 33 [CONTAINS]
                                            Reduce Output Operator [RS_1543]
                                              Group By Operator [GBY_1542] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1541] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1539] (rows=7676736 width=94)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1538] (rows=7676736 width=94)
                                                      Conds:RS_1804._col0=RS_1786._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1786]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1778]
                                                    <-Map 50 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1804]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1801]
                                          <-Reducer 45 [CONTAINS]
                                            Reduce Output Operator [RS_1579]
                                              Group By Operator [GBY_1578] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1577] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1575] (rows=3856907 width=114)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1574] (rows=3856907 width=114)
                                                      Conds:RS_1832._col0=RS_1814._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 40 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1814]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1806]
                                                    <-Map 51 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1832]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1829]
                                          <-Reducer 49 [CONTAINS]
                                            Reduce Output Operator [RS_1597]
                                              Group By Operator [GBY_1596] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1595] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1593] (rows=14736682 width=0)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1592] (rows=14736682 width=0)
                                                      Conds:RS_1839._col0=RS_1649._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 84 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1649]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1635]
                                                    <-Map 46 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1839]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1836]
                            <-Reducer 67 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1776]
                                Filter Operator [FIL_1775] (rows=1 width=132)
                                  predicate:_col3 is not null
                                  Group By Operator [GBY_1774] (rows=1 width=132)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 66 [SIMPLE_EDGE]
                                    SHUFFLE [RS_562]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_561] (rows=1 width=132)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_559] (rows=1 width=128)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_1465] (rows=1 width=128)
                                            Conds:RS_556._col1=RS_1716._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9"]
                                          <-Map 102 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1716]
                                              PartitionCols:_col0
                                              Select Operator [SEL_1707] (rows=462000 width=15)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                 Please refer to the previous TableScan [TS_165]
                                          <-Reducer 65 [SIMPLE_EDGE]
                                            SHUFFLE [RS_556]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_1464] (rows=1 width=120)
                                                Conds:RS_553._col1=RS_554._col0(Inner),Output:["_col1","_col2","_col3"]
                                              <-Reducer 64 [SIMPLE_EDGE]
                                                SHUFFLE [RS_553]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_1456] (rows=3942084 width=118)
                                                    Conds:RS_1769._col0=RS_1683._col0(Inner),Output:["_col1","_col2","_col3"]
                                                  <-Map 57 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1683]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1678]
                                                  <-Map 104 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1769]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1768] (rows=143966864 width=123)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1767] (rows=143966864 width=123)
                                                          predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_551_date_dim_d_date_sk_min) AND DynamicValue(RS_551_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_551_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_467] (rows=144002668 width=123)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                          <-Reducer 68 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1766]
                                                              Group By Operator [GBY_1765] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 57 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1690]
                                                                  Group By Operator [GBY_1687] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1684] (rows=50 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1678]
                                              <-Reducer 83 [SIMPLE_EDGE]
                                                SHUFFLE [RS_554]
                                                  PartitionCols:_col0
                                                  Merge Join Operator [MERGEJOIN_1463] (rows=729 width=4)
                                                    Conds:RS_1723._col1, _col2, _col3=RS_1773._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 102 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1723]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1717] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1708] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                           Please refer to the previous TableScan [TS_165]
                                                  <-Reducer 82 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1773]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1772] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1771] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1770] (rows=120960 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 81 [SIMPLE_EDGE]
                                                            <-Reducer 80 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1853]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1852] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1851] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 71 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_493]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_109]
                                                            <-Reducer 90 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1867]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1866] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1865] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 87 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_513]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_129]
                                                            <-Reducer 96 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1881]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1880] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1879] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 93 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_534]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_150]
                  <-Reducer 6 [CONTAINS]
                    Reduce Output Operator [RS_1483]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1482] (rows=7 width=220)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Select Operator [SEL_1480] (rows=1 width=221)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Filter Operator [FIL_1479] (rows=1 width=244)
                            predicate:(_col5 > _col1)
                            Merge Join Operator [MERGEJOIN_1478] (rows=1 width=244)
                              Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                            <-Reducer 5 [CUSTOM_SIMPLE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_186]
                                Merge Join Operator [MERGEJOIN_1466] (rows=1 width=112)
                                  Conds:(Inner),Output:["_col1"]
                                <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1676]
                                    Select Operator [SEL_1675] (rows=1 width=112)
                                      Output:["_col0"]
                                      Filter Operator [FIL_1674] (rows=1 width=120)
                                        predicate:(_col0 is not null and _col1 is not null)
                                        Group By Operator [GBY_1673] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                        <-Union 27 [CUSTOM_SIMPLE_EDGE]
                                          <-Reducer 26 [CONTAINS]
                                            Reduce Output Operator [RS_1531]
                                              Group By Operator [GBY_1530] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1529] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1527] (rows=7676736 width=94)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1526] (rows=7676736 width=94)
                                                      Conds:RS_1802._col0=RS_1781._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1781]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1778]
                                                    <-Map 50 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1802]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1801]
                                          <-Reducer 42 [CONTAINS]
                                            Reduce Output Operator [RS_1567]
                                              Group By Operator [GBY_1566] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1565] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1563] (rows=3856907 width=114)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1562] (rows=3856907 width=114)
                                                      Conds:RS_1830._col0=RS_1809._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 40 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1809]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1806]
                                                    <-Map 51 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1830]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1829]
                                          <-Reducer 47 [CONTAINS]
                                            Reduce Output Operator [RS_1585]
                                              Group By Operator [GBY_1584] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1583] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1581] (rows=14736682 width=0)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1580] (rows=14736682 width=0)
                                                      Conds:RS_1837._col0=RS_1644._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 84 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1644]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1635]
                                                    <-Map 46 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1837]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1836]
                                <-Reducer 4 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1672]
                                    Select Operator [SEL_1671] (rows=1 width=8)
                                      Filter Operator [FIL_1670] (rows=1 width=8)
                                        predicate:(sq_count_check(_col0) <= 1)
                                        Group By Operator [GBY_1669] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count()"]
                                          Select Operator [SEL_1668] (rows=1 width=8)
                                            Group By Operator [GBY_1667] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Union 3 [CUSTOM_SIMPLE_EDGE]
                                              <-Reducer 2 [CONTAINS]
                                                Reduce Output Operator [RS_1477]
                                                  Group By Operator [GBY_1476] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_1475] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_1473] (rows=14736682 width=0)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_1472] (rows=14736682 width=0)
                                                          Conds:RS_1664._col0=RS_1642._col0(Inner),Output:["_col1"]
                                                        <-Map 84 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_1642]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1635]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1664]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1663]
                                              <-Reducer 21 [CONTAINS]
                                                Reduce Output Operator [RS_1513]
                                                  Group By Operator [GBY_1512] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_1511] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_1509] (rows=7676736 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_1508] (rows=7676736 width=3)
                                                          Conds:RS_1795._col0=RS_1779._col0(Inner),Output:["_col1"]
                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1779]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1778]
                                                        <-Map 20 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1795]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1794]
                                              <-Reducer 37 [CONTAINS]
                                                Reduce Output Operator [RS_1549]
                                                  Group By Operator [GBY_1548] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_1547] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_1545] (rows=3856907 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_1544] (rows=3856907 width=3)
                                                          Conds:RS_1823._col0=RS_1807._col0(Inner),Output:["_col1"]
                                                        <-Map 40 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1807]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1806]
                                                        <-Map 36 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1823]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1822]
                            <-Reducer 56 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1726]
                                Filter Operator [FIL_1725] (rows=1 width=132)
                                  predicate:_col3 is not null
                                  Group By Operator [GBY_1724] (rows=1 width=132)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 55 [SIMPLE_EDGE]
                                    SHUFFLE [RS_179]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_178] (rows=1 width=132)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_176] (rows=1 width=128)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_1433] (rows=1 width=128)
                                            Conds:RS_173._col1=RS_1709._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9"]
                                          <-Map 102 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1709]
                                              PartitionCols:_col0
                                              Select Operator [SEL_1700] (rows=462000 width=15)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                 Please refer to the previous TableScan [TS_165]
                                          <-Reducer 54 [SIMPLE_EDGE]
                                            SHUFFLE [RS_173]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_1432] (rows=1 width=120)
                                                Conds:RS_170._col1=RS_171._col0(Inner),Output:["_col1","_col2","_col3"]
                                              <-Reducer 53 [SIMPLE_EDGE]
                                                SHUFFLE [RS_170]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_1424] (rows=15062131 width=4)
                                                    Conds:RS_1695._col0=RS_1679._col0(Inner),Output:["_col1","_col2","_col3"]
                                                  <-Map 57 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1679]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1678]
                                                  <-Map 52 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1695]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1694] (rows=550076554 width=118)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1693] (rows=550076554 width=118)
                                                          predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_168_date_dim_d_date_sk_min) AND DynamicValue(RS_168_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_168_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_84] (rows=575995635 width=118)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                          <-Reducer 58 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1692]
                                                              Group By Operator [GBY_1691] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 57 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1688]
                                                                  Group By Operator [GBY_1685] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1680] (rows=50 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1678]
                                              <-Reducer 75 [SIMPLE_EDGE]
                                                SHUFFLE [RS_171]
                                                  PartitionCols:_col0
                                                  Merge Join Operator [MERGEJOIN_1431] (rows=729 width=4)
                                                    Conds:RS_1718._col1, _col2, _col3=RS_1699._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 102 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1718]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1710] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1701] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                           Please refer to the previous TableScan [TS_165]
                                                  <-Reducer 74 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1699]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1698] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1697] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1696] (rows=120960 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 73 [SIMPLE_EDGE]
                                                            <-Reducer 72 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1847]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1846] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1845] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 71 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_110]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_109]
                                                            <-Reducer 88 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1861]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1860] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1859] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 87 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_130]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_129]
                                                            <-Reducer 94 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1875]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1874] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1873] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 93 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_151]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_150]

