Warning: Shuffle Join MERGEJOIN[1202][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 4' is a cross product
Warning: Shuffle Join MERGEJOIN[1217][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 21' is a cross product
Warning: Shuffle Join MERGEJOIN[1228][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 29' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 38 <- Reducer 41 (BROADCAST_EDGE)
Map 56 <- Reducer 43 (BROADCAST_EDGE)
Map 57 <- Reducer 45 (BROADCAST_EDGE)
Map 58 <- Reducer 61 (BROADCAST_EDGE)
Map 66 <- Reducer 49 (BROADCAST_EDGE)
Map 67 <- Reducer 72 (BROADCAST_EDGE)
Map 73 <- Reducer 78 (BROADCAST_EDGE)
Map 79 <- Reducer 63 (BROADCAST_EDGE)
Map 80 <- Reducer 65 (BROADCAST_EDGE)
Reducer 10 <- Map 1 (SIMPLE_EDGE), Reducer 39 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Union 12 (CONTAINS)
Reducer 13 <- Union 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 10 (SIMPLE_EDGE), Union 15 (CONTAINS)
Reducer 16 <- Union 15 (SIMPLE_EDGE)
Reducer 17 <- Map 1 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE), Reducer 62 (SIMPLE_EDGE)
Reducer 19 <- Map 1 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (CUSTOM_SIMPLE_EDGE), Reducer 52 (CUSTOM_SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 22 <- Reducer 10 (SIMPLE_EDGE), Union 23 (CONTAINS)
Reducer 24 <- Union 23 (SIMPLE_EDGE)
Reducer 25 <- Map 1 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (SIMPLE_EDGE), Reducer 64 (SIMPLE_EDGE)
Reducer 27 <- Map 1 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)
Reducer 28 <- Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Reducer 28 (CUSTOM_SIMPLE_EDGE), Reducer 55 (CUSTOM_SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 1 (SIMPLE_EDGE), Reducer 42 (SIMPLE_EDGE)
Reducer 31 <- Reducer 30 (SIMPLE_EDGE), Union 12 (CONTAINS)
Reducer 32 <- Reducer 30 (SIMPLE_EDGE), Union 15 (CONTAINS)
Reducer 33 <- Reducer 30 (SIMPLE_EDGE), Union 23 (CONTAINS)
Reducer 34 <- Map 1 (SIMPLE_EDGE), Reducer 44 (SIMPLE_EDGE)
Reducer 35 <- Reducer 34 (SIMPLE_EDGE), Union 12 (CONTAINS)
Reducer 36 <- Reducer 34 (SIMPLE_EDGE), Union 15 (CONTAINS)
Reducer 37 <- Reducer 34 (SIMPLE_EDGE), Union 23 (CONTAINS)
Reducer 39 <- Map 38 (SIMPLE_EDGE), Map 40 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE), Reducer 48 (CUSTOM_SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 41 <- Map 40 (CUSTOM_SIMPLE_EDGE)
Reducer 42 <- Map 40 (SIMPLE_EDGE), Map 56 (SIMPLE_EDGE)
Reducer 43 <- Map 40 (CUSTOM_SIMPLE_EDGE)
Reducer 44 <- Map 40 (SIMPLE_EDGE), Map 57 (SIMPLE_EDGE)
Reducer 45 <- Map 40 (CUSTOM_SIMPLE_EDGE)
Reducer 46 <- Map 40 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE), Union 47 (CONTAINS)
Reducer 48 <- Union 47 (CUSTOM_SIMPLE_EDGE)
Reducer 49 <- Map 40 (CUSTOM_SIMPLE_EDGE)
Reducer 50 <- Map 40 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE), Union 51 (CONTAINS)
Reducer 52 <- Union 51 (CUSTOM_SIMPLE_EDGE)
Reducer 53 <- Map 40 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 55 <- Union 54 (CUSTOM_SIMPLE_EDGE)
Reducer 59 <- Map 58 (SIMPLE_EDGE), Map 60 (SIMPLE_EDGE)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 61 <- Map 60 (CUSTOM_SIMPLE_EDGE)
Reducer 62 <- Map 60 (SIMPLE_EDGE), Map 79 (SIMPLE_EDGE)
Reducer 63 <- Map 60 (CUSTOM_SIMPLE_EDGE)
Reducer 64 <- Map 60 (SIMPLE_EDGE), Map 80 (SIMPLE_EDGE)
Reducer 65 <- Map 60 (CUSTOM_SIMPLE_EDGE)
Reducer 68 <- Map 67 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE), Union 47 (CONTAINS)
Reducer 69 <- Map 67 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE), Union 51 (CONTAINS)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 70 <- Map 67 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 72 <- Map 71 (CUSTOM_SIMPLE_EDGE)
Reducer 74 <- Map 73 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 47 (CONTAINS)
Reducer 75 <- Map 73 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 51 (CONTAINS)
Reducer 76 <- Map 73 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 78 <- Map 77 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 9 <- Reducer 59 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_1372]
        Limit [LIM_1371] (rows=100 width=223)
          Number of rows:100
          Select Operator [SEL_1370] (rows=304320 width=222)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1369]
              Select Operator [SEL_1368] (rows=304320 width=222)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1367] (rows=304320 width=230)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 5 [SIMPLE_EDGE]
                  <-Reducer 21 [CONTAINS]
                    Reduce Output Operator [RS_1223]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1222] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1221] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1219] (rows=40576 width=222)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1218] (rows=40576 width=243)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1217] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1415]
                                  Filter Operator [FIL_1414] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1413] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 19 [SIMPLE_EDGE]
                                      SHUFFLE [RS_242]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_241] (rows=486912 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_239] (rows=7790806 width=106)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1182] (rows=7790806 width=106)
                                              Conds:RS_1327._col0=RS_237._col2(Inner),Output:["_col1","_col2","_col3","_col7","_col8"]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1327]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1318] (rows=462000 width=15)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                  TableScan [TS_0] (rows=462000 width=15)
                                                    default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                            <-Reducer 18 [SIMPLE_EDGE]
                                              SHUFFLE [RS_237]
                                                PartitionCols:_col2
                                                Merge Join Operator [MERGEJOIN_1181] (rows=7790806 width=98)
                                                  Conds:RS_232._col0=RS_233._col1(Inner),Output:["_col2","_col3","_col4"]
                                                <-Reducer 17 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_232]
                                                    PartitionCols:_col0
                                                    Merge Join Operator [MERGEJOIN_1179] (rows=724 width=4)
                                                      Conds:RS_1335._col1, _col2, _col3=RS_1407._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1335]
                                                        PartitionCols:_col1, _col2, _col3
                                                        Select Operator [SEL_1328] (rows=458612 width=15)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1319] (rows=458612 width=15)
                                                            predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                             Please refer to the previous TableScan [TS_0]
                                                    <-Reducer 16 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1407]
                                                        PartitionCols:_col0, _col1, _col2
                                                        Select Operator [SEL_1406] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1405] (rows=1 width=20)
                                                            predicate:(_col3 = 3L)
                                                            Group By Operator [GBY_1404] (rows=121728 width=19)
                                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Union 15 [SIMPLE_EDGE]
                                                              <-Reducer 14 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1403]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1402] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1401] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 10 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_167]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_21] (rows=121728 width=19)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                          Merge Join Operator [MERGEJOIN_1161] (rows=14628613 width=11)
                                                                            Conds:RS_17._col1=RS_1332._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1332]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1324] (rows=458612 width=15)
                                                                                Output:["_col0","_col1","_col2","_col3"]
                                                                                Filter Operator [FIL_1315] (rows=458612 width=15)
                                                                                  predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                                   Please refer to the previous TableScan [TS_0]
                                                                          <-Reducer 39 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_17]
                                                                              PartitionCols:_col1
                                                                              Merge Join Operator [MERGEJOIN_1160] (rows=14736682 width=4)
                                                                                Conds:RS_1397._col0=RS_1375._col0(Inner),Output:["_col1"]
                                                                              <-Map 40 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1375]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_1374] (rows=1957 width=4)
                                                                                    Output:["_col0"]
                                                                                    Filter Operator [FIL_1373] (rows=1957 width=8)
                                                                                      predicate:d_year BETWEEN 1999 AND 2001
                                                                                      TableScan [TS_8] (rows=73049 width=8)
                                                                                        default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                                              <-Map 38 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1397]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_1396] (rows=550076554 width=7)
                                                                                    Output:["_col0","_col1"]
                                                                                    Filter Operator [FIL_1395] (rows=550076554 width=7)
                                                                                      predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_15_d1_d_date_sk_min) AND DynamicValue(RS_15_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_15_d1_d_date_sk_bloom_filter)))
                                                                                      TableScan [TS_5] (rows=575995635 width=7)
                                                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                                                      <-Reducer 41 [BROADCAST_EDGE] vectorized
                                                                                        BROADCAST [RS_1394]
                                                                                          Group By Operator [GBY_1393] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                          <-Map 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                            SHUFFLE [RS_1389]
                                                                                              Group By Operator [GBY_1385] (rows=1 width=12)
                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                Select Operator [SEL_1376] (rows=1957 width=4)
                                                                                                  Output:["_col0"]
                                                                                                   Please refer to the previous Select Operator [SEL_1374]
                                                              <-Reducer 32 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1449]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1448] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1447] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 30 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_187]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_41] (rows=121728 width=19)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                          Merge Join Operator [MERGEJOIN_1163] (rows=7620440 width=11)
                                                                            Conds:RS_37._col1=RS_1333._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1333]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1325] (rows=458612 width=15)
                                                                                Output:["_col0","_col1","_col2","_col3"]
                                                                                Filter Operator [FIL_1316] (rows=458612 width=15)
                                                                                  predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                                   Please refer to the previous TableScan [TS_0]
                                                                          <-Reducer 42 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_37]
                                                                              PartitionCols:_col1
                                                                              Merge Join Operator [MERGEJOIN_1162] (rows=7676736 width=4)
                                                                                Conds:RS_1443._col0=RS_1377._col0(Inner),Output:["_col1"]
                                                                              <-Map 40 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1377]
                                                                                  PartitionCols:_col0
                                                                                   Please refer to the previous Select Operator [SEL_1374]
                                                                              <-Map 56 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1443]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_1442] (rows=286549727 width=7)
                                                                                    Output:["_col0","_col1"]
                                                                                    Filter Operator [FIL_1441] (rows=286549727 width=7)
                                                                                      predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_35_d2_d_date_sk_min) AND DynamicValue(RS_35_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_35_d2_d_date_sk_bloom_filter)))
                                                                                      TableScan [TS_25] (rows=287989836 width=7)
                                                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                      <-Reducer 43 [BROADCAST_EDGE] vectorized
                                                                                        BROADCAST [RS_1440]
                                                                                          Group By Operator [GBY_1439] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                          <-Map 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                            SHUFFLE [RS_1390]
                                                                                              Group By Operator [GBY_1386] (rows=1 width=12)
                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                Select Operator [SEL_1378] (rows=1957 width=4)
                                                                                                  Output:["_col0"]
                                                                                                   Please refer to the previous Select Operator [SEL_1374]
                                                              <-Reducer 36 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1463]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1462] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1461] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 34 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_208]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_62] (rows=121728 width=19)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                          Merge Join Operator [MERGEJOIN_1165] (rows=3828623 width=11)
                                                                            Conds:RS_58._col1=RS_1334._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1334]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1326] (rows=458612 width=15)
                                                                                Output:["_col0","_col1","_col2","_col3"]
                                                                                Filter Operator [FIL_1317] (rows=458612 width=15)
                                                                                  predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                                                   Please refer to the previous TableScan [TS_0]
                                                                          <-Reducer 44 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_58]
                                                                              PartitionCols:_col1
                                                                              Merge Join Operator [MERGEJOIN_1164] (rows=3856907 width=4)
                                                                                Conds:RS_1457._col0=RS_1379._col0(Inner),Output:["_col1"]
                                                                              <-Map 40 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1379]
                                                                                  PartitionCols:_col0
                                                                                   Please refer to the previous Select Operator [SEL_1374]
                                                                              <-Map 57 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1457]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_1456] (rows=143966864 width=7)
                                                                                    Output:["_col0","_col1"]
                                                                                    Filter Operator [FIL_1455] (rows=143966864 width=7)
                                                                                      predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_56_d3_d_date_sk_min) AND DynamicValue(RS_56_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_56_d3_d_date_sk_bloom_filter)))
                                                                                      TableScan [TS_46] (rows=144002668 width=7)
                                                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                      <-Reducer 45 [BROADCAST_EDGE] vectorized
                                                                                        BROADCAST [RS_1454]
                                                                                          Group By Operator [GBY_1453] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                          <-Map 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                            SHUFFLE [RS_1391]
                                                                                              Group By Operator [GBY_1387] (rows=1 width=12)
                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                Select Operator [SEL_1380] (rows=1957 width=4)
                                                                                                  Output:["_col0"]
                                                                                                   Please refer to the previous Select Operator [SEL_1374]
                                                <-Reducer 62 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_233]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1180] (rows=7790806 width=98)
                                                      Conds:RS_1412._col0=RS_1345._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 60 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1345]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1342] (rows=50 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_1341] (rows=50 width=12)
                                                            predicate:((d_year = 2000) and (d_moy = 11))
                                                            TableScan [TS_80] (rows=73049 width=12)
                                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                    <-Map 79 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1412]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1411] (rows=286549727 width=123)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1410] (rows=286549727 width=123)
                                                            predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_229_date_dim_d_date_sk_min) AND DynamicValue(RS_229_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_229_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_222] (rows=287989836 width=123)
                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                            <-Reducer 63 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1409]
                                                                Group By Operator [GBY_1408] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 60 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1353]
                                                                    Group By Operator [GBY_1350] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1346] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1342]
                              <-Reducer 52 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1419]
                                  Select Operator [SEL_1418] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1417] (rows=1 width=120)
                                      predicate:CAST( (_col0 / _col1) AS decimal(22,6)) is not null
                                      Group By Operator [GBY_1416] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 51 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 50 [CONTAINS]
                                          Reduce Output Operator [RS_1270]
                                            Group By Operator [GBY_1269] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1268] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1266] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1265] (rows=14736682 width=0)
                                                    Conds:RS_1472._col0=RS_1383._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 40 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1383]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1374]
                                                  <-Map 66 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1472]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1470] (rows=550076554 width=114)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1469] (rows=550076554 width=114)
                                                          predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_108_date_dim_d_date_sk_min) AND DynamicValue(RS_108_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_108_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_101] (rows=575995635 width=114)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                                                          <-Reducer 49 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1468]
                                                              Group By Operator [GBY_1467] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_1392]
                                                                  Group By Operator [GBY_1388] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1382] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1374]
                                        <-Reducer 69 [CONTAINS]
                                          Reduce Output Operator [RS_1288]
                                            Group By Operator [GBY_1287] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1286] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1284] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1283] (rows=7676736 width=94)
                                                    Conds:RS_1487._col0=RS_1478._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 71 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1478]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1475] (rows=1957 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1474] (rows=1957 width=8)
                                                          predicate:d_year BETWEEN 1998 AND 2000
                                                          TableScan [TS_114] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1487]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1485] (rows=286549727 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1484] (rows=286549727 width=119)
                                                          predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_118_date_dim_d_date_sk_min) AND DynamicValue(RS_118_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_118_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_111] (rows=287989836 width=119)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                                          <-Reducer 72 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1483]
                                                              Group By Operator [GBY_1482] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 71 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1481]
                                                                  Group By Operator [GBY_1480] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1477] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1475]
                                        <-Reducer 75 [CONTAINS]
                                          Reduce Output Operator [RS_1306]
                                            Group By Operator [GBY_1305] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1304] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1302] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1301] (rows=3856907 width=114)
                                                    Conds:RS_1502._col0=RS_1493._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 77 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1493]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1490] (rows=1957 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1489] (rows=1957 width=8)
                                                          predicate:d_year BETWEEN 1998 AND 2000
                                                          TableScan [TS_125] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1502]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1500] (rows=143966864 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1499] (rows=143966864 width=119)
                                                          predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_129_date_dim_d_date_sk_min) AND DynamicValue(RS_129_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_129_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_122] (rows=144002668 width=119)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                                          <-Reducer 78 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1498]
                                                              Group By Operator [GBY_1497] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 77 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1496]
                                                                  Group By Operator [GBY_1495] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1492] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1490]
                  <-Reducer 29 [CONTAINS]
                    Reduce Output Operator [RS_1234]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1233] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1232] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1230] (rows=40576 width=218)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1229] (rows=40576 width=243)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1228] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1434]
                                  Filter Operator [FIL_1433] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1432] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 27 [SIMPLE_EDGE]
                                      SHUFFLE [RS_388]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_387] (rows=243456 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_385] (rows=3942084 width=126)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1195] (rows=3942084 width=126)
                                              Conds:RS_1329._col0=RS_383._col2(Inner),Output:["_col1","_col2","_col3","_col7","_col8"]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1329]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1320] (rows=462000 width=15)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                   Please refer to the previous TableScan [TS_0]
                                            <-Reducer 26 [SIMPLE_EDGE]
                                              SHUFFLE [RS_383]
                                                PartitionCols:_col2
                                                Merge Join Operator [MERGEJOIN_1194] (rows=3942084 width=118)
                                                  Conds:RS_378._col0=RS_379._col1(Inner),Output:["_col2","_col3","_col4"]
                                                <-Reducer 25 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_378]
                                                    PartitionCols:_col0
                                                    Merge Join Operator [MERGEJOIN_1192] (rows=724 width=4)
                                                      Conds:RS_1336._col1, _col2, _col3=RS_1426._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1336]
                                                        PartitionCols:_col1, _col2, _col3
                                                        Select Operator [SEL_1330] (rows=458612 width=15)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1321] (rows=458612 width=15)
                                                            predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                             Please refer to the previous TableScan [TS_0]
                                                    <-Reducer 24 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1426]
                                                        PartitionCols:_col0, _col1, _col2
                                                        Select Operator [SEL_1425] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1424] (rows=1 width=20)
                                                            predicate:(_col3 = 3L)
                                                            Group By Operator [GBY_1423] (rows=121728 width=19)
                                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Union 23 [SIMPLE_EDGE]
                                                              <-Reducer 22 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1422]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1421] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1420] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 10 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_313]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_21]
                                                              <-Reducer 33 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1452]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1451] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1450] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 30 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_333]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_41]
                                                              <-Reducer 37 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1466]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1465] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1464] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 34 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_354]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_62]
                                                <-Reducer 64 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_379]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1193] (rows=3942084 width=118)
                                                      Conds:RS_1431._col0=RS_1347._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 60 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1347]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1342]
                                                    <-Map 80 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1431]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1430] (rows=143966864 width=123)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1429] (rows=143966864 width=123)
                                                            predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_375_date_dim_d_date_sk_min) AND DynamicValue(RS_375_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_375_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_368] (rows=144002668 width=123)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                            <-Reducer 65 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1428]
                                                                Group By Operator [GBY_1427] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 60 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1354]
                                                                    Group By Operator [GBY_1351] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1348] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1342]
                              <-Reducer 55 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1438]
                                  Select Operator [SEL_1437] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1436] (rows=1 width=120)
                                      predicate:CAST( (_col0 / _col1) AS decimal(22,6)) is not null
                                      Group By Operator [GBY_1435] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 54 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 53 [CONTAINS]
                                          Reduce Output Operator [RS_1276]
                                            Group By Operator [GBY_1275] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1274] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1272] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1271] (rows=14736682 width=0)
                                                    Conds:RS_1473._col0=RS_1384._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 40 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1384]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1374]
                                                  <-Map 66 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1473]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1470]
                                        <-Reducer 70 [CONTAINS]
                                          Reduce Output Operator [RS_1294]
                                            Group By Operator [GBY_1293] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1292] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1290] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1289] (rows=7676736 width=94)
                                                    Conds:RS_1488._col0=RS_1479._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 71 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1479]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1475]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1488]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1485]
                                        <-Reducer 76 [CONTAINS]
                                          Reduce Output Operator [RS_1312]
                                            Group By Operator [GBY_1311] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1310] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1308] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1307] (rows=3856907 width=114)
                                                    Conds:RS_1503._col0=RS_1494._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 77 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1494]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1490]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1503]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1500]
                  <-Reducer 4 [CONTAINS]
                    Reduce Output Operator [RS_1208]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1207] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1206] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1204] (rows=40576 width=220)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1203] (rows=40576 width=243)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1202] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 3 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1362]
                                  Filter Operator [FIL_1361] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1360] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 2 [SIMPLE_EDGE]
                                      SHUFFLE [RS_97]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_96] (rows=121728 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_94] (rows=15062131 width=11)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1169] (rows=15062131 width=11)
                                              Conds:RS_1322._col0=RS_92._col2(Inner),Output:["_col1","_col2","_col3","_col7","_col8"]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1322]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1313] (rows=462000 width=15)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                   Please refer to the previous TableScan [TS_0]
                                            <-Reducer 9 [SIMPLE_EDGE]
                                              SHUFFLE [RS_92]
                                                PartitionCols:_col2
                                                Merge Join Operator [MERGEJOIN_1168] (rows=15062131 width=4)
                                                  Conds:RS_87._col0=RS_88._col1(Inner),Output:["_col2","_col3","_col4"]
                                                <-Reducer 59 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_88]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1167] (rows=15062131 width=4)
                                                      Conds:RS_1359._col0=RS_1343._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 60 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1343]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1342]
                                                    <-Map 58 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1359]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1358] (rows=550076554 width=118)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1357] (rows=550076554 width=118)
                                                            predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_84_date_dim_d_date_sk_min) AND DynamicValue(RS_84_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_84_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_77] (rows=575995635 width=118)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                            <-Reducer 61 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1356]
                                                                Group By Operator [GBY_1355] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 60 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1352]
                                                                    Group By Operator [GBY_1349] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1344] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1342]
                                                <-Reducer 8 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_87]
                                                    PartitionCols:_col0
                                                    Merge Join Operator [MERGEJOIN_1166] (rows=724 width=4)
                                                      Conds:RS_1331._col1, _col2, _col3=RS_1340._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1331]
                                                        PartitionCols:_col1, _col2, _col3
                                                        Select Operator [SEL_1323] (rows=458612 width=15)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1314] (rows=458612 width=15)
                                                            predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                             Please refer to the previous TableScan [TS_0]
                                                    <-Reducer 13 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1340]
                                                        PartitionCols:_col0, _col1, _col2
                                                        Select Operator [SEL_1339] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1338] (rows=1 width=20)
                                                            predicate:(_col3 = 3L)
                                                            Group By Operator [GBY_1337] (rows=121728 width=19)
                                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Union 12 [SIMPLE_EDGE]
                                                              <-Reducer 11 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1400]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1399] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1398] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 10 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_22]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_21]
                                                              <-Reducer 31 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1446]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1445] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1444] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 30 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_42]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_41]
                                                              <-Reducer 35 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1460]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1459] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1458] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 34 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_63]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_62]
                              <-Reducer 48 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1366]
                                  Select Operator [SEL_1365] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1364] (rows=1 width=120)
                                      predicate:CAST( (_col0 / _col1) AS decimal(22,6)) is not null
                                      Group By Operator [GBY_1363] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 47 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 46 [CONTAINS]
                                          Reduce Output Operator [RS_1264]
                                            Group By Operator [GBY_1263] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1262] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1260] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1259] (rows=14736682 width=0)
                                                    Conds:RS_1471._col0=RS_1381._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 40 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1381]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1374]
                                                  <-Map 66 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1471]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1470]
                                        <-Reducer 68 [CONTAINS]
                                          Reduce Output Operator [RS_1282]
                                            Group By Operator [GBY_1281] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1280] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1278] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1277] (rows=7676736 width=94)
                                                    Conds:RS_1486._col0=RS_1476._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 71 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1476]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1475]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1486]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1485]
                                        <-Reducer 74 [CONTAINS]
                                          Reduce Output Operator [RS_1300]
                                            Group By Operator [GBY_1299] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1298] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1296] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1295] (rows=3856907 width=114)
                                                    Conds:RS_1501._col0=RS_1491._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 77 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1491]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1490]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1501]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1500]

