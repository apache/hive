PREHOOK: query: explain
select   
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales
   ,store_returns
   ,catalog_sales
   ,date_dim             d1
   ,date_dim             d2
   ,date_dim             d3
   ,store
   ,item
 where
     d1.d_moy               = 4 
 and d1.d_year              = 1999
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 4 and  4 + 3 
 and d2.d_year              = 1999
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk     
 and d3.d_year              in (1999,1999+1,1999+2)
 group by
    i_item_id
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 order by
    i_item_id 
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select   
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales
   ,store_returns
   ,catalog_sales
   ,date_dim             d1
   ,date_dim             d2
   ,date_dim             d3
   ,store
   ,item
 where
     d1.d_moy               = 4 
 and d1.d_year              = 1999
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 4 and  4 + 3 
 and d2.d_year              = 1999
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk     
 and d3.d_year              in (1999,1999+1,1999+2)
 group by
    i_item_id
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 order by
    i_item_id 
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Map 10 <- Reducer 16 (BROADCAST_EDGE), Reducer 18 (BROADCAST_EDGE), Reducer 19 (BROADCAST_EDGE), Reducer 20 (BROADCAST_EDGE), Reducer 6 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)
Reducer 13 <- Map 22 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 23 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 15 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Reducer 17 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 20 <- Reducer 17 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 14 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_250]
        Limit [LIM_249] (rows=100 width=496)
          Number of rows:100
          Select Operator [SEL_248] (rows=21091879 width=496)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_247]
              Group By Operator [GBY_246] (rows=21091879 width=496)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
              <-Reducer 3 [SIMPLE_EDGE]
                SHUFFLE [RS_47]
                  PartitionCols:_col0, _col1, _col2, _col3
                  Group By Operator [GBY_46] (rows=21091879 width=496)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col13)","sum(_col19)","sum(_col3)"],keys:_col6, _col7, _col22, _col23
                    Top N Key Operator [TNK_91] (rows=4156223234 width=483)
                      keys:_col6, _col7, _col22, _col23,sort order:++++,top n:100
                      Merge Join Operator [MERGEJOIN_203] (rows=4156223234 width=483)
                        Conds:RS_42._col2, _col1=RS_43._col11, _col12(Inner),Output:["_col3","_col6","_col7","_col13","_col19","_col22","_col23"]
                      <-Reducer 2 [SIMPLE_EDGE]
                        PARTITION_ONLY_SHUFFLE [RS_42]
                          PartitionCols:_col2, _col1
                          Merge Join Operator [MERGEJOIN_197] (rows=7638375 width=10)
                            Conds:RS_214._col0=RS_206._col0(Inner),Output:["_col1","_col2","_col3"]
                          <-Map 8 [SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_206]
                              PartitionCols:_col0
                              Select Operator [SEL_205] (rows=1957 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_204] (rows=1957 width=8)
                                  predicate:(d_year) IN (1999, 2000, 2001)
                                  TableScan [TS_3] (rows=73049 width=8)
                                    default@date_dim,d3,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                          <-Map 1 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_214]
                              PartitionCols:_col0
                              Select Operator [SEL_213] (rows=285117831 width=15)
                                Output:["_col0","_col1","_col2","_col3"]
                                Filter Operator [FIL_212] (rows=285117831 width=15)
                                  predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_40_d3_d_date_sk_min) AND DynamicValue(RS_40_d3_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_40_d3_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                  TableScan [TS_0] (rows=287989836 width=15)
                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity"]
                                  <-Reducer 9 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_211]
                                      Group By Operator [GBY_210] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                      <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_209]
                                          Group By Operator [GBY_208] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                            Select Operator [SEL_207] (rows=1957 width=4)
                                              Output:["_col0"]
                                               Please refer to the previous Select Operator [SEL_205]
                      <-Reducer 14 [SIMPLE_EDGE]
                        SHUFFLE [RS_43]
                          PartitionCols:_col11, _col12
                          Select Operator [SEL_38] (rows=21091879 width=484)
                            Output:["_col1","_col2","_col8","_col11","_col12","_col14","_col17","_col18"]
                            Merge Join Operator [MERGEJOIN_202] (rows=21091879 width=484)
                              Conds:RS_35._col3=RS_245._col0(Inner),Output:["_col5","_col8","_col9","_col11","_col14","_col15","_col17","_col18"]
                            <-Map 23 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_245]
                                PartitionCols:_col0
                                Select Operator [SEL_244] (rows=1704 width=192)
                                  Output:["_col0","_col1","_col2"]
                                  TableScan [TS_24] (rows=1704 width=192)
                                    default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id","s_store_name"]
                            <-Reducer 13 [SIMPLE_EDGE]
                              SHUFFLE [RS_35]
                                PartitionCols:_col3
                                Merge Join Operator [MERGEJOIN_201] (rows=21091879 width=298)
                                  Conds:RS_32._col1=RS_243._col0(Inner),Output:["_col3","_col5","_col8","_col9","_col11","_col14","_col15"]
                                <-Map 22 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_243]
                                    PartitionCols:_col0
                                    Select Operator [SEL_242] (rows=462000 width=288)
                                      Output:["_col0","_col1","_col2"]
                                      TableScan [TS_22] (rows=462000 width=288)
                                        default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id","i_item_desc"]
                                <-Reducer 12 [SIMPLE_EDGE]
                                  SHUFFLE [RS_32]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_200] (rows=21091879 width=18)
                                      Conds:RS_29._col1, _col2, _col4=RS_30._col1, _col2, _col3(Inner),Output:["_col1","_col3","_col5","_col8","_col9","_col11"]
                                    <-Reducer 17 [SIMPLE_EDGE]
                                      PARTITION_ONLY_SHUFFLE [RS_30]
                                        PartitionCols:_col1, _col2, _col3
                                        Merge Join Operator [MERGEJOIN_199] (rows=5384572 width=13)
                                          Conds:RS_228._col0=RS_221._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                        <-Map 15 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_221]
                                            PartitionCols:_col0
                                            Select Operator [SEL_218] (rows=201 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_216] (rows=201 width=12)
                                                predicate:((d_year = 1999) and d_moy BETWEEN 4 AND 7)
                                                TableScan [TS_9] (rows=73049 width=12)
                                                  default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                        <-Map 21 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_228]
                                            PartitionCols:_col0
                                            Select Operator [SEL_227] (rows=53632139 width=19)
                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                              Filter Operator [FIL_226] (rows=53632139 width=19)
                                                predicate:(sr_customer_sk is not null and sr_returned_date_sk is not null)
                                                TableScan [TS_12] (rows=57591150 width=19)
                                                  default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_returned_date_sk","sr_item_sk","sr_customer_sk","sr_ticket_number","sr_return_quantity"]
                                    <-Reducer 11 [SIMPLE_EDGE]
                                      SHUFFLE [RS_29]
                                        PartitionCols:_col1, _col2, _col4
                                        Merge Join Operator [MERGEJOIN_198] (rows=13737330 width=8)
                                          Conds:RS_241._col0=RS_219._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                        <-Map 15 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_219]
                                            PartitionCols:_col0
                                            Select Operator [SEL_217] (rows=50 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_215] (rows=50 width=12)
                                                predicate:((d_moy = 4) and (d_year = 1999))
                                                 Please refer to the previous TableScan [TS_9]
                                        <-Map 10 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_241]
                                            PartitionCols:_col0
                                            Select Operator [SEL_240] (rows=501694138 width=23)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Filter Operator [FIL_239] (rows=501694138 width=23)
                                                predicate:((ss_customer_sk BETWEEN DynamicValue(RS_30_store_returns_sr_customer_sk_min) AND DynamicValue(RS_30_store_returns_sr_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_30_store_returns_sr_customer_sk_bloom_filter))) and (ss_customer_sk BETWEEN DynamicValue(RS_42_catalog_sales_cs_bill_customer_sk_min) AND DynamicValue(RS_42_catalog_sales_cs_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_42_catalog_sales_cs_bill_customer_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_30_store_returns_sr_item_sk_min) AND DynamicValue(RS_30_store_returns_sr_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_30_store_returns_sr_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_42_catalog_sales_cs_item_sk_min) AND DynamicValue(RS_42_catalog_sales_cs_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_42_catalog_sales_cs_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_27_d1_d_date_sk_min) AND DynamicValue(RS_27_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_27_d1_d_date_sk_bloom_filter))) and (ss_ticket_number BETWEEN DynamicValue(RS_30_store_returns_sr_ticket_number_min) AND DynamicValue(RS_30_store_returns_sr_ticket_number_max) and in_bloom_filter(ss_ticket_number, DynamicValue(RS_30_store_returns_sr_ticket_number_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                TableScan [TS_6] (rows=575995635 width=23)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_quantity"]
                                                <-Reducer 16 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_225]
                                                    Group By Operator [GBY_224] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_223]
                                                        Group By Operator [GBY_222] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_220] (rows=50 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_217]
                                                <-Reducer 18 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_230]
                                                    Group By Operator [GBY_229] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Reducer 17 [CUSTOM_SIMPLE_EDGE]
                                                      PARTITION_ONLY_SHUFFLE [RS_119]
                                                        Group By Operator [GBY_118] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_117] (rows=5384572 width=8)
                                                            Output:["_col0"]
                                                             Please refer to the previous Merge Join Operator [MERGEJOIN_199]
                                                <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_232]
                                                    Group By Operator [GBY_231] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Reducer 17 [CUSTOM_SIMPLE_EDGE]
                                                      PARTITION_ONLY_SHUFFLE [RS_124]
                                                        Group By Operator [GBY_123] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_122] (rows=5384572 width=5)
                                                            Output:["_col0"]
                                                             Please refer to the previous Merge Join Operator [MERGEJOIN_199]
                                                <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_234]
                                                    Group By Operator [GBY_233] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=3507020)"]
                                                    <-Reducer 17 [CUSTOM_SIMPLE_EDGE]
                                                      PARTITION_ONLY_SHUFFLE [RS_129]
                                                        Group By Operator [GBY_128] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=3507020)"]
                                                          Select Operator [SEL_127] (rows=5384572 width=8)
                                                            Output:["_col0"]
                                                             Please refer to the previous Merge Join Operator [MERGEJOIN_199]
                                                <-Reducer 6 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_236]
                                                    Group By Operator [GBY_235] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                                      PARTITION_ONLY_SHUFFLE [RS_144]
                                                        Group By Operator [GBY_143] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_142] (rows=7638375 width=8)
                                                            Output:["_col0"]
                                                             Please refer to the previous Merge Join Operator [MERGEJOIN_197]
                                                <-Reducer 7 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_238]
                                                    Group By Operator [GBY_237] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                                      PARTITION_ONLY_SHUFFLE [RS_149]
                                                        Group By Operator [GBY_148] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_147] (rows=7638375 width=6)
                                                            Output:["_col0"]
                                                             Please refer to the previous Merge Join Operator [MERGEJOIN_197]

