Warning: Shuffle Join MERGEJOIN[406][tables = [$hdt$_3, $hdt$_4]] in Stage 'Reducer 20' is a cross product
PREHOOK: query: explain
with ss_items as
 (select i_item_id item_id
        ,sum(ss_ext_sales_price) ss_item_rev 
 from store_sales
     ,item
     ,date_dim
 where ss_item_sk = i_item_sk
   and d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
   and ss_sold_date_sk   = d_date_sk
 group by i_item_id),
 cs_items as
 (select i_item_id item_id
        ,sum(cs_ext_sales_price) cs_item_rev
  from catalog_sales
      ,item
      ,date_dim
 where cs_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
  and  cs_sold_date_sk = d_date_sk
 group by i_item_id),
 ws_items as
 (select i_item_id item_id
        ,sum(ws_ext_sales_price) ws_item_rev
  from web_sales
      ,item
      ,date_dim
 where ws_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq =(select d_week_seq 
                                     from date_dim
                                     where d_date = '1998-02-19'))
  and ws_sold_date_sk   = d_date_sk
 group by i_item_id)
  select  ss_items.item_id
       ,ss_item_rev
       ,ss_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ss_dev
       ,cs_item_rev
       ,cs_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 cs_dev
       ,ws_item_rev
       ,ws_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ws_dev
       ,(ss_item_rev+cs_item_rev+ws_item_rev)/3 average
 from ss_items,cs_items,ws_items
 where ss_items.item_id=cs_items.item_id
   and ss_items.item_id=ws_items.item_id 
   and ss_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
   and ss_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and cs_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and cs_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and ws_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and ws_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
 order by item_id
         ,ss_item_rev
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss_items as
 (select i_item_id item_id
        ,sum(ss_ext_sales_price) ss_item_rev 
 from store_sales
     ,item
     ,date_dim
 where ss_item_sk = i_item_sk
   and d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
   and ss_sold_date_sk   = d_date_sk
 group by i_item_id),
 cs_items as
 (select i_item_id item_id
        ,sum(cs_ext_sales_price) cs_item_rev
  from catalog_sales
      ,item
      ,date_dim
 where cs_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
  and  cs_sold_date_sk = d_date_sk
 group by i_item_id),
 ws_items as
 (select i_item_id item_id
        ,sum(ws_ext_sales_price) ws_item_rev
  from web_sales
      ,item
      ,date_dim
 where ws_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq =(select d_week_seq 
                                     from date_dim
                                     where d_date = '1998-02-19'))
  and ws_sold_date_sk   = d_date_sk
 group by i_item_id)
  select  ss_items.item_id
       ,ss_item_rev
       ,ss_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ss_dev
       ,cs_item_rev
       ,cs_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 cs_dev
       ,ws_item_rev
       ,ws_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ws_dev
       ,(ss_item_rev+cs_item_rev+ws_item_rev)/3 average
 from ss_items,cs_items,ws_items
 where ss_items.item_id=cs_items.item_id
   and ss_items.item_id=ws_items.item_id 
   and ss_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
   and ss_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and cs_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and cs_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and ws_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and ws_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
 order by item_id
         ,ss_item_rev
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 24 <- Reducer 9 (BROADCAST_EDGE)
Map 26 <- Reducer 13 (BROADCAST_EDGE)
Map 27 <- Reducer 17 (BROADCAST_EDGE)
Reducer 10 <- Map 26 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 11 <- Map 25 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 27 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 15 <- Map 25 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 20 <- Map 23 (CUSTOM_SIMPLE_EDGE), Reducer 19 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Map 23 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE)
Reducer 3 <- Map 24 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 25 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 12 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 16 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_470]
        Limit [LIM_469] (rows=1 width=884)
          Number of rows:100
          Select Operator [SEL_468] (rows=1 width=884)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 7 [SIMPLE_EDGE]
            SHUFFLE [RS_157]
              Select Operator [SEL_156] (rows=1 width=884)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                Filter Operator [FIL_152] (rows=1 width=660)
                  predicate:(_col5 BETWEEN (0.9 * _col1) AND (1.1 * _col1) and _col5 BETWEEN (0.9 * _col3) AND (1.1 * _col3) and _col1 BETWEEN _col6 AND _col7 and _col3 BETWEEN _col6 AND _col7)
                  Merge Join Operator [MERGEJOIN_422] (rows=3836 width=660)
                    Conds:RS_149._col0=RS_467._col0(Inner),Output:["_col0","_col1","_col3","_col5","_col6","_col7"]
                  <-Reducer 16 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_467]
                      PartitionCols:_col0
                      Select Operator [SEL_466] (rows=310774 width=436)
                        Output:["_col0","_col1","_col2","_col3"]
                        Group By Operator [GBY_465] (rows=310774 width=212)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 15 [SIMPLE_EDGE]
                          SHUFFLE [RS_141]
                            PartitionCols:_col0
                            Group By Operator [GBY_140] (rows=37292880 width=212)
                              Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col7
                              Merge Join Operator [MERGEJOIN_420] (rows=143966864 width=211)
                                Conds:RS_136._col4=RS_450._col0(Inner),Output:["_col5","_col7"]
                              <-Map 25 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_450]
                                  PartitionCols:_col0
                                  Select Operator [SEL_447] (rows=462000 width=104)
                                    Output:["_col0","_col1"]
                                    TableScan [TS_32] (rows=462000 width=104)
                                      default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id"]
                              <-Reducer 14 [SIMPLE_EDGE]
                                SHUFFLE [RS_136]
                                  PartitionCols:_col4
                                  Merge Join Operator [MERGEJOIN_419] (rows=143966864 width=115)
                                    Conds:RS_133._col0=RS_464._col0(Inner),Output:["_col4","_col5"]
                                  <-Reducer 2 [SIMPLE_EDGE]
                                    PARTITION_ONLY_SHUFFLE [RS_133]
                                      PartitionCols:_col0
                                      Merge Join Operator [MERGEJOIN_408] (rows=2 width=4)
                                        Conds:RS_425._col1=RS_441._col0(Inner),Output:["_col0"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_425]
                                          PartitionCols:_col1
                                          Select Operator [SEL_424] (rows=73049 width=98)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_423] (rows=73049 width=98)
                                              predicate:d_date is not null
                                              TableScan [TS_0] (rows=73049 width=98)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                      <-Reducer 22 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_441]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_440] (rows=2 width=94)
                                            Output:["_col0"],keys:KEY._col0
                                          <-Reducer 21 [SIMPLE_EDGE]
                                            SHUFFLE [RS_26]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_25] (rows=2 width=94)
                                                Output:["_col0"],keys:_col2
                                                Merge Join Operator [MERGEJOIN_407] (rows=5 width=94)
                                                  Conds:RS_21._col1=RS_438._col1(Inner),Output:["_col2"]
                                                <-Map 23 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_438]
                                                    PartitionCols:_col1
                                                    Select Operator [SEL_436] (rows=73049 width=98)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_434] (rows=73049 width=98)
                                                        predicate:(d_week_seq is not null and d_date is not null)
                                                        TableScan [TS_15] (rows=73049 width=98)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date","d_week_seq"]
                                                <-Reducer 20 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_21]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_406] (rows=1 width=4)
                                                      Conds:(Inner),Output:["_col1"]
                                                    <-Map 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_439]
                                                        Select Operator [SEL_437] (rows=1 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_435] (rows=1 width=98)
                                                            predicate:((d_date = '1998-02-19') and d_week_seq is not null)
                                                             Please refer to the previous TableScan [TS_15]
                                                    <-Reducer 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_433]
                                                        Select Operator [SEL_432] (rows=1 width=8)
                                                          Filter Operator [FIL_431] (rows=1 width=8)
                                                            predicate:(sq_count_check(_col0) <= 1)
                                                            Group By Operator [GBY_430] (rows=1 width=8)
                                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                            <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_429]
                                                                Group By Operator [GBY_428] (rows=1 width=8)
                                                                  Output:["_col0"],aggregations:["count()"]
                                                                  Select Operator [SEL_427] (rows=1 width=94)
                                                                    Filter Operator [FIL_426] (rows=1 width=94)
                                                                      predicate:(d_date = '1998-02-19')
                                                                      TableScan [TS_3] (rows=73049 width=94)
                                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date"]
                                  <-Map 27 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_464]
                                      PartitionCols:_col0
                                      Select Operator [SEL_463] (rows=143966864 width=119)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_462] (rows=143966864 width=119)
                                          predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_133_date_dim_d_date_sk_min) AND DynamicValue(RS_133_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_133_date_dim_d_date_sk_bloom_filter)))
                                          TableScan [TS_125] (rows=144002668 width=119)
                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_ext_sales_price"]
                                          <-Reducer 17 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_461]
                                              Group By Operator [GBY_460] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                                PARTITION_ONLY_SHUFFLE [RS_386]
                                                  Group By Operator [GBY_385] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_384] (rows=2 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Merge Join Operator [MERGEJOIN_408]
                  <-Reducer 6 [SIMPLE_EDGE]
                    SHUFFLE [RS_149]
                      PartitionCols:_col0
                      Filter Operator [FIL_147] (rows=3836 width=324)
                        predicate:(_col1 BETWEEN (0.9 * _col3) AND (1.1 * _col3) and _col3 BETWEEN (0.9 * _col1) AND (1.1 * _col1))
                        Merge Join Operator [MERGEJOIN_421] (rows=310774 width=324)
                          Conds:RS_452._col0=RS_459._col0(Inner),Output:["_col0","_col1","_col3"]
                        <-Reducer 12 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_459]
                            PartitionCols:_col0
                            Group By Operator [GBY_458] (rows=310774 width=212)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 11 [SIMPLE_EDGE]
                              SHUFFLE [RS_93]
                                PartitionCols:_col0
                                Group By Operator [GBY_92] (rows=138294430 width=212)
                                  Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col7
                                  Merge Join Operator [MERGEJOIN_415] (rows=550076554 width=206)
                                    Conds:RS_88._col4=RS_449._col0(Inner),Output:["_col5","_col7"]
                                  <-Map 25 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_449]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_447]
                                  <-Reducer 10 [SIMPLE_EDGE]
                                    SHUFFLE [RS_88]
                                      PartitionCols:_col4
                                      Merge Join Operator [MERGEJOIN_414] (rows=550076554 width=110)
                                        Conds:RS_85._col0=RS_457._col0(Inner),Output:["_col4","_col5"]
                                      <-Reducer 2 [SIMPLE_EDGE]
                                        PARTITION_ONLY_SHUFFLE [RS_85]
                                          PartitionCols:_col0
                                           Please refer to the previous Merge Join Operator [MERGEJOIN_408]
                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_457]
                                          PartitionCols:_col0
                                          Select Operator [SEL_456] (rows=550076554 width=114)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_455] (rows=550076554 width=114)
                                              predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_85_date_dim_d_date_sk_min) AND DynamicValue(RS_85_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_85_date_dim_d_date_sk_bloom_filter)))
                                              TableScan [TS_77] (rows=575995635 width=114)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_ext_sales_price"]
                                              <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_454]
                                                  Group By Operator [GBY_453] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                                    PARTITION_ONLY_SHUFFLE [RS_340]
                                                      Group By Operator [GBY_339] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_338] (rows=2 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Merge Join Operator [MERGEJOIN_408]
                        <-Reducer 5 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_452]
                            PartitionCols:_col0
                            Group By Operator [GBY_451] (rows=310774 width=212)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 4 [SIMPLE_EDGE]
                              SHUFFLE [RS_45]
                                PartitionCols:_col0
                                Group By Operator [GBY_44] (rows=73653438 width=212)
                                  Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col7
                                  Merge Join Operator [MERGEJOIN_410] (rows=286549727 width=211)
                                    Conds:RS_40._col4=RS_448._col0(Inner),Output:["_col5","_col7"]
                                  <-Map 25 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_448]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_447]
                                  <-Reducer 3 [SIMPLE_EDGE]
                                    SHUFFLE [RS_40]
                                      PartitionCols:_col4
                                      Merge Join Operator [MERGEJOIN_409] (rows=286549727 width=115)
                                        Conds:RS_37._col0=RS_446._col0(Inner),Output:["_col4","_col5"]
                                      <-Reducer 2 [SIMPLE_EDGE]
                                        PARTITION_ONLY_SHUFFLE [RS_37]
                                          PartitionCols:_col0
                                           Please refer to the previous Merge Join Operator [MERGEJOIN_408]
                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_446]
                                          PartitionCols:_col0
                                          Select Operator [SEL_445] (rows=286549727 width=119)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_444] (rows=286549727 width=119)
                                              predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_37_date_dim_d_date_sk_min) AND DynamicValue(RS_37_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_37_date_dim_d_date_sk_bloom_filter)))
                                              TableScan [TS_29] (rows=287989836 width=119)
                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_ext_sales_price"]
                                              <-Reducer 9 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_443]
                                                  Group By Operator [GBY_442] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                                    PARTITION_ONLY_SHUFFLE [RS_290]
                                                      Group By Operator [GBY_289] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_288] (rows=2 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Merge Join Operator [MERGEJOIN_408]

