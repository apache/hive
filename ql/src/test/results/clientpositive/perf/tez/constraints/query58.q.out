Warning: Shuffle Join MERGEJOIN[413][tables = [$hdt$_3, $hdt$_4]] in Stage 'Reducer 22' is a cross product
PREHOOK: query: explain
with ss_items as
 (select i_item_id item_id
        ,sum(ss_ext_sales_price) ss_item_rev 
 from store_sales
     ,item
     ,date_dim
 where ss_item_sk = i_item_sk
   and d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
   and ss_sold_date_sk   = d_date_sk
 group by i_item_id),
 cs_items as
 (select i_item_id item_id
        ,sum(cs_ext_sales_price) cs_item_rev
  from catalog_sales
      ,item
      ,date_dim
 where cs_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
  and  cs_sold_date_sk = d_date_sk
 group by i_item_id),
 ws_items as
 (select i_item_id item_id
        ,sum(ws_ext_sales_price) ws_item_rev
  from web_sales
      ,item
      ,date_dim
 where ws_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq =(select d_week_seq 
                                     from date_dim
                                     where d_date = '1998-02-19'))
  and ws_sold_date_sk   = d_date_sk
 group by i_item_id)
  select  ss_items.item_id
       ,ss_item_rev
       ,ss_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ss_dev
       ,cs_item_rev
       ,cs_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 cs_dev
       ,ws_item_rev
       ,ws_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ws_dev
       ,(ss_item_rev+cs_item_rev+ws_item_rev)/3 average
 from ss_items,cs_items,ws_items
 where ss_items.item_id=cs_items.item_id
   and ss_items.item_id=ws_items.item_id 
   and ss_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
   and ss_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and cs_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and cs_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and ws_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and ws_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
 order by item_id
         ,ss_item_rev
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss_items as
 (select i_item_id item_id
        ,sum(ss_ext_sales_price) ss_item_rev 
 from store_sales
     ,item
     ,date_dim
 where ss_item_sk = i_item_sk
   and d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
   and ss_sold_date_sk   = d_date_sk
 group by i_item_id),
 cs_items as
 (select i_item_id item_id
        ,sum(cs_ext_sales_price) cs_item_rev
  from catalog_sales
      ,item
      ,date_dim
 where cs_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
  and  cs_sold_date_sk = d_date_sk
 group by i_item_id),
 ws_items as
 (select i_item_id item_id
        ,sum(ws_ext_sales_price) ws_item_rev
  from web_sales
      ,item
      ,date_dim
 where ws_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq =(select d_week_seq 
                                     from date_dim
                                     where d_date = '1998-02-19'))
  and ws_sold_date_sk   = d_date_sk
 group by i_item_id)
  select  ss_items.item_id
       ,ss_item_rev
       ,ss_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ss_dev
       ,cs_item_rev
       ,cs_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 cs_dev
       ,ws_item_rev
       ,ws_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ws_dev
       ,(ss_item_rev+cs_item_rev+ws_item_rev)/3 average
 from ss_items,cs_items,ws_items
 where ss_items.item_id=cs_items.item_id
   and ss_items.item_id=ws_items.item_id 
   and ss_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
   and ss_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and cs_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and cs_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and ws_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and ws_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
 order by item_id
         ,ss_item_rev
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 10 (BROADCAST_EDGE)
Map 26 <- Reducer 14 (BROADCAST_EDGE)
Map 27 <- Reducer 18 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Map 26 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 12 <- Map 25 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 9 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 27 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 16 <- Map 25 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 9 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 19 (CUSTOM_SIMPLE_EDGE), Reducer 24 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 23 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 25 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 13 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 17 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_477]
        Limit [LIM_476] (rows=1 width=884)
          Number of rows:100
          Select Operator [SEL_475] (rows=1 width=884)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_163]
              Select Operator [SEL_162] (rows=1 width=884)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                Top N Key Operator [TNK_269] (rows=1 width=660)
                  keys:_col0, _col3,top n:100
                  Filter Operator [FIL_158] (rows=1 width=660)
                    predicate:(_col5 BETWEEN (0.9 * _col1) AND (1.1 * _col1) and _col5 BETWEEN (0.9 * _col3) AND (1.1 * _col3) and _col1 BETWEEN _col6 AND _col7 and _col3 BETWEEN _col6 AND _col7)
                    Merge Join Operator [MERGEJOIN_429] (rows=384 width=660)
                      Conds:RS_155._col0=RS_474._col0(Inner),Output:["_col0","_col1","_col3","_col5","_col6","_col7"]
                    <-Reducer 17 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_474]
                        PartitionCols:_col0
                        Select Operator [SEL_473] (rows=15768 width=436)
                          Output:["_col0","_col1","_col2","_col3"]
                          Group By Operator [GBY_472] (rows=15768 width=212)
                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 16 [SIMPLE_EDGE]
                            SHUFFLE [RS_147]
                              PartitionCols:_col0
                              Group By Operator [GBY_146] (rows=15768 width=212)
                                Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col7
                                Merge Join Operator [MERGEJOIN_427] (rows=31537 width=100)
                                  Conds:RS_142._col1=RS_457._col0(Inner),Output:["_col2","_col7"]
                                <-Map 25 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_457]
                                    PartitionCols:_col0
                                    Select Operator [SEL_454] (rows=462000 width=104)
                                      Output:["_col0","_col1"]
                                      TableScan [TS_37] (rows=462000 width=104)
                                        default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id"]
                                <-Reducer 15 [SIMPLE_EDGE]
                                  SHUFFLE [RS_142]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_426] (rows=31537 width=4)
                                      Conds:RS_471._col0=RS_140._col0(Inner),Output:["_col1","_col2"]
                                    <-Reducer 9 [SIMPLE_EDGE]
                                      SHUFFLE [RS_140]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_415] (rows=2 width=4)
                                          Conds:RS_432._col1=RS_448._col0(Inner),Output:["_col0"]
                                        <-Map 8 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_432]
                                            PartitionCols:_col1
                                            Select Operator [SEL_431] (rows=73049 width=98)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_430] (rows=73049 width=98)
                                                predicate:d_date is not null
                                                TableScan [TS_3] (rows=73049 width=98)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                        <-Reducer 21 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_448]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_447] (rows=2 width=94)
                                              Output:["_col0"],keys:KEY._col0
                                            <-Reducer 20 [SIMPLE_EDGE]
                                              SHUFFLE [RS_30]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_29] (rows=2 width=94)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_414] (rows=5 width=94)
                                                    Conds:RS_437._col1=RS_26._col1(Inner),Output:["_col0"]
                                                  <-Map 19 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_437]
                                                      PartitionCols:_col1
                                                      Select Operator [SEL_435] (rows=73049 width=98)
                                                        Output:["_col0","_col1"]
                                                        Filter Operator [FIL_433] (rows=73049 width=98)
                                                          predicate:(d_week_seq is not null and d_date is not null)
                                                          TableScan [TS_6] (rows=73049 width=98)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date","d_week_seq"]
                                                  <-Reducer 22 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_26]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_413] (rows=1 width=4)
                                                        Conds:(Inner),Output:["_col1"]
                                                      <-Map 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_438]
                                                          Select Operator [SEL_436] (rows=1 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_434] (rows=1 width=98)
                                                              predicate:((d_date = '1998-02-19') and d_week_seq is not null)
                                                               Please refer to the previous TableScan [TS_6]
                                                      <-Reducer 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_446]
                                                          Select Operator [SEL_445] (rows=1 width=8)
                                                            Filter Operator [FIL_444] (rows=1 width=8)
                                                              predicate:(sq_count_check(_col0) <= 1)
                                                              Group By Operator [GBY_443] (rows=1 width=8)
                                                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                              <-Map 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_442]
                                                                  Group By Operator [GBY_441] (rows=1 width=8)
                                                                    Output:["_col0"],aggregations:["count()"]
                                                                    Select Operator [SEL_440] (rows=1 width=94)
                                                                      Filter Operator [FIL_439] (rows=1 width=94)
                                                                        predicate:(d_date = '1998-02-19')
                                                                        TableScan [TS_9] (rows=73049 width=94)
                                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date"]
                                    <-Map 27 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_471]
                                        PartitionCols:_col0
                                        Select Operator [SEL_470] (rows=143966864 width=119)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_469] (rows=143966864 width=119)
                                            predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_140_date_dim_d_date_sk_min) AND DynamicValue(RS_140_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_140_date_dim_d_date_sk_bloom_filter)))
                                            TableScan [TS_100] (rows=144002668 width=119)
                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_ext_sales_price"]
                                            <-Reducer 18 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_468]
                                                Group By Operator [GBY_467] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Reducer 9 [CUSTOM_SIMPLE_EDGE]
                                                  SHUFFLE [RS_368]
                                                    Group By Operator [GBY_367] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_366] (rows=2 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Merge Join Operator [MERGEJOIN_415]
                    <-Reducer 5 [SIMPLE_EDGE]
                      SHUFFLE [RS_155]
                        PartitionCols:_col0
                        Filter Operator [FIL_153] (rows=384 width=324)
                          predicate:(_col1 BETWEEN (0.9 * _col3) AND (1.1 * _col3) and _col3 BETWEEN (0.9 * _col1) AND (1.1 * _col1))
                          Merge Join Operator [MERGEJOIN_428] (rows=31163 width=324)
                            Conds:RS_459._col0=RS_466._col0(Inner),Output:["_col0","_col1","_col3"]
                          <-Reducer 13 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_466]
                              PartitionCols:_col0
                              Group By Operator [GBY_465] (rows=60249 width=212)
                                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                              <-Reducer 12 [SIMPLE_EDGE]
                                SHUFFLE [RS_97]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_96] (rows=60249 width=212)
                                    Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col7
                                    Merge Join Operator [MERGEJOIN_422] (rows=120498 width=100)
                                      Conds:RS_92._col1=RS_456._col0(Inner),Output:["_col2","_col7"]
                                    <-Map 25 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_456]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_454]
                                    <-Reducer 11 [SIMPLE_EDGE]
                                      SHUFFLE [RS_92]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_421] (rows=120498 width=4)
                                          Conds:RS_464._col0=RS_90._col0(Inner),Output:["_col1","_col2"]
                                        <-Reducer 9 [SIMPLE_EDGE]
                                          SHUFFLE [RS_90]
                                            PartitionCols:_col0
                                             Please refer to the previous Merge Join Operator [MERGEJOIN_415]
                                        <-Map 26 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_464]
                                            PartitionCols:_col0
                                            Select Operator [SEL_463] (rows=550076554 width=114)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_462] (rows=550076554 width=114)
                                                predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_90_date_dim_d_date_sk_min) AND DynamicValue(RS_90_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_90_date_dim_d_date_sk_bloom_filter)))
                                                TableScan [TS_50] (rows=575995635 width=114)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_ext_sales_price"]
                                                <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_461]
                                                    Group By Operator [GBY_460] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Reducer 9 [CUSTOM_SIMPLE_EDGE]
                                                      SHUFFLE [RS_322]
                                                        Group By Operator [GBY_321] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_320] (rows=2 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Merge Join Operator [MERGEJOIN_415]
                          <-Reducer 4 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_459]
                              PartitionCols:_col0
                              Group By Operator [GBY_458] (rows=31163 width=212)
                                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                              <-Reducer 3 [SIMPLE_EDGE]
                                SHUFFLE [RS_47]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_46] (rows=31163 width=212)
                                    Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col7
                                    Merge Join Operator [MERGEJOIN_417] (rows=62327 width=100)
                                      Conds:RS_42._col1=RS_455._col0(Inner),Output:["_col2","_col7"]
                                    <-Map 25 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_455]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_454]
                                    <-Reducer 2 [SIMPLE_EDGE]
                                      SHUFFLE [RS_42]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_416] (rows=62327 width=4)
                                          Conds:RS_453._col0=RS_40._col0(Inner),Output:["_col1","_col2"]
                                        <-Reducer 9 [SIMPLE_EDGE]
                                          SHUFFLE [RS_40]
                                            PartitionCols:_col0
                                             Please refer to the previous Merge Join Operator [MERGEJOIN_415]
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_453]
                                            PartitionCols:_col0
                                            Select Operator [SEL_452] (rows=286549727 width=119)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_451] (rows=286549727 width=119)
                                                predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_40_date_dim_d_date_sk_min) AND DynamicValue(RS_40_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_40_date_dim_d_date_sk_bloom_filter)))
                                                TableScan [TS_0] (rows=287989836 width=119)
                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_ext_sales_price"]
                                                <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_450]
                                                    Group By Operator [GBY_449] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Reducer 9 [CUSTOM_SIMPLE_EDGE]
                                                      SHUFFLE [RS_272]
                                                        Group By Operator [GBY_271] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_270] (rows=2 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Merge Join Operator [MERGEJOIN_415]

