Warning: Shuffle Join MERGEJOIN[442][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 19' is a cross product
Warning: Shuffle Join MERGEJOIN[443][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 20' is a cross product
Warning: Shuffle Join MERGEJOIN[445][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 23' is a cross product
Warning: Shuffle Join MERGEJOIN[446][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 24' is a cross product
PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Map 15 <- Reducer 27 (BROADCAST_EDGE)
Map 28 <- Reducer 7 (BROADCAST_EDGE)
Map 30 <- Reducer 36 (BROADCAST_EDGE)
Map 38 <- Reducer 14 (BROADCAST_EDGE)
Map 39 <- Reducer 13 (BROADCAST_EDGE)
Reducer 10 <- Map 38 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Reducer 34 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 13 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE), Map 26 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (CUSTOM_SIMPLE_EDGE), Reducer 21 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (CUSTOM_SIMPLE_EDGE), Reducer 29 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Reducer 17 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Reducer 17 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (CUSTOM_SIMPLE_EDGE), Reducer 25 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (CUSTOM_SIMPLE_EDGE), Reducer 40 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Reducer 17 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Map 26 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 28 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 31 <- Map 30 (SIMPLE_EDGE), Map 35 (SIMPLE_EDGE)
Reducer 32 <- Map 37 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 33 <- Reducer 32 (SIMPLE_EDGE)
Reducer 34 <- Reducer 32 (SIMPLE_EDGE)
Reducer 36 <- Map 35 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 40 <- Map 39 (SIMPLE_EDGE)
Reducer 6 <- Union 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_535]
        Group By Operator [GBY_534] (rows=1 width=112)
          Output:["_col0"],aggregations:["sum(VALUE._col0)"]
        <-Union 5 [CUSTOM_SIMPLE_EDGE]
          <-Reducer 12 [CONTAINS]
            Reduce Output Operator [RS_459]
              Group By Operator [GBY_458] (rows=1 width=112)
                Output:["_col0"],aggregations:["sum(_col0)"]
                Select Operator [SEL_456] (rows=155 width=112)
                  Output:["_col0"]
                  Merge Join Operator [MERGEJOIN_455] (rows=155 width=0)
                    Conds:RS_198._col1=RS_562._col0(Left Semi),Output:["_col3","_col4"]
                  <-Reducer 11 [SIMPLE_EDGE]
                    SHUFFLE [RS_198]
                      PartitionCols:_col1
                      Merge Join Operator [MERGEJOIN_447] (rows=3941101 width=118)
                        Conds:RS_193._col2=RS_194._col0(Inner),Output:["_col1","_col3","_col4"]
                      <-Reducer 10 [SIMPLE_EDGE]
                        PARTITION_ONLY_SHUFFLE [RS_193]
                          PartitionCols:_col2
                          Merge Join Operator [MERGEJOIN_437] (rows=3941102 width=122)
                            Conds:RS_540._col0=RS_464._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                          <-Map 8 [SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_464]
                              PartitionCols:_col0
                              Select Operator [SEL_461] (rows=50 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_460] (rows=50 width=12)
                                  predicate:((d_moy = 1) and (d_year = 1999))
                                  TableScan [TS_3] (rows=73049 width=12)
                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                          <-Map 38 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_540]
                              PartitionCols:_col0
                              Select Operator [SEL_539] (rows=143930993 width=127)
                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                Filter Operator [FIL_538] (rows=143930993 width=127)
                                  predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_191_date_dim_d_date_sk_min) AND DynamicValue(RS_191_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_191_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                  TableScan [TS_101] (rows=144002668 width=127)
                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_quantity","ws_list_price"]
                                  <-Reducer 14 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_537]
                                      Group By Operator [GBY_536] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                      <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_469]
                                          Group By Operator [GBY_467] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                            Select Operator [SEL_465] (rows=50 width=4)
                                              Output:["_col0"]
                                               Please refer to the previous Select Operator [SEL_461]
                      <-Reducer 24 [SIMPLE_EDGE]
                        SHUFFLE [RS_194]
                          PartitionCols:_col0
                          Select Operator [SEL_168] (rows=471875 width=3)
                            Output:["_col0"]
                            Filter Operator [FIL_167] (rows=471875 width=227)
                              predicate:(_col3 > (0.95 * _col1))
                              Merge Join Operator [MERGEJOIN_446] (rows=1415626 width=227)
                                Conds:(Inner),Output:["_col1","_col2","_col3"]
                              <-Reducer 23 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_164]
                                  Merge Join Operator [MERGEJOIN_445] (rows=1 width=112)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Reducer 22 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_546]
                                      Select Operator [SEL_545] (rows=1 width=8)
                                        Filter Operator [FIL_544] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_543] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Select Operator [SEL_542] (rows=1 width=8)
                                              Group By Operator [GBY_541] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                              <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_497]
                                                  Group By Operator [GBY_493] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_489] (rows=50562 width=112)
                                                      Output:["_col0"]
                                                      Group By Operator [GBY_486] (rows=50562 width=112)
                                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                                      <-Reducer 16 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_17]
                                                          PartitionCols:_col0
                                                          Group By Operator [GBY_16] (rows=455058 width=112)
                                                            Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col1
                                                            Merge Join Operator [MERGEJOIN_433] (rows=18762463 width=112)
                                                              Conds:RS_485._col0=RS_477._col0(Inner),Output:["_col1","_col2"]
                                                            <-Map 26 [SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_477]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_476] (rows=2609 width=4)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_475] (rows=2609 width=8)
                                                                    predicate:(d_year) IN (1999, 2000, 2001, 2002)
                                                                    TableScan [TS_9] (rows=73049 width=8)
                                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                            <-Map 15 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_485]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_484] (rows=525327388 width=119)
                                                                  Output:["_col0","_col1","_col2"]
                                                                  Filter Operator [FIL_483] (rows=525327388 width=118)
                                                                    predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_13_date_dim_d_date_sk_min) AND DynamicValue(RS_13_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_13_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                                    TableScan [TS_6] (rows=575995635 width=118)
                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_quantity","ss_sales_price"]
                                                                    <-Reducer 27 [BROADCAST_EDGE] vectorized
                                                                      BROADCAST [RS_482]
                                                                        Group By Operator [GBY_481] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                        <-Map 26 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                          PARTITION_ONLY_SHUFFLE [RS_480]
                                                                            Group By Operator [GBY_479] (rows=1 width=12)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                              Select Operator [SEL_478] (rows=2609 width=4)
                                                                                Output:["_col0"]
                                                                                 Please refer to the previous Select Operator [SEL_476]
                                  <-Reducer 25 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_548]
                                      Group By Operator [GBY_547] (rows=1 width=112)
                                        Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                      <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_498]
                                          Group By Operator [GBY_494] (rows=1 width=112)
                                            Output:["_col0"],aggregations:["max(_col1)"]
                                            Select Operator [SEL_490] (rows=50562 width=112)
                                              Output:["_col1"]
                                               Please refer to the previous Group By Operator [GBY_486]
                              <-Reducer 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_556]
                                  Group By Operator [GBY_555] (rows=1415626 width=115)
                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                  <-Map 39 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_554]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_553] (rows=550080312 width=115)
                                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                        Select Operator [SEL_552] (rows=550080312 width=114)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_551] (rows=550080312 width=114)
                                            predicate:((ss_customer_sk BETWEEN DynamicValue(RS_193_web_sales_ws_bill_customer_sk_min) AND DynamicValue(RS_193_web_sales_ws_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_193_web_sales_ws_bill_customer_sk_bloom_filter))) and ss_customer_sk is not null)
                                            TableScan [TS_153] (rows=575995635 width=114)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                                            <-Reducer 13 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_550]
                                                Group By Operator [GBY_549] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Reducer 10 [CUSTOM_SIMPLE_EDGE]
                                                  PARTITION_ONLY_SHUFFLE [RS_411]
                                                    Group By Operator [GBY_410] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_409] (rows=3941102 width=7)
                                                        Output:["_col0"]
                                                         Please refer to the previous Merge Join Operator [MERGEJOIN_437]
                  <-Reducer 34 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_562]
                      PartitionCols:_col0
                      Group By Operator [GBY_561] (rows=2235 width=4)
                        Output:["_col0"],keys:_col0
                        Select Operator [SEL_560] (rows=1943705 width=4)
                          Output:["_col0"]
                          Filter Operator [FIL_559] (rows=1943705 width=106)
                            predicate:(_col2 > 4L)
                            Select Operator [SEL_558] (rows=5831115 width=106)
                              Output:["_col0","_col2"]
                              Group By Operator [GBY_557] (rows=5831115 width=106)
                                Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                              <-Reducer 32 [SIMPLE_EDGE]
                                SHUFFLE [RS_185]
                                  PartitionCols:_col0, _col1
                                  Group By Operator [GBY_83] (rows=19646398 width=106)
                                    Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col4, _col3
                                    Merge Join Operator [MERGEJOIN_436] (rows=19646398 width=98)
                                      Conds:RS_79._col1=RS_527._col0(Inner),Output:["_col3","_col4"]
                                    <-Map 37 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_527]
                                        PartitionCols:_col0
                                        Select Operator [SEL_526] (rows=462000 width=188)
                                          Output:["_col0"]
                                          TableScan [TS_74] (rows=462000 width=4)
                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk"]
                                    <-Reducer 31 [SIMPLE_EDGE]
                                      SHUFFLE [RS_79]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_435] (rows=19646398 width=98)
                                          Conds:RS_525._col0=RS_517._col0(Inner),Output:["_col1","_col3"]
                                        <-Map 35 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_517]
                                            PartitionCols:_col0
                                            Select Operator [SEL_516] (rows=2609 width=98)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_515] (rows=2609 width=102)
                                                predicate:(d_year) IN (1999, 2000, 2001, 2002)
                                                TableScan [TS_71] (rows=73049 width=102)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_year"]
                                        <-Map 30 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_525]
                                            PartitionCols:_col0
                                            Select Operator [SEL_524] (rows=550076554 width=7)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_523] (rows=550076554 width=7)
                                                predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_77_date_dim_d_date_sk_min) AND DynamicValue(RS_77_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_77_date_dim_d_date_sk_bloom_filter))) and ss_sold_date_sk is not null)
                                                TableScan [TS_68] (rows=575995635 width=7)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                <-Reducer 36 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_522]
                                                    Group By Operator [GBY_521] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 35 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_520]
                                                        Group By Operator [GBY_519] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_518] (rows=2609 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_516]
          <-Reducer 4 [CONTAINS]
            Reduce Output Operator [RS_454]
              Group By Operator [GBY_453] (rows=1 width=112)
                Output:["_col0"],aggregations:["sum(_col0)"]
                Select Operator [SEL_451] (rows=304 width=112)
                  Output:["_col0"]
                  Merge Join Operator [MERGEJOIN_450] (rows=304 width=0)
                    Conds:RS_97._col2=RS_533._col0(Left Semi),Output:["_col3","_col4"]
                  <-Reducer 3 [SIMPLE_EDGE]
                    SHUFFLE [RS_97]
                      PartitionCols:_col2
                      Merge Join Operator [MERGEJOIN_444] (rows=7751875 width=98)
                        Conds:RS_92._col1=RS_93._col0(Inner),Output:["_col2","_col3","_col4"]
                      <-Reducer 2 [SIMPLE_EDGE]
                        PARTITION_ONLY_SHUFFLE [RS_92]
                          PartitionCols:_col1
                          Merge Join Operator [MERGEJOIN_432] (rows=7751875 width=101)
                            Conds:RS_474._col0=RS_462._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                          <-Map 8 [SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_462]
                              PartitionCols:_col0
                               Please refer to the previous Select Operator [SEL_461]
                          <-Map 1 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_474]
                              PartitionCols:_col0
                              Select Operator [SEL_473] (rows=285117831 width=127)
                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                Filter Operator [FIL_472] (rows=285117831 width=127)
                                  predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_90_date_dim_d_date_sk_min) AND DynamicValue(RS_90_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_90_date_dim_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                  TableScan [TS_0] (rows=287989836 width=127)
                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                  <-Reducer 9 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_471]
                                      Group By Operator [GBY_470] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                      <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_468]
                                          Group By Operator [GBY_466] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                            Select Operator [SEL_463] (rows=50 width=4)
                                              Output:["_col0"]
                                               Please refer to the previous Select Operator [SEL_461]
                      <-Reducer 20 [SIMPLE_EDGE]
                        SHUFFLE [RS_93]
                          PartitionCols:_col0
                          Select Operator [SEL_67] (rows=471875 width=3)
                            Output:["_col0"]
                            Filter Operator [FIL_66] (rows=471875 width=227)
                              predicate:(_col3 > (0.95 * _col1))
                              Merge Join Operator [MERGEJOIN_443] (rows=1415626 width=227)
                                Conds:(Inner),Output:["_col1","_col2","_col3"]
                              <-Reducer 19 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_63]
                                  Merge Join Operator [MERGEJOIN_442] (rows=1 width=112)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Reducer 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_504]
                                      Select Operator [SEL_503] (rows=1 width=8)
                                        Filter Operator [FIL_502] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_501] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Select Operator [SEL_500] (rows=1 width=8)
                                              Group By Operator [GBY_499] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                              <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_495]
                                                  Group By Operator [GBY_491] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_487] (rows=50562 width=112)
                                                      Output:["_col0"]
                                                       Please refer to the previous Group By Operator [GBY_486]
                                  <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_506]
                                      Group By Operator [GBY_505] (rows=1 width=112)
                                        Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                      <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_496]
                                          Group By Operator [GBY_492] (rows=1 width=112)
                                            Output:["_col0"],aggregations:["max(_col1)"]
                                            Select Operator [SEL_488] (rows=50562 width=112)
                                              Output:["_col1"]
                                               Please refer to the previous Group By Operator [GBY_486]
                              <-Reducer 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_514]
                                  Group By Operator [GBY_513] (rows=1415626 width=115)
                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                  <-Map 28 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_512]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_511] (rows=550080312 width=115)
                                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                        Select Operator [SEL_510] (rows=550080312 width=114)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_509] (rows=550080312 width=114)
                                            predicate:((ss_customer_sk BETWEEN DynamicValue(RS_92_catalog_sales_cs_bill_customer_sk_min) AND DynamicValue(RS_92_catalog_sales_cs_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_92_catalog_sales_cs_bill_customer_sk_bloom_filter))) and ss_customer_sk is not null)
                                            TableScan [TS_52] (rows=575995635 width=114)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                                            <-Reducer 7 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_508]
                                                Group By Operator [GBY_507] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                                  PARTITION_ONLY_SHUFFLE [RS_338]
                                                    Group By Operator [GBY_337] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_336] (rows=7751875 width=6)
                                                        Output:["_col0"]
                                                         Please refer to the previous Merge Join Operator [MERGEJOIN_432]
                  <-Reducer 33 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_533]
                      PartitionCols:_col0
                      Group By Operator [GBY_532] (rows=2235 width=4)
                        Output:["_col0"],keys:_col0
                        Select Operator [SEL_531] (rows=1943705 width=4)
                          Output:["_col0"]
                          Filter Operator [FIL_530] (rows=1943705 width=106)
                            predicate:(_col2 > 4L)
                            Select Operator [SEL_529] (rows=5831115 width=106)
                              Output:["_col0","_col2"]
                              Group By Operator [GBY_528] (rows=5831115 width=106)
                                Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                              <-Reducer 32 [SIMPLE_EDGE]
                                SHUFFLE [RS_84]
                                  PartitionCols:_col0, _col1
                                   Please refer to the previous Group By Operator [GBY_83]

