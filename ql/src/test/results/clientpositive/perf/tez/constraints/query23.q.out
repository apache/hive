Warning: Shuffle Join MERGEJOIN[360][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 3' is a cross product
Warning: Shuffle Join MERGEJOIN[362][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 13' is a cross product
PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 21 (BROADCAST_EDGE)
Map 19 <- Reducer 23 (BROADCAST_EDGE)
Map 27 <- Reducer 33 (BROADCAST_EDGE)
Map 35 <- Reducer 25 (BROADCAST_EDGE)
Map 37 <- Reducer 26 (BROADCAST_EDGE)
Map 9 <- Reducer 18 (BROADCAST_EDGE)
Reducer 10 <- Map 17 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE), Reducer 36 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 18 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (SIMPLE_EDGE), Map 22 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Map 22 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 22 (SIMPLE_EDGE), Map 37 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Map 22 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 27 (SIMPLE_EDGE), Map 32 (SIMPLE_EDGE)
Reducer 29 <- Map 34 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 3 <- Reducer 12 (CUSTOM_SIMPLE_EDGE), Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Reducer 29 (SIMPLE_EDGE)
Reducer 33 <- Map 32 (CUSTOM_SIMPLE_EDGE)
Reducer 36 <- Map 35 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 20 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 30 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 8 <- Union 7 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_442]
        Group By Operator [GBY_441] (rows=1 width=112)
          Output:["_col0"],aggregations:["sum(VALUE._col0)"]
        <-Union 7 [CUSTOM_SIMPLE_EDGE]
          <-Reducer 16 [CONTAINS]
            Reduce Output Operator [RS_375]
              Group By Operator [GBY_374] (rows=1 width=112)
                Output:["_col0"],aggregations:["sum(_col0)"]
                Select Operator [SEL_372] (rows=3941102 width=112)
                  Output:["_col0"]
                  Merge Join Operator [MERGEJOIN_371] (rows=3941102 width=114)
                    Conds:RS_154._col2=RS_464._col0(Left Semi),Output:["_col4","_col5"]
                  <-Reducer 15 [SIMPLE_EDGE]
                    SHUFFLE [RS_154]
                      PartitionCols:_col2
                      Merge Join Operator [MERGEJOIN_363] (rows=3941102 width=118)
                        Conds:RS_458._col0=RS_150._col2(Inner),Output:["_col2","_col4","_col5"]
                      <-Reducer 24 [SIMPLE_EDGE]
                        PARTITION_ONLY_SHUFFLE [RS_150]
                          PartitionCols:_col2
                          Merge Join Operator [MERGEJOIN_357] (rows=3941102 width=122)
                            Conds:RS_447._col0=RS_380._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                          <-Map 22 [SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_380]
                              PartitionCols:_col0
                              Select Operator [SEL_377] (rows=50 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_376] (rows=50 width=12)
                                  predicate:((d_year = 1999) and (d_moy = 1))
                                  TableScan [TS_42] (rows=73049 width=12)
                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                          <-Map 37 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_447]
                              PartitionCols:_col0
                              Select Operator [SEL_446] (rows=143930993 width=127)
                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                Filter Operator [FIL_445] (rows=143930993 width=127)
                                  predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_125_date_dim_d_date_sk_min) AND DynamicValue(RS_125_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_125_date_dim_d_date_sk_bloom_filter)))
                                  TableScan [TS_118] (rows=144002668 width=127)
                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_quantity","ws_list_price"]
                                  <-Reducer 26 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_444]
                                      Group By Operator [GBY_443] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                      <-Map 22 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_385]
                                          Group By Operator [GBY_383] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                            Select Operator [SEL_381] (rows=50 width=4)
                                              Output:["_col0"]
                                               Please refer to the previous Select Operator [SEL_377]
                      <-Reducer 14 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_458]
                          PartitionCols:_col0
                          Group By Operator [GBY_457] (rows=235937 width=3)
                            Output:["_col0"],keys:KEY._col0
                          <-Reducer 13 [SIMPLE_EDGE]
                            SHUFFLE [RS_115]
                              PartitionCols:_col0
                              Group By Operator [GBY_114] (rows=235937 width=3)
                                Output:["_col0"],keys:_col0
                                Select Operator [SEL_113] (rows=471875 width=227)
                                  Output:["_col0"]
                                  Filter Operator [FIL_112] (rows=471875 width=227)
                                    predicate:(_col1 > _col2)
                                    Merge Join Operator [MERGEJOIN_362] (rows=1415626 width=227)
                                      Conds:(Inner),Output:["_col0","_col1","_col2"]
                                    <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_419]
                                        Select Operator [SEL_417] (rows=1 width=112)
                                          Output:["_col0"]
                                          Filter Operator [FIL_416] (rows=1 width=112)
                                            predicate:_col0 is not null
                                            Group By Operator [GBY_415] (rows=1 width=112)
                                              Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                            <-Reducer 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_414]
                                                Group By Operator [GBY_413] (rows=1 width=112)
                                                  Output:["_col0"],aggregations:["max(_col1)"]
                                                  Select Operator [SEL_412] (rows=50562 width=112)
                                                    Output:["_col1"]
                                                    Group By Operator [GBY_411] (rows=50562 width=112)
                                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                                    <-Reducer 10 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_20]
                                                        PartitionCols:_col0
                                                        Group By Operator [GBY_19] (rows=455058 width=112)
                                                          Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col1
                                                          Merge Join Operator [MERGEJOIN_352] (rows=18762463 width=112)
                                                            Conds:RS_410._col0=RS_402._col0(Inner),Output:["_col1","_col2"]
                                                          <-Map 17 [SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_402]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_401] (rows=2609 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_400] (rows=2609 width=8)
                                                                  predicate:(d_year) IN (1999, 2000, 2001, 2002)
                                                                  TableScan [TS_12] (rows=73049 width=8)
                                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                          <-Map 9 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_410]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_409] (rows=525327388 width=119)
                                                                Output:["_col0","_col1","_col2"]
                                                                Filter Operator [FIL_408] (rows=525327388 width=118)
                                                                  predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_16_date_dim_d_date_sk_min) AND DynamicValue(RS_16_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_16_date_dim_d_date_sk_bloom_filter)))
                                                                  TableScan [TS_9] (rows=575995635 width=118)
                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_quantity","ss_sales_price"]
                                                                  <-Reducer 18 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_407]
                                                                      Group By Operator [GBY_406] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_405]
                                                                          Group By Operator [GBY_404] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_403] (rows=2609 width=4)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Select Operator [SEL_401]
                                    <-Reducer 36 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_456]
                                        Filter Operator [FIL_455] (rows=1415626 width=115)
                                          predicate:_col1 is not null
                                          Group By Operator [GBY_454] (rows=1415626 width=115)
                                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                          <-Map 35 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_453]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_452] (rows=550080312 width=115)
                                                Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                                Select Operator [SEL_451] (rows=550080312 width=114)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_450] (rows=550080312 width=114)
                                                    predicate:(ss_customer_sk is not null and ss_customer_sk BETWEEN DynamicValue(RS_150_web_sales_ws_bill_customer_sk_min) AND DynamicValue(RS_150_web_sales_ws_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_150_web_sales_ws_bill_customer_sk_bloom_filter)))
                                                    TableScan [TS_79] (rows=575995635 width=114)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                                                    <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_449]
                                                        Group By Operator [GBY_448] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 24 [CUSTOM_SIMPLE_EDGE]
                                                          PARTITION_ONLY_SHUFFLE [RS_291]
                                                            Group By Operator [GBY_290] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_289] (rows=3941102 width=7)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Merge Join Operator [MERGEJOIN_357]
                  <-Reducer 31 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_464]
                      PartitionCols:_col0
                      Group By Operator [GBY_463] (rows=2235 width=4)
                        Output:["_col0"],keys:_col0
                        Select Operator [SEL_462] (rows=1943705 width=4)
                          Output:["_col0"]
                          Filter Operator [FIL_461] (rows=1943705 width=106)
                            predicate:(_col2 > 4L)
                            Select Operator [SEL_460] (rows=5831115 width=106)
                              Output:["_col0","_col2"]
                              Group By Operator [GBY_459] (rows=5831115 width=106)
                                Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                              <-Reducer 29 [SIMPLE_EDGE]
                                SHUFFLE [RS_144]
                                  PartitionCols:_col0, _col1
                                  Group By Operator [GBY_64] (rows=19646398 width=106)
                                    Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col4, _col3
                                    Merge Join Operator [MERGEJOIN_355] (rows=19646398 width=98)
                                      Conds:RS_60._col1=RS_434._col0(Inner),Output:["_col3","_col4"]
                                    <-Map 34 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_434]
                                        PartitionCols:_col0
                                        Select Operator [SEL_433] (rows=462000 width=188)
                                          Output:["_col0"]
                                          TableScan [TS_55] (rows=462000 width=4)
                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk"]
                                    <-Reducer 28 [SIMPLE_EDGE]
                                      SHUFFLE [RS_60]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_354] (rows=19646398 width=98)
                                          Conds:RS_432._col0=RS_424._col0(Inner),Output:["_col1","_col3"]
                                        <-Map 32 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_424]
                                            PartitionCols:_col0
                                            Select Operator [SEL_423] (rows=2609 width=98)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_422] (rows=2609 width=102)
                                                predicate:(d_year) IN (1999, 2000, 2001, 2002)
                                                TableScan [TS_52] (rows=73049 width=102)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_year"]
                                        <-Map 27 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_432]
                                            PartitionCols:_col0
                                            Select Operator [SEL_431] (rows=550076554 width=7)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_430] (rows=550076554 width=7)
                                                predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_58_date_dim_d_date_sk_min) AND DynamicValue(RS_58_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_58_date_dim_d_date_sk_bloom_filter)))
                                                TableScan [TS_49] (rows=575995635 width=7)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                <-Reducer 33 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_429]
                                                    Group By Operator [GBY_428] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_427]
                                                        Group By Operator [GBY_426] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_425] (rows=2609 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_423]
          <-Reducer 6 [CONTAINS]
            Reduce Output Operator [RS_370]
              Group By Operator [GBY_369] (rows=1 width=112)
                Output:["_col0"],aggregations:["sum(_col0)"]
                Select Operator [SEL_367] (rows=7751875 width=112)
                  Output:["_col0"]
                  Merge Join Operator [MERGEJOIN_366] (rows=7751875 width=94)
                    Conds:RS_75._col3=RS_440._col0(Left Semi),Output:["_col4","_col5"]
                  <-Reducer 30 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_440]
                      PartitionCols:_col0
                      Group By Operator [GBY_439] (rows=2235 width=4)
                        Output:["_col0"],keys:_col0
                        Select Operator [SEL_438] (rows=1943705 width=4)
                          Output:["_col0"]
                          Filter Operator [FIL_437] (rows=1943705 width=106)
                            predicate:(_col2 > 4L)
                            Select Operator [SEL_436] (rows=5831115 width=106)
                              Output:["_col0","_col2"]
                              Group By Operator [GBY_435] (rows=5831115 width=106)
                                Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                              <-Reducer 29 [SIMPLE_EDGE]
                                SHUFFLE [RS_65]
                                  PartitionCols:_col0, _col1
                                   Please refer to the previous Group By Operator [GBY_64]
                  <-Reducer 5 [SIMPLE_EDGE]
                    SHUFFLE [RS_75]
                      PartitionCols:_col3
                      Merge Join Operator [MERGEJOIN_361] (rows=7751875 width=98)
                        Conds:RS_421._col0=RS_71._col1(Inner),Output:["_col3","_col4","_col5"]
                      <-Reducer 20 [SIMPLE_EDGE]
                        SHUFFLE [RS_71]
                          PartitionCols:_col1
                          Merge Join Operator [MERGEJOIN_353] (rows=7751875 width=101)
                            Conds:RS_390._col0=RS_378._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                          <-Map 22 [SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_378]
                              PartitionCols:_col0
                               Please refer to the previous Select Operator [SEL_377]
                          <-Map 19 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_390]
                              PartitionCols:_col0
                              Select Operator [SEL_389] (rows=285117831 width=127)
                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                Filter Operator [FIL_388] (rows=285117831 width=127)
                                  predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_46_date_dim_d_date_sk_min) AND DynamicValue(RS_46_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_46_date_dim_d_date_sk_bloom_filter)))
                                  TableScan [TS_39] (rows=287989836 width=127)
                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                  <-Reducer 23 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_387]
                                      Group By Operator [GBY_386] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                      <-Map 22 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_384]
                                          Group By Operator [GBY_382] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                            Select Operator [SEL_379] (rows=50 width=4)
                                              Output:["_col0"]
                                               Please refer to the previous Select Operator [SEL_377]
                      <-Reducer 4 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_421]
                          PartitionCols:_col0
                          Group By Operator [GBY_420] (rows=235937 width=3)
                            Output:["_col0"],keys:KEY._col0
                          <-Reducer 3 [SIMPLE_EDGE]
                            SHUFFLE [RS_36]
                              PartitionCols:_col0
                              Group By Operator [GBY_35] (rows=235937 width=3)
                                Output:["_col0"],keys:_col0
                                Select Operator [SEL_34] (rows=471875 width=227)
                                  Output:["_col0"]
                                  Filter Operator [FIL_33] (rows=471875 width=227)
                                    predicate:(_col1 > _col2)
                                    Merge Join Operator [MERGEJOIN_360] (rows=1415626 width=227)
                                      Conds:(Inner),Output:["_col0","_col1","_col2"]
                                    <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_418]
                                         Please refer to the previous Select Operator [SEL_417]
                                    <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_399]
                                        Filter Operator [FIL_398] (rows=1415626 width=115)
                                          predicate:_col1 is not null
                                          Group By Operator [GBY_397] (rows=1415626 width=115)
                                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_396]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_395] (rows=550080312 width=115)
                                                Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                                Select Operator [SEL_394] (rows=550080312 width=114)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_393] (rows=550080312 width=114)
                                                    predicate:(ss_customer_sk is not null and ss_customer_sk BETWEEN DynamicValue(RS_71_catalog_sales_cs_bill_customer_sk_min) AND DynamicValue(RS_71_catalog_sales_cs_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_71_catalog_sales_cs_bill_customer_sk_bloom_filter)))
                                                    TableScan [TS_0] (rows=575995635 width=114)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                                                    <-Reducer 21 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_392]
                                                        Group By Operator [GBY_391] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 20 [CUSTOM_SIMPLE_EDGE]
                                                          SHUFFLE [RS_228]
                                                            Group By Operator [GBY_227] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_226] (rows=7751875 width=6)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Merge Join Operator [MERGEJOIN_353]

