Warning: Shuffle Join MERGEJOIN[360][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 18' is a cross product
Warning: Shuffle Join MERGEJOIN[362][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 19' is a cross product
PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Map 26 <- Reducer 13 (BROADCAST_EDGE), Reducer 20 (BROADCAST_EDGE), Reducer 25 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE)
Map 30 <- Reducer 14 (BROADCAST_EDGE)
Reducer 10 <- Map 30 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 13 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 26 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 27 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 28 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 20 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Map 26 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 29 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Map 29 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 25 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Map 26 (SIMPLE_EDGE)
Reducer 28 <- Map 26 (SIMPLE_EDGE)
Reducer 3 <- Reducer 18 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 23 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
<<<<<<< HEAD
      File Output Operator [FS_450]
        Group By Operator [GBY_449] (rows=1 width=112)
=======
      File Output Operator [FS_449]
        Group By Operator [GBY_448] (rows=1 width=112)
>>>>>>> HIVE-24241-downstream-merge
          Output:["_col0"],aggregations:["sum(VALUE._col0)"]
        <-Union 5 [CUSTOM_SIMPLE_EDGE]
          <-Reducer 12 [CONTAINS]
            Reduce Output Operator [RS_375]
              Group By Operator [GBY_374] (rows=1 width=112)
                Output:["_col0"],aggregations:["sum(_col0)"]
                Select Operator [SEL_372] (rows=3941102 width=112)
                  Output:["_col0"]
                  Merge Join Operator [MERGEJOIN_371] (rows=3941102 width=114)
                    Conds:RS_154._col0=RS_155._col0(Left Semi),Output:["_col1","_col2"]
                  <-Reducer 11 [SIMPLE_EDGE]
                    SHUFFLE [RS_154]
                      PartitionCols:_col0
                      Select Operator [SEL_129] (rows=3941102 width=118)
                        Output:["_col0","_col1","_col2"]
                        Merge Join Operator [MERGEJOIN_363] (rows=3941102 width=118)
                          Conds:RS_126._col1=RS_127._col0(Left Semi),Output:["_col0","_col2","_col3"]
                        <-Reducer 10 [SIMPLE_EDGE]
                          PARTITION_ONLY_SHUFFLE [RS_126]
                            PartitionCols:_col1
                            Select Operator [SEL_88] (rows=3941102 width=122)
                              Output:["_col0","_col1","_col2","_col3"]
                              Merge Join Operator [MERGEJOIN_356] (rows=3941102 width=122)
<<<<<<< HEAD
                                Conds:RS_413._col0=RS_384._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
=======
                                Conds:RS_412._col0=RS_383._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
>>>>>>> HIVE-24241-downstream-merge
                              <-Map 8 [SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_384]
                                  PartitionCols:_col0
                                  Select Operator [SEL_379] (rows=50 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_376] (rows=50 width=12)
                                      predicate:((d_year = 1999) and (d_moy = 1))
                                      TableScan [TS_3] (rows=73049 width=12)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy","d_date"]
                              <-Map 30 [SIMPLE_EDGE] vectorized
<<<<<<< HEAD
                                SHUFFLE [RS_413]
                                  PartitionCols:_col0
                                  Select Operator [SEL_412] (rows=143930993 width=127)
                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                    Filter Operator [FIL_411] (rows=143930993 width=127)
=======
                                SHUFFLE [RS_412]
                                  PartitionCols:_col0
                                  Select Operator [SEL_411] (rows=143930993 width=127)
                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                    Filter Operator [FIL_410] (rows=143930993 width=127)
>>>>>>> HIVE-24241-downstream-merge
                                      predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_86_date_dim_d_date_sk_min) AND DynamicValue(RS_86_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_86_date_dim_d_date_sk_bloom_filter)))
                                      TableScan [TS_79] (rows=144002668 width=127)
                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_quantity","ws_list_price"]
                                      <-Reducer 14 [BROADCAST_EDGE] vectorized
<<<<<<< HEAD
                                        BROADCAST [RS_410]
                                          Group By Operator [GBY_409] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_395]
                                              Group By Operator [GBY_391] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_385] (rows=50 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_379]
=======
                                        BROADCAST [RS_409]
                                          Group By Operator [GBY_408] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_394]
                                              Group By Operator [GBY_390] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_384] (rows=50 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_378]
>>>>>>> HIVE-24241-downstream-merge
                        <-Reducer 19 [SIMPLE_EDGE]
                          SHUFFLE [RS_127]
                            PartitionCols:_col0
                            Group By Operator [GBY_125] (rows=235937 width=3)
                              Output:["_col0"],keys:_col0
                              Select Operator [SEL_123] (rows=471875 width=3)
                                Output:["_col0"]
                                Filter Operator [FIL_122] (rows=471875 width=227)
                                  predicate:(_col1 > _col2)
                                  Merge Join Operator [MERGEJOIN_362] (rows=1415626 width=227)
                                    Conds:(Inner),Output:["_col0","_col1","_col2"]
                                  <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
<<<<<<< HEAD
                                    PARTITION_ONLY_SHUFFLE [RS_438]
                                      Select Operator [SEL_436] (rows=1 width=112)
                                        Output:["_col0"]
                                        Filter Operator [FIL_435] (rows=1 width=112)
                                          predicate:_col0 is not null
                                          Group By Operator [GBY_434] (rows=1 width=112)
                                            Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                          <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_433]
                                              Group By Operator [GBY_432] (rows=1 width=112)
                                                Output:["_col0"],aggregations:["max(_col1)"]
                                                Select Operator [SEL_431] (rows=50562 width=112)
                                                  Output:["_col1"]
                                                  Group By Operator [GBY_430] (rows=50562 width=112)
=======
                                    PARTITION_ONLY_SHUFFLE [RS_437]
                                      Select Operator [SEL_435] (rows=1 width=112)
                                        Output:["_col0"]
                                        Filter Operator [FIL_434] (rows=1 width=112)
                                          predicate:_col0 is not null
                                          Group By Operator [GBY_433] (rows=1 width=112)
                                            Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                          <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_432]
                                              Group By Operator [GBY_431] (rows=1 width=112)
                                                Output:["_col0"],aggregations:["max(_col1)"]
                                                Select Operator [SEL_430] (rows=50562 width=112)
                                                  Output:["_col1"]
                                                  Group By Operator [GBY_429] (rows=50562 width=112)
>>>>>>> HIVE-24241-downstream-merge
                                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                                  <-Reducer 15 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_30]
                                                      PartitionCols:_col0
                                                      Group By Operator [GBY_29] (rows=455058 width=112)
                                                        Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col1
                                                        Merge Join Operator [MERGEJOIN_353] (rows=18762463 width=112)
<<<<<<< HEAD
                                                          Conds:RS_425._col0=RS_386._col0(Inner),Output:["_col1","_col2"]
=======
                                                          Conds:RS_424._col0=RS_385._col0(Inner),Output:["_col1","_col2"]
>>>>>>> HIVE-24241-downstream-merge
                                                        <-Map 8 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_385]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_380] (rows=2609 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_377] (rows=2609 width=8)
                                                                predicate:(d_year) IN (1999, 2000, 2001, 2002)
                                                                 Please refer to the previous TableScan [TS_3]
                                                        <-Map 26 [SIMPLE_EDGE] vectorized
<<<<<<< HEAD
                                                          SHUFFLE [RS_425]
=======
                                                          SHUFFLE [RS_424]
>>>>>>> HIVE-24241-downstream-merge
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_420] (rows=525327388 width=119)
                                                              Output:["_col0","_col1","_col2"]
<<<<<<< HEAD
                                                              Filter Operator [FIL_417] (rows=525327388 width=118)
=======
                                                              Filter Operator [FIL_416] (rows=525327388 width=118)
>>>>>>> HIVE-24241-downstream-merge
                                                                predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_26_date_dim_d_date_sk_min) AND DynamicValue(RS_26_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_26_date_dim_d_date_sk_bloom_filter)))
                                                                TableScan [TS_10] (rows=575995635 width=114)
                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price","ss_sold_date_sk","ss_item_sk"]
                                                                <-Reducer 13 [BROADCAST_EDGE] vectorized
<<<<<<< HEAD
                                                                  BROADCAST [RS_415]
                                                                    Group By Operator [GBY_414] (rows=1 width=12)
=======
                                                                  BROADCAST [RS_414]
                                                                    Group By Operator [GBY_413] (rows=1 width=12)
>>>>>>> HIVE-24241-downstream-merge
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Reducer 10 [CUSTOM_SIMPLE_EDGE]
                                                                      PARTITION_ONLY_SHUFFLE [RS_321]
                                                                        Group By Operator [GBY_320] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_319] (rows=3941102 width=7)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_88]
                                                                <-Reducer 20 [BROADCAST_EDGE] vectorized
<<<<<<< HEAD
                                                                  BROADCAST [RS_406]
                                                                    Group By Operator [GBY_405] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_396]
                                                                        Group By Operator [GBY_392] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_387] (rows=2609 width=4)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_380]
                                                                <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_408]
                                                                    Group By Operator [GBY_407] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_397]
                                                                        Group By Operator [GBY_393] (rows=1 width=12)
=======
                                                                  BROADCAST [RS_405]
                                                                    Group By Operator [GBY_404] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_395]
                                                                        Group By Operator [GBY_391] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_386] (rows=2609 width=4)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_379]
                                                                <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_407]
                                                                    Group By Operator [GBY_406] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_396]
                                                                        Group By Operator [GBY_392] (rows=1 width=12)
>>>>>>> HIVE-24241-downstream-merge
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_389] (rows=2609 width=4)
                                                                            Output:["_col0"]
                                                                            Select Operator [SEL_381] (rows=2609 width=98)
                                                                              Output:["_col0","_col1"]
                                                                              Filter Operator [FIL_378] (rows=2609 width=102)
                                                                                predicate:(d_year) IN (1999, 2000, 2001, 2002)
                                                                                 Please refer to the previous TableScan [TS_3]
                                                                <-Reducer 7 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_404]
                                                                    Group By Operator [GBY_403] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                                                      PARTITION_ONLY_SHUFFLE [RS_258]
                                                                        Group By Operator [GBY_257] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_256] (rows=7751875 width=3)
                                                                            Output:["_col0"]
                                                                            Select Operator [SEL_9] (rows=7751875 width=101)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Merge Join Operator [MERGEJOIN_352] (rows=7751875 width=101)
                                                                                Conds:RS_402._col0=RS_382._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                                              <-Map 8 [SIMPLE_EDGE] vectorized
                                                                                PARTITION_ONLY_SHUFFLE [RS_382]
                                                                                  PartitionCols:_col0
                                                                                   Please refer to the previous Select Operator [SEL_379]
                                                                              <-Map 1 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_402]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_401] (rows=285117831 width=127)
                                                                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                                                                    Filter Operator [FIL_400] (rows=285117831 width=127)
                                                                                      predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_7_date_dim_d_date_sk_min) AND DynamicValue(RS_7_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_7_date_dim_d_date_sk_bloom_filter)))
                                                                                      TableScan [TS_0] (rows=287989836 width=127)
                                                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                                                      <-Reducer 9 [BROADCAST_EDGE] vectorized
<<<<<<< HEAD
                                                                                        BROADCAST [RS_399]
                                                                                          Group By Operator [GBY_398] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                          <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                            PARTITION_ONLY_SHUFFLE [RS_394]
                                                                                              Group By Operator [GBY_390] (rows=1 width=12)
                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                Select Operator [SEL_383] (rows=50 width=4)
                                                                                                  Output:["_col0"]
                                                                                                   Please refer to the previous Select Operator [SEL_379]
                                  <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_453]
                                      Filter Operator [FIL_452] (rows=1415626 width=115)
                                        predicate:_col1 is not null
                                        Group By Operator [GBY_451] (rows=1415626 width=115)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                        <-Map 26 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_429]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_427] (rows=550080312 width=115)
                                              Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                              Select Operator [SEL_423] (rows=550080312 width=114)
=======
                                                                                        BROADCAST [RS_398]
                                                                                          Group By Operator [GBY_397] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                          <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                            PARTITION_ONLY_SHUFFLE [RS_393]
                                                                                              Group By Operator [GBY_389] (rows=1 width=12)
                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                Select Operator [SEL_382] (rows=50 width=4)
                                                                                                  Output:["_col0"]
                                                                                                   Please refer to the previous Select Operator [SEL_378]
                                  <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_452]
                                      Filter Operator [FIL_451] (rows=1415626 width=115)
                                        predicate:_col1 is not null
                                        Group By Operator [GBY_450] (rows=1415626 width=115)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                        <-Map 26 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_428]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_426] (rows=550080312 width=115)
                                              Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                              Select Operator [SEL_422] (rows=550080312 width=114)
>>>>>>> HIVE-24241-downstream-merge
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_419] (rows=550080312 width=114)
                                                  predicate:(ss_customer_sk is not null and ss_customer_sk BETWEEN DynamicValue(RS_126_web_sales_ws_bill_customer_sk_min) AND DynamicValue(RS_126_web_sales_ws_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_126_web_sales_ws_bill_customer_sk_bloom_filter)))
                                                   Please refer to the previous TableScan [TS_10]
                  <-Reducer 24 [SIMPLE_EDGE]
                    SHUFFLE [RS_155]
                      PartitionCols:_col0
                      Group By Operator [GBY_153] (rows=2235 width=4)
                        Output:["_col0"],keys:_col0
                        Select Operator [SEL_151] (rows=1943705 width=4)
                          Output:["_col0"]
                          Filter Operator [FIL_150] (rows=1943705 width=12)
                            predicate:(_col2 > 4L)
                            Select Operator [SEL_149] (rows=5831115 width=12)
                              Output:["_col0","_col2"]
                              Merge Join Operator [MERGEJOIN_359] (rows=5831115 width=12)
<<<<<<< HEAD
                                Conds:RS_445._col0=RS_448._col0(Inner),Output:["_col2","_col3"]
                              <-Map 29 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_448]
                                  PartitionCols:_col0
                                  Select Operator [SEL_446] (rows=462000 width=4)
=======
                                Conds:RS_444._col0=RS_447._col0(Inner),Output:["_col2","_col3"]
                              <-Map 29 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_447]
                                  PartitionCols:_col0
                                  Select Operator [SEL_445] (rows=462000 width=4)
>>>>>>> HIVE-24241-downstream-merge
                                    Output:["_col0"]
                                    TableScan [TS_65] (rows=462000 width=4)
                                      default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk"]
                              <-Reducer 22 [SIMPLE_EDGE] vectorized
<<<<<<< HEAD
                                SHUFFLE [RS_445]
                                  PartitionCols:_col0
                                  Select Operator [SEL_443] (rows=5831115 width=106)
                                    Output:["_col0","_col2"]
                                    Group By Operator [GBY_442] (rows=5831115 width=106)
=======
                                SHUFFLE [RS_444]
                                  PartitionCols:_col0
                                  Select Operator [SEL_442] (rows=5831115 width=106)
                                    Output:["_col0","_col2"]
                                    Group By Operator [GBY_441] (rows=5831115 width=106)
>>>>>>> HIVE-24241-downstream-merge
                                      Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                    <-Reducer 21 [SIMPLE_EDGE]
                                      SHUFFLE [RS_62]
                                        PartitionCols:_col0, _col1
                                        Group By Operator [GBY_61] (rows=19646398 width=106)
                                          Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col1, _col3
                                          Merge Join Operator [MERGEJOIN_354] (rows=19646398 width=98)
<<<<<<< HEAD
                                            Conds:RS_426._col0=RS_388._col0(Inner),Output:["_col1","_col3"]
                                          <-Map 8 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_388]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_381]
                                          <-Map 26 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_426]
                                              PartitionCols:_col0
                                              Select Operator [SEL_422] (rows=550076554 width=7)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_418] (rows=550076554 width=7)
=======
                                            Conds:RS_425._col0=RS_387._col0(Inner),Output:["_col1","_col3"]
                                          <-Map 8 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_387]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_380]
                                          <-Map 26 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_425]
                                              PartitionCols:_col0
                                              Select Operator [SEL_421] (rows=550076554 width=7)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_417] (rows=550076554 width=7)
>>>>>>> HIVE-24241-downstream-merge
                                                  predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_58_date_dim_d_date_sk_min) AND DynamicValue(RS_58_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_58_date_dim_d_date_sk_bloom_filter)))
                                                   Please refer to the previous TableScan [TS_10]
          <-Reducer 4 [CONTAINS]
            Reduce Output Operator [RS_370]
              Group By Operator [GBY_369] (rows=1 width=112)
                Output:["_col0"],aggregations:["sum(_col0)"]
                Select Operator [SEL_367] (rows=7751875 width=112)
                  Output:["_col0"]
                  Merge Join Operator [MERGEJOIN_366] (rows=7751875 width=94)
                    Conds:RS_75._col0=RS_76._col0(Left Semi),Output:["_col1","_col2"]
                  <-Reducer 23 [SIMPLE_EDGE]
                    SHUFFLE [RS_76]
                      PartitionCols:_col0
                      Group By Operator [GBY_74] (rows=2235 width=4)
                        Output:["_col0"],keys:_col0
                        Select Operator [SEL_72] (rows=1943705 width=4)
                          Output:["_col0"]
                          Filter Operator [FIL_71] (rows=1943705 width=12)
                            predicate:(_col2 > 4L)
                            Select Operator [SEL_70] (rows=5831115 width=12)
                              Output:["_col0","_col2"]
                              Merge Join Operator [MERGEJOIN_355] (rows=5831115 width=12)
<<<<<<< HEAD
                                Conds:RS_444._col0=RS_447._col0(Inner),Output:["_col2","_col3"]
                              <-Map 29 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_447]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_446]
                              <-Reducer 22 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_444]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_443]
=======
                                Conds:RS_443._col0=RS_446._col0(Inner),Output:["_col2","_col3"]
                              <-Map 29 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_446]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_445]
                              <-Reducer 22 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_443]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_442]
>>>>>>> HIVE-24241-downstream-merge
                  <-Reducer 3 [SIMPLE_EDGE]
                    SHUFFLE [RS_75]
                      PartitionCols:_col0
                      Select Operator [SEL_50] (rows=7751875 width=98)
                        Output:["_col0","_col1","_col2"]
                        Merge Join Operator [MERGEJOIN_361] (rows=7751875 width=98)
                          Conds:RS_47._col0=RS_48._col0(Left Semi),Output:["_col1","_col2","_col3"]
                        <-Reducer 2 [SIMPLE_EDGE]
                          PARTITION_ONLY_SHUFFLE [RS_47]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_9]
                        <-Reducer 18 [SIMPLE_EDGE]
                          SHUFFLE [RS_48]
                            PartitionCols:_col0
                            Group By Operator [GBY_46] (rows=235937 width=3)
                              Output:["_col0"],keys:_col0
                              Select Operator [SEL_44] (rows=471875 width=3)
                                Output:["_col0"]
                                Filter Operator [FIL_43] (rows=471875 width=227)
                                  predicate:(_col1 > _col2)
                                  Merge Join Operator [MERGEJOIN_360] (rows=1415626 width=227)
                                    Conds:(Inner),Output:["_col0","_col1","_col2"]
                                  <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
<<<<<<< HEAD
                                    PARTITION_ONLY_SHUFFLE [RS_437]
                                       Please refer to the previous Select Operator [SEL_436]
                                  <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_441]
                                      Filter Operator [FIL_440] (rows=1415626 width=115)
                                        predicate:_col1 is not null
                                        Group By Operator [GBY_439] (rows=1415626 width=115)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                        <-Map 26 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_428]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_424] (rows=550080312 width=115)
=======
                                    PARTITION_ONLY_SHUFFLE [RS_436]
                                       Please refer to the previous Select Operator [SEL_435]
                                  <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_440]
                                      Filter Operator [FIL_439] (rows=1415626 width=115)
                                        predicate:_col1 is not null
                                        Group By Operator [GBY_438] (rows=1415626 width=115)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                        <-Map 26 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_427]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_423] (rows=550080312 width=115)
>>>>>>> HIVE-24241-downstream-merge
                                              Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                              Select Operator [SEL_420] (rows=550080312 width=114)
                                                Output:["_col0","_col1"]
<<<<<<< HEAD
                                                Filter Operator [FIL_416] (rows=550080312 width=114)
=======
                                                Filter Operator [FIL_415] (rows=550080312 width=114)
>>>>>>> HIVE-24241-downstream-merge
                                                  predicate:(ss_customer_sk is not null and ss_customer_sk BETWEEN DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_min) AND DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_bloom_filter)))
                                                   Please refer to the previous TableScan [TS_10]

