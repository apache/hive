Warning: Shuffle Join MERGEJOIN[359][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 18' is a cross product
Warning: Shuffle Join MERGEJOIN[361][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 19' is a cross product
PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Map 26 <- Reducer 7 (BROADCAST_EDGE)
Map 28 <- Reducer 20 (BROADCAST_EDGE)
Map 29 <- Reducer 25 (BROADCAST_EDGE)
Map 31 <- Reducer 14 (BROADCAST_EDGE)
Map 32 <- Reducer 13 (BROADCAST_EDGE)
Reducer 10 <- Map 31 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 13 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 28 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 27 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 33 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 20 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Map 29 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 22 <- Map 30 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 22 (SIMPLE_EDGE)
Reducer 25 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Map 26 (SIMPLE_EDGE)
Reducer 3 <- Reducer 18 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 33 <- Map 32 (SIMPLE_EDGE)
Reducer 4 <- Reducer 23 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_440]
        Limit [LIM_439] (rows=1 width=112)
          Number of rows:100
          Group By Operator [GBY_438] (rows=1 width=112)
            Output:["_col0"],aggregations:["sum(VALUE._col0)"]
          <-Union 5 [CUSTOM_SIMPLE_EDGE]
            <-Reducer 12 [CONTAINS]
              Reduce Output Operator [RS_374]
                Group By Operator [GBY_373] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_371] (rows=3941102 width=112)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_370] (rows=3941102 width=114)
                      Conds:RS_152._col0=RS_460._col0(Left Semi),Output:["_col1","_col2"]
                    <-Reducer 11 [SIMPLE_EDGE]
                      SHUFFLE [RS_152]
                        PartitionCols:_col0
                        Select Operator [SEL_128] (rows=3941102 width=118)
                          Output:["_col0","_col1","_col2"]
                          Merge Join Operator [MERGEJOIN_362] (rows=3941102 width=118)
                            Conds:RS_125._col1=RS_126._col0(Left Semi),Output:["_col0","_col2","_col3"]
                          <-Reducer 10 [SIMPLE_EDGE]
                            PARTITION_ONLY_SHUFFLE [RS_125]
                              PartitionCols:_col1
                              Select Operator [SEL_87] (rows=3941102 width=122)
                                Output:["_col0","_col1","_col2","_col3"]
                                Merge Join Operator [MERGEJOIN_355] (rows=3941102 width=122)
                                  Conds:RS_445._col0=RS_383._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                <-Map 8 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_383]
                                    PartitionCols:_col0
                                    Select Operator [SEL_378] (rows=50 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_375] (rows=50 width=12)
                                        predicate:((d_year = 1999) and (d_moy = 1))
                                        TableScan [TS_3] (rows=73049 width=12)
                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy","d_date"]
                                <-Map 31 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_445]
                                    PartitionCols:_col0
                                    Select Operator [SEL_444] (rows=143930993 width=127)
                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                      Filter Operator [FIL_443] (rows=143930993 width=127)
                                        predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_85_date_dim_d_date_sk_min) AND DynamicValue(RS_85_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_85_date_dim_d_date_sk_bloom_filter)))
                                        TableScan [TS_78] (rows=144002668 width=127)
                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_quantity","ws_list_price"]
                                        <-Reducer 14 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_442]
                                            Group By Operator [GBY_441] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_394]
                                                Group By Operator [GBY_390] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_384] (rows=50 width=4)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_378]
                          <-Reducer 19 [SIMPLE_EDGE]
                            SHUFFLE [RS_126]
                              PartitionCols:_col0
                              Group By Operator [GBY_124] (rows=235937 width=3)
                                Output:["_col0"],keys:_col0
                                Select Operator [SEL_122] (rows=471875 width=3)
                                  Output:["_col0"]
                                  Filter Operator [FIL_121] (rows=471875 width=227)
                                    predicate:(_col1 > _col2)
                                    Merge Join Operator [MERGEJOIN_361] (rows=1415626 width=227)
                                      Conds:(Inner),Output:["_col0","_col1","_col2"]
                                    <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_415]
                                        Select Operator [SEL_413] (rows=1 width=112)
                                          Output:["_col0"]
                                          Filter Operator [FIL_412] (rows=1 width=112)
                                            predicate:_col0 is not null
                                            Group By Operator [GBY_411] (rows=1 width=112)
                                              Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                            <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_410]
                                                Group By Operator [GBY_409] (rows=1 width=112)
                                                  Output:["_col0"],aggregations:["max(_col1)"]
                                                  Select Operator [SEL_408] (rows=50562 width=112)
                                                    Output:["_col1"]
                                                    Group By Operator [GBY_407] (rows=50562 width=112)
                                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                                    <-Reducer 15 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_30]
                                                        PartitionCols:_col0
                                                        Group By Operator [GBY_29] (rows=455058 width=112)
                                                          Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col1
                                                          Merge Join Operator [MERGEJOIN_352] (rows=18762463 width=112)
                                                            Conds:RS_406._col0=RS_385._col0(Inner),Output:["_col1","_col2"]
                                                          <-Map 8 [SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_385]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_379] (rows=2609 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_376] (rows=2609 width=8)
                                                                  predicate:(d_year) IN (1999, 2000, 2001, 2002)
                                                                   Please refer to the previous TableScan [TS_3]
                                                          <-Map 28 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_406]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_405] (rows=525327388 width=119)
                                                                Output:["_col0","_col1","_col2"]
                                                                Filter Operator [FIL_404] (rows=525327388 width=118)
                                                                  predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_26_date_dim_d_date_sk_min) AND DynamicValue(RS_26_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_26_date_dim_d_date_sk_bloom_filter)))
                                                                  TableScan [TS_19] (rows=575995635 width=118)
                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_quantity","ss_sales_price"]
                                                                  <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_403]
                                                                      Group By Operator [GBY_402] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_395]
                                                                          Group By Operator [GBY_391] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_386] (rows=2609 width=4)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Select Operator [SEL_379]
                                    <-Reducer 33 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_454]
                                        Filter Operator [FIL_453] (rows=1415626 width=115)
                                          predicate:_col1 is not null
                                          Group By Operator [GBY_452] (rows=1415626 width=115)
                                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                          <-Map 32 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_451]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_450] (rows=550080312 width=115)
                                                Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                                Select Operator [SEL_449] (rows=550080312 width=114)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_448] (rows=550080312 width=114)
                                                    predicate:(ss_customer_sk is not null and ss_customer_sk BETWEEN DynamicValue(RS_125_web_sales_ws_bill_customer_sk_min) AND DynamicValue(RS_125_web_sales_ws_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_125_web_sales_ws_bill_customer_sk_bloom_filter)))
                                                    TableScan [TS_88] (rows=575995635 width=114)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                                                    <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_447]
                                                        Group By Operator [GBY_446] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 10 [CUSTOM_SIMPLE_EDGE]
                                                          PARTITION_ONLY_SHUFFLE [RS_320]
                                                            Group By Operator [GBY_319] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_318] (rows=3941102 width=7)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_87]
                    <-Reducer 24 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_460]
                        PartitionCols:_col0
                        Group By Operator [GBY_459] (rows=2235 width=4)
                          Output:["_col0"],keys:_col0
                          Select Operator [SEL_458] (rows=1943705 width=4)
                            Output:["_col0"]
                            Filter Operator [FIL_457] (rows=1943705 width=106)
                              predicate:(_col2 > 4L)
                              Select Operator [SEL_456] (rows=5831115 width=106)
                                Output:["_col0","_col2"]
                                Group By Operator [GBY_455] (rows=5831115 width=106)
                                  Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                <-Reducer 22 [SIMPLE_EDGE]
                                  SHUFFLE [RS_145]
                                    PartitionCols:_col0, _col1
                                    Group By Operator [GBY_66] (rows=19646398 width=106)
                                      Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col4, _col3
                                      Merge Join Operator [MERGEJOIN_354] (rows=19646398 width=98)
                                        Conds:RS_62._col1=RS_431._col0(Inner),Output:["_col3","_col4"]
                                      <-Map 30 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_431]
                                          PartitionCols:_col0
                                          Select Operator [SEL_430] (rows=462000 width=188)
                                            Output:["_col0"]
                                            TableScan [TS_57] (rows=462000 width=4)
                                              default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk"]
                                      <-Reducer 21 [SIMPLE_EDGE]
                                        SHUFFLE [RS_62]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_353] (rows=19646398 width=98)
                                            Conds:RS_429._col0=RS_387._col0(Inner),Output:["_col1","_col3"]
                                          <-Map 8 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_387]
                                              PartitionCols:_col0
                                              Select Operator [SEL_380] (rows=2609 width=98)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_377] (rows=2609 width=102)
                                                  predicate:(d_year) IN (1999, 2000, 2001, 2002)
                                                   Please refer to the previous TableScan [TS_3]
                                          <-Map 29 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_429]
                                              PartitionCols:_col0
                                              Select Operator [SEL_428] (rows=550076554 width=7)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_427] (rows=550076554 width=7)
                                                  predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_60_date_dim_d_date_sk_min) AND DynamicValue(RS_60_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_60_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_51] (rows=575995635 width=7)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                  <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_426]
                                                      Group By Operator [GBY_425] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_396]
                                                          Group By Operator [GBY_392] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_388] (rows=2609 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_380]
            <-Reducer 4 [CONTAINS]
              Reduce Output Operator [RS_369]
                Group By Operator [GBY_368] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_366] (rows=7751875 width=112)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_365] (rows=7751875 width=94)
                      Conds:RS_74._col0=RS_437._col0(Left Semi),Output:["_col1","_col2"]
                    <-Reducer 23 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_437]
                        PartitionCols:_col0
                        Group By Operator [GBY_436] (rows=2235 width=4)
                          Output:["_col0"],keys:_col0
                          Select Operator [SEL_435] (rows=1943705 width=4)
                            Output:["_col0"]
                            Filter Operator [FIL_434] (rows=1943705 width=106)
                              predicate:(_col2 > 4L)
                              Select Operator [SEL_433] (rows=5831115 width=106)
                                Output:["_col0","_col2"]
                                Group By Operator [GBY_432] (rows=5831115 width=106)
                                  Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                <-Reducer 22 [SIMPLE_EDGE]
                                  SHUFFLE [RS_67]
                                    PartitionCols:_col0, _col1
                                     Please refer to the previous Group By Operator [GBY_66]
                    <-Reducer 3 [SIMPLE_EDGE]
                      SHUFFLE [RS_74]
                        PartitionCols:_col0
                        Select Operator [SEL_50] (rows=7751875 width=98)
                          Output:["_col0","_col1","_col2"]
                          Merge Join Operator [MERGEJOIN_360] (rows=7751875 width=98)
                            Conds:RS_47._col0=RS_48._col0(Left Semi),Output:["_col1","_col2","_col3"]
                          <-Reducer 2 [SIMPLE_EDGE]
                            PARTITION_ONLY_SHUFFLE [RS_47]
                              PartitionCols:_col0
                              Select Operator [SEL_9] (rows=7751875 width=101)
                                Output:["_col0","_col1","_col2","_col3"]
                                Merge Join Operator [MERGEJOIN_351] (rows=7751875 width=101)
                                  Conds:RS_401._col0=RS_381._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                <-Map 8 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_381]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_378]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_401]
                                    PartitionCols:_col0
                                    Select Operator [SEL_400] (rows=285117831 width=127)
                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                      Filter Operator [FIL_399] (rows=285117831 width=127)
                                        predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_7_date_dim_d_date_sk_min) AND DynamicValue(RS_7_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_7_date_dim_d_date_sk_bloom_filter)))
                                        TableScan [TS_0] (rows=287989836 width=127)
                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                        <-Reducer 9 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_398]
                                            Group By Operator [GBY_397] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_393]
                                                Group By Operator [GBY_389] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_382] (rows=50 width=4)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_378]
                          <-Reducer 18 [SIMPLE_EDGE]
                            SHUFFLE [RS_48]
                              PartitionCols:_col0
                              Group By Operator [GBY_46] (rows=235937 width=3)
                                Output:["_col0"],keys:_col0
                                Select Operator [SEL_44] (rows=471875 width=3)
                                  Output:["_col0"]
                                  Filter Operator [FIL_43] (rows=471875 width=227)
                                    predicate:(_col1 > _col2)
                                    Merge Join Operator [MERGEJOIN_359] (rows=1415626 width=227)
                                      Conds:(Inner),Output:["_col0","_col1","_col2"]
                                    <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_414]
                                         Please refer to the previous Select Operator [SEL_413]
                                    <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_424]
                                        Filter Operator [FIL_423] (rows=1415626 width=115)
                                          predicate:_col1 is not null
                                          Group By Operator [GBY_422] (rows=1415626 width=115)
                                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                          <-Map 26 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_421]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_420] (rows=550080312 width=115)
                                                Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                                Select Operator [SEL_419] (rows=550080312 width=114)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_418] (rows=550080312 width=114)
                                                    predicate:(ss_customer_sk is not null and ss_customer_sk BETWEEN DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_min) AND DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_47_catalog_sales_cs_bill_customer_sk_bloom_filter)))
                                                    TableScan [TS_10] (rows=575995635 width=114)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                                                    <-Reducer 7 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_417]
                                                        Group By Operator [GBY_416] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                                          PARTITION_ONLY_SHUFFLE [RS_257]
                                                            Group By Operator [GBY_256] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_255] (rows=7751875 width=3)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_9]

