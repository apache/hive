Warning: Shuffle Join MERGEJOIN[357][tables = [$hdt$_3, $hdt$_4]] in Stage 'Reducer 22' is a cross product
Warning: Shuffle Join MERGEJOIN[359][tables = [$hdt$_3, $hdt$_4]] in Stage 'Reducer 23' is a cross product
PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Map 25 <- Reducer 18 (BROADCAST_EDGE)
Map 27 <- Reducer 7 (BROADCAST_EDGE)
Map 29 <- Reducer 24 (BROADCAST_EDGE)
Map 30 <- Reducer 14 (BROADCAST_EDGE)
Map 31 <- Reducer 13 (BROADCAST_EDGE)
Reducer 10 <- Map 30 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 13 <- Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 25 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 16 <- Map 26 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 29 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (CUSTOM_SIMPLE_EDGE), Reducer 28 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Reducer 21 (CUSTOM_SIMPLE_EDGE), Reducer 32 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 27 (SIMPLE_EDGE)
Reducer 3 <- Reducer 17 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 32 <- Map 31 (SIMPLE_EDGE)
Reducer 4 <- Reducer 22 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_437]
        Limit [LIM_436] (rows=1 width=112)
          Number of rows:100
          Group By Operator [GBY_435] (rows=1 width=112)
            Output:["_col0"],aggregations:["sum(VALUE._col0)"]
          <-Union 5 [CUSTOM_SIMPLE_EDGE]
            <-Reducer 12 [CONTAINS]
              Reduce Output Operator [RS_370]
                Group By Operator [GBY_369] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_367] (rows=3941102 width=112)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_366] (rows=3941102 width=114)
                      Conds:RS_148._col2=RS_149._col0(Left Semi),Output:["_col3","_col4"]
                    <-Reducer 11 [SIMPLE_EDGE]
                      PARTITION_ONLY_SHUFFLE [RS_148]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_356] (rows=3941102 width=118)
                          Conds:RS_143._col1=RS_411._col0(Left Semi),Output:["_col2","_col3","_col4"]
                        <-Reducer 17 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_411]
                            PartitionCols:_col0
                            Group By Operator [GBY_409] (rows=2235 width=4)
                              Output:["_col0"],keys:_col0
                              Select Operator [SEL_408] (rows=1943705 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_407] (rows=1943705 width=106)
                                  predicate:(_col2 > 4L)
                                  Select Operator [SEL_406] (rows=5831115 width=106)
                                    Output:["_col0","_col2"]
                                    Group By Operator [GBY_405] (rows=5831115 width=106)
                                      Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                    <-Reducer 16 [SIMPLE_EDGE]
                                      SHUFFLE [RS_22]
                                        PartitionCols:_col0, _col1
                                        Group By Operator [GBY_21] (rows=19646398 width=106)
                                          Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col4, _col3
                                          Merge Join Operator [MERGEJOIN_349] (rows=19646398 width=98)
                                            Conds:RS_17._col1=RS_404._col0(Inner),Output:["_col3","_col4"]
                                          <-Map 26 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_404]
                                              PartitionCols:_col0
                                              Select Operator [SEL_403] (rows=462000 width=188)
                                                Output:["_col0"]
                                                TableScan [TS_12] (rows=462000 width=4)
                                                  default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk"]
                                          <-Reducer 15 [SIMPLE_EDGE]
                                            SHUFFLE [RS_17]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_348] (rows=19646398 width=98)
                                                Conds:RS_402._col0=RS_381._col0(Inner),Output:["_col1","_col3"]
                                              <-Map 8 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_381]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_375] (rows=2609 width=98)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_372] (rows=2609 width=102)
                                                      predicate:(d_year) IN (1999, 2000, 2001, 2002)
                                                      TableScan [TS_3] (rows=73049 width=12)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy","d_date"]
                                              <-Map 25 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_402]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_401] (rows=550076554 width=7)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_400] (rows=550076554 width=7)
                                                      predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_15_date_dim_d_date_sk_min) AND DynamicValue(RS_15_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_15_date_dim_d_date_sk_bloom_filter)))
                                                      TableScan [TS_6] (rows=575995635 width=7)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                      <-Reducer 18 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_399]
                                                          Group By Operator [GBY_398] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_391]
                                                              Group By Operator [GBY_387] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_382] (rows=2609 width=4)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_375]
                        <-Reducer 10 [SIMPLE_EDGE]
                          SHUFFLE [RS_143]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_351] (rows=3941102 width=122)
                              Conds:RS_442._col0=RS_379._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Map 8 [SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_379]
                                PartitionCols:_col0
                                Select Operator [SEL_374] (rows=50 width=12)
                                  Output:["_col0"]
                                  Filter Operator [FIL_371] (rows=50 width=12)
                                    predicate:((d_year = 1999) and (d_moy = 1))
                                     Please refer to the previous TableScan [TS_3]
                            <-Map 30 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_442]
                                PartitionCols:_col0
                                Select Operator [SEL_441] (rows=143930993 width=127)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_440] (rows=143930993 width=127)
                                    predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_139_date_dim_d_date_sk_min) AND DynamicValue(RS_139_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_139_date_dim_d_date_sk_bloom_filter)))
                                    TableScan [TS_76] (rows=144002668 width=127)
                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_quantity","ws_list_price"]
                                    <-Reducer 14 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_439]
                                        Group By Operator [GBY_438] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_390]
                                            Group By Operator [GBY_386] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_380] (rows=50 width=4)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_374]
                    <-Reducer 23 [SIMPLE_EDGE]
                      SHUFFLE [RS_149]
                        PartitionCols:_col0
                        Group By Operator [GBY_147] (rows=235937 width=3)
                          Output:["_col0"],keys:_col0
                          Select Operator [SEL_137] (rows=471875 width=3)
                            Output:["_col0"]
                            Filter Operator [FIL_136] (rows=471875 width=227)
                              predicate:(_col1 > _col2)
                              Merge Join Operator [MERGEJOIN_359] (rows=1415626 width=227)
                                Conds:(Inner),Output:["_col0","_col1","_col2"]
                              <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_425]
                                  Select Operator [SEL_423] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_422] (rows=1 width=112)
                                      predicate:_col0 is not null
                                      Group By Operator [GBY_421] (rows=1 width=112)
                                        Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                      <-Reducer 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_420]
                                          Group By Operator [GBY_419] (rows=1 width=112)
                                            Output:["_col0"],aggregations:["max(_col1)"]
                                            Select Operator [SEL_418] (rows=50562 width=112)
                                              Output:["_col1"]
                                              Group By Operator [GBY_417] (rows=50562 width=112)
                                                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                              <-Reducer 19 [SIMPLE_EDGE]
                                                SHUFFLE [RS_47]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_46] (rows=455058 width=112)
                                                    Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col1
                                                    Merge Join Operator [MERGEJOIN_350] (rows=18762463 width=112)
                                                      Conds:RS_416._col0=RS_383._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 8 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_383]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_376] (rows=2609 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_373] (rows=2609 width=8)
                                                            predicate:(d_year) IN (1999, 2000, 2001, 2002)
                                                             Please refer to the previous TableScan [TS_3]
                                                    <-Map 29 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_416]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_415] (rows=525327388 width=119)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_414] (rows=525327388 width=118)
                                                            predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_43_date_dim_d_date_sk_min) AND DynamicValue(RS_43_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_43_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_36] (rows=575995635 width=118)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_quantity","ss_sales_price"]
                                                            <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_413]
                                                                Group By Operator [GBY_412] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_392]
                                                                    Group By Operator [GBY_388] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_384] (rows=2609 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_376]
                              <-Reducer 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_451]
                                  Filter Operator [FIL_450] (rows=1415626 width=115)
                                    predicate:_col1 is not null
                                    Group By Operator [GBY_449] (rows=1415626 width=115)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                    <-Map 31 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_448]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_447] (rows=550080312 width=115)
                                          Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                          Select Operator [SEL_446] (rows=550080312 width=114)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_445] (rows=550080312 width=114)
                                              predicate:(ss_customer_sk is not null and ss_customer_sk BETWEEN DynamicValue(RS_148_web_sales_ws_bill_customer_sk_min) AND DynamicValue(RS_148_web_sales_ws_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_148_web_sales_ws_bill_customer_sk_bloom_filter)))
                                              TableScan [TS_103] (rows=575995635 width=114)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                                              <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_444]
                                                  Group By Operator [GBY_443] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Reducer 11 [CUSTOM_SIMPLE_EDGE]
                                                    PARTITION_ONLY_SHUFFLE [RS_334]
                                                      Group By Operator [GBY_333] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_332] (rows=3941102 width=7)
                                                          Output:["_col0"]
                                                           Please refer to the previous Merge Join Operator [MERGEJOIN_356]
            <-Reducer 4 [CONTAINS]
              Reduce Output Operator [RS_365]
                Group By Operator [GBY_364] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_362] (rows=7751875 width=112)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_361] (rows=7751875 width=94)
                      Conds:RS_72._col1=RS_73._col0(Left Semi),Output:["_col3","_col4"]
                    <-Reducer 3 [SIMPLE_EDGE]
                      PARTITION_ONLY_SHUFFLE [RS_72]
                        PartitionCols:_col1
                        Merge Join Operator [MERGEJOIN_355] (rows=7751875 width=97)
                          Conds:RS_67._col2=RS_410._col0(Left Semi),Output:["_col1","_col3","_col4"]
                        <-Reducer 17 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_410]
                            PartitionCols:_col0
                             Please refer to the previous Group By Operator [GBY_409]
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_67]
                            PartitionCols:_col2
                            Merge Join Operator [MERGEJOIN_347] (rows=7751875 width=101)
                              Conds:RS_397._col0=RS_377._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Map 8 [SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_377]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_374]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_397]
                                PartitionCols:_col0
                                Select Operator [SEL_396] (rows=285117831 width=127)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_395] (rows=285117831 width=127)
                                    predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_63_date_dim_d_date_sk_min) AND DynamicValue(RS_63_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_63_date_dim_d_date_sk_bloom_filter)))
                                    TableScan [TS_0] (rows=287989836 width=127)
                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                    <-Reducer 9 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_394]
                                        Group By Operator [GBY_393] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_389]
                                            Group By Operator [GBY_385] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_378] (rows=50 width=4)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_374]
                    <-Reducer 22 [SIMPLE_EDGE]
                      SHUFFLE [RS_73]
                        PartitionCols:_col0
                        Group By Operator [GBY_71] (rows=235937 width=3)
                          Output:["_col0"],keys:_col0
                          Select Operator [SEL_61] (rows=471875 width=3)
                            Output:["_col0"]
                            Filter Operator [FIL_60] (rows=471875 width=227)
                              predicate:(_col1 > _col2)
                              Merge Join Operator [MERGEJOIN_357] (rows=1415626 width=227)
                                Conds:(Inner),Output:["_col0","_col1","_col2"]
                              <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_424]
                                   Please refer to the previous Select Operator [SEL_423]
                              <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_434]
                                  Filter Operator [FIL_433] (rows=1415626 width=115)
                                    predicate:_col1 is not null
                                    Group By Operator [GBY_432] (rows=1415626 width=115)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                    <-Map 27 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_431]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_430] (rows=550080312 width=115)
                                          Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                          Select Operator [SEL_429] (rows=550080312 width=114)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_428] (rows=550080312 width=114)
                                              predicate:(ss_customer_sk is not null and ss_customer_sk BETWEEN DynamicValue(RS_72_catalog_sales_cs_bill_customer_sk_min) AND DynamicValue(RS_72_catalog_sales_cs_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_72_catalog_sales_cs_bill_customer_sk_bloom_filter)))
                                              TableScan [TS_27] (rows=575995635 width=114)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                                              <-Reducer 7 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_427]
                                                  Group By Operator [GBY_426] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Reducer 3 [CUSTOM_SIMPLE_EDGE]
                                                    PARTITION_ONLY_SHUFFLE [RS_271]
                                                      Group By Operator [GBY_270] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_269] (rows=7751875 width=6)
                                                          Output:["_col0"]
                                                           Please refer to the previous Merge Join Operator [MERGEJOIN_355]

