PREHOOK: query: explain
WITH all_sales AS (
 SELECT d_year
       ,i_brand_id
       ,i_class_id
       ,i_category_id
       ,i_manufact_id
       ,SUM(sales_cnt) AS sales_cnt
       ,SUM(sales_amt) AS sales_amt
 FROM (SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt
             ,cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt
       FROM catalog_sales JOIN item ON i_item_sk=cs_item_sk
                          JOIN date_dim ON d_date_sk=cs_sold_date_sk
                          LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number 
                                                    AND cs_item_sk=cr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt
             ,ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt
       FROM store_sales JOIN item ON i_item_sk=ss_item_sk
                        JOIN date_dim ON d_date_sk=ss_sold_date_sk
                        LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number 
                                                AND ss_item_sk=sr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt
             ,ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt
       FROM web_sales JOIN item ON i_item_sk=ws_item_sk
                      JOIN date_dim ON d_date_sk=ws_sold_date_sk
                      LEFT JOIN web_returns ON (ws_order_number=wr_order_number 
                                            AND ws_item_sk=wr_item_sk)
       WHERE i_category='Sports') sales_detail
 GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id)
 SELECT  prev_yr.d_year AS prev_year
                          ,curr_yr.d_year AS year
                          ,curr_yr.i_brand_id
                          ,curr_yr.i_class_id
                          ,curr_yr.i_category_id
                          ,curr_yr.i_manufact_id
                          ,prev_yr.sales_cnt AS prev_yr_cnt
                          ,curr_yr.sales_cnt AS curr_yr_cnt
                          ,curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff
                          ,curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
 FROM all_sales curr_yr, all_sales prev_yr
 WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
   AND curr_yr.i_class_id=prev_yr.i_class_id
   AND curr_yr.i_category_id=prev_yr.i_category_id
   AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
   AND curr_yr.d_year=2002
   AND prev_yr.d_year=2002-1
   AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9
 ORDER BY sales_cnt_diff
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
WITH all_sales AS (
 SELECT d_year
       ,i_brand_id
       ,i_class_id
       ,i_category_id
       ,i_manufact_id
       ,SUM(sales_cnt) AS sales_cnt
       ,SUM(sales_amt) AS sales_amt
 FROM (SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt
             ,cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt
       FROM catalog_sales JOIN item ON i_item_sk=cs_item_sk
                          JOIN date_dim ON d_date_sk=cs_sold_date_sk
                          LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number 
                                                    AND cs_item_sk=cr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt
             ,ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt
       FROM store_sales JOIN item ON i_item_sk=ss_item_sk
                        JOIN date_dim ON d_date_sk=ss_sold_date_sk
                        LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number 
                                                AND ss_item_sk=sr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt
             ,ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt
       FROM web_sales JOIN item ON i_item_sk=ws_item_sk
                      JOIN date_dim ON d_date_sk=ws_sold_date_sk
                      LEFT JOIN web_returns ON (ws_order_number=wr_order_number 
                                            AND ws_item_sk=wr_item_sk)
       WHERE i_category='Sports') sales_detail
 GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id)
 SELECT  prev_yr.d_year AS prev_year
                          ,curr_yr.d_year AS year
                          ,curr_yr.i_brand_id
                          ,curr_yr.i_class_id
                          ,curr_yr.i_category_id
                          ,curr_yr.i_manufact_id
                          ,prev_yr.sales_cnt AS prev_yr_cnt
                          ,curr_yr.sales_cnt AS curr_yr_cnt
                          ,curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff
                          ,curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
 FROM all_sales curr_yr, all_sales prev_yr
 WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
   AND curr_yr.i_class_id=prev_yr.i_class_id
   AND curr_yr.i_category_id=prev_yr.i_category_id
   AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
   AND curr_yr.d_year=2002
   AND prev_yr.d_year=2002-1
   AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9
 ORDER BY sales_cnt_diff
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 19 (BROADCAST_EDGE), Reducer 28 (BROADCAST_EDGE)
<<<<<<< HEAD
Map 39 <- Reducer 23 (BROADCAST_EDGE), Reducer 32 (BROADCAST_EDGE)
Map 41 <- Reducer 27 (BROADCAST_EDGE), Reducer 36 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 1 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 12 <- Map 37 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Map 38 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE), Union 14 (CONTAINS)
=======
Map 37 <- Reducer 23 (BROADCAST_EDGE), Reducer 28 (BROADCAST_EDGE)
Map 39 <- Reducer 27 (BROADCAST_EDGE), Reducer 28 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 1 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 12 <- Map 35 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Map 36 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE), Union 14 (CONTAINS)
>>>>>>> HIVE-24241-downstream-merge
Reducer 15 <- Union 14 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 17 <- Union 16 (SIMPLE_EDGE)
Reducer 19 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
<<<<<<< HEAD
Reducer 20 <- Map 18 (SIMPLE_EDGE), Map 39 (SIMPLE_EDGE)
Reducer 21 <- Map 37 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 40 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 23 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 18 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 25 <- Map 37 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Map 42 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 27 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 18 (SIMPLE_EDGE), Map 39 (SIMPLE_EDGE)
Reducer 3 <- Map 37 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 37 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Map 40 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE), Union 14 (CONTAINS)
Reducer 32 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 18 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 34 <- Map 37 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 35 <- Map 42 (SIMPLE_EDGE), Reducer 34 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 36 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Map 38 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
=======
Reducer 20 <- Map 18 (SIMPLE_EDGE), Map 37 (SIMPLE_EDGE)
Reducer 21 <- Map 35 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 38 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 23 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 18 (SIMPLE_EDGE), Map 39 (SIMPLE_EDGE)
Reducer 25 <- Map 35 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Map 40 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 27 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 18 (SIMPLE_EDGE), Map 37 (SIMPLE_EDGE)
Reducer 3 <- Map 35 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 35 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Map 38 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE), Union 14 (CONTAINS)
Reducer 32 <- Map 18 (SIMPLE_EDGE), Map 39 (SIMPLE_EDGE)
Reducer 33 <- Map 35 (SIMPLE_EDGE), Reducer 32 (SIMPLE_EDGE)
Reducer 34 <- Map 40 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 4 <- Map 36 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
>>>>>>> HIVE-24241-downstream-merge
Reducer 6 <- Union 5 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 17 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 10 vectorized
<<<<<<< HEAD
      File Output Operator [FS_677]
        Select Operator [SEL_676] (rows=100 width=160)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
          Limit [LIM_675] (rows=100 width=152)
            Number of rows:100
            Select Operator [SEL_674] (rows=3422897230256 width=151)
=======
      File Output Operator [FS_669]
        Select Operator [SEL_668] (rows=100 width=160)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
          Limit [LIM_667] (rows=100 width=152)
            Number of rows:100
            Select Operator [SEL_666] (rows=3422897230256 width=151)
>>>>>>> HIVE-24241-downstream-merge
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
            <-Reducer 9 [SIMPLE_EDGE]
              SHUFFLE [RS_169]
                Select Operator [SEL_168] (rows=3422897230256 width=151)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                  Top N Key Operator [TNK_258] (rows=3422897230256 width=255)
                    keys:(_col10 - _col4),top n:100
                    Filter Operator [FIL_167] (rows=3422897230256 width=255)
                      predicate:((CAST( _col10 AS decimal(17,2)) / CAST( _col4 AS decimal(17,2))) < 0.9)
                      Merge Join Operator [MERGEJOIN_573] (rows=10268691690770 width=255)
<<<<<<< HEAD
                        Conds:RS_670._col0, _col1, _col2, _col3=RS_673._col0, _col1, _col2, _col3(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col10","_col11"]
                      <-Reducer 17 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_673]
                          PartitionCols:_col0, _col1, _col2, _col3
                          Group By Operator [GBY_672] (rows=84235776 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_671] (rows=736356923 width=131)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                            <-Union 16 [SIMPLE_EDGE]
                              <-Reducer 15 [CONTAINS] vectorized
                                Reduce Output Operator [RS_680]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_679] (rows=736356923 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Group By Operator [GBY_678] (rows=621178955 width=131)
=======
                        Conds:RS_662._col0, _col1, _col2, _col3=RS_665._col0, _col1, _col2, _col3(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col10","_col11"]
                      <-Reducer 17 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_665]
                          PartitionCols:_col0, _col1, _col2, _col3
                          Group By Operator [GBY_664] (rows=84235776 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_663] (rows=736356923 width=131)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                            <-Union 16 [SIMPLE_EDGE]
                              <-Reducer 15 [CONTAINS] vectorized
                                Reduce Output Operator [RS_672]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_671] (rows=736356923 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Group By Operator [GBY_670] (rows=621178955 width=131)
>>>>>>> HIVE-24241-downstream-merge
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                                    <-Union 14 [SIMPLE_EDGE]
                                      <-Reducer 13 [CONTAINS]
                                        Reduce Output Operator [RS_587]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                          Group By Operator [GBY_586] (rows=621178955 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                            Select Operator [SEL_584] (rows=170474971 width=131)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Merge Join Operator [MERGEJOIN_583] (rows=170474971 width=234)
<<<<<<< HEAD
                                                Conds:RS_99._col1, _col2=RS_664._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                              <-Map 38 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_664]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_662] (rows=28798881 width=121)
=======
                                                Conds:RS_99._col1, _col2=RS_656._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                              <-Map 36 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_656]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_654] (rows=28798881 width=121)
>>>>>>> HIVE-24241-downstream-merge
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    TableScan [TS_9] (rows=28798881 width=121)
                                                      default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_return_quantity","cr_return_amount"]
                                              <-Reducer 12 [SIMPLE_EDGE]
                                                SHUFFLE [RS_99]
                                                  PartitionCols:_col1, _col2
                                                  Merge Join Operator [MERGEJOIN_565] (rows=96821196 width=138)
<<<<<<< HEAD
                                                    Conds:RS_96._col1=RS_659._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                  <-Map 37 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_659]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_655] (rows=45745 width=19)
                                                        Output:["_col0","_col1","_col2","_col3","_col4"]
                                                        Filter Operator [FIL_654] (rows=45745 width=109)
=======
                                                    Conds:RS_96._col1=RS_651._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                  <-Map 35 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_651]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_647] (rows=45745 width=19)
                                                        Output:["_col0","_col1","_col2","_col3","_col4"]
                                                        Filter Operator [FIL_646] (rows=45745 width=109)
>>>>>>> HIVE-24241-downstream-merge
                                                          predicate:((i_category = 'Sports') and i_manufact_id is not null and i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                          TableScan [TS_6] (rows=462000 width=109)
                                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id","i_category","i_manufact_id"]
                                                  <-Reducer 11 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_96]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_564] (rows=101592102 width=122)
<<<<<<< HEAD
                                                        Conds:RS_653._col0=RS_626._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                      <-Map 18 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_626]
=======
                                                        Conds:RS_645._col0=RS_622._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                      <-Map 18 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_622]
>>>>>>> HIVE-24241-downstream-merge
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_617] (rows=652 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_613] (rows=652 width=8)
                                                              predicate:(d_year = 2002)
                                                              TableScan [TS_3] (rows=73049 width=8)
                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                      <-Map 1 [SIMPLE_EDGE] vectorized
<<<<<<< HEAD
                                                        SHUFFLE [RS_653]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_651] (rows=286549727 width=127)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_649] (rows=286549727 width=127)
=======
                                                        SHUFFLE [RS_645]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_643] (rows=286549727 width=127)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_641] (rows=286549727 width=127)
>>>>>>> HIVE-24241-downstream-merge
                                                              predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_94_date_dim_d_date_sk_min) AND DynamicValue(RS_94_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_94_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_0] (rows=287989836 width=127)
                                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_order_number","cs_quantity","cs_ext_sales_price"]
                                                              <-Reducer 28 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_637]
                                                                  Group By Operator [GBY_636] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_633]
                                                                      Group By Operator [GBY_629] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_623] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_615]
                                                              <-Reducer 19 [BROADCAST_EDGE] vectorized
<<<<<<< HEAD
                                                                BROADCAST [RS_645]
                                                                  Group By Operator [GBY_644] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_638]
                                                                      Group By Operator [GBY_632] (rows=1 width=12)
=======
                                                                BROADCAST [RS_635]
                                                                  Group By Operator [GBY_634] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_630]
                                                                      Group By Operator [GBY_626] (rows=1 width=12)
>>>>>>> HIVE-24241-downstream-merge
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_621] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                          Select Operator [SEL_616] (rows=652 width=4)
                                                                            Output:["_col0"]
                                                                            Filter Operator [FIL_612] (rows=652 width=8)
                                                                              predicate:(d_year = 2001)
                                                                               Please refer to the previous TableScan [TS_3]
<<<<<<< HEAD
                                                              <-Reducer 28 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_647]
                                                                  Group By Operator [GBY_646] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_641]
                                                                      Group By Operator [GBY_635] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_627] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_617]
=======
>>>>>>> HIVE-24241-downstream-merge
                                      <-Reducer 31 [CONTAINS]
                                        Reduce Output Operator [RS_606]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                          Group By Operator [GBY_605] (rows=621178955 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                            Select Operator [SEL_603] (rows=450703984 width=131)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Merge Join Operator [MERGEJOIN_602] (rows=450703984 width=204)
<<<<<<< HEAD
                                                Conds:RS_120._col1, _col2=RS_693._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                              <-Map 40 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_693]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_691] (rows=57591150 width=119)
=======
                                                Conds:RS_120._col1, _col2=RS_683._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                              <-Map 38 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_683]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_681] (rows=57591150 width=119)
>>>>>>> HIVE-24241-downstream-merge
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    TableScan [TS_30] (rows=57591150 width=119)
                                                      default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number","sr_return_quantity","sr_return_amt"]
                                              <-Reducer 30 [SIMPLE_EDGE]
                                                SHUFFLE [RS_120]
                                                  PartitionCols:_col1, _col2
                                                  Merge Join Operator [MERGEJOIN_568] (rows=187186493 width=124)
<<<<<<< HEAD
                                                    Conds:RS_117._col1=RS_660._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                  <-Map 37 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_660]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_655]
=======
                                                    Conds:RS_117._col1=RS_652._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                  <-Map 35 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_652]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_647]
>>>>>>> HIVE-24241-downstream-merge
                                                  <-Reducer 29 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_117]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_567] (rows=196410188 width=109)
<<<<<<< HEAD
                                                        Conds:RS_690._col0=RS_628._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                      <-Map 18 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_628]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_618] (rows=652 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_614] (rows=652 width=8)
                                                              predicate:(d_year = 2002)
                                                               Please refer to the previous TableScan [TS_3]
                                                      <-Map 39 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_690]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_688] (rows=550076554 width=122)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_686] (rows=550076554 width=122)
                                                              predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_115_date_dim_d_date_sk_min) AND DynamicValue(RS_115_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_115_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_21] (rows=575995635 width=122)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_ticket_number","ss_quantity","ss_ext_sales_price"]
                                                              <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_682]
                                                                  Group By Operator [GBY_681] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_639]
                                                                      Group By Operator [GBY_633] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_623] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_616]
                                                              <-Reducer 32 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_684]
                                                                  Group By Operator [GBY_683] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_642]
                                                                      Group By Operator [GBY_636] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_629] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_618]
                              <-Reducer 35 [CONTAINS]
=======
                                                        Conds:RS_680._col0=RS_624._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                      <-Map 18 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_624]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_615]
                                                      <-Map 37 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_680]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_678] (rows=550076554 width=122)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_676] (rows=550076554 width=122)
                                                              predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_115_date_dim_d_date_sk_min) AND DynamicValue(RS_115_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_115_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_21] (rows=575995635 width=122)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_ticket_number","ss_quantity","ss_ext_sales_price"]
                                                              <-Reducer 28 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_638]
                                                                   Please refer to the previous Group By Operator [GBY_636]
                                                              <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_674]
                                                                  Group By Operator [GBY_673] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_631]
                                                                      Group By Operator [GBY_627] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_619] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_614]
                              <-Reducer 34 [CONTAINS]
>>>>>>> HIVE-24241-downstream-merge
                                Reduce Output Operator [RS_611]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_610] (rows=736356923 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Select Operator [SEL_608] (rows=115177968 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                      Merge Join Operator [MERGEJOIN_607] (rows=115177968 width=220)
<<<<<<< HEAD
                                        Conds:RS_148._col1, _col2=RS_706._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                      <-Map 42 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_706]
                                          PartitionCols:_col0, _col1
                                          Select Operator [SEL_704] (rows=14398467 width=118)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            TableScan [TS_58] (rows=14398467 width=118)
                                              default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_item_sk","wr_order_number","wr_return_quantity","wr_return_amt"]
                                      <-Reducer 34 [SIMPLE_EDGE]
                                        SHUFFLE [RS_148]
                                          PartitionCols:_col1, _col2
                                          Merge Join Operator [MERGEJOIN_571] (rows=48990732 width=139)
                                            Conds:RS_145._col1=RS_661._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                          <-Map 37 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_661]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_655]
                                          <-Reducer 33 [SIMPLE_EDGE]
                                            SHUFFLE [RS_145]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_570] (rows=51404771 width=123)
                                                Conds:RS_703._col0=RS_630._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                              <-Map 18 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_630]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_619] (rows=652 width=4)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_615] (rows=652 width=8)
                                                      predicate:(d_year = 2002)
                                                       Please refer to the previous TableScan [TS_3]
                                              <-Map 41 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_703]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_701] (rows=143966864 width=127)
                                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                                    Filter Operator [FIL_699] (rows=143966864 width=127)
                                                      predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_143_date_dim_d_date_sk_min) AND DynamicValue(RS_143_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_143_date_dim_d_date_sk_bloom_filter)))
                                                      TableScan [TS_49] (rows=144002668 width=127)
                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_order_number","ws_quantity","ws_ext_sales_price"]
                                                      <-Reducer 27 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_695]
                                                          Group By Operator [GBY_694] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_640]
                                                              Group By Operator [GBY_634] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_625] (rows=652 width=4)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_616]
                                                      <-Reducer 36 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_697]
                                                          Group By Operator [GBY_696] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_643]
                                                              Group By Operator [GBY_637] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_631] (rows=652 width=4)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_619]
                      <-Reducer 8 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_670]
                          PartitionCols:_col0, _col1, _col2, _col3
                          Group By Operator [GBY_669] (rows=84235776 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_668] (rows=736356923 width=131)
=======
                                        Conds:RS_148._col1, _col2=RS_694._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                      <-Map 40 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_694]
                                          PartitionCols:_col0, _col1
                                          Select Operator [SEL_692] (rows=14398467 width=118)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            TableScan [TS_58] (rows=14398467 width=118)
                                              default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_item_sk","wr_order_number","wr_return_quantity","wr_return_amt"]
                                      <-Reducer 33 [SIMPLE_EDGE]
                                        SHUFFLE [RS_148]
                                          PartitionCols:_col1, _col2
                                          Merge Join Operator [MERGEJOIN_571] (rows=48990732 width=139)
                                            Conds:RS_145._col1=RS_653._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                          <-Map 35 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_653]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_647]
                                          <-Reducer 32 [SIMPLE_EDGE]
                                            SHUFFLE [RS_145]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_570] (rows=51404771 width=123)
                                                Conds:RS_691._col0=RS_625._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                              <-Map 18 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_625]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_615]
                                              <-Map 39 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_691]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_689] (rows=143966864 width=127)
                                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                                    Filter Operator [FIL_687] (rows=143966864 width=127)
                                                      predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_143_date_dim_d_date_sk_min) AND DynamicValue(RS_143_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_143_date_dim_d_date_sk_bloom_filter)))
                                                      TableScan [TS_49] (rows=144002668 width=127)
                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_order_number","ws_quantity","ws_ext_sales_price"]
                                                      <-Reducer 28 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_639]
                                                           Please refer to the previous Group By Operator [GBY_636]
                                                      <-Reducer 27 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_685]
                                                          Group By Operator [GBY_684] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_632]
                                                              Group By Operator [GBY_628] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_621] (rows=652 width=4)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_614]
                      <-Reducer 8 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_662]
                          PartitionCols:_col0, _col1, _col2, _col3
                          Group By Operator [GBY_661] (rows=84235776 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_660] (rows=736356923 width=131)
>>>>>>> HIVE-24241-downstream-merge
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                            <-Union 7 [SIMPLE_EDGE]
                              <-Reducer 26 [CONTAINS]
                                Reduce Output Operator [RS_601]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_600] (rows=736356923 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Select Operator [SEL_598] (rows=115177968 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                      Merge Join Operator [MERGEJOIN_597] (rows=115177968 width=220)
<<<<<<< HEAD
                                        Conds:RS_66._col1, _col2=RS_705._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                      <-Map 42 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_705]
                                          PartitionCols:_col0, _col1
                                           Please refer to the previous Select Operator [SEL_704]
=======
                                        Conds:RS_66._col1, _col2=RS_693._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                      <-Map 40 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_693]
                                          PartitionCols:_col0, _col1
                                           Please refer to the previous Select Operator [SEL_692]
>>>>>>> HIVE-24241-downstream-merge
                                      <-Reducer 25 [SIMPLE_EDGE]
                                        SHUFFLE [RS_66]
                                          PartitionCols:_col1, _col2
                                          Merge Join Operator [MERGEJOIN_562] (rows=48990732 width=139)
<<<<<<< HEAD
                                            Conds:RS_63._col1=RS_658._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                          <-Map 37 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_658]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_655]
=======
                                            Conds:RS_63._col1=RS_650._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                          <-Map 35 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_650]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_647]
>>>>>>> HIVE-24241-downstream-merge
                                          <-Reducer 24 [SIMPLE_EDGE]
                                            SHUFFLE [RS_63]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_561] (rows=51404771 width=123)
<<<<<<< HEAD
                                                Conds:RS_702._col0=RS_624._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                              <-Map 18 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_624]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_616]
                                              <-Map 41 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_702]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_700] (rows=143966864 width=127)
                                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                                    Filter Operator [FIL_698] (rows=143966864 width=127)
                                                      predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_61_date_dim_d_date_sk_min) AND DynamicValue(RS_61_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_61_date_dim_d_date_sk_bloom_filter)))
                                                       Please refer to the previous TableScan [TS_49]
                              <-Reducer 6 [CONTAINS] vectorized
                                Reduce Output Operator [RS_667]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_666] (rows=736356923 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Group By Operator [GBY_665] (rows=621178955 width=131)
=======
                                                Conds:RS_690._col0=RS_620._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                              <-Map 18 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_620]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_614]
                                              <-Map 39 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_690]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_688] (rows=143966864 width=127)
                                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                                    Filter Operator [FIL_686] (rows=143966864 width=127)
                                                      predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_61_date_dim_d_date_sk_min) AND DynamicValue(RS_61_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_61_date_dim_d_date_sk_bloom_filter)))
                                                       Please refer to the previous TableScan [TS_49]
                              <-Reducer 6 [CONTAINS] vectorized
                                Reduce Output Operator [RS_659]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_658] (rows=736356923 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Group By Operator [GBY_657] (rows=621178955 width=131)
>>>>>>> HIVE-24241-downstream-merge
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                                    <-Union 5 [SIMPLE_EDGE]
                                      <-Reducer 22 [CONTAINS]
                                        Reduce Output Operator [RS_596]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                          Group By Operator [GBY_595] (rows=621178955 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                            Select Operator [SEL_593] (rows=450703984 width=131)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Merge Join Operator [MERGEJOIN_592] (rows=450703984 width=204)
<<<<<<< HEAD
                                                Conds:RS_38._col1, _col2=RS_692._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                              <-Map 40 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_692]
                                                  PartitionCols:_col0, _col1
                                                   Please refer to the previous Select Operator [SEL_691]
=======
                                                Conds:RS_38._col1, _col2=RS_682._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                              <-Map 38 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_682]
                                                  PartitionCols:_col0, _col1
                                                   Please refer to the previous Select Operator [SEL_681]
>>>>>>> HIVE-24241-downstream-merge
                                              <-Reducer 21 [SIMPLE_EDGE]
                                                SHUFFLE [RS_38]
                                                  PartitionCols:_col1, _col2
                                                  Merge Join Operator [MERGEJOIN_559] (rows=187186493 width=124)
<<<<<<< HEAD
                                                    Conds:RS_35._col1=RS_657._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                  <-Map 37 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_657]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_655]
=======
                                                    Conds:RS_35._col1=RS_649._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                  <-Map 35 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_649]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_647]
>>>>>>> HIVE-24241-downstream-merge
                                                  <-Reducer 20 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_35]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_558] (rows=196410188 width=109)
<<<<<<< HEAD
                                                        Conds:RS_689._col0=RS_622._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
=======
                                                        Conds:RS_679._col0=RS_618._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
>>>>>>> HIVE-24241-downstream-merge
                                                      <-Map 18 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_622]
                                                          PartitionCols:_col0
<<<<<<< HEAD
                                                           Please refer to the previous Select Operator [SEL_616]
                                                      <-Map 39 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_689]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_687] (rows=550076554 width=122)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_685] (rows=550076554 width=122)
=======
                                                           Please refer to the previous Select Operator [SEL_614]
                                                      <-Map 37 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_679]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_677] (rows=550076554 width=122)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_675] (rows=550076554 width=122)
>>>>>>> HIVE-24241-downstream-merge
                                                              predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_33_date_dim_d_date_sk_min) AND DynamicValue(RS_33_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_33_date_dim_d_date_sk_bloom_filter)))
                                                               Please refer to the previous TableScan [TS_21]
                                      <-Reducer 4 [CONTAINS]
                                        Reduce Output Operator [RS_578]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                          Group By Operator [GBY_577] (rows=621178955 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                            Select Operator [SEL_575] (rows=170474971 width=131)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Merge Join Operator [MERGEJOIN_574] (rows=170474971 width=234)
<<<<<<< HEAD
                                                Conds:RS_17._col1, _col2=RS_663._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                              <-Map 38 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_663]
                                                  PartitionCols:_col0, _col1
                                                   Please refer to the previous Select Operator [SEL_662]
=======
                                                Conds:RS_17._col1, _col2=RS_655._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                              <-Map 36 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_655]
                                                  PartitionCols:_col0, _col1
                                                   Please refer to the previous Select Operator [SEL_654]
>>>>>>> HIVE-24241-downstream-merge
                                              <-Reducer 3 [SIMPLE_EDGE]
                                                SHUFFLE [RS_17]
                                                  PartitionCols:_col1, _col2
                                                  Merge Join Operator [MERGEJOIN_556] (rows=96821196 width=138)
<<<<<<< HEAD
                                                    Conds:RS_14._col1=RS_656._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                  <-Map 37 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_656]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_655]
=======
                                                    Conds:RS_14._col1=RS_648._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                  <-Map 35 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_648]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_647]
>>>>>>> HIVE-24241-downstream-merge
                                                  <-Reducer 2 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_14]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_555] (rows=101592102 width=122)
<<<<<<< HEAD
                                                        Conds:RS_652._col0=RS_620._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
=======
                                                        Conds:RS_644._col0=RS_616._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
>>>>>>> HIVE-24241-downstream-merge
                                                      <-Map 18 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_620]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_616]
                                                      <-Map 1 [SIMPLE_EDGE] vectorized
<<<<<<< HEAD
                                                        SHUFFLE [RS_652]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_650] (rows=286549727 width=127)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_648] (rows=286549727 width=127)
=======
                                                        SHUFFLE [RS_644]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_642] (rows=286549727 width=127)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_640] (rows=286549727 width=127)
>>>>>>> HIVE-24241-downstream-merge
                                                              predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_12_date_dim_d_date_sk_min) AND DynamicValue(RS_12_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_12_date_dim_d_date_sk_bloom_filter)))
                                                               Please refer to the previous TableScan [TS_0]

