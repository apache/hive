PREHOOK: query: explain
WITH all_sales AS (
 SELECT d_year
       ,i_brand_id
       ,i_class_id
       ,i_category_id
       ,i_manufact_id
       ,SUM(sales_cnt) AS sales_cnt
       ,SUM(sales_amt) AS sales_amt
 FROM (SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt
             ,cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt
       FROM catalog_sales JOIN item ON i_item_sk=cs_item_sk
                          JOIN date_dim ON d_date_sk=cs_sold_date_sk
                          LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number 
                                                    AND cs_item_sk=cr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt
             ,ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt
       FROM store_sales JOIN item ON i_item_sk=ss_item_sk
                        JOIN date_dim ON d_date_sk=ss_sold_date_sk
                        LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number 
                                                AND ss_item_sk=sr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt
             ,ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt
       FROM web_sales JOIN item ON i_item_sk=ws_item_sk
                      JOIN date_dim ON d_date_sk=ws_sold_date_sk
                      LEFT JOIN web_returns ON (ws_order_number=wr_order_number 
                                            AND ws_item_sk=wr_item_sk)
       WHERE i_category='Sports') sales_detail
 GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id)
 SELECT  prev_yr.d_year AS prev_year
                          ,curr_yr.d_year AS year
                          ,curr_yr.i_brand_id
                          ,curr_yr.i_class_id
                          ,curr_yr.i_category_id
                          ,curr_yr.i_manufact_id
                          ,prev_yr.sales_cnt AS prev_yr_cnt
                          ,curr_yr.sales_cnt AS curr_yr_cnt
                          ,curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff
                          ,curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
 FROM all_sales curr_yr, all_sales prev_yr
 WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
   AND curr_yr.i_class_id=prev_yr.i_class_id
   AND curr_yr.i_category_id=prev_yr.i_category_id
   AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
   AND curr_yr.d_year=2002
   AND prev_yr.d_year=2002-1
   AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9
 ORDER BY sales_cnt_diff
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
WITH all_sales AS (
 SELECT d_year
       ,i_brand_id
       ,i_class_id
       ,i_category_id
       ,i_manufact_id
       ,SUM(sales_cnt) AS sales_cnt
       ,SUM(sales_amt) AS sales_amt
 FROM (SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt
             ,cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt
       FROM catalog_sales JOIN item ON i_item_sk=cs_item_sk
                          JOIN date_dim ON d_date_sk=cs_sold_date_sk
                          LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number 
                                                    AND cs_item_sk=cr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt
             ,ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt
       FROM store_sales JOIN item ON i_item_sk=ss_item_sk
                        JOIN date_dim ON d_date_sk=ss_sold_date_sk
                        LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number 
                                                AND ss_item_sk=sr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt
             ,ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt
       FROM web_sales JOIN item ON i_item_sk=ws_item_sk
                      JOIN date_dim ON d_date_sk=ws_sold_date_sk
                      LEFT JOIN web_returns ON (ws_order_number=wr_order_number 
                                            AND ws_item_sk=wr_item_sk)
       WHERE i_category='Sports') sales_detail
 GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id)
 SELECT  prev_yr.d_year AS prev_year
                          ,curr_yr.d_year AS year
                          ,curr_yr.i_brand_id
                          ,curr_yr.i_class_id
                          ,curr_yr.i_category_id
                          ,curr_yr.i_manufact_id
                          ,prev_yr.sales_cnt AS prev_yr_cnt
                          ,curr_yr.sales_cnt AS curr_yr_cnt
                          ,curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff
                          ,curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
 FROM all_sales curr_yr, all_sales prev_yr
 WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
   AND curr_yr.i_class_id=prev_yr.i_class_id
   AND curr_yr.i_category_id=prev_yr.i_category_id
   AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
   AND curr_yr.d_year=2002
   AND prev_yr.d_year=2002-1
   AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9
 ORDER BY sales_cnt_diff
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 12 (BROADCAST_EDGE)
Map 39 <- Reducer 16 (BROADCAST_EDGE)
Map 41 <- Reducer 20 (BROADCAST_EDGE)
Map 43 <- Reducer 28 (BROADCAST_EDGE)
Map 44 <- Reducer 32 (BROADCAST_EDGE)
Map 45 <- Reducer 36 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 12 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Map 11 (SIMPLE_EDGE), Map 39 (SIMPLE_EDGE)
Reducer 14 <- Map 37 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 40 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 16 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 11 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 18 <- Map 37 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Map 42 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 11 (SIMPLE_EDGE)
Reducer 20 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Map 11 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE)
Reducer 22 <- Map 37 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 38 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE), Union 24 (CONTAINS)
Reducer 25 <- Union 24 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 27 <- Union 26 (SIMPLE_EDGE)
Reducer 28 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 11 (SIMPLE_EDGE), Map 44 (SIMPLE_EDGE)
Reducer 3 <- Map 37 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 37 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Map 40 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE), Union 24 (CONTAINS)
Reducer 32 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 11 (SIMPLE_EDGE), Map 45 (SIMPLE_EDGE)
Reducer 34 <- Map 37 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 35 <- Map 42 (SIMPLE_EDGE), Reducer 34 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 36 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Map 38 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 27 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 10 vectorized
      File Output Operator [FS_612]
        Select Operator [SEL_611] (rows=100 width=160)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
          Limit [LIM_610] (rows=100 width=152)
            Number of rows:100
            Select Operator [SEL_609] (rows=3422897230256 width=151)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
            <-Reducer 9 [SIMPLE_EDGE]
              SHUFFLE [RS_169]
                Select Operator [SEL_168] (rows=3422897230256 width=151)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                  Top N Key Operator [TNK_258] (rows=3422897230256 width=255)
                    keys:(_col10 - _col4),top n:100
                    Filter Operator [FIL_167] (rows=3422897230256 width=255)
                      predicate:((CAST( _col10 AS decimal(17,2)) / CAST( _col4 AS decimal(17,2))) < 0.9)
                      Merge Join Operator [MERGEJOIN_513] (rows=10268691690770 width=255)
                        Conds:RS_605._col0, _col1, _col2, _col3=RS_608._col0, _col1, _col2, _col3(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col10","_col11"]
                      <-Reducer 27 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_608]
                          PartitionCols:_col0, _col1, _col2, _col3
                          Group By Operator [GBY_607] (rows=84235776 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_606] (rows=736356923 width=131)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                            <-Union 26 [SIMPLE_EDGE]
                              <-Reducer 25 [CONTAINS] vectorized
                                Reduce Output Operator [RS_636]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_635] (rows=736356923 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Group By Operator [GBY_634] (rows=621178955 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                                    <-Union 24 [SIMPLE_EDGE]
                                      <-Reducer 23 [CONTAINS]
                                        Reduce Output Operator [RS_537]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                          Group By Operator [GBY_536] (rows=621178955 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                            Select Operator [SEL_534] (rows=170474971 width=131)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Merge Join Operator [MERGEJOIN_533] (rows=170474971 width=234)
                                                Conds:RS_99._col1, _col2=RS_599._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                              <-Map 38 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_599]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_597] (rows=28798881 width=121)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    TableScan [TS_9] (rows=28798881 width=121)
                                                      default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_return_quantity","cr_return_amount"]
                                              <-Reducer 22 [SIMPLE_EDGE]
                                                SHUFFLE [RS_99]
                                                  PartitionCols:_col1, _col2
                                                  Merge Join Operator [MERGEJOIN_505] (rows=96821196 width=138)
                                                    Conds:RS_96._col1=RS_594._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                  <-Map 37 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_594]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_590] (rows=45745 width=19)
                                                        Output:["_col0","_col1","_col2","_col3","_col4"]
                                                        Filter Operator [FIL_589] (rows=45745 width=109)
                                                          predicate:((i_category = 'Sports') and i_manufact_id is not null and i_category_id is not null and i_brand_id is not null and i_class_id is not null)
                                                          TableScan [TS_6] (rows=462000 width=109)
                                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id","i_category","i_manufact_id"]
                                                  <-Reducer 21 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_96]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_504] (rows=101592102 width=122)
                                                        Conds:RS_633._col0=RS_566._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                      <-Map 11 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_566]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_557] (rows=652 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_553] (rows=652 width=8)
                                                              predicate:(d_year = 2002)
                                                              TableScan [TS_3] (rows=73049 width=8)
                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                      <-Map 43 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_633]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_632] (rows=286549727 width=127)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_631] (rows=286549727 width=127)
                                                              predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_94_date_dim_d_date_sk_min) AND DynamicValue(RS_94_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_94_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_82] (rows=287989836 width=127)
                                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_order_number","cs_quantity","cs_ext_sales_price"]
                                                              <-Reducer 28 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_630]
                                                                  Group By Operator [GBY_629] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_581]
                                                                      Group By Operator [GBY_575] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_567] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_557]
                                      <-Reducer 31 [CONTAINS]
                                        Reduce Output Operator [RS_546]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                          Group By Operator [GBY_545] (rows=621178955 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                            Select Operator [SEL_543] (rows=450703984 width=131)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Merge Join Operator [MERGEJOIN_542] (rows=450703984 width=204)
                                                Conds:RS_120._col1, _col2=RS_620._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                              <-Map 40 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_620]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_618] (rows=57591150 width=119)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    TableScan [TS_30] (rows=57591150 width=119)
                                                      default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number","sr_return_quantity","sr_return_amt"]
                                              <-Reducer 30 [SIMPLE_EDGE]
                                                SHUFFLE [RS_120]
                                                  PartitionCols:_col1, _col2
                                                  Merge Join Operator [MERGEJOIN_508] (rows=187186493 width=124)
                                                    Conds:RS_117._col1=RS_595._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                  <-Map 37 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_595]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_590]
                                                  <-Reducer 29 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_117]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_507] (rows=196410188 width=109)
                                                        Conds:RS_641._col0=RS_568._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                      <-Map 11 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_568]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_558] (rows=652 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_554] (rows=652 width=8)
                                                              predicate:(d_year = 2002)
                                                               Please refer to the previous TableScan [TS_3]
                                                      <-Map 44 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_641]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_640] (rows=550076554 width=122)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_639] (rows=550076554 width=122)
                                                              predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_115_date_dim_d_date_sk_min) AND DynamicValue(RS_115_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_115_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_103] (rows=575995635 width=122)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_ticket_number","ss_quantity","ss_ext_sales_price"]
                                                              <-Reducer 32 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_638]
                                                                  Group By Operator [GBY_637] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_582]
                                                                      Group By Operator [GBY_576] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_569] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_558]
                              <-Reducer 35 [CONTAINS]
                                Reduce Output Operator [RS_551]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_550] (rows=736356923 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Select Operator [SEL_548] (rows=115177968 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                      Merge Join Operator [MERGEJOIN_547] (rows=115177968 width=220)
                                        Conds:RS_148._col1, _col2=RS_628._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                      <-Map 42 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_628]
                                          PartitionCols:_col0, _col1
                                          Select Operator [SEL_626] (rows=14398467 width=118)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            TableScan [TS_58] (rows=14398467 width=118)
                                              default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_item_sk","wr_order_number","wr_return_quantity","wr_return_amt"]
                                      <-Reducer 34 [SIMPLE_EDGE]
                                        SHUFFLE [RS_148]
                                          PartitionCols:_col1, _col2
                                          Merge Join Operator [MERGEJOIN_511] (rows=48990732 width=139)
                                            Conds:RS_145._col1=RS_596._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                          <-Map 37 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_596]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_590]
                                          <-Reducer 33 [SIMPLE_EDGE]
                                            SHUFFLE [RS_145]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_510] (rows=51404771 width=123)
                                                Conds:RS_646._col0=RS_570._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                              <-Map 11 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_570]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_559] (rows=652 width=4)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_555] (rows=652 width=8)
                                                      predicate:(d_year = 2002)
                                                       Please refer to the previous TableScan [TS_3]
                                              <-Map 45 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_646]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_645] (rows=143966864 width=127)
                                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                                    Filter Operator [FIL_644] (rows=143966864 width=127)
                                                      predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_143_date_dim_d_date_sk_min) AND DynamicValue(RS_143_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_143_date_dim_d_date_sk_bloom_filter)))
                                                      TableScan [TS_131] (rows=144002668 width=127)
                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_order_number","ws_quantity","ws_ext_sales_price"]
                                                      <-Reducer 36 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_643]
                                                          Group By Operator [GBY_642] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_583]
                                                              Group By Operator [GBY_577] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_571] (rows=652 width=4)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_559]
                      <-Reducer 8 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_605]
                          PartitionCols:_col0, _col1, _col2, _col3
                          Group By Operator [GBY_604] (rows=84235776 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_603] (rows=736356923 width=131)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                            <-Union 7 [SIMPLE_EDGE]
                              <-Reducer 19 [CONTAINS]
                                Reduce Output Operator [RS_532]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_531] (rows=736356923 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Select Operator [SEL_529] (rows=115177968 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                      Merge Join Operator [MERGEJOIN_528] (rows=115177968 width=220)
                                        Conds:RS_66._col1, _col2=RS_627._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                      <-Map 42 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_627]
                                          PartitionCols:_col0, _col1
                                           Please refer to the previous Select Operator [SEL_626]
                                      <-Reducer 18 [SIMPLE_EDGE]
                                        SHUFFLE [RS_66]
                                          PartitionCols:_col1, _col2
                                          Merge Join Operator [MERGEJOIN_502] (rows=48990732 width=139)
                                            Conds:RS_63._col1=RS_593._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                          <-Map 37 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_593]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_590]
                                          <-Reducer 17 [SIMPLE_EDGE]
                                            SHUFFLE [RS_63]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_501] (rows=51404771 width=123)
                                                Conds:RS_625._col0=RS_564._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                              <-Map 11 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_564]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_556] (rows=652 width=4)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_552] (rows=652 width=8)
                                                      predicate:(d_year = 2001)
                                                       Please refer to the previous TableScan [TS_3]
                                              <-Map 41 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_625]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_624] (rows=143966864 width=127)
                                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                                    Filter Operator [FIL_623] (rows=143966864 width=127)
                                                      predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_61_date_dim_d_date_sk_min) AND DynamicValue(RS_61_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_61_date_dim_d_date_sk_bloom_filter)))
                                                      TableScan [TS_49] (rows=144002668 width=127)
                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_order_number","ws_quantity","ws_ext_sales_price"]
                                                      <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_622]
                                                          Group By Operator [GBY_621] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_580]
                                                              Group By Operator [GBY_574] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_565] (rows=652 width=4)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_556]
                              <-Reducer 6 [CONTAINS] vectorized
                                Reduce Output Operator [RS_602]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_601] (rows=736356923 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Group By Operator [GBY_600] (rows=621178955 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                                    <-Union 5 [SIMPLE_EDGE]
                                      <-Reducer 15 [CONTAINS]
                                        Reduce Output Operator [RS_527]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                          Group By Operator [GBY_526] (rows=621178955 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                            Select Operator [SEL_524] (rows=450703984 width=131)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Merge Join Operator [MERGEJOIN_523] (rows=450703984 width=204)
                                                Conds:RS_38._col1, _col2=RS_619._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                              <-Map 40 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_619]
                                                  PartitionCols:_col0, _col1
                                                   Please refer to the previous Select Operator [SEL_618]
                                              <-Reducer 14 [SIMPLE_EDGE]
                                                SHUFFLE [RS_38]
                                                  PartitionCols:_col1, _col2
                                                  Merge Join Operator [MERGEJOIN_499] (rows=187186493 width=124)
                                                    Conds:RS_35._col1=RS_592._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                  <-Map 37 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_592]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_590]
                                                  <-Reducer 13 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_35]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_498] (rows=196410188 width=109)
                                                        Conds:RS_617._col0=RS_562._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                      <-Map 11 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_562]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_556]
                                                      <-Map 39 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_617]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_616] (rows=550076554 width=122)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_615] (rows=550076554 width=122)
                                                              predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_33_date_dim_d_date_sk_min) AND DynamicValue(RS_33_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_33_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_21] (rows=575995635 width=122)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_ticket_number","ss_quantity","ss_ext_sales_price"]
                                                              <-Reducer 16 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_614]
                                                                  Group By Operator [GBY_613] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_579]
                                                                      Group By Operator [GBY_573] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_563] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_556]
                                      <-Reducer 4 [CONTAINS]
                                        Reduce Output Operator [RS_518]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                          Group By Operator [GBY_517] (rows=621178955 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                            Select Operator [SEL_515] (rows=170474971 width=131)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Merge Join Operator [MERGEJOIN_514] (rows=170474971 width=234)
                                                Conds:RS_17._col1, _col2=RS_598._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                              <-Map 38 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_598]
                                                  PartitionCols:_col0, _col1
                                                   Please refer to the previous Select Operator [SEL_597]
                                              <-Reducer 3 [SIMPLE_EDGE]
                                                SHUFFLE [RS_17]
                                                  PartitionCols:_col1, _col2
                                                  Merge Join Operator [MERGEJOIN_496] (rows=96821196 width=138)
                                                    Conds:RS_14._col1=RS_591._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                  <-Map 37 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_591]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_590]
                                                  <-Reducer 2 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_14]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_495] (rows=101592102 width=122)
                                                        Conds:RS_588._col0=RS_560._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                      <-Map 11 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_560]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_556]
                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_588]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_587] (rows=286549727 width=127)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_586] (rows=286549727 width=127)
                                                              predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_12_date_dim_d_date_sk_min) AND DynamicValue(RS_12_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_12_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_0] (rows=287989836 width=127)
                                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_order_number","cs_quantity","cs_ext_sales_price"]
                                                              <-Reducer 12 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_585]
                                                                  Group By Operator [GBY_584] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_578]
                                                                      Group By Operator [GBY_572] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_561] (rows=652 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_556]

