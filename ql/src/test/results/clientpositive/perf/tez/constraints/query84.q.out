PREHOOK: query: explain
select  c_customer_id as customer_id
       ,c_last_name || ', ' || c_first_name as customername
 from customer
     ,customer_address
     ,customer_demographics
     ,household_demographics
     ,income_band
     ,store_returns
 where ca_city	        =  'Hopewell'
   and c_current_addr_sk = ca_address_sk
   and ib_lower_bound   >=  32287
   and ib_upper_bound   <=  32287 + 50000
   and ib_income_band_sk = hd_income_band_sk
   and cd_demo_sk = c_current_cdemo_sk
   and hd_demo_sk = c_current_hdemo_sk
   and sr_cdemo_sk = cd_demo_sk
 order by c_customer_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@income_band
PREHOOK: Input: default@store_returns
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  c_customer_id as customer_id
       ,c_last_name || ', ' || c_first_name as customername
 from customer
     ,customer_address
     ,customer_demographics
     ,household_demographics
     ,income_band
     ,store_returns
 where ca_city	        =  'Hopewell'
   and c_current_addr_sk = ca_address_sk
   and ib_lower_bound   >=  32287
   and ib_upper_bound   <=  32287 + 50000
   and ib_income_band_sk = hd_income_band_sk
   and cd_demo_sk = c_current_cdemo_sk
   and hd_demo_sk = c_current_hdemo_sk
   and sr_cdemo_sk = cd_demo_sk
 order by c_customer_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@income_band
POSTHOOK: Input: default@store_returns
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 11 <- Map 10 (SIMPLE_EDGE), Map 12 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 4 <- Reducer 11 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 8 <- Map 7 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_139]
        Limit [LIM_138] (rows=100 width=384)
          Number of rows:100
          Select Operator [SEL_137] (rows=2645278 width=384)
            Output:["_col0","_col1"]
          <-Reducer 4 [SIMPLE_EDGE]
            SHUFFLE [RS_35]
              Select Operator [SEL_34] (rows=2645278 width=384)
                Output:["_col1","_col2"]
                Merge Join Operator [MERGEJOIN_119] (rows=2645278 width=284)
                  Conds:RS_31._col4=RS_32._col0(Inner),Output:["_col2","_col6"]
                <-Reducer 11 [SIMPLE_EDGE]
                  SHUFFLE [RS_32]
                    PartitionCols:_col0
                    Merge Join Operator [MERGEJOIN_117] (rows=2161 width=4)
                      Conds:RS_133._col1=RS_136._col0(Inner),Output:["_col0"]
                    <-Map 10 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_133]
                        PartitionCols:_col1
                        Select Operator [SEL_132] (rows=7200 width=8)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_131] (rows=7200 width=8)
                            predicate:hd_income_band_sk is not null
                            TableScan [TS_15] (rows=7200 width=8)
                              default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_income_band_sk"]
                    <-Map 12 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_136]
                        PartitionCols:_col0
                        Select Operator [SEL_135] (rows=6 width=4)
                          Output:["_col0"]
                          Filter Operator [FIL_134] (rows=6 width=12)
                            predicate:((ib_lower_bound >= 32287) and (ib_upper_bound <= 82287))
                            TableScan [TS_18] (rows=20 width=12)
                              default@income_band,income_band,Tbl:COMPLETE,Col:COMPLETE,Output:["ib_income_band_sk","ib_lower_bound","ib_upper_bound"]
                <-Reducer 3 [SIMPLE_EDGE]
                  SHUFFLE [RS_31]
                    PartitionCols:_col4
                    Merge Join Operator [MERGEJOIN_118] (rows=2645278 width=287)
                      Conds:RS_28._col1=RS_29._col1(Inner),Output:["_col2","_col4","_col6"]
                    <-Reducer 2 [SIMPLE_EDGE]
                      SHUFFLE [RS_28]
                        PartitionCols:_col1
                        Merge Join Operator [MERGEJOIN_115] (rows=56363634 width=4)
                          Conds:RS_122._col0=RS_124._col0(Inner),Output:["_col1"]
                        <-Map 1 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_122]
                            PartitionCols:_col0
                            Select Operator [SEL_121] (rows=55577698 width=3)
                              Output:["_col0"]
                              Filter Operator [FIL_120] (rows=55577698 width=3)
                                predicate:sr_cdemo_sk is not null
                                TableScan [TS_0] (rows=57591150 width=3)
                                  default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_cdemo_sk"]
                        <-Map 6 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_124]
                            PartitionCols:_col0
                            Select Operator [SEL_123] (rows=1861800 width=4)
                              Output:["_col0"]
                              TableScan [TS_3] (rows=1861800 width=4)
                                default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk"]
                    <-Reducer 8 [SIMPLE_EDGE]
                      SHUFFLE [RS_29]
                        PartitionCols:_col1
                        Merge Join Operator [MERGEJOIN_116] (rows=83148 width=284)
                          Conds:RS_127._col3=RS_130._col0(Inner),Output:["_col0","_col1","_col2","_col4"]
                        <-Map 7 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_127]
                            PartitionCols:_col3
                            Select Operator [SEL_126] (rows=74500295 width=295)
                              Output:["_col0","_col1","_col2","_col3","_col4"]
                              Filter Operator [FIL_125] (rows=74500295 width=291)
                                predicate:(c_current_hdemo_sk is not null and c_current_cdemo_sk is not null and c_current_addr_sk is not null)
                                TableScan [TS_5] (rows=80000000 width=291)
                                  default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_id","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk","c_first_name","c_last_name"]
                        <-Map 9 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_130]
                            PartitionCols:_col0
                            Select Operator [SEL_129] (rows=44643 width=4)
                              Output:["_col0"]
                              Filter Operator [FIL_128] (rows=44643 width=97)
                                predicate:(ca_city = 'Hopewell')
                                TableScan [TS_8] (rows=40000000 width=97)
                                  default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_city"]

