PREHOOK: query: explain
select  c_last_name
       ,c_first_name
       ,ca_city
       ,bought_city
       ,ss_ticket_number
       ,amt,profit 
 from
   (select ss_ticket_number
          ,ss_customer_sk
          ,ca_city bought_city
          ,sum(ss_coupon_amt) amt
          ,sum(ss_net_profit) profit
    from store_sales,date_dim,store,household_demographics,customer_address 
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and store_sales.ss_addr_sk = customer_address.ca_address_sk
    and (household_demographics.hd_dep_count = 2 or
         household_demographics.hd_vehicle_count= 1)
    and date_dim.d_dow in (6,0)
    and date_dim.d_year in (1998,1998+1,1998+2) 
    and store.s_city in ('Cedar Grove','Wildwood','Union','Salem','Highland Park') 
    group by ss_ticket_number,ss_customer_sk,ss_addr_sk,ca_city) dn,customer,customer_address current_addr
    where ss_customer_sk = c_customer_sk
      and customer.c_current_addr_sk = current_addr.ca_address_sk
      and current_addr.ca_city <> bought_city
  order by c_last_name
          ,c_first_name
          ,ca_city
          ,bought_city
          ,ss_ticket_number
  limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  c_last_name
       ,c_first_name
       ,ca_city
       ,bought_city
       ,ss_ticket_number
       ,amt,profit 
 from
   (select ss_ticket_number
          ,ss_customer_sk
          ,ca_city bought_city
          ,sum(ss_coupon_amt) amt
          ,sum(ss_net_profit) profit
    from store_sales,date_dim,store,household_demographics,customer_address 
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and store_sales.ss_addr_sk = customer_address.ca_address_sk
    and (household_demographics.hd_dep_count = 2 or
         household_demographics.hd_vehicle_count= 1)
    and date_dim.d_dow in (6,0)
    and date_dim.d_year in (1998,1998+1,1998+2) 
    and store.s_city in ('Cedar Grove','Wildwood','Union','Salem','Highland Park') 
    group by ss_ticket_number,ss_customer_sk,ss_addr_sk,ca_city) dn,customer,customer_address current_addr
    where ss_customer_sk = c_customer_sk
      and customer.c_current_addr_sk = current_addr.ca_address_sk
      and current_addr.ca_city <> bought_city
  order by c_last_name
          ,c_first_name
          ,ca_city
          ,bought_city
          ,ss_ticket_number
  limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 8 <- Reducer 13 (BROADCAST_EDGE)
Reducer 10 <- Map 14 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 15 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 6 <- Map 5 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 12 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_174]
        Limit [LIM_173] (rows=100 width=594)
          Number of rows:100
          Select Operator [SEL_172] (rows=8380115 width=594)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 3 [SIMPLE_EDGE]
            SHUFFLE [RS_45]
              Select Operator [SEL_44] (rows=8380115 width=594)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                Top N Key Operator [TNK_79] (rows=8380115 width=594)
                  keys:_col3, _col2, _col5, _col8, _col6,top n:100
                  Filter Operator [FIL_43] (rows=8380115 width=594)
                    predicate:(_col5 <> _col8)
                    Merge Join Operator [MERGEJOIN_145] (rows=8380115 width=594)
                      Conds:RS_40._col0=RS_171._col1(Inner),Output:["_col2","_col3","_col5","_col6","_col8","_col9","_col10"]
                    <-Reducer 2 [SIMPLE_EDGE]
                      SHUFFLE [RS_40]
                        PartitionCols:_col0
                        Merge Join Operator [MERGEJOIN_140] (rows=80000000 width=277)
                          Conds:RS_148._col1=RS_150._col0(Inner),Output:["_col0","_col2","_col3","_col5"]
                        <-Map 5 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_150]
                            PartitionCols:_col0
                            Select Operator [SEL_149] (rows=40000000 width=97)
                              Output:["_col0","_col1"]
                              TableScan [TS_3] (rows=40000000 width=97)
                                default@customer_address,current_addr,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_city"]
                        <-Map 1 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_148]
                            PartitionCols:_col1
                            Select Operator [SEL_147] (rows=80000000 width=188)
                              Output:["_col0","_col1","_col2","_col3"]
                              Filter Operator [FIL_146] (rows=80000000 width=188)
                                predicate:c_current_addr_sk is not null
                                TableScan [TS_0] (rows=80000000 width=188)
                                  default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_addr_sk","c_first_name","c_last_name"]
                    <-Reducer 7 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_171]
                        PartitionCols:_col1
                        Select Operator [SEL_170] (rows=8380115 width=321)
                          Output:["_col0","_col1","_col2","_col3","_col4"]
                          Group By Operator [GBY_169] (rows=8380115 width=321)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                          <-Reducer 6 [SIMPLE_EDGE]
                            SHUFFLE [RS_34]
                              PartitionCols:_col0, _col1, _col2, _col3
                              Group By Operator [GBY_33] (rows=8380115 width=321)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col8)","sum(_col9)"],keys:_col3, _col1, _col5, _col7
                                Merge Join Operator [MERGEJOIN_144] (rows=8380115 width=97)
                                  Conds:RS_151._col0=RS_30._col3(Inner),Output:["_col1","_col3","_col5","_col7","_col8","_col9"]
                                <-Map 5 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_151]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_149]
                                <-Reducer 11 [SIMPLE_EDGE]
                                  SHUFFLE [RS_30]
                                    PartitionCols:_col3
                                    Merge Join Operator [MERGEJOIN_143] (rows=8380115 width=4)
                                      Conds:RS_25._col2=RS_168._col0(Inner),Output:["_col1","_col3","_col5","_col6","_col7"]
                                    <-Map 15 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_168]
                                        PartitionCols:_col0
                                        Select Operator [SEL_167] (rows=1855 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_166] (rows=1855 width=12)
                                            predicate:((hd_vehicle_count = 1) or (hd_dep_count = 2))
                                            TableScan [TS_16] (rows=7200 width=12)
                                              default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_dep_count","hd_vehicle_count"]
                                    <-Reducer 10 [SIMPLE_EDGE]
                                      SHUFFLE [RS_25]
                                        PartitionCols:_col2
                                        Merge Join Operator [MERGEJOIN_142] (rows=32526589 width=90)
                                          Conds:RS_22._col4=RS_165._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col7"]
                                        <-Map 14 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_165]
                                            PartitionCols:_col0
                                            Select Operator [SEL_164] (rows=35 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_163] (rows=35 width=97)
                                                predicate:(s_city) IN ('Cedar Grove', 'Wildwood', 'Union', 'Salem', 'Highland Park')
                                                TableScan [TS_13] (rows=1704 width=97)
                                                  default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_city"]
                                        <-Reducer 9 [SIMPLE_EDGE]
                                          SHUFFLE [RS_22]
                                            PartitionCols:_col4
                                            Merge Join Operator [MERGEJOIN_141] (rows=196204013 width=218)
                                              Conds:RS_162._col0=RS_154._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                            <-Map 12 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_154]
                                                PartitionCols:_col0
                                                Select Operator [SEL_153] (rows=783 width=4)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_152] (rows=783 width=12)
                                                    predicate:((d_year) IN (1998, 1999, 2000) and (d_dow) IN (6, 0))
                                                    TableScan [TS_10] (rows=73049 width=12)
                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_dow"]
                                            <-Map 8 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_162]
                                                PartitionCols:_col0
                                                Select Operator [SEL_161] (rows=457565061 width=237)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                  Filter Operator [FIL_160] (rows=457565061 width=237)
                                                    predicate:(ss_sold_date_sk is not null and ss_addr_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_20_date_dim_d_date_sk_min) AND DynamicValue(RS_20_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_20_date_dim_d_date_sk_bloom_filter)))
                                                    TableScan [TS_7] (rows=575995635 width=237)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_ticket_number","ss_coupon_amt","ss_net_profit"]
                                                    <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_159]
                                                        Group By Operator [GBY_158] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_157]
                                                            Group By Operator [GBY_156] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_155] (rows=783 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_153]

