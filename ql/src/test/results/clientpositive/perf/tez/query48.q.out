PREHOOK: query: explain
select sum (ss_quantity)
 from store_sales, store, customer_demographics, customer_address, date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 1998
 and  
 (
  (
   cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 100.00 and 150.00  
   )
 or
  (
  cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 50.00 and 100.00   
  )
 or 
 (
  cd_demo_sk = ss_cdemo_sk
  and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 150.00 and 200.00  
 )
 )
 and
 (
  (
  ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('KY', 'GA', 'NM')
  and ss_net_profit between 0 and 2000  
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('MT', 'OR', 'IN')
  and ss_net_profit between 150 and 3000 
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('WI', 'MO', 'WV')
  and ss_net_profit between 50 and 25000 
  )
 )
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select sum (ss_quantity)
 from store_sales, store, customer_demographics, customer_address, date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 1998
 and  
 (
  (
   cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 100.00 and 150.00  
   )
 or
  (
  cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 50.00 and 100.00   
  )
 or 
 (
  cd_demo_sk = ss_cdemo_sk
  and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 150.00 and 200.00  
 )
 )
 and
 (
  (
  ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('KY', 'GA', 'NM')
  and ss_net_profit between 0 and 2000  
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('MT', 'OR', 'IN')
  and ss_net_profit between 150 and 3000 
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('WI', 'MO', 'WV')
  and ss_net_profit between 50 and 25000 
  )
 )
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 8 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 3 <- Map 9 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 10 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 11 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 7 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_118]
        Group By Operator [GBY_117] (rows=1 width=8)
          Output:["_col0"],aggregations:["sum(VALUE._col0)"]
        <-Reducer 5 [CUSTOM_SIMPLE_EDGE]
          PARTITION_ONLY_SHUFFLE [RS_30]
            Group By Operator [GBY_29] (rows=1 width=8)
              Output:["_col0"],aggregations:["sum(_col4)"]
              Merge Join Operator [MERGEJOIN_96] (rows=6953964 width=0)
                Conds:RS_25._col3=RS_116._col0(Inner),Output:["_col4"]
              <-Map 11 [SIMPLE_EDGE] vectorized
                SHUFFLE [RS_116]
                  PartitionCols:_col0
                  Select Operator [SEL_115] (rows=1704 width=4)
                    Output:["_col0"]
                    Filter Operator [FIL_114] (rows=1704 width=4)
                      predicate:s_store_sk is not null
                      TableScan [TS_12] (rows=1704 width=4)
                        default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk"]
              <-Reducer 4 [SIMPLE_EDGE]
                SHUFFLE [RS_25]
                  PartitionCols:_col3
                  Filter Operator [FIL_24] (rows=6953964 width=25)
                    predicate:((_col11 and _col5) or (_col12 and _col6) or (_col13 and _col7))
                    Merge Join Operator [MERGEJOIN_95] (rows=9271954 width=25)
                      Conds:RS_21._col2=RS_113._col0(Inner),Output:["_col3","_col4","_col5","_col6","_col7","_col11","_col12","_col13"]
                    <-Map 10 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_113]
                        PartitionCols:_col0
                        Select Operator [SEL_112] (rows=3529412 width=16)
                          Output:["_col0","_col1","_col2","_col3"]
                          Filter Operator [FIL_111] (rows=3529412 width=187)
                            predicate:((ca_state) IN ('KY', 'GA', 'NM', 'MT', 'OR', 'IN', 'WI', 'MO', 'WV') and (ca_country = 'United States') and ca_address_sk is not null)
                            TableScan [TS_9] (rows=40000000 width=187)
                              default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state","ca_country"]
                    <-Reducer 3 [SIMPLE_EDGE]
                      SHUFFLE [RS_21]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_94] (rows=9271954 width=14)
                          Conds:RS_18._col1=RS_110._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col6","_col7"]
                        <-Map 9 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_110]
                            PartitionCols:_col0
                            Select Operator [SEL_109] (rows=29552 width=4)
                              Output:["_col0"]
                              Filter Operator [FIL_108] (rows=29552 width=183)
                                predicate:((cd_marital_status = 'M') and (cd_education_status = '4 yr Degree') and cd_demo_sk is not null)
                                TableScan [TS_6] (rows=1861800 width=183)
                                  default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status","cd_education_status"]
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_18]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_93] (rows=159705894 width=27)
                              Conds:RS_107._col0=RS_99._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_99]
                                PartitionCols:_col0
                                Select Operator [SEL_98] (rows=652 width=4)
                                  Output:["_col0"]
                                  Filter Operator [FIL_97] (rows=652 width=8)
                                    predicate:((d_year = 1998) and d_date_sk is not null)
                                    TableScan [TS_3] (rows=73049 width=8)
                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_107]
                                PartitionCols:_col0
                                Select Operator [SEL_106] (rows=159705894 width=31)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                  Filter Operator [FIL_105] (rows=159705894 width=233)
                                    predicate:((ss_sales_price BETWEEN 100 AND 150 or ss_sales_price BETWEEN 50 AND 100 or ss_sales_price BETWEEN 150 AND 200) and ss_cdemo_sk is not null and ss_sold_date_sk is not null and ss_addr_sk is not null and ss_store_sk is not null and ((ss_sales_price >= 100) or (ss_sales_price <= 150) or (ss_sales_price >= 50) or (ss_sales_price <= 100) or (ss_sales_price >= 150) or (ss_sales_price <= 200)) and ((ss_net_profit >= 0) or (ss_net_profit <= 2000) or (ss_net_profit >= 150) or (ss_net_profit <= 3000) or (ss_net_profit >= 50) or (ss_net_profit <= 25000)) and ss_sold_date_sk BETWEEN DynamicValue(RS_16_date_dim_d_date_sk_min) AND DynamicValue(RS_16_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_16_date_dim_d_date_sk_bloom_filter)))
                                    TableScan [TS_0] (rows=575995635 width=233)
                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_cdemo_sk","ss_addr_sk","ss_store_sk","ss_quantity","ss_sales_price","ss_net_profit"]
                                    <-Reducer 8 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_104]
                                        Group By Operator [GBY_103] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_102]
                                            Group By Operator [GBY_101] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_100] (rows=652 width=4)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_98]

