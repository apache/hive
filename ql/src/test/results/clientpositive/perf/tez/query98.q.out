PREHOOK: query: explain
select i_item_desc 
      ,i_category 
      ,i_class 
      ,i_current_price
      ,sum(ss_ext_sales_price) as itemrevenue 
      ,sum(ss_ext_sales_price)*100/sum(sum(ss_ext_sales_price)) over
          (partition by i_class) as revenueratio
from	
	store_sales
    	,item 
    	,date_dim
where 
	ss_item_sk = i_item_sk 
  	and i_category in ('Jewelry', 'Sports', 'Books')
  	and ss_sold_date_sk = d_date_sk
	and d_date between cast('2001-01-12' as date) 
				and (cast('2001-01-12' as date) + 30 days)
group by 
	i_item_id
        ,i_item_desc 
        ,i_category
        ,i_class
        ,i_current_price
order by 
	i_category
        ,i_class
        ,i_item_id
        ,i_item_desc
        ,revenueratio
PREHOOK: type: QUERY
POSTHOOK: query: explain
select i_item_desc 
      ,i_category 
      ,i_class 
      ,i_current_price
      ,sum(ss_ext_sales_price) as itemrevenue 
      ,sum(ss_ext_sales_price)*100/sum(sum(ss_ext_sales_price)) over
          (partition by i_class) as revenueratio
from	
	store_sales
    	,item 
    	,date_dim
where 
	ss_item_sk = i_item_sk 
  	and i_category in ('Jewelry', 'Sports', 'Books')
  	and ss_sold_date_sk = d_date_sk
	and d_date between cast('2001-01-12' as date) 
				and (cast('2001-01-12' as date) + 30 days)
group by 
	i_item_id
        ,i_item_desc 
        ,i_category
        ,i_class
        ,i_current_price
order by 
	i_category
        ,i_class
        ,i_item_id
        ,i_item_desc
        ,revenueratio
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 3 <- Map 8 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_54]
        Select Operator [SEL_53] (rows=348477374 width=88)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
        <-Reducer 5 [SIMPLE_EDGE] vectorized
          SHUFFLE [RS_52]
            Select Operator [SEL_51] (rows=348477374 width=88)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
              PTF Operator [PTF_50] (rows=348477374 width=88)
                Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 ASC NULLS FIRST","partition by:":"_col1"}]
                Select Operator [SEL_49] (rows=348477374 width=88)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                <-Reducer 4 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_48]
                    PartitionCols:_col1
                    Group By Operator [GBY_47] (rows=348477374 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                    <-Reducer 3 [SIMPLE_EDGE]
                      SHUFFLE [RS_17]
                        PartitionCols:_col0, _col1, _col2, _col3, _col4
                        Group By Operator [GBY_16] (rows=696954748 width=88)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)"],keys:_col10, _col9, _col6, _col7, _col8
                          Merge Join Operator [MERGEJOIN_37] (rows=696954748 width=88)
                            Conds:RS_12._col1=RS_46._col0(Inner),Output:["_col2","_col6","_col7","_col8","_col9","_col10"]
                          <-Map 8 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_46]
                              PartitionCols:_col0
                              Select Operator [SEL_45] (rows=231000 width=1436)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                Filter Operator [FIL_44] (rows=231000 width=1436)
                                  predicate:((i_category) IN ('Jewelry', 'Sports', 'Books') and i_item_sk is not null)
                                  TableScan [TS_6] (rows=462000 width=1436)
                                    default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_id","i_item_desc","i_current_price","i_class","i_category"]
                          <-Reducer 2 [SIMPLE_EDGE]
                            SHUFFLE [RS_12]
                              PartitionCols:_col1
                              Merge Join Operator [MERGEJOIN_36] (rows=633595212 width=88)
                                Conds:RS_40._col0=RS_43._col0(Inner),Output:["_col1","_col2"]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_40]
                                  PartitionCols:_col0
                                  Select Operator [SEL_39] (rows=575995635 width=88)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_38] (rows=575995635 width=88)
                                      predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                      TableScan [TS_0] (rows=575995635 width=88)
                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_ext_sales_price"]
                              <-Map 7 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_43]
                                  PartitionCols:_col0
                                  Select Operator [SEL_42] (rows=8116 width=1119)
                                    Output:["_col0"]
                                    Filter Operator [FIL_41] (rows=8116 width=1119)
                                      predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'2001-01-12 00:00:00' AND TIMESTAMP'2001-02-11 00:00:00' and d_date_sk is not null)
                                      TableScan [TS_3] (rows=73049 width=1119)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date"]

