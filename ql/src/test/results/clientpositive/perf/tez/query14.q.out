Warning: Shuffle Join MERGEJOIN[1178][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[1185][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 16' is a cross product
Warning: Shuffle Join MERGEJOIN[1192][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 22' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE)
Map 61 <- Reducer 43 (BROADCAST_EDGE)
Map 62 <- Reducer 49 (BROADCAST_EDGE)
Map 63 <- Reducer 68 (BROADCAST_EDGE)
Map 69 <- Reducer 74 (BROADCAST_EDGE)
Map 75 <- Reducer 17 (BROADCAST_EDGE)
Map 76 <- Reducer 23 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 10 (SIMPLE_EDGE), Map 75 (SIMPLE_EDGE)
Reducer 13 <- Map 59 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 55 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 17 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 10 (SIMPLE_EDGE), Map 76 (SIMPLE_EDGE)
Reducer 19 <- Map 59 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE), Reducer 37 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (CUSTOM_SIMPLE_EDGE), Reducer 58 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 23 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 10 (SIMPLE_EDGE), Map 60 (SIMPLE_EDGE)
Reducer 25 <- Map 59 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 28 <- Union 27 (SIMPLE_EDGE)
Reducer 29 <- Map 59 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 3 <- Map 59 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 25 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 32 <- Union 31 (SIMPLE_EDGE)
Reducer 33 <- Map 59 (SIMPLE_EDGE), Reducer 32 (SIMPLE_EDGE)
Reducer 34 <- Reducer 25 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 36 <- Union 35 (SIMPLE_EDGE)
Reducer 37 <- Map 59 (SIMPLE_EDGE), Reducer 36 (SIMPLE_EDGE)
Reducer 38 <- Map 10 (SIMPLE_EDGE), Map 61 (SIMPLE_EDGE)
Reducer 39 <- Map 59 (SIMPLE_EDGE), Reducer 38 (SIMPLE_EDGE)
Reducer 4 <- Reducer 29 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Reducer 39 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 41 <- Reducer 39 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 42 <- Reducer 39 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 43 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 44 <- Map 10 (SIMPLE_EDGE), Map 62 (SIMPLE_EDGE)
Reducer 45 <- Map 59 (SIMPLE_EDGE), Reducer 44 (SIMPLE_EDGE)
Reducer 46 <- Reducer 45 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 47 <- Reducer 45 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 48 <- Reducer 45 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 49 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 50 <- Map 10 (SIMPLE_EDGE), Map 60 (SIMPLE_EDGE), Union 51 (CONTAINS)
Reducer 52 <- Union 51 (CUSTOM_SIMPLE_EDGE)
Reducer 53 <- Map 10 (SIMPLE_EDGE), Map 60 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 55 <- Union 54 (CUSTOM_SIMPLE_EDGE)
Reducer 56 <- Map 10 (SIMPLE_EDGE), Map 60 (SIMPLE_EDGE), Union 57 (CONTAINS)
Reducer 58 <- Union 57 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE), Reducer 52 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 64 <- Map 63 (SIMPLE_EDGE), Map 67 (SIMPLE_EDGE), Union 51 (CONTAINS)
Reducer 65 <- Map 63 (SIMPLE_EDGE), Map 67 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 66 <- Map 63 (SIMPLE_EDGE), Map 67 (SIMPLE_EDGE), Union 57 (CONTAINS)
Reducer 68 <- Map 67 (CUSTOM_SIMPLE_EDGE)
Reducer 70 <- Map 69 (SIMPLE_EDGE), Map 73 (SIMPLE_EDGE), Union 51 (CONTAINS)
Reducer 71 <- Map 69 (SIMPLE_EDGE), Map 73 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 72 <- Map 69 (SIMPLE_EDGE), Map 73 (SIMPLE_EDGE), Union 57 (CONTAINS)
Reducer 74 <- Map 73 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_1365]
        Limit [LIM_1364] (rows=100 width=223)
          Number of rows:100
          Select Operator [SEL_1363] (rows=304320 width=222)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1362]
              Select Operator [SEL_1361] (rows=304320 width=222)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1360] (rows=304320 width=230)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 7 [SIMPLE_EDGE]
                  <-Reducer 16 [CONTAINS]
                    Reduce Output Operator [RS_1191]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1190] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1189] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1187] (rows=40576 width=222)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1186] (rows=40576 width=243)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1185] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1377]
                                  Filter Operator [FIL_1376] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1375] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_244]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_243] (rows=486912 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_241] (rows=7790806 width=106)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1173] (rows=7790806 width=106)
                                              Conds:RS_238._col1=RS_239._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 13 [SIMPLE_EDGE]
                                              SHUFFLE [RS_238]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1149] (rows=7790806 width=110)
                                                  Conds:RS_233._col1=RS_1345._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 59 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1345]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1336] (rows=462000 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1327] (rows=462000 width=15)
                                                        predicate:i_item_sk is not null
                                                        TableScan [TS_6] (rows=462000 width=15)
                                                          default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                <-Reducer 12 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_233]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1148] (rows=7790806 width=98)
                                                      Conds:RS_1370._col0=RS_1295._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1295]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1291] (rows=50 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_1289] (rows=50 width=12)
                                                            predicate:((d_year = 2000) and (d_moy = 11) and d_date_sk is not null)
                                                            TableScan [TS_3] (rows=73049 width=12)
                                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                    <-Map 75 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1370]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1369] (rows=286549727 width=123)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1368] (rows=286549727 width=123)
                                                            predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_231_date_dim_d_date_sk_min) AND DynamicValue(RS_231_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_231_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_146] (rows=287989836 width=123)
                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                            <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1367]
                                                                Group By Operator [GBY_1366] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_1313]
                                                                    Group By Operator [GBY_1308] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1296] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1291]
                                            <-Reducer 33 [SIMPLE_EDGE]
                                              SHUFFLE [RS_239]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_237] (rows=362 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1156] (rows=724 width=4)
                                                    Conds:RS_1346._col1, _col2, _col3=RS_1374._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 59 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1346]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1337] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1328] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_6]
                                                  <-Reducer 32 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1374]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1373] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1372] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1371] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 31 [SIMPLE_EDGE]
                                                            <-Reducer 30 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1411]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1410] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1409] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 25 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_175]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_28] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1139] (rows=14628613 width=11)
                                                                          Conds:RS_24._col1=RS_1342._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 59 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1342]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1333] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1324] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_6]
                                                                        <-Reducer 24 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_24]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1138] (rows=14736682 width=4)
                                                                              Conds:RS_1402._col0=RS_1299._col0(Inner),Output:["_col1"]
                                                                            <-Map 10 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1299]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1292] (rows=1957 width=4)
                                                                                  Output:["_col0"]
                                                                                  Filter Operator [FIL_1290] (rows=1957 width=8)
                                                                                    predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                                                                     Please refer to the previous TableScan [TS_3]
                                                                            <-Map 60 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1402]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1400] (rows=550076554 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1398] (rows=550076554 width=7)
                                                                                    predicate:(ss_sold_date_sk is not null and ss_item_sk is not null)
                                                                                    TableScan [TS_12] (rows=575995635 width=7)
                                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                            <-Reducer 41 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1425]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1424] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1423] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 39 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_195]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_48] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1141] (rows=7620440 width=11)
                                                                          Conds:RS_44._col1=RS_1343._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 59 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1343]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1334] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1325] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_6]
                                                                        <-Reducer 38 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_44]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1140] (rows=7676736 width=4)
                                                                              Conds:RS_1419._col0=RS_1300._col0(Inner),Output:["_col1"]
                                                                            <-Map 10 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1300]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1292]
                                                                            <-Map 61 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1419]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1418] (rows=286549727 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1417] (rows=286549727 width=7)
                                                                                    predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_42_d2_d_date_sk_min) AND DynamicValue(RS_42_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_42_d2_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_32] (rows=287989836 width=7)
                                                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                    <-Reducer 43 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1416]
                                                                                        Group By Operator [GBY_1415] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1315]
                                                                                            Group By Operator [GBY_1310] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1301] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1292]
                                                            <-Reducer 47 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1439]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1438] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1437] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 45 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_216]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_69] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1143] (rows=3828623 width=11)
                                                                          Conds:RS_65._col1=RS_1344._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 59 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1344]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1335] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1326] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_6]
                                                                        <-Reducer 44 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_65]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1142] (rows=3856907 width=4)
                                                                              Conds:RS_1433._col0=RS_1302._col0(Inner),Output:["_col1"]
                                                                            <-Map 10 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1302]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1292]
                                                                            <-Map 62 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1433]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1432] (rows=143966864 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1431] (rows=143966864 width=7)
                                                                                    predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_63_d3_d_date_sk_min) AND DynamicValue(RS_63_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_63_d3_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_53] (rows=144002668 width=7)
                                                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                    <-Reducer 49 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1430]
                                                                                        Group By Operator [GBY_1429] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1316]
                                                                                            Group By Operator [GBY_1311] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1303] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1292]
                              <-Reducer 55 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1381]
                                  Select Operator [SEL_1380] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1379] (rows=1 width=120)
                                      predicate:CAST( (_col0 / _col1) AS decimal(22,6)) is not null
                                      Group By Operator [GBY_1378] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 54 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 53 [CONTAINS]
                                          Reduce Output Operator [RS_1246]
                                            Group By Operator [GBY_1245] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1244] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1242] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1241] (rows=14736682 width=0)
                                                    Conds:RS_1404._col0=RS_1305._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1305]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1292]
                                                  <-Map 60 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1404]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1401] (rows=550076554 width=114)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1399] (rows=550076554 width=114)
                                                          predicate:(ss_sold_date_sk is not null and ss_sold_date_sk is not null)
                                                           Please refer to the previous TableScan [TS_12]
                                        <-Reducer 65 [CONTAINS]
                                          Reduce Output Operator [RS_1264]
                                            Group By Operator [GBY_1263] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1262] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1260] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1259] (rows=7676736 width=94)
                                                    Conds:RS_1456._col0=RS_1447._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1447]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1444] (rows=1957 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1443] (rows=1957 width=8)
                                                          predicate:(d_year BETWEEN 1998 AND 2000 and d_date_sk is not null)
                                                          TableScan [TS_115] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Map 63 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1456]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1454] (rows=286549727 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1453] (rows=286549727 width=119)
                                                          predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_119_date_dim_d_date_sk_min) AND DynamicValue(RS_119_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_119_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_112] (rows=287989836 width=119)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                                          <-Reducer 68 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1452]
                                                              Group By Operator [GBY_1451] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 67 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1450]
                                                                  Group By Operator [GBY_1449] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1446] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1444]
                                        <-Reducer 71 [CONTAINS]
                                          Reduce Output Operator [RS_1282]
                                            Group By Operator [GBY_1281] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1280] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1278] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1277] (rows=3856907 width=114)
                                                    Conds:RS_1471._col0=RS_1462._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1462]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1459] (rows=1957 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1458] (rows=1957 width=8)
                                                          predicate:(d_year BETWEEN 1998 AND 2000 and d_date_sk is not null)
                                                          TableScan [TS_126] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Map 69 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1471]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1469] (rows=143966864 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1468] (rows=143966864 width=119)
                                                          predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_130_date_dim_d_date_sk_min) AND DynamicValue(RS_130_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_130_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_123] (rows=144002668 width=119)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                                          <-Reducer 74 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1467]
                                                              Group By Operator [GBY_1466] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 73 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1465]
                                                                  Group By Operator [GBY_1464] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1461] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1459]
                  <-Reducer 22 [CONTAINS]
                    Reduce Output Operator [RS_1198]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1197] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1196] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1194] (rows=40576 width=218)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1193] (rows=40576 width=243)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1192] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1393]
                                  Filter Operator [FIL_1392] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1391] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 20 [SIMPLE_EDGE]
                                      SHUFFLE [RS_391]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_390] (rows=243456 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_388] (rows=3942084 width=126)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1174] (rows=3942084 width=126)
                                              Conds:RS_385._col1=RS_386._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 19 [SIMPLE_EDGE]
                                              SHUFFLE [RS_385]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1161] (rows=3942084 width=130)
                                                  Conds:RS_380._col1=RS_1347._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 59 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1347]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1338] (rows=462000 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1329] (rows=462000 width=15)
                                                        predicate:i_item_sk is not null
                                                         Please refer to the previous TableScan [TS_6]
                                                <-Reducer 18 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_380]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1160] (rows=3942084 width=118)
                                                      Conds:RS_1386._col0=RS_1297._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1297]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1291]
                                                    <-Map 76 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1386]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1385] (rows=143966864 width=123)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1384] (rows=143966864 width=123)
                                                            predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_378_date_dim_d_date_sk_min) AND DynamicValue(RS_378_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_378_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_293] (rows=144002668 width=123)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                            <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1383]
                                                                Group By Operator [GBY_1382] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_1314]
                                                                    Group By Operator [GBY_1309] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1298] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1291]
                                            <-Reducer 37 [SIMPLE_EDGE]
                                              SHUFFLE [RS_386]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_384] (rows=362 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1168] (rows=724 width=4)
                                                    Conds:RS_1348._col1, _col2, _col3=RS_1390._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 59 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1348]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1339] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1330] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_6]
                                                  <-Reducer 36 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1390]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1389] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1388] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1387] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 35 [SIMPLE_EDGE]
                                                            <-Reducer 34 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1414]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1413] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1412] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 25 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_322]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_28]
                                                            <-Reducer 42 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1428]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1427] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1426] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 39 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_342]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_48]
                                                            <-Reducer 48 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1442]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1441] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1440] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 45 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_363]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_69]
                              <-Reducer 58 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1397]
                                  Select Operator [SEL_1396] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1395] (rows=1 width=120)
                                      predicate:CAST( (_col0 / _col1) AS decimal(22,6)) is not null
                                      Group By Operator [GBY_1394] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 57 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 56 [CONTAINS]
                                          Reduce Output Operator [RS_1252]
                                            Group By Operator [GBY_1251] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1250] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1248] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1247] (rows=14736682 width=0)
                                                    Conds:RS_1405._col0=RS_1306._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1306]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1292]
                                                  <-Map 60 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1405]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1401]
                                        <-Reducer 66 [CONTAINS]
                                          Reduce Output Operator [RS_1270]
                                            Group By Operator [GBY_1269] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1268] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1266] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1265] (rows=7676736 width=94)
                                                    Conds:RS_1457._col0=RS_1448._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1448]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1444]
                                                  <-Map 63 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1457]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1454]
                                        <-Reducer 72 [CONTAINS]
                                          Reduce Output Operator [RS_1288]
                                            Group By Operator [GBY_1287] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1286] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1284] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1283] (rows=3856907 width=114)
                                                    Conds:RS_1472._col0=RS_1463._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1463]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1459]
                                                  <-Map 69 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1472]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1469]
                  <-Reducer 6 [CONTAINS]
                    Reduce Output Operator [RS_1184]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1183] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1182] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1180] (rows=40576 width=220)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1179] (rows=40576 width=243)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1178] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1355]
                                  Filter Operator [FIL_1354] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1353] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 4 [SIMPLE_EDGE]
                                      SHUFFLE [RS_98]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_97] (rows=121728 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_95] (rows=15062131 width=11)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1172] (rows=15062131 width=11)
                                              Conds:RS_92._col1=RS_93._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 29 [SIMPLE_EDGE]
                                              SHUFFLE [RS_93]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_91] (rows=362 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1144] (rows=724 width=4)
                                                    Conds:RS_1341._col1, _col2, _col3=RS_1352._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 59 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1341]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1332] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1323] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_6]
                                                  <-Reducer 28 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1352]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1351] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1350] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1349] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 27 [SIMPLE_EDGE]
                                                            <-Reducer 26 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1408]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1407] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1406] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 25 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_29]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_28]
                                                            <-Reducer 40 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1422]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1421] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1420] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 39 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_49]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_48]
                                                            <-Reducer 46 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1436]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1435] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1434] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 45 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_70]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_69]
                                            <-Reducer 3 [SIMPLE_EDGE]
                                              SHUFFLE [RS_92]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1137] (rows=15062131 width=15)
                                                  Conds:RS_87._col1=RS_1340._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 59 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1340]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1331] (rows=462000 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1322] (rows=462000 width=15)
                                                        predicate:i_item_sk is not null
                                                         Please refer to the previous TableScan [TS_6]
                                                <-Reducer 2 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_87]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1136] (rows=15062131 width=4)
                                                      Conds:RS_1321._col0=RS_1293._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1293]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1291]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1321]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1320] (rows=550076554 width=118)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1319] (rows=550076554 width=118)
                                                            predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_85_date_dim_d_date_sk_min) AND DynamicValue(RS_85_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_85_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_0] (rows=575995635 width=118)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                            <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1318]
                                                                Group By Operator [GBY_1317] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_1312]
                                                                    Group By Operator [GBY_1307] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1294] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1291]
                              <-Reducer 52 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1359]
                                  Select Operator [SEL_1358] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1357] (rows=1 width=120)
                                      predicate:CAST( (_col0 / _col1) AS decimal(22,6)) is not null
                                      Group By Operator [GBY_1356] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 51 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 50 [CONTAINS]
                                          Reduce Output Operator [RS_1240]
                                            Group By Operator [GBY_1239] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1238] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1236] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1235] (rows=14736682 width=0)
                                                    Conds:RS_1403._col0=RS_1304._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1304]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1292]
                                                  <-Map 60 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1403]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1401]
                                        <-Reducer 64 [CONTAINS]
                                          Reduce Output Operator [RS_1258]
                                            Group By Operator [GBY_1257] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1256] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1254] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1253] (rows=7676736 width=94)
                                                    Conds:RS_1455._col0=RS_1445._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1445]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1444]
                                                  <-Map 63 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1455]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1454]
                                        <-Reducer 70 [CONTAINS]
                                          Reduce Output Operator [RS_1276]
                                            Group By Operator [GBY_1275] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1274] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1272] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1271] (rows=3856907 width=114)
                                                    Conds:RS_1470._col0=RS_1460._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1460]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1459]
                                                  <-Map 69 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1470]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1469]

